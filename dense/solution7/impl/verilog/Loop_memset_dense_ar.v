// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module Loop_memset_dense_ar (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        dense_array_address0,
        dense_array_ce0,
        dense_array_we0,
        dense_array_d0,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_pp0_stage0 = 6'd8;
parameter    ap_ST_fsm_pp0_stage1 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
output  [3:0] dense_array_address0;
output   dense_array_ce0;
output   dense_array_we0;
output  [31:0] dense_array_d0;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dense_array_address0;
reg dense_array_ce0;
reg dense_array_we0;
reg[31:0] dense_array_d0;
reg flat_array_ce0;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg   [10:0] f_0_reg_130;
reg   [31:0] w_sum_0_reg_141;
wire   [3:0] add_ln10_fu_171_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_183_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] d_fu_189_p2;
reg   [3:0] d_reg_272;
wire   [63:0] zext_ln21_fu_195_p1;
reg   [63:0] zext_ln21_reg_277;
wire   [14:0] zext_ln19_fu_199_p1;
reg   [14:0] zext_ln19_reg_282;
wire   [0:0] icmp_ln19_fu_203_p2;
reg   [0:0] icmp_ln19_reg_287;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln19_reg_287_pp0_iter1_reg;
wire   [10:0] f_fu_209_p2;
reg   [10:0] f_reg_291;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_159_p2;
wire   [31:0] grp_fu_154_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] phi_ln10_reg_108;
reg    ap_block_state1;
wire   [0:0] icmp_ln10_fu_177_p2;
reg   [3:0] d_0_reg_119;
wire    ap_CS_fsm_state8;
reg   [10:0] ap_phi_mux_f_0_phi_fu_134_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln10_fu_166_p1;
wire   [63:0] zext_ln21_4_fu_255_p1;
wire   [63:0] zext_ln21_1_fu_215_p1;
wire    ap_block_pp0_stage1;
wire   [13:0] tmp_fu_220_p3;
wire   [11:0] tmp_1_fu_232_p3;
wire   [14:0] zext_ln21_3_fu_240_p1;
wire   [14:0] zext_ln21_2_fu_228_p1;
wire   [14:0] add_ln21_fu_244_p2;
wire   [14:0] add_ln21_1_fu_250_p2;
reg   [5:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

Loop_memset_densebkb #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_fadd_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w_sum_0_reg_141),
    .din1(grp_fu_159_p2),
    .ce(1'b1),
    .dout(grp_fu_154_p2)
);

dense_fmul_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .ce(1'b1),
    .dout(grp_fu_159_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln14_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln14_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln14_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_177_p2 == 1'd1))) begin
        d_0_reg_119 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_0_reg_119 <= d_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_287 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_130 <= f_reg_291;
    end else if (((icmp_ln14_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_130 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_177_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln10_reg_108 <= add_ln10_fu_171_p2;
    end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln10_reg_108 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_reg_287_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_0_reg_141 <= grp_fu_154_p2;
    end else if (((icmp_ln14_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        w_sum_0_reg_141 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_272 <= d_fu_189_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_reg_291 <= f_fu_209_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln19_reg_287 <= icmp_ln19_fu_203_p2;
        icmp_ln19_reg_287_pp0_iter1_reg <= icmp_ln19_reg_287;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln19_reg_282[3 : 0] <= zext_ln19_fu_199_p1[3 : 0];
        zext_ln21_reg_277[3 : 0] <= zext_ln21_fu_195_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_203_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_287 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_134_p4 = f_reg_291;
    end else begin
        ap_phi_mux_f_0_phi_fu_134_p4 = f_0_reg_130;
    end
end

always @ (*) begin
    if (((icmp_ln14_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_array_address0 = zext_ln21_reg_277;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln10_fu_166_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_array_d0 = w_sum_0_reg_141;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_177_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln14_fu_183_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln19_fu_203_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln19_fu_203_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_171_p2 = (phi_ln10_reg_108 + 4'd1);

assign add_ln21_1_fu_250_p2 = (add_ln21_fu_244_p2 + zext_ln19_reg_282);

assign add_ln21_fu_244_p2 = (zext_ln21_3_fu_240_p1 + zext_ln21_2_fu_228_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_fu_189_p2 = (d_0_reg_119 + 4'd1);

assign dense_weights_address0 = zext_ln21_4_fu_255_p1;

assign f_fu_209_p2 = (ap_phi_mux_f_0_phi_fu_134_p4 + 11'd1);

assign flat_array_address0 = zext_ln21_1_fu_215_p1;

assign icmp_ln10_fu_177_p2 = ((phi_ln10_reg_108 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_183_p2 = ((d_0_reg_119 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_203_p2 = ((ap_phi_mux_f_0_phi_fu_134_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign tmp_1_fu_232_p3 = {{ap_phi_mux_f_0_phi_fu_134_p4}, {1'd0}};

assign tmp_fu_220_p3 = {{ap_phi_mux_f_0_phi_fu_134_p4}, {3'd0}};

assign zext_ln10_fu_166_p1 = phi_ln10_reg_108;

assign zext_ln19_fu_199_p1 = d_0_reg_119;

assign zext_ln21_1_fu_215_p1 = ap_phi_mux_f_0_phi_fu_134_p4;

assign zext_ln21_2_fu_228_p1 = tmp_fu_220_p3;

assign zext_ln21_3_fu_240_p1 = tmp_1_fu_232_p3;

assign zext_ln21_4_fu_255_p1 = add_ln21_1_fu_250_p2;

assign zext_ln21_fu_195_p1 = d_0_reg_119;

always @ (posedge ap_clk) begin
    zext_ln21_reg_277[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_282[14:4] <= 11'b00000000000;
end

endmodule //Loop_memset_dense_ar
