// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.049650,HLS_SYN_LAT=32047,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=68,HLS_SYN_FF=5395,HLS_SYN_LUT=18987,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        prediction_address1,
        prediction_ce1,
        prediction_we1,
        prediction_d1
);

parameter    ap_ST_fsm_state1 = 39'd1;
parameter    ap_ST_fsm_state2 = 39'd2;
parameter    ap_ST_fsm_pp0_stage0 = 39'd4;
parameter    ap_ST_fsm_pp0_stage1 = 39'd8;
parameter    ap_ST_fsm_state7 = 39'd16;
parameter    ap_ST_fsm_state8 = 39'd32;
parameter    ap_ST_fsm_state9 = 39'd64;
parameter    ap_ST_fsm_state10 = 39'd128;
parameter    ap_ST_fsm_state11 = 39'd256;
parameter    ap_ST_fsm_state12 = 39'd512;
parameter    ap_ST_fsm_state13 = 39'd1024;
parameter    ap_ST_fsm_state14 = 39'd2048;
parameter    ap_ST_fsm_state15 = 39'd4096;
parameter    ap_ST_fsm_state16 = 39'd8192;
parameter    ap_ST_fsm_state17 = 39'd16384;
parameter    ap_ST_fsm_state18 = 39'd32768;
parameter    ap_ST_fsm_state19 = 39'd65536;
parameter    ap_ST_fsm_state20 = 39'd131072;
parameter    ap_ST_fsm_state21 = 39'd262144;
parameter    ap_ST_fsm_state22 = 39'd524288;
parameter    ap_ST_fsm_state23 = 39'd1048576;
parameter    ap_ST_fsm_state24 = 39'd2097152;
parameter    ap_ST_fsm_state25 = 39'd4194304;
parameter    ap_ST_fsm_state26 = 39'd8388608;
parameter    ap_ST_fsm_state27 = 39'd16777216;
parameter    ap_ST_fsm_state28 = 39'd33554432;
parameter    ap_ST_fsm_state29 = 39'd67108864;
parameter    ap_ST_fsm_state30 = 39'd134217728;
parameter    ap_ST_fsm_state31 = 39'd268435456;
parameter    ap_ST_fsm_state32 = 39'd536870912;
parameter    ap_ST_fsm_state33 = 39'd1073741824;
parameter    ap_ST_fsm_state34 = 39'd2147483648;
parameter    ap_ST_fsm_state35 = 39'd4294967296;
parameter    ap_ST_fsm_state36 = 39'd8589934592;
parameter    ap_ST_fsm_state37 = 39'd17179869184;
parameter    ap_ST_fsm_state38 = 39'd34359738368;
parameter    ap_ST_fsm_state39 = 39'd68719476736;
parameter    ap_ST_fsm_state40 = 39'd137438953472;
parameter    ap_ST_fsm_state41 = 39'd274877906944;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [3:0] prediction_address1;
output   prediction_ce1;
output   prediction_we1;
output  [31:0] prediction_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg[3:0] prediction_address0;
reg prediction_ce0;
reg prediction_we0;
reg[31:0] prediction_d0;
reg[3:0] prediction_address1;
reg prediction_ce1;
reg prediction_we1;
reg[31:0] prediction_d1;

(* fsm_encoding = "none" *) reg   [38:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg   [13:0] indvar_flatten_reg_330;
reg   [3:0] d_0_reg_341;
reg   [10:0] f_0_reg_352;
reg   [31:0] w_sum_0_reg_363;
wire   [31:0] grp_fu_375_p2;
reg   [31:0] reg_476;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln11_reg_642;
reg   [0:0] icmp_ln11_reg_642_pp0_iter1_reg;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state31;
wire   [31:0] dense_array_q0;
reg   [31:0] reg_492;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_430_p2;
reg   [31:0] reg_498;
wire   [3:0] add_ln8_fu_504_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_515_p2;
wire   [0:0] icmp_ln11_fu_521_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [13:0] add_ln11_fu_527_p2;
reg   [13:0] add_ln11_reg_646;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln16_fu_539_p2;
reg   [0:0] icmp_ln16_reg_651;
wire   [10:0] select_ln18_fu_545_p3;
reg   [10:0] select_ln18_reg_656;
wire   [3:0] select_ln18_2_fu_553_p3;
reg   [3:0] select_ln18_2_reg_661;
reg   [3:0] select_ln18_2_reg_661_pp0_iter1_reg;
wire   [10:0] f_fu_611_p2;
reg   [10:0] f_reg_687;
wire   [31:0] select_ln18_1_fu_616_p3;
wire   [31:0] grp_fu_381_p2;
wire   [0:0] icmp_ln16_1_fu_624_p2;
reg   [0:0] icmp_ln16_1_reg_703;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state9;
reg   [31:0] dense_array_load_1_reg_717;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_reg_722;
wire    ap_CS_fsm_state11;
reg   [31:0] dense_array_load_3_reg_738;
wire    ap_CS_fsm_state14;
reg   [31:0] dense_array_load_4_reg_749;
wire    ap_CS_fsm_state16;
reg   [31:0] dense_array_load_5_reg_760;
wire    ap_CS_fsm_state18;
reg   [31:0] dense_array_load_6_reg_771;
wire    ap_CS_fsm_state20;
reg   [31:0] dense_array_load_7_reg_782;
wire    ap_CS_fsm_state22;
reg   [31:0] dense_array_load_8_reg_793;
wire    ap_CS_fsm_state24;
reg   [31:0] dense_array_load_9_reg_804;
wire    ap_CS_fsm_state26;
wire   [31:0] grp_fu_436_p2;
reg   [31:0] tmp_4_2_reg_810;
wire   [31:0] grp_fu_441_p2;
reg   [31:0] tmp_4_3_reg_815;
wire   [31:0] grp_fu_446_p2;
reg   [31:0] tmp_4_4_reg_820;
wire   [31:0] grp_fu_451_p2;
reg   [31:0] tmp_4_5_reg_825;
wire   [31:0] grp_fu_456_p2;
reg   [31:0] tmp_4_6_reg_830;
wire   [31:0] grp_fu_461_p2;
reg   [31:0] tmp_4_7_reg_835;
wire   [31:0] grp_fu_466_p2;
reg   [31:0] tmp_4_8_reg_840;
wire   [31:0] grp_fu_471_p2;
reg   [31:0] tmp_4_9_reg_845;
wire   [31:0] grp_fu_398_p2;
reg   [31:0] tmp_5_2_reg_850;
wire    ap_CS_fsm_state37;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tmp_5_3_reg_855;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] tmp_5_4_reg_860;
wire   [31:0] grp_fu_410_p2;
reg   [31:0] tmp_5_5_reg_865;
wire   [31:0] grp_fu_414_p2;
reg   [31:0] tmp_5_6_reg_870;
wire   [31:0] grp_fu_418_p2;
reg   [31:0] tmp_5_7_reg_875;
wire   [31:0] grp_fu_422_p2;
reg   [31:0] tmp_5_8_reg_880;
wire   [31:0] grp_fu_426_p2;
reg   [31:0] tmp_5_9_reg_885;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [31:0] dense_array_d0;
reg   [3:0] phi_ln8_reg_319;
reg   [13:0] ap_phi_mux_indvar_flatten_phi_fu_334_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_d_0_phi_fu_345_p4;
reg   [10:0] ap_phi_mux_f_0_phi_fu_356_p4;
wire   [63:0] zext_ln8_fu_510_p1;
wire   [63:0] zext_ln18_4_fu_606_p1;
wire   [63:0] zext_ln18_1_fu_565_p1;
wire   [63:0] zext_ln18_fu_629_p1;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_388_p2;
wire   [31:0] grp_fu_393_p2;
reg   [31:0] grp_fu_375_p0;
reg   [31:0] grp_fu_375_p1;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state32;
reg   [31:0] grp_fu_430_p1;
wire   [3:0] d_fu_533_p2;
wire   [13:0] tmp_12_fu_570_p3;
wire   [11:0] tmp_13_fu_582_p3;
wire   [14:0] zext_ln18_3_fu_590_p1;
wire   [14:0] zext_ln18_2_fu_578_p1;
wire   [14:0] add_ln18_fu_594_p2;
wire   [14:0] zext_ln17_fu_561_p1;
wire   [14:0] add_ln18_1_fu_600_p2;
reg   [38:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 39'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(dense_array_d0),
    .q0(dense_array_q0)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_375_p0),
    .din1(grp_fu_375_p1),
    .ce(1'b1),
    .dout(grp_fu_375_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .ce(1'b1),
    .dout(grp_fu_381_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_722),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_388_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_498),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_393_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_2_reg_810),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_398_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_3_reg_815),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_4_reg_820),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_5_reg_825),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_410_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_6_reg_830),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_414_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_7_reg_835),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_418_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_8_reg_840),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_422_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_4_9_reg_845),
    .din1(reg_476),
    .ce(1'b1),
    .dout(grp_fu_426_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_430_p1),
    .ce(1'b1),
    .dout(grp_fu_430_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(reg_492),
    .ce(1'b1),
    .dout(grp_fu_436_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_3_reg_738),
    .ce(1'b1),
    .dout(grp_fu_441_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_4_reg_749),
    .ce(1'b1),
    .dout(grp_fu_446_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_5_reg_760),
    .ce(1'b1),
    .dout(grp_fu_451_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_6_reg_771),
    .ce(1'b1),
    .dout(grp_fu_456_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_7_reg_782),
    .ce(1'b1),
    .dout(grp_fu_461_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_8_reg_793),
    .ce(1'b1),
    .dout(grp_fu_466_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_9_reg_804),
    .ce(1'b1),
    .dout(grp_fu_471_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        d_0_reg_341 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        d_0_reg_341 <= select_ln18_2_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        f_0_reg_352 <= 11'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        f_0_reg_352 <= f_reg_687;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_330 <= 14'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        indvar_flatten_reg_330 <= add_ln11_reg_646;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_515_p2 == 1'd0))) begin
        phi_ln8_reg_319 <= add_ln8_fu_504_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln8_reg_319 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_0_reg_363 <= 32'd0;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_reg_642_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_0_reg_363 <= grp_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln11_reg_646 <= add_ln11_fu_527_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_array_load_1_reg_717 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_array_load_3_reg_738 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_array_load_4_reg_749 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_array_load_5_reg_760 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        dense_array_load_6_reg_771 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_array_load_7_reg_782 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        dense_array_load_8_reg_793 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_array_load_9_reg_804 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_reg_642 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        f_reg_687 <= f_fu_611_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln11_reg_642 <= icmp_ln11_fu_521_p2;
        icmp_ln11_reg_642_pp0_iter1_reg <= icmp_ln11_reg_642;
        select_ln18_2_reg_661_pp0_iter1_reg <= select_ln18_2_reg_661;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        icmp_ln16_1_reg_703 <= icmp_ln16_1_fu_624_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_fu_521_p2 == 1'd0))) begin
        icmp_ln16_reg_651 <= icmp_ln16_fu_539_p2;
        select_ln18_reg_656 <= select_ln18_fu_545_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln11_reg_642_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_476 <= grp_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_492 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_498 <= grp_fu_430_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_fu_521_p2 == 1'd0))) begin
        select_ln18_2_reg_661 <= select_ln18_2_fu_553_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        tmp_4_2_reg_810 <= grp_fu_436_p2;
        tmp_4_3_reg_815 <= grp_fu_441_p2;
        tmp_4_4_reg_820 <= grp_fu_446_p2;
        tmp_4_5_reg_825 <= grp_fu_451_p2;
        tmp_4_6_reg_830 <= grp_fu_456_p2;
        tmp_4_7_reg_835 <= grp_fu_461_p2;
        tmp_4_8_reg_840 <= grp_fu_466_p2;
        tmp_4_9_reg_845 <= grp_fu_471_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        tmp_5_2_reg_850 <= grp_fu_398_p2;
        tmp_5_3_reg_855 <= grp_fu_402_p2;
        tmp_5_4_reg_860 <= grp_fu_406_p2;
        tmp_5_5_reg_865 <= grp_fu_410_p2;
        tmp_5_6_reg_870 <= grp_fu_414_p2;
        tmp_5_7_reg_875 <= grp_fu_418_p2;
        tmp_5_8_reg_880 <= grp_fu_422_p2;
        tmp_5_9_reg_885 <= grp_fu_426_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        tmp_reg_722 <= grp_fu_430_p2;
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_521_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        ap_phi_mux_d_0_phi_fu_345_p4 = select_ln18_2_reg_661;
    end else begin
        ap_phi_mux_d_0_phi_fu_345_p4 = d_0_reg_341;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_356_p4 = f_reg_687;
    end else begin
        ap_phi_mux_f_0_phi_fu_356_p4 = f_0_reg_352;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln11_reg_642 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_334_p4 = add_ln11_reg_646;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_334_p4 = indvar_flatten_reg_330;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        dense_array_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        dense_array_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        dense_array_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        dense_array_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_array_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_array_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dense_array_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_array_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dense_array_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dense_array_address0 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_array_address0 = zext_ln18_fu_629_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln8_fu_510_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_array_d0 = grp_fu_375_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((icmp_ln16_1_reg_703 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_375_p0 = reg_476;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_375_p0 = tmp_reg_722;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_375_p0 = select_ln18_1_fu_616_p3;
    end else begin
        grp_fu_375_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14))) begin
        grp_fu_375_p1 = reg_498;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_375_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_375_p1 = grp_fu_381_p2;
    end else begin
        grp_fu_375_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        grp_fu_430_p1 = dense_array_load_1_reg_717;
    end else if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_430_p1 = dense_array_q0;
    end else begin
        grp_fu_430_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        prediction_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        prediction_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        prediction_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        prediction_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        prediction_address0 = 64'd0;
    end else begin
        prediction_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        prediction_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        prediction_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        prediction_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        prediction_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        prediction_address1 = 64'd1;
    end else begin
        prediction_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        prediction_ce1 = 1'b1;
    end else begin
        prediction_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        prediction_d0 = tmp_5_8_reg_880;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        prediction_d0 = tmp_5_6_reg_870;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        prediction_d0 = tmp_5_4_reg_860;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        prediction_d0 = tmp_5_2_reg_850;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        prediction_d0 = grp_fu_388_p2;
    end else begin
        prediction_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        prediction_d1 = tmp_5_9_reg_885;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        prediction_d1 = tmp_5_7_reg_875;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        prediction_d1 = tmp_5_5_reg_865;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        prediction_d1 = tmp_5_3_reg_855;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        prediction_d1 = grp_fu_393_p2;
    end else begin
        prediction_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37))) begin
        prediction_we1 = 1'b1;
    end else begin
        prediction_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_515_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln11_fu_521_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln11_fu_521_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_527_p2 = (ap_phi_mux_indvar_flatten_phi_fu_334_p4 + 14'd1);

assign add_ln18_1_fu_600_p2 = (add_ln18_fu_594_p2 + zext_ln17_fu_561_p1);

assign add_ln18_fu_594_p2 = (zext_ln18_3_fu_590_p1 + zext_ln18_2_fu_578_p1);

assign add_ln8_fu_504_p2 = (phi_ln8_reg_319 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_fu_533_p2 = (ap_phi_mux_d_0_phi_fu_345_p4 + 4'd1);

assign dense_weights_address0 = zext_ln18_4_fu_606_p1;

assign f_fu_611_p2 = (select_ln18_reg_656 + 11'd1);

assign flat_array_address0 = zext_ln18_1_fu_565_p1;

assign icmp_ln11_fu_521_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_334_p4 == 14'd16000) ? 1'b1 : 1'b0);

assign icmp_ln16_1_fu_624_p2 = ((f_reg_687 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_539_p2 = ((ap_phi_mux_f_0_phi_fu_356_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_515_p2 = ((phi_ln8_reg_319 == 4'd9) ? 1'b1 : 1'b0);

assign select_ln18_1_fu_616_p3 = ((icmp_ln16_reg_651[0:0] === 1'b1) ? 32'd0 : w_sum_0_reg_363);

assign select_ln18_2_fu_553_p3 = ((icmp_ln16_fu_539_p2[0:0] === 1'b1) ? d_fu_533_p2 : ap_phi_mux_d_0_phi_fu_345_p4);

assign select_ln18_fu_545_p3 = ((icmp_ln16_fu_539_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_f_0_phi_fu_356_p4);

assign tmp_12_fu_570_p3 = {{select_ln18_fu_545_p3}, {3'd0}};

assign tmp_13_fu_582_p3 = {{select_ln18_fu_545_p3}, {1'd0}};

assign zext_ln17_fu_561_p1 = select_ln18_2_fu_553_p3;

assign zext_ln18_1_fu_565_p1 = select_ln18_fu_545_p3;

assign zext_ln18_2_fu_578_p1 = tmp_12_fu_570_p3;

assign zext_ln18_3_fu_590_p1 = tmp_13_fu_582_p3;

assign zext_ln18_4_fu_606_p1 = add_ln18_1_fu_600_p2;

assign zext_ln18_fu_629_p1 = select_ln18_2_reg_661_pp0_iter1_reg;

assign zext_ln8_fu_510_p1 = phi_ln8_reg_319;

endmodule //dense
