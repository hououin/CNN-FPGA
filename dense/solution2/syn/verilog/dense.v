// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=45.854000,HLS_SYN_LAT=16061,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=12,HLS_SYN_FF=1296,HLS_SYN_LUT=3223,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_pp0_stage0 = 9'd4;
parameter    ap_ST_fsm_state7 = 9'd8;
parameter    ap_ST_fsm_pp1_stage0 = 9'd16;
parameter    ap_ST_fsm_pp1_stage1 = 9'd32;
parameter    ap_ST_fsm_state15 = 9'd64;
parameter    ap_ST_fsm_pp2_stage0 = 9'd128;
parameter    ap_ST_fsm_state27 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg prediction_ce0;
reg prediction_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg   [13:0] indvar_flatten_reg_170;
reg   [3:0] d_0_reg_181;
reg   [10:0] f_0_reg_192;
reg   [31:0] w_sum_0_reg_203;
reg   [31:0] sum_0_reg_215;
reg   [3:0] i_0_reg_227;
reg   [3:0] j_0_reg_238;
wire   [31:0] grp_fu_249_p2;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln12_reg_464;
reg   [0:0] icmp_ln12_reg_464_pp0_iter2_reg;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter3;
wire    ap_block_state8_pp1_stage0_iter0;
wire    ap_block_state10_pp1_stage0_iter1;
wire    ap_block_state12_pp1_stage0_iter2;
wire    ap_block_state14_pp1_stage0_iter3;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] icmp_ln36_reg_524;
reg   [0:0] icmp_ln36_reg_524_pp1_iter2_reg;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state9_pp1_stage1_iter0;
wire    ap_block_state11_pp1_stage1_iter1;
wire    ap_block_state13_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
wire    ap_block_state16_pp2_stage0_iter0;
wire    ap_block_state17_pp2_stage0_iter1;
wire    ap_block_state18_pp2_stage0_iter2;
wire    ap_block_state19_pp2_stage0_iter3;
wire    ap_block_state20_pp2_stage0_iter4;
wire    ap_block_state21_pp2_stage0_iter5;
wire    ap_block_state22_pp2_stage0_iter6;
wire    ap_block_state23_pp2_stage0_iter7;
wire    ap_block_state24_pp2_stage0_iter8;
wire    ap_block_state25_pp2_stage0_iter9;
wire    ap_block_state26_pp2_stage0_iter10;
wire    ap_block_pp2_stage0_11001;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln42_reg_538;
wire   [31:0] grp_fu_268_p2;
reg   [31:0] reg_285;
reg    ap_enable_reg_pp1_iter2;
reg   [0:0] icmp_ln36_reg_524_pp1_iter1_reg;
reg    ap_enable_reg_pp2_iter4;
reg   [0:0] icmp_ln42_reg_538_pp2_iter3_reg;
wire   [3:0] add_ln8_fu_291_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln8_fu_302_p2;
wire   [0:0] icmp_ln12_fu_308_p2;
wire    ap_CS_fsm_pp0_stage0;
reg   [0:0] icmp_ln12_reg_464_pp0_iter1_reg;
wire   [13:0] add_ln12_fu_314_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln17_fu_326_p2;
reg   [0:0] icmp_ln17_reg_473;
reg   [0:0] icmp_ln17_reg_473_pp0_iter1_reg;
wire   [3:0] select_ln19_2_fu_340_p3;
reg   [3:0] select_ln19_2_reg_478;
reg   [3:0] select_ln19_2_reg_478_pp0_iter1_reg;
reg   [3:0] select_ln19_2_reg_478_pp0_iter2_reg;
wire   [10:0] f_fu_398_p2;
reg   [10:0] f_reg_494;
wire   [0:0] icmp_ln17_1_fu_404_p2;
reg   [0:0] icmp_ln17_1_reg_510;
reg   [0:0] icmp_ln17_1_reg_510_pp0_iter2_reg;
wire   [31:0] select_ln19_1_fu_409_p3;
wire   [31:0] grp_fu_255_p2;
wire   [0:0] icmp_ln36_fu_421_p2;
wire   [3:0] i_fu_427_p2;
reg   [3:0] i_reg_528;
wire   [0:0] icmp_ln42_fu_438_p2;
reg   [0:0] icmp_ln42_reg_538_pp2_iter1_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter2_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter4_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter5_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter6_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter7_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter8_reg;
reg   [0:0] icmp_ln42_reg_538_pp2_iter9_reg;
wire   [3:0] j_fu_444_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln44_fu_450_p1;
reg   [63:0] zext_ln44_reg_547;
reg   [63:0] zext_ln44_reg_547_pp2_iter1_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter2_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter3_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter4_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter5_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter6_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter7_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter8_reg;
reg   [63:0] zext_ln44_reg_547_pp2_iter9_reg;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
wire    ap_CS_fsm_state7;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state8;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_pp1_stage1_subdone;
wire    ap_CS_fsm_state15;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state16;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter5;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [31:0] dense_array_d0;
reg   [3:0] phi_ln8_reg_159;
reg   [3:0] ap_phi_mux_d_0_phi_fu_185_p4;
wire    ap_block_pp0_stage0;
reg   [10:0] ap_phi_mux_f_0_phi_fu_196_p4;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_207_p4;
reg   [3:0] ap_phi_mux_i_0_phi_fu_231_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln8_fu_297_p1;
wire   [63:0] zext_ln19_4_fu_393_p1;
wire   [63:0] zext_ln19_1_fu_352_p1;
wire   [63:0] zext_ln19_fu_417_p1;
wire   [63:0] zext_ln38_fu_433_p1;
wire    ap_block_pp2_stage0;
wire   [31:0] grp_fu_262_p2;
reg   [31:0] grp_fu_249_p0;
reg   [31:0] grp_fu_249_p1;
wire    ap_block_pp1_stage1;
wire   [3:0] d_fu_320_p2;
wire   [10:0] select_ln19_fu_332_p3;
wire   [13:0] tmp_3_fu_357_p3;
wire   [11:0] tmp_9_fu_369_p3;
wire   [14:0] zext_ln19_3_fu_377_p1;
wire   [14:0] zext_ln19_2_fu_365_p1;
wire   [14:0] add_ln19_fu_381_p2;
wire   [14:0] zext_ln18_fu_348_p1;
wire   [14:0] add_ln19_1_fu_387_p2;
wire    ap_CS_fsm_state27;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(dense_array_d0),
    .q0(dense_array_q0)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_249_p0),
    .din1(grp_fu_249_p1),
    .ce(1'b1),
    .dout(grp_fu_249_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .ce(1'b1),
    .dout(grp_fu_255_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_285),
    .din1(sum_0_reg_215),
    .ce(1'b1),
    .dout(grp_fu_262_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_268_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state8))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            ap_enable_reg_pp1_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state16) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state16)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state16);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            ap_enable_reg_pp2_iter10 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
        d_0_reg_181 <= 4'd0;
    end else if (((icmp_ln12_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        d_0_reg_181 <= select_ln19_2_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
        f_0_reg_192 <= 11'd0;
    end else if (((icmp_ln12_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_192 <= f_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln36_reg_524 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i_0_reg_227 <= i_reg_528;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_227 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
        indvar_flatten_reg_170 <= 14'd0;
    end else if (((icmp_ln12_fu_308_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_170 <= add_ln12_fu_314_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        j_0_reg_238 <= 4'd0;
    end else if (((icmp_ln42_fu_438_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_0_reg_238 <= j_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_302_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln8_reg_159 <= add_ln8_fu_291_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_ln8_reg_159 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln36_reg_524_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sum_0_reg_215 <= grp_fu_249_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        sum_0_reg_215 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
        w_sum_0_reg_203 <= 32'd0;
    end else if (((icmp_ln12_reg_464_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        w_sum_0_reg_203 <= grp_fu_249_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_308_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_reg_494 <= f_fu_398_p2;
        select_ln19_2_reg_478 <= select_ln19_2_fu_340_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_reg_528 <= i_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln12_reg_464 <= icmp_ln12_fu_308_p2;
        icmp_ln12_reg_464_pp0_iter1_reg <= icmp_ln12_reg_464;
        icmp_ln17_reg_473_pp0_iter1_reg <= icmp_ln17_reg_473;
        select_ln19_2_reg_478_pp0_iter1_reg <= select_ln19_2_reg_478;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln12_reg_464_pp0_iter2_reg <= icmp_ln12_reg_464_pp0_iter1_reg;
        icmp_ln17_1_reg_510_pp0_iter2_reg <= icmp_ln17_1_reg_510;
        select_ln19_2_reg_478_pp0_iter2_reg <= select_ln19_2_reg_478_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln17_1_reg_510 <= icmp_ln17_1_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_308_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln17_reg_473 <= icmp_ln17_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln36_reg_524 <= icmp_ln36_fu_421_p2;
        icmp_ln36_reg_524_pp1_iter1_reg <= icmp_ln36_reg_524;
        icmp_ln36_reg_524_pp1_iter2_reg <= icmp_ln36_reg_524_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln42_reg_538 <= icmp_ln42_fu_438_p2;
        icmp_ln42_reg_538_pp2_iter1_reg <= icmp_ln42_reg_538;
        zext_ln44_reg_547_pp2_iter1_reg[3 : 0] <= zext_ln44_reg_547[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln42_reg_538_pp2_iter2_reg <= icmp_ln42_reg_538_pp2_iter1_reg;
        icmp_ln42_reg_538_pp2_iter3_reg <= icmp_ln42_reg_538_pp2_iter2_reg;
        icmp_ln42_reg_538_pp2_iter4_reg <= icmp_ln42_reg_538_pp2_iter3_reg;
        icmp_ln42_reg_538_pp2_iter5_reg <= icmp_ln42_reg_538_pp2_iter4_reg;
        icmp_ln42_reg_538_pp2_iter6_reg <= icmp_ln42_reg_538_pp2_iter5_reg;
        icmp_ln42_reg_538_pp2_iter7_reg <= icmp_ln42_reg_538_pp2_iter6_reg;
        icmp_ln42_reg_538_pp2_iter8_reg <= icmp_ln42_reg_538_pp2_iter7_reg;
        icmp_ln42_reg_538_pp2_iter9_reg <= icmp_ln42_reg_538_pp2_iter8_reg;
        zext_ln44_reg_547_pp2_iter2_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter1_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter3_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter2_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter4_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter3_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter5_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter4_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter6_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter5_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter7_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter6_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter8_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter7_reg[3 : 0];
        zext_ln44_reg_547_pp2_iter9_reg[3 : 0] <= zext_ln44_reg_547_pp2_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln36_reg_524_pp1_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b1)) | ((icmp_ln42_reg_538_pp2_iter3_reg == 1'd0) & (ap_enable_reg_pp2_iter4 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        reg_285 <= grp_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln42_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln44_reg_547[3 : 0] <= zext_ln44_fu_450_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln12_fu_308_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_421_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln42_fu_438_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state16 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state16 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_d_0_phi_fu_185_p4 = select_ln19_2_reg_478;
    end else begin
        ap_phi_mux_d_0_phi_fu_185_p4 = d_0_reg_181;
    end
end

always @ (*) begin
    if (((icmp_ln12_reg_464 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_196_p4 = f_reg_494;
    end else begin
        ap_phi_mux_f_0_phi_fu_196_p4 = f_0_reg_192;
    end
end

always @ (*) begin
    if (((icmp_ln36_reg_524 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_231_p4 = i_reg_528;
    end else begin
        ap_phi_mux_i_0_phi_fu_231_p4 = i_0_reg_227;
    end
end

always @ (*) begin
    if (((icmp_ln12_reg_464_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_phi_mux_w_sum_0_phi_fu_207_p4 = grp_fu_249_p2;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_207_p4 = w_sum_0_reg_203;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dense_array_address0 = zext_ln44_fu_450_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        dense_array_address0 = zext_ln38_fu_433_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense_array_address0 = zext_ln19_fu_417_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln8_fu_297_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        dense_array_d0 = grp_fu_249_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln17_1_reg_510_pp0_iter2_reg == 1'd1) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_249_p0 = sum_0_reg_215;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_249_p0 = select_ln19_1_fu_409_p3;
    end else begin
        grp_fu_249_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_249_p1 = reg_285;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        grp_fu_249_p1 = grp_fu_255_p2;
    end else begin
        grp_fu_249_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln42_reg_538_pp2_iter9_reg == 1'd0) & (ap_enable_reg_pp2_iter10 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_302_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln12_fu_308_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln12_fu_308_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln36_fu_421_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & ~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if ((((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter2 == 1'b0)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln36_fu_421_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln42_fu_438_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((ap_enable_reg_pp2_iter9 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter10 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter9 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter10 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln42_fu_438_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_314_p2 = (indvar_flatten_reg_170 + 14'd1);

assign add_ln19_1_fu_387_p2 = (add_ln19_fu_381_p2 + zext_ln18_fu_348_p1);

assign add_ln19_fu_381_p2 = (zext_ln19_3_fu_377_p1 + zext_ln19_2_fu_365_p1);

assign add_ln8_fu_291_p2 = (phi_ln8_reg_159 + 4'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign d_fu_320_p2 = (ap_phi_mux_d_0_phi_fu_185_p4 + 4'd1);

assign dense_weights_address0 = zext_ln19_4_fu_393_p1;

assign f_fu_398_p2 = (select_ln19_fu_332_p3 + 11'd1);

assign flat_array_address0 = zext_ln19_1_fu_352_p1;

assign i_fu_427_p2 = (ap_phi_mux_i_0_phi_fu_231_p4 + 4'd1);

assign icmp_ln12_fu_308_p2 = ((indvar_flatten_reg_170 == 14'd16000) ? 1'b1 : 1'b0);

assign icmp_ln17_1_fu_404_p2 = ((f_reg_494 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_326_p2 = ((ap_phi_mux_f_0_phi_fu_196_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_421_p2 = ((ap_phi_mux_i_0_phi_fu_231_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln42_fu_438_p2 = ((j_0_reg_238 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_302_p2 = ((phi_ln8_reg_159 == 4'd9) ? 1'b1 : 1'b0);

assign j_fu_444_p2 = (j_0_reg_238 + 4'd1);

assign prediction_address0 = zext_ln44_reg_547_pp2_iter9_reg;

assign prediction_d0 = grp_fu_262_p2;

assign select_ln19_1_fu_409_p3 = ((icmp_ln17_reg_473_pp0_iter1_reg[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_w_sum_0_phi_fu_207_p4);

assign select_ln19_2_fu_340_p3 = ((icmp_ln17_fu_326_p2[0:0] === 1'b1) ? d_fu_320_p2 : ap_phi_mux_d_0_phi_fu_185_p4);

assign select_ln19_fu_332_p3 = ((icmp_ln17_fu_326_p2[0:0] === 1'b1) ? 11'd0 : ap_phi_mux_f_0_phi_fu_196_p4);

assign tmp_3_fu_357_p3 = {{select_ln19_fu_332_p3}, {3'd0}};

assign tmp_9_fu_369_p3 = {{select_ln19_fu_332_p3}, {1'd0}};

assign zext_ln18_fu_348_p1 = select_ln19_2_fu_340_p3;

assign zext_ln19_1_fu_352_p1 = select_ln19_fu_332_p3;

assign zext_ln19_2_fu_365_p1 = tmp_3_fu_357_p3;

assign zext_ln19_3_fu_377_p1 = tmp_9_fu_369_p3;

assign zext_ln19_4_fu_393_p1 = add_ln19_1_fu_387_p2;

assign zext_ln19_fu_417_p1 = select_ln19_2_reg_478_pp0_iter2_reg;

assign zext_ln38_fu_433_p1 = ap_phi_mux_i_0_phi_fu_231_p4;

assign zext_ln44_fu_450_p1 = j_0_reg_238;

assign zext_ln8_fu_297_p1 = phi_ln8_reg_159;

always @ (posedge ap_clk) begin
    zext_ln44_reg_547[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln44_reg_547_pp2_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense
