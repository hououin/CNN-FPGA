// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=32233,HLS_SYN_TPT=none,HLS_SYN_MEM=32,HLS_SYN_DSP=12,HLS_SYN_FF=967,HLS_SYN_LUT=2970,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0
);

parameter    ap_ST_fsm_state1 = 24'd1;
parameter    ap_ST_fsm_state2 = 24'd2;
parameter    ap_ST_fsm_state3 = 24'd4;
parameter    ap_ST_fsm_pp0_stage0 = 24'd8;
parameter    ap_ST_fsm_pp0_stage1 = 24'd16;
parameter    ap_ST_fsm_state8 = 24'd32;
parameter    ap_ST_fsm_state9 = 24'd64;
parameter    ap_ST_fsm_state10 = 24'd128;
parameter    ap_ST_fsm_state11 = 24'd256;
parameter    ap_ST_fsm_state12 = 24'd512;
parameter    ap_ST_fsm_state13 = 24'd1024;
parameter    ap_ST_fsm_state14 = 24'd2048;
parameter    ap_ST_fsm_state15 = 24'd4096;
parameter    ap_ST_fsm_state16 = 24'd8192;
parameter    ap_ST_fsm_state17 = 24'd16384;
parameter    ap_ST_fsm_state18 = 24'd32768;
parameter    ap_ST_fsm_state19 = 24'd65536;
parameter    ap_ST_fsm_state20 = 24'd131072;
parameter    ap_ST_fsm_state21 = 24'd262144;
parameter    ap_ST_fsm_state22 = 24'd524288;
parameter    ap_ST_fsm_state23 = 24'd1048576;
parameter    ap_ST_fsm_state24 = 24'd2097152;
parameter    ap_ST_fsm_state25 = 24'd4194304;
parameter    ap_ST_fsm_state26 = 24'd8388608;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg prediction_ce0;
reg prediction_we0;

(* fsm_encoding = "none" *) reg   [23:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [13:0] dense_weights_address0;
reg    dense_weights_ce0;
wire   [31:0] dense_weights_q0;
reg   [10:0] f_0_reg_175;
reg   [31:0] w_sum_0_reg_186;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] reg_263;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire   [3:0] add_ln10_fu_269_p2;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln14_fu_286_p2;
wire    ap_CS_fsm_state3;
wire   [3:0] d_fu_292_p2;
reg   [3:0] d_reg_409;
wire   [63:0] zext_ln21_fu_298_p1;
reg   [63:0] zext_ln21_reg_414;
wire   [14:0] zext_ln19_fu_302_p1;
reg   [14:0] zext_ln19_reg_419;
wire   [0:0] icmp_ln19_fu_306_p2;
reg   [0:0] icmp_ln19_reg_424;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln19_reg_424_pp0_iter1_reg;
wire   [10:0] f_fu_312_p2;
reg   [10:0] f_reg_428;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_239_p2;
wire   [31:0] grp_fu_233_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [3:0] i_fu_369_p2;
reg   [3:0] i_reg_466;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln38_fu_363_p2;
wire    ap_CS_fsm_state15;
wire   [3:0] j_fu_386_p2;
reg   [3:0] j_reg_484;
wire    ap_CS_fsm_state16;
wire   [63:0] zext_ln46_fu_392_p1;
reg   [63:0] zext_ln46_reg_489;
wire   [0:0] icmp_ln44_fu_380_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage1_subdone;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [31:0] dense_array_d0;
reg   [3:0] phi_ln10_reg_153;
wire   [0:0] icmp_ln10_fu_280_p2;
reg   [3:0] d_0_reg_164;
wire    ap_CS_fsm_state8;
reg   [10:0] ap_phi_mux_f_0_phi_fu_179_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] sum_0_reg_199;
reg   [3:0] i_0_reg_211;
reg   [3:0] j_0_reg_222;
wire    ap_CS_fsm_state26;
wire   [63:0] zext_ln10_fu_275_p1;
wire   [63:0] zext_ln21_4_fu_358_p1;
wire   [63:0] zext_ln21_1_fu_318_p1;
wire   [63:0] zext_ln40_fu_375_p1;
wire   [31:0] grp_fu_246_p2;
reg   [31:0] grp_fu_233_p0;
reg   [31:0] grp_fu_233_p1;
wire    ap_CS_fsm_state14;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state21;
wire   [13:0] tmp_7_fu_323_p3;
wire   [11:0] tmp_8_fu_335_p3;
wire   [14:0] zext_ln21_3_fu_343_p1;
wire   [14:0] zext_ln21_2_fu_331_p1;
wire   [14:0] add_ln21_fu_347_p2;
wire   [14:0] add_ln21_1_fu_353_p2;
reg   [23:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 24'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dense_dense_weights #(
    .DataWidth( 32 ),
    .AddressRange( 16000 ),
    .AddressWidth( 14 ))
dense_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_weights_address0),
    .ce0(dense_weights_ce0),
    .q0(dense_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(dense_array_d0),
    .q0(dense_array_q0)
);

dense_fadd_32ns_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_233_p0),
    .din1(grp_fu_233_p1),
    .ce(1'b1),
    .dout(grp_fu_233_p2)
);

dense_fmul_32ns_3cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_weights_q0),
    .din1(flat_array_q0),
    .ce(1'b1),
    .dout(grp_fu_239_p2)
);

dense_fdiv_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 6 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_263),
    .din1(sum_0_reg_199),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

dense_fexp_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3eOg_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        d_0_reg_164 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_0_reg_164 <= d_reg_409;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_424 == 1'd0))) begin
        f_0_reg_175 <= f_reg_428;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd0))) begin
        f_0_reg_175 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_reg_211 <= i_reg_466;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd1))) begin
        i_0_reg_211 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_363_p2 == 1'd1))) begin
        j_0_reg_222 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        j_0_reg_222 <= j_reg_484;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_280_p2 == 1'd0))) begin
        phi_ln10_reg_153 <= add_ln10_fu_269_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_ln10_reg_153 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        sum_0_reg_199 <= grp_fu_233_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd1))) begin
        sum_0_reg_199 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln19_reg_424_pp0_iter1_reg == 1'd0))) begin
        w_sum_0_reg_186 <= grp_fu_233_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd0))) begin
        w_sum_0_reg_186 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        d_reg_409 <= d_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_reg_428 <= f_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_reg_466 <= i_fu_369_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln19_reg_424 <= icmp_ln19_fu_306_p2;
        icmp_ln19_reg_424_pp0_iter1_reg <= icmp_ln19_reg_424;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        j_reg_484 <= j_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13))) begin
        reg_263 <= grp_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd0))) begin
        zext_ln19_reg_419[3 : 0] <= zext_ln19_fu_302_p1[3 : 0];
        zext_ln21_reg_414[3 : 0] <= zext_ln21_fu_298_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln44_fu_380_p2 == 1'd0))) begin
        zext_ln46_reg_489[3 : 0] <= zext_ln46_fu_392_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_306_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln44_fu_380_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln19_reg_424 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_179_p4 = f_reg_428;
    end else begin
        ap_phi_mux_f_0_phi_fu_179_p4 = f_0_reg_175;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln44_fu_380_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_array_address0 = zext_ln46_fu_392_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dense_array_address0 = zext_ln40_fu_375_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_array_address0 = zext_ln21_reg_414;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = zext_ln10_fu_275_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_array_d0 = w_sum_0_reg_186;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_d0 = 32'd0;
    end else begin
        dense_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        dense_weights_ce0 = 1'b1;
    end else begin
        dense_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_233_p0 = sum_0_reg_199;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_233_p0 = w_sum_0_reg_186;
    end else begin
        grp_fu_233_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_233_p1 = reg_263;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_233_p1 = grp_fu_239_p2;
    end else begin
        grp_fu_233_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_280_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln14_fu_286_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln19_fu_306_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln19_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln38_fu_363_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (icmp_ln44_fu_380_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_269_p2 = (phi_ln10_reg_153 + 4'd1);

assign add_ln21_1_fu_353_p2 = (add_ln21_fu_347_p2 + zext_ln19_reg_419);

assign add_ln21_fu_347_p2 = (zext_ln21_3_fu_343_p1 + zext_ln21_2_fu_331_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_fu_292_p2 = (d_0_reg_164 + 4'd1);

assign dense_weights_address0 = zext_ln21_4_fu_358_p1;

assign f_fu_312_p2 = (ap_phi_mux_f_0_phi_fu_179_p4 + 11'd1);

assign flat_array_address0 = zext_ln21_1_fu_318_p1;

assign i_fu_369_p2 = (i_0_reg_211 + 4'd1);

assign icmp_ln10_fu_280_p2 = ((phi_ln10_reg_153 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_286_p2 = ((d_0_reg_164 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_306_p2 = ((ap_phi_mux_f_0_phi_fu_179_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_363_p2 = ((i_0_reg_211 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln44_fu_380_p2 = ((j_0_reg_222 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_386_p2 = (j_0_reg_222 + 4'd1);

assign prediction_address0 = zext_ln46_reg_489;

assign prediction_d0 = grp_fu_246_p2;

assign tmp_7_fu_323_p3 = {{ap_phi_mux_f_0_phi_fu_179_p4}, {3'd0}};

assign tmp_8_fu_335_p3 = {{ap_phi_mux_f_0_phi_fu_179_p4}, {1'd0}};

assign zext_ln10_fu_275_p1 = phi_ln10_reg_153;

assign zext_ln19_fu_302_p1 = d_0_reg_164;

assign zext_ln21_1_fu_318_p1 = ap_phi_mux_f_0_phi_fu_179_p4;

assign zext_ln21_2_fu_331_p1 = tmp_7_fu_323_p3;

assign zext_ln21_3_fu_343_p1 = tmp_8_fu_335_p3;

assign zext_ln21_4_fu_358_p1 = add_ln21_1_fu_353_p2;

assign zext_ln21_fu_298_p1 = d_0_reg_164;

assign zext_ln40_fu_375_p1 = i_0_reg_211;

assign zext_ln46_fu_392_p1 = j_0_reg_222;

always @ (posedge ap_clk) begin
    zext_ln21_reg_414[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_419[14:4] <= 11'b00000000000;
    zext_ln46_reg_489[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense
