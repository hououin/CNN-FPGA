// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="apdp,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.363250,HLS_SYN_LAT=61,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=366,HLS_SYN_LUT=1408,HLS_VERSION=2019_1}" *)

module apdp (
        ap_clk,
        ap_rst_n,
        inputA_Addr_A,
        inputA_EN_A,
        inputA_WEN_A,
        inputA_Din_A,
        inputA_Dout_A,
        inputA_Clk_A,
        inputA_Rst_A,
        output_r_Addr_A,
        output_r_EN_A,
        output_r_WEN_A,
        output_r_Din_A,
        output_r_Dout_A,
        output_r_Clk_A,
        output_r_Rst_A,
        s_axi_CRTL_BUS_AWVALID,
        s_axi_CRTL_BUS_AWREADY,
        s_axi_CRTL_BUS_AWADDR,
        s_axi_CRTL_BUS_WVALID,
        s_axi_CRTL_BUS_WREADY,
        s_axi_CRTL_BUS_WDATA,
        s_axi_CRTL_BUS_WSTRB,
        s_axi_CRTL_BUS_ARVALID,
        s_axi_CRTL_BUS_ARREADY,
        s_axi_CRTL_BUS_ARADDR,
        s_axi_CRTL_BUS_RVALID,
        s_axi_CRTL_BUS_RREADY,
        s_axi_CRTL_BUS_RDATA,
        s_axi_CRTL_BUS_RRESP,
        s_axi_CRTL_BUS_BVALID,
        s_axi_CRTL_BUS_BREADY,
        s_axi_CRTL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;
parameter    C_S_AXI_CRTL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CRTL_BUS_ADDR_WIDTH = 4;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CRTL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [31:0] inputA_Addr_A;
output   inputA_EN_A;
output  [3:0] inputA_WEN_A;
output  [31:0] inputA_Din_A;
input  [31:0] inputA_Dout_A;
output   inputA_Clk_A;
output   inputA_Rst_A;
output  [31:0] output_r_Addr_A;
output   output_r_EN_A;
output  [3:0] output_r_WEN_A;
output  [31:0] output_r_Din_A;
input  [31:0] output_r_Dout_A;
output   output_r_Clk_A;
output   output_r_Rst_A;
input   s_axi_CRTL_BUS_AWVALID;
output   s_axi_CRTL_BUS_AWREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_AWADDR;
input   s_axi_CRTL_BUS_WVALID;
output   s_axi_CRTL_BUS_WREADY;
input  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_WDATA;
input  [C_S_AXI_CRTL_BUS_WSTRB_WIDTH - 1:0] s_axi_CRTL_BUS_WSTRB;
input   s_axi_CRTL_BUS_ARVALID;
output   s_axi_CRTL_BUS_ARREADY;
input  [C_S_AXI_CRTL_BUS_ADDR_WIDTH - 1:0] s_axi_CRTL_BUS_ARADDR;
output   s_axi_CRTL_BUS_RVALID;
input   s_axi_CRTL_BUS_RREADY;
output  [C_S_AXI_CRTL_BUS_DATA_WIDTH - 1:0] s_axi_CRTL_BUS_RDATA;
output  [1:0] s_axi_CRTL_BUS_RRESP;
output   s_axi_CRTL_BUS_BVALID;
input   s_axi_CRTL_BUS_BREADY;
output  [1:0] s_axi_CRTL_BUS_BRESP;
output   interrupt;

reg inputA_EN_A;
reg output_r_EN_A;
reg[3:0] output_r_WEN_A;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [3:0] i_fu_177_p2;
reg   [3:0] i_reg_755;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln10_fu_183_p1;
reg   [63:0] zext_ln10_reg_760;
wire   [0:0] icmp_ln9_fu_171_p2;
reg   [31:0] inputA_load_reg_770;
wire    ap_CS_fsm_state3;
wire   [53:0] man_V_2_fu_240_p3;
reg   [53:0] man_V_2_reg_776;
wire    ap_CS_fsm_state4;
wire  signed [11:0] sh_amt_fu_288_p3;
reg  signed [11:0] sh_amt_reg_781;
wire   [6:0] trunc_ln583_fu_302_p1;
reg   [6:0] trunc_ln583_reg_786;
wire   [0:0] icmp_ln585_fu_306_p2;
reg   [0:0] icmp_ln585_reg_791;
wire   [0:0] and_ln581_fu_369_p2;
reg   [0:0] and_ln581_reg_796;
wire   [6:0] select_ln585_fu_387_p3;
reg   [6:0] select_ln585_reg_801;
wire   [0:0] and_ln603_fu_407_p2;
reg   [0:0] and_ln603_reg_806;
wire   [6:0] tmp_V_3_fu_456_p2;
reg   [6:0] tmp_V_3_reg_811;
wire    ap_CS_fsm_state5;
reg   [0:0] p_Result_10_reg_817;
wire   [6:0] tmp_V_fu_470_p2;
reg   [6:0] tmp_V_reg_823;
wire   [0:0] icmp_ln935_fu_476_p2;
reg   [0:0] icmp_ln935_reg_828;
wire    ap_CS_fsm_state6;
reg   [30:0] m_5_reg_833;
reg   [0:0] tmp_8_reg_838;
wire   [7:0] trunc_ln943_fu_696_p1;
reg   [7:0] trunc_ln943_reg_843;
reg   [3:0] i_0_reg_156;
wire    ap_CS_fsm_state7;
wire   [31:0] inputA_Addr_A_orig;
wire   [31:0] output_r_Addr_A_orig;
wire   [63:0] grp_fu_167_p1;
wire   [63:0] ireg_V_fu_188_p1;
wire   [10:0] exp_tmp_V_fu_204_p4;
wire   [51:0] trunc_ln565_fu_218_p1;
wire   [52:0] tmp_fu_222_p3;
wire   [53:0] p_Result_9_fu_230_p1;
wire   [0:0] p_Result_8_fu_196_p3;
wire   [53:0] man_V_1_fu_234_p2;
wire   [62:0] trunc_ln556_fu_192_p1;
wire   [11:0] zext_ln461_fu_214_p1;
wire   [11:0] F2_fu_254_p2;
wire   [9:0] tmp_3_fu_260_p4;
wire   [0:0] icmp_ln581_fu_270_p2;
wire   [11:0] add_ln581_fu_276_p2;
wire   [11:0] sub_ln581_fu_282_p2;
wire   [31:0] bitcast_ln696_fu_318_p1;
wire   [0:0] tmp_4_fu_321_p3;
wire   [0:0] icmp_ln571_fu_248_p2;
wire   [0:0] icmp_ln582_fu_296_p2;
wire   [0:0] xor_ln571_fu_337_p2;
wire   [0:0] and_ln582_fu_343_p2;
wire   [0:0] or_ln582_fu_357_p2;
wire   [0:0] xor_ln582_fu_363_p2;
wire   [0:0] xor_ln585_fu_375_p2;
wire   [0:0] and_ln585_fu_381_p2;
wire   [6:0] select_ln588_fu_329_p3;
wire   [6:0] select_ln582_fu_349_p3;
wire   [0:0] or_ln581_fu_395_p2;
wire   [0:0] icmp_ln603_fu_312_p2;
wire   [0:0] xor_ln581_fu_401_p2;
wire  signed [31:0] sext_ln581_fu_413_p1;
wire   [53:0] zext_ln586_fu_416_p1;
wire   [53:0] ashr_ln586_fu_420_p2;
wire   [6:0] sext_ln581cast_fu_429_p1;
wire   [0:0] and_ln585_1_fu_438_p2;
wire   [6:0] trunc_ln586_fu_425_p1;
wire   [6:0] shl_ln604_fu_433_p2;
wire   [6:0] select_ln585_1_fu_442_p3;
wire   [6:0] p_Val2_1_fu_449_p3;
wire   [6:0] tmp_V_4_fu_481_p3;
reg   [6:0] p_Result_s_fu_486_p4;
wire   [31:0] p_Result_11_fu_496_p3;
reg   [31:0] l_fu_504_p3;
wire   [31:0] sub_ln944_fu_512_p2;
wire   [31:0] lsb_index_fu_522_p2;
wire   [30:0] tmp_6_fu_528_p4;
wire   [2:0] trunc_ln947_fu_544_p1;
wire   [2:0] sub_ln947_fu_548_p2;
wire   [6:0] zext_ln947_fu_554_p1;
wire   [6:0] lshr_ln947_fu_558_p2;
wire   [6:0] p_Result_6_fu_564_p2;
wire   [0:0] icmp_ln947_fu_538_p2;
wire   [0:0] icmp_ln947_1_fu_570_p2;
wire   [0:0] tmp_7_fu_582_p3;
wire   [6:0] trunc_ln944_fu_518_p1;
wire   [6:0] add_ln949_fu_596_p2;
wire   [0:0] p_Result_5_fu_602_p3;
wire   [0:0] xor_ln949_fu_590_p2;
wire   [0:0] and_ln949_fu_610_p2;
wire   [0:0] a_fu_576_p2;
wire   [0:0] or_ln949_fu_616_p2;
wire   [31:0] m_fu_630_p1;
wire   [31:0] add_ln958_fu_640_p2;
wire   [31:0] sub_ln958_fu_652_p2;
wire   [0:0] icmp_ln958_fu_634_p2;
wire   [31:0] lshr_ln958_fu_646_p2;
wire   [31:0] shl_ln958_fu_658_p2;
wire   [31:0] or_ln_fu_622_p3;
wire   [31:0] m_1_fu_664_p3;
wire   [31:0] m_2_fu_672_p2;
wire   [7:0] sub_ln964_fu_710_p2;
wire   [7:0] select_ln964_fu_703_p3;
wire   [7:0] add_ln964_fu_715_p2;
wire   [31:0] m_6_fu_700_p1;
wire   [8:0] tmp_2_fu_721_p3;
wire   [31:0] p_Result_12_fu_728_p5;
wire   [31:0] bitcast_ln739_fu_740_p1;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

apdp_CRTL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CRTL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CRTL_BUS_DATA_WIDTH ))
apdp_CRTL_BUS_s_axi_U(
    .AWVALID(s_axi_CRTL_BUS_AWVALID),
    .AWREADY(s_axi_CRTL_BUS_AWREADY),
    .AWADDR(s_axi_CRTL_BUS_AWADDR),
    .WVALID(s_axi_CRTL_BUS_WVALID),
    .WREADY(s_axi_CRTL_BUS_WREADY),
    .WDATA(s_axi_CRTL_BUS_WDATA),
    .WSTRB(s_axi_CRTL_BUS_WSTRB),
    .ARVALID(s_axi_CRTL_BUS_ARVALID),
    .ARREADY(s_axi_CRTL_BUS_ARREADY),
    .ARADDR(s_axi_CRTL_BUS_ARADDR),
    .RVALID(s_axi_CRTL_BUS_RVALID),
    .RREADY(s_axi_CRTL_BUS_RREADY),
    .RDATA(s_axi_CRTL_BUS_RDATA),
    .RRESP(s_axi_CRTL_BUS_RRESP),
    .BVALID(s_axi_CRTL_BUS_BVALID),
    .BREADY(s_axi_CRTL_BUS_BREADY),
    .BRESP(s_axi_CRTL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

apdp_fpext_32ns_6bkb #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .dout_WIDTH( 64 ))
apdp_fpext_32ns_6bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(inputA_Dout_A),
    .ce(1'b1),
    .dout(grp_fu_167_p1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_156 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        i_0_reg_156 <= i_reg_755;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        and_ln581_reg_796 <= and_ln581_fu_369_p2;
        and_ln603_reg_806 <= and_ln603_fu_407_p2;
        icmp_ln585_reg_791 <= icmp_ln585_fu_306_p2;
        man_V_2_reg_776 <= man_V_2_fu_240_p3;
        select_ln585_reg_801 <= select_ln585_fu_387_p3;
        sh_amt_reg_781 <= sh_amt_fu_288_p3;
        trunc_ln583_reg_786 <= trunc_ln583_fu_302_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_755 <= i_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        icmp_ln935_reg_828 <= icmp_ln935_fu_476_p2;
        m_5_reg_833 <= {{m_2_fu_672_p2[31:1]}};
        tmp_8_reg_838 <= m_2_fu_672_p2[32'd25];
        trunc_ln943_reg_843 <= trunc_ln943_fu_696_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inputA_load_reg_770 <= inputA_Dout_A;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        p_Result_10_reg_817 <= tmp_V_3_fu_456_p2[32'd6];
        tmp_V_3_reg_811 <= tmp_V_3_fu_456_p2;
        tmp_V_reg_823 <= tmp_V_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_171_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln10_reg_760[3 : 0] <= zext_ln10_fu_183_p1[3 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        inputA_EN_A = 1'b1;
    end else begin
        inputA_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_EN_A = 1'b1;
    end else begin
        output_r_EN_A = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        output_r_WEN_A = 4'd15;
    end else begin
        output_r_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_171_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign F2_fu_254_p2 = (12'd1075 - zext_ln461_fu_214_p1);

assign a_fu_576_p2 = (icmp_ln947_fu_538_p2 & icmp_ln947_1_fu_570_p2);

assign add_ln581_fu_276_p2 = ($signed(12'd4093) + $signed(F2_fu_254_p2));

assign add_ln949_fu_596_p2 = ($signed(7'd104) + $signed(trunc_ln944_fu_518_p1));

assign add_ln958_fu_640_p2 = ($signed(32'd4294967271) + $signed(sub_ln944_fu_512_p2));

assign add_ln964_fu_715_p2 = (sub_ln964_fu_710_p2 + select_ln964_fu_703_p3);

assign and_ln581_fu_369_p2 = (xor_ln582_fu_363_p2 & icmp_ln581_fu_270_p2);

assign and_ln582_fu_343_p2 = (xor_ln571_fu_337_p2 & icmp_ln582_fu_296_p2);

assign and_ln585_1_fu_438_p2 = (icmp_ln585_reg_791 & and_ln581_reg_796);

assign and_ln585_fu_381_p2 = (xor_ln585_fu_375_p2 & and_ln581_fu_369_p2);

assign and_ln603_fu_407_p2 = (xor_ln581_fu_401_p2 & icmp_ln603_fu_312_p2);

assign and_ln949_fu_610_p2 = (xor_ln949_fu_590_p2 & p_Result_5_fu_602_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ashr_ln586_fu_420_p2 = $signed(man_V_2_reg_776) >>> zext_ln586_fu_416_p1;

assign bitcast_ln696_fu_318_p1 = inputA_load_reg_770;

assign bitcast_ln739_fu_740_p1 = p_Result_12_fu_728_p5;

assign exp_tmp_V_fu_204_p4 = {{ireg_V_fu_188_p1[62:52]}};

assign i_fu_177_p2 = (i_0_reg_156 + 4'd1);

assign icmp_ln571_fu_248_p2 = ((trunc_ln556_fu_192_p1 == 63'd0) ? 1'b1 : 1'b0);

assign icmp_ln581_fu_270_p2 = (($signed(tmp_3_fu_260_p4) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign icmp_ln582_fu_296_p2 = ((F2_fu_254_p2 == 12'd3) ? 1'b1 : 1'b0);

assign icmp_ln585_fu_306_p2 = ((sh_amt_fu_288_p3 < 12'd54) ? 1'b1 : 1'b0);

assign icmp_ln603_fu_312_p2 = ((sh_amt_fu_288_p3 < 12'd7) ? 1'b1 : 1'b0);

assign icmp_ln935_fu_476_p2 = ((tmp_V_3_reg_811 == 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_1_fu_570_p2 = ((p_Result_6_fu_564_p2 != 7'd0) ? 1'b1 : 1'b0);

assign icmp_ln947_fu_538_p2 = (($signed(tmp_6_fu_528_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln958_fu_634_p2 = (($signed(lsb_index_fu_522_p2) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_171_p2 = ((i_0_reg_156 == 4'd10) ? 1'b1 : 1'b0);

assign inputA_Addr_A = inputA_Addr_A_orig << 32'd2;

assign inputA_Addr_A_orig = zext_ln10_fu_183_p1;

assign inputA_Clk_A = ap_clk;

assign inputA_Din_A = 32'd0;

assign inputA_Rst_A = ap_rst_n_inv;

assign inputA_WEN_A = 4'd0;

assign ireg_V_fu_188_p1 = grp_fu_167_p1;


always @ (p_Result_11_fu_496_p3) begin
    if (p_Result_11_fu_496_p3[0] == 1'b1) begin
        l_fu_504_p3 = 32'd0;
    end else if (p_Result_11_fu_496_p3[1] == 1'b1) begin
        l_fu_504_p3 = 32'd1;
    end else if (p_Result_11_fu_496_p3[2] == 1'b1) begin
        l_fu_504_p3 = 32'd2;
    end else if (p_Result_11_fu_496_p3[3] == 1'b1) begin
        l_fu_504_p3 = 32'd3;
    end else if (p_Result_11_fu_496_p3[4] == 1'b1) begin
        l_fu_504_p3 = 32'd4;
    end else if (p_Result_11_fu_496_p3[5] == 1'b1) begin
        l_fu_504_p3 = 32'd5;
    end else if (p_Result_11_fu_496_p3[6] == 1'b1) begin
        l_fu_504_p3 = 32'd6;
    end else if (p_Result_11_fu_496_p3[7] == 1'b1) begin
        l_fu_504_p3 = 32'd7;
    end else if (p_Result_11_fu_496_p3[8] == 1'b1) begin
        l_fu_504_p3 = 32'd8;
    end else if (p_Result_11_fu_496_p3[9] == 1'b1) begin
        l_fu_504_p3 = 32'd9;
    end else if (p_Result_11_fu_496_p3[10] == 1'b1) begin
        l_fu_504_p3 = 32'd10;
    end else if (p_Result_11_fu_496_p3[11] == 1'b1) begin
        l_fu_504_p3 = 32'd11;
    end else if (p_Result_11_fu_496_p3[12] == 1'b1) begin
        l_fu_504_p3 = 32'd12;
    end else if (p_Result_11_fu_496_p3[13] == 1'b1) begin
        l_fu_504_p3 = 32'd13;
    end else if (p_Result_11_fu_496_p3[14] == 1'b1) begin
        l_fu_504_p3 = 32'd14;
    end else if (p_Result_11_fu_496_p3[15] == 1'b1) begin
        l_fu_504_p3 = 32'd15;
    end else if (p_Result_11_fu_496_p3[16] == 1'b1) begin
        l_fu_504_p3 = 32'd16;
    end else if (p_Result_11_fu_496_p3[17] == 1'b1) begin
        l_fu_504_p3 = 32'd17;
    end else if (p_Result_11_fu_496_p3[18] == 1'b1) begin
        l_fu_504_p3 = 32'd18;
    end else if (p_Result_11_fu_496_p3[19] == 1'b1) begin
        l_fu_504_p3 = 32'd19;
    end else if (p_Result_11_fu_496_p3[20] == 1'b1) begin
        l_fu_504_p3 = 32'd20;
    end else if (p_Result_11_fu_496_p3[21] == 1'b1) begin
        l_fu_504_p3 = 32'd21;
    end else if (p_Result_11_fu_496_p3[22] == 1'b1) begin
        l_fu_504_p3 = 32'd22;
    end else if (p_Result_11_fu_496_p3[23] == 1'b1) begin
        l_fu_504_p3 = 32'd23;
    end else if (p_Result_11_fu_496_p3[24] == 1'b1) begin
        l_fu_504_p3 = 32'd24;
    end else if (p_Result_11_fu_496_p3[25] == 1'b1) begin
        l_fu_504_p3 = 32'd25;
    end else if (p_Result_11_fu_496_p3[26] == 1'b1) begin
        l_fu_504_p3 = 32'd26;
    end else if (p_Result_11_fu_496_p3[27] == 1'b1) begin
        l_fu_504_p3 = 32'd27;
    end else if (p_Result_11_fu_496_p3[28] == 1'b1) begin
        l_fu_504_p3 = 32'd28;
    end else if (p_Result_11_fu_496_p3[29] == 1'b1) begin
        l_fu_504_p3 = 32'd29;
    end else if (p_Result_11_fu_496_p3[30] == 1'b1) begin
        l_fu_504_p3 = 32'd30;
    end else if (p_Result_11_fu_496_p3[31] == 1'b1) begin
        l_fu_504_p3 = 32'd31;
    end else begin
        l_fu_504_p3 = 32'd32;
    end
end

assign lsb_index_fu_522_p2 = ($signed(32'd4294967272) + $signed(sub_ln944_fu_512_p2));

assign lshr_ln947_fu_558_p2 = 7'd127 >> zext_ln947_fu_554_p1;

assign lshr_ln958_fu_646_p2 = m_fu_630_p1 >> add_ln958_fu_640_p2;

assign m_1_fu_664_p3 = ((icmp_ln958_fu_634_p2[0:0] === 1'b1) ? lshr_ln958_fu_646_p2 : shl_ln958_fu_658_p2);

assign m_2_fu_672_p2 = (or_ln_fu_622_p3 + m_1_fu_664_p3);

assign m_6_fu_700_p1 = m_5_reg_833;

assign m_fu_630_p1 = tmp_V_4_fu_481_p3;

assign man_V_1_fu_234_p2 = (54'd0 - p_Result_9_fu_230_p1);

assign man_V_2_fu_240_p3 = ((p_Result_8_fu_196_p3[0:0] === 1'b1) ? man_V_1_fu_234_p2 : p_Result_9_fu_230_p1);

assign or_ln581_fu_395_p2 = (or_ln582_fu_357_p2 | icmp_ln581_fu_270_p2);

assign or_ln582_fu_357_p2 = (icmp_ln582_fu_296_p2 | icmp_ln571_fu_248_p2);

assign or_ln949_fu_616_p2 = (and_ln949_fu_610_p2 | a_fu_576_p2);

assign or_ln_fu_622_p3 = {{31'd0}, {or_ln949_fu_616_p2}};

assign output_r_Addr_A = output_r_Addr_A_orig << 32'd2;

assign output_r_Addr_A_orig = zext_ln10_reg_760;

assign output_r_Clk_A = ap_clk;

assign output_r_Din_A = ((icmp_ln935_reg_828[0:0] === 1'b1) ? 32'd0 : bitcast_ln739_fu_740_p1);

assign output_r_Rst_A = ap_rst_n_inv;

assign p_Result_11_fu_496_p3 = {{25'd33554431}, {p_Result_s_fu_486_p4}};

assign p_Result_12_fu_728_p5 = {{tmp_2_fu_721_p3}, {m_6_fu_700_p1[22:0]}};

assign p_Result_5_fu_602_p3 = tmp_V_4_fu_481_p3[add_ln949_fu_596_p2];

assign p_Result_6_fu_564_p2 = (tmp_V_4_fu_481_p3 & lshr_ln947_fu_558_p2);

assign p_Result_8_fu_196_p3 = ireg_V_fu_188_p1[32'd63];

assign p_Result_9_fu_230_p1 = tmp_fu_222_p3;

integer ap_tvar_int_0;

always @ (tmp_V_4_fu_481_p3) begin
    for (ap_tvar_int_0 = 7 - 1; ap_tvar_int_0 >= 0; ap_tvar_int_0 = ap_tvar_int_0 - 1) begin
        if (ap_tvar_int_0 > 6 - 0) begin
            p_Result_s_fu_486_p4[ap_tvar_int_0] = 1'b0;
        end else begin
            p_Result_s_fu_486_p4[ap_tvar_int_0] = tmp_V_4_fu_481_p3[6 - ap_tvar_int_0];
        end
    end
end

assign p_Val2_1_fu_449_p3 = ((and_ln603_reg_806[0:0] === 1'b1) ? shl_ln604_fu_433_p2 : select_ln585_1_fu_442_p3);

assign select_ln582_fu_349_p3 = ((and_ln582_fu_343_p2[0:0] === 1'b1) ? trunc_ln583_fu_302_p1 : 7'd0);

assign select_ln585_1_fu_442_p3 = ((and_ln585_1_fu_438_p2[0:0] === 1'b1) ? trunc_ln586_fu_425_p1 : select_ln585_reg_801);

assign select_ln585_fu_387_p3 = ((and_ln585_fu_381_p2[0:0] === 1'b1) ? select_ln588_fu_329_p3 : select_ln582_fu_349_p3);

assign select_ln588_fu_329_p3 = ((tmp_4_fu_321_p3[0:0] === 1'b1) ? 7'd127 : 7'd0);

assign select_ln964_fu_703_p3 = ((tmp_8_reg_838[0:0] === 1'b1) ? 8'd127 : 8'd126);

assign sext_ln581_fu_413_p1 = sh_amt_reg_781;

assign sext_ln581cast_fu_429_p1 = sext_ln581_fu_413_p1[6:0];

assign sh_amt_fu_288_p3 = ((icmp_ln581_fu_270_p2[0:0] === 1'b1) ? add_ln581_fu_276_p2 : sub_ln581_fu_282_p2);

assign shl_ln604_fu_433_p2 = trunc_ln583_reg_786 << sext_ln581cast_fu_429_p1;

assign shl_ln958_fu_658_p2 = m_fu_630_p1 << sub_ln958_fu_652_p2;

assign sub_ln581_fu_282_p2 = (12'd3 - F2_fu_254_p2);

assign sub_ln944_fu_512_p2 = (32'd7 - l_fu_504_p3);

assign sub_ln947_fu_548_p2 = (3'd0 - trunc_ln947_fu_544_p1);

assign sub_ln958_fu_652_p2 = (32'd25 - sub_ln944_fu_512_p2);

assign sub_ln964_fu_710_p2 = (8'd4 - trunc_ln943_reg_843);

assign tmp_2_fu_721_p3 = {{p_Result_10_reg_817}, {add_ln964_fu_715_p2}};

assign tmp_3_fu_260_p4 = {{F2_fu_254_p2[11:2]}};

assign tmp_4_fu_321_p3 = bitcast_ln696_fu_318_p1[32'd31];

assign tmp_6_fu_528_p4 = {{lsb_index_fu_522_p2[31:1]}};

assign tmp_7_fu_582_p3 = lsb_index_fu_522_p2[32'd31];

assign tmp_V_3_fu_456_p2 = (7'd8 + p_Val2_1_fu_449_p3);

assign tmp_V_4_fu_481_p3 = ((p_Result_10_reg_817[0:0] === 1'b1) ? tmp_V_reg_823 : tmp_V_3_reg_811);

assign tmp_V_fu_470_p2 = ($signed(7'd120) - $signed(p_Val2_1_fu_449_p3));

assign tmp_fu_222_p3 = {{1'd1}, {trunc_ln565_fu_218_p1}};

assign trunc_ln556_fu_192_p1 = ireg_V_fu_188_p1[62:0];

assign trunc_ln565_fu_218_p1 = ireg_V_fu_188_p1[51:0];

assign trunc_ln583_fu_302_p1 = man_V_2_fu_240_p3[6:0];

assign trunc_ln586_fu_425_p1 = ashr_ln586_fu_420_p2[6:0];

assign trunc_ln943_fu_696_p1 = l_fu_504_p3[7:0];

assign trunc_ln944_fu_518_p1 = sub_ln944_fu_512_p2[6:0];

assign trunc_ln947_fu_544_p1 = sub_ln944_fu_512_p2[2:0];

assign xor_ln571_fu_337_p2 = (icmp_ln571_fu_248_p2 ^ 1'd1);

assign xor_ln581_fu_401_p2 = (or_ln581_fu_395_p2 ^ 1'd1);

assign xor_ln582_fu_363_p2 = (or_ln582_fu_357_p2 ^ 1'd1);

assign xor_ln585_fu_375_p2 = (icmp_ln585_fu_306_p2 ^ 1'd1);

assign xor_ln949_fu_590_p2 = (tmp_7_fu_582_p3 ^ 1'd1);

assign zext_ln10_fu_183_p1 = i_0_reg_156;

assign zext_ln461_fu_214_p1 = exp_tmp_V_fu_204_p4;

assign zext_ln586_fu_416_p1 = $unsigned(sext_ln581_fu_413_p1);

assign zext_ln947_fu_554_p1 = sub_ln947_fu_548_p2;

always @ (posedge ap_clk) begin
    zext_ln10_reg_760[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //apdp
