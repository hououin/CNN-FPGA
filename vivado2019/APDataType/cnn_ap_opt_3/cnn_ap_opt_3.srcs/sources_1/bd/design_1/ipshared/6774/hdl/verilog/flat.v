// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_q0,
        flat_array_0_V_address0,
        flat_array_0_V_ce0,
        flat_array_0_V_we0,
        flat_array_0_V_d0,
        flat_array_1_V_address0,
        flat_array_1_V_ce0,
        flat_array_1_V_we0,
        flat_array_1_V_d0,
        flat_array_2_V_address0,
        flat_array_2_V_ce0,
        flat_array_2_V_we0,
        flat_array_2_V_d0,
        flat_array_3_V_address0,
        flat_array_3_V_ce0,
        flat_array_3_V_we0,
        flat_array_3_V_d0,
        flat_array_4_V_address0,
        flat_array_4_V_ce0,
        flat_array_4_V_we0,
        flat_array_4_V_d0,
        flat_array_5_V_address0,
        flat_array_5_V_ce0,
        flat_array_5_V_we0,
        flat_array_5_V_d0,
        flat_array_6_V_address0,
        flat_array_6_V_ce0,
        flat_array_6_V_we0,
        flat_array_6_V_d0,
        flat_array_7_V_address0,
        flat_array_7_V_ce0,
        flat_array_7_V_we0,
        flat_array_7_V_d0,
        flat_array_8_V_address0,
        flat_array_8_V_ce0,
        flat_array_8_V_we0,
        flat_array_8_V_d0,
        flat_array_9_V_address0,
        flat_array_9_V_ce0,
        flat_array_9_V_we0,
        flat_array_9_V_d0,
        flat_array_10_V_address0,
        flat_array_10_V_ce0,
        flat_array_10_V_we0,
        flat_array_10_V_d0,
        flat_array_11_V_address0,
        flat_array_11_V_ce0,
        flat_array_11_V_we0,
        flat_array_11_V_d0,
        flat_array_12_V_address0,
        flat_array_12_V_ce0,
        flat_array_12_V_we0,
        flat_array_12_V_d0,
        flat_array_13_V_address0,
        flat_array_13_V_ce0,
        flat_array_13_V_we0,
        flat_array_13_V_d0,
        flat_array_14_V_address0,
        flat_array_14_V_ce0,
        flat_array_14_V_we0,
        flat_array_14_V_d0,
        flat_array_15_V_address0,
        flat_array_15_V_ce0,
        flat_array_15_V_we0,
        flat_array_15_V_d0,
        flat_array_16_V_address0,
        flat_array_16_V_ce0,
        flat_array_16_V_we0,
        flat_array_16_V_d0,
        flat_array_17_V_address0,
        flat_array_17_V_ce0,
        flat_array_17_V_we0,
        flat_array_17_V_d0,
        flat_array_18_V_address0,
        flat_array_18_V_ce0,
        flat_array_18_V_we0,
        flat_array_18_V_d0,
        flat_array_19_V_address0,
        flat_array_19_V_ce0,
        flat_array_19_V_we0,
        flat_array_19_V_d0,
        flat_array_20_V_address0,
        flat_array_20_V_ce0,
        flat_array_20_V_we0,
        flat_array_20_V_d0,
        flat_array_21_V_address0,
        flat_array_21_V_ce0,
        flat_array_21_V_we0,
        flat_array_21_V_d0,
        flat_array_22_V_address0,
        flat_array_22_V_ce0,
        flat_array_22_V_we0,
        flat_array_22_V_d0,
        flat_array_23_V_address0,
        flat_array_23_V_ce0,
        flat_array_23_V_we0,
        flat_array_23_V_d0,
        flat_array_24_V_address0,
        flat_array_24_V_ce0,
        flat_array_24_V_we0,
        flat_array_24_V_d0,
        flat_array_25_V_address0,
        flat_array_25_V_ce0,
        flat_array_25_V_we0,
        flat_array_25_V_d0,
        flat_array_26_V_address0,
        flat_array_26_V_ce0,
        flat_array_26_V_we0,
        flat_array_26_V_d0,
        flat_array_27_V_address0,
        flat_array_27_V_ce0,
        flat_array_27_V_we0,
        flat_array_27_V_d0,
        flat_array_28_V_address0,
        flat_array_28_V_ce0,
        flat_array_28_V_we0,
        flat_array_28_V_d0,
        flat_array_29_V_address0,
        flat_array_29_V_ce0,
        flat_array_29_V_we0,
        flat_array_29_V_d0,
        flat_array_30_V_address0,
        flat_array_30_V_ce0,
        flat_array_30_V_we0,
        flat_array_30_V_d0,
        flat_array_31_V_address0,
        flat_array_31_V_ce0,
        flat_array_31_V_we0,
        flat_array_31_V_d0,
        flat_array_32_V_address0,
        flat_array_32_V_ce0,
        flat_array_32_V_we0,
        flat_array_32_V_d0,
        flat_array_33_V_address0,
        flat_array_33_V_ce0,
        flat_array_33_V_we0,
        flat_array_33_V_d0,
        flat_array_34_V_address0,
        flat_array_34_V_ce0,
        flat_array_34_V_we0,
        flat_array_34_V_d0,
        flat_array_35_V_address0,
        flat_array_35_V_ce0,
        flat_array_35_V_we0,
        flat_array_35_V_d0,
        flat_array_36_V_address0,
        flat_array_36_V_ce0,
        flat_array_36_V_we0,
        flat_array_36_V_d0,
        flat_array_37_V_address0,
        flat_array_37_V_ce0,
        flat_array_37_V_we0,
        flat_array_37_V_d0,
        flat_array_38_V_address0,
        flat_array_38_V_ce0,
        flat_array_38_V_we0,
        flat_array_38_V_d0,
        flat_array_39_V_address0,
        flat_array_39_V_ce0,
        flat_array_39_V_we0,
        flat_array_39_V_d0,
        flat_array_40_V_address0,
        flat_array_40_V_ce0,
        flat_array_40_V_we0,
        flat_array_40_V_d0,
        flat_array_41_V_address0,
        flat_array_41_V_ce0,
        flat_array_41_V_we0,
        flat_array_41_V_d0,
        flat_array_42_V_address0,
        flat_array_42_V_ce0,
        flat_array_42_V_we0,
        flat_array_42_V_d0,
        flat_array_43_V_address0,
        flat_array_43_V_ce0,
        flat_array_43_V_we0,
        flat_array_43_V_d0,
        flat_array_44_V_address0,
        flat_array_44_V_ce0,
        flat_array_44_V_we0,
        flat_array_44_V_d0,
        flat_array_45_V_address0,
        flat_array_45_V_ce0,
        flat_array_45_V_we0,
        flat_array_45_V_d0,
        flat_array_46_V_address0,
        flat_array_46_V_ce0,
        flat_array_46_V_we0,
        flat_array_46_V_d0,
        flat_array_47_V_address0,
        flat_array_47_V_ce0,
        flat_array_47_V_we0,
        flat_array_47_V_d0,
        flat_array_48_V_address0,
        flat_array_48_V_ce0,
        flat_array_48_V_we0,
        flat_array_48_V_d0,
        flat_array_49_V_address0,
        flat_array_49_V_ce0,
        flat_array_49_V_we0,
        flat_array_49_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
input  [13:0] max_pool_out_V_q0;
output  [2:0] flat_array_0_V_address0;
output   flat_array_0_V_ce0;
output   flat_array_0_V_we0;
output  [13:0] flat_array_0_V_d0;
output  [2:0] flat_array_1_V_address0;
output   flat_array_1_V_ce0;
output   flat_array_1_V_we0;
output  [13:0] flat_array_1_V_d0;
output  [2:0] flat_array_2_V_address0;
output   flat_array_2_V_ce0;
output   flat_array_2_V_we0;
output  [13:0] flat_array_2_V_d0;
output  [2:0] flat_array_3_V_address0;
output   flat_array_3_V_ce0;
output   flat_array_3_V_we0;
output  [13:0] flat_array_3_V_d0;
output  [2:0] flat_array_4_V_address0;
output   flat_array_4_V_ce0;
output   flat_array_4_V_we0;
output  [13:0] flat_array_4_V_d0;
output  [2:0] flat_array_5_V_address0;
output   flat_array_5_V_ce0;
output   flat_array_5_V_we0;
output  [13:0] flat_array_5_V_d0;
output  [2:0] flat_array_6_V_address0;
output   flat_array_6_V_ce0;
output   flat_array_6_V_we0;
output  [13:0] flat_array_6_V_d0;
output  [2:0] flat_array_7_V_address0;
output   flat_array_7_V_ce0;
output   flat_array_7_V_we0;
output  [13:0] flat_array_7_V_d0;
output  [2:0] flat_array_8_V_address0;
output   flat_array_8_V_ce0;
output   flat_array_8_V_we0;
output  [13:0] flat_array_8_V_d0;
output  [2:0] flat_array_9_V_address0;
output   flat_array_9_V_ce0;
output   flat_array_9_V_we0;
output  [13:0] flat_array_9_V_d0;
output  [2:0] flat_array_10_V_address0;
output   flat_array_10_V_ce0;
output   flat_array_10_V_we0;
output  [13:0] flat_array_10_V_d0;
output  [2:0] flat_array_11_V_address0;
output   flat_array_11_V_ce0;
output   flat_array_11_V_we0;
output  [13:0] flat_array_11_V_d0;
output  [2:0] flat_array_12_V_address0;
output   flat_array_12_V_ce0;
output   flat_array_12_V_we0;
output  [13:0] flat_array_12_V_d0;
output  [2:0] flat_array_13_V_address0;
output   flat_array_13_V_ce0;
output   flat_array_13_V_we0;
output  [13:0] flat_array_13_V_d0;
output  [2:0] flat_array_14_V_address0;
output   flat_array_14_V_ce0;
output   flat_array_14_V_we0;
output  [13:0] flat_array_14_V_d0;
output  [2:0] flat_array_15_V_address0;
output   flat_array_15_V_ce0;
output   flat_array_15_V_we0;
output  [13:0] flat_array_15_V_d0;
output  [2:0] flat_array_16_V_address0;
output   flat_array_16_V_ce0;
output   flat_array_16_V_we0;
output  [13:0] flat_array_16_V_d0;
output  [2:0] flat_array_17_V_address0;
output   flat_array_17_V_ce0;
output   flat_array_17_V_we0;
output  [13:0] flat_array_17_V_d0;
output  [2:0] flat_array_18_V_address0;
output   flat_array_18_V_ce0;
output   flat_array_18_V_we0;
output  [13:0] flat_array_18_V_d0;
output  [2:0] flat_array_19_V_address0;
output   flat_array_19_V_ce0;
output   flat_array_19_V_we0;
output  [13:0] flat_array_19_V_d0;
output  [2:0] flat_array_20_V_address0;
output   flat_array_20_V_ce0;
output   flat_array_20_V_we0;
output  [13:0] flat_array_20_V_d0;
output  [2:0] flat_array_21_V_address0;
output   flat_array_21_V_ce0;
output   flat_array_21_V_we0;
output  [13:0] flat_array_21_V_d0;
output  [2:0] flat_array_22_V_address0;
output   flat_array_22_V_ce0;
output   flat_array_22_V_we0;
output  [13:0] flat_array_22_V_d0;
output  [2:0] flat_array_23_V_address0;
output   flat_array_23_V_ce0;
output   flat_array_23_V_we0;
output  [13:0] flat_array_23_V_d0;
output  [2:0] flat_array_24_V_address0;
output   flat_array_24_V_ce0;
output   flat_array_24_V_we0;
output  [13:0] flat_array_24_V_d0;
output  [2:0] flat_array_25_V_address0;
output   flat_array_25_V_ce0;
output   flat_array_25_V_we0;
output  [13:0] flat_array_25_V_d0;
output  [2:0] flat_array_26_V_address0;
output   flat_array_26_V_ce0;
output   flat_array_26_V_we0;
output  [13:0] flat_array_26_V_d0;
output  [2:0] flat_array_27_V_address0;
output   flat_array_27_V_ce0;
output   flat_array_27_V_we0;
output  [13:0] flat_array_27_V_d0;
output  [2:0] flat_array_28_V_address0;
output   flat_array_28_V_ce0;
output   flat_array_28_V_we0;
output  [13:0] flat_array_28_V_d0;
output  [2:0] flat_array_29_V_address0;
output   flat_array_29_V_ce0;
output   flat_array_29_V_we0;
output  [13:0] flat_array_29_V_d0;
output  [2:0] flat_array_30_V_address0;
output   flat_array_30_V_ce0;
output   flat_array_30_V_we0;
output  [13:0] flat_array_30_V_d0;
output  [2:0] flat_array_31_V_address0;
output   flat_array_31_V_ce0;
output   flat_array_31_V_we0;
output  [13:0] flat_array_31_V_d0;
output  [2:0] flat_array_32_V_address0;
output   flat_array_32_V_ce0;
output   flat_array_32_V_we0;
output  [13:0] flat_array_32_V_d0;
output  [2:0] flat_array_33_V_address0;
output   flat_array_33_V_ce0;
output   flat_array_33_V_we0;
output  [13:0] flat_array_33_V_d0;
output  [2:0] flat_array_34_V_address0;
output   flat_array_34_V_ce0;
output   flat_array_34_V_we0;
output  [13:0] flat_array_34_V_d0;
output  [2:0] flat_array_35_V_address0;
output   flat_array_35_V_ce0;
output   flat_array_35_V_we0;
output  [13:0] flat_array_35_V_d0;
output  [2:0] flat_array_36_V_address0;
output   flat_array_36_V_ce0;
output   flat_array_36_V_we0;
output  [13:0] flat_array_36_V_d0;
output  [2:0] flat_array_37_V_address0;
output   flat_array_37_V_ce0;
output   flat_array_37_V_we0;
output  [13:0] flat_array_37_V_d0;
output  [2:0] flat_array_38_V_address0;
output   flat_array_38_V_ce0;
output   flat_array_38_V_we0;
output  [13:0] flat_array_38_V_d0;
output  [2:0] flat_array_39_V_address0;
output   flat_array_39_V_ce0;
output   flat_array_39_V_we0;
output  [13:0] flat_array_39_V_d0;
output  [2:0] flat_array_40_V_address0;
output   flat_array_40_V_ce0;
output   flat_array_40_V_we0;
output  [13:0] flat_array_40_V_d0;
output  [2:0] flat_array_41_V_address0;
output   flat_array_41_V_ce0;
output   flat_array_41_V_we0;
output  [13:0] flat_array_41_V_d0;
output  [2:0] flat_array_42_V_address0;
output   flat_array_42_V_ce0;
output   flat_array_42_V_we0;
output  [13:0] flat_array_42_V_d0;
output  [2:0] flat_array_43_V_address0;
output   flat_array_43_V_ce0;
output   flat_array_43_V_we0;
output  [13:0] flat_array_43_V_d0;
output  [2:0] flat_array_44_V_address0;
output   flat_array_44_V_ce0;
output   flat_array_44_V_we0;
output  [13:0] flat_array_44_V_d0;
output  [2:0] flat_array_45_V_address0;
output   flat_array_45_V_ce0;
output   flat_array_45_V_we0;
output  [13:0] flat_array_45_V_d0;
output  [2:0] flat_array_46_V_address0;
output   flat_array_46_V_ce0;
output   flat_array_46_V_we0;
output  [13:0] flat_array_46_V_d0;
output  [2:0] flat_array_47_V_address0;
output   flat_array_47_V_ce0;
output   flat_array_47_V_we0;
output  [13:0] flat_array_47_V_d0;
output  [2:0] flat_array_48_V_address0;
output   flat_array_48_V_ce0;
output   flat_array_48_V_we0;
output  [13:0] flat_array_48_V_d0;
output  [2:0] flat_array_49_V_address0;
output   flat_array_49_V_ce0;
output   flat_array_49_V_we0;
output  [13:0] flat_array_49_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_V_ce0;
reg flat_array_0_V_ce0;
reg flat_array_0_V_we0;
reg flat_array_1_V_ce0;
reg flat_array_1_V_we0;
reg flat_array_2_V_ce0;
reg flat_array_2_V_we0;
reg flat_array_3_V_ce0;
reg flat_array_3_V_we0;
reg flat_array_4_V_ce0;
reg flat_array_4_V_we0;
reg flat_array_5_V_ce0;
reg flat_array_5_V_we0;
reg flat_array_6_V_ce0;
reg flat_array_6_V_we0;
reg flat_array_7_V_ce0;
reg flat_array_7_V_we0;
reg flat_array_8_V_ce0;
reg flat_array_8_V_we0;
reg flat_array_9_V_ce0;
reg flat_array_9_V_we0;
reg flat_array_10_V_ce0;
reg flat_array_10_V_we0;
reg flat_array_11_V_ce0;
reg flat_array_11_V_we0;
reg flat_array_12_V_ce0;
reg flat_array_12_V_we0;
reg flat_array_13_V_ce0;
reg flat_array_13_V_we0;
reg flat_array_14_V_ce0;
reg flat_array_14_V_we0;
reg flat_array_15_V_ce0;
reg flat_array_15_V_we0;
reg flat_array_16_V_ce0;
reg flat_array_16_V_we0;
reg flat_array_17_V_ce0;
reg flat_array_17_V_we0;
reg flat_array_18_V_ce0;
reg flat_array_18_V_we0;
reg flat_array_19_V_ce0;
reg flat_array_19_V_we0;
reg flat_array_20_V_ce0;
reg flat_array_20_V_we0;
reg flat_array_21_V_ce0;
reg flat_array_21_V_we0;
reg flat_array_22_V_ce0;
reg flat_array_22_V_we0;
reg flat_array_23_V_ce0;
reg flat_array_23_V_we0;
reg flat_array_24_V_ce0;
reg flat_array_24_V_we0;
reg flat_array_25_V_ce0;
reg flat_array_25_V_we0;
reg flat_array_26_V_ce0;
reg flat_array_26_V_we0;
reg flat_array_27_V_ce0;
reg flat_array_27_V_we0;
reg flat_array_28_V_ce0;
reg flat_array_28_V_we0;
reg flat_array_29_V_ce0;
reg flat_array_29_V_we0;
reg flat_array_30_V_ce0;
reg flat_array_30_V_we0;
reg flat_array_31_V_ce0;
reg flat_array_31_V_we0;
reg flat_array_32_V_ce0;
reg flat_array_32_V_we0;
reg flat_array_33_V_ce0;
reg flat_array_33_V_we0;
reg flat_array_34_V_ce0;
reg flat_array_34_V_we0;
reg flat_array_35_V_ce0;
reg flat_array_35_V_we0;
reg flat_array_36_V_ce0;
reg flat_array_36_V_we0;
reg flat_array_37_V_ce0;
reg flat_array_37_V_we0;
reg flat_array_38_V_ce0;
reg flat_array_38_V_we0;
reg flat_array_39_V_ce0;
reg flat_array_39_V_we0;
reg flat_array_40_V_ce0;
reg flat_array_40_V_we0;
reg flat_array_41_V_ce0;
reg flat_array_41_V_we0;
reg flat_array_42_V_ce0;
reg flat_array_42_V_we0;
reg flat_array_43_V_ce0;
reg flat_array_43_V_we0;
reg flat_array_44_V_ce0;
reg flat_array_44_V_we0;
reg flat_array_45_V_ce0;
reg flat_array_45_V_we0;
reg flat_array_46_V_ce0;
reg flat_array_46_V_we0;
reg flat_array_47_V_ce0;
reg flat_array_47_V_we0;
reg flat_array_48_V_ce0;
reg flat_array_48_V_we0;
reg flat_array_49_V_ce0;
reg flat_array_49_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_1040_p2;
reg   [2:0] r_reg_1212;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_1046_p2;
reg   [8:0] i_reg_1217;
wire   [0:0] icmp_ln6_fu_1034_p2;
wire   [5:0] add_ln203_fu_1068_p2;
reg   [5:0] add_ln203_reg_1222;
wire   [2:0] c_fu_1080_p2;
reg   [2:0] c_reg_1230;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln15_fu_1086_p2;
reg   [8:0] add_ln15_reg_1235;
wire   [0:0] icmp_ln9_fu_1074_p2;
wire   [9:0] tmp_18_cast_fu_1101_p3;
reg   [9:0] tmp_18_cast_reg_1240;
wire   [4:0] f_fu_1115_p2;
reg   [4:0] f_reg_1248;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln12_fu_1109_p2;
wire   [8:0] add_ln15_1_fu_1203_p2;
wire    ap_CS_fsm_state5;
reg   [8:0] i_0_reg_967;
reg   [2:0] r_0_reg_979;
reg   [8:0] i_1_reg_990;
reg   [2:0] c_0_reg_1001;
reg   [8:0] i_2_reg_1012;
reg   [4:0] f_0_reg_1023;
wire   [63:0] zext_ln203_10_fu_1130_p1;
wire   [63:0] zext_ln203_fu_1149_p1;
wire   [5:0] tmp_1_fu_1135_p4;
wire   [4:0] tmp_s_fu_1056_p3;
wire   [5:0] zext_ln203_6_fu_1052_p1;
wire   [5:0] zext_ln203_7_fu_1064_p1;
wire   [5:0] zext_ln203_8_fu_1092_p1;
wire   [5:0] add_ln203_3_fu_1096_p2;
wire   [9:0] zext_ln203_9_fu_1121_p1;
wire   [9:0] add_ln203_4_fu_1125_p2;
wire   [2:0] trunc_ln203_fu_1145_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_1109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_1001 <= c_reg_1230;
    end else if (((icmp_ln6_fu_1034_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_1001 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_1023 <= f_reg_1248;
    end else if (((icmp_ln9_fu_1074_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_1023 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_1074_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_967 <= i_reg_1217;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_967 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_1109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_990 <= add_ln15_reg_1235;
    end else if (((icmp_ln6_fu_1034_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_990 <= i_0_reg_967;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_1012 <= add_ln15_1_fu_1203_p2;
    end else if (((icmp_ln9_fu_1074_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_1012 <= i_1_reg_990;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_1074_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_979 <= r_reg_1212;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_979 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_1074_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_reg_1235 <= add_ln15_fu_1086_p2;
        tmp_18_cast_reg_1240[9 : 4] <= tmp_18_cast_fu_1101_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_1034_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln203_reg_1222 <= add_ln203_fu_1068_p2;
        i_reg_1217 <= i_fu_1046_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_1230 <= c_fu_1080_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_1248 <= f_fu_1115_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_1212 <= r_fu_1040_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln6_fu_1034_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_1034_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_0_V_ce0 = 1'b1;
    end else begin
        flat_array_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_0_V_we0 = 1'b1;
    end else begin
        flat_array_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_10_V_ce0 = 1'b1;
    end else begin
        flat_array_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd10) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_10_V_we0 = 1'b1;
    end else begin
        flat_array_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_11_V_ce0 = 1'b1;
    end else begin
        flat_array_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd11) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_11_V_we0 = 1'b1;
    end else begin
        flat_array_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_12_V_ce0 = 1'b1;
    end else begin
        flat_array_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd12) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_12_V_we0 = 1'b1;
    end else begin
        flat_array_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_13_V_ce0 = 1'b1;
    end else begin
        flat_array_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd13) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_13_V_we0 = 1'b1;
    end else begin
        flat_array_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_14_V_ce0 = 1'b1;
    end else begin
        flat_array_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd14) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_14_V_we0 = 1'b1;
    end else begin
        flat_array_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_15_V_ce0 = 1'b1;
    end else begin
        flat_array_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd15) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_15_V_we0 = 1'b1;
    end else begin
        flat_array_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_16_V_ce0 = 1'b1;
    end else begin
        flat_array_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd16) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_16_V_we0 = 1'b1;
    end else begin
        flat_array_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_17_V_ce0 = 1'b1;
    end else begin
        flat_array_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd17) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_17_V_we0 = 1'b1;
    end else begin
        flat_array_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_18_V_ce0 = 1'b1;
    end else begin
        flat_array_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd18) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_18_V_we0 = 1'b1;
    end else begin
        flat_array_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_19_V_ce0 = 1'b1;
    end else begin
        flat_array_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd19) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_19_V_we0 = 1'b1;
    end else begin
        flat_array_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_1_V_ce0 = 1'b1;
    end else begin
        flat_array_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_1_V_we0 = 1'b1;
    end else begin
        flat_array_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_20_V_ce0 = 1'b1;
    end else begin
        flat_array_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd20) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_20_V_we0 = 1'b1;
    end else begin
        flat_array_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_21_V_ce0 = 1'b1;
    end else begin
        flat_array_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd21) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_21_V_we0 = 1'b1;
    end else begin
        flat_array_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_22_V_ce0 = 1'b1;
    end else begin
        flat_array_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd22) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_22_V_we0 = 1'b1;
    end else begin
        flat_array_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_23_V_ce0 = 1'b1;
    end else begin
        flat_array_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd23) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_23_V_we0 = 1'b1;
    end else begin
        flat_array_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_24_V_ce0 = 1'b1;
    end else begin
        flat_array_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd24) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_24_V_we0 = 1'b1;
    end else begin
        flat_array_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_25_V_ce0 = 1'b1;
    end else begin
        flat_array_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd25) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_25_V_we0 = 1'b1;
    end else begin
        flat_array_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_26_V_ce0 = 1'b1;
    end else begin
        flat_array_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd26) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_26_V_we0 = 1'b1;
    end else begin
        flat_array_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_27_V_ce0 = 1'b1;
    end else begin
        flat_array_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd27) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_27_V_we0 = 1'b1;
    end else begin
        flat_array_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_28_V_ce0 = 1'b1;
    end else begin
        flat_array_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd28) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_28_V_we0 = 1'b1;
    end else begin
        flat_array_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_29_V_ce0 = 1'b1;
    end else begin
        flat_array_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd29) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_29_V_we0 = 1'b1;
    end else begin
        flat_array_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_2_V_ce0 = 1'b1;
    end else begin
        flat_array_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd2) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_2_V_we0 = 1'b1;
    end else begin
        flat_array_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_30_V_ce0 = 1'b1;
    end else begin
        flat_array_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd30) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_30_V_we0 = 1'b1;
    end else begin
        flat_array_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_31_V_ce0 = 1'b1;
    end else begin
        flat_array_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd31) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_31_V_we0 = 1'b1;
    end else begin
        flat_array_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_32_V_ce0 = 1'b1;
    end else begin
        flat_array_32_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd32) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_32_V_we0 = 1'b1;
    end else begin
        flat_array_32_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_33_V_ce0 = 1'b1;
    end else begin
        flat_array_33_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd33) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_33_V_we0 = 1'b1;
    end else begin
        flat_array_33_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_34_V_ce0 = 1'b1;
    end else begin
        flat_array_34_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd34) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_34_V_we0 = 1'b1;
    end else begin
        flat_array_34_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_35_V_ce0 = 1'b1;
    end else begin
        flat_array_35_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd35) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_35_V_we0 = 1'b1;
    end else begin
        flat_array_35_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_36_V_ce0 = 1'b1;
    end else begin
        flat_array_36_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd36) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_36_V_we0 = 1'b1;
    end else begin
        flat_array_36_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_37_V_ce0 = 1'b1;
    end else begin
        flat_array_37_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd37) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_37_V_we0 = 1'b1;
    end else begin
        flat_array_37_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_38_V_ce0 = 1'b1;
    end else begin
        flat_array_38_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd38) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_38_V_we0 = 1'b1;
    end else begin
        flat_array_38_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_39_V_ce0 = 1'b1;
    end else begin
        flat_array_39_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd39) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_39_V_we0 = 1'b1;
    end else begin
        flat_array_39_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_3_V_ce0 = 1'b1;
    end else begin
        flat_array_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd3) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_3_V_we0 = 1'b1;
    end else begin
        flat_array_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_40_V_ce0 = 1'b1;
    end else begin
        flat_array_40_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd40) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_40_V_we0 = 1'b1;
    end else begin
        flat_array_40_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_41_V_ce0 = 1'b1;
    end else begin
        flat_array_41_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd41) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_41_V_we0 = 1'b1;
    end else begin
        flat_array_41_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_42_V_ce0 = 1'b1;
    end else begin
        flat_array_42_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd42) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_42_V_we0 = 1'b1;
    end else begin
        flat_array_42_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_43_V_ce0 = 1'b1;
    end else begin
        flat_array_43_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd43) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_43_V_we0 = 1'b1;
    end else begin
        flat_array_43_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_44_V_ce0 = 1'b1;
    end else begin
        flat_array_44_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd44) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_44_V_we0 = 1'b1;
    end else begin
        flat_array_44_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_45_V_ce0 = 1'b1;
    end else begin
        flat_array_45_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd45) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_45_V_we0 = 1'b1;
    end else begin
        flat_array_45_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_46_V_ce0 = 1'b1;
    end else begin
        flat_array_46_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd46) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_46_V_we0 = 1'b1;
    end else begin
        flat_array_46_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_47_V_ce0 = 1'b1;
    end else begin
        flat_array_47_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd47) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_47_V_we0 = 1'b1;
    end else begin
        flat_array_47_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_48_V_ce0 = 1'b1;
    end else begin
        flat_array_48_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd48) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_48_V_we0 = 1'b1;
    end else begin
        flat_array_48_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_49_V_ce0 = 1'b1;
    end else begin
        flat_array_49_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & ((tmp_1_fu_1135_p4 == 6'd49) | ((tmp_1_fu_1135_p4 == 6'd50) | ((tmp_1_fu_1135_p4 == 6'd51) | ((tmp_1_fu_1135_p4 == 6'd52) | ((tmp_1_fu_1135_p4 == 6'd53) | ((tmp_1_fu_1135_p4 == 6'd54) | ((tmp_1_fu_1135_p4 == 6'd55) | ((tmp_1_fu_1135_p4 == 6'd56) | ((tmp_1_fu_1135_p4 == 6'd57) | ((tmp_1_fu_1135_p4 == 6'd58) | ((tmp_1_fu_1135_p4 == 6'd59) | ((tmp_1_fu_1135_p4 == 6'd60) | ((tmp_1_fu_1135_p4 == 6'd61) | ((tmp_1_fu_1135_p4 == 6'd62) | (tmp_1_fu_1135_p4 == 6'd63))))))))))))))))) begin
        flat_array_49_V_we0 = 1'b1;
    end else begin
        flat_array_49_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_4_V_ce0 = 1'b1;
    end else begin
        flat_array_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd4) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_4_V_we0 = 1'b1;
    end else begin
        flat_array_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_5_V_ce0 = 1'b1;
    end else begin
        flat_array_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd5) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_5_V_we0 = 1'b1;
    end else begin
        flat_array_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_6_V_ce0 = 1'b1;
    end else begin
        flat_array_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd6) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_6_V_we0 = 1'b1;
    end else begin
        flat_array_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_7_V_ce0 = 1'b1;
    end else begin
        flat_array_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd7) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_7_V_we0 = 1'b1;
    end else begin
        flat_array_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_8_V_ce0 = 1'b1;
    end else begin
        flat_array_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd8) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_8_V_we0 = 1'b1;
    end else begin
        flat_array_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_9_V_ce0 = 1'b1;
    end else begin
        flat_array_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_1_fu_1135_p4 == 6'd9) & (1'b1 == ap_CS_fsm_state5))) begin
        flat_array_9_V_we0 = 1'b1;
    end else begin
        flat_array_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_1034_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_1074_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_1109_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_1203_p2 = (i_2_reg_1012 + 9'd1);

assign add_ln15_fu_1086_p2 = (i_1_reg_990 + 9'd16);

assign add_ln203_3_fu_1096_p2 = (zext_ln203_8_fu_1092_p1 + add_ln203_reg_1222);

assign add_ln203_4_fu_1125_p2 = (zext_ln203_9_fu_1121_p1 + tmp_18_cast_reg_1240);

assign add_ln203_fu_1068_p2 = (zext_ln203_6_fu_1052_p1 + zext_ln203_7_fu_1064_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_1080_p2 = (c_0_reg_1001 + 3'd1);

assign f_fu_1115_p2 = (f_0_reg_1023 + 5'd1);

assign flat_array_0_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_0_V_d0 = max_pool_out_V_q0;

assign flat_array_10_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_10_V_d0 = max_pool_out_V_q0;

assign flat_array_11_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_11_V_d0 = max_pool_out_V_q0;

assign flat_array_12_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_12_V_d0 = max_pool_out_V_q0;

assign flat_array_13_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_13_V_d0 = max_pool_out_V_q0;

assign flat_array_14_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_14_V_d0 = max_pool_out_V_q0;

assign flat_array_15_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_15_V_d0 = max_pool_out_V_q0;

assign flat_array_16_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_16_V_d0 = max_pool_out_V_q0;

assign flat_array_17_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_17_V_d0 = max_pool_out_V_q0;

assign flat_array_18_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_18_V_d0 = max_pool_out_V_q0;

assign flat_array_19_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_19_V_d0 = max_pool_out_V_q0;

assign flat_array_1_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_1_V_d0 = max_pool_out_V_q0;

assign flat_array_20_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_20_V_d0 = max_pool_out_V_q0;

assign flat_array_21_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_21_V_d0 = max_pool_out_V_q0;

assign flat_array_22_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_22_V_d0 = max_pool_out_V_q0;

assign flat_array_23_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_23_V_d0 = max_pool_out_V_q0;

assign flat_array_24_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_24_V_d0 = max_pool_out_V_q0;

assign flat_array_25_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_25_V_d0 = max_pool_out_V_q0;

assign flat_array_26_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_26_V_d0 = max_pool_out_V_q0;

assign flat_array_27_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_27_V_d0 = max_pool_out_V_q0;

assign flat_array_28_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_28_V_d0 = max_pool_out_V_q0;

assign flat_array_29_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_29_V_d0 = max_pool_out_V_q0;

assign flat_array_2_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_2_V_d0 = max_pool_out_V_q0;

assign flat_array_30_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_30_V_d0 = max_pool_out_V_q0;

assign flat_array_31_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_31_V_d0 = max_pool_out_V_q0;

assign flat_array_32_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_32_V_d0 = max_pool_out_V_q0;

assign flat_array_33_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_33_V_d0 = max_pool_out_V_q0;

assign flat_array_34_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_34_V_d0 = max_pool_out_V_q0;

assign flat_array_35_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_35_V_d0 = max_pool_out_V_q0;

assign flat_array_36_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_36_V_d0 = max_pool_out_V_q0;

assign flat_array_37_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_37_V_d0 = max_pool_out_V_q0;

assign flat_array_38_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_38_V_d0 = max_pool_out_V_q0;

assign flat_array_39_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_39_V_d0 = max_pool_out_V_q0;

assign flat_array_3_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_3_V_d0 = max_pool_out_V_q0;

assign flat_array_40_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_40_V_d0 = max_pool_out_V_q0;

assign flat_array_41_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_41_V_d0 = max_pool_out_V_q0;

assign flat_array_42_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_42_V_d0 = max_pool_out_V_q0;

assign flat_array_43_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_43_V_d0 = max_pool_out_V_q0;

assign flat_array_44_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_44_V_d0 = max_pool_out_V_q0;

assign flat_array_45_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_45_V_d0 = max_pool_out_V_q0;

assign flat_array_46_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_46_V_d0 = max_pool_out_V_q0;

assign flat_array_47_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_47_V_d0 = max_pool_out_V_q0;

assign flat_array_48_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_48_V_d0 = max_pool_out_V_q0;

assign flat_array_49_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_49_V_d0 = max_pool_out_V_q0;

assign flat_array_4_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_4_V_d0 = max_pool_out_V_q0;

assign flat_array_5_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_5_V_d0 = max_pool_out_V_q0;

assign flat_array_6_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_6_V_d0 = max_pool_out_V_q0;

assign flat_array_7_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_7_V_d0 = max_pool_out_V_q0;

assign flat_array_8_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_8_V_d0 = max_pool_out_V_q0;

assign flat_array_9_V_address0 = zext_ln203_fu_1149_p1;

assign flat_array_9_V_d0 = max_pool_out_V_q0;

assign i_fu_1046_p2 = (i_0_reg_967 + 9'd80);

assign icmp_ln12_fu_1109_p2 = ((f_0_reg_1023 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_1034_p2 = ((r_0_reg_979 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_1074_p2 = ((c_0_reg_1001 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_V_address0 = zext_ln203_10_fu_1130_p1;

assign r_fu_1040_p2 = (r_0_reg_979 + 3'd1);

assign tmp_18_cast_fu_1101_p3 = {{add_ln203_3_fu_1096_p2}, {4'd0}};

assign tmp_1_fu_1135_p4 = {{i_2_reg_1012[8:3]}};

assign tmp_s_fu_1056_p3 = {{r_0_reg_979}, {2'd0}};

assign trunc_ln203_fu_1145_p1 = i_2_reg_1012[2:0];

assign zext_ln203_10_fu_1130_p1 = add_ln203_4_fu_1125_p2;

assign zext_ln203_6_fu_1052_p1 = r_0_reg_979;

assign zext_ln203_7_fu_1064_p1 = tmp_s_fu_1056_p3;

assign zext_ln203_8_fu_1092_p1 = c_0_reg_1001;

assign zext_ln203_9_fu_1121_p1 = f_0_reg_1023;

assign zext_ln203_fu_1149_p1 = trunc_ln203_fu_1145_p1;

always @ (posedge ap_clk) begin
    tmp_18_cast_reg_1240[3:0] <= 4'b0000;
end

endmodule //flat
