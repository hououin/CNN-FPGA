// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_2_out_address0,
        conv_2_out_ce0,
        conv_2_out_q0,
        conv_2_out_address1,
        conv_2_out_ce1,
        conv_2_out_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [10:0] conv_2_out_address0;
output   conv_2_out_ce0;
input  [31:0] conv_2_out_q0;
output  [10:0] conv_2_out_address1;
output   conv_2_out_ce1;
input  [31:0] conv_2_out_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg conv_2_out_ce0;
reg conv_2_out_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten59_reg_130;
reg   [4:0] f_0_reg_141;
reg   [6:0] indvar_flatten22_reg_152;
reg   [2:0] r_0_reg_164;
reg   [4:0] indvar_flatten_reg_175;
reg   [2:0] c_0_reg_186;
reg   [31:0] max_0_reg_197;
reg   [1:0] mpr_0_reg_209;
wire   [0:0] icmp_ln10_fu_239_p2;
reg   [0:0] icmp_ln10_reg_820;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_820_pp0_iter1_reg;
wire   [9:0] add_ln10_fu_245_p2;
reg   [9:0] add_ln10_reg_824;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_257_p2;
reg   [0:0] icmp_ln13_reg_829;
wire   [4:0] select_ln29_3_fu_271_p3;
reg   [4:0] select_ln29_3_reg_834;
wire   [0:0] or_ln13_fu_335_p2;
reg   [0:0] or_ln13_reg_840;
wire   [2:0] select_ln13_2_fu_365_p3;
reg   [2:0] select_ln13_2_reg_845;
wire   [0:0] or_ln16_1_fu_419_p2;
reg   [0:0] or_ln16_1_reg_852;
wire   [1:0] select_ln16_1_fu_425_p3;
reg   [1:0] select_ln16_1_reg_857;
wire   [2:0] select_ln16_4_fu_471_p3;
reg   [2:0] select_ln16_4_reg_862;
wire   [4:0] add_ln16_fu_549_p2;
reg   [4:0] add_ln16_reg_878;
wire   [31:0] select_ln16_fu_555_p3;
reg   [31:0] select_ln16_reg_883;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv_2_out_load_reg_890;
reg   [31:0] conv_2_out_load_1_reg_897;
wire   [1:0] mpr_fu_563_p2;
reg   [1:0] mpr_reg_904;
wire   [4:0] select_ln16_5_fu_568_p3;
reg   [4:0] select_ln16_5_reg_910;
wire   [6:0] select_ln13_5_fu_580_p3;
reg   [6:0] select_ln13_5_reg_915;
wire   [31:0] select_ln29_fu_692_p3;
reg   [31:0] select_ln29_reg_920;
wire   [0:0] icmp_ln20_1_fu_699_p2;
reg   [0:0] icmp_ln20_1_reg_927;
wire   [9:0] add_ln36_2_fu_721_p2;
reg   [9:0] add_ln36_2_reg_931;
wire   [31:0] select_ln29_1_fu_809_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] ap_phi_mux_indvar_flatten59_phi_fu_134_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_f_0_phi_fu_145_p4;
reg   [6:0] ap_phi_mux_indvar_flatten22_phi_fu_156_p4;
reg   [2:0] ap_phi_mux_r_0_phi_fu_168_p4;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_179_p4;
reg   [2:0] ap_phi_mux_c_0_phi_fu_190_p4;
reg   [31:0] ap_phi_mux_max_0_phi_fu_201_p4;
wire    ap_block_pp0_stage1;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_213_p4;
wire   [63:0] zext_ln29_1_fu_519_p1;
wire   [63:0] zext_ln29_2_fu_544_p1;
wire   [63:0] zext_ln36_3_fu_816_p1;
reg   [31:0] grp_fu_220_p0;
reg   [31:0] grp_fu_220_p1;
wire   [3:0] shl_ln1_fu_225_p3;
wire   [4:0] f_fu_251_p2;
wire   [3:0] shl_ln_fu_283_p3;
wire   [0:0] icmp_ln20_fu_305_p2;
wire   [0:0] xor_ln29_fu_299_p2;
wire   [0:0] icmp_ln16_fu_317_p2;
wire   [2:0] select_ln29_2_fu_263_p3;
wire   [0:0] and_ln29_5_fu_323_p2;
wire   [2:0] r_fu_329_p2;
wire   [3:0] shl_ln26_mid1_fu_349_p3;
wire   [3:0] select_ln29_4_fu_291_p3;
wire   [3:0] or_ln27_fu_233_p2;
wire   [0:0] xor_ln13_fu_389_p2;
wire   [0:0] and_ln29_4_fu_311_p2;
wire   [0:0] or_ln13_1_fu_395_p2;
wire   [2:0] select_ln13_fu_341_p3;
wire   [0:0] and_ln13_fu_401_p2;
wire   [0:0] or_ln16_fu_413_p2;
wire   [2:0] c_fu_407_p2;
wire   [3:0] shl_ln27_mid1_fu_433_p3;
wire   [3:0] select_ln13_3_fu_373_p3;
wire   [3:0] select_ln16_2_fu_441_p3;
wire   [3:0] or_ln27_1_fu_453_p2;
wire   [3:0] select_ln13_4_fu_381_p3;
wire   [3:0] select_ln16_3_fu_459_p3;
wire   [3:0] zext_ln20_fu_479_p1;
wire   [3:0] select_ln13_1_fu_357_p3;
wire   [3:0] i_fu_483_p2;
wire   [3:0] mul_ln29_fu_493_p1;
wire   [7:0] mul_ln29_fu_493_p2;
wire   [7:0] zext_ln16_fu_449_p1;
wire   [7:0] add_ln29_fu_499_p2;
wire   [11:0] tmp_6_cast_fu_505_p3;
wire   [11:0] zext_ln26_1_fu_279_p1;
wire   [11:0] add_ln29_1_fu_513_p2;
wire   [7:0] zext_ln16_1_fu_467_p1;
wire   [7:0] add_ln29_2_fu_524_p2;
wire   [11:0] tmp_11_cast_fu_530_p3;
wire   [11:0] add_ln29_3_fu_538_p2;
wire   [6:0] add_ln13_1_fu_574_p2;
wire   [4:0] tmp_fu_593_p3;
wire   [5:0] zext_ln36_fu_590_p1;
wire   [5:0] zext_ln36_2_fu_600_p1;
wire   [31:0] bitcast_ln29_fu_610_p1;
wire   [31:0] bitcast_ln29_1_fu_627_p1;
wire   [7:0] tmp_1_fu_613_p4;
wire   [22:0] trunc_ln29_fu_623_p1;
wire   [0:0] icmp_ln29_1_fu_650_p2;
wire   [0:0] icmp_ln29_fu_644_p2;
wire   [7:0] tmp_2_fu_630_p4;
wire   [22:0] trunc_ln29_1_fu_640_p1;
wire   [0:0] icmp_ln29_3_fu_668_p2;
wire   [0:0] icmp_ln29_2_fu_662_p2;
wire   [0:0] or_ln29_fu_656_p2;
wire   [0:0] or_ln29_1_fu_674_p2;
wire   [0:0] and_ln29_fu_680_p2;
wire   [0:0] grp_fu_220_p2;
wire   [0:0] and_ln29_1_fu_686_p2;
wire   [5:0] add_ln36_fu_604_p2;
wire   [5:0] zext_ln36_1_fu_704_p1;
wire   [5:0] add_ln36_1_fu_707_p2;
wire   [9:0] tmp_13_cast_fu_713_p3;
wire   [9:0] zext_ln26_fu_587_p1;
wire   [31:0] bitcast_ln29_2_fu_727_p1;
wire   [31:0] bitcast_ln29_3_fu_744_p1;
wire   [7:0] tmp_4_fu_730_p4;
wire   [22:0] trunc_ln29_2_fu_740_p1;
wire   [0:0] icmp_ln29_5_fu_767_p2;
wire   [0:0] icmp_ln29_4_fu_761_p2;
wire   [7:0] tmp_8_fu_747_p4;
wire   [22:0] trunc_ln29_3_fu_757_p1;
wire   [0:0] icmp_ln29_7_fu_785_p2;
wire   [0:0] icmp_ln29_6_fu_779_p2;
wire   [0:0] or_ln29_2_fu_773_p2;
wire   [0:0] or_ln29_3_fu_791_p2;
wire   [0:0] and_ln29_2_fu_797_p2;
wire   [0:0] and_ln29_3_fu_803_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state6;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul_ln29_fu_493_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U26(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_220_p0),
    .din1(grp_fu_220_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_220_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_186 <= select_ln16_4_reg_862;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_186 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_141 <= select_ln29_3_reg_834;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_141 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten22_reg_152 <= select_ln13_5_reg_915;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten22_reg_152 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten59_reg_130 <= add_ln10_reg_824;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_130 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_175 <= select_ln16_5_reg_910;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_175 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_820_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_0_reg_197 <= select_ln29_1_fu_809_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_0_reg_197 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_209 <= mpr_reg_904;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mpr_0_reg_209 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_164 <= select_ln13_2_reg_845;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_164 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln10_reg_824 <= add_ln10_fu_245_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_239_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln16_reg_878 <= add_ln16_fu_549_p2;
        icmp_ln13_reg_829 <= icmp_ln13_fu_257_p2;
        or_ln13_reg_840 <= or_ln13_fu_335_p2;
        or_ln16_1_reg_852 <= or_ln16_1_fu_419_p2;
        select_ln16_1_reg_857 <= select_ln16_1_fu_425_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_1_fu_699_p2 == 1'd1))) begin
        add_ln36_2_reg_931 <= add_ln36_2_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_2_out_load_1_reg_897 <= conv_2_out_q1;
        conv_2_out_load_reg_890 <= conv_2_out_q0;
        mpr_reg_904 <= mpr_fu_563_p2;
        select_ln13_5_reg_915 <= select_ln13_5_fu_580_p3;
        select_ln16_5_reg_910 <= select_ln16_5_fu_568_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_820 <= icmp_ln10_fu_239_p2;
        icmp_ln10_reg_820_pp0_iter1_reg <= icmp_ln10_reg_820;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_1_reg_927 <= icmp_ln20_1_fu_699_p2;
        select_ln29_reg_920 <= select_ln29_fu_692_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_239_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln13_2_reg_845 <= select_ln13_2_fu_365_p3;
        select_ln16_4_reg_862 <= select_ln16_4_fu_471_p3;
        select_ln29_3_reg_834 <= select_ln29_3_fu_271_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln16_reg_883 <= select_ln16_fu_555_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_239_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_190_p4 = select_ln16_4_reg_862;
    end else begin
        ap_phi_mux_c_0_phi_fu_190_p4 = c_0_reg_186;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_145_p4 = select_ln29_3_reg_834;
    end else begin
        ap_phi_mux_f_0_phi_fu_145_p4 = f_0_reg_141;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten22_phi_fu_156_p4 = select_ln13_5_reg_915;
    end else begin
        ap_phi_mux_indvar_flatten22_phi_fu_156_p4 = indvar_flatten22_reg_152;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten59_phi_fu_134_p4 = add_ln10_reg_824;
    end else begin
        ap_phi_mux_indvar_flatten59_phi_fu_134_p4 = indvar_flatten59_reg_130;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_179_p4 = select_ln16_5_reg_910;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_179_p4 = indvar_flatten_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        ap_phi_mux_max_0_phi_fu_201_p4 = select_ln29_1_fu_809_p3;
    end else begin
        ap_phi_mux_max_0_phi_fu_201_p4 = max_0_reg_197;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_213_p4 = mpr_reg_904;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_213_p4 = mpr_0_reg_209;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_820 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_168_p4 = select_ln13_2_reg_845;
    end else begin
        ap_phi_mux_r_0_phi_fu_168_p4 = r_0_reg_164;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_2_out_ce0 = 1'b1;
    end else begin
        conv_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_2_out_ce1 = 1'b1;
    end else begin
        conv_2_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_220_p0 = conv_2_out_load_1_reg_897;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_220_p0 = conv_2_out_q0;
    end else begin
        grp_fu_220_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_220_p1 = select_ln29_fu_692_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_220_p1 = select_ln16_fu_555_p3;
    end else begin
        grp_fu_220_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln20_1_reg_927 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln10_fu_239_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_245_p2 = (ap_phi_mux_indvar_flatten59_phi_fu_134_p4 + 10'd1);

assign add_ln13_1_fu_574_p2 = (indvar_flatten22_reg_152 + 7'd1);

assign add_ln16_fu_549_p2 = (ap_phi_mux_indvar_flatten_phi_fu_179_p4 + 5'd1);

assign add_ln29_1_fu_513_p2 = (tmp_6_cast_fu_505_p3 + zext_ln26_1_fu_279_p1);

assign add_ln29_2_fu_524_p2 = (mul_ln29_fu_493_p2 + zext_ln16_1_fu_467_p1);

assign add_ln29_3_fu_538_p2 = (tmp_11_cast_fu_530_p3 + zext_ln26_1_fu_279_p1);

assign add_ln29_fu_499_p2 = (mul_ln29_fu_493_p2 + zext_ln16_fu_449_p1);

assign add_ln36_1_fu_707_p2 = (add_ln36_fu_604_p2 + zext_ln36_1_fu_704_p1);

assign add_ln36_2_fu_721_p2 = (tmp_13_cast_fu_713_p3 + zext_ln26_fu_587_p1);

assign add_ln36_fu_604_p2 = (zext_ln36_fu_590_p1 + zext_ln36_2_fu_600_p1);

assign and_ln13_fu_401_p2 = (or_ln13_1_fu_395_p2 & and_ln29_4_fu_311_p2);

assign and_ln29_1_fu_686_p2 = (grp_fu_220_p2 & and_ln29_fu_680_p2);

assign and_ln29_2_fu_797_p2 = (or_ln29_3_fu_791_p2 & or_ln29_2_fu_773_p2);

assign and_ln29_3_fu_803_p2 = (grp_fu_220_p2 & and_ln29_2_fu_797_p2);

assign and_ln29_4_fu_311_p2 = (xor_ln29_fu_299_p2 & icmp_ln20_fu_305_p2);

assign and_ln29_5_fu_323_p2 = (xor_ln29_fu_299_p2 & icmp_ln16_fu_317_p2);

assign and_ln29_fu_680_p2 = (or_ln29_fu_656_p2 & or_ln29_1_fu_674_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_627_p1 = select_ln16_reg_883;

assign bitcast_ln29_2_fu_727_p1 = conv_2_out_load_1_reg_897;

assign bitcast_ln29_3_fu_744_p1 = select_ln29_reg_920;

assign bitcast_ln29_fu_610_p1 = conv_2_out_load_reg_890;

assign c_fu_407_p2 = (3'd1 + select_ln13_fu_341_p3);

assign conv_2_out_address0 = zext_ln29_1_fu_519_p1;

assign conv_2_out_address1 = zext_ln29_2_fu_544_p1;

assign f_fu_251_p2 = (5'd1 + ap_phi_mux_f_0_phi_fu_145_p4);

assign i_fu_483_p2 = (zext_ln20_fu_479_p1 + select_ln13_1_fu_357_p3);

assign icmp_ln10_fu_239_p2 = ((ap_phi_mux_indvar_flatten59_phi_fu_134_p4 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_257_p2 = ((ap_phi_mux_indvar_flatten22_phi_fu_156_p4 == 7'd50) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_317_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_179_p4 == 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_699_p2 = ((mpr_reg_904 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_305_p2 = ((ap_phi_mux_mpr_0_phi_fu_213_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_650_p2 = ((trunc_ln29_fu_623_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_662_p2 = ((tmp_2_fu_630_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_668_p2 = ((trunc_ln29_1_fu_640_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_761_p2 = ((tmp_4_fu_730_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_767_p2 = ((trunc_ln29_2_fu_740_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_779_p2 = ((tmp_8_fu_747_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_785_p2 = ((trunc_ln29_3_fu_757_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_644_p2 = ((tmp_1_fu_613_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_3_fu_816_p1;

assign max_pool_out_d0 = ((and_ln29_3_fu_803_p2[0:0] === 1'b1) ? conv_2_out_load_1_reg_897 : select_ln29_reg_920);

assign mpr_fu_563_p2 = (2'd1 + select_ln16_1_reg_857);

assign mul_ln29_fu_493_p1 = mul_ln29_fu_493_p10;

assign mul_ln29_fu_493_p10 = i_fu_483_p2;

assign mul_ln29_fu_493_p2 = (8'd11 * mul_ln29_fu_493_p1);

assign or_ln13_1_fu_395_p2 = (xor_ln13_fu_389_p2 | icmp_ln13_fu_257_p2);

assign or_ln13_fu_335_p2 = (icmp_ln13_fu_257_p2 | and_ln29_5_fu_323_p2);

assign or_ln16_1_fu_419_p2 = (or_ln16_fu_413_p2 | icmp_ln13_fu_257_p2);

assign or_ln16_fu_413_p2 = (and_ln29_5_fu_323_p2 | and_ln13_fu_401_p2);

assign or_ln27_1_fu_453_p2 = (shl_ln27_mid1_fu_433_p3 | 4'd1);

assign or_ln27_fu_233_p2 = (shl_ln1_fu_225_p3 | 4'd1);

assign or_ln29_1_fu_674_p2 = (icmp_ln29_3_fu_668_p2 | icmp_ln29_2_fu_662_p2);

assign or_ln29_2_fu_773_p2 = (icmp_ln29_5_fu_767_p2 | icmp_ln29_4_fu_761_p2);

assign or_ln29_3_fu_791_p2 = (icmp_ln29_7_fu_785_p2 | icmp_ln29_6_fu_779_p2);

assign or_ln29_fu_656_p2 = (icmp_ln29_fu_644_p2 | icmp_ln29_1_fu_650_p2);

assign r_fu_329_p2 = (3'd1 + select_ln29_2_fu_263_p3);

assign select_ln13_1_fu_357_p3 = ((and_ln29_5_fu_323_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_349_p3 : select_ln29_4_fu_291_p3);

assign select_ln13_2_fu_365_p3 = ((and_ln29_5_fu_323_p2[0:0] === 1'b1) ? r_fu_329_p2 : select_ln29_2_fu_263_p3);

assign select_ln13_3_fu_373_p3 = ((or_ln13_fu_335_p2[0:0] === 1'b1) ? 4'd0 : shl_ln1_fu_225_p3);

assign select_ln13_4_fu_381_p3 = ((or_ln13_fu_335_p2[0:0] === 1'b1) ? 4'd1 : or_ln27_fu_233_p2);

assign select_ln13_5_fu_580_p3 = ((icmp_ln13_reg_829[0:0] === 1'b1) ? 7'd1 : add_ln13_1_fu_574_p2);

assign select_ln13_fu_341_p3 = ((or_ln13_fu_335_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_c_0_phi_fu_190_p4);

assign select_ln16_1_fu_425_p3 = ((or_ln16_1_fu_419_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_mpr_0_phi_fu_213_p4);

assign select_ln16_2_fu_441_p3 = ((and_ln13_fu_401_p2[0:0] === 1'b1) ? shl_ln27_mid1_fu_433_p3 : select_ln13_3_fu_373_p3);

assign select_ln16_3_fu_459_p3 = ((and_ln13_fu_401_p2[0:0] === 1'b1) ? or_ln27_1_fu_453_p2 : select_ln13_4_fu_381_p3);

assign select_ln16_4_fu_471_p3 = ((and_ln13_fu_401_p2[0:0] === 1'b1) ? c_fu_407_p2 : select_ln13_fu_341_p3);

assign select_ln16_5_fu_568_p3 = ((or_ln13_reg_840[0:0] === 1'b1) ? 5'd1 : add_ln16_reg_878);

assign select_ln16_fu_555_p3 = ((or_ln16_1_reg_852[0:0] === 1'b1) ? 32'd8388608 : ap_phi_mux_max_0_phi_fu_201_p4);

assign select_ln29_1_fu_809_p3 = ((and_ln29_3_fu_803_p2[0:0] === 1'b1) ? conv_2_out_load_1_reg_897 : select_ln29_reg_920);

assign select_ln29_2_fu_263_p3 = ((icmp_ln13_fu_257_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_r_0_phi_fu_168_p4);

assign select_ln29_3_fu_271_p3 = ((icmp_ln13_fu_257_p2[0:0] === 1'b1) ? f_fu_251_p2 : ap_phi_mux_f_0_phi_fu_145_p4);

assign select_ln29_4_fu_291_p3 = ((icmp_ln13_fu_257_p2[0:0] === 1'b1) ? 4'd0 : shl_ln_fu_283_p3);

assign select_ln29_fu_692_p3 = ((and_ln29_1_fu_686_p2[0:0] === 1'b1) ? conv_2_out_load_reg_890 : select_ln16_reg_883);

assign shl_ln1_fu_225_p3 = {{ap_phi_mux_c_0_phi_fu_190_p4}, {1'd0}};

assign shl_ln26_mid1_fu_349_p3 = {{r_fu_329_p2}, {1'd0}};

assign shl_ln27_mid1_fu_433_p3 = {{c_fu_407_p2}, {1'd0}};

assign shl_ln_fu_283_p3 = {{ap_phi_mux_r_0_phi_fu_168_p4}, {1'd0}};

assign tmp_11_cast_fu_530_p3 = {{add_ln29_2_fu_524_p2}, {4'd0}};

assign tmp_13_cast_fu_713_p3 = {{add_ln36_1_fu_707_p2}, {4'd0}};

assign tmp_1_fu_613_p4 = {{bitcast_ln29_fu_610_p1[30:23]}};

assign tmp_2_fu_630_p4 = {{bitcast_ln29_1_fu_627_p1[30:23]}};

assign tmp_4_fu_730_p4 = {{bitcast_ln29_2_fu_727_p1[30:23]}};

assign tmp_6_cast_fu_505_p3 = {{add_ln29_fu_499_p2}, {4'd0}};

assign tmp_8_fu_747_p4 = {{bitcast_ln29_3_fu_744_p1[30:23]}};

assign tmp_fu_593_p3 = {{select_ln13_2_reg_845}, {2'd0}};

assign trunc_ln29_1_fu_640_p1 = bitcast_ln29_1_fu_627_p1[22:0];

assign trunc_ln29_2_fu_740_p1 = bitcast_ln29_2_fu_727_p1[22:0];

assign trunc_ln29_3_fu_757_p1 = bitcast_ln29_3_fu_744_p1[22:0];

assign trunc_ln29_fu_623_p1 = bitcast_ln29_fu_610_p1[22:0];

assign xor_ln13_fu_389_p2 = (icmp_ln16_fu_317_p2 ^ 1'd1);

assign xor_ln29_fu_299_p2 = (icmp_ln13_fu_257_p2 ^ 1'd1);

assign zext_ln16_1_fu_467_p1 = select_ln16_3_fu_459_p3;

assign zext_ln16_fu_449_p1 = select_ln16_2_fu_441_p3;

assign zext_ln20_fu_479_p1 = select_ln16_1_fu_425_p3;

assign zext_ln26_1_fu_279_p1 = select_ln29_3_fu_271_p3;

assign zext_ln26_fu_587_p1 = select_ln29_3_reg_834;

assign zext_ln29_1_fu_519_p1 = add_ln29_1_fu_513_p2;

assign zext_ln29_2_fu_544_p1 = add_ln29_3_fu_538_p2;

assign zext_ln36_1_fu_704_p1 = select_ln16_4_reg_862;

assign zext_ln36_2_fu_600_p1 = tmp_fu_593_p3;

assign zext_ln36_3_fu_816_p1 = add_ln36_2_reg_931;

assign zext_ln36_fu_590_p1 = select_ln13_2_reg_845;

endmodule //max_pool_2
