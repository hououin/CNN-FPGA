// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module soft_max (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_array_address0,
        dense_array_ce0,
        dense_array_q0,
        prediction_Addr_A,
        prediction_EN_A,
        prediction_WEN_A,
        prediction_Din_A,
        prediction_Dout_A
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_pp0_stage1 = 8'd4;
parameter    ap_ST_fsm_pp0_stage2 = 8'd8;
parameter    ap_ST_fsm_pp0_stage3 = 8'd16;
parameter    ap_ST_fsm_state12 = 8'd32;
parameter    ap_ST_fsm_pp1_stage0 = 8'd64;
parameter    ap_ST_fsm_state28 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] dense_array_address0;
output   dense_array_ce0;
input  [31:0] dense_array_q0;
output  [31:0] prediction_Addr_A;
output   prediction_EN_A;
output  [3:0] prediction_WEN_A;
output  [31:0] prediction_Din_A;
input  [31:0] prediction_Dout_A;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] dense_array_address0;
reg dense_array_ce0;
reg prediction_EN_A;
reg[3:0] prediction_WEN_A;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] sum_0_reg_80;
reg   [3:0] i_0_reg_92;
reg   [3:0] j_0_reg_103;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_state11_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln11_reg_175;
wire    ap_block_state13_pp1_stage0_iter0;
wire    ap_block_state14_pp1_stage0_iter1;
wire    ap_block_state15_pp1_stage0_iter2;
wire    ap_block_state16_pp1_stage0_iter3;
wire    ap_block_state17_pp1_stage0_iter4;
wire    ap_block_state18_pp1_stage0_iter5;
wire    ap_block_state19_pp1_stage0_iter6;
wire    ap_block_state20_pp1_stage0_iter7;
wire    ap_block_state21_pp1_stage0_iter8;
wire    ap_block_state22_pp1_stage0_iter9;
wire    ap_block_state23_pp1_stage0_iter10;
wire    ap_block_state24_pp1_stage0_iter11;
wire    ap_block_state25_pp1_stage0_iter12;
wire    ap_block_state26_pp1_stage0_iter13;
wire    ap_block_state27_pp1_stage0_iter14;
wire    ap_block_pp1_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln17_reg_194;
wire   [31:0] grp_fu_124_p2;
reg   [31:0] reg_135;
reg    ap_enable_reg_pp0_iter1;
reg   [0:0] icmp_ln11_reg_175_pp0_iter1_reg;
reg    ap_enable_reg_pp1_iter5;
reg   [0:0] icmp_ln17_reg_194_pp1_iter4_reg;
wire   [0:0] icmp_ln11_fu_141_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_state10_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln11_reg_175_pp0_iter2_reg;
wire   [3:0] i_fu_147_p2;
reg   [3:0] i_reg_179;
wire   [31:0] grp_fu_114_p2;
reg    ap_enable_reg_pp0_iter2;
wire   [0:0] icmp_ln17_fu_158_p2;
reg   [0:0] icmp_ln17_reg_194_pp1_iter1_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter2_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter3_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter5_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter6_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter7_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter8_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter9_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter10_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter11_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter12_reg;
reg   [0:0] icmp_ln17_reg_194_pp1_iter13_reg;
wire   [3:0] j_fu_164_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [63:0] zext_ln19_fu_170_p1;
reg   [63:0] zext_ln19_reg_203;
reg   [63:0] zext_ln19_reg_203_pp1_iter1_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter2_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter3_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter4_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter5_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter6_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter7_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter8_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter9_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter10_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter11_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter12_reg;
reg   [63:0] zext_ln19_reg_203_pp1_iter13_reg;
wire   [31:0] grp_fu_119_p2;
reg   [31:0] tmp_3_reg_213;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state9_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage1_subdone;
wire    ap_CS_fsm_state12;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state13;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg    ap_enable_reg_pp1_iter4;
reg    ap_enable_reg_pp1_iter6;
reg    ap_enable_reg_pp1_iter7;
reg    ap_enable_reg_pp1_iter8;
reg    ap_enable_reg_pp1_iter9;
reg    ap_enable_reg_pp1_iter10;
reg    ap_enable_reg_pp1_iter11;
reg    ap_enable_reg_pp1_iter12;
reg    ap_enable_reg_pp1_iter13;
reg    ap_enable_reg_pp1_iter14;
reg   [3:0] ap_phi_mux_i_0_phi_fu_96_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln13_fu_153_p1;
wire    ap_block_pp1_stage0;
wire   [31:0] prediction_Addr_A_orig;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state28;
reg   [7:0] ap_NS_fsm;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state8_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter6 = 1'b0;
#0 ap_enable_reg_pp1_iter7 = 1'b0;
#0 ap_enable_reg_pp1_iter8 = 1'b0;
#0 ap_enable_reg_pp1_iter9 = 1'b0;
#0 ap_enable_reg_pp1_iter10 = 1'b0;
#0 ap_enable_reg_pp1_iter11 = 1'b0;
#0 ap_enable_reg_pp1_iter12 = 1'b0;
#0 ap_enable_reg_pp1_iter13 = 1'b0;
#0 ap_enable_reg_pp1_iter14 = 1'b0;
end

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U31(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_80),
    .din1(reg_135),
    .ce(1'b1),
    .dout(grp_fu_114_p2)
);

cnn_fdiv_32ns_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fdiv_32ns_32nibs_U32(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_135),
    .din1(sum_0_reg_80),
    .ce(1'b1),
    .dout(grp_fu_119_p2)
);

cnn_fexp_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fexp_32ns_32njbC_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_124_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b1 == ap_condition_pp1_exit_iter0_state13))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state13)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state13);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter10 <= ap_enable_reg_pp1_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter11 <= ap_enable_reg_pp1_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter12 <= ap_enable_reg_pp1_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter13 <= ap_enable_reg_pp1_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter14 <= ap_enable_reg_pp1_iter13;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            ap_enable_reg_pp1_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter5 <= ap_enable_reg_pp1_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter6 <= ap_enable_reg_pp1_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter7 <= ap_enable_reg_pp1_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter8 <= ap_enable_reg_pp1_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter9 <= ap_enable_reg_pp1_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_175 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_0_reg_92 <= i_reg_179;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_92 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        j_0_reg_103 <= 4'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln17_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        j_0_reg_103 <= j_fu_164_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_reg_175_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_0_reg_80 <= grp_fu_114_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_0_reg_80 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_179 <= i_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln11_reg_175 <= icmp_ln11_fu_141_p2;
        icmp_ln11_reg_175_pp0_iter1_reg <= icmp_ln11_reg_175;
        icmp_ln11_reg_175_pp0_iter2_reg <= icmp_ln11_reg_175_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln17_reg_194 <= icmp_ln17_fu_158_p2;
        icmp_ln17_reg_194_pp1_iter1_reg <= icmp_ln17_reg_194;
        zext_ln19_reg_203_pp1_iter1_reg[3 : 0] <= zext_ln19_reg_203[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp1_stage0_11001)) begin
        icmp_ln17_reg_194_pp1_iter10_reg <= icmp_ln17_reg_194_pp1_iter9_reg;
        icmp_ln17_reg_194_pp1_iter11_reg <= icmp_ln17_reg_194_pp1_iter10_reg;
        icmp_ln17_reg_194_pp1_iter12_reg <= icmp_ln17_reg_194_pp1_iter11_reg;
        icmp_ln17_reg_194_pp1_iter13_reg <= icmp_ln17_reg_194_pp1_iter12_reg;
        icmp_ln17_reg_194_pp1_iter2_reg <= icmp_ln17_reg_194_pp1_iter1_reg;
        icmp_ln17_reg_194_pp1_iter3_reg <= icmp_ln17_reg_194_pp1_iter2_reg;
        icmp_ln17_reg_194_pp1_iter4_reg <= icmp_ln17_reg_194_pp1_iter3_reg;
        icmp_ln17_reg_194_pp1_iter5_reg <= icmp_ln17_reg_194_pp1_iter4_reg;
        icmp_ln17_reg_194_pp1_iter6_reg <= icmp_ln17_reg_194_pp1_iter5_reg;
        icmp_ln17_reg_194_pp1_iter7_reg <= icmp_ln17_reg_194_pp1_iter6_reg;
        icmp_ln17_reg_194_pp1_iter8_reg <= icmp_ln17_reg_194_pp1_iter7_reg;
        icmp_ln17_reg_194_pp1_iter9_reg <= icmp_ln17_reg_194_pp1_iter8_reg;
        zext_ln19_reg_203_pp1_iter10_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter9_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter11_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter10_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter12_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter11_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter13_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter12_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter2_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter1_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter3_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter2_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter4_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter3_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter5_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter4_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter6_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter5_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter7_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter6_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter8_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter7_reg[3 : 0];
        zext_ln19_reg_203_pp1_iter9_reg[3 : 0] <= zext_ln19_reg_203_pp1_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln17_reg_194_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter5 == 1'b1)) | ((icmp_ln11_reg_175_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        reg_135 <= grp_fu_124_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln17_reg_194_pp1_iter12_reg == 1'd0))) begin
        tmp_3_reg_213 <= grp_fu_119_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln17_fu_158_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        zext_ln19_reg_203[3 : 0] <= zext_ln19_fu_170_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln11_fu_141_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln17_fu_158_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state13 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state13 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state28) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter14 == 1'b0) & (ap_enable_reg_pp1_iter13 == 1'b0) & (ap_enable_reg_pp1_iter12 == 1'b0) & (ap_enable_reg_pp1_iter11 == 1'b0) & (ap_enable_reg_pp1_iter10 == 1'b0) & (ap_enable_reg_pp1_iter9 == 1'b0) & (ap_enable_reg_pp1_iter8 == 1'b0) & (ap_enable_reg_pp1_iter7 == 1'b0) & (ap_enable_reg_pp1_iter6 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter5 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln11_reg_175 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_96_p4 = i_reg_179;
    end else begin
        ap_phi_mux_i_0_phi_fu_96_p4 = i_0_reg_92;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        dense_array_address0 = zext_ln19_fu_170_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_array_address0 = zext_ln13_fu_153_p1;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        prediction_EN_A = 1'b1;
    end else begin
        prediction_EN_A = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln17_reg_194_pp1_iter13_reg == 1'd0) & (ap_enable_reg_pp1_iter14 == 1'b1))) begin
        prediction_WEN_A = 4'd15;
    end else begin
        prediction_WEN_A = 4'd0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_fu_141_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln11_fu_141_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln17_fu_158_p2 == 1'd1)) & ~((ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if ((((ap_enable_reg_pp1_iter13 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter14 == 1'b1)) | ((ap_enable_reg_pp1_iter1 == 1'b0) & (1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter0 == 1'b1) & (icmp_ln17_fu_158_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp1_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp1_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp1_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp1_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign i_fu_147_p2 = (ap_phi_mux_i_0_phi_fu_96_p4 + 4'd1);

assign icmp_ln11_fu_141_p2 = ((ap_phi_mux_i_0_phi_fu_96_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln17_fu_158_p2 = ((j_0_reg_103 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_164_p2 = (j_0_reg_103 + 4'd1);

assign prediction_Addr_A = prediction_Addr_A_orig << 32'd2;

assign prediction_Addr_A_orig = zext_ln19_reg_203_pp1_iter13_reg;

assign prediction_Din_A = tmp_3_reg_213;

assign zext_ln13_fu_153_p1 = ap_phi_mux_i_0_phi_fu_96_p4;

assign zext_ln19_fu_170_p1 = j_0_reg_103;

always @ (posedge ap_clk) begin
    zext_ln19_reg_203[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln19_reg_203_pp1_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //soft_max
