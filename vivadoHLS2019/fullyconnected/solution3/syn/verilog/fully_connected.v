// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fully_connected,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.764000,HLS_SYN_LAT=60010,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=6,HLS_SYN_FF=776,HLS_SYN_LUT=1374,HLS_VERSION=2019_1}" *)

module fully_connected (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        dense_out_address0,
        dense_out_ce0,
        dense_out_we0,
        dense_out_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state14 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [5:0] dense_out_address0;
output   dense_out_ce0;
output   dense_out_we0;
output  [31:0] dense_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg dense_out_ce0;
reg dense_out_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] fullyconnected_bias_address0;
reg    fullyconnected_bias_ce0;
wire   [31:0] fullyconnected_bias_q0;
wire   [14:0] fullyconnected_weigh_address0;
reg    fullyconnected_weigh_ce0;
wire   [31:0] fullyconnected_weigh_q0;
reg   [14:0] indvar_flatten_reg_122;
reg   [5:0] i_0_reg_133;
reg   [31:0] sum_0_reg_144;
reg   [8:0] j_0_reg_156;
wire   [0:0] icmp_ln9_fu_184_p2;
reg   [0:0] icmp_ln9_reg_321;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln9_reg_321_pp0_iter1_reg;
wire   [14:0] add_ln9_fu_190_p2;
reg   [14:0] add_ln9_reg_325;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln14_fu_202_p2;
reg   [0:0] icmp_ln14_reg_330;
wire   [8:0] select_ln15_1_fu_208_p3;
reg   [8:0] select_ln15_1_reg_335;
wire   [5:0] select_ln15_2_fu_216_p3;
reg   [5:0] select_ln15_2_reg_340;
reg   [5:0] select_ln15_2_reg_340_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_172_p2;
reg   [31:0] tmp_2_reg_366;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [8:0] j_fu_241_p2;
reg   [8:0] j_reg_371;
wire   [31:0] select_ln15_fu_246_p3;
wire   [0:0] icmp_ln14_1_fu_254_p2;
reg   [0:0] icmp_ln14_1_reg_382;
reg   [0:0] icmp_ln14_1_reg_382_pp0_iter2_reg;
reg   [0:0] icmp_ln14_1_reg_382_pp0_iter3_reg;
wire   [63:0] zext_ln15_fu_259_p1;
reg   [63:0] zext_ln15_reg_386;
reg   [63:0] zext_ln15_reg_386_pp0_iter3_reg;
wire   [31:0] grp_fu_167_p2;
reg   [31:0] sum_reg_391;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] tmp_reg_407;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [14:0] ap_phi_mux_indvar_flatten_phi_fu_126_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_i_0_phi_fu_137_p4;
reg   [31:0] ap_phi_mux_sum_0_phi_fu_148_p4;
reg   [8:0] ap_phi_mux_j_0_phi_fu_160_p4;
wire   [63:0] zext_ln15_3_fu_237_p1;
wire   [63:0] zext_ln15_1_fu_228_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_167_p0;
reg   [31:0] grp_fu_167_p1;
wire    ap_block_pp0_stage1;
wire   [5:0] i_fu_196_p2;
wire   [14:0] grp_fu_312_p3;
wire   [31:0] bitcast_ln20_fu_263_p1;
wire   [7:0] tmp_1_fu_266_p4;
wire   [22:0] trunc_ln20_fu_276_p1;
wire   [0:0] icmp_ln20_1_fu_286_p2;
wire   [0:0] icmp_ln20_fu_280_p2;
wire   [0:0] or_ln20_fu_292_p2;
wire   [0:0] grp_fu_178_p2;
wire   [0:0] and_ln20_fu_298_p2;
wire   [8:0] grp_fu_312_p0;
wire   [6:0] grp_fu_312_p1;
wire   [5:0] grp_fu_312_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state14;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [14:0] grp_fu_312_p00;
wire   [14:0] grp_fu_312_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

fully_connected_fbkb #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
fullyconnected_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fullyconnected_bias_address0),
    .ce0(fullyconnected_bias_ce0),
    .q0(fullyconnected_bias_q0)
);

fully_connected_fcud #(
    .DataWidth( 32 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
fullyconnected_weigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fullyconnected_weigh_address0),
    .ce0(fullyconnected_weigh_ce0),
    .q0(fullyconnected_weigh_q0)
);

fully_connected_fdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fully_connected_fdEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p0),
    .din1(grp_fu_167_p1),
    .ce(1'b1),
    .dout(grp_fu_167_p2)
);

fully_connected_feOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fully_connected_feOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(flat_array_q0),
    .din1(fullyconnected_weigh_q0),
    .ce(1'b1),
    .dout(grp_fu_172_p2)
);

fully_connected_ffYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fully_connected_ffYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_167_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_178_p2)
);

fully_connected_mg8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .din2_WIDTH( 6 ),
    .dout_WIDTH( 15 ))
fully_connected_mg8j_U4(
    .din0(grp_fu_312_p0),
    .din1(grp_fu_312_p1),
    .din2(grp_fu_312_p2),
    .dout(grp_fu_312_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_321 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_133 <= select_ln15_2_reg_340;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_133 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_321 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_122 <= add_ln9_reg_325;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_122 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_321 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_156 <= j_reg_371;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_156 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_321_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_0_reg_144 <= grp_fu_167_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_0_reg_144 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln9_reg_325 <= add_ln9_fu_190_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_321 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_1_reg_382 <= icmp_ln14_1_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_1_reg_382_pp0_iter2_reg <= icmp_ln14_1_reg_382;
        icmp_ln14_1_reg_382_pp0_iter3_reg <= icmp_ln14_1_reg_382_pp0_iter2_reg;
        icmp_ln9_reg_321 <= icmp_ln9_fu_184_p2;
        icmp_ln9_reg_321_pp0_iter1_reg <= icmp_ln9_reg_321;
        select_ln15_2_reg_340_pp0_iter1_reg <= select_ln15_2_reg_340;
        zext_ln15_reg_386_pp0_iter3_reg[5 : 0] <= zext_ln15_reg_386[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_184_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_330 <= icmp_ln14_fu_202_p2;
        select_ln15_1_reg_335 <= select_ln15_1_fu_208_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_321 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        j_reg_371 <= j_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_184_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln15_2_reg_340 <= select_ln15_2_fu_216_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_321_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_reg_391 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_321 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_2_reg_366 <= grp_fu_172_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_1_reg_382_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_reg_407 <= grp_fu_167_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_321_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln15_reg_386[5 : 0] <= zext_ln15_fu_259_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_184_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_321 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_137_p4 = select_ln15_2_reg_340;
    end else begin
        ap_phi_mux_i_0_phi_fu_137_p4 = i_0_reg_133;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_321 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_126_p4 = add_ln9_reg_325;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_126_p4 = indvar_flatten_reg_122;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_321 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_160_p4 = j_reg_371;
    end else begin
        ap_phi_mux_j_0_phi_fu_160_p4 = j_0_reg_156;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_321_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_sum_0_phi_fu_148_p4 = grp_fu_167_p2;
    end else begin
        ap_phi_mux_sum_0_phi_fu_148_p4 = sum_0_reg_144;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dense_out_ce0 = 1'b1;
    end else begin
        dense_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln14_1_reg_382_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dense_out_we0 = 1'b1;
    end else begin
        dense_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        fullyconnected_bias_ce0 = 1'b1;
    end else begin
        fullyconnected_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fullyconnected_weigh_ce0 = 1'b1;
    end else begin
        fullyconnected_weigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_167_p0 = sum_reg_391;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_167_p0 = select_ln15_fu_246_p3;
    end else begin
        grp_fu_167_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_167_p1 = fullyconnected_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_167_p1 = tmp_2_reg_366;
    end else begin
        grp_fu_167_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln9_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln9_fu_184_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln9_fu_190_p2 = (ap_phi_mux_indvar_flatten_phi_fu_126_p4 + 15'd1);

assign and_ln20_fu_298_p2 = (or_ln20_fu_292_p2 & grp_fu_178_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln20_fu_263_p1 = tmp_reg_407;

assign dense_out_address0 = zext_ln15_reg_386_pp0_iter3_reg;

assign dense_out_d0 = ((and_ln20_fu_298_p2[0:0] === 1'b1) ? 32'd0 : tmp_reg_407);

assign flat_array_address0 = zext_ln15_1_fu_228_p1;

assign fullyconnected_bias_address0 = zext_ln15_fu_259_p1;

assign fullyconnected_weigh_address0 = zext_ln15_3_fu_237_p1;

assign grp_fu_312_p0 = grp_fu_312_p00;

assign grp_fu_312_p00 = select_ln15_1_fu_208_p3;

assign grp_fu_312_p1 = 15'd50;

assign grp_fu_312_p2 = grp_fu_312_p20;

assign grp_fu_312_p20 = select_ln15_2_fu_216_p3;

assign i_fu_196_p2 = (ap_phi_mux_i_0_phi_fu_137_p4 + 6'd1);

assign icmp_ln14_1_fu_254_p2 = ((j_reg_371 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_202_p2 = ((ap_phi_mux_j_0_phi_fu_160_p4 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_286_p2 = ((trunc_ln20_fu_276_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_280_p2 = ((tmp_1_fu_266_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_184_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_126_p4 == 15'd20000) ? 1'b1 : 1'b0);

assign j_fu_241_p2 = (select_ln15_1_reg_335 + 9'd1);

assign or_ln20_fu_292_p2 = (icmp_ln20_fu_280_p2 | icmp_ln20_1_fu_286_p2);

assign select_ln15_1_fu_208_p3 = ((icmp_ln14_fu_202_p2[0:0] === 1'b1) ? 9'd0 : ap_phi_mux_j_0_phi_fu_160_p4);

assign select_ln15_2_fu_216_p3 = ((icmp_ln14_fu_202_p2[0:0] === 1'b1) ? i_fu_196_p2 : ap_phi_mux_i_0_phi_fu_137_p4);

assign select_ln15_fu_246_p3 = ((icmp_ln14_reg_330[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_sum_0_phi_fu_148_p4);

assign tmp_1_fu_266_p4 = {{bitcast_ln20_fu_263_p1[30:23]}};

assign trunc_ln20_fu_276_p1 = bitcast_ln20_fu_263_p1[22:0];

assign zext_ln15_1_fu_228_p1 = select_ln15_1_fu_208_p3;

assign zext_ln15_3_fu_237_p1 = grp_fu_312_p3;

assign zext_ln15_fu_259_p1 = select_ln15_2_reg_340_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    zext_ln15_reg_386[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln15_reg_386_pp0_iter3_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //fully_connected
