// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fully_connected,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=80501,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=5,HLS_SYN_FF=605,HLS_SYN_LUT=1274,HLS_VERSION=2019_1}" *)

module fully_connected (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        dense_out_address0,
        dense_out_ce0,
        dense_out_we0,
        dense_out_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_pp0_stage0 = 12'd4;
parameter    ap_ST_fsm_pp0_stage1 = 12'd8;
parameter    ap_ST_fsm_pp0_stage2 = 12'd16;
parameter    ap_ST_fsm_pp0_stage3 = 12'd32;
parameter    ap_ST_fsm_state10 = 12'd64;
parameter    ap_ST_fsm_state11 = 12'd128;
parameter    ap_ST_fsm_state12 = 12'd256;
parameter    ap_ST_fsm_state13 = 12'd512;
parameter    ap_ST_fsm_state14 = 12'd1024;
parameter    ap_ST_fsm_state15 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [5:0] dense_out_address0;
output   dense_out_ce0;
output   dense_out_we0;
output  [31:0] dense_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg dense_out_ce0;
reg dense_out_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] fullyconnected_weigh_address0;
reg    fullyconnected_weigh_ce0;
wire   [31:0] fullyconnected_weigh_q0;
wire   [5:0] fullyconnected_bias_address0;
reg    fullyconnected_bias_ce0;
wire   [31:0] fullyconnected_bias_q0;
reg   [31:0] sum_0_reg_133;
reg   [8:0] j_0_reg_145;
reg   [14:0] phi_mul_reg_156;
wire   [0:0] icmp_ln9_fu_186_p2;
wire    ap_CS_fsm_state2;
wire   [5:0] i_fu_192_p2;
reg   [5:0] i_reg_292;
wire   [63:0] zext_ln15_fu_198_p1;
reg   [63:0] zext_ln15_reg_297;
wire   [14:0] zext_ln14_fu_202_p1;
reg   [14:0] zext_ln14_reg_303;
wire   [0:0] icmp_ln14_fu_206_p2;
reg   [0:0] icmp_ln14_reg_308;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln14_reg_308_pp0_iter1_reg;
wire   [8:0] j_fu_212_p2;
reg   [8:0] j_reg_312;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_174_p2;
reg   [31:0] tmp_2_reg_337;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [14:0] add_ln15_1_fu_233_p2;
reg   [14:0] add_ln15_1_reg_342;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_168_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [31:0] tmp_reg_362;
wire    ap_CS_fsm_state14;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [5:0] i_0_reg_122;
wire    ap_CS_fsm_state15;
wire   [31:0] ap_phi_mux_sum_0_phi_fu_137_p4;
reg   [8:0] ap_phi_mux_j_0_phi_fu_149_p4;
wire    ap_block_pp0_stage0;
reg   [14:0] ap_phi_mux_phi_mul_phi_fu_160_p4;
wire   [63:0] zext_ln15_2_fu_228_p1;
wire   [63:0] zext_ln15_1_fu_218_p1;
reg   [31:0] grp_fu_168_p0;
reg   [31:0] grp_fu_168_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage1;
wire   [14:0] add_ln15_fu_223_p2;
wire   [31:0] bitcast_ln20_fu_239_p1;
wire   [7:0] tmp_1_fu_242_p4;
wire   [22:0] trunc_ln20_fu_252_p1;
wire   [0:0] icmp_ln20_1_fu_262_p2;
wire   [0:0] icmp_ln20_fu_256_p2;
wire   [0:0] or_ln20_fu_268_p2;
wire   [0:0] grp_fu_180_p2;
wire   [0:0] and_ln20_fu_274_p2;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

fully_connected_fbkb #(
    .DataWidth( 32 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
fullyconnected_weigh_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fullyconnected_weigh_address0),
    .ce0(fullyconnected_weigh_ce0),
    .q0(fullyconnected_weigh_q0)
);

fully_connected_fcud #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
fullyconnected_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(fullyconnected_bias_address0),
    .ce0(fullyconnected_bias_ce0),
    .q0(fullyconnected_bias_q0)
);

fully_connected_fdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fully_connected_fdEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_168_p0),
    .din1(grp_fu_168_p1),
    .ce(1'b1),
    .dout(grp_fu_168_p2)
);

fully_connected_feOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fully_connected_feOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(flat_array_q0),
    .din1(fullyconnected_weigh_q0),
    .ce(1'b1),
    .dout(grp_fu_174_p2)
);

fully_connected_ffYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
fully_connected_ffYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_168_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_180_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln9_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln9_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        i_0_reg_122 <= i_reg_292;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_122 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_145 <= j_reg_312;
    end else if (((icmp_ln9_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_145 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln14_reg_308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        phi_mul_reg_156 <= add_ln15_1_reg_342;
    end else if (((icmp_ln9_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_156 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_308_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        sum_0_reg_133 <= grp_fu_168_p2;
    end else if (((icmp_ln9_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_133 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_308 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        add_ln15_1_reg_342 <= add_ln15_1_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_292 <= i_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln14_reg_308 <= icmp_ln14_fu_206_p2;
        icmp_ln14_reg_308_pp0_iter1_reg <= icmp_ln14_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        j_reg_312 <= j_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_reg_308 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_2_reg_337 <= grp_fu_174_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        tmp_reg_362 <= grp_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln14_reg_303[5 : 0] <= zext_ln14_fu_202_p1[5 : 0];
        zext_ln15_reg_297[5 : 0] <= zext_ln15_fu_198_p1[5 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_206_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_149_p4 = j_reg_312;
    end else begin
        ap_phi_mux_j_0_phi_fu_149_p4 = j_0_reg_145;
    end
end

always @ (*) begin
    if (((icmp_ln14_reg_308 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_phi_mul_phi_fu_160_p4 = add_ln15_1_reg_342;
    end else begin
        ap_phi_mux_phi_mul_phi_fu_160_p4 = phi_mul_reg_156;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_out_ce0 = 1'b1;
    end else begin
        dense_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_out_we0 = 1'b1;
    end else begin
        dense_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        fullyconnected_bias_ce0 = 1'b1;
    end else begin
        fullyconnected_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fullyconnected_weigh_ce0 = 1'b1;
    end else begin
        fullyconnected_weigh_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_168_p0 = sum_0_reg_133;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_168_p0 = ap_phi_mux_sum_0_phi_fu_137_p4;
    end else begin
        grp_fu_168_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_168_p1 = fullyconnected_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_168_p1 = tmp_2_reg_337;
    end else begin
        grp_fu_168_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_186_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln14_fu_206_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln14_fu_206_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_233_p2 = (phi_mul_reg_156 + 15'd50);

assign add_ln15_fu_223_p2 = (zext_ln14_reg_303 + ap_phi_mux_phi_mul_phi_fu_160_p4);

assign and_ln20_fu_274_p2 = (or_ln20_fu_268_p2 & grp_fu_180_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_sum_0_phi_fu_137_p4 = sum_0_reg_133;

assign bitcast_ln20_fu_239_p1 = tmp_reg_362;

assign dense_out_address0 = zext_ln15_reg_297;

assign dense_out_d0 = ((and_ln20_fu_274_p2[0:0] === 1'b1) ? 32'd0 : tmp_reg_362);

assign flat_array_address0 = zext_ln15_1_fu_218_p1;

assign fullyconnected_bias_address0 = zext_ln15_reg_297;

assign fullyconnected_weigh_address0 = zext_ln15_2_fu_228_p1;

assign i_fu_192_p2 = (i_0_reg_122 + 6'd1);

assign icmp_ln14_fu_206_p2 = ((ap_phi_mux_j_0_phi_fu_149_p4 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_262_p2 = ((trunc_ln20_fu_252_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_256_p2 = ((tmp_1_fu_242_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_186_p2 = ((i_0_reg_122 == 6'd50) ? 1'b1 : 1'b0);

assign j_fu_212_p2 = (ap_phi_mux_j_0_phi_fu_149_p4 + 9'd1);

assign or_ln20_fu_268_p2 = (icmp_ln20_fu_256_p2 | icmp_ln20_1_fu_262_p2);

assign tmp_1_fu_242_p4 = {{bitcast_ln20_fu_239_p1[30:23]}};

assign trunc_ln20_fu_252_p1 = bitcast_ln20_fu_239_p1[22:0];

assign zext_ln14_fu_202_p1 = i_0_reg_122;

assign zext_ln15_1_fu_218_p1 = ap_phi_mux_j_0_phi_fu_149_p4;

assign zext_ln15_2_fu_228_p1 = add_ln15_fu_223_p2;

assign zext_ln15_fu_198_p1 = i_0_reg_122;

always @ (posedge ap_clk) begin
    zext_ln15_reg_297[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_303[14:6] <= 9'b000000000;
end

endmodule //fully_connected
