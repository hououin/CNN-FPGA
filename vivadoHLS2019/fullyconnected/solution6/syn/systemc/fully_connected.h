// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fully_connected_HH_
#define _fully_connected_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "fully_connected_fdEe.h"
#include "fully_connected_feOg.h"
#include "fully_connected_ffYi.h"
#include "fully_connected_fbkb.h"
#include "fully_connected_fcud.h"

namespace ap_rtl {

struct fully_connected : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > flat_array_address0;
    sc_out< sc_logic > flat_array_ce0;
    sc_in< sc_lv<32> > flat_array_q0;
    sc_out< sc_lv<6> > dense_out_address0;
    sc_out< sc_logic > dense_out_ce0;
    sc_out< sc_logic > dense_out_we0;
    sc_out< sc_lv<32> > dense_out_d0;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;
    sc_signal< sc_lv<5> > ap_var_for_const2;


    // Module declarations
    fully_connected(sc_module_name name);
    SC_HAS_PROCESS(fully_connected);

    ~fully_connected();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    fully_connected_fbkb* fullyconnected_weigh_U;
    fully_connected_fcud* fullyconnected_bias_U;
    fully_connected_fdEe<1,4,32,32,32>* fully_connected_fdEe_U1;
    fully_connected_feOg<1,2,32,32,32>* fully_connected_feOg_U2;
    fully_connected_ffYi<1,2,32,32,1>* fully_connected_ffYi_U3;
    sc_signal< sc_lv<12> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<15> > fullyconnected_weigh_address0;
    sc_signal< sc_logic > fullyconnected_weigh_ce0;
    sc_signal< sc_lv<32> > fullyconnected_weigh_q0;
    sc_signal< sc_lv<6> > fullyconnected_bias_address0;
    sc_signal< sc_logic > fullyconnected_bias_ce0;
    sc_signal< sc_lv<32> > fullyconnected_bias_q0;
    sc_signal< sc_lv<32> > sum_0_reg_133;
    sc_signal< sc_lv<9> > j_0_reg_145;
    sc_signal< sc_lv<15> > phi_mul_reg_156;
    sc_signal< sc_lv<1> > icmp_ln9_fu_186_p2;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > i_fu_192_p2;
    sc_signal< sc_lv<6> > i_reg_292;
    sc_signal< sc_lv<64> > zext_ln15_fu_198_p1;
    sc_signal< sc_lv<64> > zext_ln15_reg_297;
    sc_signal< sc_lv<15> > zext_ln14_fu_202_p1;
    sc_signal< sc_lv<15> > zext_ln14_reg_303;
    sc_signal< sc_lv<1> > icmp_ln14_fu_206_p2;
    sc_signal< sc_lv<1> > icmp_ln14_reg_308;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln14_reg_308_pp0_iter1_reg;
    sc_signal< sc_lv<9> > j_fu_212_p2;
    sc_signal< sc_lv<9> > j_reg_312;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state4_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<32> > grp_fu_174_p2;
    sc_signal< sc_lv<32> > tmp_2_reg_337;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< bool > ap_block_state5_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_11001;
    sc_signal< sc_lv<15> > add_ln15_1_fu_233_p2;
    sc_signal< sc_lv<15> > add_ln15_1_reg_342;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state6_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_11001;
    sc_signal< sc_lv<32> > grp_fu_168_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<32> > tmp_reg_362;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< bool > ap_block_pp0_stage3_subdone;
    sc_signal< bool > ap_block_pp0_stage2_subdone;
    sc_signal< sc_lv<6> > i_0_reg_122;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_lv<32> > ap_phi_mux_sum_0_phi_fu_137_p4;
    sc_signal< sc_lv<9> > ap_phi_mux_j_0_phi_fu_149_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<15> > ap_phi_mux_phi_mul_phi_fu_160_p4;
    sc_signal< sc_lv<64> > zext_ln15_2_fu_228_p1;
    sc_signal< sc_lv<64> > zext_ln15_1_fu_218_p1;
    sc_signal< sc_lv<32> > grp_fu_168_p0;
    sc_signal< sc_lv<32> > grp_fu_168_p1;
    sc_signal< bool > ap_block_pp0_stage3;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<15> > add_ln15_fu_223_p2;
    sc_signal< sc_lv<32> > bitcast_ln20_fu_239_p1;
    sc_signal< sc_lv<8> > tmp_1_fu_242_p4;
    sc_signal< sc_lv<23> > trunc_ln20_fu_252_p1;
    sc_signal< sc_lv<1> > icmp_ln20_1_fu_262_p2;
    sc_signal< sc_lv<1> > icmp_ln20_fu_256_p2;
    sc_signal< sc_lv<1> > or_ln20_fu_268_p2;
    sc_signal< sc_lv<1> > grp_fu_180_p2;
    sc_signal< sc_lv<1> > and_ln20_fu_274_p2;
    sc_signal< sc_lv<12> > ap_NS_fsm;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<12> ap_ST_fsm_state1;
    static const sc_lv<12> ap_ST_fsm_state2;
    static const sc_lv<12> ap_ST_fsm_pp0_stage0;
    static const sc_lv<12> ap_ST_fsm_pp0_stage1;
    static const sc_lv<12> ap_ST_fsm_pp0_stage2;
    static const sc_lv<12> ap_ST_fsm_pp0_stage3;
    static const sc_lv<12> ap_ST_fsm_state10;
    static const sc_lv<12> ap_ST_fsm_state11;
    static const sc_lv<12> ap_ST_fsm_state12;
    static const sc_lv<12> ap_ST_fsm_state13;
    static const sc_lv<12> ap_ST_fsm_state14;
    static const sc_lv<12> ap_ST_fsm_state15;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<15> ap_const_lv15_0;
    static const sc_lv<6> ap_const_lv6_32;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<9> ap_const_lv9_190;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<15> ap_const_lv15_32;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_1E;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<23> ap_const_lv23_0;
    static const sc_lv<5> ap_const_lv5_4;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const2();
    void thread_ap_clk_no_reset_();
    void thread_add_ln15_1_fu_233_p2();
    void thread_add_ln15_fu_223_p2();
    void thread_and_ln20_fu_274_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp0_stage2_11001();
    void thread_ap_block_pp0_stage2_subdone();
    void thread_ap_block_pp0_stage3();
    void thread_ap_block_pp0_stage3_11001();
    void thread_ap_block_pp0_stage3_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_pp0_stage1_iter0();
    void thread_ap_block_state5_pp0_stage2_iter0();
    void thread_ap_block_state6_pp0_stage3_iter0();
    void thread_ap_block_state7_pp0_stage0_iter1();
    void thread_ap_block_state8_pp0_stage1_iter1();
    void thread_ap_block_state9_pp0_stage2_iter1();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_j_0_phi_fu_149_p4();
    void thread_ap_phi_mux_phi_mul_phi_fu_160_p4();
    void thread_ap_phi_mux_sum_0_phi_fu_137_p4();
    void thread_ap_ready();
    void thread_bitcast_ln20_fu_239_p1();
    void thread_dense_out_address0();
    void thread_dense_out_ce0();
    void thread_dense_out_d0();
    void thread_dense_out_we0();
    void thread_flat_array_address0();
    void thread_flat_array_ce0();
    void thread_fullyconnected_bias_address0();
    void thread_fullyconnected_bias_ce0();
    void thread_fullyconnected_weigh_address0();
    void thread_fullyconnected_weigh_ce0();
    void thread_grp_fu_168_p0();
    void thread_grp_fu_168_p1();
    void thread_i_fu_192_p2();
    void thread_icmp_ln14_fu_206_p2();
    void thread_icmp_ln20_1_fu_262_p2();
    void thread_icmp_ln20_fu_256_p2();
    void thread_icmp_ln9_fu_186_p2();
    void thread_j_fu_212_p2();
    void thread_or_ln20_fu_268_p2();
    void thread_tmp_1_fu_242_p4();
    void thread_trunc_ln20_fu_252_p1();
    void thread_zext_ln14_fu_202_p1();
    void thread_zext_ln15_1_fu_218_p1();
    void thread_zext_ln15_2_fu_228_p1();
    void thread_zext_ln15_fu_198_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
