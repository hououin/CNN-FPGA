// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=140351,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=5,HLS_SYN_FF=603,HLS_SYN_LUT=1236,HLS_VERSION=2019_1}" *)

module dense_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_q0,
        dense_1_out_address0,
        dense_1_out_ce0,
        dense_1_out_we0,
        dense_1_out_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
input  [31:0] flat_array_q0;
output  [5:0] dense_1_out_address0;
output   dense_1_out_ce0;
output   dense_1_out_we0;
output  [31:0] dense_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg dense_1_out_ce0;
reg dense_1_out_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] dense_1_weights_address0;
reg    dense_1_weights_ce0;
wire   [31:0] dense_1_weights_q0;
wire   [5:0] dense_1_bias_address0;
reg    dense_1_bias_ce0;
wire   [31:0] dense_1_bias_q0;
wire   [5:0] i_fu_181_p2;
reg   [5:0] i_reg_280;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln14_fu_187_p1;
reg   [63:0] zext_ln14_reg_285;
wire   [0:0] icmp_ln9_fu_175_p2;
wire   [14:0] zext_ln13_fu_191_p1;
reg   [14:0] zext_ln13_reg_291;
wire   [8:0] j_fu_201_p2;
reg   [8:0] j_reg_299;
wire    ap_CS_fsm_state3;
wire   [14:0] add_ln14_1_fu_212_p2;
reg   [14:0] add_ln14_1_reg_304;
wire   [0:0] icmp_ln13_fu_195_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_163_p2;
reg   [31:0] tmp_2_reg_334;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_157_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_reg_349;
wire    ap_CS_fsm_state13;
reg   [5:0] i_0_reg_112;
wire    ap_CS_fsm_state14;
reg   [31:0] sum_0_reg_123;
reg   [8:0] j_0_reg_135;
reg   [14:0] phi_mul_reg_146;
wire   [63:0] zext_ln14_2_fu_223_p1;
wire   [63:0] zext_ln14_1_fu_207_p1;
reg   [31:0] grp_fu_157_p1;
wire    ap_CS_fsm_state6;
wire   [14:0] add_ln14_fu_218_p2;
wire   [31:0] bitcast_ln19_fu_228_p1;
wire   [7:0] tmp_1_fu_231_p4;
wire   [22:0] trunc_ln19_fu_241_p1;
wire   [0:0] icmp_ln19_1_fu_251_p2;
wire   [0:0] icmp_ln19_fu_245_p2;
wire   [0:0] or_ln19_fu_257_p2;
wire   [0:0] grp_fu_169_p2;
wire   [0:0] and_ln19_fu_263_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

dense_1_dense_1_wbkb #(
    .DataWidth( 32 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
dense_1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_address0),
    .ce0(dense_1_weights_ce0),
    .q0(dense_1_weights_q0)
);

dense_1_dense_1_bcud #(
    .DataWidth( 32 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dense_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_bias_address0),
    .ce0(dense_1_bias_ce0),
    .q0(dense_1_bias_q0)
);

dense_1_fadd_32nsdEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_1_fadd_32nsdEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_123),
    .din1(grp_fu_157_p1),
    .ce(1'b1),
    .dout(grp_fu_157_p2)
);

dense_1_fmul_32nseOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_1_fmul_32nseOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(flat_array_q0),
    .din1(dense_1_weights_q0),
    .ce(1'b1),
    .dout(grp_fu_163_p2)
);

dense_1_fcmp_32nsfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
dense_1_fcmp_32nsfYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_157_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_169_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_reg_112 <= i_reg_280;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_112 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_135 <= j_reg_299;
    end else if (((icmp_ln9_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_135 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        phi_mul_reg_146 <= add_ln14_1_reg_304;
    end else if (((icmp_ln9_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_146 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_0_reg_123 <= grp_fu_157_p2;
    end else if (((icmp_ln9_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_123 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_195_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln14_1_reg_304 <= add_ln14_1_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_280 <= i_fu_181_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_299 <= j_fu_201_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_2_reg_334 <= grp_fu_163_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_reg_349 <= grp_fu_157_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_291[5 : 0] <= zext_ln13_fu_191_p1[5 : 0];
        zext_ln14_reg_285[5 : 0] <= zext_ln14_fu_187_p1[5 : 0];
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_1_bias_ce0 = 1'b1;
    end else begin
        dense_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_1_out_ce0 = 1'b1;
    end else begin
        dense_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_1_out_we0 = 1'b1;
    end else begin
        dense_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_1_weights_ce0 = 1'b1;
    end else begin
        dense_1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_157_p1 = dense_1_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_157_p1 = tmp_2_reg_334;
    end else begin
        grp_fu_157_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_175_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_195_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_212_p2 = (phi_mul_reg_146 + 15'd50);

assign add_ln14_fu_218_p2 = (zext_ln13_reg_291 + phi_mul_reg_146);

assign and_ln19_fu_263_p2 = (or_ln19_fu_257_p2 & grp_fu_169_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln19_fu_228_p1 = tmp_reg_349;

assign dense_1_bias_address0 = zext_ln14_reg_285;

assign dense_1_out_address0 = zext_ln14_reg_285;

assign dense_1_out_d0 = ((and_ln19_fu_263_p2[0:0] === 1'b1) ? 32'd0 : tmp_reg_349);

assign dense_1_weights_address0 = zext_ln14_2_fu_223_p1;

assign flat_array_address0 = zext_ln14_1_fu_207_p1;

assign i_fu_181_p2 = (i_0_reg_112 + 6'd1);

assign icmp_ln13_fu_195_p2 = ((j_0_reg_135 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_251_p2 = ((trunc_ln19_fu_241_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_245_p2 = ((tmp_1_fu_231_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_175_p2 = ((i_0_reg_112 == 6'd50) ? 1'b1 : 1'b0);

assign j_fu_201_p2 = (j_0_reg_135 + 9'd1);

assign or_ln19_fu_257_p2 = (icmp_ln19_fu_245_p2 | icmp_ln19_1_fu_251_p2);

assign tmp_1_fu_231_p4 = {{bitcast_ln19_fu_228_p1[30:23]}};

assign trunc_ln19_fu_241_p1 = bitcast_ln19_fu_228_p1[22:0];

assign zext_ln13_fu_191_p1 = i_0_reg_112;

assign zext_ln14_1_fu_207_p1 = j_0_reg_135;

assign zext_ln14_2_fu_223_p1 = add_ln14_fu_218_p2;

assign zext_ln14_fu_187_p1 = i_0_reg_112;

always @ (posedge ap_clk) begin
    zext_ln14_reg_285[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_291[14:6] <= 9'b000000000;
end

endmodule //dense_1
