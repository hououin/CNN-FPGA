// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=784345,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=5,HLS_SYN_FF=917,HLS_SYN_LUT=2002,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 33'd1;
parameter    ap_ST_fsm_state2 = 33'd2;
parameter    ap_ST_fsm_state3 = 33'd4;
parameter    ap_ST_fsm_state4 = 33'd8;
parameter    ap_ST_fsm_state5 = 33'd16;
parameter    ap_ST_fsm_state6 = 33'd32;
parameter    ap_ST_fsm_state7 = 33'd64;
parameter    ap_ST_fsm_state8 = 33'd128;
parameter    ap_ST_fsm_state9 = 33'd256;
parameter    ap_ST_fsm_state10 = 33'd512;
parameter    ap_ST_fsm_state11 = 33'd1024;
parameter    ap_ST_fsm_state12 = 33'd2048;
parameter    ap_ST_fsm_state13 = 33'd4096;
parameter    ap_ST_fsm_state14 = 33'd8192;
parameter    ap_ST_fsm_state15 = 33'd16384;
parameter    ap_ST_fsm_state16 = 33'd32768;
parameter    ap_ST_fsm_state17 = 33'd65536;
parameter    ap_ST_fsm_state18 = 33'd131072;
parameter    ap_ST_fsm_state19 = 33'd262144;
parameter    ap_ST_fsm_state20 = 33'd524288;
parameter    ap_ST_fsm_state21 = 33'd1048576;
parameter    ap_ST_fsm_state22 = 33'd2097152;
parameter    ap_ST_fsm_state23 = 33'd4194304;
parameter    ap_ST_fsm_state24 = 33'd8388608;
parameter    ap_ST_fsm_state25 = 33'd16777216;
parameter    ap_ST_fsm_state26 = 33'd33554432;
parameter    ap_ST_fsm_state27 = 33'd67108864;
parameter    ap_ST_fsm_state28 = 33'd134217728;
parameter    ap_ST_fsm_state29 = 33'd268435456;
parameter    ap_ST_fsm_state30 = 33'd536870912;
parameter    ap_ST_fsm_state31 = 33'd1073741824;
parameter    ap_ST_fsm_state32 = 33'd2147483648;
parameter    ap_ST_fsm_state33 = 33'd4294967296;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [32:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [8:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire   [8:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state23;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] reg_423;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state24;
wire   [6:0] add_ln8_fu_428_p2;
reg   [6:0] add_ln8_reg_1016;
wire    ap_CS_fsm_state2;
wire   [7:0] add_ln8_1_fu_434_p2;
reg   [7:0] add_ln8_1_reg_1021;
wire   [3:0] r_fu_446_p2;
reg   [3:0] r_reg_1029;
wire   [7:0] mul_ln26_fu_456_p2;
reg   [7:0] mul_ln26_reg_1034;
wire   [0:0] icmp_ln8_fu_440_p2;
wire   [7:0] mul_ln26_1_fu_472_p2;
reg   [7:0] mul_ln26_1_reg_1039;
wire   [3:0] c_fu_484_p2;
reg   [3:0] c_reg_1047;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln14_fu_508_p1;
reg   [11:0] zext_ln14_reg_1052;
wire   [0:0] icmp_ln11_fu_478_p2;
wire   [4:0] f_fu_518_p2;
reg   [4:0] f_reg_1060;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_524_p1;
reg   [63:0] zext_ln26_reg_1065;
wire   [0:0] icmp_ln14_fu_512_p2;
wire   [9:0] zext_ln35_1_fu_528_p1;
reg   [9:0] zext_ln35_1_reg_1070;
reg   [10:0] conv_out_addr_reg_1077;
wire   [1:0] add_ln21_fu_556_p2;
reg   [1:0] add_ln21_reg_1085;
wire    ap_CS_fsm_state5;
wire   [5:0] sub_ln26_fu_586_p2;
reg   [5:0] sub_ln26_reg_1090;
wire   [0:0] icmp_ln21_fu_550_p2;
wire   [10:0] sub_ln26_1_fu_628_p2;
reg   [10:0] sub_ln26_1_reg_1095;
wire   [2:0] add_ln24_fu_640_p2;
reg   [2:0] add_ln24_reg_1103;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_634_p2;
wire   [31:0] grp_fu_395_p2;
wire    ap_CS_fsm_state12;
wire   [1:0] add_ln21_1_fu_697_p2;
reg   [1:0] add_ln21_1_reg_1131;
wire    ap_CS_fsm_state13;
wire   [5:0] sub_ln26_2_fu_727_p2;
reg   [5:0] sub_ln26_2_reg_1136;
wire   [0:0] icmp_ln21_1_fu_691_p2;
wire   [10:0] sub_ln26_3_fu_768_p2;
reg   [10:0] sub_ln26_3_reg_1141;
wire   [2:0] add_ln24_1_fu_780_p2;
reg   [2:0] add_ln24_1_reg_1149;
wire    ap_CS_fsm_state14;
wire   [0:0] icmp_ln24_1_fu_774_p2;
wire    ap_CS_fsm_state20;
wire   [1:0] add_ln21_2_fu_837_p2;
reg   [1:0] add_ln21_2_reg_1177;
wire    ap_CS_fsm_state21;
wire   [5:0] sub_ln26_4_fu_867_p2;
reg   [5:0] sub_ln26_4_reg_1182;
wire   [0:0] icmp_ln21_2_fu_831_p2;
wire   [10:0] sub_ln26_5_fu_908_p2;
reg   [10:0] sub_ln26_5_reg_1187;
wire   [2:0] add_ln24_2_fu_920_p2;
reg   [2:0] add_ln24_2_reg_1200;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln24_2_fu_914_p2;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
reg   [31:0] w_sum_reg_1230;
wire    ap_CS_fsm_state32;
reg   [3:0] r_0_reg_201;
reg   [7:0] phi_mul_reg_212;
reg   [6:0] phi_mul12_reg_224;
reg   [3:0] c_0_reg_236;
reg   [4:0] f_0_reg_248;
wire    ap_CS_fsm_state33;
reg   [31:0] w_sum_1_0_reg_259;
reg   [1:0] wc_0_0_reg_271;
reg   [31:0] w_sum_2_0_reg_282;
reg   [2:0] ch_0_0_reg_294;
reg   [31:0] w_sum_1_1_reg_305;
reg   [1:0] wc_0_1_reg_316;
reg   [31:0] w_sum_2_1_reg_327;
reg   [2:0] ch_0_1_reg_339;
reg   [31:0] w_sum_1_2_reg_350;
reg   [1:0] wc_0_2_reg_361;
reg   [31:0] w_sum_2_2_reg_372;
reg   [2:0] ch_0_2_reg_384;
wire   [63:0] zext_ln35_3_fu_541_p1;
wire   [63:0] zext_ln26_13_fu_672_p1;
wire   [63:0] zext_ln26_14_fu_682_p1;
wire   [63:0] zext_ln26_21_fu_812_p1;
wire   [63:0] zext_ln26_22_fu_822_p1;
wire   [63:0] zext_ln26_25_fu_952_p1;
wire   [63:0] zext_ln26_26_fu_962_p1;
reg   [31:0] grp_fu_395_p0;
reg   [31:0] grp_fu_395_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_404_p0;
wire   [3:0] mul_ln26_fu_456_p0;
wire   [3:0] add_ln26_2_fu_462_p2;
wire   [3:0] mul_ln26_1_fu_472_p0;
wire   [6:0] zext_ln35_fu_490_p1;
wire   [6:0] add_ln35_fu_494_p2;
wire   [10:0] tmp_10_fu_500_p3;
wire   [11:0] zext_ln35_2_fu_532_p1;
wire   [11:0] add_ln35_1_fu_536_p2;
wire   [4:0] tmp_11_fu_562_p3;
wire   [2:0] tmp_12_fu_574_p3;
wire   [5:0] zext_ln26_3_fu_570_p1;
wire   [5:0] zext_ln26_4_fu_582_p1;
wire   [3:0] zext_ln21_fu_546_p1;
wire   [3:0] add_ln26_1_fu_592_p2;
wire   [7:0] zext_ln26_5_fu_598_p1;
wire   [7:0] add_ln26_5_fu_602_p2;
wire   [8:0] tmp_13_fu_616_p3;
wire   [10:0] p_shl_cast_fu_608_p3;
wire   [10:0] zext_ln26_6_fu_624_p1;
wire   [5:0] zext_ln26_12_fu_650_p1;
wire   [5:0] add_ln26_7_fu_654_p2;
wire   [9:0] tmp_21_cast_fu_659_p3;
wire   [9:0] add_ln26_8_fu_667_p2;
wire   [10:0] zext_ln26_11_fu_646_p1;
wire   [10:0] add_ln26_9_fu_677_p2;
wire   [4:0] tmp_14_fu_703_p3;
wire   [2:0] tmp_15_fu_715_p3;
wire   [5:0] zext_ln26_7_fu_711_p1;
wire   [5:0] zext_ln26_8_fu_723_p1;
wire   [3:0] zext_ln21_1_fu_687_p1;
wire   [3:0] add_ln26_fu_733_p2;
wire   [7:0] zext_ln26_9_fu_739_p1;
wire   [7:0] add_ln26_6_fu_743_p2;
wire   [8:0] tmp_16_fu_756_p3;
wire   [10:0] p_shl4_cast_fu_748_p3;
wire   [10:0] zext_ln26_10_fu_764_p1;
wire   [5:0] zext_ln26_20_fu_790_p1;
wire   [5:0] add_ln26_11_fu_794_p2;
wire   [9:0] tmp_27_cast_fu_799_p3;
wire   [9:0] add_ln26_12_fu_807_p2;
wire   [10:0] zext_ln26_19_fu_786_p1;
wire   [10:0] add_ln26_13_fu_817_p2;
wire   [4:0] tmp_17_fu_843_p3;
wire   [2:0] tmp_18_fu_855_p3;
wire   [5:0] zext_ln26_15_fu_851_p1;
wire   [5:0] zext_ln26_16_fu_863_p1;
wire   [3:0] zext_ln21_2_fu_827_p1;
wire   [3:0] add_ln26_3_fu_873_p2;
wire   [7:0] zext_ln26_17_fu_879_p1;
wire   [7:0] add_ln26_10_fu_883_p2;
wire   [8:0] tmp_19_fu_896_p3;
wire   [10:0] p_shl8_cast_fu_888_p3;
wire   [10:0] zext_ln26_18_fu_904_p1;
wire   [5:0] zext_ln26_24_fu_930_p1;
wire   [5:0] add_ln26_14_fu_934_p2;
wire   [9:0] tmp_29_cast_fu_939_p3;
wire   [9:0] add_ln26_15_fu_947_p2;
wire   [10:0] zext_ln26_23_fu_926_p1;
wire   [10:0] add_ln26_16_fu_957_p2;
wire   [31:0] bitcast_ln34_fu_967_p1;
wire   [7:0] tmp_fu_970_p4;
wire   [22:0] trunc_ln34_fu_980_p1;
wire   [0:0] icmp_ln34_1_fu_990_p2;
wire   [0:0] icmp_ln34_fu_984_p2;
wire   [0:0] or_ln34_fu_996_p2;
wire   [0:0] grp_fu_412_p2;
wire   [0:0] and_ln34_fu_1002_p2;
reg   [32:0] ap_NS_fsm;
wire   [7:0] mul_ln26_1_fu_472_p00;
wire   [7:0] mul_ln26_fu_456_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 33'd1;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p0),
    .din1(grp_fu_395_p1),
    .ce(1'b1),
    .dout(grp_fu_395_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_404_p0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_395_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_412_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_512_p2 == 1'd1))) begin
        c_0_reg_236 <= c_reg_1047;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_440_p2 == 1'd0))) begin
        c_0_reg_236 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ch_0_0_reg_294 <= add_ln24_reg_1103;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_550_p2 == 1'd0))) begin
        ch_0_0_reg_294 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        ch_0_1_reg_339 <= add_ln24_1_reg_1149;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln21_1_fu_691_p2 == 1'd0))) begin
        ch_0_1_reg_339 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        ch_0_2_reg_384 <= add_ln24_2_reg_1200;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln21_2_fu_831_p2 == 1'd0))) begin
        ch_0_2_reg_384 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        f_0_reg_248 <= f_reg_1060;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_478_p2 == 1'd0))) begin
        f_0_reg_248 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_478_p2 == 1'd1))) begin
        phi_mul12_reg_224 <= add_ln8_reg_1016;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul12_reg_224 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_478_p2 == 1'd1))) begin
        phi_mul_reg_212 <= add_ln8_1_reg_1021;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_212 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_478_p2 == 1'd1))) begin
        r_0_reg_201 <= r_reg_1029;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_201 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        w_sum_1_0_reg_259 <= w_sum_2_0_reg_282;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_512_p2 == 1'd0))) begin
        w_sum_1_0_reg_259 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        w_sum_1_1_reg_305 <= w_sum_2_1_reg_327;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_550_p2 == 1'd1))) begin
        w_sum_1_1_reg_305 <= w_sum_1_0_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_2_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        w_sum_1_2_reg_350 <= w_sum_2_2_reg_372;
    end else if (((icmp_ln21_1_fu_691_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        w_sum_1_2_reg_350 <= w_sum_1_1_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_2_0_reg_282 <= grp_fu_395_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_550_p2 == 1'd0))) begin
        w_sum_2_0_reg_282 <= w_sum_1_0_reg_259;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        w_sum_2_1_reg_327 <= grp_fu_395_p2;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln21_1_fu_691_p2 == 1'd0))) begin
        w_sum_2_1_reg_327 <= w_sum_1_1_reg_305;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        w_sum_2_2_reg_372 <= grp_fu_395_p2;
    end else if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln21_2_fu_831_p2 == 1'd0))) begin
        w_sum_2_2_reg_372 <= w_sum_1_2_reg_350;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        wc_0_0_reg_271 <= add_ln21_reg_1085;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_512_p2 == 1'd0))) begin
        wc_0_0_reg_271 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
        wc_0_1_reg_316 <= add_ln21_1_reg_1131;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_550_p2 == 1'd1))) begin
        wc_0_1_reg_316 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_2_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
        wc_0_2_reg_361 <= add_ln21_2_reg_1177;
    end else if (((icmp_ln21_1_fu_691_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
        wc_0_2_reg_361 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln21_1_reg_1131 <= add_ln21_1_fu_697_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        add_ln21_2_reg_1177 <= add_ln21_2_fu_837_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_reg_1085 <= add_ln21_fu_556_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        add_ln24_1_reg_1149 <= add_ln24_1_fu_780_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        add_ln24_2_reg_1200 <= add_ln24_2_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln24_reg_1103 <= add_ln24_fu_640_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_1_reg_1021 <= add_ln8_1_fu_434_p2;
        add_ln8_reg_1016 <= add_ln8_fu_428_p2;
        r_reg_1029 <= r_fu_446_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_1047 <= c_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_512_p2 == 1'd0))) begin
        conv_out_addr_reg_1077 <= zext_ln35_3_fu_541_p1;
        zext_ln26_reg_1065[4 : 0] <= zext_ln26_fu_524_p1[4 : 0];
        zext_ln35_1_reg_1070[4 : 0] <= zext_ln35_1_fu_528_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_1060 <= f_fu_518_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_440_p2 == 1'd0))) begin
        mul_ln26_1_reg_1039 <= mul_ln26_1_fu_472_p2;
        mul_ln26_reg_1034 <= mul_ln26_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_423 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_550_p2 == 1'd0))) begin
        sub_ln26_1_reg_1095[10 : 1] <= sub_ln26_1_fu_628_p2[10 : 1];
        sub_ln26_reg_1090[5 : 1] <= sub_ln26_fu_586_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln21_1_fu_691_p2 == 1'd0))) begin
        sub_ln26_2_reg_1136[5 : 1] <= sub_ln26_2_fu_727_p2[5 : 1];
        sub_ln26_3_reg_1141[10 : 1] <= sub_ln26_3_fu_768_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln21_2_fu_831_p2 == 1'd0))) begin
        sub_ln26_4_reg_1182[5 : 1] <= sub_ln26_4_fu_867_p2[5 : 1];
        sub_ln26_5_reg_1187[10 : 1] <= sub_ln26_5_fu_908_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        w_sum_reg_1230 <= grp_fu_395_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_478_p2 == 1'd0))) begin
        zext_ln14_reg_1052[10 : 4] <= zext_ln14_fu_508_p1[10 : 4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_440_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_440_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_395_p0 = w_sum_1_2_reg_350;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_395_p0 = w_sum_2_2_reg_372;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_395_p0 = w_sum_2_1_reg_327;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_395_p0 = w_sum_2_0_reg_282;
    end else begin
        grp_fu_395_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_395_p1 = conv_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_395_p1 = reg_423;
    end else begin
        grp_fu_395_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_404_p0 = conv_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_404_p0 = conv_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_404_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_404_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        input_r_address0 = zext_ln26_26_fu_962_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_address0 = zext_ln26_22_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln26_14_fu_682_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state6))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_440_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_478_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_512_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_550_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln24_fu_634_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln21_1_fu_691_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            if (((icmp_ln24_1_fu_774_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state14))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (icmp_ln21_2_fu_831_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((icmp_ln24_2_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state22))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_697_p2 = (wc_0_1_reg_316 + 2'd1);

assign add_ln21_2_fu_837_p2 = (wc_0_2_reg_361 + 2'd1);

assign add_ln21_fu_556_p2 = (wc_0_0_reg_271 + 2'd1);

assign add_ln24_1_fu_780_p2 = (ch_0_1_reg_339 + 3'd1);

assign add_ln24_2_fu_920_p2 = (ch_0_2_reg_384 + 3'd1);

assign add_ln24_fu_640_p2 = (ch_0_0_reg_294 + 3'd1);

assign add_ln26_10_fu_883_p2 = (zext_ln26_17_fu_879_p1 + mul_ln26_1_reg_1039);

assign add_ln26_11_fu_794_p2 = (zext_ln26_20_fu_790_p1 + sub_ln26_2_reg_1136);

assign add_ln26_12_fu_807_p2 = (zext_ln35_1_reg_1070 + tmp_27_cast_fu_799_p3);

assign add_ln26_13_fu_817_p2 = (zext_ln26_19_fu_786_p1 + sub_ln26_3_reg_1141);

assign add_ln26_14_fu_934_p2 = (zext_ln26_24_fu_930_p1 + sub_ln26_4_reg_1182);

assign add_ln26_15_fu_947_p2 = (zext_ln35_1_reg_1070 + tmp_29_cast_fu_939_p3);

assign add_ln26_16_fu_957_p2 = (zext_ln26_23_fu_926_p1 + sub_ln26_5_reg_1187);

assign add_ln26_1_fu_592_p2 = (c_0_reg_236 + zext_ln21_fu_546_p1);

assign add_ln26_2_fu_462_p2 = (r_0_reg_201 + 4'd2);

assign add_ln26_3_fu_873_p2 = (c_0_reg_236 + zext_ln21_2_fu_827_p1);

assign add_ln26_5_fu_602_p2 = (zext_ln26_5_fu_598_p1 + phi_mul_reg_212);

assign add_ln26_6_fu_743_p2 = (zext_ln26_9_fu_739_p1 + mul_ln26_reg_1034);

assign add_ln26_7_fu_654_p2 = (zext_ln26_12_fu_650_p1 + sub_ln26_reg_1090);

assign add_ln26_8_fu_667_p2 = (zext_ln35_1_reg_1070 + tmp_21_cast_fu_659_p3);

assign add_ln26_9_fu_677_p2 = (zext_ln26_11_fu_646_p1 + sub_ln26_1_reg_1095);

assign add_ln26_fu_733_p2 = (c_0_reg_236 + zext_ln21_1_fu_687_p1);

assign add_ln35_1_fu_536_p2 = (zext_ln14_reg_1052 + zext_ln35_2_fu_532_p1);

assign add_ln35_fu_494_p2 = (phi_mul12_reg_224 + zext_ln35_fu_490_p1);

assign add_ln8_1_fu_434_p2 = (phi_mul_reg_212 + 8'd13);

assign add_ln8_fu_428_p2 = (phi_mul12_reg_224 + 7'd11);

assign and_ln34_fu_1002_p2 = (or_ln34_fu_996_p2 & grp_fu_412_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_967_p1 = w_sum_reg_1230;

assign c_fu_484_p2 = (c_0_reg_236 + 4'd1);

assign conv_bias_address0 = zext_ln26_reg_1065;

assign conv_out_address0 = conv_out_addr_reg_1077;

assign conv_out_d0 = ((and_ln34_fu_1002_p2[0:0] === 1'b1) ? w_sum_reg_1230 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_13_fu_672_p1;

assign conv_weights_1_address0 = zext_ln26_21_fu_812_p1;

assign conv_weights_2_address0 = zext_ln26_25_fu_952_p1;

assign f_fu_518_p2 = (f_0_reg_248 + 5'd1);

assign icmp_ln11_fu_478_p2 = ((c_0_reg_236 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_512_p2 = ((f_0_reg_248 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_691_p2 = ((wc_0_1_reg_316 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_831_p2 = ((wc_0_2_reg_361 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_550_p2 = ((wc_0_0_reg_271 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_774_p2 = ((ch_0_1_reg_339 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_914_p2 = ((ch_0_2_reg_384 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_634_p2 = ((ch_0_0_reg_294 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_990_p2 = ((trunc_ln34_fu_980_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_984_p2 = ((tmp_fu_970_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_440_p2 = ((r_0_reg_201 == 4'd11) ? 1'b1 : 1'b0);

assign mul_ln26_1_fu_472_p0 = mul_ln26_1_fu_472_p00;

assign mul_ln26_1_fu_472_p00 = add_ln26_2_fu_462_p2;

assign mul_ln26_1_fu_472_p2 = (mul_ln26_1_fu_472_p0 * $signed('hD));

assign mul_ln26_fu_456_p0 = mul_ln26_fu_456_p00;

assign mul_ln26_fu_456_p00 = r_fu_446_p2;

assign mul_ln26_fu_456_p2 = (mul_ln26_fu_456_p0 * $signed('hD));

assign or_ln34_fu_996_p2 = (icmp_ln34_fu_984_p2 | icmp_ln34_1_fu_990_p2);

assign p_shl4_cast_fu_748_p3 = {{add_ln26_6_fu_743_p2}, {3'd0}};

assign p_shl8_cast_fu_888_p3 = {{add_ln26_10_fu_883_p2}, {3'd0}};

assign p_shl_cast_fu_608_p3 = {{add_ln26_5_fu_602_p2}, {3'd0}};

assign r_fu_446_p2 = (r_0_reg_201 + 4'd1);

assign sub_ln26_1_fu_628_p2 = (p_shl_cast_fu_608_p3 - zext_ln26_6_fu_624_p1);

assign sub_ln26_2_fu_727_p2 = (zext_ln26_7_fu_711_p1 - zext_ln26_8_fu_723_p1);

assign sub_ln26_3_fu_768_p2 = (p_shl4_cast_fu_748_p3 - zext_ln26_10_fu_764_p1);

assign sub_ln26_4_fu_867_p2 = (zext_ln26_15_fu_851_p1 - zext_ln26_16_fu_863_p1);

assign sub_ln26_5_fu_908_p2 = (p_shl8_cast_fu_888_p3 - zext_ln26_18_fu_904_p1);

assign sub_ln26_fu_586_p2 = (zext_ln26_3_fu_570_p1 - zext_ln26_4_fu_582_p1);

assign tmp_10_fu_500_p3 = {{add_ln35_fu_494_p2}, {4'd0}};

assign tmp_11_fu_562_p3 = {{wc_0_0_reg_271}, {3'd0}};

assign tmp_12_fu_574_p3 = {{wc_0_0_reg_271}, {1'd0}};

assign tmp_13_fu_616_p3 = {{add_ln26_5_fu_602_p2}, {1'd0}};

assign tmp_14_fu_703_p3 = {{wc_0_1_reg_316}, {3'd0}};

assign tmp_15_fu_715_p3 = {{wc_0_1_reg_316}, {1'd0}};

assign tmp_16_fu_756_p3 = {{add_ln26_6_fu_743_p2}, {1'd0}};

assign tmp_17_fu_843_p3 = {{wc_0_2_reg_361}, {3'd0}};

assign tmp_18_fu_855_p3 = {{wc_0_2_reg_361}, {1'd0}};

assign tmp_19_fu_896_p3 = {{add_ln26_10_fu_883_p2}, {1'd0}};

assign tmp_21_cast_fu_659_p3 = {{add_ln26_7_fu_654_p2}, {4'd0}};

assign tmp_27_cast_fu_799_p3 = {{add_ln26_11_fu_794_p2}, {4'd0}};

assign tmp_29_cast_fu_939_p3 = {{add_ln26_14_fu_934_p2}, {4'd0}};

assign tmp_fu_970_p4 = {{bitcast_ln34_fu_967_p1[30:23]}};

assign trunc_ln34_fu_980_p1 = bitcast_ln34_fu_967_p1[22:0];

assign zext_ln14_fu_508_p1 = tmp_10_fu_500_p3;

assign zext_ln21_1_fu_687_p1 = wc_0_1_reg_316;

assign zext_ln21_2_fu_827_p1 = wc_0_2_reg_361;

assign zext_ln21_fu_546_p1 = wc_0_0_reg_271;

assign zext_ln26_10_fu_764_p1 = tmp_16_fu_756_p3;

assign zext_ln26_11_fu_646_p1 = ch_0_0_reg_294;

assign zext_ln26_12_fu_650_p1 = ch_0_0_reg_294;

assign zext_ln26_13_fu_672_p1 = add_ln26_8_fu_667_p2;

assign zext_ln26_14_fu_682_p1 = add_ln26_9_fu_677_p2;

assign zext_ln26_15_fu_851_p1 = tmp_17_fu_843_p3;

assign zext_ln26_16_fu_863_p1 = tmp_18_fu_855_p3;

assign zext_ln26_17_fu_879_p1 = add_ln26_3_fu_873_p2;

assign zext_ln26_18_fu_904_p1 = tmp_19_fu_896_p3;

assign zext_ln26_19_fu_786_p1 = ch_0_1_reg_339;

assign zext_ln26_20_fu_790_p1 = ch_0_1_reg_339;

assign zext_ln26_21_fu_812_p1 = add_ln26_12_fu_807_p2;

assign zext_ln26_22_fu_822_p1 = add_ln26_13_fu_817_p2;

assign zext_ln26_23_fu_926_p1 = ch_0_2_reg_384;

assign zext_ln26_24_fu_930_p1 = ch_0_2_reg_384;

assign zext_ln26_25_fu_952_p1 = add_ln26_15_fu_947_p2;

assign zext_ln26_26_fu_962_p1 = add_ln26_16_fu_957_p2;

assign zext_ln26_3_fu_570_p1 = tmp_11_fu_562_p3;

assign zext_ln26_4_fu_582_p1 = tmp_12_fu_574_p3;

assign zext_ln26_5_fu_598_p1 = add_ln26_1_fu_592_p2;

assign zext_ln26_6_fu_624_p1 = tmp_13_fu_616_p3;

assign zext_ln26_7_fu_711_p1 = tmp_14_fu_703_p3;

assign zext_ln26_8_fu_723_p1 = tmp_15_fu_715_p3;

assign zext_ln26_9_fu_739_p1 = add_ln26_fu_733_p2;

assign zext_ln26_fu_524_p1 = f_0_reg_248;

assign zext_ln35_1_fu_528_p1 = f_0_reg_248;

assign zext_ln35_2_fu_532_p1 = f_0_reg_248;

assign zext_ln35_3_fu_541_p1 = add_ln35_1_fu_536_p2;

assign zext_ln35_fu_490_p1 = c_0_reg_236;

always @ (posedge ap_clk) begin
    zext_ln14_reg_1052[3:0] <= 4'b0000;
    zext_ln14_reg_1052[11] <= 1'b0;
    zext_ln26_reg_1065[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_1070[9:5] <= 5'b00000;
    sub_ln26_reg_1090[0] <= 1'b0;
    sub_ln26_1_reg_1095[0] <= 1'b0;
    sub_ln26_2_reg_1136[0] <= 1'b0;
    sub_ln26_3_reg_1141[0] <= 1'b0;
    sub_ln26_4_reg_1182[0] <= 1'b0;
    sub_ln26_5_reg_1187[0] <= 1'b0;
end

endmodule //conv
