// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=909949,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=613,HLS_SYN_LUT=1636,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] conv_input_address0;
reg conv_input_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] conv_1_weights_0_0_address0;
reg    conv_1_weights_0_0_ce0;
wire   [31:0] conv_1_weights_0_0_q0;
wire   [6:0] conv_1_weights_1_0_address0;
reg    conv_1_weights_1_0_ce0;
wire   [31:0] conv_1_weights_1_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [6:0] conv_1_weights_2_0_address0;
reg    conv_1_weights_2_0_ce0;
wire   [31:0] conv_1_weights_2_0_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire   [31:0] grp_fu_302_p2;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire   [9:0] add_ln8_fu_327_p2;
reg   [9:0] add_ln8_reg_734;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_339_p2;
reg   [4:0] r_reg_742;
wire   [10:0] sub_ln26_fu_369_p2;
reg   [10:0] sub_ln26_reg_747;
wire   [0:0] icmp_ln8_fu_333_p2;
wire   [10:0] sub_ln26_1_fu_399_p2;
reg   [10:0] sub_ln26_1_reg_752;
wire   [10:0] sub_ln26_2_fu_435_p2;
reg   [10:0] sub_ln26_2_reg_757;
wire   [4:0] c_fu_447_p2;
reg   [4:0] c_reg_765;
wire    ap_CS_fsm_state3;
wire   [15:0] zext_ln14_fu_471_p1;
reg   [15:0] zext_ln14_reg_770;
wire   [0:0] icmp_ln11_fu_441_p2;
wire   [5:0] f_fu_481_p2;
reg   [5:0] f_reg_778;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_487_p1;
reg   [63:0] zext_ln26_reg_783;
wire   [0:0] icmp_ln14_fu_475_p2;
wire   [7:0] zext_ln35_1_fu_491_p1;
reg   [7:0] zext_ln35_1_reg_788;
reg   [14:0] conv_out_addr_reg_795;
wire   [1:0] add_ln21_fu_519_p2;
reg   [1:0] add_ln21_reg_803;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln21_fu_513_p2;
wire   [31:0] grp_fu_294_p2;
wire    ap_CS_fsm_state8;
wire   [1:0] add_ln21_1_fu_577_p2;
reg   [1:0] add_ln21_1_reg_831;
wire    ap_CS_fsm_state9;
wire   [0:0] icmp_ln21_1_fu_571_p2;
wire    ap_CS_fsm_state12;
wire   [1:0] add_ln21_2_fu_635_p2;
reg   [1:0] add_ln21_2_reg_859;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln21_2_fu_629_p2;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg   [4:0] r_0_reg_181;
reg   [9:0] phi_mul_reg_192;
reg   [4:0] c_0_reg_204;
reg   [5:0] f_0_reg_216;
wire    ap_CS_fsm_state18;
reg   [31:0] w_sum_1_0_reg_227;
reg   [1:0] wc_0_0_reg_239;
reg   [31:0] w_sum_1_1_reg_250;
reg   [1:0] wc_0_1_reg_261;
reg   [31:0] w_sum_1_2_reg_272;
reg   [1:0] wc_0_2_reg_283;
wire   [63:0] zext_ln35_3_fu_504_p1;
wire   [63:0] zext_ln26_8_fu_542_p1;
wire  signed [63:0] sext_ln26_fu_562_p1;
wire   [63:0] zext_ln26_11_fu_600_p1;
wire  signed [63:0] sext_ln26_1_fu_620_p1;
wire   [63:0] zext_ln26_14_fu_658_p1;
wire  signed [63:0] sext_ln26_2_fu_678_p1;
reg   [31:0] grp_fu_294_p0;
reg   [31:0] grp_fu_294_p1;
reg   [31:0] grp_fu_302_p0;
wire   [9:0] tmp_7_fu_345_p3;
wire   [6:0] tmp_8_fu_357_p3;
wire   [10:0] zext_ln26_1_fu_353_p1;
wire   [10:0] zext_ln26_2_fu_365_p1;
wire   [9:0] tmp_9_fu_375_p3;
wire   [6:0] tmp_10_fu_387_p3;
wire   [10:0] zext_ln26_3_fu_383_p1;
wire   [10:0] zext_ln26_4_fu_395_p1;
wire   [4:0] add_ln26_2_fu_405_p2;
wire   [9:0] tmp_11_fu_411_p3;
wire   [6:0] tmp_12_fu_423_p3;
wire   [10:0] zext_ln26_5_fu_419_p1;
wire   [10:0] zext_ln26_6_fu_431_p1;
wire   [9:0] zext_ln35_fu_453_p1;
wire   [9:0] add_ln35_fu_457_p2;
wire   [14:0] tmp_13_fu_463_p3;
wire   [15:0] zext_ln35_2_fu_495_p1;
wire   [15:0] add_ln35_1_fu_499_p2;
wire   [6:0] tmp_14_fu_525_p3;
wire   [7:0] zext_ln26_7_fu_533_p1;
wire   [7:0] add_ln26_5_fu_537_p2;
wire   [4:0] zext_ln21_fu_509_p1;
wire   [4:0] add_ln26_1_fu_547_p2;
wire   [10:0] zext_ln26_9_fu_553_p1;
wire   [10:0] add_ln26_6_fu_557_p2;
wire   [6:0] tmp_15_fu_583_p3;
wire   [7:0] zext_ln26_10_fu_591_p1;
wire   [7:0] add_ln26_7_fu_595_p2;
wire   [4:0] zext_ln21_1_fu_567_p1;
wire   [4:0] add_ln26_fu_605_p2;
wire   [10:0] zext_ln26_12_fu_611_p1;
wire   [10:0] add_ln26_8_fu_615_p2;
wire   [6:0] tmp_16_fu_641_p3;
wire   [7:0] zext_ln26_13_fu_649_p1;
wire   [7:0] add_ln26_9_fu_653_p2;
wire   [4:0] zext_ln21_2_fu_625_p1;
wire   [4:0] add_ln26_3_fu_663_p2;
wire   [10:0] zext_ln26_15_fu_669_p1;
wire   [10:0] add_ln26_10_fu_673_p2;
wire   [31:0] bitcast_ln34_fu_683_p1;
wire   [7:0] tmp_fu_687_p4;
wire   [22:0] trunc_ln34_fu_697_p1;
wire   [0:0] icmp_ln34_1_fu_707_p2;
wire   [0:0] icmp_ln34_fu_701_p2;
wire   [0:0] or_ln34_fu_713_p2;
wire   [0:0] tmp_6_fu_311_p2;
wire   [0:0] and_ln34_fu_719_p2;
reg   [17:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_0_address0),
    .ce0(conv_1_weights_0_0_ce0),
    .q0(conv_1_weights_0_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_0_address0),
    .ce0(conv_1_weights_1_0_ce0),
    .q0(conv_1_weights_1_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_0_address0),
    .ce0(conv_1_weights_2_0_ce0),
    .q0(conv_1_weights_2_0_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .din1(grp_fu_294_p1),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_302_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_302_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_294_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_311_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_475_p2 == 1'd1))) begin
        c_0_reg_204 <= c_reg_765;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_333_p2 == 1'd0))) begin
        c_0_reg_204 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        f_0_reg_216 <= f_reg_778;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_441_p2 == 1'd0))) begin
        f_0_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_441_p2 == 1'd1))) begin
        phi_mul_reg_192 <= add_ln8_reg_734;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_192 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_441_p2 == 1'd1))) begin
        r_0_reg_181 <= r_reg_742;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_181 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        w_sum_1_0_reg_227 <= grp_fu_294_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_475_p2 == 1'd0))) begin
        w_sum_1_0_reg_227 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_1_1_reg_250 <= grp_fu_294_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_513_p2 == 1'd1))) begin
        w_sum_1_1_reg_250 <= w_sum_1_0_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        w_sum_1_2_reg_272 <= grp_fu_294_p2;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln21_1_fu_571_p2 == 1'd1))) begin
        w_sum_1_2_reg_272 <= w_sum_1_1_reg_250;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        wc_0_0_reg_239 <= add_ln21_reg_803;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_475_p2 == 1'd0))) begin
        wc_0_0_reg_239 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        wc_0_1_reg_261 <= add_ln21_1_reg_831;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_513_p2 == 1'd1))) begin
        wc_0_1_reg_261 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        wc_0_2_reg_283 <= add_ln21_2_reg_859;
    end else if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln21_1_fu_571_p2 == 1'd1))) begin
        wc_0_2_reg_283 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        add_ln21_1_reg_831 <= add_ln21_1_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln21_2_reg_859 <= add_ln21_2_fu_635_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_reg_803 <= add_ln21_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_734 <= add_ln8_fu_327_p2;
        r_reg_742 <= r_fu_339_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_765 <= c_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_475_p2 == 1'd0))) begin
        conv_out_addr_reg_795 <= zext_ln35_3_fu_504_p1;
        zext_ln26_reg_783[5 : 0] <= zext_ln26_fu_487_p1[5 : 0];
        zext_ln35_1_reg_788[5 : 0] <= zext_ln35_1_fu_491_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_778 <= f_fu_481_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_333_p2 == 1'd0))) begin
        sub_ln26_1_reg_752[10 : 2] <= sub_ln26_1_fu_399_p2[10 : 2];
        sub_ln26_2_reg_757[10 : 2] <= sub_ln26_2_fu_435_p2[10 : 2];
        sub_ln26_reg_747[10 : 2] <= sub_ln26_fu_369_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_441_p2 == 1'd0))) begin
        zext_ln14_reg_770[14 : 5] <= zext_ln14_fu_471_p1[14 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_333_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_333_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_1_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_1_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_input_address0 = sext_ln26_2_fu_678_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_input_address0 = sext_ln26_1_fu_620_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_input_address0 = sext_ln26_fu_562_p1;
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state15))) begin
        grp_fu_294_p0 = w_sum_1_2_reg_272;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_294_p0 = w_sum_1_1_reg_250;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_294_p0 = w_sum_1_0_reg_227;
    end else begin
        grp_fu_294_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_294_p1 = conv_1_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7))) begin
        grp_fu_294_p1 = grp_fu_302_p2;
    end else begin
        grp_fu_294_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_302_p0 = conv_1_weights_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_302_p0 = conv_1_weights_1_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_302_p0 = conv_1_weights_0_0_q0;
    end else begin
        grp_fu_302_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_333_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_441_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_475_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (icmp_ln21_1_fu_571_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state13 : begin
            if (((icmp_ln21_2_fu_629_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state13))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_577_p2 = (wc_0_1_reg_261 + 2'd1);

assign add_ln21_2_fu_635_p2 = (wc_0_2_reg_283 + 2'd1);

assign add_ln21_fu_519_p2 = (wc_0_0_reg_239 + 2'd1);

assign add_ln26_10_fu_673_p2 = (zext_ln26_15_fu_669_p1 + sub_ln26_2_reg_757);

assign add_ln26_1_fu_547_p2 = (c_0_reg_204 + zext_ln21_fu_509_p1);

assign add_ln26_2_fu_405_p2 = (r_0_reg_181 + 5'd2);

assign add_ln26_3_fu_663_p2 = (c_0_reg_204 + zext_ln21_2_fu_625_p1);

assign add_ln26_5_fu_537_p2 = (zext_ln35_1_reg_788 + zext_ln26_7_fu_533_p1);

assign add_ln26_6_fu_557_p2 = (zext_ln26_9_fu_553_p1 + sub_ln26_reg_747);

assign add_ln26_7_fu_595_p2 = (zext_ln35_1_reg_788 + zext_ln26_10_fu_591_p1);

assign add_ln26_8_fu_615_p2 = (zext_ln26_12_fu_611_p1 + sub_ln26_1_reg_752);

assign add_ln26_9_fu_653_p2 = (zext_ln35_1_reg_788 + zext_ln26_13_fu_649_p1);

assign add_ln26_fu_605_p2 = (c_0_reg_204 + zext_ln21_1_fu_567_p1);

assign add_ln35_1_fu_499_p2 = (zext_ln14_reg_770 + zext_ln35_2_fu_495_p1);

assign add_ln35_fu_457_p2 = (phi_mul_reg_192 + zext_ln35_fu_453_p1);

assign add_ln8_fu_327_p2 = (phi_mul_reg_192 + 10'd26);

assign and_ln34_fu_719_p2 = (tmp_6_fu_311_p2 & or_ln34_fu_713_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_683_p1 = grp_fu_294_p2;

assign c_fu_447_p2 = (c_0_reg_204 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_783;

assign conv_1_weights_0_0_address0 = zext_ln26_8_fu_542_p1;

assign conv_1_weights_1_0_address0 = zext_ln26_11_fu_600_p1;

assign conv_1_weights_2_0_address0 = zext_ln26_14_fu_658_p1;

assign conv_out_address0 = conv_out_addr_reg_795;

assign conv_out_d0 = ((and_ln34_fu_719_p2[0:0] === 1'b1) ? grp_fu_294_p2 : 32'd0);

assign f_fu_481_p2 = (f_0_reg_216 + 6'd1);

assign icmp_ln11_fu_441_p2 = ((c_0_reg_204 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_475_p2 = ((f_0_reg_216 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_571_p2 = ((wc_0_1_reg_261 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_629_p2 = ((wc_0_2_reg_283 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_513_p2 = ((wc_0_0_reg_239 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_707_p2 = ((trunc_ln34_fu_697_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_701_p2 = ((tmp_fu_687_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_333_p2 = ((r_0_reg_181 == 5'd26) ? 1'b1 : 1'b0);

assign or_ln34_fu_713_p2 = (icmp_ln34_fu_701_p2 | icmp_ln34_1_fu_707_p2);

assign r_fu_339_p2 = (r_0_reg_181 + 5'd1);

assign sext_ln26_1_fu_620_p1 = $signed(add_ln26_8_fu_615_p2);

assign sext_ln26_2_fu_678_p1 = $signed(add_ln26_10_fu_673_p2);

assign sext_ln26_fu_562_p1 = $signed(add_ln26_6_fu_557_p2);

assign sub_ln26_1_fu_399_p2 = (zext_ln26_3_fu_383_p1 - zext_ln26_4_fu_395_p1);

assign sub_ln26_2_fu_435_p2 = (zext_ln26_5_fu_419_p1 - zext_ln26_6_fu_431_p1);

assign sub_ln26_fu_369_p2 = (zext_ln26_1_fu_353_p1 - zext_ln26_2_fu_365_p1);

assign tmp_10_fu_387_p3 = {{r_fu_339_p2}, {2'd0}};

assign tmp_11_fu_411_p3 = {{add_ln26_2_fu_405_p2}, {5'd0}};

assign tmp_12_fu_423_p3 = {{add_ln26_2_fu_405_p2}, {2'd0}};

assign tmp_13_fu_463_p3 = {{add_ln35_fu_457_p2}, {5'd0}};

assign tmp_14_fu_525_p3 = {{wc_0_0_reg_239}, {5'd0}};

assign tmp_15_fu_583_p3 = {{wc_0_1_reg_261}, {5'd0}};

assign tmp_16_fu_641_p3 = {{wc_0_2_reg_283}, {5'd0}};

assign tmp_7_fu_345_p3 = {{r_0_reg_181}, {5'd0}};

assign tmp_8_fu_357_p3 = {{r_0_reg_181}, {2'd0}};

assign tmp_9_fu_375_p3 = {{r_fu_339_p2}, {5'd0}};

assign tmp_fu_687_p4 = {{bitcast_ln34_fu_683_p1[30:23]}};

assign trunc_ln34_fu_697_p1 = bitcast_ln34_fu_683_p1[22:0];

assign zext_ln14_fu_471_p1 = tmp_13_fu_463_p3;

assign zext_ln21_1_fu_567_p1 = wc_0_1_reg_261;

assign zext_ln21_2_fu_625_p1 = wc_0_2_reg_283;

assign zext_ln21_fu_509_p1 = wc_0_0_reg_239;

assign zext_ln26_10_fu_591_p1 = tmp_15_fu_583_p3;

assign zext_ln26_11_fu_600_p1 = add_ln26_7_fu_595_p2;

assign zext_ln26_12_fu_611_p1 = add_ln26_fu_605_p2;

assign zext_ln26_13_fu_649_p1 = tmp_16_fu_641_p3;

assign zext_ln26_14_fu_658_p1 = add_ln26_9_fu_653_p2;

assign zext_ln26_15_fu_669_p1 = add_ln26_3_fu_663_p2;

assign zext_ln26_1_fu_353_p1 = tmp_7_fu_345_p3;

assign zext_ln26_2_fu_365_p1 = tmp_8_fu_357_p3;

assign zext_ln26_3_fu_383_p1 = tmp_9_fu_375_p3;

assign zext_ln26_4_fu_395_p1 = tmp_10_fu_387_p3;

assign zext_ln26_5_fu_419_p1 = tmp_11_fu_411_p3;

assign zext_ln26_6_fu_431_p1 = tmp_12_fu_423_p3;

assign zext_ln26_7_fu_533_p1 = tmp_14_fu_525_p3;

assign zext_ln26_8_fu_542_p1 = add_ln26_5_fu_537_p2;

assign zext_ln26_9_fu_553_p1 = add_ln26_1_fu_547_p2;

assign zext_ln26_fu_487_p1 = f_0_reg_216;

assign zext_ln35_1_fu_491_p1 = f_0_reg_216;

assign zext_ln35_2_fu_495_p1 = f_0_reg_216;

assign zext_ln35_3_fu_504_p1 = add_ln35_1_fu_499_p2;

assign zext_ln35_fu_453_p1 = c_0_reg_204;

always @ (posedge ap_clk) begin
    sub_ln26_reg_747[1:0] <= 2'b00;
    sub_ln26_1_reg_752[1:0] <= 2'b00;
    sub_ln26_2_reg_757[1:0] <= 2'b00;
    zext_ln14_reg_770[4:0] <= 5'b00000;
    zext_ln14_reg_770[15] <= 1'b0;
    zext_ln26_reg_783[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_788[7:6] <= 2'b00;
end

endmodule //conv_1
