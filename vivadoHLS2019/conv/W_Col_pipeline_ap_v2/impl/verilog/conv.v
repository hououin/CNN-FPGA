// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.808000,HLS_SYN_LAT=197473,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=7,HLS_SYN_FF=1421,HLS_SYN_LUT=1822,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_pp0_stage0 = 17'd16;
parameter    ap_ST_fsm_pp0_stage1 = 17'd32;
parameter    ap_ST_fsm_pp0_stage2 = 17'd64;
parameter    ap_ST_fsm_pp0_stage3 = 17'd128;
parameter    ap_ST_fsm_pp0_stage4 = 17'd256;
parameter    ap_ST_fsm_pp0_stage5 = 17'd512;
parameter    ap_ST_fsm_state17 = 17'd1024;
parameter    ap_ST_fsm_state18 = 17'd2048;
parameter    ap_ST_fsm_state19 = 17'd4096;
parameter    ap_ST_fsm_state20 = 17'd8192;
parameter    ap_ST_fsm_state21 = 17'd16384;
parameter    ap_ST_fsm_state22 = 17'd32768;
parameter    ap_ST_fsm_state23 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [7:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [7:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [7:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [7:0] input_4_address0;
output   input_4_ce0;
input  [31:0] input_4_q0;
output  [7:0] input_5_address0;
output   input_5_ce0;
input  [31:0] input_5_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [7:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [7:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire   [7:0] conv_weights_3_address0;
reg    conv_weights_3_ce0;
wire   [31:0] conv_weights_3_q0;
wire   [7:0] conv_weights_4_address0;
reg    conv_weights_4_ce0;
wire   [31:0] conv_weights_4_q0;
wire   [7:0] conv_weights_5_address0;
reg    conv_weights_5_ce0;
wire   [31:0] conv_weights_5_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
reg   [3:0] indvar_flatten_reg_465;
reg   [1:0] wr_0_reg_476;
reg   [1:0] wc_0_reg_487;
wire   [31:0] w_sumf_q1;
reg   [31:0] reg_538;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln63_reg_1020;
wire    ap_CS_fsm_state19;
wire   [10:0] add_ln51_fu_550_p2;
reg   [10:0] add_ln51_reg_960;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln54_fu_556_p2;
reg   [0:0] icmp_ln54_reg_965;
wire   [0:0] icmp_ln51_fu_544_p2;
wire   [4:0] select_ln79_2_fu_600_p3;
reg   [4:0] select_ln79_2_reg_971;
wire   [3:0] select_ln79_3_fu_608_p3;
reg   [3:0] select_ln79_3_reg_978;
wire   [3:0] select_ln79_1_fu_627_p3;
reg   [3:0] select_ln79_1_reg_990;
wire    ap_CS_fsm_state3;
wire   [8:0] zext_ln79_2_fu_648_p1;
reg   [8:0] zext_ln79_2_reg_996;
reg   [10:0] conv_out_addr_reg_1001;
reg   [31:0] w_sum_reg_1006;
wire   [0:0] icmp_ln60_fu_665_p2;
wire    ap_CS_fsm_state4;
wire   [2:0] ch_fu_671_p2;
wire   [0:0] icmp_ln63_fu_682_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln63_reg_1020_pp0_iter1_reg;
wire   [3:0] add_ln63_1_fu_688_p2;
reg   [3:0] add_ln63_1_reg_1024;
wire   [1:0] select_ln63_fu_706_p3;
reg   [1:0] select_ln63_reg_1029;
wire   [1:0] select_ln63_1_fu_714_p3;
reg   [1:0] select_ln63_1_reg_1034;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv_weights_1_load_reg_1109;
reg   [31:0] input_1_load_reg_1114;
reg   [31:0] conv_weights_2_load_reg_1119;
reg   [31:0] input_2_load_reg_1124;
reg   [31:0] conv_weights_3_load_reg_1129;
reg   [31:0] input_3_load_reg_1134;
reg   [31:0] conv_weights_4_load_reg_1139;
reg   [31:0] input_4_load_reg_1144;
reg   [31:0] conv_weights_5_load_reg_1149;
reg   [31:0] input_5_load_reg_1154;
wire   [31:0] grp_fu_526_p2;
reg   [31:0] tmp_s_reg_1159;
reg   [31:0] tmp_2_1_reg_1164;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state8_pp0_stage3_iter0;
wire    ap_block_state14_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] w_sumf_load_2_reg_1169;
reg   [31:0] tmp_2_2_reg_1174;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state9_pp0_stage4_iter0;
wire    ap_block_state15_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] w_sumf_load_3_reg_1179;
reg   [31:0] tmp_2_3_reg_1184;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state10_pp0_stage5_iter0;
wire    ap_block_state16_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] w_sumf_load_4_reg_1189;
wire   [1:0] wc_fu_812_p2;
reg   [1:0] wc_reg_1194;
reg   [31:0] tmp_2_4_reg_1199;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] w_sumf_load_5_reg_1204;
reg   [31:0] tmp_2_5_reg_1209;
reg   [31:0] w_sumf_load_6_reg_1214;
wire   [2:0] ch_1_fu_823_p2;
reg   [2:0] ch_1_reg_1222;
wire    ap_CS_fsm_state18;
wire   [0:0] icmp_ln75_fu_817_p2;
wire   [4:0] f_fu_834_p2;
reg   [4:0] f_reg_1232;
wire   [8:0] select_ln54_fu_845_p3;
reg   [8:0] select_ln54_reg_1237;
wire   [31:0] grp_fu_519_p2;
wire    ap_CS_fsm_state22;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage5_subdone;
reg   [2:0] w_sumf_address0;
reg    w_sumf_ce0;
reg    w_sumf_we0;
reg   [31:0] w_sumf_d0;
reg   [2:0] w_sumf_address1;
reg    w_sumf_ce1;
reg   [10:0] indvar_flatten21_reg_397;
wire    ap_CS_fsm_state23;
reg   [3:0] r_0_reg_408;
reg   [8:0] indvar_flatten7_reg_420;
reg   [3:0] c_0_reg_432;
reg   [4:0] f_0_reg_443;
reg   [2:0] ch_0_reg_454;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_469_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_480_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_491_p4;
reg   [31:0] w_sum_0_reg_498;
wire    ap_CS_fsm_state17;
reg   [2:0] ch2_0_reg_508;
wire   [63:0] zext_ln59_fu_616_p1;
wire   [63:0] zext_ln79_4_fu_660_p1;
wire   [63:0] zext_ln61_fu_677_p1;
wire   [63:0] zext_ln71_4_fu_784_p1;
wire   [63:0] zext_ln71_6_fu_803_p1;
wire   [63:0] zext_ln76_fu_829_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
reg   [31:0] grp_fu_519_p0;
reg   [31:0] grp_fu_519_p1;
reg   [31:0] grp_fu_526_p0;
reg   [31:0] grp_fu_526_p1;
wire   [0:0] icmp_ln57_fu_576_p2;
wire   [0:0] xor_ln79_fu_570_p2;
wire   [3:0] select_ln79_fu_562_p3;
wire   [0:0] and_ln79_fu_582_p2;
wire   [0:0] or_ln79_fu_594_p2;
wire   [3:0] c_fu_588_p2;
wire   [3:0] r_fu_621_p2;
wire   [7:0] grp_fu_903_p3;
wire   [11:0] zext_ln79_3_fu_651_p1;
wire   [11:0] tmp_2_cast_fu_641_p3;
wire   [11:0] add_ln79_1_fu_654_p2;
wire   [0:0] icmp_ln66_fu_700_p2;
wire   [1:0] wr_fu_694_p2;
wire   [3:0] tmp_4_fu_726_p3;
wire   [4:0] zext_ln71_1_fu_734_p1;
wire   [4:0] zext_ln71_fu_722_p1;
wire   [3:0] zext_ln63_fu_744_p1;
wire   [3:0] add_ln63_fu_748_p2;
wire   [4:0] sub_ln71_fu_738_p2;
wire   [4:0] zext_ln71_3_fu_761_p1;
wire   [4:0] add_ln71_fu_765_p2;
wire   [8:0] tmp_9_cast_fu_771_p3;
wire   [8:0] add_ln71_2_fu_779_p2;
wire   [3:0] zext_ln66_fu_757_p1;
wire   [3:0] add_ln71_1_fu_794_p2;
wire   [7:0] grp_fu_912_p3;
wire   [8:0] add_ln54_1_fu_839_p2;
wire   [31:0] bitcast_ln78_fu_852_p1;
wire   [7:0] tmp_fu_856_p4;
wire   [22:0] trunc_ln78_fu_866_p1;
wire   [0:0] icmp_ln78_1_fu_876_p2;
wire   [0:0] icmp_ln78_fu_870_p2;
wire   [0:0] or_ln78_fu_882_p2;
wire   [0:0] grp_fu_532_p2;
wire   [0:0] and_ln78_fu_888_p2;
wire   [3:0] grp_fu_903_p0;
wire   [4:0] grp_fu_903_p1;
wire   [3:0] grp_fu_903_p2;
wire   [3:0] grp_fu_912_p0;
wire   [4:0] grp_fu_912_p1;
wire   [3:0] grp_fu_912_p2;
reg   [16:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_903_p00;
wire   [7:0] grp_fu_903_p20;
wire   [7:0] grp_fu_912_p00;
wire   [7:0] grp_fu_912_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_conv_weights_3 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_address0),
    .ce0(conv_weights_3_ce0),
    .q0(conv_weights_3_q0)
);

conv_conv_weights_4 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_address0),
    .ce0(conv_weights_4_ce0),
    .q0(conv_weights_4_q0)
);

conv_conv_weights_5 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_address0),
    .ce0(conv_weights_5_ce0),
    .q0(conv_weights_5_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_w_sumf #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
w_sumf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_sumf_address0),
    .ce0(w_sumf_ce0),
    .we0(w_sumf_we0),
    .d0(w_sumf_d0),
    .address1(w_sumf_address1),
    .ce1(w_sumf_ce1),
    .q1(w_sumf_q1)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_519_p0),
    .din1(grp_fu_519_p1),
    .ce(1'b1),
    .dout(grp_fu_519_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_526_p0),
    .din1(grp_fu_526_p1),
    .ce(1'b1),
    .dout(grp_fu_526_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w_sum_0_reg_498),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_532_p2)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U4(
    .din0(grp_fu_903_p0),
    .din1(grp_fu_903_p1),
    .din2(grp_fu_903_p2),
    .dout(grp_fu_903_p3)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U5(
    .din0(grp_fu_912_p0),
    .din1(grp_fu_912_p1),
    .din2(grp_fu_912_p2),
    .dout(grp_fu_912_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln60_fu_665_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln60_fu_665_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        c_0_reg_432 <= select_ln79_3_reg_978;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_432 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        ch2_0_reg_508 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        ch2_0_reg_508 <= ch_1_reg_1222;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_665_p2 == 1'd0))) begin
        ch_0_reg_454 <= ch_fu_671_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ch_0_reg_454 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        f_0_reg_443 <= f_reg_1232;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_443 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten21_reg_397 <= add_ln51_reg_960;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_397 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten7_reg_420 <= select_ln54_reg_1237;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_420 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_665_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        indvar_flatten_reg_465 <= 4'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        indvar_flatten_reg_465 <= add_ln63_1_reg_1024;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        r_0_reg_408 <= select_ln79_1_reg_990;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_408 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        w_sum_0_reg_498 <= w_sum_reg_1006;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        w_sum_0_reg_498 <= grp_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_665_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wc_0_reg_487 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        wc_0_reg_487 <= wc_reg_1194;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_665_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_476 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        wr_0_reg_476 <= select_ln63_1_reg_1034;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln51_reg_960 <= add_ln51_fu_550_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln63_1_reg_1024 <= add_ln63_1_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ch_1_reg_1222 <= ch_1_fu_823_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_out_addr_reg_1001 <= zext_ln79_4_fu_660_p1;
        select_ln79_1_reg_990 <= select_ln79_1_fu_627_p3;
        w_sum_reg_1006 <= conv_bias_q0;
        zext_ln79_2_reg_996[4 : 0] <= zext_ln79_2_fu_648_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_1020 == 1'd0))) begin
        conv_weights_1_load_reg_1109 <= conv_weights_1_q0;
        conv_weights_2_load_reg_1119 <= conv_weights_2_q0;
        conv_weights_3_load_reg_1129 <= conv_weights_3_q0;
        conv_weights_4_load_reg_1139 <= conv_weights_4_q0;
        conv_weights_5_load_reg_1149 <= conv_weights_5_q0;
        input_1_load_reg_1114 <= input_1_q0;
        input_2_load_reg_1124 <= input_2_q0;
        input_3_load_reg_1134 <= input_3_q0;
        input_4_load_reg_1144 <= input_4_q0;
        input_5_load_reg_1154 <= input_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_817_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
        f_reg_1232 <= f_fu_834_p2;
        select_ln54_reg_1237 <= select_ln54_fu_845_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln51_fu_544_p2 == 1'd0))) begin
        icmp_ln54_reg_965 <= icmp_ln54_fu_556_p2;
        select_ln79_2_reg_971 <= select_ln79_2_fu_600_p3;
        select_ln79_3_reg_978 <= select_ln79_3_fu_608_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln63_reg_1020 <= icmp_ln63_fu_682_p2;
        icmp_ln63_reg_1020_pp0_iter1_reg <= icmp_ln63_reg_1020;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_1020 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_538 <= w_sumf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_fu_682_p2 == 1'd0))) begin
        select_ln63_1_reg_1034 <= select_ln63_1_fu_714_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_fu_682_p2 == 1'd0))) begin
        select_ln63_reg_1029 <= select_ln63_fu_706_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_reg_1020 == 1'd0))) begin
        tmp_2_1_reg_1164 <= grp_fu_526_p2;
        w_sumf_load_2_reg_1169 <= w_sumf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_reg_1020 == 1'd0))) begin
        tmp_2_2_reg_1174 <= grp_fu_526_p2;
        w_sumf_load_3_reg_1179 <= w_sumf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln63_reg_1020 == 1'd0))) begin
        tmp_2_3_reg_1184 <= grp_fu_526_p2;
        w_sumf_load_4_reg_1189 <= w_sumf_q1;
        wc_reg_1194 <= wc_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        tmp_2_4_reg_1199 <= grp_fu_526_p2;
        w_sumf_load_5_reg_1204 <= w_sumf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_1020_pp0_iter1_reg == 1'd0))) begin
        tmp_2_5_reg_1209 <= grp_fu_526_p2;
        w_sumf_load_6_reg_1214 <= w_sumf_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_1020 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_s_reg_1159 <= grp_fu_526_p2;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_682_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln51_fu_544_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_469_p4 = add_ln63_1_reg_1024;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_469_p4 = indvar_flatten_reg_465;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        ap_phi_mux_wc_0_phi_fu_491_p4 = wc_reg_1194;
    end else begin
        ap_phi_mux_wc_0_phi_fu_491_p4 = wc_0_reg_487;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_480_p4 = select_ln63_1_reg_1034;
    end else begin
        ap_phi_mux_wr_0_phi_fu_480_p4 = wr_0_reg_476;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln51_fu_544_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_519_p0 = w_sum_0_reg_498;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_519_p0 = w_sumf_load_6_reg_1214;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_519_p0 = w_sumf_load_5_reg_1204;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_519_p0 = w_sumf_load_4_reg_1189;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_519_p0 = w_sumf_load_3_reg_1179;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_519_p0 = w_sumf_load_2_reg_1169;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_519_p0 = reg_538;
    end else begin
        grp_fu_519_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_519_p1 = w_sumf_q1;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_519_p1 = tmp_2_5_reg_1209;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_519_p1 = tmp_2_4_reg_1199;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_519_p1 = tmp_2_3_reg_1184;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_519_p1 = tmp_2_2_reg_1174;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_519_p1 = tmp_2_1_reg_1164;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_519_p1 = tmp_s_reg_1159;
    end else begin
        grp_fu_519_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_526_p0 = conv_weights_5_load_reg_1149;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p0 = conv_weights_4_load_reg_1139;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p0 = conv_weights_3_load_reg_1129;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p0 = conv_weights_2_load_reg_1119;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_526_p0 = conv_weights_1_load_reg_1109;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_526_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_526_p1 = input_5_load_reg_1154;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p1 = input_4_load_reg_1144;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p1 = input_3_load_reg_1134;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p1 = input_2_load_reg_1124;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_526_p1 = input_1_load_reg_1114;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_526_p1 = input_0_q0;
    end else begin
        grp_fu_526_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        w_sumf_address0 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        w_sumf_address0 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        w_sumf_address0 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        w_sumf_address0 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_sumf_address0 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_sumf_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_sumf_address0 = zext_ln61_fu_677_p1;
    end else begin
        w_sumf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        w_sumf_address1 = zext_ln76_fu_829_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_sumf_address1 = 64'd5;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_sumf_address1 = 64'd4;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_sumf_address1 = 64'd3;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_sumf_address1 = 64'd2;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        w_sumf_address1 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_sumf_address1 = 64'd0;
    end else begin
        w_sumf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        w_sumf_ce0 = 1'b1;
    end else begin
        w_sumf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        w_sumf_ce1 = 1'b1;
    end else begin
        w_sumf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        w_sumf_d0 = grp_fu_519_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_sumf_d0 = 32'd0;
    end else begin
        w_sumf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln63_reg_1020_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln63_reg_1020_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln63_reg_1020_pp0_iter1_reg == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln63_reg_1020_pp0_iter1_reg == 1'd0)) | ((1'b1 == ap_CS_fsm_state4) & (icmp_ln60_fu_665_p2 == 1'd0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln63_reg_1020 == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln63_reg_1020_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        w_sumf_we0 = 1'b1;
    end else begin
        w_sumf_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln51_fu_544_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln60_fu_665_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln63_fu_682_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln63_fu_682_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            if (((icmp_ln75_fu_817_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state18))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_550_p2 = (indvar_flatten21_reg_397 + 11'd1);

assign add_ln54_1_fu_839_p2 = (9'd1 + indvar_flatten7_reg_420);

assign add_ln63_1_fu_688_p2 = (ap_phi_mux_indvar_flatten_phi_fu_469_p4 + 4'd1);

assign add_ln63_fu_748_p2 = (zext_ln63_fu_744_p1 + select_ln79_1_reg_990);

assign add_ln71_1_fu_794_p2 = (zext_ln66_fu_757_p1 + select_ln79_3_reg_978);

assign add_ln71_2_fu_779_p2 = (tmp_9_cast_fu_771_p3 + zext_ln79_2_reg_996);

assign add_ln71_fu_765_p2 = (sub_ln71_fu_738_p2 + zext_ln71_3_fu_761_p1);

assign add_ln79_1_fu_654_p2 = (zext_ln79_3_fu_651_p1 + tmp_2_cast_fu_641_p3);

assign and_ln78_fu_888_p2 = (or_ln78_fu_882_p2 & grp_fu_532_p2);

assign and_ln79_fu_582_p2 = (xor_ln79_fu_570_p2 & icmp_ln57_fu_576_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln78_fu_852_p1 = w_sum_0_reg_498;

assign c_fu_588_p2 = (select_ln79_fu_562_p3 + 4'd1);

assign ch_1_fu_823_p2 = (ch2_0_reg_508 + 3'd1);

assign ch_fu_671_p2 = (ch_0_reg_454 + 3'd1);

assign conv_bias_address0 = zext_ln59_fu_616_p1;

assign conv_out_address0 = conv_out_addr_reg_1001;

assign conv_out_d0 = ((and_ln78_fu_888_p2[0:0] === 1'b1) ? w_sum_0_reg_498 : 32'd0);

assign conv_weights_0_address0 = zext_ln71_4_fu_784_p1;

assign conv_weights_1_address0 = zext_ln71_4_fu_784_p1;

assign conv_weights_2_address0 = zext_ln71_4_fu_784_p1;

assign conv_weights_3_address0 = zext_ln71_4_fu_784_p1;

assign conv_weights_4_address0 = zext_ln71_4_fu_784_p1;

assign conv_weights_5_address0 = zext_ln71_4_fu_784_p1;

assign f_fu_834_p2 = (5'd1 + select_ln79_2_reg_971);

assign grp_fu_903_p0 = grp_fu_903_p00;

assign grp_fu_903_p00 = select_ln79_1_fu_627_p3;

assign grp_fu_903_p1 = 8'd11;

assign grp_fu_903_p2 = grp_fu_903_p20;

assign grp_fu_903_p20 = select_ln79_3_reg_978;

assign grp_fu_912_p0 = grp_fu_912_p00;

assign grp_fu_912_p00 = add_ln63_fu_748_p2;

assign grp_fu_912_p1 = 8'd13;

assign grp_fu_912_p2 = grp_fu_912_p20;

assign grp_fu_912_p20 = add_ln71_1_fu_794_p2;

assign icmp_ln51_fu_544_p2 = ((indvar_flatten21_reg_397 == 11'd1936) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_556_p2 = ((indvar_flatten7_reg_420 == 9'd176) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_576_p2 = ((f_0_reg_443 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_665_p2 = ((ch_0_reg_454 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_682_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_469_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_700_p2 = ((ap_phi_mux_wc_0_phi_fu_491_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_817_p2 = ((ch2_0_reg_508 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_876_p2 = ((trunc_ln78_fu_866_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_870_p2 = ((tmp_fu_856_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln71_6_fu_803_p1;

assign input_1_address0 = zext_ln71_6_fu_803_p1;

assign input_2_address0 = zext_ln71_6_fu_803_p1;

assign input_3_address0 = zext_ln71_6_fu_803_p1;

assign input_4_address0 = zext_ln71_6_fu_803_p1;

assign input_5_address0 = zext_ln71_6_fu_803_p1;

assign or_ln78_fu_882_p2 = (icmp_ln78_fu_870_p2 | icmp_ln78_1_fu_876_p2);

assign or_ln79_fu_594_p2 = (icmp_ln54_fu_556_p2 | and_ln79_fu_582_p2);

assign r_fu_621_p2 = (r_0_reg_408 + 4'd1);

assign select_ln54_fu_845_p3 = ((icmp_ln54_reg_965[0:0] === 1'b1) ? 9'd1 : add_ln54_1_fu_839_p2);

assign select_ln63_1_fu_714_p3 = ((icmp_ln66_fu_700_p2[0:0] === 1'b1) ? wr_fu_694_p2 : ap_phi_mux_wr_0_phi_fu_480_p4);

assign select_ln63_fu_706_p3 = ((icmp_ln66_fu_700_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_491_p4);

assign select_ln79_1_fu_627_p3 = ((icmp_ln54_reg_965[0:0] === 1'b1) ? r_fu_621_p2 : r_0_reg_408);

assign select_ln79_2_fu_600_p3 = ((or_ln79_fu_594_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_443);

assign select_ln79_3_fu_608_p3 = ((and_ln79_fu_582_p2[0:0] === 1'b1) ? c_fu_588_p2 : select_ln79_fu_562_p3);

assign select_ln79_fu_562_p3 = ((icmp_ln54_fu_556_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_432);

assign sub_ln71_fu_738_p2 = (zext_ln71_1_fu_734_p1 - zext_ln71_fu_722_p1);

assign tmp_2_cast_fu_641_p3 = {{grp_fu_903_p3}, {4'd0}};

assign tmp_4_fu_726_p3 = {{select_ln63_1_fu_714_p3}, {2'd0}};

assign tmp_9_cast_fu_771_p3 = {{add_ln71_fu_765_p2}, {4'd0}};

assign tmp_fu_856_p4 = {{bitcast_ln78_fu_852_p1[30:23]}};

assign trunc_ln78_fu_866_p1 = bitcast_ln78_fu_852_p1[22:0];

assign wc_fu_812_p2 = (select_ln63_reg_1029 + 2'd1);

assign wr_fu_694_p2 = (ap_phi_mux_wr_0_phi_fu_480_p4 + 2'd1);

assign xor_ln79_fu_570_p2 = (icmp_ln54_fu_556_p2 ^ 1'd1);

assign zext_ln59_fu_616_p1 = select_ln79_2_fu_600_p3;

assign zext_ln61_fu_677_p1 = ch_0_reg_454;

assign zext_ln63_fu_744_p1 = select_ln63_1_fu_714_p3;

assign zext_ln66_fu_757_p1 = select_ln63_fu_706_p3;

assign zext_ln71_1_fu_734_p1 = tmp_4_fu_726_p3;

assign zext_ln71_3_fu_761_p1 = select_ln63_fu_706_p3;

assign zext_ln71_4_fu_784_p1 = add_ln71_2_fu_779_p2;

assign zext_ln71_6_fu_803_p1 = grp_fu_912_p3;

assign zext_ln71_fu_722_p1 = select_ln63_1_fu_714_p3;

assign zext_ln76_fu_829_p1 = ch2_0_reg_508;

assign zext_ln79_2_fu_648_p1 = select_ln79_2_reg_971;

assign zext_ln79_3_fu_651_p1 = select_ln79_2_reg_971;

assign zext_ln79_4_fu_660_p1 = add_ln79_1_fu_654_p2;

always @ (posedge ap_clk) begin
    zext_ln79_2_reg_996[8:5] <= 4'b0000;
end

endmodule //conv
