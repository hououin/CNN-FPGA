-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101001010111001000010101", 
    1 => "00111101111011110011010011010111", 
    2 => "00111110001100100111000000101010", 
    3 => "10111111010000110110010110001000", 
    4 => "10111101101101101010010100001101", 
    5 => "00111110010001100101101100100001", 
    6 => "00111101110110011011010111101001", 
    7 => "10111110100110100100100100111101", 
    8 => "10111110100000011010010110000111", 
    9 => "00111110001101110001011111011111", 
    10 => "10111110000001111101101111110101", 
    11 => "10111110010110110011110101001011", 
    12 => "00111100100011010111011110111000", 
    13 => "00111101011110110010001101010111", 
    14 => "10111110011100011010110100100001", 
    15 => "00111110011110101000000100010011", 
    16 => "00111110000110011101000100101101", 
    17 => "10111100110000100001000110001000", 
    18 => "10111110011000011001011010010110", 
    19 => "10111111011100111101001111110110", 
    20 => "10111110010010111001010111100110", 
    21 => "00111110011101100100000010100111", 
    22 => "00111101110011001101000011111111", 
    23 => "00111101101001000011011011111100", 
    24 => "00111100101110110010010101110000", 
    25 => "10111011101011110111100011111111", 
    26 => "00111110100000100011010111010110", 
    27 => "10111101100000111101010111111110", 
    28 => "10111101110101111111011010110010", 
    29 => "00111101010101110000001011100110", 
    30 => "00111110100000010010001111100110", 
    31 => "00111110100101010011011100011001", 
    32 => "10111101000011000111111100110101", 
    33 => "10111110101001010101111001101100", 
    34 => "10111110011100101110011110110100", 
    35 => "00111110010110010110101111111101", 
    36 => "10111110001101000110101010100001", 
    37 => "00111110000001011110010000011101", 
    38 => "00111101100011100010111110111110", 
    39 => "10111110000001100001001101001101", 
    40 => "10111110001000110111101101001010", 
    41 => "10111101101001011010011100001001", 
    42 => "00111110001000111010001000010110", 
    43 => "10111110101010110001110011001001", 
    44 => "10111101000110101101010000101100", 
    45 => "10111110100110001001110010000000", 
    46 => "00111111000000101100101011001101", 
    47 => "10111011011001111011110000111100", 
    48 => "00111110001100111010110100011001", 
    49 => "10111101110000100111100101010111", 
    50 => "00111100111100001011100011010000", 
    51 => "10111111010101110010111011110001", 
    52 => "00111110100000100101101101010011", 
    53 => "00111101000100101000001010000100", 
    54 => "10111110100101011011000101000010", 
    55 => "10111101111001001001110010110010", 
    56 => "10111110010010001101011001001101", 
    57 => "10111101011111111010001010101101", 
    58 => "10111110100001011001111111110101", 
    59 => "10111110101110100000101110000000", 
    60 => "10111110010010010000100101101100", 
    61 => "00111110011101111000010110110110", 
    62 => "10111101111000000010000110001110", 
    63 => "00111110010100101011100010000100", 
    64 => "00111110101001100000010001011100", 
    65 => "00111100100011011100000100011110", 
    66 => "10111110100001100110110011110100", 
    67 => "10111110010100111000110000010001", 
    68 => "00111110111110000110010010101010", 
    69 => "00111110010110100000100000111010", 
    70 => "00111110100100100001000111001011", 
    71 => "10111101110110011011101000011011", 
    72 => "10111101011101010011111001110000", 
    73 => "10111100111110011011001101001010", 
    74 => "10111101101000101110000110101100", 
    75 => "10111111010010100110100010100001", 
    76 => "10111110001000000111100001010011", 
    77 => "10111100101000010010100101000101", 
    78 => "10111110110101010001101101110001", 
    79 => "00111101111100001000110000111111", 
    80 => "00111100000111000001111110000110", 
    81 => "10111110000110100001011110110001", 
    82 => "10111110111110100111111001010010", 
    83 => "00111110000110101011110000001110", 
    84 => "00111110100111111110011000101110", 
    85 => "00111110110010011010111110011111", 
    86 => "10111110110101110000010011111111", 
    87 => "10111110100010010010100110001001", 
    88 => "10111100101110100101001110111001", 
    89 => "10111110100101111010011010111101", 
    90 => "10111100000110100111011111100110", 
    91 => "10111111000101010101001100110111", 
    92 => "10111110000000100110011110000100", 
    93 => "10111110100001000110001101101011", 
    94 => "10111101111010100101011010011011", 
    95 => "10111110010001011010101010110100", 
    96 => "10111110010110011100011000101010", 
    97 => "00111110101110100011110001000011", 
    98 => "00111101100011101011000111000100", 
    99 => "10111111001010000111101101000110", 
    100 => "10111110010001110111111001011111", 
    101 => "10111101011100110101000110011100", 
    102 => "00111101110110100011001100110111", 
    103 => "00111101101010010010101111000011", 
    104 => "10111110000001001000111100010001", 
    105 => "00111101101011101110001000000000", 
    106 => "10111101101110100101111010111011", 
    107 => "10111110000000000100000011000000", 
    108 => "10111110000110001100000101010101", 
    109 => "00111110001000110000011110101111", 
    110 => "10111101001110000001101101100101", 
    111 => "10111110101000010101110101001111", 
    112 => "00111101111101101110011010010111", 
    113 => "00111110000011001101101001101110", 
    114 => "10111101111011010111001001111010", 
    115 => "10111110100110101000001011000111", 
    116 => "00111101100010010101101101111001", 
    117 => "10111110111000101011110100111100", 
    118 => "00111101011111010111001010111101", 
    119 => "00111101111011000010010110001101", 
    120 => "10111110010100001001011001111000", 
    121 => "00111110001101010101100011101010", 
    122 => "10111101111111100011110000010000", 
    123 => "10111110111001101100110010000001", 
    124 => "10111110011111101110100101010111", 
    125 => "10111101010111100001001110110010", 
    126 => "10111010100000000111001101011000", 
    127 => "10111111000101010110010100111101", 
    128 => "00111110101110001001110111110001", 
    129 => "00111110101111101100111110000101", 
    130 => "10111110110011111101100110011001", 
    131 => "10111110100100101011111000100111", 
    132 => "00111110000111010111110001110000", 
    133 => "10111110111110000110110110010100", 
    134 => "00111110010100100011110000000000", 
    135 => "00111110111101101111100110011000", 
    136 => "10111110100001010110100010100101", 
    137 => "00111011100100100001010001101010", 
    138 => "10111110100011000010000001110001", 
    139 => "10111110101100011101011010001100", 
    140 => "10111110010011110000000010101100", 
    141 => "10111110000000010011100001111010", 
    142 => "00111110000101100101010110011111", 
    143 => "10111101101100111111110010000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_1 is
    component conv_conv_weights_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_1_rom_U :  component conv_conv_weights_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


