-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_4_ce0 : OUT STD_LOGIC;
    input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_5_ce0 : OUT STD_LOGIC;
    input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.808000,HLS_SYN_LAT=197473,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=7,HLS_SYN_FF=1421,HLS_SYN_LUT=1822,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_3_ce0 : STD_LOGIC;
    signal conv_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_4_ce0 : STD_LOGIC;
    signal conv_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_5_ce0 : STD_LOGIC;
    signal conv_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_465 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_476 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_0_reg_487 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sumf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln63_reg_1020 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln51_fu_550_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_reg_960 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln54_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_965 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_2_fu_600_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln79_2_reg_971 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln79_3_fu_608_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_3_reg_978 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_1_fu_627_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_1_reg_990 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln79_2_fu_648_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln79_2_reg_996 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out_addr_reg_1001 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_sum_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ch_fu_671_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln63_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln63_reg_1020_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln63_1_fu_688_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln63_1_reg_1024 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln63_fu_706_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln63_reg_1029 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln63_1_fu_714_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln63_1_reg_1034 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_weights_1_load_reg_1109 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_load_reg_1114 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_load_reg_1119 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_load_reg_1124 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_load_reg_1129 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_load_reg_1134 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_load_reg_1139 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_4_load_reg_1144 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_load_reg_1149 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_5_load_reg_1154 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_526_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1159 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1164 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state8_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal w_sumf_load_2_reg_1169 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state9_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal w_sumf_load_3_reg_1179 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_3_reg_1184 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state10_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal w_sumf_load_4_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_fu_812_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1194 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_4_reg_1199 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal w_sumf_load_5_reg_1204 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_5_reg_1209 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sumf_load_6_reg_1214 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_1_fu_823_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_1_reg_1222 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln75_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_834_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1232 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_fu_845_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln54_reg_1237 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_519_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal w_sumf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sumf_ce0 : STD_LOGIC;
    signal w_sumf_we0 : STD_LOGIC;
    signal w_sumf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sumf_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sumf_ce1 : STD_LOGIC;
    signal indvar_flatten21_reg_397 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal r_0_reg_408 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_420 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_432 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_443 : STD_LOGIC_VECTOR (4 downto 0);
    signal ch_0_reg_454 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_469_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_480_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_491_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_498 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ch2_0_reg_508 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln59_fu_616_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_4_fu_660_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_4_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_6_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_829_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_519_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_519_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_526_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln57_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln79_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_fu_562_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln79_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_588_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_fu_621_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_903_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_3_fu_651_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_641_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln79_1_fu_654_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln66_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_694_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_726_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln71_1_fu_734_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln71_fu_722_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln63_fu_744_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln63_fu_748_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln71_fu_738_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln71_3_fu_761_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln71_fu_765_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_771_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln71_2_fu_779_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln66_fu_757_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_1_fu_794_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_912_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln54_1_fu_839_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln78_fu_852_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_856_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln78_fu_866_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln78_1_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln78_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_903_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_903_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_912_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_912_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_912_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_903_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_903_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_912_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_912_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_w_sumf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_conv_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_conv_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_conv_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_weights_3_U : component conv_conv_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_address0,
        ce0 => conv_weights_3_ce0,
        q0 => conv_weights_3_q0);

    conv_weights_4_U : component conv_conv_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_address0,
        ce0 => conv_weights_4_ce0,
        q0 => conv_weights_4_q0);

    conv_weights_5_U : component conv_conv_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_address0,
        ce0 => conv_weights_5_ce0,
        q0 => conv_weights_5_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    w_sumf_U : component conv_w_sumf
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_sumf_address0,
        ce0 => w_sumf_ce0,
        we0 => w_sumf_we0,
        d0 => w_sumf_d0,
        address1 => w_sumf_address1,
        ce1 => w_sumf_ce1,
        q1 => w_sumf_q1);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_519_p0,
        din1 => grp_fu_519_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_519_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_526_p0,
        din1 => grp_fu_526_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_526_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_sum_0_reg_498,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_532_p2);

    conv_mac_muladd_4eOg_U4 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_903_p0,
        din1 => grp_fu_903_p1,
        din2 => grp_fu_903_p2,
        dout => grp_fu_903_p3);

    conv_mac_muladd_4eOg_U5 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_912_p0,
        din1 => grp_fu_912_p1,
        din2 => grp_fu_912_p2,
        dout => grp_fu_912_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln60_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln60_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_432_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                c_0_reg_432 <= select_ln79_3_reg_978;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_432 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch2_0_reg_508_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ch2_0_reg_508 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                ch2_0_reg_508 <= ch_1_reg_1222;
            end if; 
        end if;
    end process;

    ch_0_reg_454_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_665_p2 = ap_const_lv1_0))) then 
                ch_0_reg_454 <= ch_fu_671_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ch_0_reg_454 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_443_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                f_0_reg_443 <= f_reg_1232;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_443 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten21_reg_397 <= add_ln51_reg_960;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_397 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten7_reg_420 <= select_ln54_reg_1237;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_420 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_465_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                indvar_flatten_reg_465 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then 
                indvar_flatten_reg_465 <= add_ln63_1_reg_1024;
            end if; 
        end if;
    end process;

    r_0_reg_408_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                r_0_reg_408 <= select_ln79_1_reg_990;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_408 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                w_sum_0_reg_498 <= w_sum_reg_1006;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                w_sum_0_reg_498 <= grp_fu_519_p2;
            end if; 
        end if;
    end process;

    wc_0_reg_487_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wc_0_reg_487 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then 
                wc_0_reg_487 <= wc_reg_1194;
            end if; 
        end if;
    end process;

    wr_0_reg_476_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_476 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then 
                wr_0_reg_476 <= select_ln63_1_reg_1034;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln51_reg_960 <= add_ln51_fu_550_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln63_1_reg_1024 <= add_ln63_1_fu_688_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                ch_1_reg_1222 <= ch_1_fu_823_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv_out_addr_reg_1001 <= zext_ln79_4_fu_660_p1(11 - 1 downto 0);
                select_ln79_1_reg_990 <= select_ln79_1_fu_627_p3;
                w_sum_reg_1006 <= conv_bias_q0;
                    zext_ln79_2_reg_996(4 downto 0) <= zext_ln79_2_fu_648_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then
                conv_weights_1_load_reg_1109 <= conv_weights_1_q0;
                conv_weights_2_load_reg_1119 <= conv_weights_2_q0;
                conv_weights_3_load_reg_1129 <= conv_weights_3_q0;
                conv_weights_4_load_reg_1139 <= conv_weights_4_q0;
                conv_weights_5_load_reg_1149 <= conv_weights_5_q0;
                input_1_load_reg_1114 <= input_1_q0;
                input_2_load_reg_1124 <= input_2_q0;
                input_3_load_reg_1134 <= input_3_q0;
                input_4_load_reg_1144 <= input_4_q0;
                input_5_load_reg_1154 <= input_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_817_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                f_reg_1232 <= f_fu_834_p2;
                select_ln54_reg_1237 <= select_ln54_fu_845_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln51_fu_544_p2 = ap_const_lv1_0))) then
                icmp_ln54_reg_965 <= icmp_ln54_fu_556_p2;
                select_ln79_2_reg_971 <= select_ln79_2_fu_600_p3;
                select_ln79_3_reg_978 <= select_ln79_3_fu_608_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln63_reg_1020 <= icmp_ln63_fu_682_p2;
                icmp_ln63_reg_1020_pp0_iter1_reg <= icmp_ln63_reg_1020;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_1020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_538 <= w_sumf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_fu_682_p2 = ap_const_lv1_0))) then
                select_ln63_1_reg_1034 <= select_ln63_1_fu_714_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_fu_682_p2 = ap_const_lv1_0))) then
                select_ln63_reg_1029 <= select_ln63_fu_706_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then
                tmp_2_1_reg_1164 <= grp_fu_526_p2;
                w_sumf_load_2_reg_1169 <= w_sumf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then
                tmp_2_2_reg_1174 <= grp_fu_526_p2;
                w_sumf_load_3_reg_1179 <= w_sumf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then
                tmp_2_3_reg_1184 <= grp_fu_526_p2;
                w_sumf_load_4_reg_1189 <= w_sumf_q1;
                wc_reg_1194 <= wc_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then
                tmp_2_4_reg_1199 <= grp_fu_526_p2;
                w_sumf_load_5_reg_1204 <= w_sumf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_1020_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_2_5_reg_1209 <= grp_fu_526_p2;
                w_sumf_load_6_reg_1214 <= w_sumf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_1020 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_s_reg_1159 <= grp_fu_526_p2;
            end if;
        end if;
    end process;
    zext_ln79_2_reg_996(8 downto 5) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, icmp_ln51_fu_544_p2, icmp_ln60_fu_665_p2, ap_CS_fsm_state4, icmp_ln63_fu_682_p2, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_CS_fsm_state18, icmp_ln75_fu_817_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln51_fu_544_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln60_fu_665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln63_fu_682_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln63_fu_682_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((icmp_ln75_fu_817_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln51_fu_550_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_397) + unsigned(ap_const_lv11_1));
    add_ln54_1_fu_839_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten7_reg_420));
    add_ln63_1_fu_688_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_469_p4) + unsigned(ap_const_lv4_1));
    add_ln63_fu_748_p2 <= std_logic_vector(unsigned(zext_ln63_fu_744_p1) + unsigned(select_ln79_1_reg_990));
    add_ln71_1_fu_794_p2 <= std_logic_vector(unsigned(zext_ln66_fu_757_p1) + unsigned(select_ln79_3_reg_978));
    add_ln71_2_fu_779_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_771_p3) + unsigned(zext_ln79_2_reg_996));
    add_ln71_fu_765_p2 <= std_logic_vector(unsigned(sub_ln71_fu_738_p2) + unsigned(zext_ln71_3_fu_761_p1));
    add_ln79_1_fu_654_p2 <= std_logic_vector(unsigned(zext_ln79_3_fu_651_p1) + unsigned(tmp_2_cast_fu_641_p3));
    and_ln78_fu_888_p2 <= (or_ln78_fu_882_p2 and grp_fu_532_p2);
    and_ln79_fu_582_p2 <= (xor_ln79_fu_570_p2 and icmp_ln57_fu_576_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state17 <= ap_CS_fsm(10);
    ap_CS_fsm_state18 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(15);
    ap_CS_fsm_state23 <= ap_CS_fsm(16);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln63_fu_682_p2)
    begin
        if ((icmp_ln63_fu_682_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln51_fu_544_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln51_fu_544_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_469_p4_assign_proc : process(indvar_flatten_reg_465, icmp_ln63_reg_1020, ap_CS_fsm_pp0_stage0, add_ln63_1_reg_1024, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_469_p4 <= add_ln63_1_reg_1024;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_469_p4 <= indvar_flatten_reg_465;
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_491_p4_assign_proc : process(wc_0_reg_487, icmp_ln63_reg_1020, ap_CS_fsm_pp0_stage0, wc_reg_1194, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_wc_0_phi_fu_491_p4 <= wc_reg_1194;
        else 
            ap_phi_mux_wc_0_phi_fu_491_p4 <= wc_0_reg_487;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_480_p4_assign_proc : process(wr_0_reg_476, icmp_ln63_reg_1020, ap_CS_fsm_pp0_stage0, select_ln63_1_reg_1034, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_480_p4 <= select_ln63_1_reg_1034;
        else 
            ap_phi_mux_wr_0_phi_fu_480_p4 <= wr_0_reg_476;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln51_fu_544_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln51_fu_544_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln78_fu_852_p1 <= w_sum_0_reg_498;
    c_fu_588_p2 <= std_logic_vector(unsigned(select_ln79_fu_562_p3) + unsigned(ap_const_lv4_1));
    ch_1_fu_823_p2 <= std_logic_vector(unsigned(ch2_0_reg_508) + unsigned(ap_const_lv3_1));
    ch_fu_671_p2 <= std_logic_vector(unsigned(ch_0_reg_454) + unsigned(ap_const_lv3_1));
    conv_bias_address0 <= zext_ln59_fu_616_p1(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1001;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_0_reg_498 when (and_ln78_fu_888_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln71_4_fu_784_p1(8 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln71_4_fu_784_p1(8 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln71_4_fu_784_p1(8 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_address0 <= zext_ln71_4_fu_784_p1(8 - 1 downto 0);

    conv_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_address0 <= zext_ln71_4_fu_784_p1(8 - 1 downto 0);

    conv_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_address0 <= zext_ln71_4_fu_784_p1(8 - 1 downto 0);

    conv_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_834_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln79_2_reg_971));

    grp_fu_519_p0_assign_proc : process(reg_538, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state19, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, w_sumf_load_2_reg_1169, ap_CS_fsm_pp0_stage4, w_sumf_load_3_reg_1179, ap_CS_fsm_pp0_stage5, w_sumf_load_4_reg_1189, ap_enable_reg_pp0_iter1, w_sumf_load_5_reg_1204, w_sumf_load_6_reg_1214, ap_block_pp0_stage0, w_sum_0_reg_498, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_519_p0 <= w_sum_0_reg_498;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_519_p0 <= w_sumf_load_6_reg_1214;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_519_p0 <= w_sumf_load_5_reg_1204;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_519_p0 <= w_sumf_load_4_reg_1189;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_519_p0 <= w_sumf_load_3_reg_1179;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_519_p0 <= w_sumf_load_2_reg_1169;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_519_p0 <= reg_538;
        else 
            grp_fu_519_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_519_p1_assign_proc : process(w_sumf_q1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state19, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_s_reg_1159, tmp_2_1_reg_1164, ap_CS_fsm_pp0_stage3, tmp_2_2_reg_1174, ap_CS_fsm_pp0_stage4, tmp_2_3_reg_1184, ap_CS_fsm_pp0_stage5, tmp_2_4_reg_1199, ap_enable_reg_pp0_iter1, tmp_2_5_reg_1209, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_519_p1 <= w_sumf_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_519_p1 <= tmp_2_5_reg_1209;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_519_p1 <= tmp_2_4_reg_1199;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_519_p1 <= tmp_2_3_reg_1184;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_519_p1 <= tmp_2_2_reg_1174;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_519_p1 <= tmp_2_1_reg_1164;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_519_p1 <= tmp_s_reg_1159;
        else 
            grp_fu_519_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_526_p0_assign_proc : process(conv_weights_0_q0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, conv_weights_1_load_reg_1109, conv_weights_2_load_reg_1119, conv_weights_3_load_reg_1129, conv_weights_4_load_reg_1139, conv_weights_5_load_reg_1149, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_526_p0 <= conv_weights_5_load_reg_1149;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p0 <= conv_weights_4_load_reg_1139;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p0 <= conv_weights_3_load_reg_1129;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p0 <= conv_weights_2_load_reg_1119;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_526_p0 <= conv_weights_1_load_reg_1109;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p0 <= conv_weights_0_q0;
        else 
            grp_fu_526_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_526_p1_assign_proc : process(input_0_q0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, input_1_load_reg_1114, input_2_load_reg_1124, input_3_load_reg_1134, input_4_load_reg_1144, input_5_load_reg_1154, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_526_p1 <= input_5_load_reg_1154;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p1 <= input_4_load_reg_1144;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p1 <= input_3_load_reg_1134;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p1 <= input_2_load_reg_1124;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_526_p1 <= input_1_load_reg_1114;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_526_p1 <= input_0_q0;
        else 
            grp_fu_526_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_903_p0 <= grp_fu_903_p00(4 - 1 downto 0);
    grp_fu_903_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_1_fu_627_p3),8));
    grp_fu_903_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_903_p2 <= grp_fu_903_p20(4 - 1 downto 0);
    grp_fu_903_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_3_reg_978),8));
    grp_fu_912_p0 <= grp_fu_912_p00(4 - 1 downto 0);
    grp_fu_912_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln63_fu_748_p2),8));
    grp_fu_912_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_912_p2 <= grp_fu_912_p20(4 - 1 downto 0);
    grp_fu_912_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_1_fu_794_p2),8));
    icmp_ln51_fu_544_p2 <= "1" when (indvar_flatten21_reg_397 = ap_const_lv11_790) else "0";
    icmp_ln54_fu_556_p2 <= "1" when (indvar_flatten7_reg_420 = ap_const_lv9_B0) else "0";
    icmp_ln57_fu_576_p2 <= "1" when (f_0_reg_443 = ap_const_lv5_10) else "0";
    icmp_ln60_fu_665_p2 <= "1" when (ch_0_reg_454 = ap_const_lv3_6) else "0";
    icmp_ln63_fu_682_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_469_p4 = ap_const_lv4_9) else "0";
    icmp_ln66_fu_700_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_491_p4 = ap_const_lv2_3) else "0";
    icmp_ln75_fu_817_p2 <= "1" when (ch2_0_reg_508 = ap_const_lv3_6) else "0";
    icmp_ln78_1_fu_876_p2 <= "1" when (trunc_ln78_fu_866_p1 = ap_const_lv23_0) else "0";
    icmp_ln78_fu_870_p2 <= "0" when (tmp_fu_856_p4 = ap_const_lv8_FF) else "1";
    input_0_address0 <= zext_ln71_6_fu_803_p1(8 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_address0 <= zext_ln71_6_fu_803_p1(8 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_address0 <= zext_ln71_6_fu_803_p1(8 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_address0 <= zext_ln71_6_fu_803_p1(8 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_address0 <= zext_ln71_6_fu_803_p1(8 - 1 downto 0);

    input_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_4_ce0 <= ap_const_logic_1;
        else 
            input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_address0 <= zext_ln71_6_fu_803_p1(8 - 1 downto 0);

    input_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_5_ce0 <= ap_const_logic_1;
        else 
            input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln78_fu_882_p2 <= (icmp_ln78_fu_870_p2 or icmp_ln78_1_fu_876_p2);
    or_ln79_fu_594_p2 <= (icmp_ln54_fu_556_p2 or and_ln79_fu_582_p2);
    r_fu_621_p2 <= std_logic_vector(unsigned(r_0_reg_408) + unsigned(ap_const_lv4_1));
    select_ln54_fu_845_p3 <= 
        ap_const_lv9_1 when (icmp_ln54_reg_965(0) = '1') else 
        add_ln54_1_fu_839_p2;
    select_ln63_1_fu_714_p3 <= 
        wr_fu_694_p2 when (icmp_ln66_fu_700_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_480_p4;
    select_ln63_fu_706_p3 <= 
        ap_const_lv2_0 when (icmp_ln66_fu_700_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_491_p4;
    select_ln79_1_fu_627_p3 <= 
        r_fu_621_p2 when (icmp_ln54_reg_965(0) = '1') else 
        r_0_reg_408;
    select_ln79_2_fu_600_p3 <= 
        ap_const_lv5_0 when (or_ln79_fu_594_p2(0) = '1') else 
        f_0_reg_443;
    select_ln79_3_fu_608_p3 <= 
        c_fu_588_p2 when (and_ln79_fu_582_p2(0) = '1') else 
        select_ln79_fu_562_p3;
    select_ln79_fu_562_p3 <= 
        ap_const_lv4_0 when (icmp_ln54_fu_556_p2(0) = '1') else 
        c_0_reg_432;
    sub_ln71_fu_738_p2 <= std_logic_vector(unsigned(zext_ln71_1_fu_734_p1) - unsigned(zext_ln71_fu_722_p1));
    tmp_2_cast_fu_641_p3 <= (grp_fu_903_p3 & ap_const_lv4_0);
    tmp_4_fu_726_p3 <= (select_ln63_1_fu_714_p3 & ap_const_lv2_0);
    tmp_9_cast_fu_771_p3 <= (add_ln71_fu_765_p2 & ap_const_lv4_0);
    tmp_fu_856_p4 <= bitcast_ln78_fu_852_p1(30 downto 23);
    trunc_ln78_fu_866_p1 <= bitcast_ln78_fu_852_p1(23 - 1 downto 0);

    w_sumf_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, zext_ln61_fu_677_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            w_sumf_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            w_sumf_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            w_sumf_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            w_sumf_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_sumf_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_sumf_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_sumf_address0 <= zext_ln61_fu_677_p1(3 - 1 downto 0);
        else 
            w_sumf_address0 <= "XXX";
        end if; 
    end process;


    w_sumf_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, ap_CS_fsm_state18, ap_block_pp0_stage0, zext_ln76_fu_829_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            w_sumf_address1 <= zext_ln76_fu_829_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_sumf_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_sumf_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_sumf_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_sumf_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            w_sumf_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_sumf_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            w_sumf_address1 <= "XXX";
        end if; 
    end process;


    w_sumf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            w_sumf_ce0 <= ap_const_logic_1;
        else 
            w_sumf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_sumf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            w_sumf_ce1 <= ap_const_logic_1;
        else 
            w_sumf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_sumf_d0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_enable_reg_pp0_iter1, grp_fu_519_p2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            w_sumf_d0 <= grp_fu_519_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_sumf_d0 <= ap_const_lv32_0;
        else 
            w_sumf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_sumf_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln63_reg_1020, icmp_ln60_fu_665_p2, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln63_reg_1020_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (icmp_ln63_reg_1020_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln63_reg_1020_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln63_reg_1020_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln63_reg_1020_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln60_fu_665_p2 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln63_reg_1020 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln63_reg_1020_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            w_sumf_we0 <= ap_const_logic_1;
        else 
            w_sumf_we0 <= ap_const_logic_0;
        end if; 
    end process;

    wc_fu_812_p2 <= std_logic_vector(unsigned(select_ln63_reg_1029) + unsigned(ap_const_lv2_1));
    wr_fu_694_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_480_p4) + unsigned(ap_const_lv2_1));
    xor_ln79_fu_570_p2 <= (icmp_ln54_fu_556_p2 xor ap_const_lv1_1);
    zext_ln59_fu_616_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_fu_600_p3),64));
    zext_ln61_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_454),64));
    zext_ln63_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_1_fu_714_p3),4));
    zext_ln66_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_fu_706_p3),4));
    zext_ln71_1_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_726_p3),5));
    zext_ln71_3_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_fu_706_p3),5));
    zext_ln71_4_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_2_fu_779_p2),64));
    zext_ln71_6_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_912_p3),64));
    zext_ln71_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln63_1_fu_714_p3),5));
    zext_ln76_fu_829_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch2_0_reg_508),64));
    zext_ln79_2_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_reg_971),9));
    zext_ln79_3_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_2_reg_971),12));
    zext_ln79_4_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_fu_654_p2),64));
end behav;
