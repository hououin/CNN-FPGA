-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011100010001101101100001", 
    1 => "00111101000010010111001000000100", 
    2 => "10111101010111111110100001101000", 
    3 => "10111110101001011111000000101100", 
    4 => "10111100100000010011010001001000", 
    5 => "10111101101101000011000101111011", 
    6 => "10111110001110100001101001010000", 
    7 => "00111101110000110111111001101111", 
    8 => "10111101111011010101101011100010", 
    9 => "10111101100011001010111011101010", 
    10 => "00111110100001000101001011100111", 
    11 => "10111100001011110100111100001110", 
    12 => "00111101001001111100110100000011", 
    13 => "10111101001011111000100111000110", 
    14 => "00111101110000101011111100010010", 
    15 => "10111110000000110001000001010110", 
    16 => "00111101000001100111101011011001", 
    17 => "00111100101100100000010100110110", 
    18 => "00111110000011101011000110000001", 
    19 => "00111101100100010001000001011110", 
    20 => "10111110011010010111101100110001", 
    21 => "00111110011110101001110100011111", 
    22 => "10111110011001000101010110101000", 
    23 => "10111101100011110101101000010000", 
    24 => "10111110001100110110000010001101", 
    25 => "00111101100000001100101101101100", 
    26 => "00111110000110111000001101001001", 
    27 => "00111100100001111110100111011001", 
    28 => "10111101101110101011100001100011", 
    29 => "00111101010001111100101001100100", 
    30 => "00111110100000110000010100010000", 
    31 => "00111101010001100011010010011000", 
    32 => "10111100010111101010100010010111", 
    33 => "00111110001011110110001000110000", 
    34 => "00111110100001011000111000000000", 
    35 => "00111110011111100111010010110000", 
    36 => "10111110001001001110111111001100", 
    37 => "00111110100110011100011110111101", 
    38 => "10111110101011000000101010001101", 
    39 => "10111110000100001001110011000011", 
    40 => "10111110000100110101000001001100", 
    41 => "10111110010100011001101111010100", 
    42 => "10111110000111101010010001100110", 
    43 => "10111100110111100001110000010101", 
    44 => "10111110100111101110101010100111", 
    45 => "00111110011101110100011101010010", 
    46 => "10111100110101111000110001000011", 
    47 => "10111011101110100111101110010001", 
    48 => "10111110001001001101011100101000", 
    49 => "10111110011101111011001010001001", 
    50 => "10111101111000010000101011011101", 
    51 => "00111101100110000111111110001000", 
    52 => "10111101100010001111100101101110", 
    53 => "10111110101011000000111111101101", 
    54 => "10111110011010011001100001001010", 
    55 => "00111100101001000011110111001101", 
    56 => "00111110101101010010101110110010", 
    57 => "00111100100000101100001010111101", 
    58 => "00111110011000110001101010001111", 
    59 => "10111101011100011111101111000110", 
    60 => "10111101100110011010101101101101", 
    61 => "10111110100100000100100110001000", 
    62 => "10111101100001011010101000101110", 
    63 => "10111101000100101101000100101000", 
    64 => "10111110001011100010000011001101", 
    65 => "00111101100100001000101110111001", 
    66 => "10111101101111100000111110000000", 
    67 => "00111101000101000101101101101100", 
    68 => "10111101001110100011111011000000", 
    69 => "10111110110100010110111110000111", 
    70 => "00111010001111111010000010010100", 
    71 => "10111101010101111111100001000100", 
    72 => "10111110000110101011100001100011", 
    73 => "10111110011110011100101101101000", 
    74 => "10111011110101001100101110011111", 
    75 => "00111101111001100111001001110101", 
    76 => "10111101110000101110000010100000", 
    77 => "10111011000111111100011011011010", 
    78 => "10111100010101111110110010111011", 
    79 => "10111110100101001011000000111010", 
    80 => "10111101110011100101001101100101", 
    81 => "00111101100011000100101011000111", 
    82 => "00111101000001010101111110111011", 
    83 => "00111011011110010100110010001000", 
    84 => "00111101100111101111110100000000", 
    85 => "10111110100001011010010101010101", 
    86 => "00111110011010011111011000100011", 
    87 => "00111110001011110010110001110011", 
    88 => "10111110100011010110011000100111", 
    89 => "00111110000011110000001011000101", 
    90 => "10111110010101000100010110101010", 
    91 => "00111110011111010100100110010101", 
    92 => "10111101101011011110010000111111", 
    93 => "00111110100000100111110001011011", 
    94 => "10111101101001100011101111101111", 
    95 => "10111110101100011111100101001000", 
    96 => "00111100110000100111100001001011", 
    97 => "00111110100011011110000000101111", 
    98 => "10111110110011010011101011100111", 
    99 => "00111101011010111010111100010000", 
    100 => "00111101000100111101010100110100", 
    101 => "10111101101011011010010011001111", 
    102 => "00111110010111100011110001010011", 
    103 => "10111101001010011000101110110101", 
    104 => "00111110010010101011111111111101", 
    105 => "00111101001110010001000011000011", 
    106 => "10111101001011100101011010001010", 
    107 => "00111101111100010011110111111011", 
    108 => "10111110100010001010011000010001", 
    109 => "10111101111100011000111010111001", 
    110 => "10111101000011011110011011011110", 
    111 => "00111110100001011111011100011111", 
    112 => "00111100010000110000110100110000", 
    113 => "00111110010011011110100101111101", 
    114 => "00111101001110011111101110100100", 
    115 => "10111100111001100100111101010101", 
    116 => "10111110010000101101110011110100", 
    117 => "10111101001110000011000101101010", 
    118 => "00111101011111011000001001110111", 
    119 => "00111101100111011011010101010010", 
    120 => "10111101101010000101000110101000", 
    121 => "00111101000011010001001100001110", 
    122 => "10111110011010111000111100010101", 
    123 => "10111100101111100011000110010100", 
    124 => "10111100011011111001110110110010", 
    125 => "00111110000101100100011001101011", 
    126 => "00111101100110111101100000111000", 
    127 => "00111101001011000100000111011101", 
    128 => "10111101101001111111001000111101", 
    129 => "00111101101101010000010000111110", 
    130 => "10111101011100110111110010011010", 
    131 => "10111110010100010010110100110100", 
    132 => "10111110010111110110101010010100", 
    133 => "10111110011110001101100011101101", 
    134 => "00111110100001001100100110000110", 
    135 => "00111101101000010000000111110011", 
    136 => "10111110011001111001111100100011", 
    137 => "00111101100110110100100110011101", 
    138 => "00111100110101001100011101101101", 
    139 => "00111110011101010011010110000111", 
    140 => "00111100001111111101011100011011", 
    141 => "00111010111100010110111101000100", 
    142 => "00111110011010100010100101000001", 
    143 => "10111110000000000010011000000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_2 is
    component conv_conv_weights_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_2_rom_U :  component conv_conv_weights_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


