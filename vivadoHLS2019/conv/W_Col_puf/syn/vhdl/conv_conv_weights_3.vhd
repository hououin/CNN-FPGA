-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_3_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001000000100111100101", 
    1 => "00111101111110001110110100011100", 
    2 => "10111100100000000001111101110101", 
    3 => "10111110110100100100110001000000", 
    4 => "00111101100000001100000011110000", 
    5 => "10111110101001111100101011001001", 
    6 => "10111110010101011000000000111101", 
    7 => "00111110000101001110110010100111", 
    8 => "00111110011000110011000111100100", 
    9 => "00111101110010000110111110001011", 
    10 => "10111100101100111000001011100100", 
    11 => "00111101110000101110100110001010", 
    12 => "00111110101010111101001101011111", 
    13 => "00111101000000000101101000101101", 
    14 => "10111101101111010110111110010111", 
    15 => "10111110111110000011100011000001", 
    16 => "00111101011101110000010110000101", 
    17 => "00111110011000110110011100011011", 
    18 => "00111110000000101110100101000111", 
    19 => "10111110010100010000101100100000", 
    20 => "00111110000000111010101101000011", 
    21 => "10111110101011110010000101001111", 
    22 => "10111101100010001111100111110100", 
    23 => "00111011100010100010111011000011", 
    24 => "10111101011110001010010111001110", 
    25 => "10111110001000101110110010101111", 
    26 => "00111110000100100011111000011000", 
    27 => "00111110000011100111101110000001", 
    28 => "00111110001010100101111101000010", 
    29 => "10111110100111110001111101011000", 
    30 => "10111110001101011001001001010011", 
    31 => "10111110000111101101010011100101", 
    32 => "00111110010001001100010001001000", 
    33 => "00111101101001110100001000010100", 
    34 => "00111110101000000100011000100000", 
    35 => "10111101110111100111100001011011", 
    36 => "00111110000111011010001100111100", 
    37 => "10111110001010010000100011100110", 
    38 => "10111110010010110001001101011001", 
    39 => "00111110000000110101101010000110", 
    40 => "10111110011111111010100111000001", 
    41 => "00111110010111110000001100001000", 
    42 => "00111101110100110101010011000001", 
    43 => "00111101011001001100100000110110", 
    44 => "00111100001100100111100010001110", 
    45 => "10111110100001000101110101100100", 
    46 => "10111101111110101101111110110101", 
    47 => "00111101001101001111010100001010", 
    48 => "00111110010100011110111110110111", 
    49 => "10111110011010011010001111010011", 
    50 => "00111101001100000100101111000010", 
    51 => "10111111000001100101100000111111", 
    52 => "10111100100100011001000001001011", 
    53 => "10111110010000011110011010001010", 
    54 => "10111110100000011001100000101001", 
    55 => "00111101110111000011011100011110", 
    56 => "00111110110000100001000010011101", 
    57 => "00111110101110110100101101110011", 
    58 => "00111101001110110010110111010011", 
    59 => "10111101010000001000101101110110", 
    60 => "00111101100110111100010001001100", 
    61 => "00111110011010001111101111001010", 
    62 => "00111100111000001001000100111010", 
    63 => "00111110100010011111110010001111", 
    64 => "10111110101010110000010111111011", 
    65 => "10111110101010000000011101010111", 
    66 => "10111110000111000001000010010101", 
    67 => "00111101010100100101000000101111", 
    68 => "10111110010001111110010010011011", 
    69 => "10111110011001011010111011100110", 
    70 => "00111100010100000010010001110000", 
    71 => "00111101100110100111001010101000", 
    72 => "00111101111011011000010011010011", 
    73 => "00111101000110011011101100101000", 
    74 => "00111110100110100111101011101010", 
    75 => "10111110000011110001111111011110", 
    76 => "00111110100000111100111011001000", 
    77 => "10111110111010010100100111101001", 
    78 => "00111110001110101011010010110111", 
    79 => "10111101011100010000110110111111", 
    80 => "00111110011000011100110111100110", 
    81 => "10111110001100110001110110110100", 
    82 => "00111110100111110001110111000101", 
    83 => "00111110011101101100001100110011", 
    84 => "10111110100011001011000110101011", 
    85 => "10111111001000110010010010000101", 
    86 => "00111110000100000100000100000011", 
    87 => "00111101101010111010000001100010", 
    88 => "10111011110101111101011111000011", 
    89 => "00111101111011001000111101110101", 
    90 => "10111110100100111001110010110111", 
    91 => "10111110010011001110000010111001", 
    92 => "00111110011011100011010110000011", 
    93 => "10111110000100111010110001001111", 
    94 => "10111011101000010101000100011110", 
    95 => "00111110011011011011011000011100", 
    96 => "00111101110100011110101001111001", 
    97 => "10111101100111111111001101101011", 
    98 => "10111111000100110110010110111010", 
    99 => "00111101001000101110001111000101", 
    100 => "00111101011011011001110111111110", 
    101 => "10111011011001001101101000001010", 
    102 => "00111101110010100011010110010011", 
    103 => "10111110010001011110101100110001", 
    104 => "00111110101000011100011101111010", 
    105 => "00111110100100000100110011001111", 
    106 => "00111101110110001111111001101001", 
    107 => "00111110000010110011011010111101", 
    108 => "00111110000000010110100011111001", 
    109 => "10111011011011110001001101001001", 
    110 => "10111110101110000110100111000110", 
    111 => "00111110010001011111011011111101", 
    112 => "00111110001100001000001000000110", 
    113 => "10111110000111011110111000110101", 
    114 => "00111011111111010101010001010100", 
    115 => "00111110000110000110101100010110", 
    116 => "10111101100011000011110010011111", 
    117 => "00111110001101011010001000001110", 
    118 => "10111100101000101011011110111011", 
    119 => "10111110000110100000101100011100", 
    120 => "10111110011011110110000110101010", 
    121 => "00111110011000011110001001011000", 
    122 => "00111101110001011110010111110011", 
    123 => "10111101100000110001011100100111", 
    124 => "00111100101111111101010100000010", 
    125 => "00111100111101110111110100001111", 
    126 => "00111101100111011011101000001010", 
    127 => "00111110100000011100110111000100", 
    128 => "10111101111001100010000100110010", 
    129 => "10111110011110101010011001001100", 
    130 => "00111101101000111100101001110101", 
    131 => "00111101011111110101010100010101", 
    132 => "10111110010100000001101101000011", 
    133 => "00111110001111101010110101001111", 
    134 => "10111100011000011110001011011111", 
    135 => "10111110101111001110101101111001", 
    136 => "00111100110000010101111101000110", 
    137 => "10111100110100000111011000111010", 
    138 => "00111101100111010010111110100001", 
    139 => "10111101100010000011110100110110", 
    140 => "00111101000111111101110011011111", 
    141 => "00111101011111110010000110110100", 
    142 => "00111110110100010001110101111010", 
    143 => "00111110001100000000011111011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_3 is
    component conv_conv_weights_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_3_rom_U :  component conv_conv_weights_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


