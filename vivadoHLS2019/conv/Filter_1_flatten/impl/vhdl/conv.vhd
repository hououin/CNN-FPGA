-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=849905,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=715,HLS_SYN_LUT=1611,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (14 downto 0) := "000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (14 downto 0) := "000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (14 downto 0) := "000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (14 downto 0) := "000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (14 downto 0) := "000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (14 downto 0) := "000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (14 downto 0) := "000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (14 downto 0) := "000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (14 downto 0) := "000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (14 downto 0) := "001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (14 downto 0) := "010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (14 downto 0) := "100000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_312_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_799 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_338_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_809 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_fu_380_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_reg_815 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_388_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_3_reg_820 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_407_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_828 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_411_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_reg_833 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_838 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln18_1_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_1_reg_846 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln18_1_fu_471_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_851 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln18_fu_439_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_fu_509_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_reg_856 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_fu_544_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_reg_861 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_fu_556_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_reg_867 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_2_fu_612_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_872 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_5_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_reg_877 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln21_3_fu_649_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_3_reg_882 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_fu_657_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_892 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_668_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln11_reg_897 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ch_fu_723_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_912 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_927 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal w_sum_reg_942 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal indvar_flatten43_reg_165 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal r_0_reg_176 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_187 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_210 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten21_reg_221 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_232 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_243 : STD_LOGIC_VECTOR (4 downto 0);
    signal wc_0_reg_254 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_265 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_277 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_4_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal r_fu_318_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_330_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_777_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_3_fu_415_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_fu_400_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_419_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln21_fu_430_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_451_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_483_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_491_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_479_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_495_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_505_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_463_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln18_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_532_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln21_2_fu_564_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_501_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_574_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_578_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_586_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_1_fu_552_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_434_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_2_fu_600_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_fu_605_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_620_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_fu_594_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_cast_fu_630_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln21_fu_643_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_1_fu_662_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_786_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_688_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_681_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_705_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_699_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_712_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_728_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_731_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_741_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_786_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_786_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_786_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_777_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_777_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_786_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_786_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_sum_2_reg_265,
        din1 => grp_fu_288_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_288_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_288_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_300_p2);

    conv_mac_muladd_4eOg_U4 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        din2 => grp_fu_777_p2,
        dout => grp_fu_777_p3);

    conv_mac_muladd_4eOg_U5 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_786_p0,
        din1 => grp_fu_786_p1,
        din2 => grp_fu_786_p2,
        dout => grp_fu_786_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                c_0_reg_199 <= select_ln35_3_reg_820;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_199 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ch_0_reg_277 <= ch_reg_912;
            elsif (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_277 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_210_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                f_0_reg_210 <= f_reg_892;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_210 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten21_reg_221 <= add_ln18_1_reg_846;
            elsif (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_221 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten29_reg_187 <= select_ln11_reg_897;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten29_reg_187 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten43_reg_165 <= add_ln8_reg_799;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten43_reg_165 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten_reg_243 <= select_ln21_3_reg_882;
            elsif (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_243 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                r_0_reg_176 <= select_ln35_1_reg_809;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_176 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_sum_2_reg_265 <= grp_fu_288_p2;
            elsif (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_265 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                wc_0_reg_254 <= select_ln21_1_reg_867;
            elsif (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_254 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                wr_0_reg_232 <= select_ln18_1_reg_851;
            elsif (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_232 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln18_1_reg_846 <= add_ln18_1_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_439_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln18_reg_856 <= add_ln18_fu_509_p2;
                add_ln26_5_reg_877 <= add_ln26_5_fu_638_p2;
                select_ln18_1_reg_851 <= select_ln18_1_fu_471_p3;
                select_ln21_1_reg_867 <= select_ln21_1_fu_556_p3;
                select_ln21_2_reg_872 <= select_ln21_2_fu_612_p3;
                select_ln21_3_reg_882 <= select_ln21_3_fu_649_p3;
                select_ln21_reg_861 <= select_ln21_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_799 <= add_ln8_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                ch_reg_912 <= ch_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_838 <= zext_ln35_4_fu_425_p1(11 - 1 downto 0);
                icmp_ln11_reg_804 <= icmp_ln11_fu_324_p2;
                select_ln35_1_reg_809 <= select_ln35_1_fu_338_p3;
                select_ln35_2_reg_815 <= select_ln35_2_fu_380_p3;
                select_ln35_3_reg_820 <= select_ln35_3_fu_388_p3;
                    zext_ln26_reg_828(4 downto 0) <= zext_ln26_fu_407_p1(4 downto 0);
                    zext_ln35_2_reg_833(4 downto 0) <= zext_ln35_2_fu_411_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                f_reg_892 <= f_fu_657_p2;
                select_ln11_reg_897 <= select_ln11_fu_668_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                tmp_1_reg_927 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                w_sum_reg_942 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_828(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_833(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_306_p2, ap_CS_fsm_state3, icmp_ln18_fu_439_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln18_fu_439_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_662_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten29_reg_187));
    add_ln18_1_fu_445_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_221) + unsigned(ap_const_lv6_1));
    add_ln18_fu_509_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_809) + unsigned(zext_ln18_fu_505_p1));
    add_ln21_fu_643_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_243) + unsigned(ap_const_lv5_1));
    add_ln26_1_fu_568_p2 <= std_logic_vector(unsigned(zext_ln21_2_fu_564_p1) + unsigned(sext_ln26_fu_501_p1));
    add_ln26_2_fu_600_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_820) + unsigned(zext_ln21_1_fu_552_p1));
    add_ln26_4_fu_624_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_620_p1) + unsigned(sub_ln26_1_fu_594_p2));
    add_ln26_5_fu_638_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_833) + unsigned(tmp_12_cast_fu_630_p3));
    add_ln26_6_fu_712_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_705_p1) + unsigned(sub_ln26_2_fu_699_p2));
    add_ln26_fu_434_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_820) + unsigned(zext_ln21_fu_430_p1));
    add_ln35_1_fu_419_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_415_p1) + unsigned(tmp_3_cast_fu_400_p3));
    add_ln8_fu_312_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_165) + unsigned(ap_const_lv11_1));
    and_ln18_fu_526_p2 <= (xor_ln18_fu_514_p2 and icmp_ln24_fu_520_p2);
    and_ln34_fu_763_p2 <= (or_ln34_fu_757_p2 and grp_fu_300_p2);
    and_ln35_fu_362_p2 <= (xor_ln35_fu_350_p2 and icmp_ln14_fu_356_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_306_p2)
    begin
        if (((icmp_ln8_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_306_p2)
    begin
        if (((icmp_ln8_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_728_p1 <= w_sum_reg_942;
    c_fu_368_p2 <= std_logic_vector(unsigned(select_ln35_fu_330_p3) + unsigned(ap_const_lv4_1));
    ch_fu_723_p2 <= std_logic_vector(unsigned(select_ln21_reg_861) + unsigned(ap_const_lv3_1));
    conv_bias_address0 <= zext_ln26_reg_828(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_838;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_942 when (and_ln34_fu_763_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_address0 <= zext_ln26_8_fu_708_p1(10 - 1 downto 0);

    conv_weights_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_657_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_2_reg_815));

    grp_fu_288_p1_assign_proc : process(conv_bias_q0, tmp_1_reg_927, ap_CS_fsm_state11, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_288_p1 <= conv_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_288_p1 <= tmp_1_reg_927;
        else 
            grp_fu_288_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_777_p0 <= grp_fu_777_p00(4 - 1 downto 0);
    grp_fu_777_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_338_p3),8));
    grp_fu_777_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_777_p2 <= grp_fu_777_p20(4 - 1 downto 0);
    grp_fu_777_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_388_p3),8));
    grp_fu_786_p0 <= grp_fu_786_p00(4 - 1 downto 0);
    grp_fu_786_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_reg_856),8));
    grp_fu_786_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_786_p2 <= grp_fu_786_p20(4 - 1 downto 0);
    grp_fu_786_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_reg_872),8));
    icmp_ln11_fu_324_p2 <= "1" when (indvar_flatten29_reg_187 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_356_p2 <= "1" when (f_0_reg_210 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_439_p2 <= "1" when (indvar_flatten21_reg_221 = ap_const_lv6_36) else "0";
    icmp_ln21_fu_457_p2 <= "1" when (indvar_flatten_reg_243 = ap_const_lv5_12) else "0";
    icmp_ln24_fu_520_p2 <= "1" when (ch_0_reg_277 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_751_p2 <= "1" when (trunc_ln34_fu_741_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_745_p2 <= "0" when (tmp_fu_731_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_306_p2 <= "1" when (indvar_flatten43_reg_165 = ap_const_lv11_790) else "0";
    input_r_address0 <= zext_ln26_9_fu_718_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_538_p2 <= (icmp_ln21_fu_457_p2 or and_ln18_fu_526_p2);
    or_ln34_fu_757_p2 <= (icmp_ln34_fu_745_p2 or icmp_ln34_1_fu_751_p2);
    or_ln35_fu_374_p2 <= (icmp_ln11_fu_324_p2 or and_ln35_fu_362_p2);
    p_shl_cast_fu_681_p3 <= (grp_fu_786_p3 & ap_const_lv3_0);
    p_shl_fu_578_p3 <= (trunc_ln26_fu_574_p1 & ap_const_lv3_0);
    r_fu_318_p2 <= std_logic_vector(unsigned(r_0_reg_176) + unsigned(ap_const_lv4_1));
    select_ln11_fu_668_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_804(0) = '1') else 
        add_ln11_1_fu_662_p2;
    select_ln18_1_fu_471_p3 <= 
        wr_fu_451_p2 when (icmp_ln21_fu_457_p2(0) = '1') else 
        wr_0_reg_232;
    select_ln18_2_fu_605_p3 <= 
        select_ln35_3_reg_820 when (icmp_ln21_fu_457_p2(0) = '1') else 
        add_ln26_fu_434_p2;
    select_ln18_fu_463_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_457_p2(0) = '1') else 
        wc_0_reg_254;
    select_ln21_1_fu_556_p3 <= 
        wc_fu_532_p2 when (and_ln18_fu_526_p2(0) = '1') else 
        select_ln18_fu_463_p3;
    select_ln21_2_fu_612_p3 <= 
        add_ln26_2_fu_600_p2 when (and_ln18_fu_526_p2(0) = '1') else 
        select_ln18_2_fu_605_p3;
    select_ln21_3_fu_649_p3 <= 
        ap_const_lv5_1 when (icmp_ln21_fu_457_p2(0) = '1') else 
        add_ln21_fu_643_p2;
    select_ln21_fu_544_p3 <= 
        ap_const_lv3_0 when (or_ln21_fu_538_p2(0) = '1') else 
        ch_0_reg_277;
    select_ln35_1_fu_338_p3 <= 
        r_fu_318_p2 when (icmp_ln11_fu_324_p2(0) = '1') else 
        r_0_reg_176;
    select_ln35_2_fu_380_p3 <= 
        ap_const_lv5_0 when (or_ln35_fu_374_p2(0) = '1') else 
        f_0_reg_210;
    select_ln35_3_fu_388_p3 <= 
        c_fu_368_p2 when (and_ln35_fu_362_p2(0) = '1') else 
        select_ln35_fu_330_p3;
    select_ln35_fu_330_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_324_p2(0) = '1') else 
        c_0_reg_199;
        sext_ln26_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_495_p2),6));

    sub_ln26_1_fu_594_p2 <= std_logic_vector(unsigned(p_shl_fu_578_p3) - unsigned(tmp_2_fu_586_p3));
    sub_ln26_2_fu_699_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_681_p3) - unsigned(zext_ln26_6_fu_695_p1));
    sub_ln26_fu_495_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_491_p1) - unsigned(zext_ln26_1_fu_479_p1));
    tmp_12_cast_fu_630_p3 <= (add_ln26_4_fu_624_p2 & ap_const_lv4_0);
    tmp_2_fu_586_p3 <= (add_ln26_1_fu_568_p2 & ap_const_lv1_0);
    tmp_3_cast_fu_400_p3 <= (grp_fu_777_p3 & ap_const_lv4_0);
    tmp_3_fu_688_p3 <= (grp_fu_786_p3 & ap_const_lv1_0);
    tmp_5_fu_483_p3 <= (select_ln18_1_fu_471_p3 & ap_const_lv2_0);
    tmp_fu_731_p4 <= bitcast_ln34_fu_728_p1(30 downto 23);
    trunc_ln26_fu_574_p1 <= add_ln26_1_fu_568_p2(4 - 1 downto 0);
    trunc_ln34_fu_741_p1 <= bitcast_ln34_fu_728_p1(23 - 1 downto 0);
    wc_fu_532_p2 <= std_logic_vector(unsigned(select_ln18_fu_463_p3) + unsigned(ap_const_lv2_1));
    wr_fu_451_p2 <= std_logic_vector(unsigned(wr_0_reg_232) + unsigned(ap_const_lv2_1));
    xor_ln18_fu_514_p2 <= (icmp_ln21_fu_457_p2 xor ap_const_lv1_1);
    xor_ln35_fu_350_p2 <= (icmp_ln11_fu_324_p2 xor ap_const_lv1_1);
    zext_ln18_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_471_p3),4));
    zext_ln21_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_532_p2),4));
    zext_ln21_2_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_556_p3),6));
    zext_ln21_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_254),4));
    zext_ln26_1_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_471_p3),5));
    zext_ln26_2_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_483_p3),5));
    zext_ln26_4_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_544_p3),7));
    zext_ln26_6_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_688_p3),11));
    zext_ln26_7_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_861),11));
    zext_ln26_8_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_reg_877),64));
    zext_ln26_9_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_712_p2),64));
    zext_ln26_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_380_p3),64));
    zext_ln35_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_380_p3),11));
    zext_ln35_3_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_380_p3),12));
    zext_ln35_4_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_419_p2),64));
end behav;
