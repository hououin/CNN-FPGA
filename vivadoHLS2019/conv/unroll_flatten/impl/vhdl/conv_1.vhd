-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=908545,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=640,HLS_SYN_LUT=1707,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln8_fu_359_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_845 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_850 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_379_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_855 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_415_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_reg_860 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_459_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_865 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_503_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_reg_870 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_4_fu_539_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_4_reg_875 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_5_fu_547_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_reg_880 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_574_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_2_reg_893 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out_addr_reg_900 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln21_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_reg_908 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln21_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_314_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal add_ln21_1_fu_656_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_1_reg_936 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln21_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal add_ln21_2_fu_713_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln21_2_reg_964 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln21_2_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_764_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_984 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln11_fu_775_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_989 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal indvar_flatten13_reg_191 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_0_reg_202 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_213 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_225 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_236 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_sum_1_0_reg_247 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_0_reg_259 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_1_reg_270 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_1_reg_281 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_2_reg_292 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_2_reg_303 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_4_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_683_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_14_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_740_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_759_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_314_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_314_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_347_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_391_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_403_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_1_fu_399_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_2_fu_411_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_4_fu_421_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_427_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_447_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_443_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_455_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_3_fu_465_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_479_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_491_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_5_fu_487_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_499_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln14_fu_515_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_371_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_527_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_833_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_559_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln35_3_fu_578_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln11_fu_566_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_2_fu_582_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_12_fu_609_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_7_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_5_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_fu_605_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_631_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_9_fu_636_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_640_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_13_fu_666_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_11_fu_674_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_7_fu_678_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_1_fu_662_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_688_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_13_fu_693_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_697_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_723_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_15_fu_731_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_9_fu_735_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln21_2_fu_719_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_3_fu_745_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_17_fu_750_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_10_fu_754_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln11_1_fu_769_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_786_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_796_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_806_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_812_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_331_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_818_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_833_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_833_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_833_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_833_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_833_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_address0,
        ce0 => conv_1_weights_0_0_ce0,
        q0 => conv_1_weights_0_0_q0);

    conv_1_weights_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_address0,
        ce0 => conv_1_weights_1_0_ce0,
        q0 => conv_1_weights_1_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_weights_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_address0,
        ce0 => conv_1_weights_2_0_ce0,
        q0 => conv_1_weights_2_0_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_314_p0,
        din1 => grp_fu_314_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_314_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_314_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_331_p2);

    conv_1_mac_muladdhbi_U4 : component conv_1_mac_muladdhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_833_p0,
        din1 => grp_fu_833_p1,
        din2 => grp_fu_833_p2,
        dout => grp_fu_833_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                c_0_reg_225 <= select_ln35_5_reg_880;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_225 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                f_0_reg_236 <= f_reg_984;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_236 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten13_reg_191 <= add_ln8_reg_845;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_191 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten_reg_213 <= select_ln11_reg_989;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_213 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_0_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                r_0_reg_202 <= select_ln35_1_reg_855;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_202 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_1_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                w_sum_1_0_reg_247 <= grp_fu_314_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_353_p2 = ap_const_lv1_0))) then 
                w_sum_1_0_reg_247 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_1_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_sum_1_1_reg_270 <= grp_fu_314_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln21_fu_593_p2 = ap_const_lv1_1))) then 
                w_sum_1_1_reg_270 <= w_sum_1_0_reg_247;
            end if; 
        end if;
    end process;

    w_sum_1_2_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_sum_1_2_reg_292 <= grp_fu_314_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln21_1_fu_650_p2 = ap_const_lv1_1))) then 
                w_sum_1_2_reg_292 <= w_sum_1_1_reg_270;
            end if; 
        end if;
    end process;

    wc_0_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                wc_0_0_reg_259 <= add_ln21_reg_908;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_353_p2 = ap_const_lv1_0))) then 
                wc_0_0_reg_259 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_1_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                wc_0_1_reg_281 <= add_ln21_1_reg_936;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln21_fu_593_p2 = ap_const_lv1_1))) then 
                wc_0_1_reg_281 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wc_0_2_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                wc_0_2_reg_303 <= add_ln21_2_reg_964;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln21_1_fu_650_p2 = ap_const_lv1_1))) then 
                wc_0_2_reg_303 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                add_ln21_1_reg_936 <= add_ln21_1_fu_656_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                add_ln21_2_reg_964 <= add_ln21_2_fu_713_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln21_reg_908 <= add_ln21_fu_599_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_845 <= add_ln8_fu_359_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_353_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_900 <= zext_ln35_4_fu_588_p1(15 - 1 downto 0);
                icmp_ln11_reg_850 <= icmp_ln11_fu_365_p2;
                select_ln35_1_reg_855 <= select_ln35_1_fu_379_p3;
                select_ln35_4_reg_875 <= select_ln35_4_fu_539_p3;
                select_ln35_5_reg_880 <= select_ln35_5_fu_547_p3;
                    sub_ln26_1_reg_865(10 downto 2) <= sub_ln26_1_fu_459_p2(10 downto 2);
                    sub_ln26_2_reg_870(10 downto 2) <= sub_ln26_2_fu_503_p2(10 downto 2);
                    sub_ln26_reg_860(10 downto 2) <= sub_ln26_fu_415_p2(10 downto 2);
                    zext_ln26_reg_888(5 downto 0) <= zext_ln26_fu_570_p1(5 downto 0);
                    zext_ln35_2_reg_893(5 downto 0) <= zext_ln35_2_fu_574_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln21_2_fu_707_p2 = ap_const_lv1_1))) then
                f_reg_984 <= f_fu_764_p2;
                select_ln11_reg_989 <= select_ln11_fu_775_p3;
            end if;
        end if;
    end process;
    sub_ln26_reg_860(1 downto 0) <= "00";
    sub_ln26_1_reg_865(1 downto 0) <= "00";
    sub_ln26_2_reg_870(1 downto 0) <= "00";
    zext_ln26_reg_888(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_893(7 downto 6) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_353_p2, ap_CS_fsm_state3, icmp_ln21_fu_593_p2, ap_CS_fsm_state7, icmp_ln21_1_fu_650_p2, ap_CS_fsm_state11, icmp_ln21_2_fu_707_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_353_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln21_fu_593_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln21_1_fu_650_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (icmp_ln21_2_fu_707_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_769_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten_reg_213));
    add_ln21_1_fu_656_p2 <= std_logic_vector(unsigned(wc_0_1_reg_281) + unsigned(ap_const_lv2_1));
    add_ln21_2_fu_713_p2 <= std_logic_vector(unsigned(wc_0_2_reg_303) + unsigned(ap_const_lv2_1));
    add_ln21_fu_599_p2 <= std_logic_vector(unsigned(wc_0_0_reg_259) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_754_p2 <= std_logic_vector(unsigned(zext_ln26_17_fu_750_p1) + unsigned(sub_ln26_2_reg_870));
    add_ln26_1_fu_631_p2 <= std_logic_vector(unsigned(select_ln35_5_reg_880) + unsigned(zext_ln21_fu_605_p1));
    add_ln26_3_fu_745_p2 <= std_logic_vector(unsigned(select_ln35_5_reg_880) + unsigned(zext_ln21_2_fu_719_p1));
    add_ln26_4_fu_421_p2 <= std_logic_vector(unsigned(r_0_reg_202) + unsigned(ap_const_lv5_2));
    add_ln26_5_fu_621_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_893) + unsigned(zext_ln26_7_fu_617_p1));
    add_ln26_6_fu_640_p2 <= std_logic_vector(unsigned(zext_ln26_9_fu_636_p1) + unsigned(sub_ln26_reg_860));
    add_ln26_7_fu_678_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_893) + unsigned(zext_ln26_11_fu_674_p1));
    add_ln26_8_fu_697_p2 <= std_logic_vector(unsigned(zext_ln26_13_fu_693_p1) + unsigned(sub_ln26_1_reg_865));
    add_ln26_9_fu_735_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_893) + unsigned(zext_ln26_15_fu_731_p1));
    add_ln26_fu_688_p2 <= std_logic_vector(unsigned(select_ln35_5_reg_880) + unsigned(zext_ln21_1_fu_662_p1));
    add_ln35_2_fu_582_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_578_p1) + unsigned(zext_ln11_fu_566_p1));
    add_ln35_fu_473_p2 <= std_logic_vector(unsigned(select_ln35_3_fu_465_p3) + unsigned(r_0_reg_202));
    add_ln8_fu_359_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_191) + unsigned(ap_const_lv15_1));
    and_ln34_fu_818_p2 <= (tmp_6_fu_331_p2 and or_ln34_fu_812_p2);
    and_ln35_fu_521_p2 <= (xor_ln35_fu_509_p2 and icmp_ln14_fu_515_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_353_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_353_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_353_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_782_p1 <= grp_fu_314_p2;
    c_fu_527_p2 <= std_logic_vector(unsigned(select_ln35_fu_371_p3) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_888(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_address0 <= zext_ln26_8_fu_626_p1(7 - 1 downto 0);

    conv_1_weights_0_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_1_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_address0 <= zext_ln26_12_fu_683_p1(7 - 1 downto 0);

    conv_1_weights_1_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_1_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_address0 <= zext_ln26_16_fu_740_p1(7 - 1 downto 0);

    conv_1_weights_2_0_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_1_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, zext_ln26_10_fu_645_p1, zext_ln26_14_fu_702_p1, sext_ln26_fu_759_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_input_address0 <= sext_ln26_fu_759_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_input_address0 <= zext_ln26_14_fu_702_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_input_address0 <= zext_ln26_10_fu_645_p1(10 - 1 downto 0);
        else 
            conv_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_input_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_900;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_314_p2 when (and_ln34_fu_818_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_4_reg_875));

    grp_fu_314_p0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15, w_sum_1_0_reg_247, w_sum_1_1_reg_270, w_sum_1_2_reg_292)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_314_p0 <= w_sum_1_2_reg_292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_314_p0 <= w_sum_1_1_reg_270;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_314_p0 <= w_sum_1_0_reg_247;
        else 
            grp_fu_314_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_314_p1_assign_proc : process(conv_1_bias_q0, grp_fu_322_p2, ap_CS_fsm_state5, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_314_p1 <= conv_1_bias_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            grp_fu_314_p1 <= grp_fu_322_p2;
        else 
            grp_fu_314_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_p0_assign_proc : process(conv_1_weights_0_0_q0, conv_1_weights_1_0_q0, conv_1_weights_2_0_q0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_322_p0 <= conv_1_weights_2_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_322_p0 <= conv_1_weights_1_0_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_322_p0 <= conv_1_weights_0_0_q0;
        else 
            grp_fu_322_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_833_p0 <= grp_fu_833_p00(5 - 1 downto 0);
    grp_fu_833_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_379_p3),10));
    grp_fu_833_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_833_p2 <= grp_fu_833_p20(5 - 1 downto 0);
    grp_fu_833_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_fu_547_p3),10));
    icmp_ln11_fu_365_p2 <= "1" when (indvar_flatten_reg_213 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_515_p2 <= "1" when (f_0_reg_236 = ap_const_lv6_20) else "0";
    icmp_ln21_1_fu_650_p2 <= "1" when (wc_0_1_reg_281 = ap_const_lv2_3) else "0";
    icmp_ln21_2_fu_707_p2 <= "1" when (wc_0_2_reg_303 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_593_p2 <= "1" when (wc_0_0_reg_259 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_806_p2 <= "1" when (trunc_ln34_fu_796_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_800_p2 <= "0" when (tmp_fu_786_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_353_p2 <= "1" when (indvar_flatten13_reg_191 = ap_const_lv15_5480) else "0";
    or_ln34_fu_812_p2 <= (icmp_ln34_fu_800_p2 or icmp_ln34_1_fu_806_p2);
    or_ln35_fu_533_p2 <= (icmp_ln11_fu_365_p2 or and_ln35_fu_521_p2);
    r_fu_347_p2 <= std_logic_vector(unsigned(r_0_reg_202) + unsigned(ap_const_lv5_1));
    select_ln11_fu_775_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_reg_850(0) = '1') else 
        add_ln11_1_fu_769_p2;
    select_ln35_1_fu_379_p3 <= 
        r_fu_347_p2 when (icmp_ln11_fu_365_p2(0) = '1') else 
        r_0_reg_202;
    select_ln35_2_fu_427_p3 <= 
        add_ln26_4_fu_421_p2 when (icmp_ln11_fu_365_p2(0) = '1') else 
        r_fu_347_p2;
    select_ln35_3_fu_465_p3 <= 
        ap_const_lv5_3 when (icmp_ln11_fu_365_p2(0) = '1') else 
        ap_const_lv5_2;
    select_ln35_4_fu_539_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_533_p2(0) = '1') else 
        f_0_reg_236;
    select_ln35_5_fu_547_p3 <= 
        c_fu_527_p2 when (and_ln35_fu_521_p2(0) = '1') else 
        select_ln35_fu_371_p3;
    select_ln35_fu_371_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_365_p2(0) = '1') else 
        c_0_reg_225;
        sext_ln26_fu_759_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_10_fu_754_p2),64));

    sub_ln26_1_fu_459_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_443_p1) - unsigned(zext_ln26_4_fu_455_p1));
    sub_ln26_2_fu_503_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_487_p1) - unsigned(zext_ln26_6_fu_499_p1));
    sub_ln26_fu_415_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_399_p1) - unsigned(zext_ln26_2_fu_411_p1));
    tmp_10_fu_491_p3 <= (add_ln35_fu_473_p2 & ap_const_lv2_0);
    tmp_11_fu_559_p3 <= (grp_fu_833_p3 & ap_const_lv5_0);
    tmp_12_fu_609_p3 <= (wc_0_0_reg_259 & ap_const_lv5_0);
    tmp_13_fu_666_p3 <= (wc_0_1_reg_281 & ap_const_lv5_0);
    tmp_14_fu_723_p3 <= (wc_0_2_reg_303 & ap_const_lv5_0);
    tmp_1_fu_391_p3 <= (select_ln35_1_fu_379_p3 & ap_const_lv5_0);
    tmp_2_fu_403_p3 <= (select_ln35_1_fu_379_p3 & ap_const_lv2_0);
    tmp_7_fu_435_p3 <= (select_ln35_2_fu_427_p3 & ap_const_lv5_0);
    tmp_8_fu_447_p3 <= (select_ln35_2_fu_427_p3 & ap_const_lv2_0);
    tmp_9_fu_479_p3 <= (add_ln35_fu_473_p2 & ap_const_lv5_0);
    tmp_fu_786_p4 <= bitcast_ln34_fu_782_p1(30 downto 23);
    trunc_ln34_fu_796_p1 <= bitcast_ln34_fu_782_p1(23 - 1 downto 0);
    xor_ln35_fu_509_p2 <= (icmp_ln11_fu_365_p2 xor ap_const_lv1_1);
    zext_ln11_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_559_p3),16));
    zext_ln21_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_1_reg_281),5));
    zext_ln21_2_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_2_reg_303),5));
    zext_ln21_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_0_reg_259),5));
    zext_ln26_10_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_640_p2),64));
    zext_ln26_11_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_666_p3),8));
    zext_ln26_12_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_678_p2),64));
    zext_ln26_13_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_688_p2),11));
    zext_ln26_14_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_697_p2),64));
    zext_ln26_15_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_723_p3),8));
    zext_ln26_16_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_735_p2),64));
    zext_ln26_17_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_745_p2),11));
    zext_ln26_1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_391_p3),11));
    zext_ln26_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_403_p3),11));
    zext_ln26_3_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_435_p3),11));
    zext_ln26_4_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_447_p3),11));
    zext_ln26_5_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_479_p3),11));
    zext_ln26_6_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_491_p3),11));
    zext_ln26_7_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_609_p3),8));
    zext_ln26_8_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_621_p2),64));
    zext_ln26_9_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_631_p2),11));
    zext_ln26_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_539_p3),64));
    zext_ln35_2_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_539_p3),8));
    zext_ln35_3_fu_578_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_539_p3),16));
    zext_ln35_4_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_582_p2),64));
end behav;
