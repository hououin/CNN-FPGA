// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=908545,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=640,HLS_SYN_LUT=1707,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] conv_input_address0;
reg conv_input_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] conv_1_weights_0_0_address0;
reg    conv_1_weights_0_0_ce0;
wire   [31:0] conv_1_weights_0_0_q0;
wire   [6:0] conv_1_weights_1_0_address0;
reg    conv_1_weights_1_0_ce0;
wire   [31:0] conv_1_weights_1_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [6:0] conv_1_weights_2_0_address0;
reg    conv_1_weights_2_0_ce0;
wire   [31:0] conv_1_weights_2_0_q0;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire   [31:0] grp_fu_322_p2;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire   [14:0] add_ln8_fu_359_p2;
reg   [14:0] add_ln8_reg_845;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_365_p2;
reg   [0:0] icmp_ln11_reg_850;
wire   [0:0] icmp_ln8_fu_353_p2;
wire   [4:0] select_ln35_1_fu_379_p3;
reg   [4:0] select_ln35_1_reg_855;
wire   [10:0] sub_ln26_fu_415_p2;
reg   [10:0] sub_ln26_reg_860;
wire   [10:0] sub_ln26_1_fu_459_p2;
reg   [10:0] sub_ln26_1_reg_865;
wire   [10:0] sub_ln26_2_fu_503_p2;
reg   [10:0] sub_ln26_2_reg_870;
wire   [5:0] select_ln35_4_fu_539_p3;
reg   [5:0] select_ln35_4_reg_875;
wire   [4:0] select_ln35_5_fu_547_p3;
reg   [4:0] select_ln35_5_reg_880;
wire   [63:0] zext_ln26_fu_570_p1;
reg   [63:0] zext_ln26_reg_888;
wire   [7:0] zext_ln35_2_fu_574_p1;
reg   [7:0] zext_ln35_2_reg_893;
reg   [14:0] conv_out_addr_reg_900;
wire   [1:0] add_ln21_fu_599_p2;
reg   [1:0] add_ln21_reg_908;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln21_fu_593_p2;
wire   [31:0] grp_fu_314_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] add_ln21_1_fu_656_p2;
reg   [1:0] add_ln21_1_reg_936;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln21_1_fu_650_p2;
wire    ap_CS_fsm_state10;
wire   [1:0] add_ln21_2_fu_713_p2;
reg   [1:0] add_ln21_2_reg_964;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln21_2_fu_707_p2;
wire   [5:0] f_fu_764_p2;
reg   [5:0] f_reg_984;
wire   [10:0] select_ln11_fu_775_p3;
reg   [10:0] select_ln11_reg_989;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
reg   [14:0] indvar_flatten13_reg_191;
wire    ap_CS_fsm_state16;
reg   [4:0] r_0_reg_202;
reg   [10:0] indvar_flatten_reg_213;
reg   [4:0] c_0_reg_225;
reg   [5:0] f_0_reg_236;
reg   [31:0] w_sum_1_0_reg_247;
reg   [1:0] wc_0_0_reg_259;
reg   [31:0] w_sum_1_1_reg_270;
reg   [1:0] wc_0_1_reg_281;
reg   [31:0] w_sum_1_2_reg_292;
reg   [1:0] wc_0_2_reg_303;
wire   [63:0] zext_ln35_4_fu_588_p1;
wire   [63:0] zext_ln26_8_fu_626_p1;
wire   [63:0] zext_ln26_10_fu_645_p1;
wire   [63:0] zext_ln26_12_fu_683_p1;
wire   [63:0] zext_ln26_14_fu_702_p1;
wire   [63:0] zext_ln26_16_fu_740_p1;
wire  signed [63:0] sext_ln26_fu_759_p1;
reg   [31:0] grp_fu_314_p0;
reg   [31:0] grp_fu_314_p1;
reg   [31:0] grp_fu_322_p0;
wire   [4:0] r_fu_347_p2;
wire   [9:0] tmp_1_fu_391_p3;
wire   [6:0] tmp_2_fu_403_p3;
wire   [10:0] zext_ln26_1_fu_399_p1;
wire   [10:0] zext_ln26_2_fu_411_p1;
wire   [4:0] add_ln26_4_fu_421_p2;
wire   [4:0] select_ln35_2_fu_427_p3;
wire   [9:0] tmp_7_fu_435_p3;
wire   [6:0] tmp_8_fu_447_p3;
wire   [10:0] zext_ln26_3_fu_443_p1;
wire   [10:0] zext_ln26_4_fu_455_p1;
wire   [4:0] select_ln35_3_fu_465_p3;
wire   [4:0] add_ln35_fu_473_p2;
wire   [9:0] tmp_9_fu_479_p3;
wire   [6:0] tmp_10_fu_491_p3;
wire   [10:0] zext_ln26_5_fu_487_p1;
wire   [10:0] zext_ln26_6_fu_499_p1;
wire   [0:0] icmp_ln14_fu_515_p2;
wire   [0:0] xor_ln35_fu_509_p2;
wire   [4:0] select_ln35_fu_371_p3;
wire   [0:0] and_ln35_fu_521_p2;
wire   [0:0] or_ln35_fu_533_p2;
wire   [4:0] c_fu_527_p2;
wire   [9:0] grp_fu_833_p3;
wire   [14:0] tmp_11_fu_559_p3;
wire   [15:0] zext_ln35_3_fu_578_p1;
wire   [15:0] zext_ln11_fu_566_p1;
wire   [15:0] add_ln35_2_fu_582_p2;
wire   [6:0] tmp_12_fu_609_p3;
wire   [7:0] zext_ln26_7_fu_617_p1;
wire   [7:0] add_ln26_5_fu_621_p2;
wire   [4:0] zext_ln21_fu_605_p1;
wire   [4:0] add_ln26_1_fu_631_p2;
wire   [10:0] zext_ln26_9_fu_636_p1;
wire   [10:0] add_ln26_6_fu_640_p2;
wire   [6:0] tmp_13_fu_666_p3;
wire   [7:0] zext_ln26_11_fu_674_p1;
wire   [7:0] add_ln26_7_fu_678_p2;
wire   [4:0] zext_ln21_1_fu_662_p1;
wire   [4:0] add_ln26_fu_688_p2;
wire   [10:0] zext_ln26_13_fu_693_p1;
wire   [10:0] add_ln26_8_fu_697_p2;
wire   [6:0] tmp_14_fu_723_p3;
wire   [7:0] zext_ln26_15_fu_731_p1;
wire   [7:0] add_ln26_9_fu_735_p2;
wire   [4:0] zext_ln21_2_fu_719_p1;
wire   [4:0] add_ln26_3_fu_745_p2;
wire   [10:0] zext_ln26_17_fu_750_p1;
wire   [10:0] add_ln26_10_fu_754_p2;
wire   [10:0] add_ln11_1_fu_769_p2;
wire   [31:0] bitcast_ln34_fu_782_p1;
wire   [7:0] tmp_fu_786_p4;
wire   [22:0] trunc_ln34_fu_796_p1;
wire   [0:0] icmp_ln34_1_fu_806_p2;
wire   [0:0] icmp_ln34_fu_800_p2;
wire   [0:0] or_ln34_fu_812_p2;
wire   [0:0] tmp_6_fu_331_p2;
wire   [0:0] and_ln34_fu_818_p2;
wire   [4:0] grp_fu_833_p0;
wire   [5:0] grp_fu_833_p1;
wire   [4:0] grp_fu_833_p2;
reg   [15:0] ap_NS_fsm;
wire   [9:0] grp_fu_833_p00;
wire   [9:0] grp_fu_833_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_0_address0),
    .ce0(conv_1_weights_0_0_ce0),
    .q0(conv_1_weights_0_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_0_address0),
    .ce0(conv_1_weights_1_0_ce0),
    .q0(conv_1_weights_1_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_0_address0),
    .ce0(conv_1_weights_2_0_ce0),
    .q0(conv_1_weights_2_0_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_314_p0),
    .din1(grp_fu_314_p1),
    .ce(1'b1),
    .dout(grp_fu_314_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_322_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_322_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_314_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_331_p2)
);

conv_1_mac_muladdhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
conv_1_mac_muladdhbi_U4(
    .din0(grp_fu_833_p0),
    .din1(grp_fu_833_p1),
    .din2(grp_fu_833_p2),
    .dout(grp_fu_833_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        c_0_reg_225 <= select_ln35_5_reg_880;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_225 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        f_0_reg_236 <= f_reg_984;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_236 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten13_reg_191 <= add_ln8_reg_845;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_191 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        indvar_flatten_reg_213 <= select_ln11_reg_989;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_213 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        r_0_reg_202 <= select_ln35_1_reg_855;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_202 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w_sum_1_0_reg_247 <= grp_fu_314_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_353_p2 == 1'd0))) begin
        w_sum_1_0_reg_247 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_sum_1_1_reg_270 <= grp_fu_314_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_593_p2 == 1'd1))) begin
        w_sum_1_1_reg_270 <= w_sum_1_0_reg_247;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_1_2_reg_292 <= grp_fu_314_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln21_1_fu_650_p2 == 1'd1))) begin
        w_sum_1_2_reg_292 <= w_sum_1_1_reg_270;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_0_0_reg_259 <= add_ln21_reg_908;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_353_p2 == 1'd0))) begin
        wc_0_0_reg_259 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        wc_0_1_reg_281 <= add_ln21_1_reg_936;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_593_p2 == 1'd1))) begin
        wc_0_1_reg_281 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        wc_0_2_reg_303 <= add_ln21_2_reg_964;
    end else if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln21_1_fu_650_p2 == 1'd1))) begin
        wc_0_2_reg_303 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        add_ln21_1_reg_936 <= add_ln21_1_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln21_2_reg_964 <= add_ln21_2_fu_713_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln21_reg_908 <= add_ln21_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_845 <= add_ln8_fu_359_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_353_p2 == 1'd0))) begin
        conv_out_addr_reg_900 <= zext_ln35_4_fu_588_p1;
        icmp_ln11_reg_850 <= icmp_ln11_fu_365_p2;
        select_ln35_1_reg_855 <= select_ln35_1_fu_379_p3;
        select_ln35_4_reg_875 <= select_ln35_4_fu_539_p3;
        select_ln35_5_reg_880 <= select_ln35_5_fu_547_p3;
        sub_ln26_1_reg_865[10 : 2] <= sub_ln26_1_fu_459_p2[10 : 2];
        sub_ln26_2_reg_870[10 : 2] <= sub_ln26_2_fu_503_p2[10 : 2];
        sub_ln26_reg_860[10 : 2] <= sub_ln26_fu_415_p2[10 : 2];
        zext_ln26_reg_888[5 : 0] <= zext_ln26_fu_570_p1[5 : 0];
        zext_ln35_2_reg_893[5 : 0] <= zext_ln35_2_fu_574_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln21_2_fu_707_p2 == 1'd1))) begin
        f_reg_984 <= f_fu_764_p2;
        select_ln11_reg_989 <= select_ln11_fu_775_p3;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_353_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_353_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_1_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_1_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_1_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_input_address0 = sext_ln26_fu_759_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_input_address0 = zext_ln26_14_fu_702_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_input_address0 = zext_ln26_10_fu_645_p1;
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_314_p0 = w_sum_1_2_reg_292;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_314_p0 = w_sum_1_1_reg_270;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_314_p0 = w_sum_1_0_reg_247;
    end else begin
        grp_fu_314_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_314_p1 = conv_1_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5))) begin
        grp_fu_314_p1 = grp_fu_322_p2;
    end else begin
        grp_fu_314_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_322_p0 = conv_1_weights_2_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_322_p0 = conv_1_weights_1_0_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_322_p0 = conv_1_weights_0_0_q0;
    end else begin
        grp_fu_322_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_353_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln21_fu_593_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln21_1_fu_650_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (icmp_ln21_2_fu_707_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_769_p2 = (11'd1 + indvar_flatten_reg_213);

assign add_ln21_1_fu_656_p2 = (wc_0_1_reg_281 + 2'd1);

assign add_ln21_2_fu_713_p2 = (wc_0_2_reg_303 + 2'd1);

assign add_ln21_fu_599_p2 = (wc_0_0_reg_259 + 2'd1);

assign add_ln26_10_fu_754_p2 = (zext_ln26_17_fu_750_p1 + sub_ln26_2_reg_870);

assign add_ln26_1_fu_631_p2 = (select_ln35_5_reg_880 + zext_ln21_fu_605_p1);

assign add_ln26_3_fu_745_p2 = (select_ln35_5_reg_880 + zext_ln21_2_fu_719_p1);

assign add_ln26_4_fu_421_p2 = (r_0_reg_202 + 5'd2);

assign add_ln26_5_fu_621_p2 = (zext_ln35_2_reg_893 + zext_ln26_7_fu_617_p1);

assign add_ln26_6_fu_640_p2 = (zext_ln26_9_fu_636_p1 + sub_ln26_reg_860);

assign add_ln26_7_fu_678_p2 = (zext_ln35_2_reg_893 + zext_ln26_11_fu_674_p1);

assign add_ln26_8_fu_697_p2 = (zext_ln26_13_fu_693_p1 + sub_ln26_1_reg_865);

assign add_ln26_9_fu_735_p2 = (zext_ln35_2_reg_893 + zext_ln26_15_fu_731_p1);

assign add_ln26_fu_688_p2 = (select_ln35_5_reg_880 + zext_ln21_1_fu_662_p1);

assign add_ln35_2_fu_582_p2 = (zext_ln35_3_fu_578_p1 + zext_ln11_fu_566_p1);

assign add_ln35_fu_473_p2 = (select_ln35_3_fu_465_p3 + r_0_reg_202);

assign add_ln8_fu_359_p2 = (indvar_flatten13_reg_191 + 15'd1);

assign and_ln34_fu_818_p2 = (tmp_6_fu_331_p2 & or_ln34_fu_812_p2);

assign and_ln35_fu_521_p2 = (xor_ln35_fu_509_p2 & icmp_ln14_fu_515_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_782_p1 = grp_fu_314_p2;

assign c_fu_527_p2 = (select_ln35_fu_371_p3 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_888;

assign conv_1_weights_0_0_address0 = zext_ln26_8_fu_626_p1;

assign conv_1_weights_1_0_address0 = zext_ln26_12_fu_683_p1;

assign conv_1_weights_2_0_address0 = zext_ln26_16_fu_740_p1;

assign conv_out_address0 = conv_out_addr_reg_900;

assign conv_out_d0 = ((and_ln34_fu_818_p2[0:0] === 1'b1) ? grp_fu_314_p2 : 32'd0);

assign f_fu_764_p2 = (6'd1 + select_ln35_4_reg_875);

assign grp_fu_833_p0 = grp_fu_833_p00;

assign grp_fu_833_p00 = select_ln35_1_fu_379_p3;

assign grp_fu_833_p1 = 10'd26;

assign grp_fu_833_p2 = grp_fu_833_p20;

assign grp_fu_833_p20 = select_ln35_5_fu_547_p3;

assign icmp_ln11_fu_365_p2 = ((indvar_flatten_reg_213 == 11'd832) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_515_p2 = ((f_0_reg_236 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_650_p2 = ((wc_0_1_reg_281 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_707_p2 = ((wc_0_2_reg_303 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_593_p2 = ((wc_0_0_reg_259 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_806_p2 = ((trunc_ln34_fu_796_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_800_p2 = ((tmp_fu_786_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_353_p2 = ((indvar_flatten13_reg_191 == 15'd21632) ? 1'b1 : 1'b0);

assign or_ln34_fu_812_p2 = (icmp_ln34_fu_800_p2 | icmp_ln34_1_fu_806_p2);

assign or_ln35_fu_533_p2 = (icmp_ln11_fu_365_p2 | and_ln35_fu_521_p2);

assign r_fu_347_p2 = (r_0_reg_202 + 5'd1);

assign select_ln11_fu_775_p3 = ((icmp_ln11_reg_850[0:0] === 1'b1) ? 11'd1 : add_ln11_1_fu_769_p2);

assign select_ln35_1_fu_379_p3 = ((icmp_ln11_fu_365_p2[0:0] === 1'b1) ? r_fu_347_p2 : r_0_reg_202);

assign select_ln35_2_fu_427_p3 = ((icmp_ln11_fu_365_p2[0:0] === 1'b1) ? add_ln26_4_fu_421_p2 : r_fu_347_p2);

assign select_ln35_3_fu_465_p3 = ((icmp_ln11_fu_365_p2[0:0] === 1'b1) ? 5'd3 : 5'd2);

assign select_ln35_4_fu_539_p3 = ((or_ln35_fu_533_p2[0:0] === 1'b1) ? 6'd0 : f_0_reg_236);

assign select_ln35_5_fu_547_p3 = ((and_ln35_fu_521_p2[0:0] === 1'b1) ? c_fu_527_p2 : select_ln35_fu_371_p3);

assign select_ln35_fu_371_p3 = ((icmp_ln11_fu_365_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_225);

assign sext_ln26_fu_759_p1 = $signed(add_ln26_10_fu_754_p2);

assign sub_ln26_1_fu_459_p2 = (zext_ln26_3_fu_443_p1 - zext_ln26_4_fu_455_p1);

assign sub_ln26_2_fu_503_p2 = (zext_ln26_5_fu_487_p1 - zext_ln26_6_fu_499_p1);

assign sub_ln26_fu_415_p2 = (zext_ln26_1_fu_399_p1 - zext_ln26_2_fu_411_p1);

assign tmp_10_fu_491_p3 = {{add_ln35_fu_473_p2}, {2'd0}};

assign tmp_11_fu_559_p3 = {{grp_fu_833_p3}, {5'd0}};

assign tmp_12_fu_609_p3 = {{wc_0_0_reg_259}, {5'd0}};

assign tmp_13_fu_666_p3 = {{wc_0_1_reg_281}, {5'd0}};

assign tmp_14_fu_723_p3 = {{wc_0_2_reg_303}, {5'd0}};

assign tmp_1_fu_391_p3 = {{select_ln35_1_fu_379_p3}, {5'd0}};

assign tmp_2_fu_403_p3 = {{select_ln35_1_fu_379_p3}, {2'd0}};

assign tmp_7_fu_435_p3 = {{select_ln35_2_fu_427_p3}, {5'd0}};

assign tmp_8_fu_447_p3 = {{select_ln35_2_fu_427_p3}, {2'd0}};

assign tmp_9_fu_479_p3 = {{add_ln35_fu_473_p2}, {5'd0}};

assign tmp_fu_786_p4 = {{bitcast_ln34_fu_782_p1[30:23]}};

assign trunc_ln34_fu_796_p1 = bitcast_ln34_fu_782_p1[22:0];

assign xor_ln35_fu_509_p2 = (icmp_ln11_fu_365_p2 ^ 1'd1);

assign zext_ln11_fu_566_p1 = tmp_11_fu_559_p3;

assign zext_ln21_1_fu_662_p1 = wc_0_1_reg_281;

assign zext_ln21_2_fu_719_p1 = wc_0_2_reg_303;

assign zext_ln21_fu_605_p1 = wc_0_0_reg_259;

assign zext_ln26_10_fu_645_p1 = add_ln26_6_fu_640_p2;

assign zext_ln26_11_fu_674_p1 = tmp_13_fu_666_p3;

assign zext_ln26_12_fu_683_p1 = add_ln26_7_fu_678_p2;

assign zext_ln26_13_fu_693_p1 = add_ln26_fu_688_p2;

assign zext_ln26_14_fu_702_p1 = add_ln26_8_fu_697_p2;

assign zext_ln26_15_fu_731_p1 = tmp_14_fu_723_p3;

assign zext_ln26_16_fu_740_p1 = add_ln26_9_fu_735_p2;

assign zext_ln26_17_fu_750_p1 = add_ln26_3_fu_745_p2;

assign zext_ln26_1_fu_399_p1 = tmp_1_fu_391_p3;

assign zext_ln26_2_fu_411_p1 = tmp_2_fu_403_p3;

assign zext_ln26_3_fu_443_p1 = tmp_7_fu_435_p3;

assign zext_ln26_4_fu_455_p1 = tmp_8_fu_447_p3;

assign zext_ln26_5_fu_487_p1 = tmp_9_fu_479_p3;

assign zext_ln26_6_fu_499_p1 = tmp_10_fu_491_p3;

assign zext_ln26_7_fu_617_p1 = tmp_12_fu_609_p3;

assign zext_ln26_8_fu_626_p1 = add_ln26_5_fu_621_p2;

assign zext_ln26_9_fu_636_p1 = add_ln26_1_fu_631_p2;

assign zext_ln26_fu_570_p1 = select_ln35_4_fu_539_p3;

assign zext_ln35_2_fu_574_p1 = select_ln35_4_fu_539_p3;

assign zext_ln35_3_fu_578_p1 = select_ln35_4_fu_539_p3;

assign zext_ln35_4_fu_588_p1 = add_ln35_2_fu_582_p2;

always @ (posedge ap_clk) begin
    sub_ln26_reg_860[1:0] <= 2'b00;
    sub_ln26_1_reg_865[1:0] <= 2'b00;
    sub_ln26_2_reg_870[1:0] <= 2'b00;
    zext_ln26_reg_888[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_893[7:6] <= 2'b00;
end

endmodule //conv_1
