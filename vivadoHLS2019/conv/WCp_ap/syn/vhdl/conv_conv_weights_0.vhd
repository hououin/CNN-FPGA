-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010001011000000001000", 
    1 => "10111100001010100000100001111101", 
    2 => "00111110100100000100001000001111", 
    3 => "10111110100111101110110011100001", 
    4 => "10111101001110101000001011101000", 
    5 => "10111110101111000011001000100011", 
    6 => "10111110100001010000100111100001", 
    7 => "00111110000000001100010110101000", 
    8 => "10111101100000000111111101100111", 
    9 => "10111101001110010110110100001001", 
    10 => "00111110001111110010101000010111", 
    11 => "00111110100100011011011000101100", 
    12 => "10111101111111010111101110100110", 
    13 => "00111011011010011100010001010100", 
    14 => "00111110010100001110000100101111", 
    15 => "10111110101011101011011111001100", 
    16 => "10111010110110011001010001011011", 
    17 => "00111101101010100011110001100100", 
    18 => "00111110000101001010100001111110", 
    19 => "00111110100100011111101001010101", 
    20 => "00111110010010001100011111100011", 
    21 => "10111110001011101101011000110100", 
    22 => "10111101001001011110011001111001", 
    23 => "00111101010111000011000001001101", 
    24 => "10111110100111001001000000111111", 
    25 => "10111110001110100100100111000011", 
    26 => "00111101011011101110111110100010", 
    27 => "10111110001100110100010100000111", 
    28 => "00111110011000100110101001100110", 
    29 => "10111110100010010010000001011100", 
    30 => "00111101010011110111111011000011", 
    31 => "00111100011000110101001111111000", 
    32 => "00111100100111101101111000010010", 
    33 => "10111101001100111010100110110000", 
    34 => "10111101000110010101101110111100", 
    35 => "00111110100100101001100111011001", 
    36 => "00111110011011001001001010011011", 
    37 => "00111110001100100001111100101010", 
    38 => "10111110011101000100001010000101", 
    39 => "10111100111100111110100010011011", 
    40 => "10111110101001010110011111111101", 
    41 => "10111110001000100001111111110011", 
    42 => "10111110100000010001101100111111", 
    43 => "00111110000011001111110001000000", 
    44 => "10111101100110001000110000011110", 
    45 => "00111101101000111010101100000000", 
    46 => "10111101110101110011101100000000", 
    47 => "10111101110010001000110011100111", 
    48 => "10111101011110010001111101110001", 
    49 => "10111110001000010000000011100111", 
    50 => "10111110001100010001111001000011", 
    51 => "00111101011100100001011100001001", 
    52 => "10111101000100100110110001111111", 
    53 => "10111110101101110110100111001011", 
    54 => "10111100010000110100110000011011", 
    55 => "00111110001001001111011011100000", 
    56 => "00111110100111001010000011100100", 
    57 => "10111101010100011111100000011010", 
    58 => "00111110001001111001111011100000", 
    59 => "00111101000010111010111110010110", 
    60 => "10111101000001111111110111000110", 
    61 => "10111110100011011000111011101011", 
    62 => "00111101010110011100100111010110", 
    63 => "00111110000000110010110011101001", 
    64 => "10111101110101100101110111000000", 
    65 => "00111101011010100011110111110111", 
    66 => "00111110011000000010011101010010", 
    67 => "00111101100110010111000000101110", 
    68 => "00111101110010111101011001100010", 
    69 => "10111110100010100001000010111111", 
    70 => "00111101110101001100000010011100", 
    71 => "00111110000110110110100001001001", 
    72 => "00111100110001010011001010100101", 
    73 => "10111110000111001011100010011101", 
    74 => "10111101010000111101011010000100", 
    75 => "10111110011010111001101000010111", 
    76 => "00111110000101101000010010001100", 
    77 => "10111110010000011001101110010001", 
    78 => "00111101011011010100101000011011", 
    79 => "10111110000010000011001011111101", 
    80 => "00111101110101010011100110111001", 
    81 => "10111101100101011111000010110011", 
    82 => "00111101110110111000101110101100", 
    83 => "10111110000111111000110000100010", 
    84 => "10111101010101101001111000111101", 
    85 => "10111110110000010010101011111010", 
    86 => "00111110100101100011101111101111", 
    87 => "10111010101100001010111101100000", 
    88 => "10111110101111001011001010110111", 
    89 => "00111110001111110101111101001110", 
    90 => "10111110100001111110000101110110", 
    91 => "10111100010000101101011010101010", 
    92 => "10111100101111100001001000011111", 
    93 => "00111110100110010100011110101110", 
    94 => "10111110010010110011111101100100", 
    95 => "10111101100011100000000110011011", 
    96 => "00111110000100111010101100000000", 
    97 => "00111101110100001011111100011010", 
    98 => "10111110111011011101000011111010", 
    99 => "00111100011110101110101111000100", 
    100 => "00111101011010010111101011101110", 
    101 => "00111101110010110000001110011111", 
    102 => "00111101110110001101001111110010", 
    103 => "10111101110110101000101011000110", 
    104 => "00111110011001110011010101111110", 
    105 => "00111110010111000010111000110100", 
    106 => "00111101000011011010101100011001", 
    107 => "00111101101111011001001100111110", 
    108 => "10111110001010111010100100001001", 
    109 => "10111110100111000001001100010010", 
    110 => "10111110010111001100011010000010", 
    111 => "00111110000111100000101011001000", 
    112 => "00111101011000001111010111100100", 
    113 => "00111110001000010101101010001110", 
    114 => "00111100101011011101100111000010", 
    115 => "00111101110011110011010001010000", 
    116 => "00111101100101111101000001101100", 
    117 => "00111110100000000101010101010100", 
    118 => "00111101111000001100100001000111", 
    119 => "10111101011100110011111010111100", 
    120 => "10111110101111000101110011111111", 
    121 => "10111101100011011100011001011100", 
    122 => "10111110101000011101101010011101", 
    123 => "00111110100001100010010101100011", 
    124 => "00111101110100011110010000101110", 
    125 => "00111110000101111001011011000000", 
    126 => "10111010100010110001000101000001", 
    127 => "00111110011000010000110100111001", 
    128 => "00111101101001010111100101101100", 
    129 => "10111101000000100111111010010101", 
    130 => "00111110100001001000110000001101", 
    131 => "10111101011001110010001100100101", 
    132 => "10111110010111101110000011110100", 
    133 => "00111110010000100011101010110000", 
    134 => "00111110011011110000111010010001", 
    135 => "10111110011000110100110100100111", 
    136 => "10111110100111001110000000110011", 
    137 => "00111101010100101001000000100101", 
    138 => "10111110011010011000000010110010", 
    139 => "00111101101101001100111000111110", 
    140 => "00111110010000101010001111001111", 
    141 => "00111110000010000110011101101010", 
    142 => "00111110001111101010100001010100", 
    143 => "00111110011100111001100101110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_0 is
    component conv_conv_weights_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_0_rom_U :  component conv_conv_weights_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


