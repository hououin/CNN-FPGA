-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011111110101101010010110", 
    1 => "10111100001011001010001101100010", 
    2 => "00111011011000011101011001001001", 
    3 => "10111110101010000100000110101011", 
    4 => "10111110000000110011111101000010", 
    5 => "00111110011010111000111111011110", 
    6 => "00111111000001100100001110111011", 
    7 => "10111111000100010000101101010010", 
    8 => "00111110011100101111110001101001", 
    9 => "10111111000010001101111010100000", 
    10 => "10111110000110111101111001000000", 
    11 => "10111110011111001010010011110100", 
    12 => "10111110101101011110000011111000", 
    13 => "00111110010000111000010000110100", 
    14 => "10111111011010111111011110001100", 
    15 => "00111110011000101011101110101010", 
    16 => "10111110010011101101001110010101", 
    17 => "00111110100000110101110111001100", 
    18 => "10111110100011100101110011110110", 
    19 => "10111110110010110010111110001000", 
    20 => "10111110011101001111111101000011", 
    21 => "00111100010011111001000110100011", 
    22 => "00111011111111010001000100111000", 
    23 => "10111110001101111011101111111001", 
    24 => "00111101110100100001110101010100", 
    25 => "10111110110000010010001001110101", 
    26 => "00111110001100000111101000101001", 
    27 => "10111110000101000010100011010100", 
    28 => "10111101101100111011110000001010", 
    29 => "00111110000010111000001010000000", 
    30 => "10111111001111101000001111010011", 
    31 => "10111100110100100010010000100101", 
    32 => "10111110010111101011101110111010", 
    33 => "10111110100101010111001110101000", 
    34 => "10111111000011010100110110100101", 
    35 => "10111111001000111110010000000100", 
    36 => "10111101101101100110001001111000", 
    37 => "00111101101000100101111100100000", 
    38 => "00111110010011110011101010011011", 
    39 => "10111111001000001110111100110101", 
    40 => "00111101100110010000010010110100", 
    41 => "10111110111000111000100001100110", 
    42 => "00111010101001011010110011001101", 
    43 => "10111110011000110111110111101001", 
    44 => "10111110000010000011011110110101", 
    45 => "10111101101100001110000000100010", 
    46 => "10111110101001100000011010111000", 
    47 => "10111101110000101010110111000101", 
    48 => "10111110110110111000111000101010", 
    49 => "10111101000101110011101001111001", 
    50 => "00111101000110011000001110010100", 
    51 => "10111110000001111000010100101111", 
    52 => "00111101011100010110010011000111", 
    53 => "00111110100100110100001001101000", 
    54 => "10111110011000000010011111011001", 
    55 => "10111110000110101100100100101010", 
    56 => "10111110101011010001011101100001", 
    57 => "10111110100001000000101011010000", 
    58 => "10111110111001001000001010011101", 
    59 => "10111110100000011101100111010011", 
    60 => "10111101101101100010110011111110", 
    61 => "00111110101000110101111101011111", 
    62 => "10111110111010001000111001111010", 
    63 => "00111101111010111110100000110110", 
    64 => "10111110011010010111110000111101", 
    65 => "10111110101000110010000011011010", 
    66 => "10111101110010011110010111100010", 
    67 => "10111111100100110111101011001100", 
    68 => "00111110101000010000110100010111", 
    69 => "00111110100100001001101010101010", 
    70 => "10111100001011010101001110001011", 
    71 => "00111101111000111101110111011011", 
    72 => "00111101101110010111110111010000", 
    73 => "10111110011011101000111110110000", 
    74 => "00111100110100111001000100001100", 
    75 => "10111110010010011011110010111010", 
    76 => "10111101110011011101110011101000", 
    77 => "00111100111111111100110110101011", 
    78 => "10111111001100011111010100111000", 
    79 => "00111110010010001001101010001001", 
    80 => "10111110000101110101110111011101", 
    81 => "10111110111100001000001000101000", 
    82 => "10111110100110011011101101001001", 
    83 => "10111100100011001000100010100100", 
    84 => "00111111000000101110110110011010", 
    85 => "00111110100010100000110000101000", 
    86 => "10111101110011100100010100111101", 
    87 => "10111110000011000011100001101101", 
    88 => "00111101110011011011100111000111", 
    89 => "10111110101001001000000101101111", 
    90 => "10111101111011000000110111110110", 
    91 => "10111110100110100001001111000010", 
    92 => "10111110000010100101000010010100", 
    93 => "10111111000110101100011010011011", 
    94 => "10111110100000111100111110010010", 
    95 => "10111110001001110001110110100011", 
    96 => "10111101111101011110100001001111", 
    97 => "10111110000011111000010110010100", 
    98 => "10111110000100000111011001111101", 
    99 => "10111111000000010101001100100110", 
    100 => "10111101100111001100011111010010", 
    101 => "10111101110111011000111100001100", 
    102 => "10111110010000011001001101110001", 
    103 => "00111110100100001111100000011111", 
    104 => "10111110011010010011010111111100", 
    105 => "00111110101010010000101011011101", 
    106 => "10111110001001000010001001000110", 
    107 => "10111110100101010111110101111100", 
    108 => "00111101001111011101110010100101", 
    109 => "00111100101010011011011010110011", 
    110 => "10111101100111001001101000110101", 
    111 => "10111101000010000010010010010010", 
    112 => "10111110101001111111001101101011", 
    113 => "10111110101010111010111001101000", 
    114 => "10111110011001101011000010010110", 
    115 => "10111111001001000001010011000110", 
    116 => "00111110000100111010010000101111", 
    117 => "00111101011011000101100111111011", 
    118 => "00111110101001100110100101101010", 
    119 => "00111110010001110111010100110010", 
    120 => "10111110100001000100010110101010", 
    121 => "10111110011001010010100100110101", 
    122 => "10111110001000101111111111010010", 
    123 => "10111101001110001011100110111011", 
    124 => "00111101110111101010101100110110", 
    125 => "10111110010011010010010010011110", 
    126 => "00111101111000011010110001011000", 
    127 => "10111110100100011110001001011000", 
    128 => "00111100010111100010111011110101", 
    129 => "10111110000011001010000111001111", 
    130 => "00111110001110010000011100010000", 
    131 => "10111110000110011101111101010101", 
    132 => "00111110100001100101100000011101", 
    133 => "10111110010001111010100001010000", 
    134 => "00111101001111010010111110100001", 
    135 => "00111101101101100111101010010110", 
    136 => "00111101010001110111100010011010", 
    137 => "10111101100100101000101011100111", 
    138 => "10111110100000001110011010110000", 
    139 => "10111110100011110110010010101110", 
    140 => "10111110001011001011110111011100", 
    141 => "10111111001011111100101000000000", 
    142 => "00111110110000110101001100101110", 
    143 => "10111101110010011101001001111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_4 is
    component conv_conv_weights_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_4_rom_U :  component conv_conv_weights_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


