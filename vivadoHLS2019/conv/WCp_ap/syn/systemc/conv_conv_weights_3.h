// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_conv_weights_3_H__
#define __conv_conv_weights_3_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_conv_weights_3_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 144;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_conv_weights_3_ram) {
        ram[0] = "0b10111101101101000000110101110111";
        ram[1] = "0b10111110110100001101010100001011";
        ram[2] = "0b10111100111111000000101010011100";
        ram[3] = "0b10111110000110111010101001010000";
        ram[4] = "0b00111101111001001001000010101100";
        ram[5] = "0b10111100111011010001010110000100";
        ram[6] = "0b10111110011100000000010101100110";
        ram[7] = "0b00111101110011001110011101111100";
        ram[8] = "0b10111101111111110001011111110100";
        ram[9] = "0b00111110100111010010010101001111";
        ram[10] = "0b10111110111001000011000001110101";
        ram[11] = "0b10111110011110100010001111000110";
        ram[12] = "0b10111011011000000101000111100000";
        ram[13] = "0b00111100100110111001100010101000";
        ram[14] = "0b00111110000001101111111100111100";
        ram[15] = "0b10111110010111011001000101110001";
        ram[16] = "0b00111101001011001110111101100011";
        ram[17] = "0b10111101011000000111001010101011";
        ram[18] = "0b10111100001000111100110011110011";
        ram[19] = "0b10111101100000011011110110010010";
        ram[20] = "0b00111101110001100101000001100110";
        ram[21] = "0b00111100011010100001000001111001";
        ram[22] = "0b00111101111000111110000100001011";
        ram[23] = "0b10111110000011010100101111100111";
        ram[24] = "0b10111100110110100111100001001011";
        ram[25] = "0b00111100110110000100111011000000";
        ram[26] = "0b10111100001110101000000000011111";
        ram[27] = "0b10111110101100101010010111101100";
        ram[28] = "0b10111010100001011000001010101010";
        ram[29] = "0b10111101001101110100111001110110";
        ram[30] = "0b00111101110101111100001110100000";
        ram[31] = "0b10111101100000011111111000010101";
        ram[32] = "0b10111011111100011010000000011111";
        ram[33] = "0b00111110101010000111001110110110";
        ram[34] = "0b00111011000010100011101001100101";
        ram[35] = "0b00111101011010111111111011010000";
        ram[36] = "0b00111110000101001001000001010111";
        ram[37] = "0b00111101100101010101010101100100";
        ram[38] = "0b10111110000000000000010111011011";
        ram[39] = "0b10111101010011100010100111111110";
        ram[40] = "0b10111101101110110110010111010100";
        ram[41] = "0b10111110101101100101110110111011";
        ram[42] = "0b10111110011100000010100111011011";
        ram[43] = "0b10111110100110101101011000111101";
        ram[44] = "0b10111110000000001001100000010000";
        ram[45] = "0b00111110000110000000110001010111";
        ram[46] = "0b10111101001101010100110110101100";
        ram[47] = "0b10111110010111110011000010101100";
        ram[48] = "0b10111101101110101010110110001011";
        ram[49] = "0b00111100101001110110011110111100";
        ram[50] = "0b10111101110000111010110110101111";
        ram[51] = "0b00111101111001010100100001110010";
        ram[52] = "0b00111100001010010001101101101101";
        ram[53] = "0b10111110000011111100010100001010";
        ram[54] = "0b10111101101010110010000011101101";
        ram[55] = "0b00111110000100010000001110011100";
        ram[56] = "0b00111101101001001010010111011110";
        ram[57] = "0b00111011000111010111010100011000";
        ram[58] = "0b00111101100101001110000000011000";
        ram[59] = "0b10111110010110101100001111001010";
        ram[60] = "0b00111110000110110010100001000100";
        ram[61] = "0b10111101101110000101101110001100";
        ram[62] = "0b10111101101100110100110111011101";
        ram[63] = "0b10111100111100000100100110001101";
        ram[64] = "0b10111110000011001011000010000010";
        ram[65] = "0b10111110001000011001000001101001";
        ram[66] = "0b10111110000011110110110100011110";
        ram[67] = "0b00111110000000111101000111111011";
        ram[68] = "0b10111110000000110001101110011011";
        ram[69] = "0b00111101001011100100101010101101";
        ram[70] = "0b00111101111111000100000101011100";
        ram[71] = "0b00111110011001010000001101010000";
        ram[72] = "0b00111101110010110110001100100111";
        ram[73] = "0b10111101100000111101010101110101";
        ram[74] = "0b00111100011110100000110101110011";
        ram[75] = "0b00111101101111001000100111001011";
        ram[76] = "0b00111100110011010111010110110000";
        ram[77] = "0b00111101110100001100110010101110";
        ram[78] = "0b00111110010100110101100101111111";
        ram[79] = "0b00111101111100100000101111000010";
        ram[80] = "0b00111101001100000111000001001000";
        ram[81] = "0b10111101100001001101011110111011";
        ram[82] = "0b10111110010000100100110001100111";
        ram[83] = "0b00111100100001110000110000101100";
        ram[84] = "0b00111100000101001011100001000010";
        ram[85] = "0b10111100111101010111010101010001";
        ram[86] = "0b10111101110110111110010100001000";
        ram[87] = "0b00111101101100000110111101000011";
        ram[88] = "0b10111101010010110101100110111001";
        ram[89] = "0b00111110010001010001111100101010";
        ram[90] = "0b00111110000001101101000110011000";
        ram[91] = "0b00111110010000110101100000000101";
        ram[92] = "0b10111110100111110111011101110010";
        ram[93] = "0b10111101001101010100110010101111";
        ram[94] = "0b10111110101001010001000011100111";
        ram[95] = "0b00111110010001100110010010010000";
        ram[96] = "0b00111101011110110001010110001000";
        ram[97] = "0b00111110010100100001001110111100";
        ram[98] = "0b10111101001000010110100011010110";
        ram[99] = "0b00111101000011101010011010011101";
        ram[100] = "0b10111110100010010000010000101010";
        ram[101] = "0b10111110110010110100101100001111";
        ram[102] = "0b00111110000101111100001110011011";
        ram[103] = "0b10111110101111110111110001110110";
        ram[104] = "0b10111110010001110010110111010001";
        ram[105] = "0b10111110001111100000001000101000";
        ram[106] = "0b00111101100010101000010011001110";
        ram[107] = "0b10111100111100010011000100111000";
        ram[108] = "0b10111101010001000010111111100011";
        ram[109] = "0b10111101111011100101100010111001";
        ram[110] = "0b10111100111001011111001110110100";
        ram[111] = "0b10111110101000100101110010000100";
        ram[112] = "0b00111101011011010100100000110000";
        ram[113] = "0b00111101110110001100101011000000";
        ram[114] = "0b00111101110101001101100010100010";
        ram[115] = "0b00111101001101100101000101111100";
        ram[116] = "0b00111101100000011100100001100100";
        ram[117] = "0b00111101100101100110001111101000";
        ram[118] = "0b10111110001000101010111100000101";
        ram[119] = "0b10111101101110101000101111001100";
        ram[120] = "0b00111101000011101000010101010000";
        ram[121] = "0b10111110000001010100001011000011";
        ram[122] = "0b00111110001000101101001100111111";
        ram[123] = "0b00111101110000001011010111001100";
        ram[124] = "0b00111101000111011011100111111000";
        ram[125] = "0b10111101111100011011110101001010";
        ram[126] = "0b10111110010100000100100010110111";
        ram[127] = "0b10111110001010100111100111100011";
        ram[128] = "0b00111101011110001100010000001101";
        ram[129] = "0b00111110001011001010101000100101";
        ram[130] = "0b10111101100111100101111010110001";
        ram[131] = "0b10111101111101100100111100000110";
        ram[132] = "0b00111101010110001101110100101000";
        ram[133] = "0b10111101000010100100110111111111";
        ram[134] = "0b00111101101100010000101101111010";
        ram[135] = "0b10111110101010110100110010010011";
        ram[136] = "0b00111110010010111000010101010100";
        ram[137] = "0b10111101101100110100000001000011";
        ram[138] = "0b00111110100010000110010010111110";
        ram[139] = "0b10111101000101011100001010101101";
        ram[140] = "0b10111110100101000101101100011101";
        ram[141] = "0b00111110000001110011011110110001";
        ram[142] = "0b10111010001001101010001011011010";
        ram[143] = "0b10111110000000010010111101010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_conv_weights_3) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 144;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_conv_weights_3_ram* meminst;


SC_CTOR(conv_conv_weights_3) {
meminst = new conv_conv_weights_3_ram("conv_conv_weights_3_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_conv_weights_3() {
    delete meminst;
}


};//endmodule
#endif
