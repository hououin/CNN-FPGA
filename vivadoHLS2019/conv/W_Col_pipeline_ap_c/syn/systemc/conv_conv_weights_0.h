// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_conv_weights_0_H__
#define __conv_conv_weights_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_conv_weights_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 144;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_conv_weights_0_ram) {
        ram[0] = "0b00111101101010001011000000001000";
        ram[1] = "0b10111100001010100000100001111101";
        ram[2] = "0b00111110100100000100001000001111";
        ram[3] = "0b10111110100111101110110011100001";
        ram[4] = "0b10111101001110101000001011101000";
        ram[5] = "0b10111110101111000011001000100011";
        ram[6] = "0b10111110100001010000100111100001";
        ram[7] = "0b00111110000000001100010110101000";
        ram[8] = "0b10111101100000000111111101100111";
        ram[9] = "0b10111101001110010110110100001001";
        ram[10] = "0b00111110001111110010101000010111";
        ram[11] = "0b00111110100100011011011000101100";
        ram[12] = "0b10111101111111010111101110100110";
        ram[13] = "0b00111011011010011100010001010100";
        ram[14] = "0b00111110010100001110000100101111";
        ram[15] = "0b10111110101011101011011111001100";
        ram[16] = "0b10111010110110011001010001011011";
        ram[17] = "0b00111101101010100011110001100100";
        ram[18] = "0b00111110000101001010100001111110";
        ram[19] = "0b00111110100100011111101001010101";
        ram[20] = "0b00111110010010001100011111100011";
        ram[21] = "0b10111110001011101101011000110100";
        ram[22] = "0b10111101001001011110011001111001";
        ram[23] = "0b00111101010111000011000001001101";
        ram[24] = "0b10111110100111001001000000111111";
        ram[25] = "0b10111110001110100100100111000011";
        ram[26] = "0b00111101011011101110111110100010";
        ram[27] = "0b10111110001100110100010100000111";
        ram[28] = "0b00111110011000100110101001100110";
        ram[29] = "0b10111110100010010010000001011100";
        ram[30] = "0b00111101010011110111111011000011";
        ram[31] = "0b00111100011000110101001111111000";
        ram[32] = "0b00111100100111101101111000010010";
        ram[33] = "0b10111101001100111010100110110000";
        ram[34] = "0b10111101000110010101101110111100";
        ram[35] = "0b00111110100100101001100111011001";
        ram[36] = "0b00111110011011001001001010011011";
        ram[37] = "0b00111110001100100001111100101010";
        ram[38] = "0b10111110011101000100001010000101";
        ram[39] = "0b10111100111100111110100010011011";
        ram[40] = "0b10111110101001010110011111111101";
        ram[41] = "0b10111110001000100001111111110011";
        ram[42] = "0b10111110100000010001101100111111";
        ram[43] = "0b00111110000011001111110001000000";
        ram[44] = "0b10111101100110001000110000011110";
        ram[45] = "0b00111101101000111010101100000000";
        ram[46] = "0b10111101110101110011101100000000";
        ram[47] = "0b10111101110010001000110011100111";
        ram[48] = "0b10111101011110010001111101110001";
        ram[49] = "0b10111110001000010000000011100111";
        ram[50] = "0b10111110001100010001111001000011";
        ram[51] = "0b00111101011100100001011100001001";
        ram[52] = "0b10111101000100100110110001111111";
        ram[53] = "0b10111110101101110110100111001011";
        ram[54] = "0b10111100010000110100110000011011";
        ram[55] = "0b00111110001001001111011011100000";
        ram[56] = "0b00111110100111001010000011100100";
        ram[57] = "0b10111101010100011111100000011010";
        ram[58] = "0b00111110001001111001111011100000";
        ram[59] = "0b00111101000010111010111110010110";
        ram[60] = "0b10111101000001111111110111000110";
        ram[61] = "0b10111110100011011000111011101011";
        ram[62] = "0b00111101010110011100100111010110";
        ram[63] = "0b00111110000000110010110011101001";
        ram[64] = "0b10111101110101100101110111000000";
        ram[65] = "0b00111101011010100011110111110111";
        ram[66] = "0b00111110011000000010011101010010";
        ram[67] = "0b00111101100110010111000000101110";
        ram[68] = "0b00111101110010111101011001100010";
        ram[69] = "0b10111110100010100001000010111111";
        ram[70] = "0b00111101110101001100000010011100";
        ram[71] = "0b00111110000110110110100001001001";
        ram[72] = "0b00111100110001010011001010100101";
        ram[73] = "0b10111110000111001011100010011101";
        ram[74] = "0b10111101010000111101011010000100";
        ram[75] = "0b10111110011010111001101000010111";
        ram[76] = "0b00111110000101101000010010001100";
        ram[77] = "0b10111110010000011001101110010001";
        ram[78] = "0b00111101011011010100101000011011";
        ram[79] = "0b10111110000010000011001011111101";
        ram[80] = "0b00111101110101010011100110111001";
        ram[81] = "0b10111101100101011111000010110011";
        ram[82] = "0b00111101110110111000101110101100";
        ram[83] = "0b10111110000111111000110000100010";
        ram[84] = "0b10111101010101101001111000111101";
        ram[85] = "0b10111110110000010010101011111010";
        ram[86] = "0b00111110100101100011101111101111";
        ram[87] = "0b10111010101100001010111101100000";
        ram[88] = "0b10111110101111001011001010110111";
        ram[89] = "0b00111110001111110101111101001110";
        ram[90] = "0b10111110100001111110000101110110";
        ram[91] = "0b10111100010000101101011010101010";
        ram[92] = "0b10111100101111100001001000011111";
        ram[93] = "0b00111110100110010100011110101110";
        ram[94] = "0b10111110010010110011111101100100";
        ram[95] = "0b10111101100011100000000110011011";
        ram[96] = "0b00111110000100111010101100000000";
        ram[97] = "0b00111101110100001011111100011010";
        ram[98] = "0b10111110111011011101000011111010";
        ram[99] = "0b00111100011110101110101111000100";
        ram[100] = "0b00111101011010010111101011101110";
        ram[101] = "0b00111101110010110000001110011111";
        ram[102] = "0b00111101110110001101001111110010";
        ram[103] = "0b10111101110110101000101011000110";
        ram[104] = "0b00111110011001110011010101111110";
        ram[105] = "0b00111110010111000010111000110100";
        ram[106] = "0b00111101000011011010101100011001";
        ram[107] = "0b00111101101111011001001100111110";
        ram[108] = "0b10111110001010111010100100001001";
        ram[109] = "0b10111110100111000001001100010010";
        ram[110] = "0b10111110010111001100011010000010";
        ram[111] = "0b00111110000111100000101011001000";
        ram[112] = "0b00111101011000001111010111100100";
        ram[113] = "0b00111110001000010101101010001110";
        ram[114] = "0b00111100101011011101100111000010";
        ram[115] = "0b00111101110011110011010001010000";
        ram[116] = "0b00111101100101111101000001101100";
        ram[117] = "0b00111110100000000101010101010100";
        ram[118] = "0b00111101111000001100100001000111";
        ram[119] = "0b10111101011100110011111010111100";
        ram[120] = "0b10111110101111000101110011111111";
        ram[121] = "0b10111101100011011100011001011100";
        ram[122] = "0b10111110101000011101101010011101";
        ram[123] = "0b00111110100001100010010101100011";
        ram[124] = "0b00111101110100011110010000101110";
        ram[125] = "0b00111110000101111001011011000000";
        ram[126] = "0b10111010100010110001000101000001";
        ram[127] = "0b00111110011000010000110100111001";
        ram[128] = "0b00111101101001010111100101101100";
        ram[129] = "0b10111101000000100111111010010101";
        ram[130] = "0b00111110100001001000110000001101";
        ram[131] = "0b10111101011001110010001100100101";
        ram[132] = "0b10111110010111101110000011110100";
        ram[133] = "0b00111110010000100011101010110000";
        ram[134] = "0b00111110011011110000111010010001";
        ram[135] = "0b10111110011000110100110100100111";
        ram[136] = "0b10111110100111001110000000110011";
        ram[137] = "0b00111101010100101001000000100101";
        ram[138] = "0b10111110011010011000000010110010";
        ram[139] = "0b00111101101101001100111000111110";
        ram[140] = "0b00111110010000101010001111001111";
        ram[141] = "0b00111110000010000110011101101010";
        ram[142] = "0b00111110001111101010100001010100";
        ram[143] = "0b00111110011100111001100101110000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_conv_weights_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 144;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_conv_weights_0_ram* meminst;


SC_CTOR(conv_conv_weights_0) {
meminst = new conv_conv_weights_0_ram("conv_conv_weights_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_conv_weights_0() {
    delete meminst;
}


};//endmodule
#endif
