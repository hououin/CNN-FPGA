-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.780550,HLS_SYN_LAT=484001,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=10,HLS_SYN_FF=903,HLS_SYN_LUT=2038,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (33 downto 0) := "0000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (33 downto 0) := "0000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (33 downto 0) := "0000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (33 downto 0) := "0000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (33 downto 0) := "0000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (33 downto 0) := "0000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (33 downto 0) := "0001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (33 downto 0) := "0010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (33 downto 0) := "0100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (33 downto 0) := "1000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_3_ce0 : STD_LOGIC;
    signal conv_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_4_ce0 : STD_LOGIC;
    signal conv_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_5_ce0 : STD_LOGIC;
    signal conv_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_fu_385_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_fu_379_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal add_ln8_fu_429_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_839 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_844 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_423_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_455_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_849 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_fu_497_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_reg_855 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_505_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_3_reg_860 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_524_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_866 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_528_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_2_reg_871 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out_addr_reg_876 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln18_1_fu_553_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_1_reg_884 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal select_ln18_1_fu_579_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_889 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln18_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_5_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_reg_894 : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln26_1_fu_681_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_908 : STD_LOGIC_VECTOR (10 downto 0);
    signal wc_fu_692_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_922 : STD_LOGIC_VECTOR (1 downto 0);
    signal f_fu_698_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_932 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_709_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln11_reg_937 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal tmp_1_4_reg_1027 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_5_reg_1032 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal indvar_flatten21_reg_278 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal r_0_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_300 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_312 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_323 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_334 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_345 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_368 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_4_fu_542_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_721_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_751_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_379_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_379_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_fu_385_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_435_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_447_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_485_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_3_fu_532_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_517_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_536_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln21_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_559_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_591_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_599_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_587_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_609_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_613_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_fu_571_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln26_4_fu_626_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_603_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_630_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_cast_fu_636_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_2_fu_644_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_fu_622_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_654_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_826_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_670_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_663_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_677_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln11_1_fu_703_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln26_fu_716_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_4_fu_726_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_736_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_746_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_756_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_766_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_770_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_780_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_817_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_817_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_817_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_826_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_826_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_826_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_817_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_817_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_826_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_826_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_conv_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_conv_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_conv_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_weights_3_U : component conv_conv_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_address0,
        ce0 => conv_weights_3_ce0,
        q0 => conv_weights_3_q0);

    conv_weights_4_U : component conv_conv_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_address0,
        ce0 => conv_weights_4_ce0,
        q0 => conv_weights_4_q0);

    conv_weights_5_U : component conv_conv_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_address0,
        ce0 => conv_weights_5_ce0,
        q0 => conv_weights_5_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_379_p0,
        din1 => grp_fu_379_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_379_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_385_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_385_p2);

    conv_fmul_32ns_32cud_U3 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_5_q0,
        din1 => input_r_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    conv_fcmp_32ns_32dEe_U4 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_379_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_401_p2);

    conv_mac_muladd_4eOg_U5 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_817_p0,
        din1 => grp_fu_817_p1,
        din2 => grp_fu_817_p2,
        dout => grp_fu_817_p3);

    conv_mac_muladd_4eOg_U6 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_826_p0,
        din1 => grp_fu_826_p1,
        din2 => grp_fu_826_p2,
        dout => grp_fu_826_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                c_0_reg_312 <= select_ln35_3_reg_860;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_312 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_323_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                f_0_reg_323 <= f_reg_932;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_323 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvar_flatten21_reg_278 <= add_ln8_reg_839;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_278 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_300_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                indvar_flatten7_reg_300 <= select_ln11_reg_937;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_300 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_334_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                indvar_flatten_reg_334 <= add_ln18_1_reg_884;
            elsif (((icmp_ln8_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_334 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                r_0_reg_289 <= select_ln35_1_reg_849;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_356_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                w_sum_1_reg_356 <= grp_fu_379_p2;
            elsif (((icmp_ln8_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_1_reg_356 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                wc_0_reg_368 <= wc_reg_922;
            elsif (((icmp_ln8_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_368 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_345_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                wr_0_reg_345 <= select_ln18_1_reg_889;
            elsif (((icmp_ln8_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_345 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln18_1_reg_884 <= add_ln18_1_fu_553_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_839 <= add_ln8_fu_429_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_423_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_876 <= zext_ln35_4_fu_542_p1(11 - 1 downto 0);
                icmp_ln11_reg_844 <= icmp_ln11_fu_441_p2;
                select_ln35_1_reg_849 <= select_ln35_1_fu_455_p3;
                select_ln35_2_reg_855 <= select_ln35_2_fu_497_p3;
                select_ln35_3_reg_860 <= select_ln35_3_fu_505_p3;
                    zext_ln26_reg_866(4 downto 0) <= zext_ln26_fu_524_p1(4 downto 0);
                    zext_ln35_2_reg_871(4 downto 0) <= zext_ln35_2_fu_528_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_547_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                f_reg_932 <= f_fu_698_p2;
                select_ln11_reg_937 <= select_ln11_fu_709_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_412 <= grp_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_417 <= grp_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_547_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                select_ln18_1_reg_889 <= select_ln18_1_fu_579_p3;
                    sub_ln26_1_reg_908(10 downto 1) <= sub_ln26_1_fu_681_p2(10 downto 1);
                wc_reg_922 <= wc_fu_692_p2;
                    zext_ln26_5_reg_894(8 downto 0) <= zext_ln26_5_fu_649_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                tmp_1_4_reg_1027 <= grp_fu_385_p2;
                tmp_1_5_reg_1032 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_866(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_871(8 downto 5) <= "0000";
    zext_ln26_5_reg_894(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    sub_ln26_1_reg_908(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_423_p2, ap_CS_fsm_state3, icmp_ln18_fu_547_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln18_fu_547_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_703_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten7_reg_300));
    add_ln18_1_fu_553_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_334) + unsigned(ap_const_lv4_1));
    add_ln18_fu_613_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_849) + unsigned(zext_ln18_fu_609_p1));
    add_ln26_1_fu_654_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_860) + unsigned(zext_ln21_fu_622_p1));
    add_ln26_2_fu_644_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_871) + unsigned(tmp_7_cast_fu_636_p3));
    add_ln26_4_fu_726_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_908) + unsigned(ap_const_lv11_2));
    add_ln26_5_fu_736_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_908) + unsigned(ap_const_lv11_3));
    add_ln26_6_fu_746_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_908) + unsigned(ap_const_lv11_4));
    add_ln26_7_fu_756_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_908) + unsigned(ap_const_lv11_5));
    add_ln26_fu_630_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_626_p1) + unsigned(sub_ln26_fu_603_p2));
    add_ln35_1_fu_536_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_532_p1) + unsigned(tmp_2_cast_fu_517_p3));
    add_ln8_fu_429_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_278) + unsigned(ap_const_lv11_1));
    and_ln34_fu_802_p2 <= (or_ln34_fu_796_p2 and grp_fu_401_p2);
    and_ln35_fu_479_p2 <= (xor_ln35_fu_467_p2 and icmp_ln14_fu_473_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_423_p2)
    begin
        if (((icmp_ln8_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_423_p2)
    begin
        if (((icmp_ln8_fu_423_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_766_p1 <= reg_417;
    c_fu_485_p2 <= std_logic_vector(unsigned(select_ln35_fu_447_p3) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln26_reg_866(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_876;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_417 when (and_ln34_fu_802_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_5_fu_649_p1(8 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_5_reg_894(8 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_5_reg_894(8 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_address0 <= zext_ln26_5_reg_894(8 - 1 downto 0);

    conv_weights_3_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_address0 <= zext_ln26_5_reg_894(8 - 1 downto 0);

    conv_weights_4_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_weights_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_address0 <= zext_ln26_5_reg_894(8 - 1 downto 0);

    conv_weights_5_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_698_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_2_reg_855));

    grp_fu_379_p0_assign_proc : process(reg_417, ap_CS_fsm_state18, ap_CS_fsm_state30, w_sum_1_reg_356, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_379_p0 <= reg_417;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_fu_379_p0 <= w_sum_1_reg_356;
        else 
            grp_fu_379_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_379_p1_assign_proc : process(conv_bias_q0, reg_412, tmp_1_4_reg_1027, ap_CS_fsm_state18, tmp_1_5_reg_1032, ap_CS_fsm_state30, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state22, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            grp_fu_379_p1 <= conv_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_379_p1 <= tmp_1_5_reg_1032;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_379_p1 <= tmp_1_4_reg_1027;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_379_p1 <= reg_412;
        else 
            grp_fu_379_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_385_p0_assign_proc : process(conv_weights_0_q0, conv_weights_1_q0, conv_weights_2_q0, conv_weights_3_q0, conv_weights_4_q0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            grp_fu_385_p0 <= conv_weights_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_385_p0 <= conv_weights_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_385_p0 <= conv_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_385_p0 <= conv_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_fu_385_p0 <= conv_weights_0_q0;
        else 
            grp_fu_385_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_817_p0 <= grp_fu_817_p00(4 - 1 downto 0);
    grp_fu_817_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_455_p3),8));
    grp_fu_817_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_817_p2 <= grp_fu_817_p20(4 - 1 downto 0);
    grp_fu_817_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_505_p3),8));
    grp_fu_826_p0 <= grp_fu_826_p00(4 - 1 downto 0);
    grp_fu_826_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_613_p2),8));
    grp_fu_826_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_826_p2 <= grp_fu_826_p20(4 - 1 downto 0);
    grp_fu_826_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_654_p2),8));
    icmp_ln11_fu_441_p2 <= "1" when (indvar_flatten7_reg_300 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_473_p2 <= "1" when (f_0_reg_323 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_547_p2 <= "1" when (indvar_flatten_reg_334 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_565_p2 <= "1" when (wc_0_reg_368 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_790_p2 <= "1" when (trunc_ln34_fu_780_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_784_p2 <= "0" when (tmp_fu_770_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_423_p2 <= "1" when (indvar_flatten21_reg_278 = ap_const_lv11_790) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, zext_ln26_8_fu_687_p1, zext_ln26_9_fu_721_p1, zext_ln26_10_fu_731_p1, zext_ln26_11_fu_741_p1, zext_ln26_12_fu_751_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_r_address0 <= zext_ln26_12_fu_751_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_r_address0 <= zext_ln26_11_fu_741_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            input_r_address0 <= zext_ln26_10_fu_731_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_address0 <= zext_ln26_9_fu_721_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= zext_ln26_8_fu_687_p1(10 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= zext_ln26_13_fu_761_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_fu_716_p2 <= (sub_ln26_1_reg_908 or ap_const_lv11_1);
    or_ln34_fu_796_p2 <= (icmp_ln34_fu_784_p2 or icmp_ln34_1_fu_790_p2);
    or_ln35_fu_491_p2 <= (icmp_ln11_fu_441_p2 or and_ln35_fu_479_p2);
    p_shl_cast_fu_663_p3 <= (grp_fu_826_p3 & ap_const_lv3_0);
    r_fu_435_p2 <= std_logic_vector(unsigned(r_0_reg_289) + unsigned(ap_const_lv4_1));
    select_ln11_fu_709_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_844(0) = '1') else 
        add_ln11_1_fu_703_p2;
    select_ln18_1_fu_579_p3 <= 
        wr_fu_559_p2 when (icmp_ln21_fu_565_p2(0) = '1') else 
        wr_0_reg_345;
    select_ln18_fu_571_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_565_p2(0) = '1') else 
        wc_0_reg_368;
    select_ln35_1_fu_455_p3 <= 
        r_fu_435_p2 when (icmp_ln11_fu_441_p2(0) = '1') else 
        r_0_reg_289;
    select_ln35_2_fu_497_p3 <= 
        ap_const_lv5_0 when (or_ln35_fu_491_p2(0) = '1') else 
        f_0_reg_323;
    select_ln35_3_fu_505_p3 <= 
        c_fu_485_p2 when (and_ln35_fu_479_p2(0) = '1') else 
        select_ln35_fu_447_p3;
    select_ln35_fu_447_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_441_p2(0) = '1') else 
        c_0_reg_312;
    sub_ln26_1_fu_681_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_663_p3) - unsigned(zext_ln26_7_fu_677_p1));
    sub_ln26_fu_603_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_599_p1) - unsigned(zext_ln26_1_fu_587_p1));
    tmp_1_fu_670_p3 <= (grp_fu_826_p3 & ap_const_lv1_0);
    tmp_2_cast_fu_517_p3 <= (grp_fu_817_p3 & ap_const_lv4_0);
    tmp_4_fu_591_p3 <= (select_ln18_1_fu_579_p3 & ap_const_lv2_0);
    tmp_7_cast_fu_636_p3 <= (add_ln26_fu_630_p2 & ap_const_lv4_0);
    tmp_fu_770_p4 <= bitcast_ln34_fu_766_p1(30 downto 23);
    trunc_ln34_fu_780_p1 <= bitcast_ln34_fu_766_p1(23 - 1 downto 0);
    wc_fu_692_p2 <= std_logic_vector(unsigned(select_ln18_fu_571_p3) + unsigned(ap_const_lv2_1));
    wr_fu_559_p2 <= std_logic_vector(unsigned(wr_0_reg_345) + unsigned(ap_const_lv2_1));
    xor_ln35_fu_467_p2 <= (icmp_ln11_fu_441_p2 xor ap_const_lv1_1);
    zext_ln18_fu_609_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_579_p3),4));
    zext_ln21_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_571_p3),4));
    zext_ln26_10_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_726_p2),64));
    zext_ln26_11_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_736_p2),64));
    zext_ln26_12_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_746_p2),64));
    zext_ln26_13_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_756_p2),64));
    zext_ln26_1_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_579_p3),5));
    zext_ln26_2_fu_599_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_591_p3),5));
    zext_ln26_4_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_571_p3),5));
    zext_ln26_5_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_644_p2),64));
    zext_ln26_7_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_670_p3),11));
    zext_ln26_8_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_1_fu_681_p2),64));
    zext_ln26_9_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_716_p2),64));
    zext_ln26_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_497_p3),64));
    zext_ln35_2_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_497_p3),9));
    zext_ln35_3_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_497_p3),12));
    zext_ln35_4_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_536_p2),64));
end behav;
