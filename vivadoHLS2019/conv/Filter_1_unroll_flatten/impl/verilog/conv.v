// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.780550,HLS_SYN_LAT=484001,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=10,HLS_SYN_FF=903,HLS_SYN_LUT=2038,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 34'd1;
parameter    ap_ST_fsm_state2 = 34'd2;
parameter    ap_ST_fsm_state3 = 34'd4;
parameter    ap_ST_fsm_state4 = 34'd8;
parameter    ap_ST_fsm_state5 = 34'd16;
parameter    ap_ST_fsm_state6 = 34'd32;
parameter    ap_ST_fsm_state7 = 34'd64;
parameter    ap_ST_fsm_state8 = 34'd128;
parameter    ap_ST_fsm_state9 = 34'd256;
parameter    ap_ST_fsm_state10 = 34'd512;
parameter    ap_ST_fsm_state11 = 34'd1024;
parameter    ap_ST_fsm_state12 = 34'd2048;
parameter    ap_ST_fsm_state13 = 34'd4096;
parameter    ap_ST_fsm_state14 = 34'd8192;
parameter    ap_ST_fsm_state15 = 34'd16384;
parameter    ap_ST_fsm_state16 = 34'd32768;
parameter    ap_ST_fsm_state17 = 34'd65536;
parameter    ap_ST_fsm_state18 = 34'd131072;
parameter    ap_ST_fsm_state19 = 34'd262144;
parameter    ap_ST_fsm_state20 = 34'd524288;
parameter    ap_ST_fsm_state21 = 34'd1048576;
parameter    ap_ST_fsm_state22 = 34'd2097152;
parameter    ap_ST_fsm_state23 = 34'd4194304;
parameter    ap_ST_fsm_state24 = 34'd8388608;
parameter    ap_ST_fsm_state25 = 34'd16777216;
parameter    ap_ST_fsm_state26 = 34'd33554432;
parameter    ap_ST_fsm_state27 = 34'd67108864;
parameter    ap_ST_fsm_state28 = 34'd134217728;
parameter    ap_ST_fsm_state29 = 34'd268435456;
parameter    ap_ST_fsm_state30 = 34'd536870912;
parameter    ap_ST_fsm_state31 = 34'd1073741824;
parameter    ap_ST_fsm_state32 = 34'd2147483648;
parameter    ap_ST_fsm_state33 = 34'd4294967296;
parameter    ap_ST_fsm_state34 = 34'd8589934592;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [7:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [7:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire   [7:0] conv_weights_3_address0;
reg    conv_weights_3_ce0;
wire   [31:0] conv_weights_3_q0;
wire   [7:0] conv_weights_4_address0;
reg    conv_weights_4_ce0;
wire   [31:0] conv_weights_4_q0;
wire   [7:0] conv_weights_5_address0;
reg    conv_weights_5_ce0;
wire   [31:0] conv_weights_5_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_385_p2;
reg   [31:0] reg_412;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_379_p2;
reg   [31:0] reg_417;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state33;
wire   [10:0] add_ln8_fu_429_p2;
reg   [10:0] add_ln8_reg_839;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_441_p2;
reg   [0:0] icmp_ln11_reg_844;
wire   [0:0] icmp_ln8_fu_423_p2;
wire   [3:0] select_ln35_1_fu_455_p3;
reg   [3:0] select_ln35_1_reg_849;
wire   [4:0] select_ln35_2_fu_497_p3;
reg   [4:0] select_ln35_2_reg_855;
wire   [3:0] select_ln35_3_fu_505_p3;
reg   [3:0] select_ln35_3_reg_860;
wire   [63:0] zext_ln26_fu_524_p1;
reg   [63:0] zext_ln26_reg_866;
wire   [8:0] zext_ln35_2_fu_528_p1;
reg   [8:0] zext_ln35_2_reg_871;
reg   [10:0] conv_out_addr_reg_876;
wire   [3:0] add_ln18_1_fu_553_p2;
reg   [3:0] add_ln18_1_reg_884;
wire    ap_CS_fsm_state3;
wire   [1:0] select_ln18_1_fu_579_p3;
reg   [1:0] select_ln18_1_reg_889;
wire   [0:0] icmp_ln18_fu_547_p2;
wire   [63:0] zext_ln26_5_fu_649_p1;
reg   [63:0] zext_ln26_5_reg_894;
wire   [10:0] sub_ln26_1_fu_681_p2;
reg   [10:0] sub_ln26_1_reg_908;
wire   [1:0] wc_fu_692_p2;
reg   [1:0] wc_reg_922;
wire   [4:0] f_fu_698_p2;
reg   [4:0] f_reg_932;
wire   [8:0] select_ln11_fu_709_p3;
reg   [8:0] select_ln11_reg_937;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
reg   [31:0] tmp_1_4_reg_1027;
wire    ap_CS_fsm_state18;
wire   [31:0] grp_fu_395_p2;
reg   [31:0] tmp_1_5_reg_1032;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
reg   [10:0] indvar_flatten21_reg_278;
wire    ap_CS_fsm_state34;
reg   [3:0] r_0_reg_289;
reg   [8:0] indvar_flatten7_reg_300;
reg   [3:0] c_0_reg_312;
reg   [4:0] f_0_reg_323;
reg   [3:0] indvar_flatten_reg_334;
reg   [1:0] wr_0_reg_345;
reg   [31:0] w_sum_1_reg_356;
reg   [1:0] wc_0_reg_368;
wire   [63:0] zext_ln35_4_fu_542_p1;
wire   [63:0] zext_ln26_8_fu_687_p1;
wire   [63:0] zext_ln26_9_fu_721_p1;
wire   [63:0] zext_ln26_10_fu_731_p1;
wire   [63:0] zext_ln26_11_fu_741_p1;
wire   [63:0] zext_ln26_12_fu_751_p1;
wire   [63:0] zext_ln26_13_fu_761_p1;
reg   [31:0] grp_fu_379_p0;
reg   [31:0] grp_fu_379_p1;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
reg   [31:0] grp_fu_385_p0;
wire   [3:0] r_fu_435_p2;
wire   [0:0] icmp_ln14_fu_473_p2;
wire   [0:0] xor_ln35_fu_467_p2;
wire   [3:0] select_ln35_fu_447_p3;
wire   [0:0] and_ln35_fu_479_p2;
wire   [0:0] or_ln35_fu_491_p2;
wire   [3:0] c_fu_485_p2;
wire   [7:0] grp_fu_817_p3;
wire   [11:0] zext_ln35_3_fu_532_p1;
wire   [11:0] tmp_2_cast_fu_517_p3;
wire   [11:0] add_ln35_1_fu_536_p2;
wire   [0:0] icmp_ln21_fu_565_p2;
wire   [1:0] wr_fu_559_p2;
wire   [3:0] tmp_4_fu_591_p3;
wire   [4:0] zext_ln26_2_fu_599_p1;
wire   [4:0] zext_ln26_1_fu_587_p1;
wire   [3:0] zext_ln18_fu_609_p1;
wire   [3:0] add_ln18_fu_613_p2;
wire   [1:0] select_ln18_fu_571_p3;
wire   [4:0] zext_ln26_4_fu_626_p1;
wire   [4:0] sub_ln26_fu_603_p2;
wire   [4:0] add_ln26_fu_630_p2;
wire   [8:0] tmp_7_cast_fu_636_p3;
wire   [8:0] add_ln26_2_fu_644_p2;
wire   [3:0] zext_ln21_fu_622_p1;
wire   [3:0] add_ln26_1_fu_654_p2;
wire   [7:0] grp_fu_826_p3;
wire   [8:0] tmp_1_fu_670_p3;
wire   [10:0] p_shl_cast_fu_663_p3;
wire   [10:0] zext_ln26_7_fu_677_p1;
wire   [8:0] add_ln11_1_fu_703_p2;
wire   [10:0] or_ln26_fu_716_p2;
wire   [10:0] add_ln26_4_fu_726_p2;
wire   [10:0] add_ln26_5_fu_736_p2;
wire   [10:0] add_ln26_6_fu_746_p2;
wire   [10:0] add_ln26_7_fu_756_p2;
wire   [31:0] bitcast_ln34_fu_766_p1;
wire   [7:0] tmp_fu_770_p4;
wire   [22:0] trunc_ln34_fu_780_p1;
wire   [0:0] icmp_ln34_1_fu_790_p2;
wire   [0:0] icmp_ln34_fu_784_p2;
wire   [0:0] or_ln34_fu_796_p2;
wire   [0:0] grp_fu_401_p2;
wire   [0:0] and_ln34_fu_802_p2;
wire   [3:0] grp_fu_817_p0;
wire   [4:0] grp_fu_817_p1;
wire   [3:0] grp_fu_817_p2;
wire   [3:0] grp_fu_826_p0;
wire   [4:0] grp_fu_826_p1;
wire   [3:0] grp_fu_826_p2;
reg   [33:0] ap_NS_fsm;
wire   [7:0] grp_fu_817_p00;
wire   [7:0] grp_fu_817_p20;
wire   [7:0] grp_fu_826_p00;
wire   [7:0] grp_fu_826_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'd1;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_conv_weights_3 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_address0),
    .ce0(conv_weights_3_ce0),
    .q0(conv_weights_3_q0)
);

conv_conv_weights_4 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_address0),
    .ce0(conv_weights_4_ce0),
    .q0(conv_weights_4_q0)
);

conv_conv_weights_5 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_address0),
    .ce0(conv_weights_5_ce0),
    .q0(conv_weights_5_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_379_p0),
    .din1(grp_fu_379_p1),
    .ce(1'b1),
    .dout(grp_fu_379_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_385_p0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_385_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_5_q0),
    .din1(input_r_q1),
    .ce(1'b1),
    .dout(grp_fu_395_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_379_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_401_p2)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U5(
    .din0(grp_fu_817_p0),
    .din1(grp_fu_817_p1),
    .din2(grp_fu_817_p2),
    .dout(grp_fu_817_p3)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U6(
    .din0(grp_fu_826_p0),
    .din1(grp_fu_826_p1),
    .din2(grp_fu_826_p2),
    .dout(grp_fu_826_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        c_0_reg_312 <= select_ln35_3_reg_860;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_312 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        f_0_reg_323 <= f_reg_932;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_323 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        indvar_flatten21_reg_278 <= add_ln8_reg_839;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_278 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        indvar_flatten7_reg_300 <= select_ln11_reg_937;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_300 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        indvar_flatten_reg_334 <= add_ln18_1_reg_884;
    end else if (((icmp_ln8_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_334 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        r_0_reg_289 <= select_ln35_1_reg_849;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_289 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        w_sum_1_reg_356 <= grp_fu_379_p2;
    end else if (((icmp_ln8_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_1_reg_356 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        wc_0_reg_368 <= wc_reg_922;
    end else if (((icmp_ln8_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_368 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        wr_0_reg_345 <= select_ln18_1_reg_889;
    end else if (((icmp_ln8_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_345 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln18_1_reg_884 <= add_ln18_1_fu_553_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_839 <= add_ln8_fu_429_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_423_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_876 <= zext_ln35_4_fu_542_p1;
        icmp_ln11_reg_844 <= icmp_ln11_fu_441_p2;
        select_ln35_1_reg_849 <= select_ln35_1_fu_455_p3;
        select_ln35_2_reg_855 <= select_ln35_2_fu_497_p3;
        select_ln35_3_reg_860 <= select_ln35_3_fu_505_p3;
        zext_ln26_reg_866[4 : 0] <= zext_ln26_fu_524_p1[4 : 0];
        zext_ln35_2_reg_871[4 : 0] <= zext_ln35_2_fu_528_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_547_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_reg_932 <= f_fu_698_p2;
        select_ln11_reg_937 <= select_ln11_fu_709_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_412 <= grp_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_417 <= grp_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_547_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        select_ln18_1_reg_889 <= select_ln18_1_fu_579_p3;
        sub_ln26_1_reg_908[10 : 1] <= sub_ln26_1_fu_681_p2[10 : 1];
        wc_reg_922 <= wc_fu_692_p2;
        zext_ln26_5_reg_894[8 : 0] <= zext_ln26_5_fu_649_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        tmp_1_4_reg_1027 <= grp_fu_385_p2;
        tmp_1_5_reg_1032 <= grp_fu_395_p2;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_weights_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_weights_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_weights_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_379_p0 = reg_417;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_379_p0 = w_sum_1_reg_356;
    end else begin
        grp_fu_379_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_379_p1 = conv_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_379_p1 = tmp_1_5_reg_1032;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_379_p1 = tmp_1_4_reg_1027;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state18))) begin
        grp_fu_379_p1 = reg_412;
    end else begin
        grp_fu_379_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_385_p0 = conv_weights_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_385_p0 = conv_weights_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_385_p0 = conv_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_385_p0 = conv_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_fu_385_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_385_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_r_address0 = zext_ln26_12_fu_751_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        input_r_address0 = zext_ln26_11_fu_741_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        input_r_address0 = zext_ln26_10_fu_731_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_address0 = zext_ln26_9_fu_721_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        input_r_address0 = zext_ln26_8_fu_687_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state16))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_423_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln18_fu_547_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_703_p2 = (9'd1 + indvar_flatten7_reg_300);

assign add_ln18_1_fu_553_p2 = (indvar_flatten_reg_334 + 4'd1);

assign add_ln18_fu_613_p2 = (select_ln35_1_reg_849 + zext_ln18_fu_609_p1);

assign add_ln26_1_fu_654_p2 = (select_ln35_3_reg_860 + zext_ln21_fu_622_p1);

assign add_ln26_2_fu_644_p2 = (zext_ln35_2_reg_871 + tmp_7_cast_fu_636_p3);

assign add_ln26_4_fu_726_p2 = (sub_ln26_1_reg_908 + 11'd2);

assign add_ln26_5_fu_736_p2 = (sub_ln26_1_reg_908 + 11'd3);

assign add_ln26_6_fu_746_p2 = (sub_ln26_1_reg_908 + 11'd4);

assign add_ln26_7_fu_756_p2 = (sub_ln26_1_reg_908 + 11'd5);

assign add_ln26_fu_630_p2 = (zext_ln26_4_fu_626_p1 + sub_ln26_fu_603_p2);

assign add_ln35_1_fu_536_p2 = (zext_ln35_3_fu_532_p1 + tmp_2_cast_fu_517_p3);

assign add_ln8_fu_429_p2 = (indvar_flatten21_reg_278 + 11'd1);

assign and_ln34_fu_802_p2 = (or_ln34_fu_796_p2 & grp_fu_401_p2);

assign and_ln35_fu_479_p2 = (xor_ln35_fu_467_p2 & icmp_ln14_fu_473_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_766_p1 = reg_417;

assign c_fu_485_p2 = (select_ln35_fu_447_p3 + 4'd1);

assign conv_bias_address0 = zext_ln26_reg_866;

assign conv_out_address0 = conv_out_addr_reg_876;

assign conv_out_d0 = ((and_ln34_fu_802_p2[0:0] === 1'b1) ? reg_417 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_5_fu_649_p1;

assign conv_weights_1_address0 = zext_ln26_5_reg_894;

assign conv_weights_2_address0 = zext_ln26_5_reg_894;

assign conv_weights_3_address0 = zext_ln26_5_reg_894;

assign conv_weights_4_address0 = zext_ln26_5_reg_894;

assign conv_weights_5_address0 = zext_ln26_5_reg_894;

assign f_fu_698_p2 = (5'd1 + select_ln35_2_reg_855);

assign grp_fu_817_p0 = grp_fu_817_p00;

assign grp_fu_817_p00 = select_ln35_1_fu_455_p3;

assign grp_fu_817_p1 = 8'd11;

assign grp_fu_817_p2 = grp_fu_817_p20;

assign grp_fu_817_p20 = select_ln35_3_fu_505_p3;

assign grp_fu_826_p0 = grp_fu_826_p00;

assign grp_fu_826_p00 = add_ln18_fu_613_p2;

assign grp_fu_826_p1 = 8'd13;

assign grp_fu_826_p2 = grp_fu_826_p20;

assign grp_fu_826_p20 = add_ln26_1_fu_654_p2;

assign icmp_ln11_fu_441_p2 = ((indvar_flatten7_reg_300 == 9'd176) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_473_p2 = ((f_0_reg_323 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_547_p2 = ((indvar_flatten_reg_334 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_565_p2 = ((wc_0_reg_368 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_790_p2 = ((trunc_ln34_fu_780_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_784_p2 = ((tmp_fu_770_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_423_p2 = ((indvar_flatten21_reg_278 == 11'd1936) ? 1'b1 : 1'b0);

assign input_r_address1 = zext_ln26_13_fu_761_p1;

assign or_ln26_fu_716_p2 = (sub_ln26_1_reg_908 | 11'd1);

assign or_ln34_fu_796_p2 = (icmp_ln34_fu_784_p2 | icmp_ln34_1_fu_790_p2);

assign or_ln35_fu_491_p2 = (icmp_ln11_fu_441_p2 | and_ln35_fu_479_p2);

assign p_shl_cast_fu_663_p3 = {{grp_fu_826_p3}, {3'd0}};

assign r_fu_435_p2 = (r_0_reg_289 + 4'd1);

assign select_ln11_fu_709_p3 = ((icmp_ln11_reg_844[0:0] === 1'b1) ? 9'd1 : add_ln11_1_fu_703_p2);

assign select_ln18_1_fu_579_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? wr_fu_559_p2 : wr_0_reg_345);

assign select_ln18_fu_571_p3 = ((icmp_ln21_fu_565_p2[0:0] === 1'b1) ? 2'd0 : wc_0_reg_368);

assign select_ln35_1_fu_455_p3 = ((icmp_ln11_fu_441_p2[0:0] === 1'b1) ? r_fu_435_p2 : r_0_reg_289);

assign select_ln35_2_fu_497_p3 = ((or_ln35_fu_491_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_323);

assign select_ln35_3_fu_505_p3 = ((and_ln35_fu_479_p2[0:0] === 1'b1) ? c_fu_485_p2 : select_ln35_fu_447_p3);

assign select_ln35_fu_447_p3 = ((icmp_ln11_fu_441_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_312);

assign sub_ln26_1_fu_681_p2 = (p_shl_cast_fu_663_p3 - zext_ln26_7_fu_677_p1);

assign sub_ln26_fu_603_p2 = (zext_ln26_2_fu_599_p1 - zext_ln26_1_fu_587_p1);

assign tmp_1_fu_670_p3 = {{grp_fu_826_p3}, {1'd0}};

assign tmp_2_cast_fu_517_p3 = {{grp_fu_817_p3}, {4'd0}};

assign tmp_4_fu_591_p3 = {{select_ln18_1_fu_579_p3}, {2'd0}};

assign tmp_7_cast_fu_636_p3 = {{add_ln26_fu_630_p2}, {4'd0}};

assign tmp_fu_770_p4 = {{bitcast_ln34_fu_766_p1[30:23]}};

assign trunc_ln34_fu_780_p1 = bitcast_ln34_fu_766_p1[22:0];

assign wc_fu_692_p2 = (select_ln18_fu_571_p3 + 2'd1);

assign wr_fu_559_p2 = (wr_0_reg_345 + 2'd1);

assign xor_ln35_fu_467_p2 = (icmp_ln11_fu_441_p2 ^ 1'd1);

assign zext_ln18_fu_609_p1 = select_ln18_1_fu_579_p3;

assign zext_ln21_fu_622_p1 = select_ln18_fu_571_p3;

assign zext_ln26_10_fu_731_p1 = add_ln26_4_fu_726_p2;

assign zext_ln26_11_fu_741_p1 = add_ln26_5_fu_736_p2;

assign zext_ln26_12_fu_751_p1 = add_ln26_6_fu_746_p2;

assign zext_ln26_13_fu_761_p1 = add_ln26_7_fu_756_p2;

assign zext_ln26_1_fu_587_p1 = select_ln18_1_fu_579_p3;

assign zext_ln26_2_fu_599_p1 = tmp_4_fu_591_p3;

assign zext_ln26_4_fu_626_p1 = select_ln18_fu_571_p3;

assign zext_ln26_5_fu_649_p1 = add_ln26_2_fu_644_p2;

assign zext_ln26_7_fu_677_p1 = tmp_1_fu_670_p3;

assign zext_ln26_8_fu_687_p1 = sub_ln26_1_fu_681_p2;

assign zext_ln26_9_fu_721_p1 = or_ln26_fu_716_p2;

assign zext_ln26_fu_524_p1 = select_ln35_2_fu_497_p3;

assign zext_ln35_2_fu_528_p1 = select_ln35_2_fu_497_p3;

assign zext_ln35_3_fu_532_p1 = select_ln35_2_fu_497_p3;

assign zext_ln35_4_fu_542_p1 = add_ln35_1_fu_536_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_866[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_871[8:5] <= 4'b0000;
    zext_ln26_5_reg_894[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    sub_ln26_1_reg_908[0] <= 1'b0;
end

endmodule //conv
