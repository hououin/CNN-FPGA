-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=439473,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=739,HLS_SYN_LUT=1673,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_231 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_242 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_253 : STD_LOGIC_VECTOR (4 downto 0);
    signal wc_0_reg_264 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_275 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_287 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln8_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_321_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_808 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln11_fu_333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_347_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_818 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_fu_389_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_reg_824 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_397_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_3_reg_829 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_416_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_837 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_420_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_reg_842 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_847 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln18_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_852_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_454_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_1_reg_856 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln21_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_861 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_1_fu_480_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_866 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_fu_544_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_reg_872 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_fu_556_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_reg_878 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_2_fu_612_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_883 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_648_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_reg_893 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_weights_load_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_304_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ch_fu_707_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_918 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_3_fu_712_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_3_reg_923 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal f_fu_718_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_938 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_729_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln11_reg_943 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal w_sum_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal indvar_flatten43_reg_175 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_0_reg_186 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_197 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_209 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_220 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_235_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_246_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_257_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_268_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_phi_fu_279_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_291_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_4_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal r_fu_327_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_339_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_377_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_785_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_3_fu_424_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_3_cast_fu_409_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_428_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln21_fu_439_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_fu_460_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_492_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_472_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln18_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_538_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_532_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln21_2_fu_564_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_510_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_574_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_578_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_2_fu_586_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_1_fu_552_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_443_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_2_fu_600_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_fu_605_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_620_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_fu_594_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_624_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_cast_fu_630_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln18_fu_654_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_657_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_794_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_fu_676_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_669_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_683_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_693_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_687_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_696_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln11_1_fu_723_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln34_fu_736_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_739_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_749_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_785_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_785_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_785_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_794_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_794_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_785_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_785_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_794_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        din1 => grp_fu_298_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_load_reg_903,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_304_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_309_p2);

    conv_mac_muladd_4eOg_U4 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_785_p0,
        din1 => grp_fu_785_p1,
        din2 => grp_fu_785_p2,
        dout => grp_fu_785_p3);

    conv_mac_muladd_4eOg_U5 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_794_p0,
        din1 => grp_fu_794_p1,
        din2 => grp_fu_794_p2,
        dout => grp_fu_794_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                c_0_reg_209 <= select_ln35_3_reg_829;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_209 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_287 <= ch_reg_918;
            elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_287 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                f_0_reg_220 <= f_reg_938;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_220 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_231 <= add_ln18_1_reg_856;
            elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_231 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten29_reg_197 <= select_ln11_reg_943;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten29_reg_197 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten43_reg_175 <= add_ln8_reg_808;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten43_reg_175 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_253 <= select_ln21_3_reg_923;
            elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_253 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                r_0_reg_186 <= select_ln35_1_reg_818;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_186 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                w_sum_2_reg_275 <= grp_fu_298_p2;
            elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_275 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_264 <= select_ln21_1_reg_878;
            elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_264 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_242 <= select_ln18_1_reg_866;
            elsif (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_242 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_856 <= add_ln18_1_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln21_reg_893 <= add_ln21_fu_648_p2;
                icmp_ln21_reg_861 <= icmp_ln21_fu_466_p2;
                select_ln21_2_reg_883 <= select_ln21_2_fu_612_p3;
                select_ln21_reg_872 <= select_ln21_fu_544_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_808 <= add_ln8_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ch_reg_918 <= ch_fu_707_p2;
                select_ln21_3_reg_923 <= select_ln21_3_fu_712_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_847 <= zext_ln35_4_fu_434_p1(11 - 1 downto 0);
                icmp_ln11_reg_813 <= icmp_ln11_fu_333_p2;
                select_ln35_1_reg_818 <= select_ln35_1_fu_347_p3;
                select_ln35_2_reg_824 <= select_ln35_2_fu_389_p3;
                select_ln35_3_reg_829 <= select_ln35_3_fu_397_p3;
                    zext_ln26_reg_837(4 downto 0) <= zext_ln26_fu_416_p1(4 downto 0);
                    zext_ln35_2_reg_842(4 downto 0) <= zext_ln35_2_fu_420_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_weights_load_reg_903 <= conv_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                f_reg_938 <= f_fu_718_p2;
                select_ln11_reg_943 <= select_ln11_fu_729_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_852 <= icmp_ln18_fu_448_p2;
                icmp_ln18_reg_852_pp0_iter1_reg <= icmp_ln18_reg_852;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_866 <= select_ln18_1_fu_480_p3;
                select_ln21_1_reg_878 <= select_ln21_1_fu_556_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_1_reg_913 <= grp_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                w_sum_reg_953 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_837(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_842(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_315_p2, ap_CS_fsm_state2, icmp_ln18_fu_448_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_448_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_448_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_723_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten29_reg_197));
    add_ln18_1_fu_454_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_235_p4) + unsigned(ap_const_lv6_1));
    add_ln18_fu_657_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_818) + unsigned(zext_ln18_fu_654_p1));
    add_ln21_fu_648_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_257_p4) + unsigned(ap_const_lv5_1));
    add_ln26_1_fu_568_p2 <= std_logic_vector(unsigned(zext_ln21_2_fu_564_p1) + unsigned(sext_ln26_fu_510_p1));
    add_ln26_2_fu_600_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_829) + unsigned(zext_ln21_1_fu_552_p1));
    add_ln26_4_fu_624_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_620_p1) + unsigned(sub_ln26_1_fu_594_p2));
    add_ln26_5_fu_638_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_842) + unsigned(tmp_13_cast_fu_630_p3));
    add_ln26_6_fu_696_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_693_p1) + unsigned(sub_ln26_2_fu_687_p2));
    add_ln26_fu_443_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_829) + unsigned(zext_ln21_fu_439_p1));
    add_ln35_1_fu_428_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_424_p1) + unsigned(tmp_3_cast_fu_409_p3));
    add_ln8_fu_321_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_175) + unsigned(ap_const_lv11_1));
    and_ln18_fu_526_p2 <= (xor_ln18_fu_514_p2 and icmp_ln24_fu_520_p2);
    and_ln34_fu_771_p2 <= (or_ln34_fu_765_p2 and grp_fu_309_p2);
    and_ln35_fu_371_p2 <= (xor_ln35_fu_359_p2 and icmp_ln14_fu_365_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_448_p2)
    begin
        if ((icmp_ln18_fu_448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_315_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_291_p4_assign_proc : process(ch_0_reg_287, icmp_ln18_reg_852, ap_CS_fsm_pp0_stage0, ch_reg_918, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_phi_fu_291_p4 <= ch_reg_918;
        else 
            ap_phi_mux_ch_0_phi_fu_291_p4 <= ch_0_reg_287;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_235_p4_assign_proc : process(indvar_flatten21_reg_231, icmp_ln18_reg_852, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_856, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_235_p4 <= add_ln18_1_reg_856;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_235_p4 <= indvar_flatten21_reg_231;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_257_p4_assign_proc : process(indvar_flatten_reg_253, icmp_ln18_reg_852, ap_CS_fsm_pp0_stage0, select_ln21_3_reg_923, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_257_p4 <= select_ln21_3_reg_923;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_257_p4 <= indvar_flatten_reg_253;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_phi_fu_279_p4 <= w_sum_2_reg_275;

    ap_phi_mux_wc_0_phi_fu_268_p4_assign_proc : process(wc_0_reg_264, icmp_ln18_reg_852, ap_CS_fsm_pp0_stage0, select_ln21_1_reg_878, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_268_p4 <= select_ln21_1_reg_878;
        else 
            ap_phi_mux_wc_0_phi_fu_268_p4 <= wc_0_reg_264;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_246_p4_assign_proc : process(wr_0_reg_242, icmp_ln18_reg_852, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_866, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_852 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_246_p4 <= select_ln18_1_reg_866;
        else 
            ap_phi_mux_wr_0_phi_fu_246_p4 <= wr_0_reg_242;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_315_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_736_p1 <= w_sum_reg_953;
    c_fu_377_p2 <= std_logic_vector(unsigned(select_ln35_fu_339_p3) + unsigned(ap_const_lv4_1));
    ch_fu_707_p2 <= std_logic_vector(unsigned(select_ln21_reg_872) + unsigned(ap_const_lv3_1));
    conv_bias_address0 <= zext_ln26_reg_837(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_847;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_953 when (and_ln34_fu_771_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_address0 <= zext_ln26_8_fu_643_p1(10 - 1 downto 0);

    conv_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_718_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_2_reg_824));

    grp_fu_298_p0_assign_proc : process(w_sum_2_reg_275, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_phi_mux_w_sum_2_phi_fu_279_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_298_p0 <= w_sum_2_reg_275;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_298_p0 <= ap_phi_mux_w_sum_2_phi_fu_279_p4;
        else 
            grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_p1_assign_proc : process(conv_bias_q0, ap_CS_fsm_pp0_stage0, tmp_1_reg_913, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_298_p1 <= conv_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_298_p1 <= tmp_1_reg_913;
        else 
            grp_fu_298_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_785_p0 <= grp_fu_785_p00(4 - 1 downto 0);
    grp_fu_785_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_347_p3),8));
    grp_fu_785_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_785_p2 <= grp_fu_785_p20(4 - 1 downto 0);
    grp_fu_785_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_397_p3),8));
    grp_fu_794_p0 <= grp_fu_794_p00(4 - 1 downto 0);
    grp_fu_794_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_657_p2),8));
    grp_fu_794_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_794_p2 <= grp_fu_794_p20(4 - 1 downto 0);
    grp_fu_794_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_reg_883),8));
    icmp_ln11_fu_333_p2 <= "1" when (indvar_flatten29_reg_197 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_365_p2 <= "1" when (f_0_reg_220 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_448_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_235_p4 = ap_const_lv6_36) else "0";
    icmp_ln21_fu_466_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_257_p4 = ap_const_lv5_12) else "0";
    icmp_ln24_fu_520_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_291_p4 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_759_p2 <= "1" when (trunc_ln34_fu_749_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_753_p2 <= "0" when (tmp_fu_739_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_315_p2 <= "1" when (indvar_flatten43_reg_175 = ap_const_lv11_790) else "0";
    input_r_address0 <= zext_ln26_9_fu_702_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_538_p2 <= (icmp_ln21_fu_466_p2 or and_ln18_fu_526_p2);
    or_ln34_fu_765_p2 <= (icmp_ln34_fu_753_p2 or icmp_ln34_1_fu_759_p2);
    or_ln35_fu_383_p2 <= (icmp_ln11_fu_333_p2 or and_ln35_fu_371_p2);
    p_shl_cast_fu_669_p3 <= (grp_fu_794_p3 & ap_const_lv3_0);
    p_shl_fu_578_p3 <= (trunc_ln26_fu_574_p1 & ap_const_lv3_0);
    r_fu_327_p2 <= std_logic_vector(unsigned(r_0_reg_186) + unsigned(ap_const_lv4_1));
    select_ln11_fu_729_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_813(0) = '1') else 
        add_ln11_1_fu_723_p2;
    select_ln18_1_fu_480_p3 <= 
        wr_fu_460_p2 when (icmp_ln21_fu_466_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_246_p4;
    select_ln18_2_fu_605_p3 <= 
        select_ln35_3_reg_829 when (icmp_ln21_fu_466_p2(0) = '1') else 
        add_ln26_fu_443_p2;
    select_ln18_fu_472_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_466_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_268_p4;
    select_ln21_1_fu_556_p3 <= 
        wc_fu_532_p2 when (and_ln18_fu_526_p2(0) = '1') else 
        select_ln18_fu_472_p3;
    select_ln21_2_fu_612_p3 <= 
        add_ln26_2_fu_600_p2 when (and_ln18_fu_526_p2(0) = '1') else 
        select_ln18_2_fu_605_p3;
    select_ln21_3_fu_712_p3 <= 
        ap_const_lv5_1 when (icmp_ln21_reg_861(0) = '1') else 
        add_ln21_reg_893;
    select_ln21_fu_544_p3 <= 
        ap_const_lv3_0 when (or_ln21_fu_538_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_291_p4;
    select_ln35_1_fu_347_p3 <= 
        r_fu_327_p2 when (icmp_ln11_fu_333_p2(0) = '1') else 
        r_0_reg_186;
    select_ln35_2_fu_389_p3 <= 
        ap_const_lv5_0 when (or_ln35_fu_383_p2(0) = '1') else 
        f_0_reg_220;
    select_ln35_3_fu_397_p3 <= 
        c_fu_377_p2 when (and_ln35_fu_371_p2(0) = '1') else 
        select_ln35_fu_339_p3;
    select_ln35_fu_339_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_333_p2(0) = '1') else 
        c_0_reg_209;
        sext_ln26_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_504_p2),6));

    sub_ln26_1_fu_594_p2 <= std_logic_vector(unsigned(p_shl_fu_578_p3) - unsigned(tmp_2_fu_586_p3));
    sub_ln26_2_fu_687_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_669_p3) - unsigned(zext_ln26_6_fu_683_p1));
    sub_ln26_fu_504_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_500_p1) - unsigned(zext_ln26_1_fu_488_p1));
    tmp_13_cast_fu_630_p3 <= (add_ln26_4_fu_624_p2 & ap_const_lv4_0);
    tmp_2_fu_586_p3 <= (add_ln26_1_fu_568_p2 & ap_const_lv1_0);
    tmp_3_cast_fu_409_p3 <= (grp_fu_785_p3 & ap_const_lv4_0);
    tmp_3_fu_676_p3 <= (grp_fu_794_p3 & ap_const_lv1_0);
    tmp_5_fu_492_p3 <= (select_ln18_1_fu_480_p3 & ap_const_lv2_0);
    tmp_fu_739_p4 <= bitcast_ln34_fu_736_p1(30 downto 23);
    trunc_ln26_fu_574_p1 <= add_ln26_1_fu_568_p2(4 - 1 downto 0);
    trunc_ln34_fu_749_p1 <= bitcast_ln34_fu_736_p1(23 - 1 downto 0);
    wc_fu_532_p2 <= std_logic_vector(unsigned(select_ln18_fu_472_p3) + unsigned(ap_const_lv2_1));
    wr_fu_460_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_246_p4) + unsigned(ap_const_lv2_1));
    xor_ln18_fu_514_p2 <= (icmp_ln21_fu_466_p2 xor ap_const_lv1_1);
    xor_ln35_fu_359_p2 <= (icmp_ln11_fu_333_p2 xor ap_const_lv1_1);
    zext_ln18_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_reg_866),4));
    zext_ln21_1_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_532_p2),4));
    zext_ln21_2_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_556_p3),6));
    zext_ln21_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_268_p4),4));
    zext_ln26_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_480_p3),5));
    zext_ln26_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_492_p3),5));
    zext_ln26_4_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_544_p3),7));
    zext_ln26_6_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_676_p3),11));
    zext_ln26_7_fu_693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_872),11));
    zext_ln26_8_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_638_p2),64));
    zext_ln26_9_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_696_p2),64));
    zext_ln26_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_389_p3),64));
    zext_ln35_2_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_389_p3),11));
    zext_ln35_3_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_389_p3),12));
    zext_ln35_4_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_428_p2),64));
end behav;
