-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.205000,HLS_SYN_LAT=437537,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=777,HLS_SYN_LUT=1851,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_249 : STD_LOGIC_VECTOR (4 downto 0);
    signal wr_0_reg_260 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_271 : STD_LOGIC_VECTOR (3 downto 0);
    signal wc_0_reg_282 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_0_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_305 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln20_reg_948 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_339 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal icmp_ln10_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_351_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln10_reg_903 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln13_fu_363_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_908 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_377_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_1_reg_913 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_2_fu_419_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_2_reg_919 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_3_fu_427_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_3_reg_924 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_446_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_932 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_2_fu_450_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_2_reg_937 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_943 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln20_fu_478_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_948_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_484_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_1_reg_952 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln23_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_1_fu_510_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln20_1_reg_962 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_fu_587_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln23_reg_967 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln23_1_fu_599_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_1_reg_972 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln28_8_fu_774_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_8_reg_987 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_1_fu_790_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_1_reg_997 : STD_LOGIC_VECTOR (3 downto 0);
    signal input_load_1_reg_1012 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1022 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal add_ln26_fu_800_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_reg_1027 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal select_ln23_3_fu_805_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_3_reg_1032 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal f_fu_811_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1047 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_fu_822_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_1052 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten43_reg_193 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal r_0_reg_204 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_215 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_227 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_238 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_253_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_264_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_275_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_286_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_0_phi_fu_297_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_0_phi_fu_309_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln37_4_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_726_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_9_fu_737_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_13_fu_785_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_12_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal r_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_369_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln37_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_407_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_880_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln37_3_fu_454_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_439_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln37_1_fu_458_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln23_fu_469_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_fu_490_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_522_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_2_fu_530_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_1_fu_518_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln28_fu_534_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_544_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln20_fu_548_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln26_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln20_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_502_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln20_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_575_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln28_fu_540_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_2_fu_607_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_1_fu_611_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_617_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_629_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln28_1_fu_625_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_2_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_595_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_473_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_2_fu_647_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln20_2_fu_652_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_2_fu_659_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_889_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_678_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_671_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_5_fu_685_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln28_1_fu_641_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln28_fu_703_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_7_fu_699_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_4_fu_707_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_cast_fu_713_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_5_fu_721_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln28_2_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_6_fu_695_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_6_fu_731_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln26_fu_742_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_1_fu_756_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_11_fu_752_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_7_fu_760_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_14_cast_fu_766_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_10_fu_748_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_9_fu_779_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_1_fu_816_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln36_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_833_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_fu_843_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln36_1_fu_853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_880_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_880_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_880_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_889_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_889_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_889_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_880_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_880_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_889_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_889_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_mac_muladd_5fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_328_p2);

    conv_mac_muladd_4eOg_U4 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_880_p0,
        din1 => grp_fu_880_p1,
        din2 => grp_fu_880_p2,
        dout => grp_fu_880_p3);

    conv_mac_muladd_5fYi_U5 : component conv_mac_muladd_5fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_889_p0,
        din1 => grp_fu_889_p1,
        din2 => grp_fu_889_p2,
        dout => grp_fu_889_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                c_0_reg_227 <= select_ln37_3_reg_924;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_227 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_305_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_0_reg_305 <= add_ln26_reg_1027;
            elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_0_reg_305 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                f_0_reg_238 <= f_reg_1047;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_238 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_249 <= add_ln20_1_reg_952;
            elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_249 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten29_reg_215 <= select_ln13_reg_1052;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten29_reg_215 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                indvar_flatten43_reg_193 <= add_ln10_reg_903;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten43_reg_193 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_271 <= select_ln23_3_reg_1032;
            elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_271 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                r_0_reg_204 <= select_ln37_1_reg_913;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_204 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                w_sum_2_0_reg_293 <= grp_fu_316_p2;
            elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_0_reg_293 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_282 <= select_ln23_1_reg_972;
            elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_282 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_260 <= select_ln20_1_reg_962;
            elsif (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_260 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_903 <= add_ln10_fu_351_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln20_1_reg_952 <= add_ln20_1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_478_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln23_1_reg_997 <= add_ln23_1_fu_790_p2;
                add_ln28_8_reg_987 <= add_ln28_8_fu_774_p2;
                icmp_ln23_reg_957 <= icmp_ln23_fu_496_p2;
                select_ln23_reg_967 <= select_ln23_fu_587_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                add_ln26_reg_1027 <= add_ln26_fu_800_p2;
                select_ln23_3_reg_1032 <= select_ln23_3_fu_805_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_345_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_943 <= zext_ln37_4_fu_464_p1(11 - 1 downto 0);
                icmp_ln13_reg_908 <= icmp_ln13_fu_363_p2;
                select_ln37_1_reg_913 <= select_ln37_1_fu_377_p3;
                select_ln37_2_reg_919 <= select_ln37_2_fu_419_p3;
                select_ln37_3_reg_924 <= select_ln37_3_fu_427_p3;
                    zext_ln28_reg_932(4 downto 0) <= zext_ln28_fu_446_p1(4 downto 0);
                    zext_ln37_2_reg_937(4 downto 0) <= zext_ln37_2_fu_450_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                f_reg_1047 <= f_fu_811_p2;
                select_ln13_reg_1052 <= select_ln13_fu_822_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_948 <= icmp_ln20_fu_478_p2;
                icmp_ln20_reg_948_pp0_iter1_reg <= icmp_ln20_reg_948;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input_load_1_reg_1012 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)))) then
                reg_339 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_478_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln20_1_reg_962 <= select_ln20_1_fu_510_p3;
                select_ln23_1_reg_972 <= select_ln23_1_fu_599_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                tmp_1_1_reg_1022 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_s_reg_1017 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    zext_ln28_reg_932(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln37_2_reg_937(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln10_fu_345_p2, ap_CS_fsm_state2, icmp_ln20_fu_478_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_345_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln20_fu_478_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln20_fu_478_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln10_fu_351_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_193) + unsigned(ap_const_lv11_1));
    add_ln13_1_fu_816_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten29_reg_215));
    add_ln20_1_fu_484_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_253_p4) + unsigned(ap_const_lv5_1));
    add_ln20_fu_548_p2 <= std_logic_vector(unsigned(zext_ln20_fu_544_p1) + unsigned(select_ln37_1_reg_913));
    add_ln23_1_fu_790_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_275_p4));
    add_ln26_fu_800_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(select_ln23_reg_967));
    add_ln28_1_fu_611_p2 <= std_logic_vector(signed(sext_ln28_fu_540_p1) + signed(zext_ln23_2_fu_607_p1));
    add_ln28_2_fu_647_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_595_p1) + unsigned(select_ln37_3_reg_924));
    add_ln28_4_fu_707_p2 <= std_logic_vector(unsigned(trunc_ln28_fu_703_p1) + unsigned(zext_ln28_7_fu_699_p1));
    add_ln28_5_fu_721_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_713_p3) + unsigned(zext_ln37_2_reg_937));
    add_ln28_6_fu_731_p2 <= std_logic_vector(unsigned(sub_ln28_2_fu_689_p2) + unsigned(zext_ln28_6_fu_695_p1));
    add_ln28_7_fu_760_p2 <= std_logic_vector(unsigned(trunc_ln28_1_fu_756_p1) + unsigned(zext_ln28_11_fu_752_p1));
    add_ln28_8_fu_774_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_766_p3) + unsigned(zext_ln37_2_reg_937));
    add_ln28_9_fu_779_p2 <= std_logic_vector(unsigned(sub_ln28_2_fu_689_p2) + unsigned(zext_ln28_10_fu_748_p1));
    add_ln28_fu_473_p2 <= std_logic_vector(unsigned(select_ln37_3_reg_924) + unsigned(zext_ln23_fu_469_p1));
    add_ln37_1_fu_458_p2 <= std_logic_vector(unsigned(zext_ln37_3_fu_454_p1) + unsigned(tmp_2_cast_fu_439_p3));
    and_ln20_fu_569_p2 <= (xor_ln20_fu_557_p2 and icmp_ln26_fu_563_p2);
    and_ln36_fu_865_p2 <= (or_ln36_fu_859_p2 and grp_fu_328_p2);
    and_ln37_fu_401_p2 <= (xor_ln37_fu_389_p2 and icmp_ln16_fu_395_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_478_p2)
    begin
        if ((icmp_ln20_fu_478_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln10_fu_345_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_345_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_0_phi_fu_309_p4_assign_proc : process(ch_0_0_reg_305, icmp_ln20_reg_948, ap_CS_fsm_pp0_stage0, add_ln26_reg_1027, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_0_phi_fu_309_p4 <= add_ln26_reg_1027;
        else 
            ap_phi_mux_ch_0_0_phi_fu_309_p4 <= ch_0_0_reg_305;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_253_p4_assign_proc : process(indvar_flatten21_reg_249, icmp_ln20_reg_948, ap_CS_fsm_pp0_stage0, add_ln20_1_reg_952, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_253_p4 <= add_ln20_1_reg_952;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_253_p4 <= indvar_flatten21_reg_249;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_275_p4_assign_proc : process(indvar_flatten_reg_271, icmp_ln20_reg_948, ap_CS_fsm_pp0_stage0, select_ln23_3_reg_1032, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_275_p4 <= select_ln23_3_reg_1032;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_275_p4 <= indvar_flatten_reg_271;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_0_phi_fu_297_p4 <= w_sum_2_0_reg_293;

    ap_phi_mux_wc_0_phi_fu_286_p4_assign_proc : process(wc_0_reg_282, icmp_ln20_reg_948, ap_CS_fsm_pp0_stage0, select_ln23_1_reg_972, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_286_p4 <= select_ln23_1_reg_972;
        else 
            ap_phi_mux_wc_0_phi_fu_286_p4 <= wc_0_reg_282;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_264_p4_assign_proc : process(wr_0_reg_260, icmp_ln20_reg_948, ap_CS_fsm_pp0_stage0, select_ln20_1_reg_962, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_948 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_264_p4 <= select_ln20_1_reg_962;
        else 
            ap_phi_mux_wr_0_phi_fu_264_p4 <= wr_0_reg_260;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_345_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_345_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln36_fu_829_p1 <= reg_339;
    c_fu_407_p2 <= std_logic_vector(unsigned(select_ln37_fu_369_p3) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln28_reg_932(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_943;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_339 when (and_ln36_fu_865_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln28_8_fu_726_p1, zext_ln28_12_fu_796_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_weights_address0 <= zext_ln28_12_fu_796_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_weights_address0 <= zext_ln28_8_fu_726_p1(10 - 1 downto 0);
            else 
                conv_weights_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_weights_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_811_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln37_2_reg_919));

    grp_fu_316_p0_assign_proc : process(w_sum_2_0_reg_293, ap_enable_reg_pp0_iter0, reg_339, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_state15, ap_phi_mux_w_sum_2_0_phi_fu_297_p4, ap_block_pp0_stage3, ap_block_pp0_stage7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_316_p0 <= w_sum_2_0_reg_293;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_316_p0 <= reg_339;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_316_p0 <= ap_phi_mux_w_sum_2_0_phi_fu_297_p4;
        else 
            grp_fu_316_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_316_p1_assign_proc : process(conv_bias_q0, ap_enable_reg_pp0_iter0, tmp_s_reg_1017, tmp_1_1_reg_1022, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_CS_fsm_state15, ap_block_pp0_stage3, ap_block_pp0_stage7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_316_p1 <= conv_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_316_p1 <= tmp_1_1_reg_1022;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_316_p1 <= tmp_s_reg_1017;
        else 
            grp_fu_316_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, input_load_1_reg_1012, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_322_p1 <= input_load_1_reg_1012;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_322_p1 <= input_r_q0;
            else 
                grp_fu_322_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_322_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_880_p0 <= grp_fu_880_p00(4 - 1 downto 0);
    grp_fu_880_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_fu_377_p3),8));
    grp_fu_880_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_880_p2 <= grp_fu_880_p20(4 - 1 downto 0);
    grp_fu_880_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_3_fu_427_p3),8));
    grp_fu_889_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_889_p1 <= grp_fu_889_p10(4 - 1 downto 0);
    grp_fu_889_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_548_p2),8));
    grp_fu_889_p2 <= grp_fu_889_p20(4 - 1 downto 0);
    grp_fu_889_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_2_fu_659_p3),8));
    icmp_ln10_fu_345_p2 <= "1" when (indvar_flatten43_reg_193 = ap_const_lv11_790) else "0";
    icmp_ln13_fu_363_p2 <= "1" when (indvar_flatten29_reg_215 = ap_const_lv9_B0) else "0";
    icmp_ln16_fu_395_p2 <= "1" when (f_0_reg_238 = ap_const_lv5_10) else "0";
    icmp_ln20_fu_478_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_253_p4 = ap_const_lv5_1B) else "0";
    icmp_ln23_fu_496_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_275_p4 = ap_const_lv4_9) else "0";
    icmp_ln26_fu_563_p2 <= "1" when (ap_phi_mux_ch_0_0_phi_fu_309_p4 = ap_const_lv3_6) else "0";
    icmp_ln36_1_fu_853_p2 <= "1" when (trunc_ln36_fu_843_p1 = ap_const_lv23_0) else "0";
    icmp_ln36_fu_847_p2 <= "0" when (tmp_fu_833_p4 = ap_const_lv8_FF) else "1";
    input_r_address0 <= zext_ln28_9_fu_737_p1(10 - 1 downto 0);
    input_r_address1 <= zext_ln28_13_fu_785_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln23_fu_581_p2 <= (icmp_ln23_fu_496_p2 or and_ln20_fu_569_p2);
    or_ln26_fu_742_p2 <= (select_ln23_fu_587_p3 or ap_const_lv3_1);
    or_ln36_fu_859_p2 <= (icmp_ln36_fu_847_p2 or icmp_ln36_1_fu_853_p2);
    or_ln37_fu_413_p2 <= (icmp_ln13_fu_363_p2 or and_ln37_fu_401_p2);
    p_shl_cast_fu_671_p3 <= (grp_fu_889_p3 & ap_const_lv3_0);
    r_fu_357_p2 <= std_logic_vector(unsigned(r_0_reg_204) + unsigned(ap_const_lv4_1));
    select_ln13_fu_822_p3 <= 
        ap_const_lv9_1 when (icmp_ln13_reg_908(0) = '1') else 
        add_ln13_1_fu_816_p2;
    select_ln20_1_fu_510_p3 <= 
        wr_fu_490_p2 when (icmp_ln23_fu_496_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_264_p4;
    select_ln20_2_fu_652_p3 <= 
        select_ln37_3_reg_924 when (icmp_ln23_fu_496_p2(0) = '1') else 
        add_ln28_fu_473_p2;
    select_ln20_fu_502_p3 <= 
        ap_const_lv2_0 when (icmp_ln23_fu_496_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_286_p4;
    select_ln23_1_fu_599_p3 <= 
        wc_fu_575_p2 when (and_ln20_fu_569_p2(0) = '1') else 
        select_ln20_fu_502_p3;
    select_ln23_2_fu_659_p3 <= 
        add_ln28_2_fu_647_p2 when (and_ln20_fu_569_p2(0) = '1') else 
        select_ln20_2_fu_652_p3;
    select_ln23_3_fu_805_p3 <= 
        ap_const_lv4_1 when (icmp_ln23_reg_957(0) = '1') else 
        add_ln23_1_reg_997;
    select_ln23_fu_587_p3 <= 
        ap_const_lv3_0 when (or_ln23_fu_581_p2(0) = '1') else 
        ap_phi_mux_ch_0_0_phi_fu_309_p4;
    select_ln37_1_fu_377_p3 <= 
        r_fu_357_p2 when (icmp_ln13_fu_363_p2(0) = '1') else 
        r_0_reg_204;
    select_ln37_2_fu_419_p3 <= 
        ap_const_lv5_0 when (or_ln37_fu_413_p2(0) = '1') else 
        f_0_reg_238;
    select_ln37_3_fu_427_p3 <= 
        c_fu_407_p2 when (and_ln37_fu_401_p2(0) = '1') else 
        select_ln37_fu_369_p3;
    select_ln37_fu_369_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_363_p2(0) = '1') else 
        c_0_reg_227;
        sext_ln28_1_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_617_p3),64));

        sext_ln28_2_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_629_p3),64));

        sext_ln28_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln28_fu_534_p2),6));

    sub_ln28_1_fu_641_p2 <= std_logic_vector(signed(sext_ln28_1_fu_625_p1) - signed(sext_ln28_2_fu_637_p1));
    sub_ln28_2_fu_689_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_671_p3) - unsigned(zext_ln28_5_fu_685_p1));
    sub_ln28_fu_534_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_530_p1) - unsigned(zext_ln28_1_fu_518_p1));
    tmp_12_cast_fu_713_p3 <= (add_ln28_4_fu_707_p2 & ap_const_lv4_0);
    tmp_14_cast_fu_766_p3 <= (add_ln28_7_fu_760_p2 & ap_const_lv4_0);
    tmp_1_fu_617_p3 <= (add_ln28_1_fu_611_p2 & ap_const_lv3_0);
    tmp_2_cast_fu_439_p3 <= (grp_fu_880_p3 & ap_const_lv4_0);
    tmp_2_fu_629_p3 <= (add_ln28_1_fu_611_p2 & ap_const_lv1_0);
    tmp_4_fu_522_p3 <= (select_ln20_1_fu_510_p3 & ap_const_lv2_0);
    tmp_5_fu_678_p3 <= (grp_fu_889_p3 & ap_const_lv1_0);
    tmp_fu_833_p4 <= bitcast_ln36_fu_829_p1(30 downto 23);
    trunc_ln28_1_fu_756_p1 <= sub_ln28_1_fu_641_p2(7 - 1 downto 0);
    trunc_ln28_fu_703_p1 <= sub_ln28_1_fu_641_p2(7 - 1 downto 0);
    trunc_ln36_fu_843_p1 <= bitcast_ln36_fu_829_p1(23 - 1 downto 0);
    wc_fu_575_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln20_fu_502_p3));
    wr_fu_490_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_264_p4));
    xor_ln20_fu_557_p2 <= (icmp_ln23_fu_496_p2 xor ap_const_lv1_1);
    xor_ln37_fu_389_p2 <= (icmp_ln13_fu_363_p2 xor ap_const_lv1_1);
    zext_ln20_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_510_p3),4));
    zext_ln23_1_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_575_p2),4));
    zext_ln23_2_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_599_p3),6));
    zext_ln23_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_286_p4),4));
    zext_ln28_10_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_742_p2),11));
    zext_ln28_11_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_742_p2),7));
    zext_ln28_12_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_8_reg_987),64));
    zext_ln28_13_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_9_fu_779_p2),64));
    zext_ln28_1_fu_518_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_510_p3),5));
    zext_ln28_2_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_522_p3),5));
    zext_ln28_5_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_678_p3),11));
    zext_ln28_6_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_587_p3),11));
    zext_ln28_7_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_587_p3),7));
    zext_ln28_8_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_721_p2),64));
    zext_ln28_9_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_6_fu_731_p2),64));
    zext_ln28_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_419_p3),64));
    zext_ln37_2_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_419_p3),11));
    zext_ln37_3_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_419_p3),12));
    zext_ln37_4_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_1_fu_458_p2),64));
end behav;
