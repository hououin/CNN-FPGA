// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.104550,HLS_SYN_LAT=121057,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=10,HLS_SYN_FF=1980,HLS_SYN_LUT=2520,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_input_address1,
        conv_input_ce1,
        conv_input_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_pp0_stage0 = 9'd8;
parameter    ap_ST_fsm_pp0_stage1 = 9'd16;
parameter    ap_ST_fsm_pp0_stage2 = 9'd32;
parameter    ap_ST_fsm_pp0_stage3 = 9'd64;
parameter    ap_ST_fsm_pp0_stage4 = 9'd128;
parameter    ap_ST_fsm_state26 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [9:0] conv_input_address1;
output   conv_input_ce1;
input  [31:0] conv_input_q1;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] conv_input_address0;
reg conv_input_ce0;
reg[9:0] conv_input_address1;
reg conv_input_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_1_weights_0_0_0_address0;
reg    conv_1_weights_0_0_0_ce0;
wire   [31:0] conv_1_weights_0_0_0_q0;
wire   [4:0] conv_1_weights_0_1_0_address0;
reg    conv_1_weights_0_1_0_ce0;
wire   [31:0] conv_1_weights_0_1_0_q0;
wire   [4:0] conv_1_weights_0_2_0_address0;
reg    conv_1_weights_0_2_0_ce0;
wire   [31:0] conv_1_weights_0_2_0_q0;
wire   [4:0] conv_1_weights_1_0_0_address0;
reg    conv_1_weights_1_0_0_ce0;
wire   [31:0] conv_1_weights_1_0_0_q0;
wire   [4:0] conv_1_weights_1_1_0_address0;
reg    conv_1_weights_1_1_0_ce0;
wire   [31:0] conv_1_weights_1_1_0_q0;
wire   [4:0] conv_1_weights_1_2_0_address0;
reg    conv_1_weights_1_2_0_ce0;
wire   [31:0] conv_1_weights_1_2_0_q0;
wire   [4:0] conv_1_weights_2_0_0_address0;
reg    conv_1_weights_2_0_0_ce0;
wire   [31:0] conv_1_weights_2_0_0_q0;
wire   [4:0] conv_1_weights_2_1_0_address0;
reg    conv_1_weights_2_1_0_ce0;
wire   [31:0] conv_1_weights_2_1_0_q0;
wire   [4:0] conv_1_weights_2_2_0_address0;
reg    conv_1_weights_2_2_0_ce0;
wire   [31:0] conv_1_weights_2_2_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
reg   [5:0] f_0_reg_347;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_state15_pp0_stage1_iter2;
wire    ap_block_state20_pp0_stage1_iter3;
wire    ap_block_state25_pp0_stage1_iter4;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln14_reg_860;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state6_pp0_stage2_iter0;
wire    ap_block_state11_pp0_stage2_iter1;
wire    ap_block_state16_pp0_stage2_iter2;
wire    ap_block_state21_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state7_pp0_stage3_iter0;
wire    ap_block_state12_pp0_stage3_iter1;
wire    ap_block_state17_pp0_stage3_iter2;
wire    ap_block_state22_pp0_stage3_iter3;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state8_pp0_stage4_iter0;
wire    ap_block_state13_pp0_stage4_iter1;
wire    ap_block_state18_pp0_stage4_iter2;
wire    ap_block_state23_pp0_stage4_iter3;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_state14_pp0_stage0_iter2;
wire    ap_block_state19_pp0_stage0_iter3;
wire    ap_block_state24_pp0_stage0_iter4;
wire    ap_block_pp0_stage0_11001;
wire   [31:0] grp_fu_367_p2;
reg   [31:0] reg_396;
wire   [31:0] grp_fu_358_p2;
reg   [31:0] reg_402;
reg   [31:0] reg_407;
reg   [0:0] icmp_ln14_reg_860_pp0_iter1_reg;
wire   [31:0] grp_fu_363_p2;
reg   [31:0] reg_412;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] icmp_ln14_reg_860_pp0_iter2_reg;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] reg_417;
reg   [0:0] icmp_ln14_reg_860_pp0_iter3_reg;
wire   [9:0] add_ln8_fu_422_p2;
reg   [9:0] add_ln8_reg_767;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_434_p2;
reg   [4:0] r_reg_775;
wire   [10:0] sub_ln26_fu_464_p2;
reg   [10:0] sub_ln26_reg_780;
wire   [0:0] icmp_ln8_fu_428_p2;
wire   [10:0] sub_ln26_1_fu_494_p2;
reg   [10:0] sub_ln26_1_reg_787;
wire   [10:0] sub_ln26_2_fu_530_p2;
reg   [10:0] sub_ln26_2_reg_794;
wire   [0:0] icmp_ln11_fu_536_p2;
wire    ap_CS_fsm_state3;
wire   [4:0] c_fu_542_p2;
reg   [4:0] c_reg_805;
reg   [9:0] conv_input_addr_reg_810;
reg   [9:0] conv_input_addr_3_reg_815;
reg   [9:0] conv_input_addr_6_reg_820;
wire   [15:0] zext_ln26_9_fu_600_p1;
reg   [15:0] zext_ln26_9_reg_825;
reg   [9:0] conv_input_addr_1_reg_830;
reg   [9:0] conv_input_addr_4_reg_835;
reg   [9:0] conv_input_addr_7_reg_840;
reg   [9:0] conv_input_addr_2_reg_845;
reg   [9:0] conv_input_addr_5_reg_850;
reg   [9:0] conv_input_addr_8_reg_855;
wire   [0:0] icmp_ln14_fu_678_p2;
reg   [0:0] icmp_ln14_reg_860_pp0_iter4_reg;
wire   [5:0] f_fu_684_p2;
reg   [5:0] f_reg_864;
wire   [63:0] zext_ln26_fu_690_p1;
reg   [63:0] zext_ln26_reg_869;
reg   [63:0] zext_ln26_reg_869_pp0_iter1_reg;
reg   [63:0] zext_ln26_reg_869_pp0_iter2_reg;
wire   [15:0] add_ln35_1_fu_707_p2;
reg   [15:0] add_ln35_1_reg_874;
reg   [15:0] add_ln35_1_reg_874_pp0_iter1_reg;
reg   [15:0] add_ln35_1_reg_874_pp0_iter2_reg;
reg   [15:0] add_ln35_1_reg_874_pp0_iter3_reg;
reg   [15:0] add_ln35_1_reg_874_pp0_iter4_reg;
reg   [31:0] conv_1_weights_0_2_0_2_reg_934;
reg   [31:0] conv_1_weights_1_0_0_2_reg_939;
reg   [31:0] conv_1_weights_1_1_0_2_reg_944;
reg   [31:0] conv_1_weights_1_2_0_2_reg_949;
reg   [31:0] conv_1_weights_2_0_0_2_reg_954;
reg   [31:0] conv_1_weights_2_1_0_2_reg_959;
reg   [31:0] conv_1_weights_2_2_0_2_reg_964;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] tmp_1_0_1_reg_969;
reg   [31:0] tmp_1_1_reg_974;
reg   [31:0] tmp_1_1_1_reg_979;
reg   [31:0] tmp_1_1_1_reg_979_pp0_iter1_reg;
reg   [31:0] tmp_1_1_2_reg_984;
reg   [31:0] tmp_1_1_2_reg_984_pp0_iter1_reg;
reg   [31:0] tmp_1_2_reg_989;
reg   [31:0] tmp_1_2_reg_989_pp0_iter2_reg;
reg   [31:0] tmp_1_2_1_reg_994;
reg   [31:0] tmp_1_2_1_reg_994_pp0_iter2_reg;
reg   [31:0] tmp_1_2_1_reg_994_pp0_iter3_reg;
reg   [31:0] tmp_1_2_2_reg_999;
reg   [31:0] tmp_1_2_2_reg_999_pp0_iter2_reg;
reg   [31:0] tmp_1_2_2_reg_999_pp0_iter3_reg;
reg   [31:0] w_sum_3_1_1_reg_1004;
reg   [31:0] conv_1_bias_load_reg_1014;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state4;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter4;
reg   [4:0] r_0_reg_313;
reg   [9:0] phi_mul_reg_324;
reg   [4:0] c_0_reg_336;
wire    ap_CS_fsm_state26;
reg   [5:0] ap_phi_mux_f_0_phi_fu_351_p4;
wire    ap_block_pp0_stage0;
wire  signed [63:0] sext_ln26_fu_561_p1;
wire  signed [63:0] sext_ln26_1_fu_571_p1;
wire  signed [63:0] sext_ln26_2_fu_581_p1;
wire  signed [63:0] sext_ln26_3_fu_613_p1;
wire  signed [63:0] sext_ln26_4_fu_623_p1;
wire  signed [63:0] sext_ln26_5_fu_633_p1;
wire  signed [63:0] sext_ln26_6_fu_653_p1;
wire  signed [63:0] sext_ln26_7_fu_663_p1;
wire  signed [63:0] sext_ln26_8_fu_673_p1;
wire   [63:0] zext_ln35_1_fu_712_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_358_p0;
reg   [31:0] grp_fu_358_p1;
reg   [31:0] grp_fu_363_p0;
reg   [31:0] grp_fu_363_p1;
reg   [31:0] grp_fu_367_p0;
reg   [31:0] grp_fu_374_p0;
wire   [9:0] tmp_5_fu_440_p3;
wire   [6:0] tmp_6_fu_452_p3;
wire   [10:0] zext_ln26_1_fu_448_p1;
wire   [10:0] zext_ln26_2_fu_460_p1;
wire   [9:0] tmp_7_fu_470_p3;
wire   [6:0] tmp_8_fu_482_p3;
wire   [10:0] zext_ln26_3_fu_478_p1;
wire   [10:0] zext_ln26_4_fu_490_p1;
wire   [4:0] add_ln26_2_fu_500_p2;
wire   [9:0] tmp_9_fu_506_p3;
wire   [6:0] tmp_10_fu_518_p3;
wire   [10:0] zext_ln26_5_fu_514_p1;
wire   [10:0] zext_ln26_6_fu_526_p1;
wire   [10:0] zext_ln26_8_fu_552_p1;
wire   [10:0] add_ln26_fu_556_p2;
wire   [10:0] add_ln26_3_fu_566_p2;
wire   [10:0] add_ln26_4_fu_576_p2;
wire   [9:0] zext_ln26_7_fu_548_p1;
wire   [9:0] add_ln35_fu_586_p2;
wire   [14:0] tmp_11_fu_592_p3;
wire   [10:0] zext_ln26_10_fu_604_p1;
wire   [10:0] add_ln26_6_fu_608_p2;
wire   [10:0] add_ln26_7_fu_618_p2;
wire   [10:0] add_ln26_8_fu_628_p2;
wire   [4:0] add_ln26_1_fu_638_p2;
wire   [10:0] zext_ln26_11_fu_644_p1;
wire   [10:0] add_ln26_9_fu_648_p2;
wire   [10:0] add_ln26_10_fu_658_p2;
wire   [10:0] add_ln26_11_fu_668_p2;
wire   [15:0] zext_ln35_fu_703_p1;
wire   [31:0] bitcast_ln34_fu_716_p1;
wire   [7:0] tmp_fu_720_p4;
wire   [22:0] trunc_ln34_fu_730_p1;
wire   [0:0] icmp_ln34_1_fu_740_p2;
wire   [0:0] icmp_ln34_fu_734_p2;
wire   [0:0] or_ln34_fu_746_p2;
wire   [0:0] tmp_4_fu_380_p2;
wire   [0:0] and_ln34_fu_752_p2;
wire    ap_block_pp0_stage1_00001;
reg   [8:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_0_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_0_0_address0),
    .ce0(conv_1_weights_0_0_0_ce0),
    .q0(conv_1_weights_0_0_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_0_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_1_0_address0),
    .ce0(conv_1_weights_0_1_0_ce0),
    .q0(conv_1_weights_0_1_0_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_0_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_2_0_address0),
    .ce0(conv_1_weights_0_2_0_ce0),
    .q0(conv_1_weights_0_2_0_q0)
);

conv_1_conv_1_weieOg #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_1_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_0_0_address0),
    .ce0(conv_1_weights_1_0_0_ce0),
    .q0(conv_1_weights_1_0_0_q0)
);

conv_1_conv_1_weifYi #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_1_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_1_0_address0),
    .ce0(conv_1_weights_1_1_0_ce0),
    .q0(conv_1_weights_1_1_0_q0)
);

conv_1_conv_1_weig8j #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_1_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_2_0_address0),
    .ce0(conv_1_weights_1_2_0_ce0),
    .q0(conv_1_weights_1_2_0_q0)
);

conv_1_conv_1_weihbi #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_2_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_0_0_address0),
    .ce0(conv_1_weights_2_0_0_ce0),
    .q0(conv_1_weights_2_0_0_q0)
);

conv_1_conv_1_weiibs #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_2_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_1_0_address0),
    .ce0(conv_1_weights_2_1_0_ce0),
    .q0(conv_1_weights_2_1_0_q0)
);

conv_1_conv_1_weijbC #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_weights_2_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_2_0_address0),
    .ce0(conv_1_weights_2_2_0_ce0),
    .q0(conv_1_weights_2_2_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_kbM_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_358_p0),
    .din1(grp_fu_358_p1),
    .ce(1'b1),
    .dout(grp_fu_358_p2)
);

conv_1_fadd_32ns_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_kbM_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p0),
    .din1(grp_fu_363_p1),
    .ce(1'b1),
    .dout(grp_fu_363_p2)
);

conv_1_fmul_32ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_lbW_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_367_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

conv_1_fmul_32ns_lbW #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_lbW_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_374_p0),
    .din1(conv_input_q1),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

conv_1_fcmp_32ns_mb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_mb6_U5(
    .din0(grp_fu_363_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_380_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state4) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_536_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_536_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        c_0_reg_336 <= c_reg_805;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_428_p2 == 1'd0))) begin
        c_0_reg_336 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_860 == 1'd0))) begin
        f_0_reg_347 <= f_reg_864;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_536_p2 == 1'd0))) begin
        f_0_reg_347 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_324 <= add_ln8_reg_767;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_324 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_313 <= r_reg_775;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_313 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_fu_678_p2 == 1'd0))) begin
        add_ln35_1_reg_874 <= add_ln35_1_fu_707_p2;
        zext_ln26_reg_869[5 : 0] <= zext_ln26_fu_690_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln35_1_reg_874_pp0_iter1_reg <= add_ln35_1_reg_874;
        add_ln35_1_reg_874_pp0_iter2_reg <= add_ln35_1_reg_874_pp0_iter1_reg;
        add_ln35_1_reg_874_pp0_iter3_reg <= add_ln35_1_reg_874_pp0_iter2_reg;
        add_ln35_1_reg_874_pp0_iter4_reg <= add_ln35_1_reg_874_pp0_iter3_reg;
        icmp_ln14_reg_860 <= icmp_ln14_fu_678_p2;
        icmp_ln14_reg_860_pp0_iter1_reg <= icmp_ln14_reg_860;
        icmp_ln14_reg_860_pp0_iter2_reg <= icmp_ln14_reg_860_pp0_iter1_reg;
        icmp_ln14_reg_860_pp0_iter3_reg <= icmp_ln14_reg_860_pp0_iter2_reg;
        icmp_ln14_reg_860_pp0_iter4_reg <= icmp_ln14_reg_860_pp0_iter3_reg;
        tmp_1_2_1_reg_994_pp0_iter2_reg <= tmp_1_2_1_reg_994;
        tmp_1_2_1_reg_994_pp0_iter3_reg <= tmp_1_2_1_reg_994_pp0_iter2_reg;
        tmp_1_2_reg_989_pp0_iter2_reg <= tmp_1_2_reg_989;
        zext_ln26_reg_869_pp0_iter1_reg[5 : 0] <= zext_ln26_reg_869[5 : 0];
        zext_ln26_reg_869_pp0_iter2_reg[5 : 0] <= zext_ln26_reg_869_pp0_iter1_reg[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_767 <= add_ln8_fu_422_p2;
        r_reg_775 <= r_fu_434_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_805 <= c_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_860_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_bias_load_reg_1014 <= conv_1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_860 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_weights_0_2_0_2_reg_934 <= conv_1_weights_0_2_0_q0;
        conv_1_weights_1_0_0_2_reg_939 <= conv_1_weights_1_0_0_q0;
        conv_1_weights_1_1_0_2_reg_944 <= conv_1_weights_1_1_0_q0;
        conv_1_weights_1_2_0_2_reg_949 <= conv_1_weights_1_2_0_q0;
        conv_1_weights_2_0_0_2_reg_954 <= conv_1_weights_2_0_0_q0;
        conv_1_weights_2_1_0_2_reg_959 <= conv_1_weights_2_1_0_q0;
        conv_1_weights_2_2_0_2_reg_964 <= conv_1_weights_2_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_536_p2 == 1'd0))) begin
        conv_input_addr_1_reg_830 <= sext_ln26_3_fu_613_p1;
        conv_input_addr_2_reg_845 <= sext_ln26_6_fu_653_p1;
        conv_input_addr_3_reg_815 <= sext_ln26_1_fu_571_p1;
        conv_input_addr_4_reg_835 <= sext_ln26_4_fu_623_p1;
        conv_input_addr_5_reg_850 <= sext_ln26_7_fu_663_p1;
        conv_input_addr_6_reg_820 <= sext_ln26_2_fu_581_p1;
        conv_input_addr_7_reg_840 <= sext_ln26_5_fu_633_p1;
        conv_input_addr_8_reg_855 <= sext_ln26_8_fu_673_p1;
        conv_input_addr_reg_810 <= sext_ln26_fu_561_p1;
        zext_ln26_9_reg_825[14 : 5] <= zext_ln26_9_fu_600_p1[14 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_reg_864 <= f_fu_684_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln14_reg_860 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_860 == 1'd0)))) begin
        reg_396 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_860 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln14_reg_860 == 1'd0)))) begin
        reg_402 <= grp_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln14_reg_860_pp0_iter1_reg == 1'd0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_860_pp0_iter1_reg == 1'd0)))) begin
        reg_407 <= grp_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_860_pp0_iter2_reg == 1'd0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln14_reg_860_pp0_iter2_reg == 1'd0)))) begin
        reg_412 <= grp_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln14_reg_860_pp0_iter3_reg == 1'd0)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_860_pp0_iter3_reg == 1'd0)))) begin
        reg_417 <= grp_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_428_p2 == 1'd0))) begin
        sub_ln26_1_reg_787[10 : 2] <= sub_ln26_1_fu_494_p2[10 : 2];
        sub_ln26_2_reg_794[10 : 2] <= sub_ln26_2_fu_530_p2[10 : 2];
        sub_ln26_reg_780[10 : 2] <= sub_ln26_fu_464_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln14_reg_860 == 1'd0))) begin
        tmp_1_0_1_reg_969 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln14_reg_860 == 1'd0))) begin
        tmp_1_1_1_reg_979 <= grp_fu_367_p2;
        tmp_1_1_2_reg_984 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_1_1_1_reg_979_pp0_iter1_reg <= tmp_1_1_1_reg_979;
        tmp_1_1_2_reg_984_pp0_iter1_reg <= tmp_1_1_2_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln14_reg_860 == 1'd0))) begin
        tmp_1_1_reg_974 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_860 == 1'd0))) begin
        tmp_1_2_1_reg_994 <= grp_fu_374_p2;
        tmp_1_2_reg_989 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_860_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_2_2_reg_999 <= grp_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_1_2_2_reg_999_pp0_iter2_reg <= tmp_1_2_2_reg_999;
        tmp_1_2_2_reg_999_pp0_iter3_reg <= tmp_1_2_2_reg_999_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_860_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_3_1_1_reg_1004 <= grp_fu_358_p2;
    end
end

always @ (*) begin
    if ((icmp_ln14_fu_678_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state4 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state4 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln14_reg_860 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_351_p4 = f_reg_864;
    end else begin
        ap_phi_mux_f_0_phi_fu_351_p4 = f_0_reg_347;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_0_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_0_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_0_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_1_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_1_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_1_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_2_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_2_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_1_weights_2_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            conv_input_address0 = conv_input_addr_8_reg_855;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            conv_input_address0 = conv_input_addr_6_reg_820;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_input_address0 = conv_input_addr_4_reg_835;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_input_address0 = conv_input_addr_2_reg_845;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_input_address0 = conv_input_addr_reg_810;
        end else begin
            conv_input_address0 = 'bx;
        end
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            conv_input_address1 = conv_input_addr_7_reg_840;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_input_address1 = conv_input_addr_5_reg_850;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_input_address1 = conv_input_addr_3_reg_815;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_input_address1 = conv_input_addr_1_reg_830;
        end else begin
            conv_input_address1 = 'bx;
        end
    end else begin
        conv_input_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_input_ce1 = 1'b1;
    end else begin
        conv_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln14_reg_860_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_358_p0 = reg_407;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_358_p0 = reg_402;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_358_p0 = grp_fu_367_p2;
    end else begin
        grp_fu_358_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_358_p1 = tmp_1_1_1_reg_979_pp0_iter1_reg;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_358_p1 = tmp_1_1_reg_974;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_358_p1 = reg_396;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_358_p1 = tmp_1_0_1_reg_969;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_358_p1 = 32'd0;
    end else begin
        grp_fu_358_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_363_p0 = reg_417;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_363_p0 = reg_412;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_363_p0 = w_sum_3_1_1_reg_1004;
    end else begin
        grp_fu_363_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_363_p1 = conv_1_bias_load_reg_1014;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_363_p1 = tmp_1_2_2_reg_999_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_363_p1 = tmp_1_2_1_reg_994_pp0_iter3_reg;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_363_p1 = tmp_1_2_reg_989_pp0_iter2_reg;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_363_p1 = tmp_1_1_2_reg_984_pp0_iter1_reg;
    end else begin
        grp_fu_363_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_367_p0 = conv_1_weights_2_2_0_2_reg_964;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_367_p0 = conv_1_weights_2_0_0_2_reg_954;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_367_p0 = conv_1_weights_1_1_0_2_reg_944;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_367_p0 = conv_1_weights_0_2_0_2_reg_934;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_367_p0 = conv_1_weights_0_0_0_q0;
    end else begin
        grp_fu_367_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_374_p0 = conv_1_weights_2_1_0_2_reg_959;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_374_p0 = conv_1_weights_1_2_0_2_reg_949;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_374_p0 = conv_1_weights_1_0_0_2_reg_939;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_374_p0 = conv_1_weights_0_1_0_q0;
        end else begin
            grp_fu_374_p0 = 'bx;
        end
    end else begin
        grp_fu_374_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_428_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_536_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_678_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln14_fu_678_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_10_fu_658_p2 = (sub_ln26_1_reg_787 + zext_ln26_11_fu_644_p1);

assign add_ln26_11_fu_668_p2 = (sub_ln26_2_reg_794 + zext_ln26_11_fu_644_p1);

assign add_ln26_1_fu_638_p2 = (c_0_reg_336 + 5'd2);

assign add_ln26_2_fu_500_p2 = (r_0_reg_313 + 5'd2);

assign add_ln26_3_fu_566_p2 = (sub_ln26_1_reg_787 + zext_ln26_8_fu_552_p1);

assign add_ln26_4_fu_576_p2 = (sub_ln26_2_reg_794 + zext_ln26_8_fu_552_p1);

assign add_ln26_6_fu_608_p2 = (sub_ln26_reg_780 + zext_ln26_10_fu_604_p1);

assign add_ln26_7_fu_618_p2 = (sub_ln26_1_reg_787 + zext_ln26_10_fu_604_p1);

assign add_ln26_8_fu_628_p2 = (sub_ln26_2_reg_794 + zext_ln26_10_fu_604_p1);

assign add_ln26_9_fu_648_p2 = (sub_ln26_reg_780 + zext_ln26_11_fu_644_p1);

assign add_ln26_fu_556_p2 = (sub_ln26_reg_780 + zext_ln26_8_fu_552_p1);

assign add_ln35_1_fu_707_p2 = (zext_ln26_9_reg_825 + zext_ln35_fu_703_p1);

assign add_ln35_fu_586_p2 = (phi_mul_reg_324 + zext_ln26_7_fu_548_p1);

assign add_ln8_fu_422_p2 = (phi_mul_reg_324 + 10'd26);

assign and_ln34_fu_752_p2 = (tmp_4_fu_380_p2 & or_ln34_fu_746_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln34_fu_716_p1 = grp_fu_363_p2;

assign c_fu_542_p2 = (c_0_reg_336 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_869_pp0_iter2_reg;

assign conv_1_weights_0_0_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_0_1_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_0_2_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_1_0_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_1_1_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_1_2_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_2_0_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_2_1_0_address0 = zext_ln26_fu_690_p1;

assign conv_1_weights_2_2_0_address0 = zext_ln26_fu_690_p1;

assign conv_out_address0 = zext_ln35_1_fu_712_p1;

assign conv_out_d0 = ((and_ln34_fu_752_p2[0:0] === 1'b1) ? grp_fu_363_p2 : 32'd0);

assign f_fu_684_p2 = (ap_phi_mux_f_0_phi_fu_351_p4 + 6'd1);

assign icmp_ln11_fu_536_p2 = ((c_0_reg_336 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_678_p2 = ((ap_phi_mux_f_0_phi_fu_351_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_740_p2 = ((trunc_ln34_fu_730_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_734_p2 = ((tmp_fu_720_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_428_p2 = ((r_0_reg_313 == 5'd26) ? 1'b1 : 1'b0);

assign or_ln34_fu_746_p2 = (icmp_ln34_fu_734_p2 | icmp_ln34_1_fu_740_p2);

assign r_fu_434_p2 = (r_0_reg_313 + 5'd1);

assign sext_ln26_1_fu_571_p1 = $signed(add_ln26_3_fu_566_p2);

assign sext_ln26_2_fu_581_p1 = $signed(add_ln26_4_fu_576_p2);

assign sext_ln26_3_fu_613_p1 = $signed(add_ln26_6_fu_608_p2);

assign sext_ln26_4_fu_623_p1 = $signed(add_ln26_7_fu_618_p2);

assign sext_ln26_5_fu_633_p1 = $signed(add_ln26_8_fu_628_p2);

assign sext_ln26_6_fu_653_p1 = $signed(add_ln26_9_fu_648_p2);

assign sext_ln26_7_fu_663_p1 = $signed(add_ln26_10_fu_658_p2);

assign sext_ln26_8_fu_673_p1 = $signed(add_ln26_11_fu_668_p2);

assign sext_ln26_fu_561_p1 = $signed(add_ln26_fu_556_p2);

assign sub_ln26_1_fu_494_p2 = (zext_ln26_3_fu_478_p1 - zext_ln26_4_fu_490_p1);

assign sub_ln26_2_fu_530_p2 = (zext_ln26_5_fu_514_p1 - zext_ln26_6_fu_526_p1);

assign sub_ln26_fu_464_p2 = (zext_ln26_1_fu_448_p1 - zext_ln26_2_fu_460_p1);

assign tmp_10_fu_518_p3 = {{add_ln26_2_fu_500_p2}, {2'd0}};

assign tmp_11_fu_592_p3 = {{add_ln35_fu_586_p2}, {5'd0}};

assign tmp_5_fu_440_p3 = {{r_0_reg_313}, {5'd0}};

assign tmp_6_fu_452_p3 = {{r_0_reg_313}, {2'd0}};

assign tmp_7_fu_470_p3 = {{r_fu_434_p2}, {5'd0}};

assign tmp_8_fu_482_p3 = {{r_fu_434_p2}, {2'd0}};

assign tmp_9_fu_506_p3 = {{add_ln26_2_fu_500_p2}, {5'd0}};

assign tmp_fu_720_p4 = {{bitcast_ln34_fu_716_p1[30:23]}};

assign trunc_ln34_fu_730_p1 = bitcast_ln34_fu_716_p1[22:0];

assign zext_ln26_10_fu_604_p1 = c_fu_542_p2;

assign zext_ln26_11_fu_644_p1 = add_ln26_1_fu_638_p2;

assign zext_ln26_1_fu_448_p1 = tmp_5_fu_440_p3;

assign zext_ln26_2_fu_460_p1 = tmp_6_fu_452_p3;

assign zext_ln26_3_fu_478_p1 = tmp_7_fu_470_p3;

assign zext_ln26_4_fu_490_p1 = tmp_8_fu_482_p3;

assign zext_ln26_5_fu_514_p1 = tmp_9_fu_506_p3;

assign zext_ln26_6_fu_526_p1 = tmp_10_fu_518_p3;

assign zext_ln26_7_fu_548_p1 = c_0_reg_336;

assign zext_ln26_8_fu_552_p1 = c_0_reg_336;

assign zext_ln26_9_fu_600_p1 = tmp_11_fu_592_p3;

assign zext_ln26_fu_690_p1 = ap_phi_mux_f_0_phi_fu_351_p4;

assign zext_ln35_1_fu_712_p1 = add_ln35_1_reg_874_pp0_iter4_reg;

assign zext_ln35_fu_703_p1 = ap_phi_mux_f_0_phi_fu_351_p4;

always @ (posedge ap_clk) begin
    sub_ln26_reg_780[1:0] <= 2'b00;
    sub_ln26_1_reg_787[1:0] <= 2'b00;
    sub_ln26_2_reg_794[1:0] <= 2'b00;
    zext_ln26_9_reg_825[4:0] <= 5'b00000;
    zext_ln26_9_reg_825[15] <= 1'b0;
    zext_ln26_reg_869[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_869_pp0_iter1_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln26_reg_869_pp0_iter2_reg[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //conv_1
