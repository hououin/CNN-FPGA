-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce1 : OUT STD_LOGIC;
    conv_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.104550,HLS_SYN_LAT=121057,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=10,HLS_SYN_FF=1980,HLS_SYN_LUT=2520,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_0_reg_347 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln14_reg_860 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state6_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state7_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state8_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state18_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_367_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_396 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_reg_860_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln14_reg_860_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal reg_417 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_reg_860_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_422_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_reg_767 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_434_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_775 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_464_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_reg_780 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln8_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_1_fu_494_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_787 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_530_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_reg_794 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln11_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c_fu_542_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_805 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_input_addr_reg_810 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_3_reg_815 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_6_reg_820 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_9_fu_600_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_9_reg_825 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_input_addr_1_reg_830 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_4_reg_835 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_7_reg_840 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_2_reg_845 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_5_reg_850 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_input_addr_8_reg_855 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln14_fu_678_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_860_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_684_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_864 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_869 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_869_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_869_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln35_1_fu_707_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_reg_874 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_reg_874_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_reg_874_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_reg_874_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_reg_874_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_1_weights_0_2_0_2_reg_934 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_2_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_2_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_2_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_2_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_2_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_2_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_979_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_984_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_989_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_994_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_994_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_999_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_999_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_3_1_1_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_load_reg_1014 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state4 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal r_0_reg_313 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_324 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_336 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_phi_mux_f_0_phi_fu_351_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal sext_ln26_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_2_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_3_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_4_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_5_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_6_fu_653_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_7_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_8_fu_673_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_1_fu_712_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_358_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_358_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_367_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_440_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_452_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_1_fu_448_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_2_fu_460_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_470_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_482_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_478_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_490_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_2_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_506_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_518_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_5_fu_514_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_526_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_8_fu_552_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_fu_556_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_3_fu_566_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_4_fu_576_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_586_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_592_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_10_fu_604_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_608_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_618_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_628_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_1_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_11_fu_644_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_9_fu_648_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_10_fu_658_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_11_fu_668_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_fu_703_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln34_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_720_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_730_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_752_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_0_address0,
        ce0 => conv_1_weights_0_0_0_ce0,
        q0 => conv_1_weights_0_0_0_q0);

    conv_1_weights_0_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_1_0_address0,
        ce0 => conv_1_weights_0_1_0_ce0,
        q0 => conv_1_weights_0_1_0_q0);

    conv_1_weights_0_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_2_0_address0,
        ce0 => conv_1_weights_0_2_0_ce0,
        q0 => conv_1_weights_0_2_0_q0);

    conv_1_weights_1_0_0_U : component conv_1_conv_1_weieOg
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_0_address0,
        ce0 => conv_1_weights_1_0_0_ce0,
        q0 => conv_1_weights_1_0_0_q0);

    conv_1_weights_1_1_0_U : component conv_1_conv_1_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_1_0_address0,
        ce0 => conv_1_weights_1_1_0_ce0,
        q0 => conv_1_weights_1_1_0_q0);

    conv_1_weights_1_2_0_U : component conv_1_conv_1_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_2_0_address0,
        ce0 => conv_1_weights_1_2_0_ce0,
        q0 => conv_1_weights_1_2_0_q0);

    conv_1_weights_2_0_0_U : component conv_1_conv_1_weihbi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_0_address0,
        ce0 => conv_1_weights_2_0_0_ce0,
        q0 => conv_1_weights_2_0_0_q0);

    conv_1_weights_2_1_0_U : component conv_1_conv_1_weiibs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_1_0_address0,
        ce0 => conv_1_weights_2_1_0_ce0,
        q0 => conv_1_weights_2_1_0_q0);

    conv_1_weights_2_2_0_U : component conv_1_conv_1_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_2_0_address0,
        ce0 => conv_1_weights_2_2_0_ce0,
        q0 => conv_1_weights_2_2_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_kbM_U1 : component conv_1_fadd_32ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_358_p0,
        din1 => grp_fu_358_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_358_p2);

    conv_1_fadd_32ns_kbM_U2 : component conv_1_fadd_32ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_363_p2);

    conv_1_fmul_32ns_lbW_U3 : component conv_1_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_367_p0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_367_p2);

    conv_1_fmul_32ns_lbW_U4 : component conv_1_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_374_p0,
        din1 => conv_input_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p2);

    conv_1_fcmp_32ns_mb6_U5 : component conv_1_fcmp_32ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_363_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_380_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_536_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_536_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_336_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                c_0_reg_336 <= c_reg_805;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_428_p2 = ap_const_lv1_0))) then 
                c_0_reg_336 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_347_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_reg_860 = ap_const_lv1_0))) then 
                f_0_reg_347 <= f_reg_864;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_536_p2 = ap_const_lv1_0))) then 
                f_0_reg_347 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_324 <= add_ln8_reg_767;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_324 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_313 <= r_reg_775;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_313 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_fu_678_p2 = ap_const_lv1_0))) then
                add_ln35_1_reg_874 <= add_ln35_1_fu_707_p2;
                    zext_ln26_reg_869(5 downto 0) <= zext_ln26_fu_690_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln35_1_reg_874_pp0_iter1_reg <= add_ln35_1_reg_874;
                add_ln35_1_reg_874_pp0_iter2_reg <= add_ln35_1_reg_874_pp0_iter1_reg;
                add_ln35_1_reg_874_pp0_iter3_reg <= add_ln35_1_reg_874_pp0_iter2_reg;
                add_ln35_1_reg_874_pp0_iter4_reg <= add_ln35_1_reg_874_pp0_iter3_reg;
                icmp_ln14_reg_860 <= icmp_ln14_fu_678_p2;
                icmp_ln14_reg_860_pp0_iter1_reg <= icmp_ln14_reg_860;
                icmp_ln14_reg_860_pp0_iter2_reg <= icmp_ln14_reg_860_pp0_iter1_reg;
                icmp_ln14_reg_860_pp0_iter3_reg <= icmp_ln14_reg_860_pp0_iter2_reg;
                icmp_ln14_reg_860_pp0_iter4_reg <= icmp_ln14_reg_860_pp0_iter3_reg;
                tmp_1_2_1_reg_994_pp0_iter2_reg <= tmp_1_2_1_reg_994;
                tmp_1_2_1_reg_994_pp0_iter3_reg <= tmp_1_2_1_reg_994_pp0_iter2_reg;
                tmp_1_2_reg_989_pp0_iter2_reg <= tmp_1_2_reg_989;
                    zext_ln26_reg_869_pp0_iter1_reg(5 downto 0) <= zext_ln26_reg_869(5 downto 0);
                    zext_ln26_reg_869_pp0_iter2_reg(5 downto 0) <= zext_ln26_reg_869_pp0_iter1_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_767 <= add_ln8_fu_422_p2;
                r_reg_775 <= r_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_805 <= c_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_860_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_bias_load_reg_1014 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_860 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_0_2_0_2_reg_934 <= conv_1_weights_0_2_0_q0;
                conv_1_weights_1_0_0_2_reg_939 <= conv_1_weights_1_0_0_q0;
                conv_1_weights_1_1_0_2_reg_944 <= conv_1_weights_1_1_0_q0;
                conv_1_weights_1_2_0_2_reg_949 <= conv_1_weights_1_2_0_q0;
                conv_1_weights_2_0_0_2_reg_954 <= conv_1_weights_2_0_0_q0;
                conv_1_weights_2_1_0_2_reg_959 <= conv_1_weights_2_1_0_q0;
                conv_1_weights_2_2_0_2_reg_964 <= conv_1_weights_2_2_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_536_p2 = ap_const_lv1_0))) then
                conv_input_addr_1_reg_830 <= sext_ln26_3_fu_613_p1(10 - 1 downto 0);
                conv_input_addr_2_reg_845 <= sext_ln26_6_fu_653_p1(10 - 1 downto 0);
                conv_input_addr_3_reg_815 <= sext_ln26_1_fu_571_p1(10 - 1 downto 0);
                conv_input_addr_4_reg_835 <= sext_ln26_4_fu_623_p1(10 - 1 downto 0);
                conv_input_addr_5_reg_850 <= sext_ln26_7_fu_663_p1(10 - 1 downto 0);
                conv_input_addr_6_reg_820 <= sext_ln26_2_fu_581_p1(10 - 1 downto 0);
                conv_input_addr_7_reg_840 <= sext_ln26_5_fu_633_p1(10 - 1 downto 0);
                conv_input_addr_8_reg_855 <= sext_ln26_8_fu_673_p1(10 - 1 downto 0);
                conv_input_addr_reg_810 <= sext_ln26_fu_561_p1(10 - 1 downto 0);
                    zext_ln26_9_reg_825(14 downto 5) <= zext_ln26_9_fu_600_p1(14 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                f_reg_864 <= f_fu_684_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln14_reg_860 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_860 = ap_const_lv1_0)))) then
                reg_396 <= grp_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_reg_860 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln14_reg_860 = ap_const_lv1_0)))) then
                reg_402 <= grp_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln14_reg_860_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_860_pp0_iter1_reg = ap_const_lv1_0)))) then
                reg_407 <= grp_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_reg_860_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln14_reg_860_pp0_iter2_reg = ap_const_lv1_0)))) then
                reg_412 <= grp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln14_reg_860_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_860_pp0_iter3_reg = ap_const_lv1_0)))) then
                reg_417 <= grp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_428_p2 = ap_const_lv1_0))) then
                    sub_ln26_1_reg_787(10 downto 2) <= sub_ln26_1_fu_494_p2(10 downto 2);
                    sub_ln26_2_reg_794(10 downto 2) <= sub_ln26_2_fu_530_p2(10 downto 2);
                    sub_ln26_reg_780(10 downto 2) <= sub_ln26_fu_464_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln14_reg_860 = ap_const_lv1_0))) then
                tmp_1_0_1_reg_969 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln14_reg_860 = ap_const_lv1_0))) then
                tmp_1_1_1_reg_979 <= grp_fu_367_p2;
                tmp_1_1_2_reg_984 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_1_1_1_reg_979_pp0_iter1_reg <= tmp_1_1_1_reg_979;
                tmp_1_1_2_reg_984_pp0_iter1_reg <= tmp_1_1_2_reg_984;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln14_reg_860 = ap_const_lv1_0))) then
                tmp_1_1_reg_974 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_reg_860 = ap_const_lv1_0))) then
                tmp_1_2_1_reg_994 <= grp_fu_374_p2;
                tmp_1_2_reg_989 <= grp_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_860_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_2_2_reg_999 <= grp_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_2_2_reg_999_pp0_iter2_reg <= tmp_1_2_2_reg_999;
                tmp_1_2_2_reg_999_pp0_iter3_reg <= tmp_1_2_2_reg_999_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_860_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                w_sum_3_1_1_reg_1004 <= grp_fu_358_p2;
            end if;
        end if;
    end process;
    sub_ln26_reg_780(1 downto 0) <= "00";
    sub_ln26_1_reg_787(1 downto 0) <= "00";
    sub_ln26_2_reg_794(1 downto 0) <= "00";
    zext_ln26_9_reg_825(4 downto 0) <= "00000";
    zext_ln26_9_reg_825(15) <= '0';
    zext_ln26_reg_869(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_869_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_869_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, ap_CS_fsm_state2, icmp_ln8_fu_428_p2, icmp_ln11_fu_536_p2, ap_CS_fsm_state3, icmp_ln14_fu_678_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_536_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln14_fu_678_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln14_fu_678_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln26_10_fu_658_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_787) + unsigned(zext_ln26_11_fu_644_p1));
    add_ln26_11_fu_668_p2 <= std_logic_vector(unsigned(sub_ln26_2_reg_794) + unsigned(zext_ln26_11_fu_644_p1));
    add_ln26_1_fu_638_p2 <= std_logic_vector(unsigned(c_0_reg_336) + unsigned(ap_const_lv5_2));
    add_ln26_2_fu_500_p2 <= std_logic_vector(unsigned(r_0_reg_313) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_566_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_787) + unsigned(zext_ln26_8_fu_552_p1));
    add_ln26_4_fu_576_p2 <= std_logic_vector(unsigned(sub_ln26_2_reg_794) + unsigned(zext_ln26_8_fu_552_p1));
    add_ln26_6_fu_608_p2 <= std_logic_vector(unsigned(sub_ln26_reg_780) + unsigned(zext_ln26_10_fu_604_p1));
    add_ln26_7_fu_618_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_787) + unsigned(zext_ln26_10_fu_604_p1));
    add_ln26_8_fu_628_p2 <= std_logic_vector(unsigned(sub_ln26_2_reg_794) + unsigned(zext_ln26_10_fu_604_p1));
    add_ln26_9_fu_648_p2 <= std_logic_vector(unsigned(sub_ln26_reg_780) + unsigned(zext_ln26_11_fu_644_p1));
    add_ln26_fu_556_p2 <= std_logic_vector(unsigned(sub_ln26_reg_780) + unsigned(zext_ln26_8_fu_552_p1));
    add_ln35_1_fu_707_p2 <= std_logic_vector(unsigned(zext_ln26_9_reg_825) + unsigned(zext_ln35_fu_703_p1));
    add_ln35_fu_586_p2 <= std_logic_vector(unsigned(phi_mul_reg_324) + unsigned(zext_ln26_7_fu_548_p1));
    add_ln8_fu_422_p2 <= std_logic_vector(unsigned(phi_mul_reg_324) + unsigned(ap_const_lv10_1A));
    and_ln34_fu_752_p2 <= (tmp_4_fu_380_p2 and or_ln34_fu_746_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state26 <= ap_CS_fsm(8);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state4_assign_proc : process(icmp_ln14_fu_678_p2)
    begin
        if ((icmp_ln14_fu_678_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_428_p2)
    begin
        if (((icmp_ln8_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_351_p4_assign_proc : process(f_0_reg_347, icmp_ln14_reg_860, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, f_reg_864, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln14_reg_860 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_351_p4 <= f_reg_864;
        else 
            ap_phi_mux_f_0_phi_fu_351_p4 <= f_0_reg_347;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_428_p2)
    begin
        if (((icmp_ln8_fu_428_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_716_p1 <= grp_fu_363_p2;
    c_fu_542_p2 <= std_logic_vector(unsigned(c_0_reg_336) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_869_pp0_iter2_reg(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_0_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_1_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_0_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_2_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_0_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_1_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_1_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_1_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_2_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_1_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_2_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_1_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_2_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_2_0_address0 <= zext_ln26_fu_690_p1(5 - 1 downto 0);

    conv_1_weights_2_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, conv_input_addr_reg_810, conv_input_addr_6_reg_820, conv_input_addr_4_reg_835, conv_input_addr_2_reg_845, conv_input_addr_8_reg_855, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv_input_address0 <= conv_input_addr_8_reg_855;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv_input_address0 <= conv_input_addr_6_reg_820;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_input_address0 <= conv_input_addr_4_reg_835;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address0 <= conv_input_addr_2_reg_845;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address0 <= conv_input_addr_reg_810;
            else 
                conv_input_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_input_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, conv_input_addr_3_reg_815, conv_input_addr_1_reg_830, conv_input_addr_7_reg_840, conv_input_addr_5_reg_850, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv_input_address1 <= conv_input_addr_7_reg_840;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_input_address1 <= conv_input_addr_5_reg_850;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address1 <= conv_input_addr_3_reg_815;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address1 <= conv_input_addr_1_reg_830;
            else 
                conv_input_address1 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_ce1 <= ap_const_logic_1;
        else 
            conv_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= zext_ln35_1_fu_712_p1(15 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_363_p2 when (and_ln34_fu_752_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln14_reg_860_pp0_iter4_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln14_reg_860_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_684_p2 <= std_logic_vector(unsigned(ap_phi_mux_f_0_phi_fu_351_p4) + unsigned(ap_const_lv6_1));

    grp_fu_358_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_367_p2, reg_402, reg_407, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_358_p0 <= reg_407;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_358_p0 <= reg_402;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_358_p0 <= grp_fu_367_p2;
        else 
            grp_fu_358_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_358_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_396, ap_enable_reg_pp0_iter2, tmp_1_0_1_reg_969, tmp_1_1_reg_974, tmp_1_1_1_reg_979_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_358_p1 <= tmp_1_1_1_reg_979_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_358_p1 <= tmp_1_1_reg_974;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_358_p1 <= reg_396;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_358_p1 <= tmp_1_0_1_reg_969;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_358_p1 <= ap_const_lv32_0;
        else 
            grp_fu_358_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, reg_412, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, reg_417, w_sum_3_1_1_reg_1004, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_363_p0 <= reg_417;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_363_p0 <= reg_412;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_363_p0 <= w_sum_3_1_1_reg_1004;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmp_1_1_2_reg_984_pp0_iter1_reg, tmp_1_2_reg_989_pp0_iter2_reg, tmp_1_2_1_reg_994_pp0_iter3_reg, tmp_1_2_2_reg_999_pp0_iter3_reg, conv_1_bias_load_reg_1014, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_363_p1 <= conv_1_bias_load_reg_1014;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_363_p1 <= tmp_1_2_2_reg_999_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_363_p1 <= tmp_1_2_1_reg_994_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_363_p1 <= tmp_1_2_reg_989_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_363_p1 <= tmp_1_1_2_reg_984_pp0_iter1_reg;
        else 
            grp_fu_363_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_367_p0_assign_proc : process(conv_1_weights_0_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv_1_weights_0_2_0_2_reg_934, conv_1_weights_1_1_0_2_reg_944, conv_1_weights_2_0_0_2_reg_954, conv_1_weights_2_2_0_2_reg_964, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_367_p0 <= conv_1_weights_2_2_0_2_reg_964;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_367_p0 <= conv_1_weights_2_0_0_2_reg_954;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_367_p0 <= conv_1_weights_1_1_0_2_reg_944;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_367_p0 <= conv_1_weights_0_2_0_2_reg_934;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_367_p0 <= conv_1_weights_0_0_0_q0;
        else 
            grp_fu_367_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_374_p0_assign_proc : process(conv_1_weights_0_1_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, conv_1_weights_1_0_0_2_reg_939, conv_1_weights_1_2_0_2_reg_949, conv_1_weights_2_1_0_2_reg_959, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_374_p0 <= conv_1_weights_2_1_0_2_reg_959;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_374_p0 <= conv_1_weights_1_2_0_2_reg_949;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_374_p0 <= conv_1_weights_1_0_0_2_reg_939;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_374_p0 <= conv_1_weights_0_1_0_q0;
            else 
                grp_fu_374_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_374_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_536_p2 <= "1" when (c_0_reg_336 = ap_const_lv5_1A) else "0";
    icmp_ln14_fu_678_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_351_p4 = ap_const_lv6_20) else "0";
    icmp_ln34_1_fu_740_p2 <= "1" when (trunc_ln34_fu_730_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_734_p2 <= "0" when (tmp_fu_720_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_428_p2 <= "1" when (r_0_reg_313 = ap_const_lv5_1A) else "0";
    or_ln34_fu_746_p2 <= (icmp_ln34_fu_734_p2 or icmp_ln34_1_fu_740_p2);
    r_fu_434_p2 <= std_logic_vector(unsigned(r_0_reg_313) + unsigned(ap_const_lv5_1));
        sext_ln26_1_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_3_fu_566_p2),64));

        sext_ln26_2_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_4_fu_576_p2),64));

        sext_ln26_3_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_6_fu_608_p2),64));

        sext_ln26_4_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_7_fu_618_p2),64));

        sext_ln26_5_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_8_fu_628_p2),64));

        sext_ln26_6_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_9_fu_648_p2),64));

        sext_ln26_7_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_10_fu_658_p2),64));

        sext_ln26_8_fu_673_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_11_fu_668_p2),64));

        sext_ln26_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_fu_556_p2),64));

    sub_ln26_1_fu_494_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_478_p1) - unsigned(zext_ln26_4_fu_490_p1));
    sub_ln26_2_fu_530_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_514_p1) - unsigned(zext_ln26_6_fu_526_p1));
    sub_ln26_fu_464_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_448_p1) - unsigned(zext_ln26_2_fu_460_p1));
    tmp_10_fu_518_p3 <= (add_ln26_2_fu_500_p2 & ap_const_lv2_0);
    tmp_11_fu_592_p3 <= (add_ln35_fu_586_p2 & ap_const_lv5_0);
    tmp_5_fu_440_p3 <= (r_0_reg_313 & ap_const_lv5_0);
    tmp_6_fu_452_p3 <= (r_0_reg_313 & ap_const_lv2_0);
    tmp_7_fu_470_p3 <= (r_fu_434_p2 & ap_const_lv5_0);
    tmp_8_fu_482_p3 <= (r_fu_434_p2 & ap_const_lv2_0);
    tmp_9_fu_506_p3 <= (add_ln26_2_fu_500_p2 & ap_const_lv5_0);
    tmp_fu_720_p4 <= bitcast_ln34_fu_716_p1(30 downto 23);
    trunc_ln34_fu_730_p1 <= bitcast_ln34_fu_716_p1(23 - 1 downto 0);
    zext_ln26_10_fu_604_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_542_p2),11));
    zext_ln26_11_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_638_p2),11));
    zext_ln26_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_440_p3),11));
    zext_ln26_2_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_452_p3),11));
    zext_ln26_3_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_470_p3),11));
    zext_ln26_4_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_482_p3),11));
    zext_ln26_5_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_506_p3),11));
    zext_ln26_6_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_518_p3),11));
    zext_ln26_7_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_336),10));
    zext_ln26_8_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_336),11));
    zext_ln26_9_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_592_p3),16));
    zext_ln26_fu_690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_f_0_phi_fu_351_p4),64));
    zext_ln35_1_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_reg_874_pp0_iter4_reg),64));
    zext_ln35_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_f_0_phi_fu_351_p4),16));
end behav;
