-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce1 : OUT STD_LOGIC;
    conv_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.104550,HLS_SYN_LAT=108178,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=11,HLS_SYN_FF=2082,HLS_SYN_LUT=2758,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten30_reg_332 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_0_reg_343 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_354 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_376 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_431 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_436 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_reg_928_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_441 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln8_reg_928_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal reg_446 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_reg_928_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_928_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_475_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_932 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln35_1_fu_495_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_937 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_937_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_937_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_937_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_937_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_reg_943 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_2_fu_539_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_reg_948 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_fu_555_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_reg_954 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_6_fu_607_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_6_reg_960 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_6_reg_960_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_6_reg_960_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_6_reg_960_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_6_reg_960_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_7_fu_615_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_reg_966 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_reg_966_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_reg_966_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_reg_966_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_reg_966_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_2_fu_623_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_reg_972 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_3_fu_652_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_3_reg_983 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_9_fu_673_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_9_reg_994 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_681_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_999 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_999_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_999_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln11_fu_700_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_1049 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_730_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_1054 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_4_fu_746_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_4_reg_1065 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_1_weights_0_2_0_2_reg_1086 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_2_reg_1091 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_2_reg_1096 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_2_reg_1101 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_2_reg_1106 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_2_reg_1111 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_2_reg_1116 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_6_fu_787_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_reg_1121 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_10_fu_801_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_10_reg_1131 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_14_fu_815_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_14_reg_1141 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_403_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_1_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1161 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1171 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1171_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_1176 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_1176_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_832_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_1181 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_2_reg_1186 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1186_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1191 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1191_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_1191_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1196 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1196_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_1196_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_3_1_1_reg_1201 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_load_reg_1211 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten30_phi_fu_336_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_347_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_358_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_c_0_phi_fu_369_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_f_0_phi_fu_380_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_7_fu_633_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_12_fu_754_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_13_fu_810_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_820_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal sext_ln26_1_fu_824_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_14_fu_828_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln35_6_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_403_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_1_fu_503_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_515_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_1_fu_511_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_2_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_fu_533_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_547_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_487_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_3_fu_595_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_4_fu_627_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_4_fu_561_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_8_fu_644_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_8_fu_656_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_11_fu_667_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_fu_569_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_fu_694_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_fu_708_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_719_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_715_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_726_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_736_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_12_fu_749_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_fu_759_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_770_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_5_fu_766_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_777_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_781_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_9_fu_792_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_13_fu_806_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_919_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_843_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_9_fu_850_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_5_fu_854_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_2_fu_857_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln34_fu_868_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_872_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_882_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_904_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_919_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_919_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_919_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_919_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_919_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_0_address0,
        ce0 => conv_1_weights_0_0_0_ce0,
        q0 => conv_1_weights_0_0_0_q0);

    conv_1_weights_0_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_1_0_address0,
        ce0 => conv_1_weights_0_1_0_ce0,
        q0 => conv_1_weights_0_1_0_q0);

    conv_1_weights_0_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_2_0_address0,
        ce0 => conv_1_weights_0_2_0_ce0,
        q0 => conv_1_weights_0_2_0_q0);

    conv_1_weights_1_0_0_U : component conv_1_conv_1_weieOg
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_0_address0,
        ce0 => conv_1_weights_1_0_0_ce0,
        q0 => conv_1_weights_1_0_0_q0);

    conv_1_weights_1_1_0_U : component conv_1_conv_1_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_1_0_address0,
        ce0 => conv_1_weights_1_1_0_ce0,
        q0 => conv_1_weights_1_1_0_q0);

    conv_1_weights_1_2_0_U : component conv_1_conv_1_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_2_0_address0,
        ce0 => conv_1_weights_1_2_0_ce0,
        q0 => conv_1_weights_1_2_0_q0);

    conv_1_weights_2_0_0_U : component conv_1_conv_1_weihbi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_0_address0,
        ce0 => conv_1_weights_2_0_0_ce0,
        q0 => conv_1_weights_2_0_0_q0);

    conv_1_weights_2_1_0_U : component conv_1_conv_1_weiibs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_1_0_address0,
        ce0 => conv_1_weights_2_1_0_ce0,
        q0 => conv_1_weights_2_1_0_q0);

    conv_1_weights_2_2_0_U : component conv_1_conv_1_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_2_0_address0,
        ce0 => conv_1_weights_2_2_0_ce0,
        q0 => conv_1_weights_2_2_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_kbM_U1 : component conv_1_fadd_32ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_387_p0,
        din1 => grp_fu_387_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    conv_1_fadd_32ns_kbM_U2 : component conv_1_fadd_32ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    conv_1_fmul_32ns_lbW_U3 : component conv_1_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_396_p0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    conv_1_fmul_32ns_lbW_U4 : component conv_1_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_403_p0,
        din1 => conv_input_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_403_p2);

    conv_1_fcmp_32ns_mb6_U5 : component conv_1_fcmp_32ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_392_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_4_fu_409_p2);

    conv_1_mac_muladdncg_U6 : component conv_1_mac_muladdncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_919_p0,
        din1 => grp_fu_919_p1,
        din2 => grp_fu_919_p2,
        dout => grp_fu_919_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
                c_0_reg_365 <= select_ln35_7_reg_966;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_365 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
                f_0_reg_376 <= f_reg_1181;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_376 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten30_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
                indvar_flatten30_reg_332 <= add_ln8_reg_932;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten30_reg_332 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
                indvar_flatten_reg_354 <= select_ln11_reg_1049;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_354 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_0_reg_343_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
                r_0_reg_343 <= select_ln35_1_reg_937;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_343 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then
                add_ln26_10_reg_1131 <= add_ln26_10_fu_801_p2;
                add_ln26_14_reg_1141 <= add_ln26_14_fu_815_p2;
                add_ln26_6_reg_1121 <= add_ln26_6_fu_787_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_fu_469_p2 = ap_const_lv1_0))) then
                add_ln35_reg_954 <= add_ln35_fu_555_p2;
                select_ln35_2_reg_948 <= select_ln35_2_fu_539_p3;
                select_ln35_6_reg_960 <= select_ln35_6_fu_607_p3;
                select_ln35_9_reg_994 <= select_ln35_9_fu_673_p3;
                    sub_ln26_reg_943(10 downto 2) <= sub_ln26_fu_527_p2(10 downto 2);
                    zext_ln26_reg_999(5 downto 0) <= zext_ln26_fu_681_p1(5 downto 0);
                    zext_ln35_2_reg_972(4 downto 0) <= zext_ln35_2_fu_623_p1(4 downto 0);
                    zext_ln35_3_reg_983(4 downto 0) <= zext_ln35_3_fu_652_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln8_reg_932 <= add_ln8_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_928_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_bias_load_reg_1211 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_928 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_0_2_0_2_reg_1086 <= conv_1_weights_0_2_0_q0;
                conv_1_weights_1_0_0_2_reg_1091 <= conv_1_weights_1_0_0_q0;
                conv_1_weights_1_1_0_2_reg_1096 <= conv_1_weights_1_1_0_q0;
                conv_1_weights_1_2_0_2_reg_1101 <= conv_1_weights_1_2_0_q0;
                conv_1_weights_2_0_0_2_reg_1106 <= conv_1_weights_2_0_0_q0;
                conv_1_weights_2_1_0_2_reg_1111 <= conv_1_weights_2_1_0_q0;
                conv_1_weights_2_2_0_2_reg_1116 <= conv_1_weights_2_2_0_q0;
                    sub_ln26_1_reg_1054(10 downto 2) <= sub_ln26_1_fu_730_p2(10 downto 2);
                    zext_ln35_4_reg_1065(4 downto 0) <= zext_ln35_4_fu_746_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then
                f_reg_1181 <= f_fu_832_p2;
                tmp_1_1_1_reg_1171 <= grp_fu_396_p2;
                tmp_1_1_2_reg_1176 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln8_reg_928 <= icmp_ln8_fu_469_p2;
                icmp_ln8_reg_928_pp0_iter1_reg <= icmp_ln8_reg_928;
                icmp_ln8_reg_928_pp0_iter2_reg <= icmp_ln8_reg_928_pp0_iter1_reg;
                icmp_ln8_reg_928_pp0_iter3_reg <= icmp_ln8_reg_928_pp0_iter2_reg;
                icmp_ln8_reg_928_pp0_iter4_reg <= icmp_ln8_reg_928_pp0_iter3_reg;
                select_ln35_1_reg_937_pp0_iter1_reg <= select_ln35_1_reg_937;
                select_ln35_1_reg_937_pp0_iter2_reg <= select_ln35_1_reg_937_pp0_iter1_reg;
                select_ln35_1_reg_937_pp0_iter3_reg <= select_ln35_1_reg_937_pp0_iter2_reg;
                select_ln35_1_reg_937_pp0_iter4_reg <= select_ln35_1_reg_937_pp0_iter3_reg;
                select_ln35_6_reg_960_pp0_iter1_reg <= select_ln35_6_reg_960;
                select_ln35_6_reg_960_pp0_iter2_reg <= select_ln35_6_reg_960_pp0_iter1_reg;
                select_ln35_6_reg_960_pp0_iter3_reg <= select_ln35_6_reg_960_pp0_iter2_reg;
                select_ln35_6_reg_960_pp0_iter4_reg <= select_ln35_6_reg_960_pp0_iter3_reg;
                select_ln35_7_reg_966_pp0_iter1_reg <= select_ln35_7_reg_966;
                select_ln35_7_reg_966_pp0_iter2_reg <= select_ln35_7_reg_966_pp0_iter1_reg;
                select_ln35_7_reg_966_pp0_iter3_reg <= select_ln35_7_reg_966_pp0_iter2_reg;
                select_ln35_7_reg_966_pp0_iter4_reg <= select_ln35_7_reg_966_pp0_iter3_reg;
                tmp_1_2_1_reg_1191_pp0_iter2_reg <= tmp_1_2_1_reg_1191;
                tmp_1_2_1_reg_1191_pp0_iter3_reg <= tmp_1_2_1_reg_1191_pp0_iter2_reg;
                tmp_1_2_reg_1186_pp0_iter2_reg <= tmp_1_2_reg_1186;
                    zext_ln26_reg_999_pp0_iter1_reg(5 downto 0) <= zext_ln26_reg_999(5 downto 0);
                    zext_ln26_reg_999_pp0_iter2_reg(5 downto 0) <= zext_ln26_reg_999_pp0_iter1_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0)))) then
                reg_425 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0)))) then
                reg_431 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln8_reg_928_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_928_pp0_iter1_reg = ap_const_lv1_0)))) then
                reg_436 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_928_pp0_iter2_reg = ap_const_lv1_0)))) then
                reg_441 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln8_reg_928_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_928_pp0_iter3_reg = ap_const_lv1_0)))) then
                reg_446 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_469_p2 = ap_const_lv1_0))) then
                select_ln11_reg_1049 <= select_ln11_fu_700_p3;
                select_ln35_1_reg_937 <= select_ln35_1_fu_495_p3;
                select_ln35_7_reg_966 <= select_ln35_7_fu_615_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then
                tmp_1_0_1_reg_1146 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_1_1_1_reg_1171_pp0_iter1_reg <= tmp_1_1_1_reg_1171;
                tmp_1_1_2_reg_1176_pp0_iter1_reg <= tmp_1_1_2_reg_1176;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then
                tmp_1_1_reg_1161 <= grp_fu_403_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then
                tmp_1_2_1_reg_1191 <= grp_fu_403_p2;
                tmp_1_2_reg_1186 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_928_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_2_2_reg_1196 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_1_2_2_reg_1196_pp0_iter2_reg <= tmp_1_2_2_reg_1196;
                tmp_1_2_2_reg_1196_pp0_iter3_reg <= tmp_1_2_2_reg_1196_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_928_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                w_sum_3_1_1_reg_1201 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    sub_ln26_reg_943(1 downto 0) <= "00";
    zext_ln35_2_reg_972(10 downto 5) <= "000000";
    zext_ln35_3_reg_983(10 downto 5) <= "000000";
    zext_ln26_reg_999(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_999_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_999_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    sub_ln26_1_reg_1054(1 downto 0) <= "00";
    zext_ln35_4_reg_1065(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln8_fu_469_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_469_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_469_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_fu_694_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_358_p4));
    add_ln26_10_fu_801_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_781_p2) + unsigned(zext_ln35_3_reg_983));
    add_ln26_11_fu_667_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(select_ln35_fu_487_p3));
    add_ln26_12_fu_749_p2 <= std_logic_vector(unsigned(sub_ln26_reg_943) + unsigned(zext_ln35_4_fu_746_p1));
    add_ln26_13_fu_806_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_1054) + unsigned(zext_ln35_4_reg_1065));
    add_ln26_14_fu_815_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_781_p2) + unsigned(zext_ln35_4_reg_1065));
    add_ln26_1_fu_463_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_369_p4) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_fu_487_p3));
    add_ln26_4_fu_627_p2 <= std_logic_vector(unsigned(sub_ln26_fu_527_p2) + unsigned(zext_ln35_2_fu_623_p1));
    add_ln26_5_fu_736_p2 <= std_logic_vector(unsigned(sub_ln26_1_fu_730_p2) + unsigned(zext_ln35_2_reg_972));
    add_ln26_6_fu_787_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_781_p2) + unsigned(zext_ln35_2_reg_972));
    add_ln26_7_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln35_fu_487_p3));
    add_ln26_8_fu_656_p2 <= std_logic_vector(unsigned(sub_ln26_fu_527_p2) + unsigned(zext_ln35_3_fu_652_p1));
    add_ln26_9_fu_792_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_1054) + unsigned(zext_ln35_3_reg_983));
    add_ln26_fu_533_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(ap_phi_mux_r_0_phi_fu_347_p4));
    add_ln35_2_fu_857_p2 <= std_logic_vector(unsigned(zext_ln26_9_fu_850_p1) + unsigned(zext_ln35_5_fu_854_p1));
    add_ln35_fu_555_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_347_p4) + unsigned(select_ln35_3_fu_547_p3));
    add_ln8_fu_475_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten30_phi_fu_336_p4) + unsigned(ap_const_lv15_1));
    and_ln34_fu_904_p2 <= (tmp_4_fu_409_p2 and or_ln34_fu_898_p2);
    and_ln35_fu_589_p2 <= (xor_ln35_fu_577_p2 and icmp_ln14_fu_583_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state24 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_469_p2)
    begin
        if ((icmp_ln8_fu_469_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_369_p4_assign_proc : process(c_0_reg_365, icmp_ln8_reg_928, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln35_7_reg_966, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_369_p4 <= select_ln35_7_reg_966;
        else 
            ap_phi_mux_c_0_phi_fu_369_p4 <= c_0_reg_365;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_380_p4_assign_proc : process(f_0_reg_376, icmp_ln8_reg_928, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, f_reg_1181, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_380_p4 <= f_reg_1181;
        else 
            ap_phi_mux_f_0_phi_fu_380_p4 <= f_0_reg_376;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten30_phi_fu_336_p4_assign_proc : process(indvar_flatten30_reg_332, icmp_ln8_reg_928, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln8_reg_932, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten30_phi_fu_336_p4 <= add_ln8_reg_932;
        else 
            ap_phi_mux_indvar_flatten30_phi_fu_336_p4 <= indvar_flatten30_reg_332;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_358_p4_assign_proc : process(indvar_flatten_reg_354, icmp_ln8_reg_928, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln11_reg_1049, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_358_p4 <= select_ln11_reg_1049;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_358_p4 <= indvar_flatten_reg_354;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_347_p4_assign_proc : process(r_0_reg_343, icmp_ln8_reg_928, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln35_1_reg_937, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_928 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_347_p4 <= select_ln35_1_reg_937;
        else 
            ap_phi_mux_r_0_phi_fu_347_p4 <= r_0_reg_343;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_868_p1 <= grp_fu_392_p2;
    c_fu_457_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_369_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_999_pp0_iter2_reg(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_0_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_1_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_0_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_2_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_0_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_1_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_1_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_1_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_2_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_1_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_2_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_1_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_2_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_2_0_address0 <= zext_ln26_fu_681_p1(5 - 1 downto 0);

    conv_1_weights_2_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_7_fu_633_p1, ap_block_pp0_stage1, zext_ln26_12_fu_754_p1, zext_ln26_11_fu_796_p1, ap_block_pp0_stage2, sext_ln26_fu_820_p1, ap_block_pp0_stage3, zext_ln26_14_fu_828_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv_input_address0 <= zext_ln26_14_fu_828_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv_input_address0 <= sext_ln26_fu_820_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_input_address0 <= zext_ln26_11_fu_796_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address0 <= zext_ln26_12_fu_754_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address0 <= zext_ln26_7_fu_633_p1(10 - 1 downto 0);
            else 
                conv_input_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_input_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_10_fu_662_p1, zext_ln26_8_fu_741_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln26_13_fu_810_p1, ap_block_pp0_stage3, sext_ln26_1_fu_824_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv_input_address1 <= sext_ln26_1_fu_824_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_input_address1 <= zext_ln26_13_fu_810_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address1 <= zext_ln26_8_fu_741_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address1 <= zext_ln26_10_fu_662_p1(10 - 1 downto 0);
            else 
                conv_input_address1 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_ce1 <= ap_const_logic_1;
        else 
            conv_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= zext_ln35_6_fu_863_p1(15 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_392_p2 when (and_ln34_fu_904_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln8_reg_928_pp0_iter4_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_928_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_6_reg_960));

    grp_fu_387_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_396_p2, reg_431, reg_436, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_387_p0 <= reg_436;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_387_p0 <= reg_431;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_387_p0 <= grp_fu_396_p2;
        else 
            grp_fu_387_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_425, ap_enable_reg_pp0_iter2, tmp_1_0_1_reg_1146, tmp_1_1_reg_1161, tmp_1_1_1_reg_1171_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_387_p1 <= tmp_1_1_1_reg_1171_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_387_p1 <= tmp_1_1_reg_1161;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_387_p1 <= reg_425;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_387_p1 <= tmp_1_0_1_reg_1146;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_387_p1 <= ap_const_lv32_0;
        else 
            grp_fu_387_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, reg_441, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, reg_446, w_sum_3_1_1_reg_1201, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_392_p0 <= reg_446;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_392_p0 <= reg_441;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_392_p0 <= w_sum_3_1_1_reg_1201;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmp_1_1_2_reg_1176_pp0_iter1_reg, tmp_1_2_reg_1186_pp0_iter2_reg, tmp_1_2_1_reg_1191_pp0_iter3_reg, tmp_1_2_2_reg_1196_pp0_iter3_reg, conv_1_bias_load_reg_1211, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_392_p1 <= conv_1_bias_load_reg_1211;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_392_p1 <= tmp_1_2_2_reg_1196_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_392_p1 <= tmp_1_2_1_reg_1191_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_392_p1 <= tmp_1_2_reg_1186_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_392_p1 <= tmp_1_1_2_reg_1176_pp0_iter1_reg;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(conv_1_weights_0_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv_1_weights_0_2_0_2_reg_1086, conv_1_weights_1_1_0_2_reg_1096, conv_1_weights_2_0_0_2_reg_1106, conv_1_weights_2_2_0_2_reg_1116, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_396_p0 <= conv_1_weights_2_2_0_2_reg_1116;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= conv_1_weights_2_0_0_2_reg_1106;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= conv_1_weights_1_1_0_2_reg_1096;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= conv_1_weights_0_2_0_2_reg_1086;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_396_p0 <= conv_1_weights_0_0_0_q0;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_403_p0_assign_proc : process(conv_1_weights_0_1_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, conv_1_weights_1_0_0_2_reg_1091, conv_1_weights_1_2_0_2_reg_1101, conv_1_weights_2_1_0_2_reg_1111, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_403_p0 <= conv_1_weights_2_1_0_2_reg_1111;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_403_p0 <= conv_1_weights_1_2_0_2_reg_1101;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_403_p0 <= conv_1_weights_1_0_0_2_reg_1091;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_403_p0 <= conv_1_weights_0_1_0_q0;
            else 
                grp_fu_403_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_403_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_919_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_919_p1 <= grp_fu_919_p10(5 - 1 downto 0);
    grp_fu_919_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_reg_937_pp0_iter4_reg),10));
    grp_fu_919_p2 <= grp_fu_919_p20(5 - 1 downto 0);
    grp_fu_919_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_7_reg_966_pp0_iter4_reg),10));
    icmp_ln11_fu_481_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_358_p4 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_583_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_380_p4 = ap_const_lv6_20) else "0";
    icmp_ln34_1_fu_892_p2 <= "1" when (trunc_ln34_fu_882_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_886_p2 <= "0" when (tmp_fu_872_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_469_p2 <= "1" when (ap_phi_mux_indvar_flatten30_phi_fu_336_p4 = ap_const_lv15_5480) else "0";
    or_ln34_fu_898_p2 <= (icmp_ln34_fu_886_p2 or icmp_ln34_1_fu_892_p2);
    or_ln35_fu_601_p2 <= (icmp_ln11_fu_481_p2 or and_ln35_fu_589_p2);
    r_fu_451_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_347_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_700_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_fu_481_p2(0) = '1') else 
        add_ln11_fu_694_p2;
    select_ln35_1_fu_495_p3 <= 
        r_fu_451_p2 when (icmp_ln11_fu_481_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_347_p4;
    select_ln35_2_fu_539_p3 <= 
        add_ln26_fu_533_p2 when (icmp_ln11_fu_481_p2(0) = '1') else 
        r_fu_451_p2;
    select_ln35_3_fu_547_p3 <= 
        ap_const_lv5_3 when (icmp_ln11_fu_481_p2(0) = '1') else 
        ap_const_lv5_2;
    select_ln35_4_fu_561_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_481_p2(0) = '1') else 
        c_fu_457_p2;
    select_ln35_5_fu_569_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_481_p2(0) = '1') else 
        add_ln26_1_fu_463_p2;
    select_ln35_6_fu_607_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_601_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_380_p4;
    select_ln35_7_fu_615_p3 <= 
        add_ln26_3_fu_595_p2 when (and_ln35_fu_589_p2(0) = '1') else 
        select_ln35_fu_487_p3;
    select_ln35_8_fu_644_p3 <= 
        add_ln26_7_fu_638_p2 when (and_ln35_fu_589_p2(0) = '1') else 
        select_ln35_4_fu_561_p3;
    select_ln35_9_fu_673_p3 <= 
        add_ln26_11_fu_667_p2 when (and_ln35_fu_589_p2(0) = '1') else 
        select_ln35_5_fu_569_p3;
    select_ln35_fu_487_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_481_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_369_p4;
        sext_ln26_1_fu_824_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_10_reg_1131),64));

        sext_ln26_fu_820_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_6_reg_1121),64));

    sub_ln26_1_fu_730_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_715_p1) - unsigned(zext_ln26_4_fu_726_p1));
    sub_ln26_2_fu_781_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_766_p1) - unsigned(zext_ln26_6_fu_777_p1));
    sub_ln26_fu_527_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_511_p1) - unsigned(zext_ln26_2_fu_523_p1));
    tmp_1_fu_503_p3 <= (select_ln35_1_fu_495_p3 & ap_const_lv5_0);
    tmp_2_fu_515_p3 <= (select_ln35_1_fu_495_p3 & ap_const_lv2_0);
    tmp_5_fu_708_p3 <= (select_ln35_2_reg_948 & ap_const_lv5_0);
    tmp_6_fu_719_p3 <= (select_ln35_2_reg_948 & ap_const_lv2_0);
    tmp_7_fu_759_p3 <= (add_ln35_reg_954 & ap_const_lv5_0);
    tmp_8_fu_770_p3 <= (add_ln35_reg_954 & ap_const_lv2_0);
    tmp_9_fu_843_p3 <= (grp_fu_919_p3 & ap_const_lv5_0);
    tmp_fu_872_p4 <= bitcast_ln34_fu_868_p1(30 downto 23);
    trunc_ln34_fu_882_p1 <= bitcast_ln34_fu_868_p1(23 - 1 downto 0);
    xor_ln35_fu_577_p2 <= (icmp_ln11_fu_481_p2 xor ap_const_lv1_1);
    zext_ln26_10_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_656_p2),64));
    zext_ln26_11_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_792_p2),64));
    zext_ln26_12_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_12_fu_749_p2),64));
    zext_ln26_13_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_806_p2),64));
    zext_ln26_14_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_14_reg_1141),64));
    zext_ln26_1_fu_511_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_503_p3),11));
    zext_ln26_2_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_515_p3),11));
    zext_ln26_3_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_708_p3),11));
    zext_ln26_4_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_719_p3),11));
    zext_ln26_5_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_759_p3),11));
    zext_ln26_6_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_770_p3),11));
    zext_ln26_7_fu_633_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_627_p2),64));
    zext_ln26_8_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_736_p2),64));
    zext_ln26_9_fu_850_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_843_p3),16));
    zext_ln26_fu_681_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_6_fu_607_p3),64));
    zext_ln35_2_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_7_fu_615_p3),11));
    zext_ln35_3_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_8_fu_644_p3),11));
    zext_ln35_4_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_9_reg_994),11));
    zext_ln35_5_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_6_reg_960_pp0_iter4_reg),16));
    zext_ln35_6_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_857_p2),64));
end behav;
