// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=607101,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=8,HLS_SYN_FF=792,HLS_SYN_LUT=1761,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_input_address1,
        conv_input_ce1,
        conv_input_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [9:0] conv_input_address1;
output   conv_input_ce1;
input  [31:0] conv_input_q1;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] conv_input_address0;
reg conv_input_ce0;
reg conv_input_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] conv_1_weights_0_0_address0;
reg    conv_1_weights_0_0_ce0;
wire   [31:0] conv_1_weights_0_0_q0;
wire   [6:0] conv_1_weights_1_0_address0;
reg    conv_1_weights_1_0_ce0;
wire   [31:0] conv_1_weights_1_0_q0;
wire   [6:0] conv_1_weights_2_0_address0;
reg    conv_1_weights_2_0_ce0;
wire   [31:0] conv_1_weights_2_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_258_p2;
reg   [31:0] reg_282;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] reg_287;
wire    ap_CS_fsm_state10;
wire   [9:0] add_ln8_fu_292_p2;
reg   [9:0] add_ln8_reg_552;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_304_p2;
reg   [4:0] r_reg_560;
wire   [4:0] c_fu_316_p2;
reg   [4:0] c_reg_568;
wire    ap_CS_fsm_state3;
wire   [10:0] zext_ln35_fu_322_p1;
reg   [10:0] zext_ln35_reg_573;
wire   [0:0] icmp_ln11_fu_310_p2;
wire   [15:0] zext_ln26_1_fu_344_p1;
reg   [15:0] zext_ln26_1_reg_578;
wire   [10:0] zext_ln26_2_fu_348_p1;
reg   [10:0] zext_ln26_2_reg_583;
wire   [10:0] zext_ln14_fu_358_p1;
reg   [10:0] zext_ln14_reg_588;
wire   [5:0] f_fu_368_p2;
reg   [5:0] f_reg_596;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_374_p1;
reg   [63:0] zext_ln26_reg_601;
wire   [0:0] icmp_ln14_fu_362_p2;
wire   [7:0] zext_ln35_2_fu_378_p1;
reg   [7:0] zext_ln35_2_reg_606;
reg   [14:0] conv_out_addr_reg_611;
wire   [1:0] wr_fu_406_p2;
reg   [1:0] wr_reg_619;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln18_fu_400_p2;
wire   [10:0] add_ln26_6_fu_492_p2;
reg   [10:0] add_ln26_6_reg_649;
reg   [31:0] conv_1_weights_2_0_l_reg_679;
wire   [31:0] grp_fu_265_p2;
reg   [31:0] tmp_1_1_reg_684;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [4:0] r_0_reg_183;
reg   [9:0] phi_mul_reg_195;
reg   [4:0] c_0_reg_207;
wire   [0:0] icmp_ln8_fu_298_p2;
reg   [5:0] f_0_reg_218;
wire    ap_CS_fsm_state14;
reg   [1:0] wr_0_reg_229;
reg   [31:0] w_sum_0_reg_240;
wire   [63:0] zext_ln35_4_fu_391_p1;
wire   [63:0] zext_ln26_4_fu_429_p1;
wire  signed [63:0] sext_ln26_fu_477_p1;
wire  signed [63:0] sext_ln26_1_fu_487_p1;
wire  signed [63:0] sext_ln26_2_fu_497_p1;
reg   [31:0] grp_fu_252_p0;
reg   [31:0] grp_fu_252_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
reg   [31:0] grp_fu_258_p0;
wire   [9:0] zext_ln35_1_fu_326_p1;
wire   [9:0] add_ln35_fu_330_p2;
wire   [14:0] tmp_5_fu_336_p3;
wire   [4:0] add_ln26_2_fu_352_p2;
wire   [15:0] zext_ln35_3_fu_382_p1;
wire   [15:0] add_ln35_1_fu_386_p2;
wire   [6:0] tmp_7_fu_412_p3;
wire   [7:0] zext_ln26_3_fu_420_p1;
wire   [7:0] add_ln26_3_fu_424_p2;
wire   [4:0] zext_ln18_fu_396_p1;
wire   [4:0] add_ln26_fu_436_p2;
wire   [9:0] tmp_8_fu_442_p3;
wire   [6:0] tmp_9_fu_454_p3;
wire   [10:0] zext_ln26_5_fu_450_p1;
wire   [10:0] zext_ln26_6_fu_462_p1;
wire   [10:0] sub_ln26_fu_466_p2;
wire   [10:0] add_ln26_4_fu_472_p2;
wire   [10:0] add_ln26_5_fu_482_p2;
wire   [31:0] bitcast_ln34_fu_501_p1;
wire   [7:0] tmp_fu_505_p4;
wire   [22:0] trunc_ln34_fu_515_p1;
wire   [0:0] icmp_ln34_1_fu_525_p2;
wire   [0:0] icmp_ln34_fu_519_p2;
wire   [0:0] or_ln34_fu_531_p2;
wire   [0:0] tmp_4_fu_271_p2;
wire   [0:0] and_ln34_fu_537_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_0_address0),
    .ce0(conv_1_weights_0_0_ce0),
    .q0(conv_1_weights_0_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_0_address0),
    .ce0(conv_1_weights_1_0_ce0),
    .q0(conv_1_weights_1_0_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_0_address0),
    .ce0(conv_1_weights_2_0_ce0),
    .q0(conv_1_weights_2_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_252_p0),
    .din1(grp_fu_252_p1),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_258_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_258_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_weights_1_0_q0),
    .din1(conv_input_q1),
    .ce(1'b1),
    .dout(grp_fu_265_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U4(
    .din0(grp_fu_252_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_4_fu_271_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_362_p2 == 1'd1))) begin
        c_0_reg_207 <= c_reg_568;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_298_p2 == 1'd0))) begin
        c_0_reg_207 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        f_0_reg_218 <= f_reg_596;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_310_p2 == 1'd0))) begin
        f_0_reg_218 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_310_p2 == 1'd1))) begin
        phi_mul_reg_195 <= add_ln8_reg_552;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_195 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_310_p2 == 1'd1))) begin
        r_0_reg_183 <= r_reg_560;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_183 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_0_reg_240 <= grp_fu_252_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_362_p2 == 1'd0))) begin
        w_sum_0_reg_240 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        wr_0_reg_229 <= wr_reg_619;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_362_p2 == 1'd0))) begin
        wr_0_reg_229 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_400_p2 == 1'd0))) begin
        add_ln26_6_reg_649 <= add_ln26_6_fu_492_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_552 <= add_ln8_fu_292_p2;
        r_reg_560 <= r_fu_304_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_568 <= c_fu_316_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_weights_2_0_l_reg_679 <= conv_1_weights_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_362_p2 == 1'd0))) begin
        conv_out_addr_reg_611 <= zext_ln35_4_fu_391_p1;
        zext_ln26_reg_601[5 : 0] <= zext_ln26_fu_374_p1[5 : 0];
        zext_ln35_2_reg_606[5 : 0] <= zext_ln35_2_fu_378_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_596 <= f_fu_368_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7))) begin
        reg_282 <= grp_fu_258_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state10))) begin
        reg_287 <= grp_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_1_1_reg_684 <= grp_fu_265_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_619 <= wr_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_310_p2 == 1'd0))) begin
        zext_ln14_reg_588[4 : 0] <= zext_ln14_fu_358_p1[4 : 0];
        zext_ln26_1_reg_578[14 : 5] <= zext_ln26_1_fu_344_p1[14 : 5];
        zext_ln26_2_reg_583[4 : 0] <= zext_ln26_2_fu_348_p1[4 : 0];
        zext_ln35_reg_573[4 : 0] <= zext_ln35_fu_322_p1[4 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_298_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_298_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_input_address0 = sext_ln26_2_fu_497_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_input_address0 = sext_ln26_fu_477_p1;
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_input_ce1 = 1'b1;
    end else begin
        conv_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_252_p0 = reg_287;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_252_p0 = w_sum_0_reg_240;
    end else begin
        grp_fu_252_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_252_p1 = conv_1_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_252_p1 = reg_282;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_252_p1 = tmp_1_1_reg_684;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_252_p1 = grp_fu_258_p2;
    end else begin
        grp_fu_252_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_258_p0 = conv_1_weights_2_0_l_reg_679;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_258_p0 = conv_1_weights_0_0_q0;
    end else begin
        grp_fu_258_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_298_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_310_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_362_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_400_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_2_fu_352_p2 = (c_0_reg_207 + 5'd2);

assign add_ln26_3_fu_424_p2 = (zext_ln26_3_fu_420_p1 + zext_ln35_2_reg_606);

assign add_ln26_4_fu_472_p2 = (sub_ln26_fu_466_p2 + zext_ln35_reg_573);

assign add_ln26_5_fu_482_p2 = (sub_ln26_fu_466_p2 + zext_ln26_2_reg_583);

assign add_ln26_6_fu_492_p2 = (sub_ln26_fu_466_p2 + zext_ln14_reg_588);

assign add_ln26_fu_436_p2 = (zext_ln18_fu_396_p1 + r_0_reg_183);

assign add_ln35_1_fu_386_p2 = (zext_ln26_1_reg_578 + zext_ln35_3_fu_382_p1);

assign add_ln35_fu_330_p2 = (phi_mul_reg_195 + zext_ln35_1_fu_326_p1);

assign add_ln8_fu_292_p2 = (phi_mul_reg_195 + 10'd26);

assign and_ln34_fu_537_p2 = (tmp_4_fu_271_p2 & or_ln34_fu_531_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_501_p1 = grp_fu_252_p2;

assign c_fu_316_p2 = (c_0_reg_207 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_601;

assign conv_1_weights_0_0_address0 = zext_ln26_4_fu_429_p1;

assign conv_1_weights_1_0_address0 = zext_ln26_4_fu_429_p1;

assign conv_1_weights_2_0_address0 = zext_ln26_4_fu_429_p1;

assign conv_input_address1 = sext_ln26_1_fu_487_p1;

assign conv_out_address0 = conv_out_addr_reg_611;

assign conv_out_d0 = ((and_ln34_fu_537_p2[0:0] === 1'b1) ? grp_fu_252_p2 : 32'd0);

assign f_fu_368_p2 = (f_0_reg_218 + 6'd1);

assign icmp_ln11_fu_310_p2 = ((c_0_reg_207 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_362_p2 = ((f_0_reg_218 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_400_p2 = ((wr_0_reg_229 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_525_p2 = ((trunc_ln34_fu_515_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_519_p2 = ((tmp_fu_505_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_298_p2 = ((r_0_reg_183 == 5'd26) ? 1'b1 : 1'b0);

assign or_ln34_fu_531_p2 = (icmp_ln34_fu_519_p2 | icmp_ln34_1_fu_525_p2);

assign r_fu_304_p2 = (r_0_reg_183 + 5'd1);

assign sext_ln26_1_fu_487_p1 = $signed(add_ln26_5_fu_482_p2);

assign sext_ln26_2_fu_497_p1 = $signed(add_ln26_6_reg_649);

assign sext_ln26_fu_477_p1 = $signed(add_ln26_4_fu_472_p2);

assign sub_ln26_fu_466_p2 = (zext_ln26_5_fu_450_p1 - zext_ln26_6_fu_462_p1);

assign tmp_5_fu_336_p3 = {{add_ln35_fu_330_p2}, {5'd0}};

assign tmp_7_fu_412_p3 = {{wr_0_reg_229}, {5'd0}};

assign tmp_8_fu_442_p3 = {{add_ln26_fu_436_p2}, {5'd0}};

assign tmp_9_fu_454_p3 = {{add_ln26_fu_436_p2}, {2'd0}};

assign tmp_fu_505_p4 = {{bitcast_ln34_fu_501_p1[30:23]}};

assign trunc_ln34_fu_515_p1 = bitcast_ln34_fu_501_p1[22:0];

assign wr_fu_406_p2 = (wr_0_reg_229 + 2'd1);

assign zext_ln14_fu_358_p1 = add_ln26_2_fu_352_p2;

assign zext_ln18_fu_396_p1 = wr_0_reg_229;

assign zext_ln26_1_fu_344_p1 = tmp_5_fu_336_p3;

assign zext_ln26_2_fu_348_p1 = c_fu_316_p2;

assign zext_ln26_3_fu_420_p1 = tmp_7_fu_412_p3;

assign zext_ln26_4_fu_429_p1 = add_ln26_3_fu_424_p2;

assign zext_ln26_5_fu_450_p1 = tmp_8_fu_442_p3;

assign zext_ln26_6_fu_462_p1 = tmp_9_fu_454_p3;

assign zext_ln26_fu_374_p1 = f_0_reg_218;

assign zext_ln35_1_fu_326_p1 = c_0_reg_207;

assign zext_ln35_2_fu_378_p1 = f_0_reg_218;

assign zext_ln35_3_fu_382_p1 = f_0_reg_218;

assign zext_ln35_4_fu_391_p1 = add_ln35_1_fu_386_p2;

assign zext_ln35_fu_322_p1 = c_0_reg_207;

always @ (posedge ap_clk) begin
    zext_ln35_reg_573[10:5] <= 6'b000000;
    zext_ln26_1_reg_578[4:0] <= 5'b00000;
    zext_ln26_1_reg_578[15] <= 1'b0;
    zext_ln26_2_reg_583[10:5] <= 6'b000000;
    zext_ln14_reg_588[10:5] <= 6'b000000;
    zext_ln26_reg_601[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_606[7:6] <= 2'b00;
end

endmodule //conv_1
