// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=768857,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=5,HLS_SYN_FF=813,HLS_SYN_LUT=1829,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 31'd1;
parameter    ap_ST_fsm_state2 = 31'd2;
parameter    ap_ST_fsm_state3 = 31'd4;
parameter    ap_ST_fsm_state4 = 31'd8;
parameter    ap_ST_fsm_state5 = 31'd16;
parameter    ap_ST_fsm_state6 = 31'd32;
parameter    ap_ST_fsm_state7 = 31'd64;
parameter    ap_ST_fsm_state8 = 31'd128;
parameter    ap_ST_fsm_state9 = 31'd256;
parameter    ap_ST_fsm_state10 = 31'd512;
parameter    ap_ST_fsm_state11 = 31'd1024;
parameter    ap_ST_fsm_state12 = 31'd2048;
parameter    ap_ST_fsm_state13 = 31'd4096;
parameter    ap_ST_fsm_state14 = 31'd8192;
parameter    ap_ST_fsm_state15 = 31'd16384;
parameter    ap_ST_fsm_state16 = 31'd32768;
parameter    ap_ST_fsm_state17 = 31'd65536;
parameter    ap_ST_fsm_state18 = 31'd131072;
parameter    ap_ST_fsm_state19 = 31'd262144;
parameter    ap_ST_fsm_state20 = 31'd524288;
parameter    ap_ST_fsm_state21 = 31'd1048576;
parameter    ap_ST_fsm_state22 = 31'd2097152;
parameter    ap_ST_fsm_state23 = 31'd4194304;
parameter    ap_ST_fsm_state24 = 31'd8388608;
parameter    ap_ST_fsm_state25 = 31'd16777216;
parameter    ap_ST_fsm_state26 = 31'd33554432;
parameter    ap_ST_fsm_state27 = 31'd67108864;
parameter    ap_ST_fsm_state28 = 31'd134217728;
parameter    ap_ST_fsm_state29 = 31'd268435456;
parameter    ap_ST_fsm_state30 = 31'd536870912;
parameter    ap_ST_fsm_state31 = 31'd1073741824;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [30:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [8:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [8:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_344_p2;
reg   [31:0] reg_363;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state22;
wire   [6:0] add_ln8_fu_368_p2;
reg   [6:0] add_ln8_reg_835;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_380_p2;
reg   [3:0] r_reg_843;
wire   [3:0] c_fu_392_p2;
reg   [3:0] c_reg_851;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln35_fu_398_p1;
reg   [7:0] zext_ln35_reg_856;
wire   [0:0] icmp_ln11_fu_386_p2;
wire   [11:0] zext_ln26_1_fu_420_p1;
reg   [11:0] zext_ln26_1_reg_861;
wire   [7:0] zext_ln26_2_fu_424_p1;
reg   [7:0] zext_ln26_2_reg_866;
wire   [7:0] zext_ln14_fu_434_p1;
reg   [7:0] zext_ln14_reg_871;
wire   [4:0] f_fu_444_p2;
reg   [4:0] f_reg_879;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_450_p1;
reg   [63:0] zext_ln26_reg_884;
wire   [0:0] icmp_ln14_fu_438_p2;
wire   [9:0] zext_ln35_2_fu_454_p1;
reg   [9:0] zext_ln35_2_reg_889;
reg   [10:0] conv_out_addr_reg_896;
wire   [1:0] wr_fu_482_p2;
reg   [1:0] wr_reg_904;
wire    ap_CS_fsm_state5;
wire   [5:0] sub_ln26_fu_512_p2;
reg   [5:0] sub_ln26_reg_909;
wire   [0:0] icmp_ln18_fu_476_p2;
wire   [10:0] sub_ln26_1_fu_559_p2;
reg   [10:0] sub_ln26_1_reg_916;
wire   [10:0] sub_ln26_2_fu_590_p2;
reg   [10:0] sub_ln26_2_reg_921;
wire   [10:0] sub_ln26_3_fu_621_p2;
reg   [10:0] sub_ln26_3_reg_926;
wire   [2:0] add_ln24_fu_633_p2;
reg   [2:0] add_ln24_reg_939;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_627_p2;
wire   [31:0] grp_fu_335_p2;
wire    ap_CS_fsm_state12;
wire   [2:0] add_ln24_1_fu_686_p2;
reg   [2:0] add_ln24_1_reg_967;
wire    ap_CS_fsm_state13;
wire   [0:0] icmp_ln24_1_fu_680_p2;
wire    ap_CS_fsm_state19;
wire   [2:0] add_ln24_2_fu_739_p2;
reg   [2:0] add_ln24_2_reg_995;
wire    ap_CS_fsm_state20;
wire   [0:0] icmp_ln24_2_fu_733_p2;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
reg   [31:0] w_sum_reg_1025;
wire    ap_CS_fsm_state30;
reg   [3:0] r_0_reg_199;
reg   [6:0] phi_mul_reg_211;
reg   [3:0] c_0_reg_223;
wire   [0:0] icmp_ln8_fu_374_p2;
reg   [4:0] f_0_reg_234;
wire    ap_CS_fsm_state31;
reg   [1:0] wr_0_reg_245;
reg   [31:0] w_sum_0_reg_256;
reg   [31:0] w_sum_2_0_reg_268;
reg   [2:0] ch_0_0_reg_279;
reg   [31:0] w_sum_2_1_reg_290;
reg   [2:0] ch_0_1_reg_301;
reg   [31:0] w_sum_2_2_reg_312;
reg   [2:0] ch_0_2_reg_324;
wire   [63:0] zext_ln35_4_fu_467_p1;
wire   [63:0] zext_ln26_11_fu_665_p1;
wire   [63:0] zext_ln26_12_fu_675_p1;
wire   [63:0] zext_ln26_15_fu_718_p1;
wire   [63:0] zext_ln26_16_fu_728_p1;
wire   [63:0] zext_ln26_19_fu_771_p1;
wire   [63:0] zext_ln26_20_fu_781_p1;
reg   [31:0] grp_fu_335_p0;
reg   [31:0] grp_fu_335_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state23;
reg   [31:0] grp_fu_344_p0;
wire   [6:0] zext_ln35_1_fu_402_p1;
wire   [6:0] add_ln35_fu_406_p2;
wire   [10:0] tmp_8_fu_412_p3;
wire   [3:0] add_ln26_2_fu_428_p2;
wire   [11:0] zext_ln35_3_fu_458_p1;
wire   [11:0] add_ln35_1_fu_462_p2;
wire   [4:0] tmp_9_fu_488_p3;
wire   [2:0] tmp_10_fu_500_p3;
wire   [5:0] zext_ln26_3_fu_496_p1;
wire   [5:0] zext_ln26_4_fu_508_p1;
wire   [3:0] zext_ln18_fu_472_p1;
wire   [3:0] add_ln26_fu_518_p2;
wire   [3:0] mul_ln26_fu_528_p0;
wire   [7:0] mul_ln26_fu_528_p2;
wire   [7:0] add_ln26_3_fu_534_p2;
wire   [8:0] tmp_11_fu_547_p3;
wire   [10:0] p_shl4_cast_fu_539_p3;
wire   [10:0] zext_ln26_6_fu_555_p1;
wire   [7:0] add_ln26_4_fu_565_p2;
wire   [8:0] tmp_12_fu_578_p3;
wire   [10:0] p_shl2_cast_fu_570_p3;
wire   [10:0] zext_ln26_7_fu_586_p1;
wire   [7:0] add_ln26_5_fu_596_p2;
wire   [8:0] tmp_13_fu_609_p3;
wire   [10:0] p_shl_cast_fu_601_p3;
wire   [10:0] zext_ln26_8_fu_617_p1;
wire   [5:0] zext_ln26_10_fu_643_p1;
wire   [5:0] add_ln26_6_fu_647_p2;
wire   [9:0] tmp_19_cast_fu_652_p3;
wire   [9:0] add_ln26_7_fu_660_p2;
wire   [10:0] zext_ln26_9_fu_639_p1;
wire   [10:0] add_ln26_8_fu_670_p2;
wire   [5:0] zext_ln26_14_fu_696_p1;
wire   [5:0] add_ln26_9_fu_700_p2;
wire   [9:0] tmp_21_cast_fu_705_p3;
wire   [9:0] add_ln26_10_fu_713_p2;
wire   [10:0] zext_ln26_13_fu_692_p1;
wire   [10:0] add_ln26_11_fu_723_p2;
wire   [5:0] zext_ln26_18_fu_749_p1;
wire   [5:0] add_ln26_12_fu_753_p2;
wire   [9:0] tmp_23_cast_fu_758_p3;
wire   [9:0] add_ln26_13_fu_766_p2;
wire   [10:0] zext_ln26_17_fu_745_p1;
wire   [10:0] add_ln26_14_fu_776_p2;
wire   [31:0] bitcast_ln34_fu_786_p1;
wire   [7:0] tmp_fu_789_p4;
wire   [22:0] trunc_ln34_fu_799_p1;
wire   [0:0] icmp_ln34_1_fu_809_p2;
wire   [0:0] icmp_ln34_fu_803_p2;
wire   [0:0] or_ln34_fu_815_p2;
wire   [0:0] grp_fu_352_p2;
wire   [0:0] and_ln34_fu_821_p2;
reg   [30:0] ap_NS_fsm;
wire   [7:0] mul_ln26_fu_528_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 31'd1;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p0),
    .din1(grp_fu_335_p1),
    .ce(1'b1),
    .dout(grp_fu_335_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_344_p0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_344_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_352_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_438_p2 == 1'd1))) begin
        c_0_reg_223 <= c_reg_851;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_374_p2 == 1'd0))) begin
        c_0_reg_223 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ch_0_0_reg_279 <= add_ln24_reg_939;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_476_p2 == 1'd0))) begin
        ch_0_0_reg_279 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ch_0_1_reg_301 <= add_ln24_1_reg_967;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_627_p2 == 1'd1))) begin
        ch_0_1_reg_301 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ch_0_2_reg_324 <= add_ln24_2_reg_995;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln24_1_fu_680_p2 == 1'd1))) begin
        ch_0_2_reg_324 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        f_0_reg_234 <= f_reg_879;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_386_p2 == 1'd0))) begin
        f_0_reg_234 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_386_p2 == 1'd1))) begin
        phi_mul_reg_211 <= add_ln8_reg_835;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_211 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_386_p2 == 1'd1))) begin
        r_0_reg_199 <= r_reg_843;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_199 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln24_2_fu_733_p2 == 1'd1))) begin
        w_sum_0_reg_256 <= w_sum_2_2_reg_312;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_438_p2 == 1'd0))) begin
        w_sum_0_reg_256 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_2_0_reg_268 <= grp_fu_335_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_476_p2 == 1'd0))) begin
        w_sum_2_0_reg_268 <= w_sum_0_reg_256;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        w_sum_2_1_reg_290 <= grp_fu_335_p2;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_627_p2 == 1'd1))) begin
        w_sum_2_1_reg_290 <= w_sum_2_0_reg_268;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        w_sum_2_2_reg_312 <= grp_fu_335_p2;
    end else if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln24_1_fu_680_p2 == 1'd1))) begin
        w_sum_2_2_reg_312 <= w_sum_2_1_reg_290;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln24_2_fu_733_p2 == 1'd1))) begin
        wr_0_reg_245 <= wr_reg_904;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_438_p2 == 1'd0))) begin
        wr_0_reg_245 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        add_ln24_1_reg_967 <= add_ln24_1_fu_686_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        add_ln24_2_reg_995 <= add_ln24_2_fu_739_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln24_reg_939 <= add_ln24_fu_633_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_835 <= add_ln8_fu_368_p2;
        r_reg_843 <= r_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_851 <= c_fu_392_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_438_p2 == 1'd0))) begin
        conv_out_addr_reg_896 <= zext_ln35_4_fu_467_p1;
        zext_ln26_reg_884[4 : 0] <= zext_ln26_fu_450_p1[4 : 0];
        zext_ln35_2_reg_889[4 : 0] <= zext_ln35_2_fu_454_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_879 <= f_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state8))) begin
        reg_363 <= grp_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_476_p2 == 1'd0))) begin
        sub_ln26_1_reg_916[10 : 1] <= sub_ln26_1_fu_559_p2[10 : 1];
        sub_ln26_2_reg_921[10 : 1] <= sub_ln26_2_fu_590_p2[10 : 1];
        sub_ln26_3_reg_926[10 : 1] <= sub_ln26_3_fu_621_p2[10 : 1];
        sub_ln26_reg_909[5 : 1] <= sub_ln26_fu_512_p2[5 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        w_sum_reg_1025 <= grp_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_904 <= wr_fu_482_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_386_p2 == 1'd0))) begin
        zext_ln14_reg_871[3 : 0] <= zext_ln14_fu_434_p1[3 : 0];
        zext_ln26_1_reg_861[10 : 4] <= zext_ln26_1_fu_420_p1[10 : 4];
        zext_ln26_2_reg_866[3 : 0] <= zext_ln26_2_fu_424_p1[3 : 0];
        zext_ln35_reg_856[3 : 0] <= zext_ln35_fu_398_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_374_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_374_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_335_p0 = w_sum_0_reg_256;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_fu_335_p0 = w_sum_2_2_reg_312;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_335_p0 = w_sum_2_1_reg_290;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_335_p0 = w_sum_2_0_reg_268;
    end else begin
        grp_fu_335_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_fu_335_p1 = conv_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state9))) begin
        grp_fu_335_p1 = reg_363;
    end else begin
        grp_fu_335_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_344_p0 = conv_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_344_p0 = conv_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_344_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_344_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        input_r_address0 = zext_ln26_20_fu_781_p1;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        input_r_address0 = zext_ln26_16_fu_728_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln26_12_fu_675_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state6))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_374_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_386_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_438_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_476_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_627_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state13 : begin
            if (((1'b1 == ap_CS_fsm_state13) & (icmp_ln24_1_fu_680_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (icmp_ln24_2_fu_733_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_1_fu_686_p2 = (ch_0_1_reg_301 + 3'd1);

assign add_ln24_2_fu_739_p2 = (ch_0_2_reg_324 + 3'd1);

assign add_ln24_fu_633_p2 = (ch_0_0_reg_279 + 3'd1);

assign add_ln26_10_fu_713_p2 = (zext_ln35_2_reg_889 + tmp_21_cast_fu_705_p3);

assign add_ln26_11_fu_723_p2 = (zext_ln26_13_fu_692_p1 + sub_ln26_2_reg_921);

assign add_ln26_12_fu_753_p2 = (zext_ln26_18_fu_749_p1 + sub_ln26_reg_909);

assign add_ln26_13_fu_766_p2 = (zext_ln35_2_reg_889 + tmp_23_cast_fu_758_p3);

assign add_ln26_14_fu_776_p2 = (zext_ln26_17_fu_745_p1 + sub_ln26_3_reg_926);

assign add_ln26_2_fu_428_p2 = (c_0_reg_223 + 4'd2);

assign add_ln26_3_fu_534_p2 = (zext_ln35_reg_856 + mul_ln26_fu_528_p2);

assign add_ln26_4_fu_565_p2 = (zext_ln26_2_reg_866 + mul_ln26_fu_528_p2);

assign add_ln26_5_fu_596_p2 = (zext_ln14_reg_871 + mul_ln26_fu_528_p2);

assign add_ln26_6_fu_647_p2 = (zext_ln26_10_fu_643_p1 + sub_ln26_reg_909);

assign add_ln26_7_fu_660_p2 = (zext_ln35_2_reg_889 + tmp_19_cast_fu_652_p3);

assign add_ln26_8_fu_670_p2 = (zext_ln26_9_fu_639_p1 + sub_ln26_1_reg_916);

assign add_ln26_9_fu_700_p2 = (zext_ln26_14_fu_696_p1 + sub_ln26_reg_909);

assign add_ln26_fu_518_p2 = (r_0_reg_199 + zext_ln18_fu_472_p1);

assign add_ln35_1_fu_462_p2 = (zext_ln26_1_reg_861 + zext_ln35_3_fu_458_p1);

assign add_ln35_fu_406_p2 = (phi_mul_reg_211 + zext_ln35_1_fu_402_p1);

assign add_ln8_fu_368_p2 = (phi_mul_reg_211 + 7'd11);

assign and_ln34_fu_821_p2 = (or_ln34_fu_815_p2 & grp_fu_352_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_786_p1 = w_sum_reg_1025;

assign c_fu_392_p2 = (c_0_reg_223 + 4'd1);

assign conv_bias_address0 = zext_ln26_reg_884;

assign conv_out_address0 = conv_out_addr_reg_896;

assign conv_out_d0 = ((and_ln34_fu_821_p2[0:0] === 1'b1) ? w_sum_reg_1025 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_11_fu_665_p1;

assign conv_weights_1_address0 = zext_ln26_15_fu_718_p1;

assign conv_weights_2_address0 = zext_ln26_19_fu_771_p1;

assign f_fu_444_p2 = (f_0_reg_234 + 5'd1);

assign icmp_ln11_fu_386_p2 = ((c_0_reg_223 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_438_p2 = ((f_0_reg_234 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_476_p2 = ((wr_0_reg_245 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_680_p2 = ((ch_0_1_reg_301 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_733_p2 = ((ch_0_2_reg_324 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_627_p2 = ((ch_0_0_reg_279 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_809_p2 = ((trunc_ln34_fu_799_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_803_p2 = ((tmp_fu_789_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_374_p2 = ((r_0_reg_199 == 4'd11) ? 1'b1 : 1'b0);

assign mul_ln26_fu_528_p0 = mul_ln26_fu_528_p00;

assign mul_ln26_fu_528_p00 = add_ln26_fu_518_p2;

assign mul_ln26_fu_528_p2 = (mul_ln26_fu_528_p0 * $signed('hD));

assign or_ln34_fu_815_p2 = (icmp_ln34_fu_803_p2 | icmp_ln34_1_fu_809_p2);

assign p_shl2_cast_fu_570_p3 = {{add_ln26_4_fu_565_p2}, {3'd0}};

assign p_shl4_cast_fu_539_p3 = {{add_ln26_3_fu_534_p2}, {3'd0}};

assign p_shl_cast_fu_601_p3 = {{add_ln26_5_fu_596_p2}, {3'd0}};

assign r_fu_380_p2 = (r_0_reg_199 + 4'd1);

assign sub_ln26_1_fu_559_p2 = (p_shl4_cast_fu_539_p3 - zext_ln26_6_fu_555_p1);

assign sub_ln26_2_fu_590_p2 = (p_shl2_cast_fu_570_p3 - zext_ln26_7_fu_586_p1);

assign sub_ln26_3_fu_621_p2 = (p_shl_cast_fu_601_p3 - zext_ln26_8_fu_617_p1);

assign sub_ln26_fu_512_p2 = (zext_ln26_3_fu_496_p1 - zext_ln26_4_fu_508_p1);

assign tmp_10_fu_500_p3 = {{wr_0_reg_245}, {1'd0}};

assign tmp_11_fu_547_p3 = {{add_ln26_3_fu_534_p2}, {1'd0}};

assign tmp_12_fu_578_p3 = {{add_ln26_4_fu_565_p2}, {1'd0}};

assign tmp_13_fu_609_p3 = {{add_ln26_5_fu_596_p2}, {1'd0}};

assign tmp_19_cast_fu_652_p3 = {{add_ln26_6_fu_647_p2}, {4'd0}};

assign tmp_21_cast_fu_705_p3 = {{add_ln26_9_fu_700_p2}, {4'd0}};

assign tmp_23_cast_fu_758_p3 = {{add_ln26_12_fu_753_p2}, {4'd0}};

assign tmp_8_fu_412_p3 = {{add_ln35_fu_406_p2}, {4'd0}};

assign tmp_9_fu_488_p3 = {{wr_0_reg_245}, {3'd0}};

assign tmp_fu_789_p4 = {{bitcast_ln34_fu_786_p1[30:23]}};

assign trunc_ln34_fu_799_p1 = bitcast_ln34_fu_786_p1[22:0];

assign wr_fu_482_p2 = (wr_0_reg_245 + 2'd1);

assign zext_ln14_fu_434_p1 = add_ln26_2_fu_428_p2;

assign zext_ln18_fu_472_p1 = wr_0_reg_245;

assign zext_ln26_10_fu_643_p1 = ch_0_0_reg_279;

assign zext_ln26_11_fu_665_p1 = add_ln26_7_fu_660_p2;

assign zext_ln26_12_fu_675_p1 = add_ln26_8_fu_670_p2;

assign zext_ln26_13_fu_692_p1 = ch_0_1_reg_301;

assign zext_ln26_14_fu_696_p1 = ch_0_1_reg_301;

assign zext_ln26_15_fu_718_p1 = add_ln26_10_fu_713_p2;

assign zext_ln26_16_fu_728_p1 = add_ln26_11_fu_723_p2;

assign zext_ln26_17_fu_745_p1 = ch_0_2_reg_324;

assign zext_ln26_18_fu_749_p1 = ch_0_2_reg_324;

assign zext_ln26_19_fu_771_p1 = add_ln26_13_fu_766_p2;

assign zext_ln26_1_fu_420_p1 = tmp_8_fu_412_p3;

assign zext_ln26_20_fu_781_p1 = add_ln26_14_fu_776_p2;

assign zext_ln26_2_fu_424_p1 = c_fu_392_p2;

assign zext_ln26_3_fu_496_p1 = tmp_9_fu_488_p3;

assign zext_ln26_4_fu_508_p1 = tmp_10_fu_500_p3;

assign zext_ln26_6_fu_555_p1 = tmp_11_fu_547_p3;

assign zext_ln26_7_fu_586_p1 = tmp_12_fu_578_p3;

assign zext_ln26_8_fu_617_p1 = tmp_13_fu_609_p3;

assign zext_ln26_9_fu_639_p1 = ch_0_0_reg_279;

assign zext_ln26_fu_450_p1 = f_0_reg_234;

assign zext_ln35_1_fu_402_p1 = c_0_reg_223;

assign zext_ln35_2_fu_454_p1 = f_0_reg_234;

assign zext_ln35_3_fu_458_p1 = f_0_reg_234;

assign zext_ln35_4_fu_467_p1 = add_ln35_1_fu_462_p2;

assign zext_ln35_fu_398_p1 = c_0_reg_223;

always @ (posedge ap_clk) begin
    zext_ln35_reg_856[7:4] <= 4'b0000;
    zext_ln26_1_reg_861[3:0] <= 4'b0000;
    zext_ln26_1_reg_861[11] <= 1'b0;
    zext_ln26_2_reg_866[7:4] <= 4'b0000;
    zext_ln14_reg_871[7:4] <= 4'b0000;
    zext_ln26_reg_884[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_889[9:5] <= 5'b00000;
    sub_ln26_reg_909[0] <= 1'b0;
    sub_ln26_1_reg_916[0] <= 1'b0;
    sub_ln26_2_reg_921[0] <= 1'b0;
    sub_ln26_3_reg_926[0] <= 1'b0;
end

endmodule //conv
