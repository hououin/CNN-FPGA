-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=768857,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=5,HLS_SYN_FF=813,HLS_SYN_LUT=1829,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (30 downto 0) := "0000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (30 downto 0) := "0000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (30 downto 0) := "0000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (30 downto 0) := "0000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (30 downto 0) := "0000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (30 downto 0) := "0000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (30 downto 0) := "0001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (30 downto 0) := "0010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (30 downto 0) := "0100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (30 downto 0) := "1000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_344_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal add_ln8_fu_368_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_835 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_380_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_843 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_392_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_851 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln35_fu_398_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_reg_856 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln11_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_420_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_1_reg_861 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_2_fu_424_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_2_reg_866 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln14_fu_434_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln14_reg_871 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_fu_444_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_879 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_884 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_2_fu_454_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_2_reg_889 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_addr_reg_896 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_482_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_904 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln26_fu_512_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_reg_909 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_1_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_916 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_590_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_reg_921 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_3_fu_621_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_3_reg_926 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln24_fu_633_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln24_reg_939 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal add_ln24_1_fu_686_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln24_1_reg_967 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal icmp_ln24_1_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln24_2_fu_739_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln24_2_reg_995 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal icmp_ln24_2_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal w_sum_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal r_0_reg_199 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_211 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_223 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_374_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_234 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal wr_0_reg_245 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_2_0_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sum_2_1_reg_290 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_301 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sum_2_2_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_2_reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_4_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_15_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_728_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_19_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_20_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fu_344_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_1_fu_402_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_406_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_412_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_2_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln35_3_fu_458_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_462_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_488_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_500_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln26_3_fu_496_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_4_fu_508_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_fu_472_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_518_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_528_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_528_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_3_fu_534_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_547_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl4_cast_fu_539_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_555_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_4_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_578_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_570_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_586_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_596_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_609_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_601_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_8_fu_617_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_10_fu_643_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_6_fu_647_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_19_cast_fu_652_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_7_fu_660_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_9_fu_639_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_670_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_14_fu_696_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_9_fu_700_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_cast_fu_705_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_10_fu_713_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_13_fu_692_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_11_fu_723_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_18_fu_749_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_12_fu_753_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_cast_fu_758_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_13_fu_766_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_17_fu_745_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_14_fu_776_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_786_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_789_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_799_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_815_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_821_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln26_fu_528_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_conv_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_conv_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_conv_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_conv_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p0,
        din1 => grp_fu_335_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_335_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_344_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_344_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_352_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_438_p2 = ap_const_lv1_1))) then 
                c_0_reg_223 <= c_reg_851;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_374_p2 = ap_const_lv1_0))) then 
                c_0_reg_223 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ch_0_0_reg_279 <= add_ln24_reg_939;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_476_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_279 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                ch_0_1_reg_301 <= add_ln24_1_reg_967;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_627_p2 = ap_const_lv1_1))) then 
                ch_0_1_reg_301 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    ch_0_2_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                ch_0_2_reg_324 <= add_ln24_2_reg_995;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln24_1_fu_680_p2 = ap_const_lv1_1))) then 
                ch_0_2_reg_324 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                f_0_reg_234 <= f_reg_879;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_386_p2 = ap_const_lv1_0))) then 
                f_0_reg_234 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_386_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_211 <= add_ln8_reg_835;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_211 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_386_p2 = ap_const_lv1_1))) then 
                r_0_reg_199 <= r_reg_843;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_199 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln24_2_fu_733_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_256 <= w_sum_2_2_reg_312;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_438_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_256 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                w_sum_2_0_reg_268 <= grp_fu_335_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_476_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_268 <= w_sum_0_reg_256;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                w_sum_2_1_reg_290 <= grp_fu_335_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_627_p2 = ap_const_lv1_1))) then 
                w_sum_2_1_reg_290 <= w_sum_2_0_reg_268;
            end if; 
        end if;
    end process;

    w_sum_2_2_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                w_sum_2_2_reg_312 <= grp_fu_335_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln24_1_fu_680_p2 = ap_const_lv1_1))) then 
                w_sum_2_2_reg_312 <= w_sum_2_1_reg_290;
            end if; 
        end if;
    end process;

    wr_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln24_2_fu_733_p2 = ap_const_lv1_1))) then 
                wr_0_reg_245 <= wr_reg_904;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_438_p2 = ap_const_lv1_0))) then 
                wr_0_reg_245 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                add_ln24_1_reg_967 <= add_ln24_1_fu_686_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                add_ln24_2_reg_995 <= add_ln24_2_fu_739_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln24_reg_939 <= add_ln24_fu_633_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_835 <= add_ln8_fu_368_p2;
                r_reg_843 <= r_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_851 <= c_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_438_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_896 <= zext_ln35_4_fu_467_p1(11 - 1 downto 0);
                    zext_ln26_reg_884(4 downto 0) <= zext_ln26_fu_450_p1(4 downto 0);
                    zext_ln35_2_reg_889(4 downto 0) <= zext_ln35_2_fu_454_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_879 <= f_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state8))) then
                reg_363 <= grp_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_476_p2 = ap_const_lv1_0))) then
                    sub_ln26_1_reg_916(10 downto 1) <= sub_ln26_1_fu_559_p2(10 downto 1);
                    sub_ln26_2_reg_921(10 downto 1) <= sub_ln26_2_fu_590_p2(10 downto 1);
                    sub_ln26_3_reg_926(10 downto 1) <= sub_ln26_3_fu_621_p2(10 downto 1);
                    sub_ln26_reg_909(5 downto 1) <= sub_ln26_fu_512_p2(5 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                w_sum_reg_1025 <= grp_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_904 <= wr_fu_482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_386_p2 = ap_const_lv1_0))) then
                    zext_ln14_reg_871(3 downto 0) <= zext_ln14_fu_434_p1(3 downto 0);
                    zext_ln26_1_reg_861(10 downto 4) <= zext_ln26_1_fu_420_p1(10 downto 4);
                    zext_ln26_2_reg_866(3 downto 0) <= zext_ln26_2_fu_424_p1(3 downto 0);
                    zext_ln35_reg_856(3 downto 0) <= zext_ln35_fu_398_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln35_reg_856(7 downto 4) <= "0000";
    zext_ln26_1_reg_861(3 downto 0) <= "0000";
    zext_ln26_1_reg_861(11) <= '0';
    zext_ln26_2_reg_866(7 downto 4) <= "0000";
    zext_ln14_reg_871(7 downto 4) <= "0000";
    zext_ln26_reg_884(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_889(9 downto 5) <= "00000";
    sub_ln26_reg_909(0) <= '0';
    sub_ln26_1_reg_916(0) <= '0';
    sub_ln26_2_reg_921(0) <= '0';
    sub_ln26_3_reg_926(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_386_p2, ap_CS_fsm_state4, icmp_ln14_fu_438_p2, ap_CS_fsm_state5, icmp_ln18_fu_476_p2, ap_CS_fsm_state6, icmp_ln24_fu_627_p2, ap_CS_fsm_state13, icmp_ln24_1_fu_680_p2, ap_CS_fsm_state20, icmp_ln24_2_fu_733_p2, icmp_ln8_fu_374_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_374_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_386_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_438_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_476_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_627_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state13 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state13) and (icmp_ln24_1_fu_680_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and (icmp_ln24_2_fu_733_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_1_fu_686_p2 <= std_logic_vector(unsigned(ch_0_1_reg_301) + unsigned(ap_const_lv3_1));
    add_ln24_2_fu_739_p2 <= std_logic_vector(unsigned(ch_0_2_reg_324) + unsigned(ap_const_lv3_1));
    add_ln24_fu_633_p2 <= std_logic_vector(unsigned(ch_0_0_reg_279) + unsigned(ap_const_lv3_1));
    add_ln26_10_fu_713_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_889) + unsigned(tmp_21_cast_fu_705_p3));
    add_ln26_11_fu_723_p2 <= std_logic_vector(unsigned(zext_ln26_13_fu_692_p1) + unsigned(sub_ln26_2_reg_921));
    add_ln26_12_fu_753_p2 <= std_logic_vector(unsigned(zext_ln26_18_fu_749_p1) + unsigned(sub_ln26_reg_909));
    add_ln26_13_fu_766_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_889) + unsigned(tmp_23_cast_fu_758_p3));
    add_ln26_14_fu_776_p2 <= std_logic_vector(unsigned(zext_ln26_17_fu_745_p1) + unsigned(sub_ln26_3_reg_926));
    add_ln26_2_fu_428_p2 <= std_logic_vector(unsigned(c_0_reg_223) + unsigned(ap_const_lv4_2));
    add_ln26_3_fu_534_p2 <= std_logic_vector(unsigned(zext_ln35_reg_856) + unsigned(mul_ln26_fu_528_p2));
    add_ln26_4_fu_565_p2 <= std_logic_vector(unsigned(zext_ln26_2_reg_866) + unsigned(mul_ln26_fu_528_p2));
    add_ln26_5_fu_596_p2 <= std_logic_vector(unsigned(zext_ln14_reg_871) + unsigned(mul_ln26_fu_528_p2));
    add_ln26_6_fu_647_p2 <= std_logic_vector(unsigned(zext_ln26_10_fu_643_p1) + unsigned(sub_ln26_reg_909));
    add_ln26_7_fu_660_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_889) + unsigned(tmp_19_cast_fu_652_p3));
    add_ln26_8_fu_670_p2 <= std_logic_vector(unsigned(zext_ln26_9_fu_639_p1) + unsigned(sub_ln26_1_reg_916));
    add_ln26_9_fu_700_p2 <= std_logic_vector(unsigned(zext_ln26_14_fu_696_p1) + unsigned(sub_ln26_reg_909));
    add_ln26_fu_518_p2 <= std_logic_vector(unsigned(r_0_reg_199) + unsigned(zext_ln18_fu_472_p1));
    add_ln35_1_fu_462_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_861) + unsigned(zext_ln35_3_fu_458_p1));
    add_ln35_fu_406_p2 <= std_logic_vector(unsigned(phi_mul_reg_211) + unsigned(zext_ln35_1_fu_402_p1));
    add_ln8_fu_368_p2 <= std_logic_vector(unsigned(phi_mul_reg_211) + unsigned(ap_const_lv7_B));
    and_ln34_fu_821_p2 <= (or_ln34_fu_815_p2 and grp_fu_352_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_374_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_374_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_374_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_374_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_786_p1 <= w_sum_reg_1025;
    c_fu_392_p2 <= std_logic_vector(unsigned(c_0_reg_223) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln26_reg_884(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_896;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_1025 when (and_ln34_fu_821_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_11_fu_665_p1(9 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_15_fu_718_p1(9 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_19_fu_771_p1(9 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_444_p2 <= std_logic_vector(unsigned(f_0_reg_234) + unsigned(ap_const_lv5_1));

    grp_fu_335_p0_assign_proc : process(ap_CS_fsm_state27, w_sum_0_reg_256, w_sum_2_0_reg_268, w_sum_2_1_reg_290, w_sum_2_2_reg_312, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_335_p0 <= w_sum_0_reg_256;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_335_p0 <= w_sum_2_2_reg_312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_335_p0 <= w_sum_2_1_reg_290;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_335_p0 <= w_sum_2_0_reg_268;
        else 
            grp_fu_335_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_335_p1_assign_proc : process(conv_bias_q0, reg_363, ap_CS_fsm_state27, ap_CS_fsm_state9, ap_CS_fsm_state16, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            grp_fu_335_p1 <= conv_bias_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            grp_fu_335_p1 <= reg_363;
        else 
            grp_fu_335_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_344_p0_assign_proc : process(conv_weights_0_q0, conv_weights_1_q0, conv_weights_2_q0, ap_CS_fsm_state7, ap_CS_fsm_state14, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_fu_344_p0 <= conv_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_344_p0 <= conv_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_344_p0 <= conv_weights_0_q0;
        else 
            grp_fu_344_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_386_p2 <= "1" when (c_0_reg_223 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_438_p2 <= "1" when (f_0_reg_234 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_476_p2 <= "1" when (wr_0_reg_245 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_680_p2 <= "1" when (ch_0_1_reg_301 = ap_const_lv3_6) else "0";
    icmp_ln24_2_fu_733_p2 <= "1" when (ch_0_2_reg_324 = ap_const_lv3_6) else "0";
    icmp_ln24_fu_627_p2 <= "1" when (ch_0_0_reg_279 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_809_p2 <= "1" when (trunc_ln34_fu_799_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_803_p2 <= "0" when (tmp_fu_789_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_374_p2 <= "1" when (r_0_reg_199 = ap_const_lv4_B) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state20, zext_ln26_12_fu_675_p1, zext_ln26_16_fu_728_p1, zext_ln26_20_fu_781_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            input_r_address0 <= zext_ln26_20_fu_781_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            input_r_address0 <= zext_ln26_16_fu_728_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln26_12_fu_675_p1(10 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_528_p0 <= mul_ln26_fu_528_p00(4 - 1 downto 0);
    mul_ln26_fu_528_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_518_p2),8));
    mul_ln26_fu_528_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_528_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln34_fu_815_p2 <= (icmp_ln34_fu_803_p2 or icmp_ln34_1_fu_809_p2);
    p_shl2_cast_fu_570_p3 <= (add_ln26_4_fu_565_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_539_p3 <= (add_ln26_3_fu_534_p2 & ap_const_lv3_0);
    p_shl_cast_fu_601_p3 <= (add_ln26_5_fu_596_p2 & ap_const_lv3_0);
    r_fu_380_p2 <= std_logic_vector(unsigned(r_0_reg_199) + unsigned(ap_const_lv4_1));
    sub_ln26_1_fu_559_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_539_p3) - unsigned(zext_ln26_6_fu_555_p1));
    sub_ln26_2_fu_590_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_570_p3) - unsigned(zext_ln26_7_fu_586_p1));
    sub_ln26_3_fu_621_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_601_p3) - unsigned(zext_ln26_8_fu_617_p1));
    sub_ln26_fu_512_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_496_p1) - unsigned(zext_ln26_4_fu_508_p1));
    tmp_10_fu_500_p3 <= (wr_0_reg_245 & ap_const_lv1_0);
    tmp_11_fu_547_p3 <= (add_ln26_3_fu_534_p2 & ap_const_lv1_0);
    tmp_12_fu_578_p3 <= (add_ln26_4_fu_565_p2 & ap_const_lv1_0);
    tmp_13_fu_609_p3 <= (add_ln26_5_fu_596_p2 & ap_const_lv1_0);
    tmp_19_cast_fu_652_p3 <= (add_ln26_6_fu_647_p2 & ap_const_lv4_0);
    tmp_21_cast_fu_705_p3 <= (add_ln26_9_fu_700_p2 & ap_const_lv4_0);
    tmp_23_cast_fu_758_p3 <= (add_ln26_12_fu_753_p2 & ap_const_lv4_0);
    tmp_8_fu_412_p3 <= (add_ln35_fu_406_p2 & ap_const_lv4_0);
    tmp_9_fu_488_p3 <= (wr_0_reg_245 & ap_const_lv3_0);
    tmp_fu_789_p4 <= bitcast_ln34_fu_786_p1(30 downto 23);
    trunc_ln34_fu_799_p1 <= bitcast_ln34_fu_786_p1(23 - 1 downto 0);
    wr_fu_482_p2 <= std_logic_vector(unsigned(wr_0_reg_245) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_428_p2),8));
    zext_ln18_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_245),4));
    zext_ln26_10_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_279),6));
    zext_ln26_11_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_660_p2),64));
    zext_ln26_12_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_670_p2),64));
    zext_ln26_13_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_301),11));
    zext_ln26_14_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_301),6));
    zext_ln26_15_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_10_fu_713_p2),64));
    zext_ln26_16_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_fu_723_p2),64));
    zext_ln26_17_fu_745_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_324),11));
    zext_ln26_18_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_324),6));
    zext_ln26_19_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_766_p2),64));
    zext_ln26_1_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_412_p3),12));
    zext_ln26_20_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_14_fu_776_p2),64));
    zext_ln26_2_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_392_p2),8));
    zext_ln26_3_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_488_p3),6));
    zext_ln26_4_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_500_p3),6));
    zext_ln26_6_fu_555_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_547_p3),11));
    zext_ln26_7_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_578_p3),11));
    zext_ln26_8_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_609_p3),11));
    zext_ln26_9_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_279),11));
    zext_ln26_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_234),64));
    zext_ln35_1_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_223),7));
    zext_ln35_2_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_234),10));
    zext_ln35_3_fu_458_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_234),12));
    zext_ln35_4_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_462_p2),64));
    zext_ln35_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_223),8));
end behav;
