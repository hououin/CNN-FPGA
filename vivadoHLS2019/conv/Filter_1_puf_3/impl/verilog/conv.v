// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.205000,HLS_SYN_LAT=437537,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=868,HLS_SYN_LUT=1962,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 20'd1;
parameter    ap_ST_fsm_state2 = 20'd2;
parameter    ap_ST_fsm_pp0_stage0 = 20'd4;
parameter    ap_ST_fsm_pp0_stage1 = 20'd8;
parameter    ap_ST_fsm_pp0_stage2 = 20'd16;
parameter    ap_ST_fsm_pp0_stage3 = 20'd32;
parameter    ap_ST_fsm_pp0_stage4 = 20'd64;
parameter    ap_ST_fsm_pp0_stage5 = 20'd128;
parameter    ap_ST_fsm_pp0_stage6 = 20'd256;
parameter    ap_ST_fsm_pp0_stage7 = 20'd512;
parameter    ap_ST_fsm_pp0_stage8 = 20'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 20'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 20'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 20'd8192;
parameter    ap_ST_fsm_state18 = 20'd16384;
parameter    ap_ST_fsm_state19 = 20'd32768;
parameter    ap_ST_fsm_state20 = 20'd65536;
parameter    ap_ST_fsm_state21 = 20'd131072;
parameter    ap_ST_fsm_state22 = 20'd262144;
parameter    ap_ST_fsm_state23 = 20'd524288;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [19:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
reg   [4:0] indvar_flatten21_reg_267;
reg   [1:0] wr_0_reg_278;
reg   [3:0] indvar_flatten_reg_289;
reg   [1:0] wc_0_reg_301;
reg   [31:0] w_sum_2_0_reg_312;
reg   [2:0] ch_0_0_reg_324;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state16_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln20_reg_1022;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state17_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] reg_358;
wire   [31:0] grp_fu_335_p2;
reg   [31:0] reg_363;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_state22;
wire   [0:0] icmp_ln10_fu_369_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln10_fu_375_p2;
reg   [10:0] add_ln10_reg_976;
wire   [0:0] icmp_ln13_fu_387_p2;
reg   [0:0] icmp_ln13_reg_981;
wire   [3:0] select_ln37_1_fu_401_p3;
reg   [3:0] select_ln37_1_reg_986;
wire   [4:0] select_ln37_2_fu_443_p3;
reg   [4:0] select_ln37_2_reg_992;
wire   [3:0] select_ln37_3_fu_451_p3;
reg   [3:0] select_ln37_3_reg_997;
wire   [63:0] zext_ln28_fu_470_p1;
reg   [63:0] zext_ln28_reg_1005;
wire   [10:0] zext_ln37_2_fu_474_p1;
reg   [10:0] zext_ln37_2_reg_1010;
reg   [10:0] conv_out_addr_reg_1017;
wire   [0:0] icmp_ln20_fu_502_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state15_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_1022_pp0_iter1_reg;
wire   [4:0] add_ln20_1_fu_508_p2;
reg   [4:0] add_ln20_1_reg_1026;
wire   [0:0] icmp_ln23_fu_520_p2;
reg   [0:0] icmp_ln23_reg_1031;
wire   [1:0] select_ln20_1_fu_534_p3;
reg   [1:0] select_ln20_1_reg_1036;
wire   [2:0] select_ln23_fu_611_p3;
reg   [2:0] select_ln23_reg_1041;
wire   [1:0] select_ln23_1_fu_623_p3;
reg   [1:0] select_ln23_1_reg_1047;
wire   [10:0] sub_ln28_2_fu_713_p2;
reg   [10:0] sub_ln28_2_reg_1052;
wire   [6:0] add_ln28_7_fu_784_p2;
reg   [6:0] add_ln28_7_reg_1067;
wire   [6:0] trunc_ln28_2_fu_801_p1;
reg   [6:0] trunc_ln28_2_reg_1077;
reg   [31:0] input_load_1_reg_1087;
wire   [10:0] add_ln28_11_fu_848_p2;
reg   [10:0] add_ln28_11_reg_1092;
wire   [3:0] add_ln23_1_fu_863_p2;
reg   [3:0] add_ln23_1_reg_1102;
wire   [31:0] grp_fu_341_p2;
reg   [31:0] tmp_s_reg_1107;
reg   [31:0] tmp_1_1_reg_1117;
reg   [31:0] tmp_1_2_reg_1122;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [2:0] add_ln26_2_fu_873_p2;
reg   [2:0] add_ln26_2_reg_1127;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [3:0] select_ln23_3_fu_878_p3;
reg   [3:0] select_ln23_3_reg_1132;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state18;
wire   [4:0] f_fu_884_p2;
reg   [4:0] f_reg_1147;
wire   [8:0] select_ln13_fu_895_p3;
reg   [8:0] select_ln13_reg_1152;
wire    ap_CS_fsm_state19;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [10:0] indvar_flatten43_reg_211;
wire    ap_CS_fsm_state23;
reg   [3:0] r_0_reg_222;
reg   [8:0] indvar_flatten29_reg_233;
reg   [3:0] c_0_reg_245;
reg   [4:0] f_0_reg_256;
reg   [4:0] ap_phi_mux_indvar_flatten21_phi_fu_271_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_282_p4;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_293_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_305_p4;
wire   [31:0] ap_phi_mux_w_sum_2_0_phi_fu_316_p4;
reg   [2:0] ap_phi_mux_ch_0_0_phi_fu_328_p4;
wire   [63:0] zext_ln37_4_fu_488_p1;
wire   [63:0] zext_ln28_8_fu_750_p1;
wire   [63:0] zext_ln28_9_fu_761_p1;
wire   [63:0] zext_ln28_13_fu_796_p1;
wire   [63:0] zext_ln28_12_fu_817_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_17_fu_858_p1;
wire   [63:0] zext_ln28_16_fu_869_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_335_p0;
reg   [31:0] grp_fu_335_p1;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage11;
reg   [31:0] grp_fu_341_p1;
wire   [3:0] r_fu_381_p2;
wire   [0:0] icmp_ln16_fu_419_p2;
wire   [0:0] xor_ln37_fu_413_p2;
wire   [3:0] select_ln37_fu_393_p3;
wire   [0:0] and_ln37_fu_425_p2;
wire   [0:0] or_ln37_fu_437_p2;
wire   [3:0] c_fu_431_p2;
wire   [7:0] grp_fu_953_p3;
wire   [11:0] zext_ln37_3_fu_478_p1;
wire   [11:0] tmp_2_cast_fu_463_p3;
wire   [11:0] add_ln37_1_fu_482_p2;
wire   [3:0] zext_ln23_fu_493_p1;
wire   [1:0] wr_fu_514_p2;
wire   [3:0] tmp_4_fu_546_p3;
wire   [4:0] zext_ln28_2_fu_554_p1;
wire   [4:0] zext_ln28_1_fu_542_p1;
wire   [4:0] sub_ln28_fu_558_p2;
wire   [3:0] zext_ln20_fu_568_p1;
wire   [3:0] add_ln20_fu_572_p2;
wire   [0:0] icmp_ln26_fu_587_p2;
wire   [0:0] xor_ln20_fu_581_p2;
wire   [1:0] select_ln20_fu_526_p3;
wire   [0:0] and_ln20_fu_593_p2;
wire   [0:0] or_ln23_fu_605_p2;
wire   [1:0] wc_fu_599_p2;
wire  signed [5:0] sext_ln28_fu_564_p1;
wire   [5:0] zext_ln23_2_fu_631_p1;
wire   [5:0] add_ln28_1_fu_635_p2;
wire   [8:0] tmp_1_fu_641_p3;
wire   [6:0] tmp_2_fu_653_p3;
wire  signed [63:0] sext_ln28_1_fu_649_p1;
wire  signed [63:0] sext_ln28_2_fu_661_p1;
wire   [3:0] zext_ln23_1_fu_619_p1;
wire   [3:0] add_ln28_fu_497_p2;
wire   [3:0] add_ln28_2_fu_671_p2;
wire   [3:0] select_ln20_2_fu_676_p3;
wire   [3:0] select_ln23_2_fu_683_p3;
wire   [7:0] grp_fu_962_p3;
wire   [8:0] tmp_5_fu_702_p3;
wire   [10:0] p_shl_cast_fu_695_p3;
wire   [10:0] zext_ln28_5_fu_709_p1;
wire   [63:0] sub_ln28_1_fu_665_p2;
wire   [6:0] trunc_ln28_fu_727_p1;
wire   [6:0] zext_ln28_7_fu_723_p1;
wire   [6:0] add_ln28_4_fu_731_p2;
wire   [10:0] tmp_12_cast_fu_737_p3;
wire   [10:0] add_ln28_5_fu_745_p2;
wire   [10:0] zext_ln28_6_fu_719_p1;
wire   [10:0] add_ln28_6_fu_755_p2;
wire   [2:0] add_ln26_fu_766_p2;
wire   [6:0] trunc_ln28_1_fu_780_p1;
wire   [6:0] zext_ln28_11_fu_776_p1;
wire   [10:0] zext_ln28_10_fu_772_p1;
wire   [10:0] add_ln28_9_fu_790_p2;
wire   [10:0] tmp_14_cast_fu_805_p3;
wire   [10:0] add_ln28_8_fu_812_p2;
wire   [2:0] add_ln26_1_fu_822_p2;
wire   [6:0] zext_ln28_15_fu_831_p1;
wire   [6:0] add_ln28_10_fu_835_p2;
wire   [10:0] tmp_16_cast_fu_840_p3;
wire   [10:0] zext_ln28_14_fu_827_p1;
wire   [10:0] add_ln28_12_fu_853_p2;
wire   [8:0] add_ln13_1_fu_889_p2;
wire   [31:0] bitcast_ln36_fu_902_p1;
wire   [7:0] tmp_fu_906_p4;
wire   [22:0] trunc_ln36_fu_916_p1;
wire   [0:0] icmp_ln36_1_fu_926_p2;
wire   [0:0] icmp_ln36_fu_920_p2;
wire   [0:0] or_ln36_fu_932_p2;
wire   [0:0] grp_fu_347_p2;
wire   [0:0] and_ln36_fu_938_p2;
wire   [3:0] grp_fu_953_p0;
wire   [4:0] grp_fu_953_p1;
wire   [3:0] grp_fu_953_p2;
wire   [4:0] grp_fu_962_p0;
wire   [3:0] grp_fu_962_p1;
wire   [3:0] grp_fu_962_p2;
reg   [19:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage5_11001;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_pp0_stage10_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_953_p00;
wire   [7:0] grp_fu_953_p20;
wire   [7:0] grp_fu_962_p10;
wire   [7:0] grp_fu_962_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 20'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 864 ),
    .AddressWidth( 10 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p0),
    .din1(grp_fu_335_p1),
    .ce(1'b1),
    .dout(grp_fu_335_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(grp_fu_341_p1),
    .ce(1'b1),
    .dout(grp_fu_341_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_347_p2)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U4(
    .din0(grp_fu_953_p0),
    .din1(grp_fu_953_p1),
    .din2(grp_fu_953_p2),
    .dout(grp_fu_953_p3)
);

conv_mac_muladd_5fYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_5fYi_U5(
    .din0(grp_fu_962_p0),
    .din1(grp_fu_962_p1),
    .din2(grp_fu_962_p2),
    .dout(grp_fu_962_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        c_0_reg_245 <= select_ln37_3_reg_997;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_245 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ch_0_0_reg_324 <= add_ln26_2_reg_1127;
    end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ch_0_0_reg_324 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        f_0_reg_256 <= f_reg_1147;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_256 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten21_reg_267 <= add_ln20_1_reg_1026;
    end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten21_reg_267 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten29_reg_233 <= select_ln13_reg_1152;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten29_reg_233 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        indvar_flatten43_reg_211 <= add_ln10_reg_976;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten43_reg_211 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_289 <= select_ln23_3_reg_1132;
    end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_289 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        r_0_reg_222 <= select_ln37_1_reg_986;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_222 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_sum_2_0_reg_312 <= grp_fu_335_p2;
    end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_2_0_reg_312 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_301 <= select_ln23_1_reg_1047;
    end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_301 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_278 <= select_ln20_1_reg_1036;
    end else if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_278 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_976 <= add_ln10_fu_375_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln20_1_reg_1026 <= add_ln20_1_fu_508_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_reg_1031 == 1'd0) & (icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln23_1_reg_1102 <= add_ln23_1_fu_863_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        add_ln26_2_reg_1127 <= add_ln26_2_fu_873_p2;
        select_ln23_3_reg_1132 <= select_ln23_3_fu_878_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln28_11_reg_1092 <= add_ln28_11_fu_848_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_502_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln28_7_reg_1067 <= add_ln28_7_fu_784_p2;
        icmp_ln23_reg_1031 <= icmp_ln23_fu_520_p2;
        select_ln23_reg_1041 <= select_ln23_fu_611_p3;
        sub_ln28_2_reg_1052[10 : 1] <= sub_ln28_2_fu_713_p2[10 : 1];
        trunc_ln28_2_reg_1077[6 : 1] <= trunc_ln28_2_fu_801_p1[6 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_369_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_1017 <= zext_ln37_4_fu_488_p1;
        icmp_ln13_reg_981 <= icmp_ln13_fu_387_p2;
        select_ln37_1_reg_986 <= select_ln37_1_fu_401_p3;
        select_ln37_2_reg_992 <= select_ln37_2_fu_443_p3;
        select_ln37_3_reg_997 <= select_ln37_3_fu_451_p3;
        zext_ln28_reg_1005[4 : 0] <= zext_ln28_fu_470_p1[4 : 0];
        zext_ln37_2_reg_1010[4 : 0] <= zext_ln37_2_fu_474_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        f_reg_1147 <= f_fu_884_p2;
        select_ln13_reg_1152 <= select_ln13_fu_895_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_reg_1022 <= icmp_ln20_fu_502_p2;
        icmp_ln20_reg_1022_pp0_iter1_reg <= icmp_ln20_reg_1022;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_load_1_reg_1087 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_358 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) | ((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10_11001)) | ((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6_11001)))) begin
        reg_363 <= grp_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_502_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln20_1_reg_1036 <= select_ln20_1_fu_534_p3;
        select_ln23_1_reg_1047 <= select_ln23_1_fu_623_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_1_1_reg_1117 <= grp_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_1_2_reg_1122 <= grp_fu_341_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_s_reg_1107 <= grp_fu_341_p2;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_502_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_369_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ch_0_0_phi_fu_328_p4 = add_ln26_2_reg_1127;
    end else begin
        ap_phi_mux_ch_0_0_phi_fu_328_p4 = ch_0_0_reg_324;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_271_p4 = add_ln20_1_reg_1026;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_271_p4 = indvar_flatten21_reg_267;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_293_p4 = select_ln23_3_reg_1132;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_293_p4 = indvar_flatten_reg_289;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wc_0_phi_fu_305_p4 = select_ln23_1_reg_1047;
    end else begin
        ap_phi_mux_wc_0_phi_fu_305_p4 = wc_0_reg_301;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_1022 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_282_p4 = select_ln20_1_reg_1036;
    end else begin
        ap_phi_mux_wr_0_phi_fu_282_p4 = wr_0_reg_278;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_369_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            conv_weights_address0 = zext_ln28_16_fu_869_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_weights_address0 = zext_ln28_12_fu_817_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_weights_address0 = zext_ln28_8_fu_750_p1;
        end else begin
            conv_weights_address0 = 'bx;
        end
    end else begin
        conv_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_335_p0 = w_sum_2_0_reg_312;
    end else if ((((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        grp_fu_335_p0 = reg_363;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_335_p0 = ap_phi_mux_w_sum_2_0_phi_fu_316_p4;
    end else begin
        grp_fu_335_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_335_p1 = conv_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_335_p1 = tmp_1_2_reg_1122;
    end else if (((1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_335_p1 = tmp_1_1_reg_1117;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_335_p1 = tmp_s_reg_1107;
    end else begin
        grp_fu_335_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_341_p1 = reg_358;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_341_p1 = input_load_1_reg_1087;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_341_p1 = input_r_q0;
        end else begin
            grp_fu_341_p1 = 'bx;
        end
    end else begin
        grp_fu_341_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln28_17_fu_858_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = zext_ln28_9_fu_761_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_369_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_fu_502_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_fu_502_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_375_p2 = (indvar_flatten43_reg_211 + 11'd1);

assign add_ln13_1_fu_889_p2 = (9'd1 + indvar_flatten29_reg_233);

assign add_ln20_1_fu_508_p2 = (ap_phi_mux_indvar_flatten21_phi_fu_271_p4 + 5'd1);

assign add_ln20_fu_572_p2 = (zext_ln20_fu_568_p1 + select_ln37_1_reg_986);

assign add_ln23_1_fu_863_p2 = (4'd1 + indvar_flatten_reg_289);

assign add_ln26_1_fu_822_p2 = (3'd2 + select_ln23_reg_1041);

assign add_ln26_2_fu_873_p2 = (3'd3 + select_ln23_reg_1041);

assign add_ln26_fu_766_p2 = (3'd1 + select_ln23_fu_611_p3);

assign add_ln28_10_fu_835_p2 = (trunc_ln28_2_reg_1077 + zext_ln28_15_fu_831_p1);

assign add_ln28_11_fu_848_p2 = (tmp_16_cast_fu_840_p3 + zext_ln37_2_reg_1010);

assign add_ln28_12_fu_853_p2 = (sub_ln28_2_reg_1052 + zext_ln28_14_fu_827_p1);

assign add_ln28_1_fu_635_p2 = ($signed(sext_ln28_fu_564_p1) + $signed(zext_ln23_2_fu_631_p1));

assign add_ln28_2_fu_671_p2 = (zext_ln23_1_fu_619_p1 + select_ln37_3_reg_997);

assign add_ln28_4_fu_731_p2 = (trunc_ln28_fu_727_p1 + zext_ln28_7_fu_723_p1);

assign add_ln28_5_fu_745_p2 = (tmp_12_cast_fu_737_p3 + zext_ln37_2_reg_1010);

assign add_ln28_6_fu_755_p2 = (sub_ln28_2_fu_713_p2 + zext_ln28_6_fu_719_p1);

assign add_ln28_7_fu_784_p2 = (trunc_ln28_1_fu_780_p1 + zext_ln28_11_fu_776_p1);

assign add_ln28_8_fu_812_p2 = (tmp_14_cast_fu_805_p3 + zext_ln37_2_reg_1010);

assign add_ln28_9_fu_790_p2 = (sub_ln28_2_fu_713_p2 + zext_ln28_10_fu_772_p1);

assign add_ln28_fu_497_p2 = (select_ln37_3_reg_997 + zext_ln23_fu_493_p1);

assign add_ln37_1_fu_482_p2 = (zext_ln37_3_fu_478_p1 + tmp_2_cast_fu_463_p3);

assign and_ln20_fu_593_p2 = (xor_ln20_fu_581_p2 & icmp_ln26_fu_587_p2);

assign and_ln36_fu_938_p2 = (or_ln36_fu_932_p2 & grp_fu_347_p2);

assign and_ln37_fu_425_p2 = (xor_ln37_fu_413_p2 & icmp_ln16_fu_419_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_2_0_phi_fu_316_p4 = w_sum_2_0_reg_312;

assign bitcast_ln36_fu_902_p1 = reg_363;

assign c_fu_431_p2 = (select_ln37_fu_393_p3 + 4'd1);

assign conv_bias_address0 = zext_ln28_reg_1005;

assign conv_out_address0 = conv_out_addr_reg_1017;

assign conv_out_d0 = ((and_ln36_fu_938_p2[0:0] === 1'b1) ? reg_363 : 32'd0);

assign f_fu_884_p2 = (5'd1 + select_ln37_2_reg_992);

assign grp_fu_953_p0 = grp_fu_953_p00;

assign grp_fu_953_p00 = select_ln37_1_fu_401_p3;

assign grp_fu_953_p1 = 8'd11;

assign grp_fu_953_p2 = grp_fu_953_p20;

assign grp_fu_953_p20 = select_ln37_3_fu_451_p3;

assign grp_fu_962_p0 = 8'd13;

assign grp_fu_962_p1 = grp_fu_962_p10;

assign grp_fu_962_p10 = add_ln20_fu_572_p2;

assign grp_fu_962_p2 = grp_fu_962_p20;

assign grp_fu_962_p20 = select_ln23_2_fu_683_p3;

assign icmp_ln10_fu_369_p2 = ((indvar_flatten43_reg_211 == 11'd1936) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_387_p2 = ((indvar_flatten29_reg_233 == 9'd176) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_419_p2 = ((f_0_reg_256 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_502_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_271_p4 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_520_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_293_p4 == 4'd6) ? 1'b1 : 1'b0);

assign icmp_ln26_fu_587_p2 = ((ap_phi_mux_ch_0_0_phi_fu_328_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_926_p2 = ((trunc_ln36_fu_916_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_920_p2 = ((tmp_fu_906_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_r_address1 = zext_ln28_13_fu_796_p1;

assign or_ln23_fu_605_p2 = (icmp_ln23_fu_520_p2 | and_ln20_fu_593_p2);

assign or_ln36_fu_932_p2 = (icmp_ln36_fu_920_p2 | icmp_ln36_1_fu_926_p2);

assign or_ln37_fu_437_p2 = (icmp_ln13_fu_387_p2 | and_ln37_fu_425_p2);

assign p_shl_cast_fu_695_p3 = {{grp_fu_962_p3}, {3'd0}};

assign r_fu_381_p2 = (r_0_reg_222 + 4'd1);

assign select_ln13_fu_895_p3 = ((icmp_ln13_reg_981[0:0] === 1'b1) ? 9'd1 : add_ln13_1_fu_889_p2);

assign select_ln20_1_fu_534_p3 = ((icmp_ln23_fu_520_p2[0:0] === 1'b1) ? wr_fu_514_p2 : ap_phi_mux_wr_0_phi_fu_282_p4);

assign select_ln20_2_fu_676_p3 = ((icmp_ln23_fu_520_p2[0:0] === 1'b1) ? select_ln37_3_reg_997 : add_ln28_fu_497_p2);

assign select_ln20_fu_526_p3 = ((icmp_ln23_fu_520_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_305_p4);

assign select_ln23_1_fu_623_p3 = ((and_ln20_fu_593_p2[0:0] === 1'b1) ? wc_fu_599_p2 : select_ln20_fu_526_p3);

assign select_ln23_2_fu_683_p3 = ((and_ln20_fu_593_p2[0:0] === 1'b1) ? add_ln28_2_fu_671_p2 : select_ln20_2_fu_676_p3);

assign select_ln23_3_fu_878_p3 = ((icmp_ln23_reg_1031[0:0] === 1'b1) ? 4'd1 : add_ln23_1_reg_1102);

assign select_ln23_fu_611_p3 = ((or_ln23_fu_605_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_ch_0_0_phi_fu_328_p4);

assign select_ln37_1_fu_401_p3 = ((icmp_ln13_fu_387_p2[0:0] === 1'b1) ? r_fu_381_p2 : r_0_reg_222);

assign select_ln37_2_fu_443_p3 = ((or_ln37_fu_437_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_256);

assign select_ln37_3_fu_451_p3 = ((and_ln37_fu_425_p2[0:0] === 1'b1) ? c_fu_431_p2 : select_ln37_fu_393_p3);

assign select_ln37_fu_393_p3 = ((icmp_ln13_fu_387_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_245);

assign sext_ln28_1_fu_649_p1 = $signed(tmp_1_fu_641_p3);

assign sext_ln28_2_fu_661_p1 = $signed(tmp_2_fu_653_p3);

assign sext_ln28_fu_564_p1 = $signed(sub_ln28_fu_558_p2);

assign sub_ln28_1_fu_665_p2 = ($signed(sext_ln28_1_fu_649_p1) - $signed(sext_ln28_2_fu_661_p1));

assign sub_ln28_2_fu_713_p2 = (p_shl_cast_fu_695_p3 - zext_ln28_5_fu_709_p1);

assign sub_ln28_fu_558_p2 = (zext_ln28_2_fu_554_p1 - zext_ln28_1_fu_542_p1);

assign tmp_12_cast_fu_737_p3 = {{add_ln28_4_fu_731_p2}, {4'd0}};

assign tmp_14_cast_fu_805_p3 = {{add_ln28_7_reg_1067}, {4'd0}};

assign tmp_16_cast_fu_840_p3 = {{add_ln28_10_fu_835_p2}, {4'd0}};

assign tmp_1_fu_641_p3 = {{add_ln28_1_fu_635_p2}, {3'd0}};

assign tmp_2_cast_fu_463_p3 = {{grp_fu_953_p3}, {4'd0}};

assign tmp_2_fu_653_p3 = {{add_ln28_1_fu_635_p2}, {1'd0}};

assign tmp_4_fu_546_p3 = {{select_ln20_1_fu_534_p3}, {2'd0}};

assign tmp_5_fu_702_p3 = {{grp_fu_962_p3}, {1'd0}};

assign tmp_fu_906_p4 = {{bitcast_ln36_fu_902_p1[30:23]}};

assign trunc_ln28_1_fu_780_p1 = sub_ln28_1_fu_665_p2[6:0];

assign trunc_ln28_2_fu_801_p1 = sub_ln28_1_fu_665_p2[6:0];

assign trunc_ln28_fu_727_p1 = sub_ln28_1_fu_665_p2[6:0];

assign trunc_ln36_fu_916_p1 = bitcast_ln36_fu_902_p1[22:0];

assign wc_fu_599_p2 = (2'd1 + select_ln20_fu_526_p3);

assign wr_fu_514_p2 = (2'd1 + ap_phi_mux_wr_0_phi_fu_282_p4);

assign xor_ln20_fu_581_p2 = (icmp_ln23_fu_520_p2 ^ 1'd1);

assign xor_ln37_fu_413_p2 = (icmp_ln13_fu_387_p2 ^ 1'd1);

assign zext_ln20_fu_568_p1 = select_ln20_1_fu_534_p3;

assign zext_ln23_1_fu_619_p1 = wc_fu_599_p2;

assign zext_ln23_2_fu_631_p1 = select_ln23_1_fu_623_p3;

assign zext_ln23_fu_493_p1 = ap_phi_mux_wc_0_phi_fu_305_p4;

assign zext_ln28_10_fu_772_p1 = add_ln26_fu_766_p2;

assign zext_ln28_11_fu_776_p1 = add_ln26_fu_766_p2;

assign zext_ln28_12_fu_817_p1 = add_ln28_8_fu_812_p2;

assign zext_ln28_13_fu_796_p1 = add_ln28_9_fu_790_p2;

assign zext_ln28_14_fu_827_p1 = add_ln26_1_fu_822_p2;

assign zext_ln28_15_fu_831_p1 = add_ln26_1_fu_822_p2;

assign zext_ln28_16_fu_869_p1 = add_ln28_11_reg_1092;

assign zext_ln28_17_fu_858_p1 = add_ln28_12_fu_853_p2;

assign zext_ln28_1_fu_542_p1 = select_ln20_1_fu_534_p3;

assign zext_ln28_2_fu_554_p1 = tmp_4_fu_546_p3;

assign zext_ln28_5_fu_709_p1 = tmp_5_fu_702_p3;

assign zext_ln28_6_fu_719_p1 = select_ln23_fu_611_p3;

assign zext_ln28_7_fu_723_p1 = select_ln23_fu_611_p3;

assign zext_ln28_8_fu_750_p1 = add_ln28_5_fu_745_p2;

assign zext_ln28_9_fu_761_p1 = add_ln28_6_fu_755_p2;

assign zext_ln28_fu_470_p1 = select_ln37_2_fu_443_p3;

assign zext_ln37_2_fu_474_p1 = select_ln37_2_fu_443_p3;

assign zext_ln37_3_fu_478_p1 = select_ln37_2_fu_443_p3;

assign zext_ln37_4_fu_488_p1 = add_ln37_1_fu_482_p2;

always @ (posedge ap_clk) begin
    zext_ln28_reg_1005[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln37_2_reg_1010[10:5] <= 6'b000000;
    sub_ln28_2_reg_1052[0] <= 1'b0;
    trunc_ln28_2_reg_1077[0] <= 1'b0;
end

endmodule //conv
