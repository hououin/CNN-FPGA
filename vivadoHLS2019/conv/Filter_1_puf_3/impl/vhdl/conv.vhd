-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.205000,HLS_SYN_LAT=437537,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=868,HLS_SYN_LUT=1962,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_267 : STD_LOGIC_VECTOR (4 downto 0);
    signal wr_0_reg_278 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_289 : STD_LOGIC_VECTOR (3 downto 0);
    signal wc_0_reg_301 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_0_reg_312 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_324 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln20_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_363 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln10_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_375_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln10_reg_976 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln13_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_981 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_401_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_1_reg_986 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_2_fu_443_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_2_reg_992 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln37_3_fu_451_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_3_reg_997 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_reg_1005 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln37_2_fu_474_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln37_2_reg_1010 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_1017 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln20_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_1022_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln20_1_fu_508_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln20_1_reg_1026 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln23_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln23_reg_1031 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_1_fu_534_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln20_1_reg_1036 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_fu_611_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln23_reg_1041 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln23_1_fu_623_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_1_reg_1047 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln28_2_fu_713_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln28_2_reg_1052 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_7_fu_784_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_7_reg_1067 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_2_fu_801_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln28_2_reg_1077 : STD_LOGIC_VECTOR (6 downto 0);
    signal input_load_1_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln28_11_fu_848_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_11_reg_1092 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_1_fu_863_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_1_reg_1102 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1117 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1122 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal add_ln26_2_fu_873_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_2_reg_1127 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state14_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal select_ln23_3_fu_878_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_3_reg_1132 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal f_fu_884_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1147 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_fu_895_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_reg_1152 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten43_reg_211 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal r_0_reg_222 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_233 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_245 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_256 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_271_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_282_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_293_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_305_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_0_phi_fu_316_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_0_phi_fu_328_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln37_4_fu_488_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_750_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_9_fu_761_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_13_fu_796_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_12_fu_817_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_17_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_16_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal grp_fu_341_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_381_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln37_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_393_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln37_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln37_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_431_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_953_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln37_3_fu_478_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_463_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln37_1_fu_482_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln23_fu_493_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_fu_514_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_546_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_2_fu_554_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_1_fu_542_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln28_fu_558_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_568_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln20_fu_572_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln26_fu_587_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln20_fu_581_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln20_fu_526_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln20_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_605_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_599_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln28_fu_564_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_2_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln28_1_fu_635_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_641_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_2_fu_653_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln28_1_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln28_2_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_1_fu_619_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_fu_497_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_2_fu_671_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln20_2_fu_676_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln23_2_fu_683_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_962_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_702_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_695_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_5_fu_709_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln28_1_fu_665_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln28_fu_727_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_7_fu_723_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_4_fu_731_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_cast_fu_737_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_5_fu_745_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_6_fu_719_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_6_fu_755_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_fu_766_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln28_1_fu_780_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_11_fu_776_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_10_fu_772_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_9_fu_790_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_cast_fu_805_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_8_fu_812_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_1_fu_822_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_15_fu_831_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln28_10_fu_835_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_cast_fu_840_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln28_14_fu_827_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_12_fu_853_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln13_1_fu_889_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln36_fu_902_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_906_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln36_fu_916_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln36_1_fu_926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_953_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_953_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_953_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_962_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_962_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_962_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state11_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_953_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_953_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_962_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_962_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_mac_muladd_5fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p0,
        din1 => grp_fu_335_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_335_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => grp_fu_341_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_341_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_347_p2);

    conv_mac_muladd_4eOg_U4 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_953_p0,
        din1 => grp_fu_953_p1,
        din2 => grp_fu_953_p2,
        dout => grp_fu_953_p3);

    conv_mac_muladd_5fYi_U5 : component conv_mac_muladd_5fYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_962_p0,
        din1 => grp_fu_962_p1,
        din2 => grp_fu_962_p2,
        dout => grp_fu_962_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                c_0_reg_245 <= select_ln37_3_reg_997;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_245 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_0_reg_324 <= add_ln26_2_reg_1127;
            elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_0_reg_324 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                f_0_reg_256 <= f_reg_1147;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_256 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_267 <= add_ln20_1_reg_1026;
            elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_267 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten29_reg_233 <= select_ln13_reg_1152;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten29_reg_233 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                indvar_flatten43_reg_211 <= add_ln10_reg_976;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten43_reg_211 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_289_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_289 <= select_ln23_3_reg_1132;
            elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_289 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                r_0_reg_222 <= select_ln37_1_reg_986;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_222 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_312_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                w_sum_2_0_reg_312 <= grp_fu_335_p2;
            elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_0_reg_312 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_301 <= select_ln23_1_reg_1047;
            elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_301 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_278 <= select_ln20_1_reg_1036;
            elsif (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_278 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_976 <= add_ln10_fu_375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln20_1_reg_1026 <= add_ln20_1_fu_508_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_reg_1031 = ap_const_lv1_0) and (icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln23_1_reg_1102 <= add_ln23_1_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                add_ln26_2_reg_1127 <= add_ln26_2_fu_873_p2;
                select_ln23_3_reg_1132 <= select_ln23_3_fu_878_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln28_11_reg_1092 <= add_ln28_11_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_502_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln28_7_reg_1067 <= add_ln28_7_fu_784_p2;
                icmp_ln23_reg_1031 <= icmp_ln23_fu_520_p2;
                select_ln23_reg_1041 <= select_ln23_fu_611_p3;
                    sub_ln28_2_reg_1052(10 downto 1) <= sub_ln28_2_fu_713_p2(10 downto 1);
                    trunc_ln28_2_reg_1077(6 downto 1) <= trunc_ln28_2_fu_801_p1(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_369_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_1017 <= zext_ln37_4_fu_488_p1(11 - 1 downto 0);
                icmp_ln13_reg_981 <= icmp_ln13_fu_387_p2;
                select_ln37_1_reg_986 <= select_ln37_1_fu_401_p3;
                select_ln37_2_reg_992 <= select_ln37_2_fu_443_p3;
                select_ln37_3_reg_997 <= select_ln37_3_fu_451_p3;
                    zext_ln28_reg_1005(4 downto 0) <= zext_ln28_fu_470_p1(4 downto 0);
                    zext_ln37_2_reg_1010(4 downto 0) <= zext_ln37_2_fu_474_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                f_reg_1147 <= f_fu_884_p2;
                select_ln13_reg_1152 <= select_ln13_fu_895_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_1022 <= icmp_ln20_fu_502_p2;
                icmp_ln20_reg_1022_pp0_iter1_reg <= icmp_ln20_reg_1022;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input_load_1_reg_1087 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_358 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001)) or ((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)))) then
                reg_363 <= grp_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_502_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln20_1_reg_1036 <= select_ln20_1_fu_534_p3;
                select_ln23_1_reg_1047 <= select_ln23_1_fu_623_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_1_1_reg_1117 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_1_2_reg_1122 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_s_reg_1107 <= grp_fu_341_p2;
            end if;
        end if;
    end process;
    zext_ln28_reg_1005(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln37_2_reg_1010(10 downto 5) <= "000000";
    sub_ln28_2_reg_1052(0) <= '0';
    trunc_ln28_2_reg_1077(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln10_fu_369_p2, ap_CS_fsm_state2, icmp_ln20_fu_502_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_369_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln20_fu_502_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln20_fu_502_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln10_fu_375_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_211) + unsigned(ap_const_lv11_1));
    add_ln13_1_fu_889_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten29_reg_233));
    add_ln20_1_fu_508_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_271_p4) + unsigned(ap_const_lv5_1));
    add_ln20_fu_572_p2 <= std_logic_vector(unsigned(zext_ln20_fu_568_p1) + unsigned(select_ln37_1_reg_986));
    add_ln23_1_fu_863_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(indvar_flatten_reg_289));
    add_ln26_1_fu_822_p2 <= std_logic_vector(unsigned(ap_const_lv3_2) + unsigned(select_ln23_reg_1041));
    add_ln26_2_fu_873_p2 <= std_logic_vector(unsigned(ap_const_lv3_3) + unsigned(select_ln23_reg_1041));
    add_ln26_fu_766_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln23_fu_611_p3));
    add_ln28_10_fu_835_p2 <= std_logic_vector(unsigned(trunc_ln28_2_reg_1077) + unsigned(zext_ln28_15_fu_831_p1));
    add_ln28_11_fu_848_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_840_p3) + unsigned(zext_ln37_2_reg_1010));
    add_ln28_12_fu_853_p2 <= std_logic_vector(unsigned(sub_ln28_2_reg_1052) + unsigned(zext_ln28_14_fu_827_p1));
    add_ln28_1_fu_635_p2 <= std_logic_vector(signed(sext_ln28_fu_564_p1) + signed(zext_ln23_2_fu_631_p1));
    add_ln28_2_fu_671_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_619_p1) + unsigned(select_ln37_3_reg_997));
    add_ln28_4_fu_731_p2 <= std_logic_vector(unsigned(trunc_ln28_fu_727_p1) + unsigned(zext_ln28_7_fu_723_p1));
    add_ln28_5_fu_745_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_737_p3) + unsigned(zext_ln37_2_reg_1010));
    add_ln28_6_fu_755_p2 <= std_logic_vector(unsigned(sub_ln28_2_fu_713_p2) + unsigned(zext_ln28_6_fu_719_p1));
    add_ln28_7_fu_784_p2 <= std_logic_vector(unsigned(trunc_ln28_1_fu_780_p1) + unsigned(zext_ln28_11_fu_776_p1));
    add_ln28_8_fu_812_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_805_p3) + unsigned(zext_ln37_2_reg_1010));
    add_ln28_9_fu_790_p2 <= std_logic_vector(unsigned(sub_ln28_2_fu_713_p2) + unsigned(zext_ln28_10_fu_772_p1));
    add_ln28_fu_497_p2 <= std_logic_vector(unsigned(select_ln37_3_reg_997) + unsigned(zext_ln23_fu_493_p1));
    add_ln37_1_fu_482_p2 <= std_logic_vector(unsigned(zext_ln37_3_fu_478_p1) + unsigned(tmp_2_cast_fu_463_p3));
    and_ln20_fu_593_p2 <= (xor_ln20_fu_581_p2 and icmp_ln26_fu_587_p2);
    and_ln36_fu_938_p2 <= (or_ln36_fu_932_p2 and grp_fu_347_p2);
    and_ln37_fu_425_p2 <= (xor_ln37_fu_413_p2 and icmp_ln16_fu_419_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_502_p2)
    begin
        if ((icmp_ln20_fu_502_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln10_fu_369_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_369_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_0_phi_fu_328_p4_assign_proc : process(ch_0_0_reg_324, icmp_ln20_reg_1022, ap_CS_fsm_pp0_stage0, add_ln26_2_reg_1127, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_0_phi_fu_328_p4 <= add_ln26_2_reg_1127;
        else 
            ap_phi_mux_ch_0_0_phi_fu_328_p4 <= ch_0_0_reg_324;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_271_p4_assign_proc : process(indvar_flatten21_reg_267, icmp_ln20_reg_1022, ap_CS_fsm_pp0_stage0, add_ln20_1_reg_1026, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_271_p4 <= add_ln20_1_reg_1026;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_271_p4 <= indvar_flatten21_reg_267;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_293_p4_assign_proc : process(indvar_flatten_reg_289, icmp_ln20_reg_1022, ap_CS_fsm_pp0_stage0, select_ln23_3_reg_1132, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_293_p4 <= select_ln23_3_reg_1132;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_293_p4 <= indvar_flatten_reg_289;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_0_phi_fu_316_p4 <= w_sum_2_0_reg_312;

    ap_phi_mux_wc_0_phi_fu_305_p4_assign_proc : process(wc_0_reg_301, icmp_ln20_reg_1022, ap_CS_fsm_pp0_stage0, select_ln23_1_reg_1047, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_305_p4 <= select_ln23_1_reg_1047;
        else 
            ap_phi_mux_wc_0_phi_fu_305_p4 <= wc_0_reg_301;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_282_p4_assign_proc : process(wr_0_reg_278, icmp_ln20_reg_1022, ap_CS_fsm_pp0_stage0, select_ln20_1_reg_1036, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_1022 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_282_p4 <= select_ln20_1_reg_1036;
        else 
            ap_phi_mux_wr_0_phi_fu_282_p4 <= wr_0_reg_278;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_369_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_369_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln36_fu_902_p1 <= reg_363;
    c_fu_431_p2 <= std_logic_vector(unsigned(select_ln37_fu_393_p3) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln28_reg_1005(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1017;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_363 when (and_ln36_fu_938_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln28_8_fu_750_p1, zext_ln28_12_fu_817_p1, ap_block_pp0_stage1, zext_ln28_16_fu_869_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_weights_address0 <= zext_ln28_16_fu_869_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_weights_address0 <= zext_ln28_12_fu_817_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_weights_address0 <= zext_ln28_8_fu_750_p1(10 - 1 downto 0);
            else 
                conv_weights_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_weights_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_884_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln37_2_reg_992));

    grp_fu_335_p0_assign_proc : process(w_sum_2_0_reg_312, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, reg_363, ap_CS_fsm_pp0_stage11, ap_CS_fsm_state19, ap_phi_mux_w_sum_2_0_phi_fu_316_p4, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_335_p0 <= w_sum_2_0_reg_312;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)))) then 
            grp_fu_335_p0 <= reg_363;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_335_p0 <= ap_phi_mux_w_sum_2_0_phi_fu_316_p4;
        else 
            grp_fu_335_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_335_p1_assign_proc : process(conv_bias_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, tmp_s_reg_1107, tmp_1_1_reg_1117, tmp_1_2_reg_1122, ap_CS_fsm_pp0_stage11, ap_CS_fsm_state19, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_335_p1 <= conv_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_335_p1 <= tmp_1_2_reg_1122;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_335_p1 <= tmp_1_1_reg_1117;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_335_p1 <= tmp_s_reg_1107;
        else 
            grp_fu_335_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_341_p1_assign_proc : process(input_r_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, reg_358, input_load_1_reg_1087, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_341_p1 <= reg_358;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_341_p1 <= input_load_1_reg_1087;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_341_p1 <= input_r_q0;
            else 
                grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_341_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_953_p0 <= grp_fu_953_p00(4 - 1 downto 0);
    grp_fu_953_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_fu_401_p3),8));
    grp_fu_953_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_953_p2 <= grp_fu_953_p20(4 - 1 downto 0);
    grp_fu_953_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_3_fu_451_p3),8));
    grp_fu_962_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_962_p1 <= grp_fu_962_p10(4 - 1 downto 0);
    grp_fu_962_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln20_fu_572_p2),8));
    grp_fu_962_p2 <= grp_fu_962_p20(4 - 1 downto 0);
    grp_fu_962_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_2_fu_683_p3),8));
    icmp_ln10_fu_369_p2 <= "1" when (indvar_flatten43_reg_211 = ap_const_lv11_790) else "0";
    icmp_ln13_fu_387_p2 <= "1" when (indvar_flatten29_reg_233 = ap_const_lv9_B0) else "0";
    icmp_ln16_fu_419_p2 <= "1" when (f_0_reg_256 = ap_const_lv5_10) else "0";
    icmp_ln20_fu_502_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_271_p4 = ap_const_lv5_12) else "0";
    icmp_ln23_fu_520_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_293_p4 = ap_const_lv4_6) else "0";
    icmp_ln26_fu_587_p2 <= "1" when (ap_phi_mux_ch_0_0_phi_fu_328_p4 = ap_const_lv3_6) else "0";
    icmp_ln36_1_fu_926_p2 <= "1" when (trunc_ln36_fu_916_p1 = ap_const_lv23_0) else "0";
    icmp_ln36_fu_920_p2 <= "0" when (tmp_fu_906_p4 = ap_const_lv8_FF) else "1";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln28_9_fu_761_p1, ap_block_pp0_stage1, zext_ln28_17_fu_858_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln28_17_fu_858_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln28_9_fu_761_p1(10 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= zext_ln28_13_fu_796_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln23_fu_605_p2 <= (icmp_ln23_fu_520_p2 or and_ln20_fu_593_p2);
    or_ln36_fu_932_p2 <= (icmp_ln36_fu_920_p2 or icmp_ln36_1_fu_926_p2);
    or_ln37_fu_437_p2 <= (icmp_ln13_fu_387_p2 or and_ln37_fu_425_p2);
    p_shl_cast_fu_695_p3 <= (grp_fu_962_p3 & ap_const_lv3_0);
    r_fu_381_p2 <= std_logic_vector(unsigned(r_0_reg_222) + unsigned(ap_const_lv4_1));
    select_ln13_fu_895_p3 <= 
        ap_const_lv9_1 when (icmp_ln13_reg_981(0) = '1') else 
        add_ln13_1_fu_889_p2;
    select_ln20_1_fu_534_p3 <= 
        wr_fu_514_p2 when (icmp_ln23_fu_520_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_282_p4;
    select_ln20_2_fu_676_p3 <= 
        select_ln37_3_reg_997 when (icmp_ln23_fu_520_p2(0) = '1') else 
        add_ln28_fu_497_p2;
    select_ln20_fu_526_p3 <= 
        ap_const_lv2_0 when (icmp_ln23_fu_520_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_305_p4;
    select_ln23_1_fu_623_p3 <= 
        wc_fu_599_p2 when (and_ln20_fu_593_p2(0) = '1') else 
        select_ln20_fu_526_p3;
    select_ln23_2_fu_683_p3 <= 
        add_ln28_2_fu_671_p2 when (and_ln20_fu_593_p2(0) = '1') else 
        select_ln20_2_fu_676_p3;
    select_ln23_3_fu_878_p3 <= 
        ap_const_lv4_1 when (icmp_ln23_reg_1031(0) = '1') else 
        add_ln23_1_reg_1102;
    select_ln23_fu_611_p3 <= 
        ap_const_lv3_0 when (or_ln23_fu_605_p2(0) = '1') else 
        ap_phi_mux_ch_0_0_phi_fu_328_p4;
    select_ln37_1_fu_401_p3 <= 
        r_fu_381_p2 when (icmp_ln13_fu_387_p2(0) = '1') else 
        r_0_reg_222;
    select_ln37_2_fu_443_p3 <= 
        ap_const_lv5_0 when (or_ln37_fu_437_p2(0) = '1') else 
        f_0_reg_256;
    select_ln37_3_fu_451_p3 <= 
        c_fu_431_p2 when (and_ln37_fu_425_p2(0) = '1') else 
        select_ln37_fu_393_p3;
    select_ln37_fu_393_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_387_p2(0) = '1') else 
        c_0_reg_245;
        sext_ln28_1_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_641_p3),64));

        sext_ln28_2_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_653_p3),64));

        sext_ln28_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln28_fu_558_p2),6));

    sub_ln28_1_fu_665_p2 <= std_logic_vector(signed(sext_ln28_1_fu_649_p1) - signed(sext_ln28_2_fu_661_p1));
    sub_ln28_2_fu_713_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_695_p3) - unsigned(zext_ln28_5_fu_709_p1));
    sub_ln28_fu_558_p2 <= std_logic_vector(unsigned(zext_ln28_2_fu_554_p1) - unsigned(zext_ln28_1_fu_542_p1));
    tmp_12_cast_fu_737_p3 <= (add_ln28_4_fu_731_p2 & ap_const_lv4_0);
    tmp_14_cast_fu_805_p3 <= (add_ln28_7_reg_1067 & ap_const_lv4_0);
    tmp_16_cast_fu_840_p3 <= (add_ln28_10_fu_835_p2 & ap_const_lv4_0);
    tmp_1_fu_641_p3 <= (add_ln28_1_fu_635_p2 & ap_const_lv3_0);
    tmp_2_cast_fu_463_p3 <= (grp_fu_953_p3 & ap_const_lv4_0);
    tmp_2_fu_653_p3 <= (add_ln28_1_fu_635_p2 & ap_const_lv1_0);
    tmp_4_fu_546_p3 <= (select_ln20_1_fu_534_p3 & ap_const_lv2_0);
    tmp_5_fu_702_p3 <= (grp_fu_962_p3 & ap_const_lv1_0);
    tmp_fu_906_p4 <= bitcast_ln36_fu_902_p1(30 downto 23);
    trunc_ln28_1_fu_780_p1 <= sub_ln28_1_fu_665_p2(7 - 1 downto 0);
    trunc_ln28_2_fu_801_p1 <= sub_ln28_1_fu_665_p2(7 - 1 downto 0);
    trunc_ln28_fu_727_p1 <= sub_ln28_1_fu_665_p2(7 - 1 downto 0);
    trunc_ln36_fu_916_p1 <= bitcast_ln36_fu_902_p1(23 - 1 downto 0);
    wc_fu_599_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln20_fu_526_p3));
    wr_fu_514_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_282_p4));
    xor_ln20_fu_581_p2 <= (icmp_ln23_fu_520_p2 xor ap_const_lv1_1);
    xor_ln37_fu_413_p2 <= (icmp_ln13_fu_387_p2 xor ap_const_lv1_1);
    zext_ln20_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_534_p3),4));
    zext_ln23_1_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_599_p2),4));
    zext_ln23_2_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_623_p3),6));
    zext_ln23_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_305_p4),4));
    zext_ln28_10_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_766_p2),11));
    zext_ln28_11_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_766_p2),7));
    zext_ln28_12_fu_817_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_8_fu_812_p2),64));
    zext_ln28_13_fu_796_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_9_fu_790_p2),64));
    zext_ln28_14_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_822_p2),11));
    zext_ln28_15_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_822_p2),7));
    zext_ln28_16_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_11_reg_1092),64));
    zext_ln28_17_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_12_fu_853_p2),64));
    zext_ln28_1_fu_542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln20_1_fu_534_p3),5));
    zext_ln28_2_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_546_p3),5));
    zext_ln28_5_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_702_p3),11));
    zext_ln28_6_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_611_p3),11));
    zext_ln28_7_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_fu_611_p3),7));
    zext_ln28_8_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_745_p2),64));
    zext_ln28_9_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_6_fu_755_p2),64));
    zext_ln28_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_443_p3),64));
    zext_ln37_2_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_443_p3),11));
    zext_ln37_3_fu_478_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_2_fu_443_p3),12));
    zext_ln37_4_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln37_1_fu_482_p2),64));
end behav;
