-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_ce1 : OUT STD_LOGIC;
    conv_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=389382,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=841,HLS_SYN_LUT=1755,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv16_FD80 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv12_9C0 : STD_LOGIC_VECTOR (11 downto 0) := "100111000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten47_reg_205 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_0_reg_216 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten14_reg_227 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_0_reg_238 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_249 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_0_reg_260 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_271 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_282 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_311 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_786 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_321 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal icmp_ln8_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln8_reg_786_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_344_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln8_reg_790 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln35_1_fu_370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_795 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_fu_444_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_reg_801 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_1_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_1_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_528_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_reg_812 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_2_fu_536_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln26_2_reg_817 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_9_fu_635_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_9_reg_849 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln14_fu_647_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln14_reg_854 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_fu_661_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln11_reg_859 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_weights_1_0_l_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_load_1_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_l_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_fu_673_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal wr_fu_681_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_899 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_out_addr_reg_905 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln18_1_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_910 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_sum_3_2_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal conv_1_bias_load_reg_925 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten47_phi_fu_209_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_220_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten14_phi_fu_231_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_c_0_phi_fu_242_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_253_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_f_0_phi_fu_264_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_275_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_0_phi_fu_286_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_5_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_619_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_fu_630_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln35_5_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_706_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_326_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_394_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_362_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_1_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_3_fu_424_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_4_fu_456_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_6_fu_462_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_5_fu_474_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_386_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_fu_480_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln35_1_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_4_fu_436_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln35_2_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_510_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_552_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_1_fu_544_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_4_fu_560_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_6_fu_564_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_fu_548_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_577_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_583_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_595_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_6_fu_591_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_603_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_fu_452_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_613_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_3_fu_470_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_624_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_4_fu_488_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_fu_641_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_fu_655_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal grp_fu_777_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_692_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_2_fu_703_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_fu_699_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_710_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln34_fu_726_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_730_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_740_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_744_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_777_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_777_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_weights_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_address0,
        ce0 => conv_1_weights_0_0_ce0,
        q0 => conv_1_weights_0_0_q0);

    conv_1_weights_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_address0,
        ce0 => conv_1_weights_1_0_ce0,
        q0 => conv_1_weights_1_0_q0);

    conv_1_weights_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_address0,
        ce0 => conv_1_weights_2_0_ce0,
        q0 => conv_1_weights_2_0_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        din1 => grp_fu_294_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_294_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        din1 => grp_fu_298_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_294_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_5_fu_305_p2);

    conv_1_mac_muladdhbi_U4 : component conv_1_mac_muladdhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        din2 => grp_fu_777_p2,
        dout => grp_fu_777_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                c_0_reg_238 <= select_ln35_5_reg_801;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_238 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                f_0_reg_260 <= select_ln26_2_reg_817;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_260 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten14_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                indvar_flatten14_reg_227 <= select_ln11_reg_859;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten14_reg_227 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten47_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                indvar_flatten47_reg_205 <= add_ln8_reg_790;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten47_reg_205 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                indvar_flatten_reg_249 <= select_ln14_reg_854;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_249 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                r_0_reg_216 <= select_ln35_1_reg_795;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_216 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_786_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_0_reg_282 <= w_sum_3_2_reg_919;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_0_reg_282 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wr_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
                wr_0_reg_271 <= wr_reg_899;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wr_0_reg_271 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_338_p2 = ap_const_lv1_0))) then
                add_ln26_9_reg_849 <= add_ln26_9_fu_635_p2;
                or_ln26_1_reg_807 <= or_ln26_1_fu_522_p2;
                select_ln26_reg_812 <= select_ln26_fu_528_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln8_reg_790 <= add_ln8_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln18_1_reg_910 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_1_bias_load_reg_925 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then
                conv_1_weights_1_0_l_reg_874 <= conv_1_weights_1_0_q0;
                conv_1_weights_2_0_l_reg_884 <= conv_1_weights_2_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then
                conv_input_load_1_reg_879 <= conv_input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then
                conv_out_addr_reg_905 <= zext_ln35_5_fu_716_p1(15 - 1 downto 0);
                icmp_ln18_1_reg_910 <= icmp_ln18_1_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln8_reg_786 <= icmp_ln8_fu_338_p2;
                icmp_ln8_reg_786_pp0_iter1_reg <= icmp_ln8_reg_786;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_786 = ap_const_lv1_0)))) then
                reg_311 <= conv_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0)))) then
                reg_316 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0)))) then
                reg_321 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_338_p2 = ap_const_lv1_0))) then
                select_ln11_reg_859 <= select_ln11_fu_661_p3;
                select_ln14_reg_854 <= select_ln14_fu_647_p3;
                select_ln26_2_reg_817 <= select_ln26_2_fu_536_p3;
                select_ln35_1_reg_795 <= select_ln35_1_fu_370_p3;
                select_ln35_5_reg_801 <= select_ln35_5_fu_444_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then
                tmp_1_2_reg_894 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln8_reg_786_pp0_iter1_reg = ap_const_lv1_0))) then
                w_sum_3_2_reg_919 <= grp_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then
                wr_reg_899 <= wr_fu_681_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln8_fu_338_p2, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_338_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_338_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln11_fu_655_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten14_phi_fu_231_p4) + unsigned(ap_const_lv12_1));
    add_ln14_fu_641_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_253_p4) + unsigned(ap_const_lv8_1));
    add_ln26_2_fu_332_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_242_p4) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_424_p2 <= std_logic_vector(unsigned(select_ln35_fu_362_p3) + unsigned(ap_const_lv5_1));
    add_ln26_4_fu_456_p2 <= std_logic_vector(unsigned(select_ln35_fu_362_p3) + unsigned(ap_const_lv5_2));
    add_ln26_5_fu_474_p2 <= std_logic_vector(unsigned(select_ln35_fu_362_p3) + unsigned(ap_const_lv5_3));
    add_ln26_6_fu_564_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_544_p1) + unsigned(zext_ln26_4_fu_560_p1));
    add_ln26_7_fu_613_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_452_p1) + unsigned(sub_ln26_fu_607_p2));
    add_ln26_8_fu_624_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_470_p1) + unsigned(sub_ln26_fu_607_p2));
    add_ln26_9_fu_635_p2 <= std_logic_vector(unsigned(zext_ln35_4_fu_488_p1) + unsigned(sub_ln26_fu_607_p2));
    add_ln26_fu_577_p2 <= std_logic_vector(unsigned(select_ln35_1_fu_370_p3) + unsigned(zext_ln18_fu_548_p1));
    add_ln35_1_fu_710_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_703_p1) + unsigned(zext_ln26_fu_699_p1));
    add_ln8_fu_344_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten47_phi_fu_209_p4) + unsigned(ap_const_lv16_1));
    and_ln34_fu_762_p2 <= (tmp_5_fu_305_p2 and or_ln34_fu_756_p2);
    and_ln35_1_fu_418_p2 <= (xor_ln35_fu_394_p2 and icmp_ln14_fu_412_p2);
    and_ln35_2_fu_504_p2 <= (or_ln35_1_fu_498_p2 and and_ln35_fu_406_p2);
    and_ln35_fu_406_p2 <= (xor_ln35_fu_394_p2 and icmp_ln18_fu_400_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_338_p2)
    begin
        if ((icmp_ln8_fu_338_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_242_p4_assign_proc : process(c_0_reg_238, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, select_ln35_5_reg_801, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_242_p4 <= select_ln35_5_reg_801;
        else 
            ap_phi_mux_c_0_phi_fu_242_p4 <= c_0_reg_238;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_264_p4_assign_proc : process(f_0_reg_260, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, select_ln26_2_reg_817, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_264_p4 <= select_ln26_2_reg_817;
        else 
            ap_phi_mux_f_0_phi_fu_264_p4 <= f_0_reg_260;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten14_phi_fu_231_p4_assign_proc : process(indvar_flatten14_reg_227, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, select_ln11_reg_859, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten14_phi_fu_231_p4 <= select_ln11_reg_859;
        else 
            ap_phi_mux_indvar_flatten14_phi_fu_231_p4 <= indvar_flatten14_reg_227;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten47_phi_fu_209_p4_assign_proc : process(indvar_flatten47_reg_205, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, add_ln8_reg_790, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten47_phi_fu_209_p4 <= add_ln8_reg_790;
        else 
            ap_phi_mux_indvar_flatten47_phi_fu_209_p4 <= indvar_flatten47_reg_205;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_253_p4_assign_proc : process(indvar_flatten_reg_249, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, select_ln14_reg_854, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_253_p4 <= select_ln14_reg_854;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_253_p4 <= indvar_flatten_reg_249;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_220_p4_assign_proc : process(r_0_reg_216, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, select_ln35_1_reg_795, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_220_p4 <= select_ln35_1_reg_795;
        else 
            ap_phi_mux_r_0_phi_fu_220_p4 <= r_0_reg_216;
        end if; 
    end process;


    ap_phi_mux_w_sum_0_phi_fu_286_p4_assign_proc : process(w_sum_0_reg_282, ap_CS_fsm_pp0_stage2, icmp_ln8_reg_786_pp0_iter1_reg, w_sum_3_2_reg_919, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_786_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w_sum_0_phi_fu_286_p4 <= w_sum_3_2_reg_919;
        else 
            ap_phi_mux_w_sum_0_phi_fu_286_p4 <= w_sum_0_reg_282;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_275_p4_assign_proc : process(wr_0_reg_271, icmp_ln8_reg_786, ap_CS_fsm_pp0_stage0, wr_reg_899, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_786 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_275_p4 <= wr_reg_899;
        else 
            ap_phi_mux_wr_0_phi_fu_275_p4 <= wr_0_reg_271;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_726_p1 <= grp_fu_294_p2;
    c_fu_326_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_242_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_3_fu_706_p1(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_address0 <= zext_ln26_5_fu_570_p1(7 - 1 downto 0);

    conv_1_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_address0 <= zext_ln26_5_fu_570_p1(7 - 1 downto 0);

    conv_1_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_address0 <= zext_ln26_5_fu_570_p1(7 - 1 downto 0);

    conv_1_weights_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln26_fu_619_p1, zext_ln26_8_fu_669_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address0 <= zext_ln26_8_fu_669_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address0 <= sext_ln26_fu_619_p1(10 - 1 downto 0);
            else 
                conv_input_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    conv_input_address1 <= sext_ln26_1_fu_630_p1(10 - 1 downto 0);

    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_input_ce1 <= ap_const_logic_1;
        else 
            conv_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_905;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_294_p2 when (and_ln34_fu_762_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, icmp_ln18_1_reg_910, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln18_1_reg_910 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_510_p2 <= std_logic_vector(unsigned(select_ln35_4_fu_436_p3) + unsigned(ap_const_lv6_1));

    grp_fu_294_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, reg_321, ap_CS_fsm_pp0_stage0, select_ln26_1_fu_673_p3, ap_CS_fsm_pp0_stage4, w_sum_3_2_reg_919, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_294_p0 <= w_sum_3_2_reg_919;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_294_p0 <= reg_321;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_294_p0 <= select_ln26_1_fu_673_p3;
        else 
            grp_fu_294_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_294_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, grp_fu_298_p2, reg_316, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, tmp_1_2_reg_894, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, conv_1_bias_load_reg_925, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_294_p1 <= conv_1_bias_load_reg_925;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_294_p1 <= tmp_1_2_reg_894;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_294_p1 <= reg_316;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_294_p1 <= grp_fu_298_p2;
        else 
            grp_fu_294_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_p0_assign_proc : process(conv_1_weights_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_1_weights_1_0_l_reg_874, conv_1_weights_2_0_l_reg_884, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_298_p0 <= conv_1_weights_2_0_l_reg_884;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_298_p0 <= conv_1_weights_1_0_l_reg_874;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_298_p0 <= conv_1_weights_0_0_q0;
            else 
                grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_p1_assign_proc : process(conv_input_q0, reg_311, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_input_load_1_reg_879, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_298_p1 <= reg_311;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_298_p1 <= conv_input_load_1_reg_879;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_298_p1 <= conv_input_q0;
            else 
                grp_fu_298_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_298_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_777_p0 <= grp_fu_777_p00(5 - 1 downto 0);
    grp_fu_777_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_reg_795),10));
    grp_fu_777_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_777_p2 <= grp_fu_777_p20(5 - 1 downto 0);
    grp_fu_777_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_reg_801),10));
    icmp_ln11_fu_356_p2 <= "1" when (ap_phi_mux_indvar_flatten14_phi_fu_231_p4 = ap_const_lv12_9C0) else "0";
    icmp_ln14_fu_412_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_253_p4 = ap_const_lv8_60) else "0";
    icmp_ln18_1_fu_721_p2 <= "1" when (wr_reg_899 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_400_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_275_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_750_p2 <= "1" when (trunc_ln34_fu_740_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_744_p2 <= "0" when (tmp_fu_730_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_338_p2 <= "1" when (ap_phi_mux_indvar_flatten47_phi_fu_209_p4 = ap_const_lv16_FD80) else "0";
    or_ln26_1_fu_522_p2 <= (or_ln26_fu_516_p2 or icmp_ln11_fu_356_p2);
    or_ln26_fu_516_p2 <= (and_ln35_2_fu_504_p2 or and_ln35_1_fu_418_p2);
    or_ln34_fu_756_p2 <= (icmp_ln34_fu_744_p2 or icmp_ln34_1_fu_750_p2);
    or_ln35_1_fu_498_p2 <= (xor_ln35_1_fu_492_p2 or icmp_ln11_fu_356_p2);
    or_ln35_fu_430_p2 <= (icmp_ln11_fu_356_p2 or and_ln35_1_fu_418_p2);
    r_fu_350_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_220_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_661_p3 <= 
        ap_const_lv12_1 when (icmp_ln11_fu_356_p2(0) = '1') else 
        add_ln11_fu_655_p2;
    select_ln14_fu_647_p3 <= 
        ap_const_lv8_1 when (or_ln35_fu_430_p2(0) = '1') else 
        add_ln14_fu_641_p2;
    select_ln26_1_fu_673_p3 <= 
        ap_const_lv32_0 when (or_ln26_1_reg_807(0) = '1') else 
        ap_phi_mux_w_sum_0_phi_fu_286_p4;
    select_ln26_2_fu_536_p3 <= 
        f_fu_510_p2 when (and_ln35_2_fu_504_p2(0) = '1') else 
        select_ln35_4_fu_436_p3;
    select_ln26_fu_528_p3 <= 
        ap_const_lv2_0 when (or_ln26_1_fu_522_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_275_p4;
    select_ln35_1_fu_370_p3 <= 
        r_fu_350_p2 when (icmp_ln11_fu_356_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_220_p4;
    select_ln35_2_fu_378_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_356_p2(0) = '1') else 
        c_fu_326_p2;
    select_ln35_3_fu_386_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_356_p2(0) = '1') else 
        add_ln26_2_fu_332_p2;
    select_ln35_4_fu_436_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_430_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_264_p4;
    select_ln35_5_fu_444_p3 <= 
        add_ln26_3_fu_424_p2 when (and_ln35_1_fu_418_p2(0) = '1') else 
        select_ln35_fu_362_p3;
    select_ln35_6_fu_462_p3 <= 
        add_ln26_4_fu_456_p2 when (and_ln35_1_fu_418_p2(0) = '1') else 
        select_ln35_2_fu_378_p3;
    select_ln35_7_fu_480_p3 <= 
        add_ln26_5_fu_474_p2 when (and_ln35_1_fu_418_p2(0) = '1') else 
        select_ln35_3_fu_386_p3;
    select_ln35_fu_362_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_356_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_242_p4;
        sext_ln26_1_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_8_fu_624_p2),64));

        sext_ln26_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_7_fu_613_p2),64));

    sub_ln26_fu_607_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_591_p1) - unsigned(zext_ln26_7_fu_603_p1));
    tmp_1_fu_692_p3 <= (grp_fu_777_p3 & ap_const_lv5_0);
    tmp_3_fu_552_p3 <= (select_ln26_fu_528_p3 & ap_const_lv5_0);
    tmp_6_fu_583_p3 <= (add_ln26_fu_577_p2 & ap_const_lv5_0);
    tmp_7_fu_595_p3 <= (add_ln26_fu_577_p2 & ap_const_lv2_0);
    tmp_fu_730_p4 <= bitcast_ln34_fu_726_p1(30 downto 23);
    trunc_ln34_fu_740_p1 <= bitcast_ln34_fu_726_p1(23 - 1 downto 0);
    wr_fu_681_p2 <= std_logic_vector(unsigned(select_ln26_reg_812) + unsigned(ap_const_lv2_1));
    xor_ln35_1_fu_492_p2 <= (icmp_ln14_fu_412_p2 xor ap_const_lv1_1);
    xor_ln35_fu_394_p2 <= (icmp_ln11_fu_356_p2 xor ap_const_lv1_1);
    zext_ln18_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_fu_528_p3),5));
    zext_ln26_1_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_fu_536_p3),8));
    zext_ln26_2_fu_703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_reg_817),16));
    zext_ln26_3_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_reg_817),64));
    zext_ln26_4_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_552_p3),8));
    zext_ln26_5_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_564_p2),64));
    zext_ln26_6_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_583_p3),11));
    zext_ln26_7_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_595_p3),11));
    zext_ln26_8_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_reg_849),64));
    zext_ln26_fu_699_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_692_p3),16));
    zext_ln35_1_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_fu_444_p3),11));
    zext_ln35_3_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_6_fu_462_p3),11));
    zext_ln35_4_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_7_fu_480_p3),11));
    zext_ln35_5_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_710_p2),64));
end behav;
