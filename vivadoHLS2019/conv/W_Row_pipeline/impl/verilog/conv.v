// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.759600,HLS_SYN_LAT=418187,HLS_SYN_TPT=none,HLS_SYN_MEM=18,HLS_SYN_DSP=6,HLS_SYN_FF=2242,HLS_SYN_LUT=2520,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 74'd1;
parameter    ap_ST_fsm_pp0_stage0 = 74'd2;
parameter    ap_ST_fsm_pp0_stage1 = 74'd4;
parameter    ap_ST_fsm_pp0_stage2 = 74'd8;
parameter    ap_ST_fsm_pp0_stage3 = 74'd16;
parameter    ap_ST_fsm_pp0_stage4 = 74'd32;
parameter    ap_ST_fsm_pp0_stage5 = 74'd64;
parameter    ap_ST_fsm_pp0_stage6 = 74'd128;
parameter    ap_ST_fsm_pp0_stage7 = 74'd256;
parameter    ap_ST_fsm_pp0_stage8 = 74'd512;
parameter    ap_ST_fsm_pp0_stage9 = 74'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 74'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 74'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 74'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 74'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 74'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 74'd65536;
parameter    ap_ST_fsm_pp0_stage16 = 74'd131072;
parameter    ap_ST_fsm_pp0_stage17 = 74'd262144;
parameter    ap_ST_fsm_pp0_stage18 = 74'd524288;
parameter    ap_ST_fsm_pp0_stage19 = 74'd1048576;
parameter    ap_ST_fsm_pp0_stage20 = 74'd2097152;
parameter    ap_ST_fsm_pp0_stage21 = 74'd4194304;
parameter    ap_ST_fsm_pp0_stage22 = 74'd8388608;
parameter    ap_ST_fsm_pp0_stage23 = 74'd16777216;
parameter    ap_ST_fsm_pp0_stage24 = 74'd33554432;
parameter    ap_ST_fsm_pp0_stage25 = 74'd67108864;
parameter    ap_ST_fsm_pp0_stage26 = 74'd134217728;
parameter    ap_ST_fsm_pp0_stage27 = 74'd268435456;
parameter    ap_ST_fsm_pp0_stage28 = 74'd536870912;
parameter    ap_ST_fsm_pp0_stage29 = 74'd1073741824;
parameter    ap_ST_fsm_pp0_stage30 = 74'd2147483648;
parameter    ap_ST_fsm_pp0_stage31 = 74'd4294967296;
parameter    ap_ST_fsm_pp0_stage32 = 74'd8589934592;
parameter    ap_ST_fsm_pp0_stage33 = 74'd17179869184;
parameter    ap_ST_fsm_pp0_stage34 = 74'd34359738368;
parameter    ap_ST_fsm_pp0_stage35 = 74'd68719476736;
parameter    ap_ST_fsm_pp0_stage36 = 74'd137438953472;
parameter    ap_ST_fsm_pp0_stage37 = 74'd274877906944;
parameter    ap_ST_fsm_pp0_stage38 = 74'd549755813888;
parameter    ap_ST_fsm_pp0_stage39 = 74'd1099511627776;
parameter    ap_ST_fsm_pp0_stage40 = 74'd2199023255552;
parameter    ap_ST_fsm_pp0_stage41 = 74'd4398046511104;
parameter    ap_ST_fsm_pp0_stage42 = 74'd8796093022208;
parameter    ap_ST_fsm_pp0_stage43 = 74'd17592186044416;
parameter    ap_ST_fsm_pp0_stage44 = 74'd35184372088832;
parameter    ap_ST_fsm_pp0_stage45 = 74'd70368744177664;
parameter    ap_ST_fsm_pp0_stage46 = 74'd140737488355328;
parameter    ap_ST_fsm_pp0_stage47 = 74'd281474976710656;
parameter    ap_ST_fsm_pp0_stage48 = 74'd562949953421312;
parameter    ap_ST_fsm_pp0_stage49 = 74'd1125899906842624;
parameter    ap_ST_fsm_pp0_stage50 = 74'd2251799813685248;
parameter    ap_ST_fsm_pp0_stage51 = 74'd4503599627370496;
parameter    ap_ST_fsm_pp0_stage52 = 74'd9007199254740992;
parameter    ap_ST_fsm_pp0_stage53 = 74'd18014398509481984;
parameter    ap_ST_fsm_pp0_stage54 = 74'd36028797018963968;
parameter    ap_ST_fsm_pp0_stage55 = 74'd72057594037927936;
parameter    ap_ST_fsm_pp0_stage56 = 74'd144115188075855872;
parameter    ap_ST_fsm_pp0_stage57 = 74'd288230376151711744;
parameter    ap_ST_fsm_pp0_stage58 = 74'd576460752303423488;
parameter    ap_ST_fsm_pp0_stage59 = 74'd1152921504606846976;
parameter    ap_ST_fsm_pp0_stage60 = 74'd2305843009213693952;
parameter    ap_ST_fsm_pp0_stage61 = 74'd4611686018427387904;
parameter    ap_ST_fsm_pp0_stage62 = 74'd9223372036854775808;
parameter    ap_ST_fsm_pp0_stage63 = 74'd18446744073709551616;
parameter    ap_ST_fsm_pp0_stage64 = 74'd36893488147419103232;
parameter    ap_ST_fsm_pp0_stage65 = 74'd73786976294838206464;
parameter    ap_ST_fsm_pp0_stage66 = 74'd147573952589676412928;
parameter    ap_ST_fsm_pp0_stage67 = 74'd295147905179352825856;
parameter    ap_ST_fsm_pp0_stage68 = 74'd590295810358705651712;
parameter    ap_ST_fsm_pp0_stage69 = 74'd1180591620717411303424;
parameter    ap_ST_fsm_pp0_stage70 = 74'd2361183241434822606848;
parameter    ap_ST_fsm_pp0_stage71 = 74'd4722366482869645213696;
parameter    ap_ST_fsm_state84 = 74'd9444732965739290427392;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg[9:0] input_r_address1;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [73:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire   [5:0] conv_weights_0_0_address0;
reg    conv_weights_0_0_ce0;
wire   [31:0] conv_weights_0_0_q0;
wire   [5:0] conv_weights_0_1_address0;
reg    conv_weights_0_1_ce0;
wire   [31:0] conv_weights_0_1_q0;
wire   [5:0] conv_weights_0_2_address0;
reg    conv_weights_0_2_ce0;
wire   [31:0] conv_weights_0_2_q0;
wire   [5:0] conv_weights_0_3_address0;
reg    conv_weights_0_3_ce0;
wire   [31:0] conv_weights_0_3_q0;
wire   [5:0] conv_weights_0_4_address0;
reg    conv_weights_0_4_ce0;
wire   [31:0] conv_weights_0_4_q0;
wire   [5:0] conv_weights_0_5_address0;
reg    conv_weights_0_5_ce0;
wire   [31:0] conv_weights_0_5_q0;
wire   [5:0] conv_weights_1_0_address0;
reg    conv_weights_1_0_ce0;
wire   [31:0] conv_weights_1_0_q0;
wire   [5:0] conv_weights_1_1_address0;
reg    conv_weights_1_1_ce0;
wire   [31:0] conv_weights_1_1_q0;
wire   [5:0] conv_weights_1_2_address0;
reg    conv_weights_1_2_ce0;
wire   [31:0] conv_weights_1_2_q0;
wire   [5:0] conv_weights_1_3_address0;
reg    conv_weights_1_3_ce0;
wire   [31:0] conv_weights_1_3_q0;
wire   [5:0] conv_weights_1_4_address0;
reg    conv_weights_1_4_ce0;
wire   [31:0] conv_weights_1_4_q0;
wire   [5:0] conv_weights_1_5_address0;
reg    conv_weights_1_5_ce0;
wire   [31:0] conv_weights_1_5_q0;
wire   [5:0] conv_weights_2_0_address0;
reg    conv_weights_2_0_ce0;
wire   [31:0] conv_weights_2_0_q0;
wire   [5:0] conv_weights_2_1_address0;
reg    conv_weights_2_1_ce0;
wire   [31:0] conv_weights_2_1_q0;
wire   [5:0] conv_weights_2_2_address0;
reg    conv_weights_2_2_ce0;
wire   [31:0] conv_weights_2_2_q0;
wire   [5:0] conv_weights_2_3_address0;
reg    conv_weights_2_3_ce0;
wire   [31:0] conv_weights_2_3_q0;
wire   [5:0] conv_weights_2_4_address0;
reg    conv_weights_2_4_ce0;
wire   [31:0] conv_weights_2_4_q0;
wire   [5:0] conv_weights_2_5_address0;
reg    conv_weights_2_5_ce0;
wire   [31:0] conv_weights_2_5_q0;
reg   [12:0] indvar_flatten47_reg_566;
reg   [3:0] r_0_reg_577;
reg   [9:0] indvar_flatten14_reg_589;
reg   [3:0] c_0_reg_601;
reg   [6:0] indvar_flatten_reg_612;
reg   [4:0] f_0_reg_624;
reg   [1:0] wr_0_reg_635;
reg   [31:0] w_sum_0_reg_646;
reg   [31:0] reg_673;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state76_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln8_reg_1391;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state77_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state79_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_state83_pp0_stage9_iter1;
wire    ap_block_pp0_stage9_11001;
reg   [31:0] reg_678;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state78_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_state81_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_11001;
wire   [31:0] grp_fu_662_p2;
reg   [31:0] reg_684;
reg   [31:0] reg_689;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_state80_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_11001;
reg   [31:0] reg_695;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
reg   [31:0] reg_700;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_state82_pp0_stage8_iter1;
wire    ap_block_pp0_stage8_11001;
reg   [31:0] reg_706;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state17_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_11001;
reg   [31:0] reg_711;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] reg_717;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state21_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_11001;
wire   [31:0] grp_fu_658_p2;
reg   [31:0] reg_722;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state25_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_11001;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_state29_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_11001;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_state33_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_11001;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_state37_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_11001;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_state41_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_11001;
wire    ap_CS_fsm_pp0_stage43;
wire    ap_block_state45_pp0_stage43_iter0;
wire    ap_block_pp0_stage43_11001;
wire    ap_CS_fsm_pp0_stage47;
wire    ap_block_state49_pp0_stage47_iter0;
wire    ap_block_pp0_stage47_11001;
wire    ap_CS_fsm_pp0_stage51;
wire    ap_block_state53_pp0_stage51_iter0;
wire    ap_block_pp0_stage51_11001;
wire    ap_CS_fsm_pp0_stage55;
wire    ap_block_state57_pp0_stage55_iter0;
wire    ap_block_pp0_stage55_11001;
wire    ap_CS_fsm_pp0_stage59;
wire    ap_block_state61_pp0_stage59_iter0;
wire    ap_block_pp0_stage59_11001;
wire    ap_CS_fsm_pp0_stage63;
wire    ap_block_state65_pp0_stage63_iter0;
wire    ap_block_pp0_stage63_11001;
wire    ap_CS_fsm_pp0_stage67;
wire    ap_block_state69_pp0_stage67_iter0;
wire    ap_block_pp0_stage67_11001;
wire    ap_CS_fsm_pp0_stage71;
wire    ap_block_state73_pp0_stage71_iter0;
wire    ap_block_pp0_stage71_11001;
wire   [3:0] c_fu_727_p2;
reg   [3:0] c_reg_1381;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state74_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [3:0] add_ln26_2_fu_733_p2;
reg   [3:0] add_ln26_2_reg_1386;
wire   [0:0] icmp_ln8_fu_739_p2;
reg   [0:0] icmp_ln8_reg_1391_pp0_iter1_reg;
wire   [12:0] add_ln8_fu_745_p2;
reg   [12:0] add_ln8_reg_1395;
wire   [0:0] icmp_ln11_fu_751_p2;
reg   [0:0] icmp_ln11_reg_1400;
wire   [3:0] select_ln35_fu_757_p3;
reg   [3:0] select_ln35_reg_1408;
wire   [0:0] and_ln35_1_fu_789_p2;
reg   [0:0] and_ln35_1_reg_1416;
wire   [0:0] or_ln35_fu_795_p2;
reg   [0:0] or_ln35_reg_1423;
wire   [0:0] or_ln26_1_fu_839_p2;
reg   [0:0] or_ln26_1_reg_1428;
wire   [1:0] select_ln26_fu_845_p3;
reg   [1:0] select_ln26_reg_1433;
wire   [4:0] select_ln26_2_fu_853_p3;
reg   [4:0] select_ln26_2_reg_1439;
wire   [3:0] select_ln35_1_fu_911_p3;
reg   [3:0] select_ln35_1_reg_1536;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state75_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [3:0] select_ln35_5_fu_935_p3;
reg   [3:0] select_ln35_5_reg_1542;
wire   [7:0] zext_ln35_1_fu_941_p1;
reg   [7:0] zext_ln35_1_reg_1547;
wire   [10:0] sub_ln26_fu_1022_p2;
reg   [10:0] sub_ln26_reg_1552;
wire   [7:0] add_ln26_12_fu_1044_p2;
reg   [7:0] add_ln26_12_reg_1570;
wire   [7:0] add_ln26_17_fu_1050_p2;
reg   [7:0] add_ln26_17_reg_1576;
reg   [31:0] conv_weights_0_0_loa_reg_1582;
reg   [31:0] conv_weights_0_1_loa_reg_1587;
reg   [31:0] conv_weights_0_2_loa_reg_1592;
reg   [31:0] conv_weights_0_3_loa_reg_1597;
reg   [31:0] conv_weights_0_4_loa_reg_1602;
reg   [31:0] conv_weights_0_5_loa_reg_1607;
reg   [31:0] conv_weights_1_0_loa_reg_1612;
reg   [31:0] conv_weights_1_1_loa_reg_1617;
reg   [31:0] conv_weights_1_2_loa_reg_1622;
reg   [31:0] conv_weights_1_3_loa_reg_1627;
reg   [31:0] conv_weights_1_4_loa_reg_1632;
reg   [31:0] conv_weights_1_5_loa_reg_1637;
reg   [31:0] conv_weights_2_0_loa_reg_1642;
reg   [31:0] conv_weights_2_1_loa_reg_1647;
reg   [31:0] conv_weights_2_2_loa_reg_1652;
reg   [31:0] conv_weights_2_3_loa_reg_1657;
reg   [31:0] conv_weights_2_4_loa_reg_1662;
reg   [31:0] conv_weights_2_5_loa_reg_1667;
wire   [31:0] select_ln26_1_fu_1096_p3;
wire   [10:0] sub_ln26_1_fu_1122_p2;
reg   [10:0] sub_ln26_1_reg_1697;
wire   [6:0] add_ln14_fu_1144_p2;
reg   [6:0] add_ln14_reg_1715;
wire   [9:0] add_ln11_fu_1150_p2;
reg   [9:0] add_ln11_reg_1720;
reg   [31:0] input_load_9_reg_1745;
wire   [10:0] sub_ln26_2_fu_1214_p2;
reg   [10:0] sub_ln26_2_reg_1750;
reg   [31:0] input_load_11_reg_1768;
wire   [10:0] add_ln26_20_fu_1256_p2;
reg   [10:0] add_ln26_20_reg_1783;
wire   [10:0] add_ln26_21_fu_1261_p2;
reg   [10:0] add_ln26_21_reg_1788;
reg   [31:0] tmp_1_0_5_reg_1793;
reg   [31:0] input_load_13_reg_1798;
reg   [31:0] tmp_1_1_reg_1813;
reg   [31:0] input_load_15_reg_1818;
reg   [31:0] tmp_1_1_1_reg_1823;
reg   [31:0] input_load_17_reg_1828;
reg   [31:0] tmp_1_1_3_reg_1833;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state14_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg   [31:0] tmp_1_1_4_reg_1838;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state15_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
reg   [31:0] tmp_1_1_5_reg_1843;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state16_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
reg   [31:0] tmp_1_2_1_reg_1848;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state18_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_11001;
reg   [31:0] tmp_1_2_2_reg_1853;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state19_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_11001;
reg   [31:0] tmp_1_2_3_reg_1858;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state20_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
reg   [31:0] tmp_1_2_5_reg_1863;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state22_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_11001;
wire   [1:0] wr_fu_1274_p2;
reg   [1:0] wr_reg_1868;
wire   [6:0] select_ln14_fu_1279_p3;
reg   [6:0] select_ln14_reg_1874;
wire   [9:0] select_ln11_fu_1285_p3;
reg   [9:0] select_ln11_reg_1879;
reg   [10:0] conv_out_addr_reg_1884;
wire   [0:0] icmp_ln18_1_fu_1319_p2;
reg   [0:0] icmp_ln18_1_reg_1889;
reg   [31:0] conv_bias_load_reg_1898;
reg   [31:0] w_sum_3_2_5_reg_1903;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] w_sum_reg_1909;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage71_subdone;
wire    ap_block_pp0_stage9_subdone;
reg   [12:0] ap_phi_mux_indvar_flatten47_phi_fu_570_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_581_p4;
wire    ap_block_pp0_stage1;
reg   [9:0] ap_phi_mux_indvar_flatten14_phi_fu_593_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_605_p4;
reg   [6:0] ap_phi_mux_indvar_flatten_phi_fu_616_p4;
reg   [4:0] ap_phi_mux_f_0_phi_fu_628_p4;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_639_p4;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_650_p4;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln26_4_fu_883_p1;
wire   [63:0] zext_ln26_7_fu_1028_p1;
wire   [63:0] zext_ln26_8_fu_1039_p1;
wire   [63:0] zext_ln26_9_fu_1061_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln26_10_fu_1071_p1;
wire   [63:0] zext_ln26_11_fu_1081_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln26_12_fu_1091_p1;
wire   [63:0] zext_ln26_14_fu_1128_p1;
wire   [63:0] zext_ln26_15_fu_1139_p1;
wire   [63:0] zext_ln26_16_fu_1161_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln26_17_fu_1171_p1;
wire   [63:0] zext_ln26_18_fu_1181_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln26_19_fu_1191_p1;
wire   [63:0] zext_ln26_21_fu_1220_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln26_22_fu_1231_p1;
wire   [63:0] zext_ln26_23_fu_1241_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln26_24_fu_1251_p1;
wire   [63:0] zext_ln26_25_fu_1266_p1;
wire    ap_block_pp0_stage9;
wire   [63:0] zext_ln26_26_fu_1270_p1;
wire   [63:0] zext_ln35_4_fu_1314_p1;
wire   [63:0] zext_ln26_2_fu_1304_p1;
reg   [31:0] grp_fu_658_p0;
reg   [31:0] grp_fu_658_p1;
wire    ap_block_pp0_stage12;
wire    ap_block_pp0_stage16;
wire    ap_block_pp0_stage20;
wire    ap_CS_fsm_pp0_stage24;
wire    ap_block_pp0_stage24;
wire    ap_CS_fsm_pp0_stage28;
wire    ap_block_pp0_stage28;
wire    ap_CS_fsm_pp0_stage32;
wire    ap_block_pp0_stage32;
wire    ap_CS_fsm_pp0_stage36;
wire    ap_block_pp0_stage36;
wire    ap_CS_fsm_pp0_stage40;
wire    ap_block_pp0_stage40;
wire    ap_CS_fsm_pp0_stage44;
wire    ap_block_pp0_stage44;
wire    ap_CS_fsm_pp0_stage48;
wire    ap_block_pp0_stage48;
wire    ap_CS_fsm_pp0_stage52;
wire    ap_block_pp0_stage52;
wire    ap_CS_fsm_pp0_stage56;
wire    ap_block_pp0_stage56;
wire    ap_CS_fsm_pp0_stage60;
wire    ap_block_pp0_stage60;
wire    ap_CS_fsm_pp0_stage64;
wire    ap_block_pp0_stage64;
wire    ap_CS_fsm_pp0_stage68;
wire    ap_block_pp0_stage68;
reg   [31:0] grp_fu_662_p0;
reg   [31:0] grp_fu_662_p1;
wire    ap_block_pp0_stage10;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage13;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage17;
wire    ap_block_pp0_stage18;
wire    ap_block_pp0_stage19;
wire   [0:0] icmp_ln18_fu_771_p2;
wire   [0:0] xor_ln35_fu_765_p2;
wire   [0:0] icmp_ln14_fu_783_p2;
wire   [0:0] xor_ln35_1_fu_809_p2;
wire   [0:0] and_ln35_fu_777_p2;
wire   [0:0] or_ln35_1_fu_815_p2;
wire   [4:0] select_ln35_4_fu_801_p3;
wire   [0:0] and_ln35_2_fu_821_p2;
wire   [0:0] or_ln26_fu_833_p2;
wire   [4:0] f_fu_827_p2;
wire   [5:0] tmp_3_fu_865_p3;
wire   [6:0] zext_ln26_3_fu_873_p1;
wire   [6:0] zext_ln26_fu_861_p1;
wire   [6:0] add_ln26_6_fu_877_p2;
wire   [3:0] r_fu_905_p2;
wire   [3:0] add_ln26_3_fu_930_p2;
wire   [3:0] add_ln26_4_fu_945_p2;
wire   [3:0] select_ln35_2_fu_918_p3;
wire   [3:0] select_ln35_6_fu_950_p3;
wire   [3:0] add_ln26_5_fu_961_p2;
wire   [3:0] select_ln35_3_fu_924_p3;
wire   [3:0] select_ln35_7_fu_966_p3;
wire   [3:0] zext_ln18_fu_977_p1;
wire   [3:0] add_ln26_fu_980_p2;
wire   [3:0] mul_ln26_fu_990_p0;
wire   [7:0] mul_ln26_fu_990_p2;
wire   [7:0] add_ln26_7_fu_996_p2;
wire   [8:0] tmp_1_fu_1010_p3;
wire   [10:0] p_shl5_cast_fu_1002_p3;
wire   [10:0] zext_ln26_6_fu_1018_p1;
wire   [10:0] or_ln26_2_fu_1033_p2;
wire   [7:0] zext_ln35_2_fu_957_p1;
wire   [7:0] zext_ln35_3_fu_973_p1;
wire   [10:0] add_ln26_8_fu_1056_p2;
wire   [10:0] add_ln26_9_fu_1066_p2;
wire   [10:0] add_ln26_10_fu_1076_p2;
wire   [10:0] add_ln26_11_fu_1086_p2;
wire   [8:0] tmp_2_fu_1111_p3;
wire   [10:0] p_shl3_cast_fu_1104_p3;
wire   [10:0] zext_ln26_13_fu_1118_p1;
wire   [10:0] or_ln26_3_fu_1133_p2;
wire   [10:0] add_ln26_13_fu_1156_p2;
wire   [10:0] add_ln26_14_fu_1166_p2;
wire   [10:0] add_ln26_15_fu_1176_p2;
wire   [10:0] add_ln26_16_fu_1186_p2;
wire   [8:0] tmp_6_fu_1203_p3;
wire   [10:0] p_shl_cast_fu_1196_p3;
wire   [10:0] zext_ln26_20_fu_1210_p1;
wire   [10:0] or_ln26_4_fu_1225_p2;
wire   [10:0] add_ln26_18_fu_1236_p2;
wire   [10:0] add_ln26_19_fu_1246_p2;
wire    ap_block_pp0_stage71;
wire   [7:0] grp_fu_1373_p3;
wire   [11:0] tmp_2_cast_fu_1294_p3;
wire   [11:0] zext_ln26_1_fu_1301_p1;
wire   [11:0] add_ln35_1_fu_1308_p2;
wire   [31:0] bitcast_ln34_fu_1324_p1;
wire   [7:0] tmp_fu_1327_p4;
wire   [22:0] trunc_ln34_fu_1337_p1;
wire   [0:0] icmp_ln34_1_fu_1347_p2;
wire   [0:0] icmp_ln34_fu_1341_p2;
wire   [0:0] or_ln34_fu_1353_p2;
wire   [0:0] grp_fu_667_p2;
wire   [0:0] and_ln34_fu_1359_p2;
wire   [3:0] grp_fu_1373_p0;
wire   [4:0] grp_fu_1373_p1;
wire   [3:0] grp_fu_1373_p2;
wire    ap_block_pp0_stage8_00001;
wire    ap_CS_fsm_state84;
reg   [73:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_state23_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage21_11001;
wire    ap_block_state24_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage22_11001;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_state26_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_pp0_stage24_11001;
wire    ap_block_state27_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage25_11001;
wire    ap_block_state28_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_pp0_stage26_11001;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_state30_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_pp0_stage28_11001;
wire    ap_block_state31_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage29_11001;
wire    ap_block_state32_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_pp0_stage30_11001;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_state34_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_pp0_stage32_11001;
wire    ap_block_state35_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage33_11001;
wire    ap_block_state36_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_pp0_stage34_11001;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_state38_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_pp0_stage36_11001;
wire    ap_block_state39_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage37_11001;
wire    ap_block_state40_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_subdone;
wire    ap_block_pp0_stage38_11001;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_state42_pp0_stage40_iter0;
wire    ap_block_pp0_stage40_subdone;
wire    ap_block_pp0_stage40_11001;
wire    ap_block_state43_pp0_stage41_iter0;
wire    ap_block_pp0_stage41_subdone;
wire    ap_block_pp0_stage41_11001;
wire    ap_block_state44_pp0_stage42_iter0;
wire    ap_block_pp0_stage42_subdone;
wire    ap_block_pp0_stage42_11001;
wire    ap_block_pp0_stage43_subdone;
wire    ap_block_state46_pp0_stage44_iter0;
wire    ap_block_pp0_stage44_subdone;
wire    ap_block_pp0_stage44_11001;
wire    ap_block_state47_pp0_stage45_iter0;
wire    ap_block_pp0_stage45_subdone;
wire    ap_block_pp0_stage45_11001;
wire    ap_block_state48_pp0_stage46_iter0;
wire    ap_block_pp0_stage46_subdone;
wire    ap_block_pp0_stage46_11001;
wire    ap_block_pp0_stage47_subdone;
wire    ap_block_state50_pp0_stage48_iter0;
wire    ap_block_pp0_stage48_subdone;
wire    ap_block_pp0_stage48_11001;
wire    ap_block_state51_pp0_stage49_iter0;
wire    ap_block_pp0_stage49_subdone;
wire    ap_block_pp0_stage49_11001;
wire    ap_block_state52_pp0_stage50_iter0;
wire    ap_block_pp0_stage50_subdone;
wire    ap_block_pp0_stage50_11001;
wire    ap_block_pp0_stage51_subdone;
wire    ap_block_state54_pp0_stage52_iter0;
wire    ap_block_pp0_stage52_subdone;
wire    ap_block_pp0_stage52_11001;
wire    ap_block_state55_pp0_stage53_iter0;
wire    ap_block_pp0_stage53_subdone;
wire    ap_block_pp0_stage53_11001;
wire    ap_block_state56_pp0_stage54_iter0;
wire    ap_block_pp0_stage54_subdone;
wire    ap_block_pp0_stage54_11001;
wire    ap_block_pp0_stage55_subdone;
wire    ap_block_state58_pp0_stage56_iter0;
wire    ap_block_pp0_stage56_subdone;
wire    ap_block_pp0_stage56_11001;
wire    ap_block_state59_pp0_stage57_iter0;
wire    ap_block_pp0_stage57_subdone;
wire    ap_block_pp0_stage57_11001;
wire    ap_block_state60_pp0_stage58_iter0;
wire    ap_block_pp0_stage58_subdone;
wire    ap_block_pp0_stage58_11001;
wire    ap_block_pp0_stage59_subdone;
wire    ap_block_state62_pp0_stage60_iter0;
wire    ap_block_pp0_stage60_subdone;
wire    ap_block_pp0_stage60_11001;
wire    ap_block_state63_pp0_stage61_iter0;
wire    ap_block_pp0_stage61_subdone;
wire    ap_block_pp0_stage61_11001;
wire    ap_block_state64_pp0_stage62_iter0;
wire    ap_block_pp0_stage62_subdone;
wire    ap_block_pp0_stage62_11001;
wire    ap_block_pp0_stage63_subdone;
wire    ap_block_state66_pp0_stage64_iter0;
wire    ap_block_pp0_stage64_subdone;
wire    ap_block_pp0_stage64_11001;
wire    ap_block_state67_pp0_stage65_iter0;
wire    ap_block_pp0_stage65_subdone;
wire    ap_block_pp0_stage65_11001;
wire    ap_block_state68_pp0_stage66_iter0;
wire    ap_block_pp0_stage66_subdone;
wire    ap_block_pp0_stage66_11001;
wire    ap_block_pp0_stage67_subdone;
wire    ap_block_state70_pp0_stage68_iter0;
wire    ap_block_pp0_stage68_subdone;
wire    ap_block_pp0_stage68_11001;
wire    ap_block_state71_pp0_stage69_iter0;
wire    ap_block_pp0_stage69_subdone;
wire    ap_block_pp0_stage69_11001;
wire    ap_block_state72_pp0_stage70_iter0;
wire    ap_block_pp0_stage70_subdone;
wire    ap_block_pp0_stage70_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_1373_p00;
wire   [7:0] mul_ln26_fu_990_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 74'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_conv_weightsbkb #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_0_address0),
    .ce0(conv_weights_0_0_ce0),
    .q0(conv_weights_0_0_q0)
);

conv_conv_weightscud #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_1_address0),
    .ce0(conv_weights_0_1_ce0),
    .q0(conv_weights_0_1_q0)
);

conv_conv_weightsdEe #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_2_address0),
    .ce0(conv_weights_0_2_ce0),
    .q0(conv_weights_0_2_q0)
);

conv_conv_weightseOg #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_3_address0),
    .ce0(conv_weights_0_3_ce0),
    .q0(conv_weights_0_3_q0)
);

conv_conv_weightsfYi #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_4_address0),
    .ce0(conv_weights_0_4_ce0),
    .q0(conv_weights_0_4_q0)
);

conv_conv_weightsg8j #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_5_address0),
    .ce0(conv_weights_0_5_ce0),
    .q0(conv_weights_0_5_q0)
);

conv_conv_weightshbi #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_0_address0),
    .ce0(conv_weights_1_0_ce0),
    .q0(conv_weights_1_0_q0)
);

conv_conv_weightsibs #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_1_address0),
    .ce0(conv_weights_1_1_ce0),
    .q0(conv_weights_1_1_q0)
);

conv_conv_weightsjbC #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_2_address0),
    .ce0(conv_weights_1_2_ce0),
    .q0(conv_weights_1_2_q0)
);

conv_conv_weightskbM #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_3_address0),
    .ce0(conv_weights_1_3_ce0),
    .q0(conv_weights_1_3_q0)
);

conv_conv_weightslbW #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_4_address0),
    .ce0(conv_weights_1_4_ce0),
    .q0(conv_weights_1_4_q0)
);

conv_conv_weightsmb6 #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_5_address0),
    .ce0(conv_weights_1_5_ce0),
    .q0(conv_weights_1_5_q0)
);

conv_conv_weightsncg #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_0_address0),
    .ce0(conv_weights_2_0_ce0),
    .q0(conv_weights_2_0_q0)
);

conv_conv_weightsocq #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_1_address0),
    .ce0(conv_weights_2_1_ce0),
    .q0(conv_weights_2_1_q0)
);

conv_conv_weightspcA #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_2_address0),
    .ce0(conv_weights_2_2_ce0),
    .q0(conv_weights_2_2_q0)
);

conv_conv_weightsqcK #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_3_address0),
    .ce0(conv_weights_2_3_ce0),
    .q0(conv_weights_2_3_q0)
);

conv_conv_weightsrcU #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_4_address0),
    .ce0(conv_weights_2_4_ce0),
    .q0(conv_weights_2_4_q0)
);

conv_conv_weightssc4 #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_5_address0),
    .ce0(conv_weights_2_5_ce0),
    .q0(conv_weights_2_5_q0)
);

conv_fadd_32ns_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32tde_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_658_p0),
    .din1(grp_fu_658_p1),
    .ce(1'b1),
    .dout(grp_fu_658_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_662_p0),
    .din1(grp_fu_662_p1),
    .ce(1'b1),
    .dout(grp_fu_662_p2)
);

conv_fcmp_32ns_32vdy #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32vdy_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_658_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_667_p2)
);

conv_mac_muladd_4wdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4wdI_U4(
    .din0(grp_fu_1373_p0),
    .din1(grp_fu_1373_p1),
    .din2(grp_fu_1373_p2),
    .dout(grp_fu_1373_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage71_subdone) & (1'b1 == ap_CS_fsm_pp0_stage71)) | ((1'b0 == ap_block_pp0_stage9_subdone) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_601 <= select_ln35_5_reg_1542;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_601 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_624 <= select_ln26_2_reg_1439;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_624 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten14_reg_589 <= select_ln11_reg_1879;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten14_reg_589 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten47_reg_566 <= add_ln8_reg_1395;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten47_reg_566 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_612 <= select_ln14_reg_1874;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_612 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_1391_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        r_0_reg_577 <= select_ln35_1_reg_1536;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_577 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_678 <= input_r_q0;
    end else if (((icmp_ln8_reg_1391 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        reg_678 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            reg_689 <= input_r_q0;
        end else if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            reg_689 <= input_r_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            reg_700 <= input_r_q0;
        end else if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            reg_700 <= input_r_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
            reg_711 <= input_r_q0;
        end else if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            reg_711 <= input_r_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln8_reg_1391_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        w_sum_0_reg_646 <= w_sum_3_2_5_reg_1903;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_sum_0_reg_646 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wr_0_reg_635 <= wr_reg_1868;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        wr_0_reg_635 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln11_reg_1400 == 1'd0) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln11_reg_1720 <= add_ln11_fu_1150_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (or_ln35_reg_1423 == 1'd0) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        add_ln14_reg_1715 <= add_ln14_fu_1144_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln26_12_reg_1570 <= add_ln26_12_fu_1044_p2;
        add_ln26_17_reg_1576 <= add_ln26_17_fu_1050_p2;
        conv_weights_0_0_loa_reg_1582 <= conv_weights_0_0_q0;
        conv_weights_0_1_loa_reg_1587 <= conv_weights_0_1_q0;
        conv_weights_0_2_loa_reg_1592 <= conv_weights_0_2_q0;
        conv_weights_0_3_loa_reg_1597 <= conv_weights_0_3_q0;
        conv_weights_0_4_loa_reg_1602 <= conv_weights_0_4_q0;
        conv_weights_0_5_loa_reg_1607 <= conv_weights_0_5_q0;
        conv_weights_1_0_loa_reg_1612 <= conv_weights_1_0_q0;
        conv_weights_1_1_loa_reg_1617 <= conv_weights_1_1_q0;
        conv_weights_1_2_loa_reg_1622 <= conv_weights_1_2_q0;
        conv_weights_1_3_loa_reg_1627 <= conv_weights_1_3_q0;
        conv_weights_1_4_loa_reg_1632 <= conv_weights_1_4_q0;
        conv_weights_1_5_loa_reg_1637 <= conv_weights_1_5_q0;
        conv_weights_2_0_loa_reg_1642 <= conv_weights_2_0_q0;
        conv_weights_2_1_loa_reg_1647 <= conv_weights_2_1_q0;
        conv_weights_2_2_loa_reg_1652 <= conv_weights_2_2_q0;
        conv_weights_2_3_loa_reg_1657 <= conv_weights_2_3_q0;
        conv_weights_2_4_loa_reg_1662 <= conv_weights_2_4_q0;
        conv_weights_2_5_loa_reg_1667 <= conv_weights_2_5_q0;
        sub_ln26_reg_1552[10 : 1] <= sub_ln26_fu_1022_p2[10 : 1];
        zext_ln35_1_reg_1547[3 : 0] <= zext_ln35_1_fu_941_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        add_ln26_20_reg_1783[10 : 1] <= add_ln26_20_fu_1256_p2[10 : 1];
        add_ln26_21_reg_1788[10 : 1] <= add_ln26_21_fu_1261_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln26_2_reg_1386 <= add_ln26_2_fu_733_p2;
        c_reg_1381 <= c_fu_727_p2;
        icmp_ln8_reg_1391 <= icmp_ln8_fu_739_p2;
        icmp_ln8_reg_1391_pp0_iter1_reg <= icmp_ln8_reg_1391;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln8_reg_1395 <= add_ln8_fu_745_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_739_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln35_1_reg_1416 <= and_ln35_1_fu_789_p2;
        icmp_ln11_reg_1400 <= icmp_ln11_fu_751_p2;
        or_ln26_1_reg_1428 <= or_ln26_1_fu_839_p2;
        or_ln35_reg_1423 <= or_ln35_fu_795_p2;
        select_ln26_reg_1433 <= select_ln26_fu_845_p3;
        select_ln35_reg_1408 <= select_ln35_fu_757_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_1_reg_1889 == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_bias_load_reg_1898 <= conv_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_addr_reg_1884 <= zext_ln35_4_fu_1314_p1;
        icmp_ln18_1_reg_1889 <= icmp_ln18_1_fu_1319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_11_reg_1768 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_13_reg_1798 <= input_r_q1;
        tmp_1_0_5_reg_1793 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_15_reg_1818 <= input_r_q1;
        tmp_1_1_reg_1813 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_17_reg_1828 <= input_r_q1;
        tmp_1_1_1_reg_1823 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_load_9_reg_1745 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln8_reg_1391 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_673 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_684 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_695 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_706 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage19_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_717 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage71_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage67_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage67) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage63_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage63) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage59_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage59) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage55_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage55) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage51_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage51) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage47_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage47) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage43_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage43) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage39_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage35_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage31_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage27_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage23_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage19_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_722 <= grp_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage71_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage71) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln11_reg_1879 <= select_ln11_fu_1285_p3;
        select_ln14_reg_1874 <= select_ln14_fu_1279_p3;
        wr_reg_1868 <= wr_fu_1274_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_739_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln26_2_reg_1439 <= select_ln26_2_fu_853_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln35_1_reg_1536 <= select_ln35_1_fu_911_p3;
        select_ln35_5_reg_1542 <= select_ln35_5_fu_935_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        sub_ln26_1_reg_1697[10 : 1] <= sub_ln26_1_fu_1122_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        sub_ln26_2_reg_1750[10 : 1] <= sub_ln26_2_fu_1214_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_1_3_reg_1833 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_1_4_reg_1838 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_1_5_reg_1843 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage16_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_2_1_reg_1848 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage17_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_2_2_reg_1853 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage18_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_2_3_reg_1858 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage20_11001) & (icmp_ln8_reg_1391 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_1_2_5_reg_1863 <= grp_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln8_reg_1391_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        w_sum_3_2_5_reg_1903 <= grp_fu_658_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_1_reg_1889 == 1'd1) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        w_sum_reg_1909 <= grp_fu_658_p2;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_739_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_605_p4 = select_ln35_5_reg_1542;
    end else begin
        ap_phi_mux_c_0_phi_fu_605_p4 = c_0_reg_601;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_628_p4 = select_ln26_2_reg_1439;
    end else begin
        ap_phi_mux_f_0_phi_fu_628_p4 = f_0_reg_624;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten14_phi_fu_593_p4 = select_ln11_reg_1879;
    end else begin
        ap_phi_mux_indvar_flatten14_phi_fu_593_p4 = indvar_flatten14_reg_589;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten47_phi_fu_570_p4 = add_ln8_reg_1395;
    end else begin
        ap_phi_mux_indvar_flatten47_phi_fu_570_p4 = indvar_flatten47_reg_566;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_616_p4 = select_ln14_reg_1874;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_616_p4 = indvar_flatten_reg_612;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (icmp_ln8_reg_1391_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_r_0_phi_fu_581_p4 = select_ln35_1_reg_1536;
    end else begin
        ap_phi_mux_r_0_phi_fu_581_p4 = r_0_reg_577;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (icmp_ln8_reg_1391_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        ap_phi_mux_w_sum_0_phi_fu_650_p4 = w_sum_3_2_5_reg_1903;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_650_p4 = w_sum_0_reg_646;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln8_reg_1391 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_639_p4 = wr_reg_1868;
    end else begin
        ap_phi_mux_wr_0_phi_fu_639_p4 = wr_0_reg_635;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state84)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_1_reg_1889 == 1'd1) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_1_ce0 = 1'b1;
    end else begin
        conv_weights_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_2_ce0 = 1'b1;
    end else begin
        conv_weights_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_3_ce0 = 1'b1;
    end else begin
        conv_weights_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_4_ce0 = 1'b1;
    end else begin
        conv_weights_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_5_ce0 = 1'b1;
    end else begin
        conv_weights_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_2_ce0 = 1'b1;
    end else begin
        conv_weights_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_3_ce0 = 1'b1;
    end else begin
        conv_weights_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_4_ce0 = 1'b1;
    end else begin
        conv_weights_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_5_ce0 = 1'b1;
    end else begin
        conv_weights_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_1_ce0 = 1'b1;
    end else begin
        conv_weights_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_3_ce0 = 1'b1;
    end else begin
        conv_weights_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_4_ce0 = 1'b1;
    end else begin
        conv_weights_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_5_ce0 = 1'b1;
    end else begin
        conv_weights_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_658_p0 = w_sum_3_2_5_reg_1903;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_CS_fsm_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage20)) | ((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage16)) | ((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage68) & (1'b0 == ap_block_pp0_stage68)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage64) & (1'b0 == ap_block_pp0_stage64)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage60) & (1'b0 == ap_block_pp0_stage60)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56) & (1'b0 == ap_block_pp0_stage56)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52) & (1'b0 == ap_block_pp0_stage52)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48) & (1'b0 == ap_block_pp0_stage48)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44) & (1'b0 == ap_block_pp0_stage44)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40) & (1'b0 == ap_block_pp0_stage40)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24)))) begin
        grp_fu_658_p0 = reg_722;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_658_p0 = select_ln26_1_fu_1096_p3;
    end else begin
        grp_fu_658_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
        grp_fu_658_p1 = conv_bias_load_reg_1898;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_658_p1 = tmp_1_2_5_reg_1863;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage64) & (1'b0 == ap_block_pp0_stage64))) begin
        grp_fu_658_p1 = tmp_1_2_3_reg_1858;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage60) & (1'b0 == ap_block_pp0_stage60))) begin
        grp_fu_658_p1 = tmp_1_2_2_reg_1853;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage56) & (1'b0 == ap_block_pp0_stage56))) begin
        grp_fu_658_p1 = tmp_1_2_1_reg_1848;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage48) & (1'b0 == ap_block_pp0_stage48))) begin
        grp_fu_658_p1 = tmp_1_1_5_reg_1843;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage44) & (1'b0 == ap_block_pp0_stage44))) begin
        grp_fu_658_p1 = tmp_1_1_4_reg_1838;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage40) & (1'b0 == ap_block_pp0_stage40))) begin
        grp_fu_658_p1 = tmp_1_1_3_reg_1833;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage32) & (1'b0 == ap_block_pp0_stage32))) begin
        grp_fu_658_p1 = tmp_1_1_1_reg_1823;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage28) & (1'b0 == ap_block_pp0_stage28))) begin
        grp_fu_658_p1 = tmp_1_1_reg_1813;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage24) & (1'b0 == ap_block_pp0_stage24))) begin
        grp_fu_658_p1 = tmp_1_0_5_reg_1793;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage16)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage68) & (1'b0 == ap_block_pp0_stage68)))) begin
        grp_fu_658_p1 = reg_717;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage52) & (1'b0 == ap_block_pp0_stage52)))) begin
        grp_fu_658_p1 = reg_706;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage36) & (1'b0 == ap_block_pp0_stage36)))) begin
        grp_fu_658_p1 = reg_695;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage20) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage20)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_658_p1 = reg_684;
    end else begin
        grp_fu_658_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage19) & (1'b0 == ap_block_pp0_stage19))) begin
            grp_fu_662_p0 = conv_weights_2_5_loa_reg_1667;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage18) & (1'b0 == ap_block_pp0_stage18))) begin
            grp_fu_662_p0 = conv_weights_2_4_loa_reg_1662;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage17) & (1'b0 == ap_block_pp0_stage17))) begin
            grp_fu_662_p0 = conv_weights_2_3_loa_reg_1657;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage16) & (1'b0 == ap_block_pp0_stage16))) begin
            grp_fu_662_p0 = conv_weights_2_2_loa_reg_1652;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15))) begin
            grp_fu_662_p0 = conv_weights_2_1_loa_reg_1647;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage14) & (1'b0 == ap_block_pp0_stage14))) begin
            grp_fu_662_p0 = conv_weights_2_0_loa_reg_1642;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (1'b0 == ap_block_pp0_stage13))) begin
            grp_fu_662_p0 = conv_weights_1_5_loa_reg_1637;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage12) & (1'b0 == ap_block_pp0_stage12))) begin
            grp_fu_662_p0 = conv_weights_1_4_loa_reg_1632;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (1'b0 == ap_block_pp0_stage11))) begin
            grp_fu_662_p0 = conv_weights_1_3_loa_reg_1627;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage10) & (1'b0 == ap_block_pp0_stage10))) begin
            grp_fu_662_p0 = conv_weights_1_2_loa_reg_1622;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            grp_fu_662_p0 = conv_weights_1_1_loa_reg_1617;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            grp_fu_662_p0 = conv_weights_1_0_loa_reg_1612;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            grp_fu_662_p0 = conv_weights_0_5_loa_reg_1607;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            grp_fu_662_p0 = conv_weights_0_4_loa_reg_1602;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            grp_fu_662_p0 = conv_weights_0_3_loa_reg_1597;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_662_p0 = conv_weights_0_2_loa_reg_1592;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            grp_fu_662_p0 = conv_weights_0_1_loa_reg_1587;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_662_p0 = conv_weights_0_0_loa_reg_1582;
        end else begin
            grp_fu_662_p0 = 'bx;
        end
    end else begin
        grp_fu_662_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage19))) begin
        grp_fu_662_p1 = input_load_17_reg_1828;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage17) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage17))) begin
        grp_fu_662_p1 = input_load_15_reg_1818;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15))) begin
        grp_fu_662_p1 = input_load_13_reg_1798;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13))) begin
        grp_fu_662_p1 = input_load_11_reg_1768;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11))) begin
        grp_fu_662_p1 = input_load_9_reg_1745;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage18)) | ((1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9)))) begin
        grp_fu_662_p1 = reg_711;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7)))) begin
        grp_fu_662_p1 = reg_700;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5)))) begin
        grp_fu_662_p1 = reg_689;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage16) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage16)) | ((1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_662_p1 = reg_673;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3)))) begin
        grp_fu_662_p1 = reg_678;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_662_p1 = input_r_q0;
    end else begin
        grp_fu_662_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            input_r_address0 = zext_ln26_25_fu_1266_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            input_r_address0 = zext_ln26_23_fu_1241_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            input_r_address0 = zext_ln26_21_fu_1220_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            input_r_address0 = zext_ln26_18_fu_1181_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            input_r_address0 = zext_ln26_16_fu_1161_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address0 = zext_ln26_14_fu_1128_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            input_r_address0 = zext_ln26_11_fu_1081_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address0 = zext_ln26_9_fu_1061_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln26_7_fu_1028_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage9) & (1'b0 == ap_block_pp0_stage9))) begin
            input_r_address1 = zext_ln26_26_fu_1270_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage8) & (1'b0 == ap_block_pp0_stage8))) begin
            input_r_address1 = zext_ln26_24_fu_1251_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage7) & (1'b0 == ap_block_pp0_stage7))) begin
            input_r_address1 = zext_ln26_22_fu_1231_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage6) & (1'b0 == ap_block_pp0_stage6))) begin
            input_r_address1 = zext_ln26_19_fu_1191_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5))) begin
            input_r_address1 = zext_ln26_17_fu_1171_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            input_r_address1 = zext_ln26_15_fu_1139_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3))) begin
            input_r_address1 = zext_ln26_12_fu_1091_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln26_10_fu_1071_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln26_8_fu_1039_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln8_fu_739_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln8_fu_739_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((~((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) & (1'b0 == ap_block_pp0_stage9_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else if (((1'b0 == ap_block_pp0_stage9_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_pp0_stage40 : begin
            if ((1'b0 == ap_block_pp0_stage40_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage40;
            end
        end
        ap_ST_fsm_pp0_stage41 : begin
            if ((1'b0 == ap_block_pp0_stage41_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage41;
            end
        end
        ap_ST_fsm_pp0_stage42 : begin
            if ((1'b0 == ap_block_pp0_stage42_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage42;
            end
        end
        ap_ST_fsm_pp0_stage43 : begin
            if ((1'b0 == ap_block_pp0_stage43_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage43;
            end
        end
        ap_ST_fsm_pp0_stage44 : begin
            if ((1'b0 == ap_block_pp0_stage44_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage44;
            end
        end
        ap_ST_fsm_pp0_stage45 : begin
            if ((1'b0 == ap_block_pp0_stage45_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage45;
            end
        end
        ap_ST_fsm_pp0_stage46 : begin
            if ((1'b0 == ap_block_pp0_stage46_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage46;
            end
        end
        ap_ST_fsm_pp0_stage47 : begin
            if ((1'b0 == ap_block_pp0_stage47_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage47;
            end
        end
        ap_ST_fsm_pp0_stage48 : begin
            if ((1'b0 == ap_block_pp0_stage48_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage48;
            end
        end
        ap_ST_fsm_pp0_stage49 : begin
            if ((1'b0 == ap_block_pp0_stage49_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage49;
            end
        end
        ap_ST_fsm_pp0_stage50 : begin
            if ((1'b0 == ap_block_pp0_stage50_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage50;
            end
        end
        ap_ST_fsm_pp0_stage51 : begin
            if ((1'b0 == ap_block_pp0_stage51_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage51;
            end
        end
        ap_ST_fsm_pp0_stage52 : begin
            if ((1'b0 == ap_block_pp0_stage52_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage52;
            end
        end
        ap_ST_fsm_pp0_stage53 : begin
            if ((1'b0 == ap_block_pp0_stage53_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage53;
            end
        end
        ap_ST_fsm_pp0_stage54 : begin
            if ((1'b0 == ap_block_pp0_stage54_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage54;
            end
        end
        ap_ST_fsm_pp0_stage55 : begin
            if ((1'b0 == ap_block_pp0_stage55_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage55;
            end
        end
        ap_ST_fsm_pp0_stage56 : begin
            if ((1'b0 == ap_block_pp0_stage56_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage56;
            end
        end
        ap_ST_fsm_pp0_stage57 : begin
            if ((1'b0 == ap_block_pp0_stage57_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage57;
            end
        end
        ap_ST_fsm_pp0_stage58 : begin
            if ((1'b0 == ap_block_pp0_stage58_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage58;
            end
        end
        ap_ST_fsm_pp0_stage59 : begin
            if ((1'b0 == ap_block_pp0_stage59_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage59;
            end
        end
        ap_ST_fsm_pp0_stage60 : begin
            if ((1'b0 == ap_block_pp0_stage60_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage60;
            end
        end
        ap_ST_fsm_pp0_stage61 : begin
            if ((1'b0 == ap_block_pp0_stage61_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage61;
            end
        end
        ap_ST_fsm_pp0_stage62 : begin
            if ((1'b0 == ap_block_pp0_stage62_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage62;
            end
        end
        ap_ST_fsm_pp0_stage63 : begin
            if ((1'b0 == ap_block_pp0_stage63_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage63;
            end
        end
        ap_ST_fsm_pp0_stage64 : begin
            if ((1'b0 == ap_block_pp0_stage64_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage64;
            end
        end
        ap_ST_fsm_pp0_stage65 : begin
            if ((1'b0 == ap_block_pp0_stage65_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage65;
            end
        end
        ap_ST_fsm_pp0_stage66 : begin
            if ((1'b0 == ap_block_pp0_stage66_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage66;
            end
        end
        ap_ST_fsm_pp0_stage67 : begin
            if ((1'b0 == ap_block_pp0_stage67_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage67;
            end
        end
        ap_ST_fsm_pp0_stage68 : begin
            if ((1'b0 == ap_block_pp0_stage68_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage68;
            end
        end
        ap_ST_fsm_pp0_stage69 : begin
            if ((1'b0 == ap_block_pp0_stage69_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage69;
            end
        end
        ap_ST_fsm_pp0_stage70 : begin
            if ((1'b0 == ap_block_pp0_stage70_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage70;
            end
        end
        ap_ST_fsm_pp0_stage71 : begin
            if ((1'b0 == ap_block_pp0_stage71_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage71;
            end
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_1150_p2 = (indvar_flatten14_reg_589 + 10'd1);

assign add_ln14_fu_1144_p2 = (indvar_flatten_reg_612 + 7'd1);

assign add_ln26_10_fu_1076_p2 = (sub_ln26_reg_1552 + 11'd4);

assign add_ln26_11_fu_1086_p2 = (sub_ln26_reg_1552 + 11'd5);

assign add_ln26_12_fu_1044_p2 = (mul_ln26_fu_990_p2 + zext_ln35_2_fu_957_p1);

assign add_ln26_13_fu_1156_p2 = (sub_ln26_1_reg_1697 + 11'd2);

assign add_ln26_14_fu_1166_p2 = (sub_ln26_1_reg_1697 + 11'd3);

assign add_ln26_15_fu_1176_p2 = (sub_ln26_1_reg_1697 + 11'd4);

assign add_ln26_16_fu_1186_p2 = (sub_ln26_1_reg_1697 + 11'd5);

assign add_ln26_17_fu_1050_p2 = (mul_ln26_fu_990_p2 + zext_ln35_3_fu_973_p1);

assign add_ln26_18_fu_1236_p2 = (sub_ln26_2_reg_1750 + 11'd2);

assign add_ln26_19_fu_1246_p2 = (sub_ln26_2_reg_1750 + 11'd3);

assign add_ln26_20_fu_1256_p2 = (sub_ln26_2_reg_1750 + 11'd4);

assign add_ln26_21_fu_1261_p2 = (sub_ln26_2_reg_1750 + 11'd5);

assign add_ln26_2_fu_733_p2 = (ap_phi_mux_c_0_phi_fu_605_p4 + 4'd2);

assign add_ln26_3_fu_930_p2 = (select_ln35_reg_1408 + 4'd1);

assign add_ln26_4_fu_945_p2 = (select_ln35_reg_1408 + 4'd2);

assign add_ln26_5_fu_961_p2 = (select_ln35_reg_1408 + 4'd3);

assign add_ln26_6_fu_877_p2 = (zext_ln26_3_fu_873_p1 + zext_ln26_fu_861_p1);

assign add_ln26_7_fu_996_p2 = (mul_ln26_fu_990_p2 + zext_ln35_1_fu_941_p1);

assign add_ln26_8_fu_1056_p2 = (sub_ln26_reg_1552 + 11'd2);

assign add_ln26_9_fu_1066_p2 = (sub_ln26_reg_1552 + 11'd3);

assign add_ln26_fu_980_p2 = (zext_ln18_fu_977_p1 + select_ln35_1_fu_911_p3);

assign add_ln35_1_fu_1308_p2 = (tmp_2_cast_fu_1294_p3 + zext_ln26_1_fu_1301_p1);

assign add_ln8_fu_745_p2 = (ap_phi_mux_indvar_flatten47_phi_fu_570_p4 + 13'd1);

assign and_ln34_fu_1359_p2 = (or_ln34_fu_1353_p2 & grp_fu_667_p2);

assign and_ln35_1_fu_789_p2 = (xor_ln35_fu_765_p2 & icmp_ln14_fu_783_p2);

assign and_ln35_2_fu_821_p2 = (or_ln35_1_fu_815_p2 & and_ln35_fu_777_p2);

assign and_ln35_fu_777_p2 = (xor_ln35_fu_765_p2 & icmp_ln18_fu_771_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage24 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage28 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage32 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage36 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage40 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp0_stage43 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_pp0_stage44 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_pp0_stage47 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_pp0_stage48 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage51 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_pp0_stage52 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_pp0_stage55 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_pp0_stage56 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_pp0_stage59 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage60 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_pp0_stage63 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_pp0_stage64 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_pp0_stage67 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_pp0_stage68 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage71 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd73];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage40_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage41_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage42_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage43_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage44_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage45_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage46_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage47_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage48_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage49_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage50_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage51_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage52_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage53_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage54_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage55_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage56_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage57_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage58_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage59_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage60_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage61_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage62_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage63_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage64_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage65_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage66_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage67_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage68_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage69_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage70_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage71_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage40_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage41_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage42_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage43_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage44_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage45_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage46_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage47_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage48_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage49_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage50_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage51_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage52_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage53_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage54_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage55_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage56_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage57_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage58_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage59_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage60_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage61_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage62_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage63_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage64_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage65_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage66_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage67_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage68_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage69_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage70_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage71_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state81_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln34_fu_1324_p1 = w_sum_reg_1909;

assign c_fu_727_p2 = (ap_phi_mux_c_0_phi_fu_605_p4 + 4'd1);

assign conv_bias_address0 = zext_ln26_2_fu_1304_p1;

assign conv_out_address0 = conv_out_addr_reg_1884;

assign conv_out_d0 = ((and_ln34_fu_1359_p2[0:0] === 1'b1) ? w_sum_reg_1909 : 32'd0);

assign conv_weights_0_0_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_0_1_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_0_2_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_0_3_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_0_4_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_0_5_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_1_0_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_1_1_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_1_2_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_1_3_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_1_4_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_1_5_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_2_0_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_2_1_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_2_2_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_2_3_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_2_4_address0 = zext_ln26_4_fu_883_p1;

assign conv_weights_2_5_address0 = zext_ln26_4_fu_883_p1;

assign f_fu_827_p2 = (select_ln35_4_fu_801_p3 + 5'd1);

assign grp_fu_1373_p0 = grp_fu_1373_p00;

assign grp_fu_1373_p00 = select_ln35_1_reg_1536;

assign grp_fu_1373_p1 = 8'd11;

assign grp_fu_1373_p2 = zext_ln35_1_reg_1547;

assign icmp_ln11_fu_751_p2 = ((ap_phi_mux_indvar_flatten14_phi_fu_593_p4 == 10'd528) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_783_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_616_p4 == 7'd48) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_1319_p2 = ((wr_reg_1868 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_771_p2 = ((ap_phi_mux_wr_0_phi_fu_639_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_1347_p2 = ((trunc_ln34_fu_1337_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_1341_p2 = ((tmp_fu_1327_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_739_p2 = ((ap_phi_mux_indvar_flatten47_phi_fu_570_p4 == 13'd5808) ? 1'b1 : 1'b0);

assign mul_ln26_fu_990_p0 = mul_ln26_fu_990_p00;

assign mul_ln26_fu_990_p00 = add_ln26_fu_980_p2;

assign mul_ln26_fu_990_p2 = (mul_ln26_fu_990_p0 * $signed('hD));

assign or_ln26_1_fu_839_p2 = (or_ln26_fu_833_p2 | icmp_ln11_fu_751_p2);

assign or_ln26_2_fu_1033_p2 = (sub_ln26_fu_1022_p2 | 11'd1);

assign or_ln26_3_fu_1133_p2 = (sub_ln26_1_fu_1122_p2 | 11'd1);

assign or_ln26_4_fu_1225_p2 = (sub_ln26_2_fu_1214_p2 | 11'd1);

assign or_ln26_fu_833_p2 = (and_ln35_2_fu_821_p2 | and_ln35_1_fu_789_p2);

assign or_ln34_fu_1353_p2 = (icmp_ln34_fu_1341_p2 | icmp_ln34_1_fu_1347_p2);

assign or_ln35_1_fu_815_p2 = (xor_ln35_1_fu_809_p2 | icmp_ln11_fu_751_p2);

assign or_ln35_fu_795_p2 = (icmp_ln11_fu_751_p2 | and_ln35_1_fu_789_p2);

assign p_shl3_cast_fu_1104_p3 = {{add_ln26_12_reg_1570}, {3'd0}};

assign p_shl5_cast_fu_1002_p3 = {{add_ln26_7_fu_996_p2}, {3'd0}};

assign p_shl_cast_fu_1196_p3 = {{add_ln26_17_reg_1576}, {3'd0}};

assign r_fu_905_p2 = (ap_phi_mux_r_0_phi_fu_581_p4 + 4'd1);

assign select_ln11_fu_1285_p3 = ((icmp_ln11_reg_1400[0:0] === 1'b1) ? 10'd1 : add_ln11_reg_1720);

assign select_ln14_fu_1279_p3 = ((or_ln35_reg_1423[0:0] === 1'b1) ? 7'd1 : add_ln14_reg_1715);

assign select_ln26_1_fu_1096_p3 = ((or_ln26_1_reg_1428[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_w_sum_0_phi_fu_650_p4);

assign select_ln26_2_fu_853_p3 = ((and_ln35_2_fu_821_p2[0:0] === 1'b1) ? f_fu_827_p2 : select_ln35_4_fu_801_p3);

assign select_ln26_fu_845_p3 = ((or_ln26_1_fu_839_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wr_0_phi_fu_639_p4);

assign select_ln35_1_fu_911_p3 = ((icmp_ln11_reg_1400[0:0] === 1'b1) ? r_fu_905_p2 : ap_phi_mux_r_0_phi_fu_581_p4);

assign select_ln35_2_fu_918_p3 = ((icmp_ln11_reg_1400[0:0] === 1'b1) ? 4'd1 : c_reg_1381);

assign select_ln35_3_fu_924_p3 = ((icmp_ln11_reg_1400[0:0] === 1'b1) ? 4'd2 : add_ln26_2_reg_1386);

assign select_ln35_4_fu_801_p3 = ((or_ln35_fu_795_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_f_0_phi_fu_628_p4);

assign select_ln35_5_fu_935_p3 = ((and_ln35_1_reg_1416[0:0] === 1'b1) ? add_ln26_3_fu_930_p2 : select_ln35_reg_1408);

assign select_ln35_6_fu_950_p3 = ((and_ln35_1_reg_1416[0:0] === 1'b1) ? add_ln26_4_fu_945_p2 : select_ln35_2_fu_918_p3);

assign select_ln35_7_fu_966_p3 = ((and_ln35_1_reg_1416[0:0] === 1'b1) ? add_ln26_5_fu_961_p2 : select_ln35_3_fu_924_p3);

assign select_ln35_fu_757_p3 = ((icmp_ln11_fu_751_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_605_p4);

assign sub_ln26_1_fu_1122_p2 = (p_shl3_cast_fu_1104_p3 - zext_ln26_13_fu_1118_p1);

assign sub_ln26_2_fu_1214_p2 = (p_shl_cast_fu_1196_p3 - zext_ln26_20_fu_1210_p1);

assign sub_ln26_fu_1022_p2 = (p_shl5_cast_fu_1002_p3 - zext_ln26_6_fu_1018_p1);

assign tmp_1_fu_1010_p3 = {{add_ln26_7_fu_996_p2}, {1'd0}};

assign tmp_2_cast_fu_1294_p3 = {{grp_fu_1373_p3}, {4'd0}};

assign tmp_2_fu_1111_p3 = {{add_ln26_12_reg_1570}, {1'd0}};

assign tmp_3_fu_865_p3 = {{select_ln26_fu_845_p3}, {4'd0}};

assign tmp_6_fu_1203_p3 = {{add_ln26_17_reg_1576}, {1'd0}};

assign tmp_fu_1327_p4 = {{bitcast_ln34_fu_1324_p1[30:23]}};

assign trunc_ln34_fu_1337_p1 = bitcast_ln34_fu_1324_p1[22:0];

assign wr_fu_1274_p2 = (select_ln26_reg_1433 + 2'd1);

assign xor_ln35_1_fu_809_p2 = (icmp_ln14_fu_783_p2 ^ 1'd1);

assign xor_ln35_fu_765_p2 = (icmp_ln11_fu_751_p2 ^ 1'd1);

assign zext_ln18_fu_977_p1 = select_ln26_reg_1433;

assign zext_ln26_10_fu_1071_p1 = add_ln26_9_fu_1066_p2;

assign zext_ln26_11_fu_1081_p1 = add_ln26_10_fu_1076_p2;

assign zext_ln26_12_fu_1091_p1 = add_ln26_11_fu_1086_p2;

assign zext_ln26_13_fu_1118_p1 = tmp_2_fu_1111_p3;

assign zext_ln26_14_fu_1128_p1 = sub_ln26_1_fu_1122_p2;

assign zext_ln26_15_fu_1139_p1 = or_ln26_3_fu_1133_p2;

assign zext_ln26_16_fu_1161_p1 = add_ln26_13_fu_1156_p2;

assign zext_ln26_17_fu_1171_p1 = add_ln26_14_fu_1166_p2;

assign zext_ln26_18_fu_1181_p1 = add_ln26_15_fu_1176_p2;

assign zext_ln26_19_fu_1191_p1 = add_ln26_16_fu_1186_p2;

assign zext_ln26_1_fu_1301_p1 = select_ln26_2_reg_1439;

assign zext_ln26_20_fu_1210_p1 = tmp_6_fu_1203_p3;

assign zext_ln26_21_fu_1220_p1 = sub_ln26_2_fu_1214_p2;

assign zext_ln26_22_fu_1231_p1 = or_ln26_4_fu_1225_p2;

assign zext_ln26_23_fu_1241_p1 = add_ln26_18_fu_1236_p2;

assign zext_ln26_24_fu_1251_p1 = add_ln26_19_fu_1246_p2;

assign zext_ln26_25_fu_1266_p1 = add_ln26_20_reg_1783;

assign zext_ln26_26_fu_1270_p1 = add_ln26_21_reg_1788;

assign zext_ln26_2_fu_1304_p1 = select_ln26_2_reg_1439;

assign zext_ln26_3_fu_873_p1 = tmp_3_fu_865_p3;

assign zext_ln26_4_fu_883_p1 = add_ln26_6_fu_877_p2;

assign zext_ln26_6_fu_1018_p1 = tmp_1_fu_1010_p3;

assign zext_ln26_7_fu_1028_p1 = sub_ln26_fu_1022_p2;

assign zext_ln26_8_fu_1039_p1 = or_ln26_2_fu_1033_p2;

assign zext_ln26_9_fu_1061_p1 = add_ln26_8_fu_1056_p2;

assign zext_ln26_fu_861_p1 = select_ln26_2_fu_853_p3;

assign zext_ln35_1_fu_941_p1 = select_ln35_5_fu_935_p3;

assign zext_ln35_2_fu_957_p1 = select_ln35_6_fu_950_p3;

assign zext_ln35_3_fu_973_p1 = select_ln35_7_fu_966_p3;

assign zext_ln35_4_fu_1314_p1 = add_ln35_1_fu_1308_p2;

always @ (posedge ap_clk) begin
    zext_ln35_1_reg_1547[7:4] <= 4'b0000;
    sub_ln26_reg_1552[0] <= 1'b0;
    sub_ln26_1_reg_1697[0] <= 1'b0;
    sub_ln26_2_reg_1750[0] <= 1'b0;
    add_ln26_20_reg_1783[0] <= 1'b0;
    add_ln26_21_reg_1788[0] <= 1'b1;
end

endmodule //conv
