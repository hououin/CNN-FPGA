// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=389382,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=841,HLS_SYN_LUT=1755,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_input_address1,
        conv_input_ce1,
        conv_input_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_pp0_stage0 = 8'd2;
parameter    ap_ST_fsm_pp0_stage1 = 8'd4;
parameter    ap_ST_fsm_pp0_stage2 = 8'd8;
parameter    ap_ST_fsm_pp0_stage3 = 8'd16;
parameter    ap_ST_fsm_pp0_stage4 = 8'd32;
parameter    ap_ST_fsm_pp0_stage5 = 8'd64;
parameter    ap_ST_fsm_state13 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [9:0] conv_input_address1;
output   conv_input_ce1;
input  [31:0] conv_input_q1;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] conv_input_address0;
reg conv_input_ce0;
reg conv_input_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [6:0] conv_1_weights_0_0_address0;
reg    conv_1_weights_0_0_ce0;
wire   [31:0] conv_1_weights_0_0_q0;
wire   [6:0] conv_1_weights_1_0_address0;
reg    conv_1_weights_1_0_ce0;
wire   [31:0] conv_1_weights_1_0_q0;
wire   [6:0] conv_1_weights_2_0_address0;
reg    conv_1_weights_2_0_ce0;
wire   [31:0] conv_1_weights_2_0_q0;
reg   [15:0] indvar_flatten47_reg_205;
reg   [4:0] r_0_reg_216;
reg   [11:0] indvar_flatten14_reg_227;
reg   [4:0] c_0_reg_238;
reg   [7:0] indvar_flatten_reg_249;
reg   [5:0] f_0_reg_260;
reg   [1:0] wr_0_reg_271;
reg   [31:0] w_sum_0_reg_282;
reg   [31:0] reg_311;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state9_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln8_reg_786;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state10_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_298_p2;
reg   [31:0] reg_316;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state11_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] reg_321;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [0:0] icmp_ln8_fu_338_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln8_reg_786_pp0_iter1_reg;
wire   [15:0] add_ln8_fu_344_p2;
reg   [15:0] add_ln8_reg_790;
wire   [4:0] select_ln35_1_fu_370_p3;
reg   [4:0] select_ln35_1_reg_795;
wire   [4:0] select_ln35_5_fu_444_p3;
reg   [4:0] select_ln35_5_reg_801;
wire   [0:0] or_ln26_1_fu_522_p2;
reg   [0:0] or_ln26_1_reg_807;
wire   [1:0] select_ln26_fu_528_p3;
reg   [1:0] select_ln26_reg_812;
wire   [5:0] select_ln26_2_fu_536_p3;
reg   [5:0] select_ln26_2_reg_817;
wire   [10:0] add_ln26_9_fu_635_p2;
reg   [10:0] add_ln26_9_reg_849;
wire   [7:0] select_ln14_fu_647_p3;
reg   [7:0] select_ln14_reg_854;
wire   [11:0] select_ln11_fu_661_p3;
reg   [11:0] select_ln11_reg_859;
reg   [31:0] conv_1_weights_1_0_l_reg_874;
reg   [31:0] conv_input_load_1_reg_879;
reg   [31:0] conv_1_weights_2_0_l_reg_884;
wire   [31:0] select_ln26_1_fu_673_p3;
reg   [31:0] tmp_1_2_reg_894;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state12_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [1:0] wr_fu_681_p2;
reg   [1:0] wr_reg_899;
reg   [14:0] conv_out_addr_reg_905;
wire   [0:0] icmp_ln18_1_fu_721_p2;
reg   [0:0] icmp_ln18_1_reg_910;
reg   [31:0] w_sum_3_2_reg_919;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] conv_1_bias_load_reg_925;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage4_subdone;
reg   [15:0] ap_phi_mux_indvar_flatten47_phi_fu_209_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_r_0_phi_fu_220_p4;
reg   [11:0] ap_phi_mux_indvar_flatten14_phi_fu_231_p4;
reg   [4:0] ap_phi_mux_c_0_phi_fu_242_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_253_p4;
reg   [5:0] ap_phi_mux_f_0_phi_fu_264_p4;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_275_p4;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_286_p4;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln26_5_fu_570_p1;
wire  signed [63:0] sext_ln26_fu_619_p1;
wire  signed [63:0] sext_ln26_1_fu_630_p1;
wire   [63:0] zext_ln26_8_fu_669_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln35_5_fu_716_p1;
wire   [63:0] zext_ln26_3_fu_706_p1;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_294_p0;
reg   [31:0] grp_fu_294_p1;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_298_p0;
reg   [31:0] grp_fu_298_p1;
wire   [0:0] icmp_ln11_fu_356_p2;
wire   [4:0] r_fu_350_p2;
wire   [4:0] c_fu_326_p2;
wire   [4:0] add_ln26_2_fu_332_p2;
wire   [0:0] icmp_ln18_fu_400_p2;
wire   [0:0] xor_ln35_fu_394_p2;
wire   [0:0] icmp_ln14_fu_412_p2;
wire   [4:0] select_ln35_fu_362_p3;
wire   [0:0] and_ln35_1_fu_418_p2;
wire   [0:0] or_ln35_fu_430_p2;
wire   [4:0] add_ln26_3_fu_424_p2;
wire   [4:0] add_ln26_4_fu_456_p2;
wire   [4:0] select_ln35_2_fu_378_p3;
wire   [4:0] select_ln35_6_fu_462_p3;
wire   [4:0] add_ln26_5_fu_474_p2;
wire   [4:0] select_ln35_3_fu_386_p3;
wire   [4:0] select_ln35_7_fu_480_p3;
wire   [0:0] xor_ln35_1_fu_492_p2;
wire   [0:0] and_ln35_fu_406_p2;
wire   [0:0] or_ln35_1_fu_498_p2;
wire   [5:0] select_ln35_4_fu_436_p3;
wire   [0:0] and_ln35_2_fu_504_p2;
wire   [0:0] or_ln26_fu_516_p2;
wire   [5:0] f_fu_510_p2;
wire   [6:0] tmp_3_fu_552_p3;
wire   [7:0] zext_ln26_1_fu_544_p1;
wire   [7:0] zext_ln26_4_fu_560_p1;
wire   [7:0] add_ln26_6_fu_564_p2;
wire   [4:0] zext_ln18_fu_548_p1;
wire   [4:0] add_ln26_fu_577_p2;
wire   [9:0] tmp_6_fu_583_p3;
wire   [6:0] tmp_7_fu_595_p3;
wire   [10:0] zext_ln26_6_fu_591_p1;
wire   [10:0] zext_ln26_7_fu_603_p1;
wire   [10:0] zext_ln35_1_fu_452_p1;
wire   [10:0] sub_ln26_fu_607_p2;
wire   [10:0] add_ln26_7_fu_613_p2;
wire   [10:0] zext_ln35_3_fu_470_p1;
wire   [10:0] add_ln26_8_fu_624_p2;
wire   [10:0] zext_ln35_4_fu_488_p1;
wire   [7:0] add_ln14_fu_641_p2;
wire   [11:0] add_ln11_fu_655_p2;
wire    ap_block_pp0_stage5;
wire   [9:0] grp_fu_777_p3;
wire   [14:0] tmp_1_fu_692_p3;
wire   [15:0] zext_ln26_2_fu_703_p1;
wire   [15:0] zext_ln26_fu_699_p1;
wire   [15:0] add_ln35_1_fu_710_p2;
wire   [31:0] bitcast_ln34_fu_726_p1;
wire   [7:0] tmp_fu_730_p4;
wire   [22:0] trunc_ln34_fu_740_p1;
wire   [0:0] icmp_ln34_1_fu_750_p2;
wire   [0:0] icmp_ln34_fu_744_p2;
wire   [0:0] or_ln34_fu_756_p2;
wire   [0:0] tmp_5_fu_305_p2;
wire   [0:0] and_ln34_fu_762_p2;
wire   [4:0] grp_fu_777_p0;
wire   [5:0] grp_fu_777_p1;
wire   [4:0] grp_fu_777_p2;
wire    ap_block_pp0_stage4_00001;
wire    ap_CS_fsm_state13;
reg   [7:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_777_p00;
wire   [9:0] grp_fu_777_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_0_address0),
    .ce0(conv_1_weights_0_0_ce0),
    .q0(conv_1_weights_0_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_0_address0),
    .ce0(conv_1_weights_1_0_ce0),
    .q0(conv_1_weights_1_0_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 96 ),
    .AddressWidth( 7 ))
conv_1_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_0_address0),
    .ce0(conv_1_weights_2_0_ce0),
    .q0(conv_1_weights_2_0_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .din1(grp_fu_294_p1),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_298_p0),
    .din1(grp_fu_298_p1),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_294_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_5_fu_305_p2)
);

conv_1_mac_muladdhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
conv_1_mac_muladdhbi_U4(
    .din0(grp_fu_777_p0),
    .din1(grp_fu_777_p1),
    .din2(grp_fu_777_p2),
    .dout(grp_fu_777_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        c_0_reg_238 <= select_ln35_5_reg_801;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_238 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        f_0_reg_260 <= select_ln26_2_reg_817;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_260 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        indvar_flatten14_reg_227 <= select_ln11_reg_859;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten14_reg_227 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        indvar_flatten47_reg_205 <= add_ln8_reg_790;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten47_reg_205 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        indvar_flatten_reg_249 <= select_ln14_reg_854;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_249 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        r_0_reg_216 <= select_ln35_1_reg_795;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_216 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln8_reg_786_pp0_iter1_reg == 1'd0))) begin
        w_sum_0_reg_282 <= w_sum_3_2_reg_919;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_sum_0_reg_282 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        wr_0_reg_271 <= wr_reg_899;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        wr_0_reg_271 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_338_p2 == 1'd0))) begin
        add_ln26_9_reg_849 <= add_ln26_9_fu_635_p2;
        or_ln26_1_reg_807 <= or_ln26_1_fu_522_p2;
        select_ln26_reg_812 <= select_ln26_fu_528_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln8_reg_790 <= add_ln8_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (icmp_ln18_1_reg_910 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_1_bias_load_reg_925 <= conv_1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_786 == 1'd0))) begin
        conv_1_weights_1_0_l_reg_874 <= conv_1_weights_1_0_q0;
        conv_1_weights_2_0_l_reg_884 <= conv_1_weights_2_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_786 == 1'd0))) begin
        conv_input_load_1_reg_879 <= conv_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        conv_out_addr_reg_905 <= zext_ln35_5_fu_716_p1;
        icmp_ln18_1_reg_910 <= icmp_ln18_1_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln8_reg_786 <= icmp_ln8_fu_338_p2;
        icmp_ln8_reg_786_pp0_iter1_reg <= icmp_ln8_reg_786;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln8_reg_786 == 1'd0)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_786 == 1'd0)))) begin
        reg_311 <= conv_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln8_reg_786 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln8_reg_786 == 1'd0)))) begin
        reg_316 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln8_reg_786 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln8_reg_786 == 1'd0)))) begin
        reg_321 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_338_p2 == 1'd0))) begin
        select_ln11_reg_859 <= select_ln11_fu_661_p3;
        select_ln14_reg_854 <= select_ln14_fu_647_p3;
        select_ln26_2_reg_817 <= select_ln26_2_fu_536_p3;
        select_ln35_1_reg_795 <= select_ln35_1_fu_370_p3;
        select_ln35_5_reg_801 <= select_ln35_5_fu_444_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln8_reg_786 == 1'd0))) begin
        tmp_1_2_reg_894 <= grp_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln8_reg_786_pp0_iter1_reg == 1'd0))) begin
        w_sum_3_2_reg_919 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln8_reg_786 == 1'd0))) begin
        wr_reg_899 <= wr_fu_681_p2;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_338_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_c_0_phi_fu_242_p4 = select_ln35_5_reg_801;
    end else begin
        ap_phi_mux_c_0_phi_fu_242_p4 = c_0_reg_238;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_264_p4 = select_ln26_2_reg_817;
    end else begin
        ap_phi_mux_f_0_phi_fu_264_p4 = f_0_reg_260;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_indvar_flatten14_phi_fu_231_p4 = select_ln11_reg_859;
    end else begin
        ap_phi_mux_indvar_flatten14_phi_fu_231_p4 = indvar_flatten14_reg_227;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_indvar_flatten47_phi_fu_209_p4 = add_ln8_reg_790;
    end else begin
        ap_phi_mux_indvar_flatten47_phi_fu_209_p4 = indvar_flatten47_reg_205;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = select_ln14_reg_854;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_253_p4 = indvar_flatten_reg_249;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_r_0_phi_fu_220_p4 = select_ln35_1_reg_795;
    end else begin
        ap_phi_mux_r_0_phi_fu_220_p4 = r_0_reg_216;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln8_reg_786_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_w_sum_0_phi_fu_286_p4 = w_sum_3_2_reg_919;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_286_p4 = w_sum_0_reg_282;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_786 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_275_p4 = wr_reg_899;
    end else begin
        ap_phi_mux_wr_0_phi_fu_275_p4 = wr_0_reg_271;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_input_address0 = zext_ln26_8_fu_669_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_input_address0 = sext_ln26_fu_619_p1;
        end else begin
            conv_input_address0 = 'bx;
        end
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_input_ce1 = 1'b1;
    end else begin
        conv_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_1_reg_910 == 1'd1) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_294_p0 = w_sum_3_2_reg_919;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_294_p0 = reg_321;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_294_p0 = select_ln26_1_fu_673_p3;
    end else begin
        grp_fu_294_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_294_p1 = conv_1_bias_load_reg_925;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_294_p1 = tmp_1_2_reg_894;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_294_p1 = reg_316;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_294_p1 = grp_fu_298_p2;
    end else begin
        grp_fu_294_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_298_p0 = conv_1_weights_2_0_l_reg_884;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_298_p0 = conv_1_weights_1_0_l_reg_874;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_298_p0 = conv_1_weights_0_0_q0;
        end else begin
            grp_fu_298_p0 = 'bx;
        end
    end else begin
        grp_fu_298_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_298_p1 = reg_311;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_298_p1 = conv_input_load_1_reg_879;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_298_p1 = conv_input_q0;
        end else begin
            grp_fu_298_p1 = 'bx;
        end
    end else begin
        grp_fu_298_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_338_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_338_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_655_p2 = (ap_phi_mux_indvar_flatten14_phi_fu_231_p4 + 12'd1);

assign add_ln14_fu_641_p2 = (ap_phi_mux_indvar_flatten_phi_fu_253_p4 + 8'd1);

assign add_ln26_2_fu_332_p2 = (ap_phi_mux_c_0_phi_fu_242_p4 + 5'd2);

assign add_ln26_3_fu_424_p2 = (select_ln35_fu_362_p3 + 5'd1);

assign add_ln26_4_fu_456_p2 = (select_ln35_fu_362_p3 + 5'd2);

assign add_ln26_5_fu_474_p2 = (select_ln35_fu_362_p3 + 5'd3);

assign add_ln26_6_fu_564_p2 = (zext_ln26_1_fu_544_p1 + zext_ln26_4_fu_560_p1);

assign add_ln26_7_fu_613_p2 = (zext_ln35_1_fu_452_p1 + sub_ln26_fu_607_p2);

assign add_ln26_8_fu_624_p2 = (zext_ln35_3_fu_470_p1 + sub_ln26_fu_607_p2);

assign add_ln26_9_fu_635_p2 = (zext_ln35_4_fu_488_p1 + sub_ln26_fu_607_p2);

assign add_ln26_fu_577_p2 = (select_ln35_1_fu_370_p3 + zext_ln18_fu_548_p1);

assign add_ln35_1_fu_710_p2 = (zext_ln26_2_fu_703_p1 + zext_ln26_fu_699_p1);

assign add_ln8_fu_344_p2 = (ap_phi_mux_indvar_flatten47_phi_fu_209_p4 + 16'd1);

assign and_ln34_fu_762_p2 = (tmp_5_fu_305_p2 & or_ln34_fu_756_p2);

assign and_ln35_1_fu_418_p2 = (xor_ln35_fu_394_p2 & icmp_ln14_fu_412_p2);

assign and_ln35_2_fu_504_p2 = (or_ln35_1_fu_498_p2 & and_ln35_fu_406_p2);

assign and_ln35_fu_406_p2 = (xor_ln35_fu_394_p2 & icmp_ln18_fu_400_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln34_fu_726_p1 = grp_fu_294_p2;

assign c_fu_326_p2 = (ap_phi_mux_c_0_phi_fu_242_p4 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_3_fu_706_p1;

assign conv_1_weights_0_0_address0 = zext_ln26_5_fu_570_p1;

assign conv_1_weights_1_0_address0 = zext_ln26_5_fu_570_p1;

assign conv_1_weights_2_0_address0 = zext_ln26_5_fu_570_p1;

assign conv_input_address1 = sext_ln26_1_fu_630_p1;

assign conv_out_address0 = conv_out_addr_reg_905;

assign conv_out_d0 = ((and_ln34_fu_762_p2[0:0] === 1'b1) ? grp_fu_294_p2 : 32'd0);

assign f_fu_510_p2 = (select_ln35_4_fu_436_p3 + 6'd1);

assign grp_fu_777_p0 = grp_fu_777_p00;

assign grp_fu_777_p00 = select_ln35_1_reg_795;

assign grp_fu_777_p1 = 10'd26;

assign grp_fu_777_p2 = grp_fu_777_p20;

assign grp_fu_777_p20 = select_ln35_5_reg_801;

assign icmp_ln11_fu_356_p2 = ((ap_phi_mux_indvar_flatten14_phi_fu_231_p4 == 12'd2496) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_412_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_253_p4 == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_721_p2 = ((wr_reg_899 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_400_p2 = ((ap_phi_mux_wr_0_phi_fu_275_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_750_p2 = ((trunc_ln34_fu_740_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_744_p2 = ((tmp_fu_730_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_338_p2 = ((ap_phi_mux_indvar_flatten47_phi_fu_209_p4 == 16'd64896) ? 1'b1 : 1'b0);

assign or_ln26_1_fu_522_p2 = (or_ln26_fu_516_p2 | icmp_ln11_fu_356_p2);

assign or_ln26_fu_516_p2 = (and_ln35_2_fu_504_p2 | and_ln35_1_fu_418_p2);

assign or_ln34_fu_756_p2 = (icmp_ln34_fu_744_p2 | icmp_ln34_1_fu_750_p2);

assign or_ln35_1_fu_498_p2 = (xor_ln35_1_fu_492_p2 | icmp_ln11_fu_356_p2);

assign or_ln35_fu_430_p2 = (icmp_ln11_fu_356_p2 | and_ln35_1_fu_418_p2);

assign r_fu_350_p2 = (ap_phi_mux_r_0_phi_fu_220_p4 + 5'd1);

assign select_ln11_fu_661_p3 = ((icmp_ln11_fu_356_p2[0:0] === 1'b1) ? 12'd1 : add_ln11_fu_655_p2);

assign select_ln14_fu_647_p3 = ((or_ln35_fu_430_p2[0:0] === 1'b1) ? 8'd1 : add_ln14_fu_641_p2);

assign select_ln26_1_fu_673_p3 = ((or_ln26_1_reg_807[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_w_sum_0_phi_fu_286_p4);

assign select_ln26_2_fu_536_p3 = ((and_ln35_2_fu_504_p2[0:0] === 1'b1) ? f_fu_510_p2 : select_ln35_4_fu_436_p3);

assign select_ln26_fu_528_p3 = ((or_ln26_1_fu_522_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wr_0_phi_fu_275_p4);

assign select_ln35_1_fu_370_p3 = ((icmp_ln11_fu_356_p2[0:0] === 1'b1) ? r_fu_350_p2 : ap_phi_mux_r_0_phi_fu_220_p4);

assign select_ln35_2_fu_378_p3 = ((icmp_ln11_fu_356_p2[0:0] === 1'b1) ? 5'd1 : c_fu_326_p2);

assign select_ln35_3_fu_386_p3 = ((icmp_ln11_fu_356_p2[0:0] === 1'b1) ? 5'd2 : add_ln26_2_fu_332_p2);

assign select_ln35_4_fu_436_p3 = ((or_ln35_fu_430_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_f_0_phi_fu_264_p4);

assign select_ln35_5_fu_444_p3 = ((and_ln35_1_fu_418_p2[0:0] === 1'b1) ? add_ln26_3_fu_424_p2 : select_ln35_fu_362_p3);

assign select_ln35_6_fu_462_p3 = ((and_ln35_1_fu_418_p2[0:0] === 1'b1) ? add_ln26_4_fu_456_p2 : select_ln35_2_fu_378_p3);

assign select_ln35_7_fu_480_p3 = ((and_ln35_1_fu_418_p2[0:0] === 1'b1) ? add_ln26_5_fu_474_p2 : select_ln35_3_fu_386_p3);

assign select_ln35_fu_362_p3 = ((icmp_ln11_fu_356_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_c_0_phi_fu_242_p4);

assign sext_ln26_1_fu_630_p1 = $signed(add_ln26_8_fu_624_p2);

assign sext_ln26_fu_619_p1 = $signed(add_ln26_7_fu_613_p2);

assign sub_ln26_fu_607_p2 = (zext_ln26_6_fu_591_p1 - zext_ln26_7_fu_603_p1);

assign tmp_1_fu_692_p3 = {{grp_fu_777_p3}, {5'd0}};

assign tmp_3_fu_552_p3 = {{select_ln26_fu_528_p3}, {5'd0}};

assign tmp_6_fu_583_p3 = {{add_ln26_fu_577_p2}, {5'd0}};

assign tmp_7_fu_595_p3 = {{add_ln26_fu_577_p2}, {2'd0}};

assign tmp_fu_730_p4 = {{bitcast_ln34_fu_726_p1[30:23]}};

assign trunc_ln34_fu_740_p1 = bitcast_ln34_fu_726_p1[22:0];

assign wr_fu_681_p2 = (select_ln26_reg_812 + 2'd1);

assign xor_ln35_1_fu_492_p2 = (icmp_ln14_fu_412_p2 ^ 1'd1);

assign xor_ln35_fu_394_p2 = (icmp_ln11_fu_356_p2 ^ 1'd1);

assign zext_ln18_fu_548_p1 = select_ln26_fu_528_p3;

assign zext_ln26_1_fu_544_p1 = select_ln26_2_fu_536_p3;

assign zext_ln26_2_fu_703_p1 = select_ln26_2_reg_817;

assign zext_ln26_3_fu_706_p1 = select_ln26_2_reg_817;

assign zext_ln26_4_fu_560_p1 = tmp_3_fu_552_p3;

assign zext_ln26_5_fu_570_p1 = add_ln26_6_fu_564_p2;

assign zext_ln26_6_fu_591_p1 = tmp_6_fu_583_p3;

assign zext_ln26_7_fu_603_p1 = tmp_7_fu_595_p3;

assign zext_ln26_8_fu_669_p1 = add_ln26_9_reg_849;

assign zext_ln26_fu_699_p1 = tmp_1_fu_692_p3;

assign zext_ln35_1_fu_452_p1 = select_ln35_5_fu_444_p3;

assign zext_ln35_3_fu_470_p1 = select_ln35_6_fu_462_p3;

assign zext_ln35_4_fu_488_p1 = select_ln35_7_fu_480_p3;

assign zext_ln35_5_fu_716_p1 = add_ln35_1_fu_710_p2;

endmodule //conv_1
