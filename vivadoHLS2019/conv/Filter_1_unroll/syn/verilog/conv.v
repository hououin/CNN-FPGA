// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.780550,HLS_SYN_LAT=495881,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=8,HLS_SYN_FF=918,HLS_SYN_LUT=2033,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 37'd1;
parameter    ap_ST_fsm_state2 = 37'd2;
parameter    ap_ST_fsm_state3 = 37'd4;
parameter    ap_ST_fsm_state4 = 37'd8;
parameter    ap_ST_fsm_state5 = 37'd16;
parameter    ap_ST_fsm_state6 = 37'd32;
parameter    ap_ST_fsm_state7 = 37'd64;
parameter    ap_ST_fsm_state8 = 37'd128;
parameter    ap_ST_fsm_state9 = 37'd256;
parameter    ap_ST_fsm_state10 = 37'd512;
parameter    ap_ST_fsm_state11 = 37'd1024;
parameter    ap_ST_fsm_state12 = 37'd2048;
parameter    ap_ST_fsm_state13 = 37'd4096;
parameter    ap_ST_fsm_state14 = 37'd8192;
parameter    ap_ST_fsm_state15 = 37'd16384;
parameter    ap_ST_fsm_state16 = 37'd32768;
parameter    ap_ST_fsm_state17 = 37'd65536;
parameter    ap_ST_fsm_state18 = 37'd131072;
parameter    ap_ST_fsm_state19 = 37'd262144;
parameter    ap_ST_fsm_state20 = 37'd524288;
parameter    ap_ST_fsm_state21 = 37'd1048576;
parameter    ap_ST_fsm_state22 = 37'd2097152;
parameter    ap_ST_fsm_state23 = 37'd4194304;
parameter    ap_ST_fsm_state24 = 37'd8388608;
parameter    ap_ST_fsm_state25 = 37'd16777216;
parameter    ap_ST_fsm_state26 = 37'd33554432;
parameter    ap_ST_fsm_state27 = 37'd67108864;
parameter    ap_ST_fsm_state28 = 37'd134217728;
parameter    ap_ST_fsm_state29 = 37'd268435456;
parameter    ap_ST_fsm_state30 = 37'd536870912;
parameter    ap_ST_fsm_state31 = 37'd1073741824;
parameter    ap_ST_fsm_state32 = 37'd2147483648;
parameter    ap_ST_fsm_state33 = 37'd4294967296;
parameter    ap_ST_fsm_state34 = 37'd8589934592;
parameter    ap_ST_fsm_state35 = 37'd17179869184;
parameter    ap_ST_fsm_state36 = 37'd34359738368;
parameter    ap_ST_fsm_state37 = 37'd68719476736;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [36:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [7:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [7:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire   [7:0] conv_weights_3_address0;
reg    conv_weights_3_ce0;
wire   [31:0] conv_weights_3_q0;
wire   [7:0] conv_weights_4_address0;
reg    conv_weights_4_ce0;
wire   [31:0] conv_weights_4_q0;
wire   [7:0] conv_weights_5_address0;
reg    conv_weights_5_ce0;
wire   [31:0] conv_weights_5_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] reg_397;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state16;
wire   [31:0] grp_fu_363_p2;
reg   [31:0] reg_402;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state36;
wire   [6:0] add_ln8_fu_408_p2;
reg   [6:0] add_ln8_reg_738;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_420_p2;
reg   [3:0] r_reg_746;
wire   [3:0] c_fu_432_p2;
reg   [3:0] c_reg_754;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln14_fu_456_p1;
reg   [11:0] zext_ln14_reg_759;
wire   [0:0] icmp_ln11_fu_426_p2;
wire   [4:0] f_fu_466_p2;
reg   [4:0] f_reg_767;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_472_p1;
reg   [63:0] zext_ln26_reg_772;
wire   [0:0] icmp_ln14_fu_460_p2;
wire   [8:0] zext_ln35_1_fu_476_p1;
reg   [8:0] zext_ln35_1_reg_777;
reg   [10:0] conv_out_addr_reg_782;
wire   [1:0] wr_fu_504_p2;
reg   [1:0] wr_reg_790;
wire    ap_CS_fsm_state5;
wire   [4:0] sub_ln26_fu_526_p2;
reg   [4:0] sub_ln26_reg_795;
wire   [0:0] icmp_ln18_fu_498_p2;
wire   [7:0] mul_ln26_fu_542_p2;
reg   [7:0] mul_ln26_reg_800;
wire   [1:0] wc_fu_558_p2;
reg   [1:0] wc_reg_813;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln26_5_fu_586_p1;
reg   [63:0] zext_ln26_5_reg_818;
wire   [0:0] icmp_ln21_fu_552_p2;
wire   [10:0] sub_ln26_1_fu_626_p2;
reg   [10:0] sub_ln26_1_reg_832;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state18;
reg   [31:0] tmp_1_4_reg_931;
wire    ap_CS_fsm_state21;
wire   [31:0] grp_fu_380_p2;
reg   [31:0] tmp_1_5_reg_936;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
reg   [3:0] r_0_reg_270;
reg   [6:0] phi_mul_reg_282;
reg   [3:0] c_0_reg_294;
wire   [0:0] icmp_ln8_fu_414_p2;
reg   [4:0] f_0_reg_306;
wire    ap_CS_fsm_state37;
reg   [1:0] wr_0_reg_317;
reg   [31:0] w_sum_0_reg_328;
reg   [31:0] w_sum_1_reg_340;
reg   [1:0] wc_0_reg_352;
wire   [63:0] zext_ln35_3_fu_489_p1;
wire   [63:0] zext_ln26_8_fu_632_p1;
wire   [63:0] zext_ln26_9_fu_642_p1;
wire   [63:0] zext_ln26_10_fu_652_p1;
wire   [63:0] zext_ln26_11_fu_662_p1;
wire   [63:0] zext_ln26_12_fu_672_p1;
wire   [63:0] zext_ln26_13_fu_682_p1;
reg   [31:0] grp_fu_363_p0;
reg   [31:0] grp_fu_363_p1;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state29;
reg   [31:0] grp_fu_370_p0;
wire   [6:0] zext_ln35_fu_438_p1;
wire   [6:0] add_ln35_fu_442_p2;
wire   [10:0] tmp_6_fu_448_p3;
wire   [11:0] zext_ln35_2_fu_480_p1;
wire   [11:0] add_ln35_1_fu_484_p2;
wire   [3:0] tmp_8_fu_514_p3;
wire   [4:0] zext_ln26_2_fu_522_p1;
wire   [4:0] zext_ln26_1_fu_510_p1;
wire   [3:0] zext_ln18_fu_494_p1;
wire   [3:0] add_ln26_fu_532_p2;
wire   [3:0] mul_ln26_fu_542_p0;
wire   [4:0] zext_ln26_4_fu_564_p1;
wire   [4:0] add_ln26_2_fu_568_p2;
wire   [8:0] tmp_10_cast_fu_573_p3;
wire   [8:0] add_ln26_3_fu_581_p2;
wire   [3:0] zext_ln21_fu_548_p1;
wire   [3:0] add_ln26_1_fu_591_p2;
wire   [7:0] zext_ln26_6_fu_597_p1;
wire   [7:0] add_ln26_4_fu_601_p2;
wire   [8:0] tmp_7_fu_614_p3;
wire   [10:0] p_shl1_cast_fu_606_p3;
wire   [10:0] zext_ln26_7_fu_622_p1;
wire   [10:0] or_ln26_fu_637_p2;
wire   [10:0] add_ln26_5_fu_647_p2;
wire   [10:0] add_ln26_6_fu_657_p2;
wire   [10:0] add_ln26_7_fu_667_p2;
wire   [10:0] add_ln26_8_fu_677_p2;
wire   [31:0] bitcast_ln34_fu_687_p1;
wire   [7:0] tmp_fu_691_p4;
wire   [22:0] trunc_ln34_fu_701_p1;
wire   [0:0] icmp_ln34_1_fu_711_p2;
wire   [0:0] icmp_ln34_fu_705_p2;
wire   [0:0] or_ln34_fu_717_p2;
wire   [0:0] grp_fu_386_p2;
wire   [0:0] and_ln34_fu_723_p2;
reg   [36:0] ap_NS_fsm;
wire   [7:0] mul_ln26_fu_542_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 37'd1;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_conv_weights_3 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_address0),
    .ce0(conv_weights_3_ce0),
    .q0(conv_weights_3_q0)
);

conv_conv_weights_4 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_address0),
    .ce0(conv_weights_4_ce0),
    .q0(conv_weights_4_q0)
);

conv_conv_weights_5 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_address0),
    .ce0(conv_weights_5_ce0),
    .q0(conv_weights_5_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p0),
    .din1(grp_fu_363_p1),
    .ce(1'b1),
    .dout(grp_fu_363_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_370_p0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_370_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_5_q0),
    .din1(input_r_q1),
    .ce(1'b1),
    .dout(grp_fu_380_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_386_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_294 <= c_reg_754;
    end else if (((icmp_ln8_fu_414_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_294 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        f_0_reg_306 <= f_reg_767;
    end else if (((icmp_ln11_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_306 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_426_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_282 <= add_ln8_reg_738;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_282 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_426_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_270 <= r_reg_746;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_270 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        w_sum_0_reg_328 <= w_sum_1_reg_340;
    end else if (((icmp_ln14_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_328 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        w_sum_1_reg_340 <= grp_fu_363_p2;
    end else if (((icmp_ln18_fu_498_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_340 <= w_sum_0_reg_328;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        wc_0_reg_352 <= wc_reg_813;
    end else if (((icmp_ln18_fu_498_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_352 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        wr_0_reg_317 <= wr_reg_790;
    end else if (((icmp_ln14_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_317 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_738 <= add_ln8_fu_408_p2;
        r_reg_746 <= r_fu_420_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_754 <= c_fu_432_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_addr_reg_782 <= zext_ln35_3_fu_489_p1;
        zext_ln26_reg_772[4 : 0] <= zext_ln26_fu_472_p1[4 : 0];
        zext_ln35_1_reg_777[4 : 0] <= zext_ln35_1_fu_476_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_767 <= f_fu_466_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_498_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln26_reg_800 <= mul_ln26_fu_542_p2;
        sub_ln26_reg_795 <= sub_ln26_fu_526_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_397 <= grp_fu_370_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state20))) begin
        reg_402 <= grp_fu_363_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_552_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln26_1_reg_832[10 : 1] <= sub_ln26_1_fu_626_p2[10 : 1];
        zext_ln26_5_reg_818[8 : 0] <= zext_ln26_5_fu_586_p1[8 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_1_4_reg_931 <= grp_fu_370_p2;
        tmp_1_5_reg_936 <= grp_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_813 <= wc_fu_558_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_790 <= wr_fu_504_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_426_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln14_reg_759[10 : 4] <= zext_ln14_fu_456_p1[10 : 4];
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_weights_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_weights_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_weights_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_363_p0 = w_sum_0_reg_328;
    end else if (((1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_363_p0 = reg_402;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_363_p0 = w_sum_1_reg_340;
    end else begin
        grp_fu_363_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        grp_fu_363_p1 = conv_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        grp_fu_363_p1 = tmp_1_5_reg_936;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        grp_fu_363_p1 = tmp_1_4_reg_931;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state21))) begin
        grp_fu_363_p1 = reg_397;
    end else begin
        grp_fu_363_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_370_p0 = conv_weights_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_370_p0 = conv_weights_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_370_p0 = conv_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_370_p0 = conv_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_370_p0 = conv_weights_0_q0;
    end else begin
        grp_fu_370_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input_r_address0 = zext_ln26_12_fu_672_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        input_r_address0 = zext_ln26_11_fu_662_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        input_r_address0 = zext_ln26_10_fu_652_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        input_r_address0 = zext_ln26_9_fu_642_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_address0 = zext_ln26_8_fu_632_p1;
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state19))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_414_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_426_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_460_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_498_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln21_fu_552_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_591_p2 = (c_0_reg_294 + zext_ln21_fu_548_p1);

assign add_ln26_2_fu_568_p2 = (zext_ln26_4_fu_564_p1 + sub_ln26_reg_795);

assign add_ln26_3_fu_581_p2 = (zext_ln35_1_reg_777 + tmp_10_cast_fu_573_p3);

assign add_ln26_4_fu_601_p2 = (zext_ln26_6_fu_597_p1 + mul_ln26_reg_800);

assign add_ln26_5_fu_647_p2 = (sub_ln26_1_reg_832 + 11'd2);

assign add_ln26_6_fu_657_p2 = (sub_ln26_1_reg_832 + 11'd3);

assign add_ln26_7_fu_667_p2 = (sub_ln26_1_reg_832 + 11'd4);

assign add_ln26_8_fu_677_p2 = (sub_ln26_1_reg_832 + 11'd5);

assign add_ln26_fu_532_p2 = (zext_ln18_fu_494_p1 + r_0_reg_270);

assign add_ln35_1_fu_484_p2 = (zext_ln14_reg_759 + zext_ln35_2_fu_480_p1);

assign add_ln35_fu_442_p2 = (phi_mul_reg_282 + zext_ln35_fu_438_p1);

assign add_ln8_fu_408_p2 = (phi_mul_reg_282 + 7'd11);

assign and_ln34_fu_723_p2 = (or_ln34_fu_717_p2 & grp_fu_386_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_687_p1 = reg_402;

assign c_fu_432_p2 = (c_0_reg_294 + 4'd1);

assign conv_bias_address0 = zext_ln26_reg_772;

assign conv_out_address0 = conv_out_addr_reg_782;

assign conv_out_d0 = ((and_ln34_fu_723_p2[0:0] === 1'b1) ? reg_402 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_5_fu_586_p1;

assign conv_weights_1_address0 = zext_ln26_5_reg_818;

assign conv_weights_2_address0 = zext_ln26_5_reg_818;

assign conv_weights_3_address0 = zext_ln26_5_reg_818;

assign conv_weights_4_address0 = zext_ln26_5_reg_818;

assign conv_weights_5_address0 = zext_ln26_5_reg_818;

assign f_fu_466_p2 = (f_0_reg_306 + 5'd1);

assign icmp_ln11_fu_426_p2 = ((c_0_reg_294 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_460_p2 = ((f_0_reg_306 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_498_p2 = ((wr_0_reg_317 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_552_p2 = ((wc_0_reg_352 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_711_p2 = ((trunc_ln34_fu_701_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_705_p2 = ((tmp_fu_691_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_414_p2 = ((r_0_reg_270 == 4'd11) ? 1'b1 : 1'b0);

assign input_r_address1 = zext_ln26_13_fu_682_p1;

assign mul_ln26_fu_542_p0 = mul_ln26_fu_542_p00;

assign mul_ln26_fu_542_p00 = add_ln26_fu_532_p2;

assign mul_ln26_fu_542_p2 = (mul_ln26_fu_542_p0 * $signed('hD));

assign or_ln26_fu_637_p2 = (sub_ln26_1_reg_832 | 11'd1);

assign or_ln34_fu_717_p2 = (icmp_ln34_fu_705_p2 | icmp_ln34_1_fu_711_p2);

assign p_shl1_cast_fu_606_p3 = {{add_ln26_4_fu_601_p2}, {3'd0}};

assign r_fu_420_p2 = (r_0_reg_270 + 4'd1);

assign sub_ln26_1_fu_626_p2 = (p_shl1_cast_fu_606_p3 - zext_ln26_7_fu_622_p1);

assign sub_ln26_fu_526_p2 = (zext_ln26_2_fu_522_p1 - zext_ln26_1_fu_510_p1);

assign tmp_10_cast_fu_573_p3 = {{add_ln26_2_fu_568_p2}, {4'd0}};

assign tmp_6_fu_448_p3 = {{add_ln35_fu_442_p2}, {4'd0}};

assign tmp_7_fu_614_p3 = {{add_ln26_4_fu_601_p2}, {1'd0}};

assign tmp_8_fu_514_p3 = {{wr_0_reg_317}, {2'd0}};

assign tmp_fu_691_p4 = {{bitcast_ln34_fu_687_p1[30:23]}};

assign trunc_ln34_fu_701_p1 = bitcast_ln34_fu_687_p1[22:0];

assign wc_fu_558_p2 = (wc_0_reg_352 + 2'd1);

assign wr_fu_504_p2 = (wr_0_reg_317 + 2'd1);

assign zext_ln14_fu_456_p1 = tmp_6_fu_448_p3;

assign zext_ln18_fu_494_p1 = wr_0_reg_317;

assign zext_ln21_fu_548_p1 = wc_0_reg_352;

assign zext_ln26_10_fu_652_p1 = add_ln26_5_fu_647_p2;

assign zext_ln26_11_fu_662_p1 = add_ln26_6_fu_657_p2;

assign zext_ln26_12_fu_672_p1 = add_ln26_7_fu_667_p2;

assign zext_ln26_13_fu_682_p1 = add_ln26_8_fu_677_p2;

assign zext_ln26_1_fu_510_p1 = wr_0_reg_317;

assign zext_ln26_2_fu_522_p1 = tmp_8_fu_514_p3;

assign zext_ln26_4_fu_564_p1 = wc_0_reg_352;

assign zext_ln26_5_fu_586_p1 = add_ln26_3_fu_581_p2;

assign zext_ln26_6_fu_597_p1 = add_ln26_1_fu_591_p2;

assign zext_ln26_7_fu_622_p1 = tmp_7_fu_614_p3;

assign zext_ln26_8_fu_632_p1 = sub_ln26_1_fu_626_p2;

assign zext_ln26_9_fu_642_p1 = or_ln26_fu_637_p2;

assign zext_ln26_fu_472_p1 = f_0_reg_306;

assign zext_ln35_1_fu_476_p1 = f_0_reg_306;

assign zext_ln35_2_fu_480_p1 = f_0_reg_306;

assign zext_ln35_3_fu_489_p1 = add_ln35_1_fu_484_p2;

assign zext_ln35_fu_438_p1 = c_0_reg_294;

always @ (posedge ap_clk) begin
    zext_ln14_reg_759[3:0] <= 4'b0000;
    zext_ln14_reg_759[11] <= 1'b0;
    zext_ln26_reg_772[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_777[8:5] <= 4'b0000;
    zext_ln26_5_reg_818[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
    sub_ln26_1_reg_832[0] <= 1'b0;
end

endmodule //conv
