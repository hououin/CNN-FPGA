// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_conv_weights_0_H__
#define __conv_conv_weights_0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_conv_weights_0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 144;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_conv_weights_0_ram) {
        ram[0] = "0b00111101001111100111101101111001";
        ram[1] = "0b10111110101010100000111000000001";
        ram[2] = "0b00111110000000010001010110000011";
        ram[3] = "0b10111100110000000101100100010110";
        ram[4] = "0b10111110100100001111111010011010";
        ram[5] = "0b00111110010111001100110110100011";
        ram[6] = "0b10111110011000101110000010111111";
        ram[7] = "0b00111101010100000000000001000001";
        ram[8] = "0b10111101110011110111101111000011";
        ram[9] = "0b00111101001011100011010010101100";
        ram[10] = "0b10111110100011100110010010110011";
        ram[11] = "0b10111101100010001111011000101100";
        ram[12] = "0b10111110001000000100100000101010";
        ram[13] = "0b10111101001000100101110110001101";
        ram[14] = "0b00111110100111001110111001010110";
        ram[15] = "0b00111110010110011100100011001001";
        ram[16] = "0b00111110010100101000011100100100";
        ram[17] = "0b10111101110001110000101000110001";
        ram[18] = "0b00111100010111011010010111010100";
        ram[19] = "0b10111101010011000110111001011010";
        ram[20] = "0b10111110000001100100011000101011";
        ram[21] = "0b00111101000010101000000000100111";
        ram[22] = "0b00111110001100010010000001100001";
        ram[23] = "0b00111100010111100100000010011110";
        ram[24] = "0b10111101101110011010010111101101";
        ram[25] = "0b10111101100000001101000011111111";
        ram[26] = "0b10111110000100101101001111110101";
        ram[27] = "0b00111101111010000101100100000011";
        ram[28] = "0b10111110101000001011111001011001";
        ram[29] = "0b00111110100111111111001000101101";
        ram[30] = "0b00111101101011111101001100101011";
        ram[31] = "0b00111110000100100001011001010101";
        ram[32] = "0b00111110101011010100010010010010";
        ram[33] = "0b00111110001000011101000100111011";
        ram[34] = "0b10111110000000110001011111100110";
        ram[35] = "0b10111101110110000010001000110110";
        ram[36] = "0b00111101111100000001111011100000";
        ram[37] = "0b00111100100010000100010111010100";
        ram[38] = "0b00111110101011111101000110001100";
        ram[39] = "0b00111110110001111000001100111001";
        ram[40] = "0b00111110001101001001100101101100";
        ram[41] = "0b00111101111000000010000011111101";
        ram[42] = "0b10111110100100110010010000111100";
        ram[43] = "0b10111110010101001000110010101101";
        ram[44] = "0b00111110001110001011010101101001";
        ram[45] = "0b00111101100101001111011101101000";
        ram[46] = "0b10111110000011000100101101011101";
        ram[47] = "0b00111101101101001111001010001110";
        ram[48] = "0b10111101110000001101110000100010";
        ram[49] = "0b10111110000100101100101010100101";
        ram[50] = "0b10111100101000011100000011010101";
        ram[51] = "0b00111101100111111111101111100100";
        ram[52] = "0b00111101101001010110010110001010";
        ram[53] = "0b00111110100001001101101101000100";
        ram[54] = "0b00111110101001110101110110001010";
        ram[55] = "0b10111110101100011000101001011001";
        ram[56] = "0b10111110101000101111010010010000";
        ram[57] = "0b10111101111011100011011101101101";
        ram[58] = "0b00111110000000111111010100101011";
        ram[59] = "0b00111110011011100111000111000110";
        ram[60] = "0b00111110010101101111010100101111";
        ram[61] = "0b10111100001111000010000101110010";
        ram[62] = "0b00111101100000111110001100010111";
        ram[63] = "0b10111110010110011111101010010111";
        ram[64] = "0b00111101000010110011101010000011";
        ram[65] = "0b10111110110101111001011011010100";
        ram[66] = "0b00111111000011010001111110101010";
        ram[67] = "0b00111101100111011110000000100001";
        ram[68] = "0b00111110010111101111000011011000";
        ram[69] = "0b00111110011000000010110001100101";
        ram[70] = "0b00111110011000101011010100101101";
        ram[71] = "0b10111101101111010011010100101110";
        ram[72] = "0b10111101110000100100110010110000";
        ram[73] = "0b00111101111011010101000111110001";
        ram[74] = "0b10111101010011110100110010111110";
        ram[75] = "0b00111101111010000011000101010101";
        ram[76] = "0b10111110010111101101000111101110";
        ram[77] = "0b00111101010001010110111110011011";
        ram[78] = "0b00111110101011011000011001101100";
        ram[79] = "0b10111110011100111111100000111101";
        ram[80] = "0b10111110011001110011010101111000";
        ram[81] = "0b10111110111011000110011100110011";
        ram[82] = "0b10111101011110011110111111011101";
        ram[83] = "0b10111101111011010110101000101000";
        ram[84] = "0b00111110100010001000010010000011";
        ram[85] = "0b10111110101110111000110010100110";
        ram[86] = "0b00111110000000100111101001010111";
        ram[87] = "0b10111110101101101101100010100011";
        ram[88] = "0b10111110100100000111111110110010";
        ram[89] = "0b10111100011011101000100100101010";
        ram[90] = "0b10111110101011111000101011101000";
        ram[91] = "0b00111100100010111000111101001010";
        ram[92] = "0b10111110000001110001001101110101";
        ram[93] = "0b00111110000101010001111111101001";
        ram[94] = "0b10111100110111000101000111101101";
        ram[95] = "0b10111101110010011011111100000010";
        ram[96] = "0b10111110011010010001000101101110";
        ram[97] = "0b00111101110101010111001011010011";
        ram[98] = "0b00111110000010000101000101011011";
        ram[99] = "0b10111110101100010101111000101010";
        ram[100] = "0b00111110010001110011000001111110";
        ram[101] = "0b10111011001010010111011010101110";
        ram[102] = "0b00111101101110001001110001000111";
        ram[103] = "0b10111110111110100001011011000100";
        ram[104] = "0b10111110101011001010000001010101";
        ram[105] = "0b00111110100011111101011110000101";
        ram[106] = "0b10111110100001101100110000010111";
        ram[107] = "0b00111110001111110001000111011000";
        ram[108] = "0b00111111000010100001010011000100";
        ram[109] = "0b00111100010100111110110111001001";
        ram[110] = "0b10111110011011110110011001110010";
        ram[111] = "0b10111110101100110011010100010111";
        ram[112] = "0b10111110000100010000110000110110";
        ram[113] = "0b10111101011000101110011001010011";
        ram[114] = "0b00111101101111111110010011000011";
        ram[115] = "0b10111110001111100011110010111100";
        ram[116] = "0b00111100100011100010011010101110";
        ram[117] = "0b10111011011011111101011101110111";
        ram[118] = "0b10111100011000100111001111000010";
        ram[119] = "0b10111110010110010100011000011111";
        ram[120] = "0b10111110011001101011010000011110";
        ram[121] = "0b00111110100111101011010101001111";
        ram[122] = "0b10111101111101000001101101111001";
        ram[123] = "0b10111110010011010100111111000000";
        ram[124] = "0b00111110101011111111101101000110";
        ram[125] = "0b00111100100111100010110110101100";
        ram[126] = "0b10111110100000011000000001011110";
        ram[127] = "0b10111111000010000101011111001101";
        ram[128] = "0b10111101100000001100101010000001";
        ram[129] = "0b10111101000001101110110101010010";
        ram[130] = "0b00111101110111110101101011000100";
        ram[131] = "0b10111110111000000100000010110100";
        ram[132] = "0b00111110001110111111111110111100";
        ram[133] = "0b10111110101001111100100100010010";
        ram[134] = "0b10111101111111001110100011110111";
        ram[135] = "0b10111110110011000000000010111011";
        ram[136] = "0b10111110100110110011110100010011";
        ram[137] = "0b00111110001100011000100000110110";
        ram[138] = "0b10111101101110010001000001010110";
        ram[139] = "0b00111100011010001000101000010101";
        ram[140] = "0b00111101001000010111111110000000";
        ram[141] = "0b00111101000001010010001101010011";
        ram[142] = "0b00111110110110001111100000011110";
        ram[143] = "0b10111110100101101111110110101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_conv_weights_0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 144;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_conv_weights_0_ram* meminst;


SC_CTOR(conv_conv_weights_0) {
meminst = new conv_conv_weights_0_ram("conv_conv_weights_0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_conv_weights_0() {
    delete meminst;
}


};//endmodule
#endif
