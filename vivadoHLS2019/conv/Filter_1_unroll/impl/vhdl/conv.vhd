-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.780550,HLS_SYN_LAT=495881,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=8,HLS_SYN_FF=918,HLS_SYN_LUT=2033,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (36 downto 0) := "0000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (36 downto 0) := "0000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (36 downto 0) := "0000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (36 downto 0) := "0000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (36 downto 0) := "0000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (36 downto 0) := "0000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (36 downto 0) := "0001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (36 downto 0) := "0010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (36 downto 0) := "0100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (36 downto 0) := "1000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_3_ce0 : STD_LOGIC;
    signal conv_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_4_ce0 : STD_LOGIC;
    signal conv_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_5_ce0 : STD_LOGIC;
    signal conv_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal grp_fu_370_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_402 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal add_ln8_fu_408_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_738 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_420_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_746 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_432_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_754 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_456_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_759 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_767 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_772 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_476_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_1_reg_777 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out_addr_reg_782 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_504_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_790 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln26_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_reg_795 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_542_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_800 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_558_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_813 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal zext_ln26_5_fu_586_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_reg_818 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln21_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_1_fu_626_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_832 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_1_4_reg_931 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_5_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal r_0_reg_270 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_282 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_294 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_306 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal wr_0_reg_317 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_328 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_reg_340 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_352 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_3_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_642_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_fu_370_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_fu_438_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_442_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_6_fu_448_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_fu_480_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_484_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_8_fu_514_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_510_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_494_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_532_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_542_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_564_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_568_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_573_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_3_fu_581_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_fu_548_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_591_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_6_fu_597_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_4_fu_601_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_614_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_606_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_622_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln26_fu_637_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_647_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_657_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_667_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_677_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_687_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_691_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_701_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_705_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_717_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_723_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln26_fu_542_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_conv_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_conv_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_conv_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_conv_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_weights_3_U : component conv_conv_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_address0,
        ce0 => conv_weights_3_ce0,
        q0 => conv_weights_3_q0);

    conv_weights_4_U : component conv_conv_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_address0,
        ce0 => conv_weights_4_ce0,
        q0 => conv_weights_4_q0);

    conv_weights_5_U : component conv_conv_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_address0,
        ce0 => conv_weights_5_ce0,
        q0 => conv_weights_5_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => grp_fu_363_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_363_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_370_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_370_p2);

    conv_fmul_32ns_32cud_U3 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_5_q0,
        din1 => input_r_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_380_p2);

    conv_fcmp_32ns_32dEe_U4 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_386_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_294_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_294 <= c_reg_754;
            elsif (((icmp_ln8_fu_414_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_294 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_306_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
                f_0_reg_306 <= f_reg_767;
            elsif (((icmp_ln11_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_306 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_282 <= add_ln8_reg_738;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_282 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_270 <= r_reg_746;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_270 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                w_sum_0_reg_328 <= w_sum_1_reg_340;
            elsif (((icmp_ln14_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_328 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                w_sum_1_reg_340 <= grp_fu_363_p2;
            elsif (((icmp_ln18_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_340 <= w_sum_0_reg_328;
            end if; 
        end if;
    end process;

    wc_0_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
                wc_0_reg_352 <= wc_reg_813;
            elsif (((icmp_ln18_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_352 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                wr_0_reg_317 <= wr_reg_790;
            elsif (((icmp_ln14_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_317 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_738 <= add_ln8_fu_408_p2;
                r_reg_746 <= r_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_754 <= c_fu_432_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_460_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_782 <= zext_ln35_3_fu_489_p1(11 - 1 downto 0);
                    zext_ln26_reg_772(4 downto 0) <= zext_ln26_fu_472_p1(4 downto 0);
                    zext_ln35_1_reg_777(4 downto 0) <= zext_ln35_1_fu_476_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_767 <= f_fu_466_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln26_reg_800 <= mul_ln26_fu_542_p2;
                sub_ln26_reg_795 <= sub_ln26_fu_526_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_397 <= grp_fu_370_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state20))) then
                reg_402 <= grp_fu_363_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_552_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln26_1_reg_832(10 downto 1) <= sub_ln26_1_fu_626_p2(10 downto 1);
                    zext_ln26_5_reg_818(8 downto 0) <= zext_ln26_5_fu_586_p1(8 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then
                tmp_1_4_reg_931 <= grp_fu_370_p2;
                tmp_1_5_reg_936 <= grp_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_813 <= wc_fu_558_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_790 <= wr_fu_504_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_426_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_759(10 downto 4) <= zext_ln14_fu_456_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_759(3 downto 0) <= "0000";
    zext_ln14_reg_759(11) <= '0';
    zext_ln26_reg_772(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_1_reg_777(8 downto 5) <= "0000";
    zext_ln26_5_reg_818(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    sub_ln26_1_reg_832(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_426_p2, ap_CS_fsm_state4, icmp_ln14_fu_460_p2, ap_CS_fsm_state5, icmp_ln18_fu_498_p2, ap_CS_fsm_state6, icmp_ln21_fu_552_p2, icmp_ln8_fu_414_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_426_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_460_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_498_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state6 => 
                if (((icmp_ln21_fu_552_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_591_p2 <= std_logic_vector(unsigned(c_0_reg_294) + unsigned(zext_ln21_fu_548_p1));
    add_ln26_2_fu_568_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_564_p1) + unsigned(sub_ln26_reg_795));
    add_ln26_3_fu_581_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_777) + unsigned(tmp_10_cast_fu_573_p3));
    add_ln26_4_fu_601_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_597_p1) + unsigned(mul_ln26_reg_800));
    add_ln26_5_fu_647_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_832) + unsigned(ap_const_lv11_2));
    add_ln26_6_fu_657_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_832) + unsigned(ap_const_lv11_3));
    add_ln26_7_fu_667_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_832) + unsigned(ap_const_lv11_4));
    add_ln26_8_fu_677_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_832) + unsigned(ap_const_lv11_5));
    add_ln26_fu_532_p2 <= std_logic_vector(unsigned(zext_ln18_fu_494_p1) + unsigned(r_0_reg_270));
    add_ln35_1_fu_484_p2 <= std_logic_vector(unsigned(zext_ln14_reg_759) + unsigned(zext_ln35_2_fu_480_p1));
    add_ln35_fu_442_p2 <= std_logic_vector(unsigned(phi_mul_reg_282) + unsigned(zext_ln35_fu_438_p1));
    add_ln8_fu_408_p2 <= std_logic_vector(unsigned(phi_mul_reg_282) + unsigned(ap_const_lv7_B));
    and_ln34_fu_723_p2 <= (or_ln34_fu_717_p2 and grp_fu_386_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_414_p2)
    begin
        if (((icmp_ln8_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_414_p2)
    begin
        if (((icmp_ln8_fu_414_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_687_p1 <= reg_402;
    c_fu_432_p2 <= std_logic_vector(unsigned(c_0_reg_294) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln26_reg_772(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_782;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_402 when (and_ln34_fu_723_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_5_fu_586_p1(8 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_5_reg_818(8 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_5_reg_818(8 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_address0 <= zext_ln26_5_reg_818(8 - 1 downto 0);

    conv_weights_3_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_address0 <= zext_ln26_5_reg_818(8 - 1 downto 0);

    conv_weights_4_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_weights_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_address0 <= zext_ln26_5_reg_818(8 - 1 downto 0);

    conv_weights_5_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_466_p2 <= std_logic_vector(unsigned(f_0_reg_306) + unsigned(ap_const_lv5_1));

    grp_fu_363_p0_assign_proc : process(reg_402, ap_CS_fsm_state21, ap_CS_fsm_state33, w_sum_0_reg_328, w_sum_1_reg_340, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state25, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_363_p0 <= w_sum_0_reg_328;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_363_p0 <= reg_402;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_363_p0 <= w_sum_1_reg_340;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p1_assign_proc : process(conv_bias_q0, reg_397, tmp_1_4_reg_931, ap_CS_fsm_state21, tmp_1_5_reg_936, ap_CS_fsm_state33, ap_CS_fsm_state9, ap_CS_fsm_state13, ap_CS_fsm_state17, ap_CS_fsm_state25, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_fu_363_p1 <= conv_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_363_p1 <= tmp_1_5_reg_936;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_fu_363_p1 <= tmp_1_4_reg_931;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            grp_fu_363_p1 <= reg_397;
        else 
            grp_fu_363_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_370_p0_assign_proc : process(conv_weights_0_q0, conv_weights_1_q0, conv_weights_2_q0, conv_weights_3_q0, conv_weights_4_q0, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            grp_fu_370_p0 <= conv_weights_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_370_p0 <= conv_weights_3_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_370_p0 <= conv_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_370_p0 <= conv_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_370_p0 <= conv_weights_0_q0;
        else 
            grp_fu_370_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_426_p2 <= "1" when (c_0_reg_294 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_460_p2 <= "1" when (f_0_reg_306 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_498_p2 <= "1" when (wr_0_reg_317 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_552_p2 <= "1" when (wc_0_reg_352 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_711_p2 <= "1" when (trunc_ln34_fu_701_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_705_p2 <= "0" when (tmp_fu_691_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_414_p2 <= "1" when (r_0_reg_270 = ap_const_lv4_B) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18, zext_ln26_8_fu_632_p1, zext_ln26_9_fu_642_p1, zext_ln26_10_fu_652_p1, zext_ln26_11_fu_662_p1, zext_ln26_12_fu_672_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_address0 <= zext_ln26_12_fu_672_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            input_r_address0 <= zext_ln26_11_fu_662_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            input_r_address0 <= zext_ln26_10_fu_652_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            input_r_address0 <= zext_ln26_9_fu_642_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_address0 <= zext_ln26_8_fu_632_p1(10 - 1 downto 0);
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= zext_ln26_13_fu_682_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_542_p0 <= mul_ln26_fu_542_p00(4 - 1 downto 0);
    mul_ln26_fu_542_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_532_p2),8));
    mul_ln26_fu_542_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_542_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln26_fu_637_p2 <= (sub_ln26_1_reg_832 or ap_const_lv11_1);
    or_ln34_fu_717_p2 <= (icmp_ln34_fu_705_p2 or icmp_ln34_1_fu_711_p2);
    p_shl1_cast_fu_606_p3 <= (add_ln26_4_fu_601_p2 & ap_const_lv3_0);
    r_fu_420_p2 <= std_logic_vector(unsigned(r_0_reg_270) + unsigned(ap_const_lv4_1));
    sub_ln26_1_fu_626_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_606_p3) - unsigned(zext_ln26_7_fu_622_p1));
    sub_ln26_fu_526_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_522_p1) - unsigned(zext_ln26_1_fu_510_p1));
    tmp_10_cast_fu_573_p3 <= (add_ln26_2_fu_568_p2 & ap_const_lv4_0);
    tmp_6_fu_448_p3 <= (add_ln35_fu_442_p2 & ap_const_lv4_0);
    tmp_7_fu_614_p3 <= (add_ln26_4_fu_601_p2 & ap_const_lv1_0);
    tmp_8_fu_514_p3 <= (wr_0_reg_317 & ap_const_lv2_0);
    tmp_fu_691_p4 <= bitcast_ln34_fu_687_p1(30 downto 23);
    trunc_ln34_fu_701_p1 <= bitcast_ln34_fu_687_p1(23 - 1 downto 0);
    wc_fu_558_p2 <= std_logic_vector(unsigned(wc_0_reg_352) + unsigned(ap_const_lv2_1));
    wr_fu_504_p2 <= std_logic_vector(unsigned(wr_0_reg_317) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_448_p3),12));
    zext_ln18_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_317),4));
    zext_ln21_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_352),4));
    zext_ln26_10_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_647_p2),64));
    zext_ln26_11_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_657_p2),64));
    zext_ln26_12_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_667_p2),64));
    zext_ln26_13_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_677_p2),64));
    zext_ln26_1_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_317),5));
    zext_ln26_2_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_514_p3),5));
    zext_ln26_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_352),5));
    zext_ln26_5_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_581_p2),64));
    zext_ln26_6_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_591_p2),8));
    zext_ln26_7_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_614_p3),11));
    zext_ln26_8_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_1_fu_626_p2),64));
    zext_ln26_9_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_637_p2),64));
    zext_ln26_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_306),64));
    zext_ln35_1_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_306),9));
    zext_ln35_2_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_306),12));
    zext_ln35_3_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_484_p2),64));
    zext_ln35_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_294),7));
end behav;
