-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110000010111001110101101", 
    1 => "10111111000111010110100000100101", 
    2 => "00111110000011100100101011000100", 
    3 => "10111110001011111111010111110111", 
    4 => "00111110001000101001100000010011", 
    5 => "10111101101010110100010100011001", 
    6 => "10111110010111101101011101101101", 
    7 => "10111101100001100100010000101010", 
    8 => "00111101111010110101101000100010", 
    9 => "00111110110100100001001111010111", 
    10 => "10111111000101101000111101010101", 
    11 => "10111101110101001001110101000101", 
    12 => "00111110100010100110100100001111", 
    13 => "00111100010011101101011010010111", 
    14 => "10111101001000001011001000001000", 
    15 => "00111110001011010110011001001011", 
    16 => "10111101111011101110111011110011", 
    17 => "10111110000000111100110011010001", 
    18 => "00111100100110010101111101001001", 
    19 => "00111101101101100000011001110111", 
    20 => "00111101010010100101110110000010", 
    21 => "00111110000000110000110111011101", 
    22 => "10111101101101000110100011111011", 
    23 => "00111101001010011100010110111010", 
    24 => "00111110100000010100001000111001", 
    25 => "10111101010001111110101000011110", 
    26 => "10111110001001010100111000111100", 
    27 => "10111110110101101101011110111100", 
    28 => "00111101001100011110001010100011", 
    29 => "10111110000101110100110101100100", 
    30 => "00111011101000100101110000100010", 
    31 => "00111110001101010010010010111101", 
    32 => "00111101000100111101000101010010", 
    33 => "00111110001001101111101010001011", 
    34 => "00111110010001000001110010011100", 
    35 => "10111100100000001001010110011110", 
    36 => "00111100110101001110101101100001", 
    37 => "00111110010010100111010101100101", 
    38 => "00111101100010011000100011100111", 
    39 => "10111110001111010101100111010110", 
    40 => "10111011101101110011010110011001", 
    41 => "10111110101101110110101111101100", 
    42 => "00111101011101101100101010001010", 
    43 => "10111111000011011000000101001000", 
    44 => "00111101111110010100001001101011", 
    45 => "00111110100010101011001101101111", 
    46 => "00111100101100110011010101110100", 
    47 => "00111011010010001100000000011011", 
    48 => "10111100000101000001111100100000", 
    49 => "10111110001111001111100111101011", 
    50 => "00111101100001000010011100010010", 
    51 => "00111101111010010010111001111010", 
    52 => "00111110000100011111011010010110", 
    53 => "10111110000111001110000011001000", 
    54 => "00111101010111110011110011111111", 
    55 => "10111100000010101111010101111111", 
    56 => "10111101110000110110000111110010", 
    57 => "00111110000111111100111011001100", 
    58 => "10111101110111011111111100111001", 
    59 => "10111110100110100001111001100100", 
    60 => "10111110010010100111110001011111", 
    61 => "00111101101110111001100110011010", 
    62 => "00111101110001001010111101110010", 
    63 => "00111101110000111110010000111001", 
    64 => "00111110000010100010101110000011", 
    65 => "10111101110111100010000010011111", 
    66 => "10111110001101101111110000011001", 
    67 => "00111101001001111010111000000111", 
    68 => "10111110010010000111010101001001", 
    69 => "00111110011010100101100000101100", 
    70 => "00111110001101011110001011000000", 
    71 => "10111101100000100001110101100011", 
    72 => "00111101010010101100001000001010", 
    73 => "00111011111111000110011010001010", 
    74 => "10111110010010011111101000111111", 
    75 => "00111101011101100011110111010110", 
    76 => "00111101101111010100111000010001", 
    77 => "00111101001001001010110001000101", 
    78 => "00111110000100010011100101011010", 
    79 => "10111110000011011011100110100011", 
    80 => "00111100011011011010101110101001", 
    81 => "10111110011111010101100011010111", 
    82 => "00111110110010000010101100111111", 
    83 => "00111101110110001101100101000001", 
    84 => "00111101111101001111111010100111", 
    85 => "00111110010011110001100011111011", 
    86 => "10111100101000110001111000001100", 
    87 => "00111110100010110101101011010110", 
    88 => "10111011111011101100100110010100", 
    89 => "10111101100001000100111011010001", 
    90 => "10111110100010001111011001000001", 
    91 => "10111100111110110110010100011100", 
    92 => "00111101110111111110100010001011", 
    93 => "00111110100010000101010110100101", 
    94 => "10111101110111101100101101100101", 
    95 => "10111100111011110100110000000011", 
    96 => "00111101001001100111110011111010", 
    97 => "00111110010111111011000100010100", 
    98 => "00111110001111101101010001010010", 
    99 => "10111101010111011011001101011010", 
    100 => "10111110010110001101001111010000", 
    101 => "10111110110110101101111101001010", 
    102 => "00111110100000100111010110110010", 
    103 => "10111110101100110111111001000011", 
    104 => "10111110100000000111100001001111", 
    105 => "10111101110101000000110111100100", 
    106 => "00111110010000001000111110111101", 
    107 => "10111101110111110111110110001011", 
    108 => "10111110010000111001010111101011", 
    109 => "10111110000101011100110010111001", 
    110 => "00111110010110000010100011101100", 
    111 => "10111110010101111010010010011111", 
    112 => "00111010111110001000111111110001", 
    113 => "00111011101001100101010111001110", 
    114 => "00111100100011000001110110011000", 
    115 => "00111101001000000100000011111111", 
    116 => "10111100100100000000000011110011", 
    117 => "10111100101110100001000100111001", 
    118 => "00111101100000111011101100010110", 
    119 => "00111101100111001000110010111100", 
    120 => "00111101110011001000110110110101", 
    121 => "10111101000001100010000000101101", 
    122 => "00111101101001011100110101101010", 
    123 => "00111110001000010010100101010111", 
    124 => "00111110010101011010000101011000", 
    125 => "00111101011101100100101000101001", 
    126 => "10111110010100111001001110001100", 
    127 => "00111011110001011000000110001000", 
    128 => "00111100011011101011001110111111", 
    129 => "10111100100101110001000111001000", 
    130 => "00111101101101111000001101101011", 
    131 => "00111110000001100011010101100010", 
    132 => "00111100001110001101111101101000", 
    133 => "00111110010100011101101001101010", 
    134 => "10111100110001000000011011011000", 
    135 => "10111101101001011111110001111110", 
    136 => "00111101110010000001100010110011", 
    137 => "00111110100001000010001011101010", 
    138 => "00111110000001101101000001111111", 
    139 => "00111110001001011111111100111010", 
    140 => "10111101101001011100011101101010", 
    141 => "00111101010110011000000000101001", 
    142 => "10111110101111010001000010110100", 
    143 => "00111101000000100010101100111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_2 is
    component conv_conv_weights_2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_2_rom_U :  component conv_conv_weights_2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


