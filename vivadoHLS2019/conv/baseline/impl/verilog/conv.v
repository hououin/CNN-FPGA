// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=792089,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=743,HLS_SYN_LUT=1570,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_state2 = 18'd2;
parameter    ap_ST_fsm_state3 = 18'd4;
parameter    ap_ST_fsm_state4 = 18'd8;
parameter    ap_ST_fsm_state5 = 18'd16;
parameter    ap_ST_fsm_state6 = 18'd32;
parameter    ap_ST_fsm_state7 = 18'd64;
parameter    ap_ST_fsm_state8 = 18'd128;
parameter    ap_ST_fsm_state9 = 18'd256;
parameter    ap_ST_fsm_state10 = 18'd512;
parameter    ap_ST_fsm_state11 = 18'd1024;
parameter    ap_ST_fsm_state12 = 18'd2048;
parameter    ap_ST_fsm_state13 = 18'd4096;
parameter    ap_ST_fsm_state14 = 18'd8192;
parameter    ap_ST_fsm_state15 = 18'd16384;
parameter    ap_ST_fsm_state16 = 18'd32768;
parameter    ap_ST_fsm_state17 = 18'd65536;
parameter    ap_ST_fsm_state18 = 18'd131072;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire   [6:0] add_ln8_fu_286_p2;
reg   [6:0] add_ln8_reg_624;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_298_p2;
reg   [3:0] r_reg_632;
wire   [3:0] c_fu_310_p2;
reg   [3:0] c_reg_640;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln14_fu_334_p1;
reg   [11:0] zext_ln14_reg_645;
wire   [0:0] icmp_ln11_fu_304_p2;
wire   [4:0] f_fu_344_p2;
reg   [4:0] f_reg_653;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_350_p1;
reg   [63:0] zext_ln26_reg_658;
wire   [0:0] icmp_ln14_fu_338_p2;
wire   [10:0] zext_ln35_1_fu_354_p1;
reg   [10:0] zext_ln35_1_reg_663;
reg   [10:0] conv_out_addr_reg_668;
wire   [1:0] wr_fu_382_p2;
reg   [1:0] wr_reg_676;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln26_fu_410_p1;
reg  signed [5:0] sext_ln26_reg_681;
wire   [0:0] icmp_ln18_fu_376_p2;
wire   [7:0] mul_ln26_fu_424_p2;
reg   [7:0] mul_ln26_reg_686;
wire   [1:0] wc_fu_440_p2;
reg   [1:0] wc_reg_699;
wire    ap_CS_fsm_state6;
wire   [6:0] sub_ln26_1_fu_475_p2;
reg   [6:0] sub_ln26_1_reg_704;
wire   [0:0] icmp_ln21_fu_434_p2;
wire   [10:0] sub_ln26_2_fu_516_p2;
reg   [10:0] sub_ln26_2_reg_709;
wire   [2:0] ch_fu_528_p2;
reg   [2:0] ch_reg_717;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln24_fu_522_p2;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_274_p2;
reg   [31:0] tmp_1_reg_742;
wire    ap_CS_fsm_state9;
wire   [31:0] grp_fu_267_p2;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
reg   [31:0] w_sum_reg_757;
wire    ap_CS_fsm_state17;
reg   [3:0] r_0_reg_151;
reg   [6:0] phi_mul_reg_163;
reg   [3:0] c_0_reg_175;
wire   [0:0] icmp_ln8_fu_292_p2;
reg   [4:0] f_0_reg_187;
wire    ap_CS_fsm_state18;
reg   [1:0] wr_0_reg_198;
reg   [31:0] w_sum_0_reg_209;
reg   [31:0] w_sum_1_reg_221;
reg   [1:0] wc_0_reg_233;
reg   [31:0] w_sum_2_reg_244;
reg   [2:0] ch_0_reg_256;
wire   [63:0] zext_ln35_3_fu_367_p1;
wire   [63:0] zext_ln26_9_fu_560_p1;
wire   [63:0] zext_ln26_10_fu_570_p1;
reg   [31:0] grp_fu_267_p0;
reg   [31:0] grp_fu_267_p1;
wire    ap_CS_fsm_state10;
wire   [6:0] zext_ln35_fu_316_p1;
wire   [6:0] add_ln35_fu_320_p2;
wire   [10:0] tmp_8_fu_326_p3;
wire   [11:0] zext_ln35_2_fu_358_p1;
wire   [11:0] add_ln35_1_fu_362_p2;
wire   [3:0] tmp_s_fu_392_p3;
wire   [4:0] zext_ln26_2_fu_400_p1;
wire   [4:0] zext_ln26_1_fu_388_p1;
wire   [4:0] sub_ln26_fu_404_p2;
wire   [3:0] zext_ln18_fu_372_p1;
wire   [3:0] add_ln26_fu_414_p2;
wire   [3:0] mul_ln26_fu_424_p0;
wire   [5:0] zext_ln26_4_fu_446_p1;
wire   [5:0] add_ln26_2_fu_450_p2;
wire   [3:0] trunc_ln26_fu_455_p1;
wire   [6:0] p_shl_fu_459_p3;
wire   [6:0] tmp_9_fu_467_p3;
wire   [3:0] zext_ln21_fu_430_p1;
wire   [3:0] add_ln26_1_fu_481_p2;
wire   [7:0] zext_ln26_6_fu_487_p1;
wire   [7:0] add_ln26_3_fu_491_p2;
wire   [8:0] tmp_10_fu_504_p3;
wire   [10:0] p_shl1_cast_fu_496_p3;
wire   [10:0] zext_ln26_7_fu_512_p1;
wire   [6:0] zext_ln26_5_fu_534_p1;
wire   [6:0] add_ln26_4_fu_542_p2;
wire   [10:0] tmp_16_cast_fu_547_p3;
wire   [10:0] add_ln26_5_fu_555_p2;
wire   [10:0] zext_ln26_8_fu_538_p1;
wire   [10:0] add_ln26_6_fu_565_p2;
wire   [31:0] bitcast_ln34_fu_575_p1;
wire   [7:0] tmp_fu_578_p4;
wire   [22:0] trunc_ln34_fu_588_p1;
wire   [0:0] icmp_ln34_1_fu_598_p2;
wire   [0:0] icmp_ln34_fu_592_p2;
wire   [0:0] or_ln34_fu_604_p2;
wire   [0:0] grp_fu_280_p2;
wire   [0:0] and_ln34_fu_610_p2;
reg   [17:0] ap_NS_fsm;
wire   [7:0] mul_ln26_fu_424_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
end

conv_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 864 ),
    .AddressWidth( 10 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_267_p0),
    .din1(grp_fu_267_p1),
    .ce(1'b1),
    .dout(grp_fu_267_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_274_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_267_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_280_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_175 <= c_reg_640;
    end else if (((icmp_ln8_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_175 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ch_0_reg_256 <= ch_reg_717;
    end else if (((icmp_ln21_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ch_0_reg_256 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        f_0_reg_187 <= f_reg_653;
    end else if (((icmp_ln11_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_187 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_163 <= add_ln8_reg_624;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_163 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_151 <= r_reg_632;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_151 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_434_p2 == 1'd1))) begin
        w_sum_0_reg_209 <= w_sum_1_reg_221;
    end else if (((icmp_ln14_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_209 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln24_fu_522_p2 == 1'd1))) begin
        w_sum_1_reg_221 <= w_sum_2_reg_244;
    end else if (((icmp_ln18_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_221 <= w_sum_0_reg_209;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        w_sum_2_reg_244 <= grp_fu_267_p2;
    end else if (((icmp_ln21_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        w_sum_2_reg_244 <= w_sum_1_reg_221;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln24_fu_522_p2 == 1'd1))) begin
        wc_0_reg_233 <= wc_reg_699;
    end else if (((icmp_ln18_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_233 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_434_p2 == 1'd1))) begin
        wr_0_reg_198 <= wr_reg_676;
    end else if (((icmp_ln14_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_198 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_624 <= add_ln8_fu_286_p2;
        r_reg_632 <= r_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_640 <= c_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ch_reg_717 <= ch_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_338_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_addr_reg_668 <= zext_ln35_3_fu_367_p1;
        zext_ln26_reg_658[4 : 0] <= zext_ln26_fu_350_p1[4 : 0];
        zext_ln35_1_reg_663[4 : 0] <= zext_ln35_1_fu_354_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_653 <= f_fu_344_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln26_reg_686 <= mul_ln26_fu_424_p2;
        sext_ln26_reg_681 <= sext_ln26_fu_410_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_434_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln26_1_reg_704[6 : 1] <= sub_ln26_1_fu_475_p2[6 : 1];
        sub_ln26_2_reg_709[10 : 1] <= sub_ln26_2_fu_516_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_1_reg_742 <= grp_fu_274_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        w_sum_reg_757 <= grp_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_699 <= wc_fu_440_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_676 <= wr_fu_382_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln14_reg_645[10 : 4] <= zext_ln14_fu_334_p1[10 : 4];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_292_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_292_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_267_p0 = w_sum_0_reg_209;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_267_p0 = w_sum_2_reg_244;
    end else begin
        grp_fu_267_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_267_p1 = conv_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_267_p1 = tmp_1_reg_742;
    end else begin
        grp_fu_267_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_338_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_376_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_434_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln24_fu_522_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_481_p2 = (c_0_reg_175 + zext_ln21_fu_430_p1);

assign add_ln26_2_fu_450_p2 = ($signed(zext_ln26_4_fu_446_p1) + $signed(sext_ln26_reg_681));

assign add_ln26_3_fu_491_p2 = (zext_ln26_6_fu_487_p1 + mul_ln26_reg_686);

assign add_ln26_4_fu_542_p2 = (zext_ln26_5_fu_534_p1 + sub_ln26_1_reg_704);

assign add_ln26_5_fu_555_p2 = (zext_ln35_1_reg_663 + tmp_16_cast_fu_547_p3);

assign add_ln26_6_fu_565_p2 = (zext_ln26_8_fu_538_p1 + sub_ln26_2_reg_709);

assign add_ln26_fu_414_p2 = (zext_ln18_fu_372_p1 + r_0_reg_151);

assign add_ln35_1_fu_362_p2 = (zext_ln14_reg_645 + zext_ln35_2_fu_358_p1);

assign add_ln35_fu_320_p2 = (phi_mul_reg_163 + zext_ln35_fu_316_p1);

assign add_ln8_fu_286_p2 = (phi_mul_reg_163 + 7'd11);

assign and_ln34_fu_610_p2 = (or_ln34_fu_604_p2 & grp_fu_280_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_575_p1 = w_sum_reg_757;

assign c_fu_310_p2 = (c_0_reg_175 + 4'd1);

assign ch_fu_528_p2 = (ch_0_reg_256 + 3'd1);

assign conv_bias_address0 = zext_ln26_reg_658;

assign conv_out_address0 = conv_out_addr_reg_668;

assign conv_out_d0 = ((and_ln34_fu_610_p2[0:0] === 1'b1) ? w_sum_reg_757 : 32'd0);

assign conv_weights_address0 = zext_ln26_9_fu_560_p1;

assign f_fu_344_p2 = (f_0_reg_187 + 5'd1);

assign icmp_ln11_fu_304_p2 = ((c_0_reg_175 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_338_p2 = ((f_0_reg_187 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_376_p2 = ((wr_0_reg_198 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_434_p2 = ((wc_0_reg_233 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_522_p2 = ((ch_0_reg_256 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_598_p2 = ((trunc_ln34_fu_588_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_592_p2 = ((tmp_fu_578_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_292_p2 = ((r_0_reg_151 == 4'd11) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln26_10_fu_570_p1;

assign mul_ln26_fu_424_p0 = mul_ln26_fu_424_p00;

assign mul_ln26_fu_424_p00 = add_ln26_fu_414_p2;

assign mul_ln26_fu_424_p2 = (mul_ln26_fu_424_p0 * $signed('hD));

assign or_ln34_fu_604_p2 = (icmp_ln34_fu_592_p2 | icmp_ln34_1_fu_598_p2);

assign p_shl1_cast_fu_496_p3 = {{add_ln26_3_fu_491_p2}, {3'd0}};

assign p_shl_fu_459_p3 = {{trunc_ln26_fu_455_p1}, {3'd0}};

assign r_fu_298_p2 = (r_0_reg_151 + 4'd1);

assign sext_ln26_fu_410_p1 = $signed(sub_ln26_fu_404_p2);

assign sub_ln26_1_fu_475_p2 = (p_shl_fu_459_p3 - tmp_9_fu_467_p3);

assign sub_ln26_2_fu_516_p2 = (p_shl1_cast_fu_496_p3 - zext_ln26_7_fu_512_p1);

assign sub_ln26_fu_404_p2 = (zext_ln26_2_fu_400_p1 - zext_ln26_1_fu_388_p1);

assign tmp_10_fu_504_p3 = {{add_ln26_3_fu_491_p2}, {1'd0}};

assign tmp_16_cast_fu_547_p3 = {{add_ln26_4_fu_542_p2}, {4'd0}};

assign tmp_8_fu_326_p3 = {{add_ln35_fu_320_p2}, {4'd0}};

assign tmp_9_fu_467_p3 = {{add_ln26_2_fu_450_p2}, {1'd0}};

assign tmp_fu_578_p4 = {{bitcast_ln34_fu_575_p1[30:23]}};

assign tmp_s_fu_392_p3 = {{wr_0_reg_198}, {2'd0}};

assign trunc_ln26_fu_455_p1 = add_ln26_2_fu_450_p2[3:0];

assign trunc_ln34_fu_588_p1 = bitcast_ln34_fu_575_p1[22:0];

assign wc_fu_440_p2 = (wc_0_reg_233 + 2'd1);

assign wr_fu_382_p2 = (wr_0_reg_198 + 2'd1);

assign zext_ln14_fu_334_p1 = tmp_8_fu_326_p3;

assign zext_ln18_fu_372_p1 = wr_0_reg_198;

assign zext_ln21_fu_430_p1 = wc_0_reg_233;

assign zext_ln26_10_fu_570_p1 = add_ln26_6_fu_565_p2;

assign zext_ln26_1_fu_388_p1 = wr_0_reg_198;

assign zext_ln26_2_fu_400_p1 = tmp_s_fu_392_p3;

assign zext_ln26_4_fu_446_p1 = wc_0_reg_233;

assign zext_ln26_5_fu_534_p1 = ch_0_reg_256;

assign zext_ln26_6_fu_487_p1 = add_ln26_1_fu_481_p2;

assign zext_ln26_7_fu_512_p1 = tmp_10_fu_504_p3;

assign zext_ln26_8_fu_538_p1 = ch_0_reg_256;

assign zext_ln26_9_fu_560_p1 = add_ln26_5_fu_555_p2;

assign zext_ln26_fu_350_p1 = f_0_reg_187;

assign zext_ln35_1_fu_354_p1 = f_0_reg_187;

assign zext_ln35_2_fu_358_p1 = f_0_reg_187;

assign zext_ln35_3_fu_367_p1 = add_ln35_1_fu_362_p2;

assign zext_ln35_fu_316_p1 = c_0_reg_175;

always @ (posedge ap_clk) begin
    zext_ln14_reg_645[3:0] <= 4'b0000;
    zext_ln14_reg_645[11] <= 1'b0;
    zext_ln26_reg_658[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_663[10:5] <= 6'b000000;
    sub_ln26_1_reg_704[0] <= 1'b0;
    sub_ln26_2_reg_709[0] <= 1'b0;
end

endmodule //conv
