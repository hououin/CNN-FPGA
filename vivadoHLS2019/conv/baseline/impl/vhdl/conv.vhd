-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=792089,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=743,HLS_SYN_LUT=1570,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_286_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_624 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_298_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_632 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_310_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_640 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_334_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_645 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_344_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_653 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_350_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_658 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_354_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_reg_663 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_668 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_382_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_676 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln26_fu_410_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_reg_681 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_424_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_686 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_440_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_699 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln26_1_fu_475_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_reg_704 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_2_fu_516_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_reg_709 : STD_LOGIC_VECTOR (10 downto 0);
    signal ch_fu_528_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_717 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln24_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal w_sum_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_0_reg_151 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_163 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_175 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal wr_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_233 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_256 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_3_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_560_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln35_fu_316_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_320_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_326_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_fu_358_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_362_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_392_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_400_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_388_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_404_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_372_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_414_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_424_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_446_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_450_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_455_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_459_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_467_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_430_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_481_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_6_fu_487_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_3_fu_491_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_504_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_496_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_512_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_5_fu_534_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_542_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_16_cast_fu_547_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_555_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_8_fu_538_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_565_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_578_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_588_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln26_fu_424_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p0,
        din1 => grp_fu_267_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_274_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_280_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_175 <= c_reg_640;
            elsif (((icmp_ln8_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_175 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_reg_256 <= ch_reg_717;
            elsif (((icmp_ln21_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_256 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                f_0_reg_187 <= f_reg_653;
            elsif (((icmp_ln11_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_187 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_163 <= add_ln8_reg_624;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_163 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_151 <= r_reg_632;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_151 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_434_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_209 <= w_sum_1_reg_221;
            elsif (((icmp_ln14_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_209 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_522_p2 = ap_const_lv1_1))) then 
                w_sum_1_reg_221 <= w_sum_2_reg_244;
            elsif (((icmp_ln18_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_221 <= w_sum_0_reg_209;
            end if; 
        end if;
    end process;

    w_sum_2_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_sum_2_reg_244 <= grp_fu_267_p2;
            elsif (((icmp_ln21_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                w_sum_2_reg_244 <= w_sum_1_reg_221;
            end if; 
        end if;
    end process;

    wc_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_522_p2 = ap_const_lv1_1))) then 
                wc_0_reg_233 <= wc_reg_699;
            elsif (((icmp_ln18_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_233 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_434_p2 = ap_const_lv1_1))) then 
                wr_0_reg_198 <= wr_reg_676;
            elsif (((icmp_ln14_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_198 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_624 <= add_ln8_fu_286_p2;
                r_reg_632 <= r_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_640 <= c_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ch_reg_717 <= ch_fu_528_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_338_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_668 <= zext_ln35_3_fu_367_p1(11 - 1 downto 0);
                    zext_ln26_reg_658(4 downto 0) <= zext_ln26_fu_350_p1(4 downto 0);
                    zext_ln35_1_reg_663(4 downto 0) <= zext_ln35_1_fu_354_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_653 <= f_fu_344_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln26_reg_686 <= mul_ln26_fu_424_p2;
                sext_ln26_reg_681 <= sext_ln26_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_434_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln26_1_reg_704(6 downto 1) <= sub_ln26_1_fu_475_p2(6 downto 1);
                    sub_ln26_2_reg_709(10 downto 1) <= sub_ln26_2_fu_516_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_1_reg_742 <= grp_fu_274_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                w_sum_reg_757 <= grp_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_699 <= wc_fu_440_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_676 <= wr_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_645(10 downto 4) <= zext_ln14_fu_334_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_645(3 downto 0) <= "0000";
    zext_ln14_reg_645(11) <= '0';
    zext_ln26_reg_658(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_1_reg_663(10 downto 5) <= "000000";
    sub_ln26_1_reg_704(0) <= '0';
    sub_ln26_2_reg_709(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_304_p2, ap_CS_fsm_state4, icmp_ln14_fu_338_p2, ap_CS_fsm_state5, icmp_ln18_fu_376_p2, ap_CS_fsm_state6, icmp_ln21_fu_434_p2, ap_CS_fsm_state7, icmp_ln24_fu_522_p2, icmp_ln8_fu_292_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_338_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_376_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_434_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_522_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_481_p2 <= std_logic_vector(unsigned(c_0_reg_175) + unsigned(zext_ln21_fu_430_p1));
    add_ln26_2_fu_450_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_446_p1) + unsigned(sext_ln26_reg_681));
    add_ln26_3_fu_491_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_487_p1) + unsigned(mul_ln26_reg_686));
    add_ln26_4_fu_542_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_534_p1) + unsigned(sub_ln26_1_reg_704));
    add_ln26_5_fu_555_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_663) + unsigned(tmp_16_cast_fu_547_p3));
    add_ln26_6_fu_565_p2 <= std_logic_vector(unsigned(zext_ln26_8_fu_538_p1) + unsigned(sub_ln26_2_reg_709));
    add_ln26_fu_414_p2 <= std_logic_vector(unsigned(zext_ln18_fu_372_p1) + unsigned(r_0_reg_151));
    add_ln35_1_fu_362_p2 <= std_logic_vector(unsigned(zext_ln14_reg_645) + unsigned(zext_ln35_2_fu_358_p1));
    add_ln35_fu_320_p2 <= std_logic_vector(unsigned(phi_mul_reg_163) + unsigned(zext_ln35_fu_316_p1));
    add_ln8_fu_286_p2 <= std_logic_vector(unsigned(phi_mul_reg_163) + unsigned(ap_const_lv7_B));
    and_ln34_fu_610_p2 <= (or_ln34_fu_604_p2 and grp_fu_280_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_292_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_292_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_575_p1 <= w_sum_reg_757;
    c_fu_310_p2 <= std_logic_vector(unsigned(c_0_reg_175) + unsigned(ap_const_lv4_1));
    ch_fu_528_p2 <= std_logic_vector(unsigned(ch_0_reg_256) + unsigned(ap_const_lv3_1));
    conv_bias_address0 <= zext_ln26_reg_658(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_668;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_757 when (and_ln34_fu_610_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_address0 <= zext_ln26_9_fu_560_p1(10 - 1 downto 0);

    conv_weights_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_344_p2 <= std_logic_vector(unsigned(f_0_reg_187) + unsigned(ap_const_lv5_1));

    grp_fu_267_p0_assign_proc : process(ap_CS_fsm_state14, w_sum_0_reg_209, w_sum_2_reg_244, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_267_p0 <= w_sum_0_reg_209;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_267_p0 <= w_sum_2_reg_244;
        else 
            grp_fu_267_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_267_p1_assign_proc : process(conv_bias_q0, tmp_1_reg_742, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_267_p1 <= conv_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_267_p1 <= tmp_1_reg_742;
        else 
            grp_fu_267_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_304_p2 <= "1" when (c_0_reg_175 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_338_p2 <= "1" when (f_0_reg_187 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_376_p2 <= "1" when (wr_0_reg_198 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_434_p2 <= "1" when (wc_0_reg_233 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_522_p2 <= "1" when (ch_0_reg_256 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_598_p2 <= "1" when (trunc_ln34_fu_588_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_592_p2 <= "0" when (tmp_fu_578_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_292_p2 <= "1" when (r_0_reg_151 = ap_const_lv4_B) else "0";
    input_r_address0 <= zext_ln26_10_fu_570_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_424_p0 <= mul_ln26_fu_424_p00(4 - 1 downto 0);
    mul_ln26_fu_424_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_414_p2),8));
    mul_ln26_fu_424_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_424_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln34_fu_604_p2 <= (icmp_ln34_fu_592_p2 or icmp_ln34_1_fu_598_p2);
    p_shl1_cast_fu_496_p3 <= (add_ln26_3_fu_491_p2 & ap_const_lv3_0);
    p_shl_fu_459_p3 <= (trunc_ln26_fu_455_p1 & ap_const_lv3_0);
    r_fu_298_p2 <= std_logic_vector(unsigned(r_0_reg_151) + unsigned(ap_const_lv4_1));
        sext_ln26_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_404_p2),6));

    sub_ln26_1_fu_475_p2 <= std_logic_vector(unsigned(p_shl_fu_459_p3) - unsigned(tmp_9_fu_467_p3));
    sub_ln26_2_fu_516_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_496_p3) - unsigned(zext_ln26_7_fu_512_p1));
    sub_ln26_fu_404_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_400_p1) - unsigned(zext_ln26_1_fu_388_p1));
    tmp_10_fu_504_p3 <= (add_ln26_3_fu_491_p2 & ap_const_lv1_0);
    tmp_16_cast_fu_547_p3 <= (add_ln26_4_fu_542_p2 & ap_const_lv4_0);
    tmp_8_fu_326_p3 <= (add_ln35_fu_320_p2 & ap_const_lv4_0);
    tmp_9_fu_467_p3 <= (add_ln26_2_fu_450_p2 & ap_const_lv1_0);
    tmp_fu_578_p4 <= bitcast_ln34_fu_575_p1(30 downto 23);
    tmp_s_fu_392_p3 <= (wr_0_reg_198 & ap_const_lv2_0);
    trunc_ln26_fu_455_p1 <= add_ln26_2_fu_450_p2(4 - 1 downto 0);
    trunc_ln34_fu_588_p1 <= bitcast_ln34_fu_575_p1(23 - 1 downto 0);
    wc_fu_440_p2 <= std_logic_vector(unsigned(wc_0_reg_233) + unsigned(ap_const_lv2_1));
    wr_fu_382_p2 <= std_logic_vector(unsigned(wr_0_reg_198) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_334_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_326_p3),12));
    zext_ln18_fu_372_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_198),4));
    zext_ln21_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_233),4));
    zext_ln26_10_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_565_p2),64));
    zext_ln26_1_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_198),5));
    zext_ln26_2_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_392_p3),5));
    zext_ln26_4_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_233),6));
    zext_ln26_5_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_256),7));
    zext_ln26_6_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_481_p2),8));
    zext_ln26_7_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_504_p3),11));
    zext_ln26_8_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_256),11));
    zext_ln26_9_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_555_p2),64));
    zext_ln26_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),64));
    zext_ln35_1_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),11));
    zext_ln35_2_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),12));
    zext_ln35_3_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_362_p2),64));
    zext_ln35_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_175),7));
end behav;
