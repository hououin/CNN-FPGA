-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_1_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_1_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000111000001111001000111", 
    1 => "10111101101111101100101010010110", 
    2 => "00111110010011011000110101111111", 
    3 => "10111101111000010011000010111101", 
    4 => "10111100000100000101101111000111", 
    5 => "00111110001011100110001010011100", 
    6 => "10111101101101110111111000101110", 
    7 => "10111100100010010011000101001011", 
    8 => "00111101110101000110010010111110", 
    9 => "00111110000010001000010001011111", 
    10 => "10111110111010101100100110001101", 
    11 => "10111110011001011110100110011000", 
    12 => "00111110011110100100100010101000", 
    13 => "10111110001010010001101110101010", 
    14 => "10111100010000101011001001010110", 
    15 => "10111100101100100101100100100010", 
    16 => "10111101111001100101101010101001", 
    17 => "10111101010011111110110010100111", 
    18 => "10111101010100000010110110001110", 
    19 => "00111110001000010100010111010100", 
    20 => "00111110000000001011100011110010", 
    21 => "00111101011100100000111101011011", 
    22 => "10111110000101001101000001010110", 
    23 => "00111101111001110010001110101010", 
    24 => "10111101100101110111010100110000", 
    25 => "10111101111000010111111001101001", 
    26 => "10111110001010111111100011011001", 
    27 => "10111110111011000000011101000001", 
    28 => "10111101010111111001110101000010", 
    29 => "00111100100100001010011111100001", 
    30 => "00111110101011011101010000010101", 
    31 => "00111101110010110011011100000111", 
    32 => "10111101001001001101001000010000", 
    33 => "00111101101100000000110110100101", 
    34 => "00111110000110011011000000010100", 
    35 => "00111101111000110100000110111001", 
    36 => "00111101010100000001101100010000", 
    37 => "00111110011001010010111100000101", 
    38 => "00111110000111100110110010011010", 
    39 => "00111101100011011100110001110100", 
    40 => "10111100010101011010001100000001", 
    41 => "10111110101111110100000001011110", 
    42 => "10111101100110101010011011001011", 
    43 => "10111110101000100000101011011010", 
    44 => "10111101110010111000000110111000", 
    45 => "00111101111000010000101100100001", 
    46 => "10111101111011101000111010101011", 
    47 => "10111101001100111001100001001000", 
    48 => "00111101111010000101011010001101", 
    49 => "10111110011011100011110100111101", 
    50 => "10111110001111010011111110100110", 
    51 => "00111101101001001001110100010010", 
    52 => "00111101100101110000101010010100", 
    53 => "10111100011000011000101011001011", 
    54 => "00111110011110110101111110111010", 
    55 => "00111101000111100000001010101110", 
    56 => "00111101100101101011101101010100", 
    57 => "00111101101110010001001010110111", 
    58 => "00111101000001000010100111011110", 
    59 => "00111101101000111011110101010000", 
    60 => "00111101000111100100100111111110", 
    61 => "10111110010100000000110010111111", 
    62 => "00111110010011111100001010000100", 
    63 => "10111100111100110011110011001000", 
    64 => "10111101011100010111000000110011", 
    65 => "10111100011011011111011111101101", 
    66 => "00111101110111111011001110001000", 
    67 => "10111101101101100000010101101100", 
    68 => "00111100101000010110101011010101", 
    69 => "10111011111010011001101100000001", 
    70 => "00111110010101001011000010010001", 
    71 => "00111110010011010011010111011111", 
    72 => "00111101111111101000101000011110", 
    73 => "10111110100001101010001101011000", 
    74 => "10111100100100000010100011111001", 
    75 => "00111100011010110000111100011010", 
    76 => "00111101000110000100011100101111", 
    77 => "10111100010001101001100000010010", 
    78 => "00111110010011100011011000101110", 
    79 => "00111100111101110100011100000010", 
    80 => "10111110001010001110111111011011", 
    81 => "10111101101111110010010001101011", 
    82 => "00111110001010101111001000111001", 
    83 => "00111110000111010001100011000101", 
    84 => "00111110100111100000010010000000", 
    85 => "00111101011100100010111000000011", 
    86 => "00111101000111100011101011001101", 
    87 => "00111101110010110010101010000011", 
    88 => "10111101010101110000100100111000", 
    89 => "00111100101100001010101101100101", 
    90 => "10111101101010110101110100010000", 
    91 => "00111101111110101000010001110101", 
    92 => "10111110000110100110111000011010", 
    93 => "00111110010111000010110000001101", 
    94 => "10111110110011000011001111101101", 
    95 => "00111101101110010001110000111001", 
    96 => "10111110001001101010101111011011", 
    97 => "10111101110010011010001011001110", 
    98 => "10111100000110000100001000100111", 
    99 => "00111101100011101101100011111011", 
    100 => "10111110101111010111111001000111", 
    101 => "10111110101001101001010100010110", 
    102 => "00111101100101101100100011111101", 
    103 => "10111110011101001000010011111100", 
    104 => "10111101100011100011110011010101", 
    105 => "10111110001110000010010100010100", 
    106 => "00111101011100011010111001111011", 
    107 => "10111110000010111110010011000110", 
    108 => "00111100111011001101000011000001", 
    109 => "10111101110100111111000000101010", 
    110 => "00111101011000010001001100011110", 
    111 => "00111101000010110011000000011010", 
    112 => "10111110000001001011000000011000", 
    113 => "10111110000011010100001011100101", 
    114 => "00111110000011001001101100101011", 
    115 => "10111101000011011101111111110010", 
    116 => "10111101000110000000001000001110", 
    117 => "10111100001100111000111100000011", 
    118 => "10111100100111101111001001000101", 
    119 => "10111101111100001001010101100100", 
    120 => "10111101111001010100001100011000", 
    121 => "00111101101001101110110011101111", 
    122 => "10111101101100101111100001001100", 
    123 => "00111101111010101110010001010111", 
    124 => "00111100111000010011000110011100", 
    125 => "10111101100011101110101100101000", 
    126 => "00111100100010001011101010111001", 
    127 => "00111100100110110001011000110001", 
    128 => "10111101110001011111100101001111", 
    129 => "10111101110110110101010101011010", 
    130 => "10111110010011000101001100110011", 
    131 => "00111101010011111110010111010101", 
    132 => "00111110001001110011101101010101", 
    133 => "10111011101001111100001100111100", 
    134 => "10111100100010100111010110011100", 
    135 => "10111110110101001001000011011100", 
    136 => "00111110000010001011010001011000", 
    137 => "00111110010110001001110111110001", 
    138 => "00111101110100011101100101010110", 
    139 => "00111110000010101010101000000110", 
    140 => "10111101010100001100110111000011", 
    141 => "00111101000001101100111001100100", 
    142 => "10111101100011010111111111101011", 
    143 => "00111110001011101111001010010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_1 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_1 is
    component conv_conv_weights_1_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_1_rom_U :  component conv_conv_weights_1_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


