-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000000101010010101100011", 
    1 => "00111101010000001100011011011111", 
    2 => "00111101011000100110101110110111", 
    3 => "10111101000110010110110010111010", 
    4 => "10111101100110111001111001100100", 
    5 => "00111101000100000101100101100100", 
    6 => "10111101111110000101001010000001", 
    7 => "00111110010100001000101110111011", 
    8 => "00111110011110101100010110010110", 
    9 => "10111110001111001111010101100100", 
    10 => "10111101010011101110000001011100", 
    11 => "10111101111000101100111101110000", 
    12 => "00111110110000010110000000010000", 
    13 => "00111110011010011000100111111110", 
    14 => "10111110001111101111111001111110", 
    15 => "10111101111101100001101111111110", 
    16 => "00111101011011101001100011000010", 
    17 => "00111101110011100111000110011100", 
    18 => "10111101101010101011000101010010", 
    19 => "10111100110110111111010010111001", 
    20 => "10111110001001011110110110110101", 
    21 => "10111110110011010010010101001001", 
    22 => "00111011001011010110100101000011", 
    23 => "00111101101101010100110111001010", 
    24 => "00111110001101110011111111111001", 
    25 => "10111110011110010110110100101100", 
    26 => "00111110101010010110011111110001", 
    27 => "00111101101101001010011101011100", 
    28 => "00111111000011100010101001111100", 
    29 => "10111110111110101000001101111001", 
    30 => "10111101001101110011011000110000", 
    31 => "10111110010000101110101001001100", 
    32 => "10111110001000011101011110101100", 
    33 => "10111111001001100000100000100011", 
    34 => "00111110011111000111001100111100", 
    35 => "00111100110011010100001111000100", 
    36 => "10111110100010010000001001000100", 
    37 => "10111110000111001100101111010011", 
    38 => "10111110110010101111000101100100", 
    39 => "10111100001011110010000001100000", 
    40 => "10111101111010001110000110001010", 
    41 => "10111110110000100101101100001101", 
    42 => "10111101111001010001101101111011", 
    43 => "00111110110110111100111100110110", 
    44 => "00111110000011110011010010000000", 
    45 => "10111101111010000100000100110100", 
    46 => "10111101101110111111101001110001", 
    47 => "10111100011110100001100001011010", 
    48 => "00111110001101001101110110000110", 
    49 => "00111110100111011001101000000101", 
    50 => "00111010100000101000000101101001", 
    51 => "00111110010000110111010010010010", 
    52 => "00111110001111110100101110011010", 
    53 => "10111110001110100011101010111010", 
    54 => "10111110001111011100110110101111", 
    55 => "10111110000101000110000000100101", 
    56 => "10111101101110100001000011000010", 
    57 => "10111110100011110110110011100111", 
    58 => "00111101010100001010001010000101", 
    59 => "10111110110001111100001000010100", 
    60 => "10111110001010000001100000010111", 
    61 => "00111101111110010000000100100010", 
    62 => "00111101011000011010110011101000", 
    63 => "00111110000100000110110110001000", 
    64 => "10111101010010011011011101111010", 
    65 => "00111110110011001011110000110110", 
    66 => "10111100110001101111011100000100", 
    67 => "10111110101010101010010000100111", 
    68 => "10111110101111111111100101100111", 
    69 => "10111110000001101010111110100000", 
    70 => "10111111000100011011101011101011", 
    71 => "00111110100010011100100000111010", 
    72 => "00111110110000101101011001001111", 
    73 => "10111110100001100101000000001001", 
    74 => "00111101101101001011110000001001", 
    75 => "10111101010100101111010101001111", 
    76 => "00111110100001001000111100101110", 
    77 => "10111111000111101100111101011111", 
    78 => "10111110001001110001111110001011", 
    79 => "00111110100101111000000110010000", 
    80 => "10111101100011101001010110110011", 
    81 => "00111110101110011011111111001111", 
    82 => "10111110001000011110011010001000", 
    83 => "10111110100001011010000010100110", 
    84 => "10111111000101001001111001000010", 
    85 => "00111110110000001011100111010000", 
    86 => "10111111000011101001010100100000", 
    87 => "10111110100011110110000010101110", 
    88 => "00111110111001110000011110111111", 
    89 => "10111110110100010011100101100111", 
    90 => "00111110110001001000001100110100", 
    91 => "00111101101010001011011010000001", 
    92 => "00111101110110110010110101111101", 
    93 => "10111101001111111111101110110000", 
    94 => "10111110100000000100011100100100", 
    95 => "00111110000110100001110100101111", 
    96 => "10111101110101101011010001011110", 
    97 => "00111110000000100011001110111110", 
    98 => "00111110000001000000010101011011", 
    99 => "10111110010100111010111011100000", 
    100 => "10111111000010100011100111100001", 
    101 => "10111110101100100001111100000100", 
    102 => "10111110010001111010100000110111", 
    103 => "00111110101000111011110101111100", 
    104 => "10111110110001100001100101011000", 
    105 => "10111110100110110000111111110101", 
    106 => "00111101000001101111000101011001", 
    107 => "10111101010100011100101110000010", 
    108 => "10111110010101010111111011110101", 
    109 => "00111100111110100100101010000000", 
    110 => "10111111000011000011111010100101", 
    111 => "00111101110011011011010010101000", 
    112 => "00111101101100110011011101100011", 
    113 => "00111110010100000100110011011110", 
    114 => "10111110000010111000010111110110", 
    115 => "10111111000100010001101101010010", 
    116 => "10111111001000010111100010000110", 
    117 => "10111101110011101111010001100010", 
    118 => "10111110101001101000111110101011", 
    119 => "10111100011101010001000011110001", 
    120 => "00111100100011001011001011110011", 
    121 => "10111110011000000100111100111101", 
    122 => "00111110010111010100100111100111", 
    123 => "00111101101000101101001101101000", 
    124 => "10111110100000101100101000101100", 
    125 => "10111111000010000101001110010000", 
    126 => "10111111001011110010100011011001", 
    127 => "00111110111101010100010010101010", 
    128 => "00111111001000110100011010101100", 
    129 => "00111110110110010100001110010111", 
    130 => "10111110011101000100110110110101", 
    131 => "10111111001000011000100011101010", 
    132 => "10111110110001001000111001011011", 
    133 => "00111110111001000111000100111111", 
    134 => "00111110100101101001000000100101", 
    135 => "10111110110010010100000111111100", 
    136 => "00111111000101101100111110011100", 
    137 => "10111110010000000010111011001010", 
    138 => "00111110001111010000101010000101", 
    139 => "10111110010010011000010101110110", 
    140 => "10111101001001001100100010001011", 
    141 => "00111110001111000000111011111111", 
    142 => "10111110011001101111101000011001", 
    143 => "00111110001000111001000100101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_4 is
    component conv_conv_weights_4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_4_rom_U :  component conv_conv_weights_4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


