-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.808000,HLS_SYN_LAT=466841,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=5,HLS_SYN_FF=1135,HLS_SYN_LUT=1792,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (34 downto 0) := "00000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (34 downto 0) := "00000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (34 downto 0) := "00000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (34 downto 0) := "00000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (34 downto 0) := "00000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (34 downto 0) := "00000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (34 downto 0) := "00000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (34 downto 0) := "00001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (34 downto 0) := "00010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (34 downto 0) := "00100000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (34 downto 0) := "01000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (34 downto 0) := "10000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (34 downto 0) := "00000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_3_ce0 : STD_LOGIC;
    signal conv_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_4_ce0 : STD_LOGIC;
    signal conv_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_5_ce0 : STD_LOGIC;
    signal conv_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_350 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_362 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_393 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state7_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state31_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln21_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state8_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state32_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_398 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state9_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_404 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state12_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal grp_fu_374_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_409 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state16_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state20_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state24_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state28_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal add_ln8_fu_415_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_751 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_427_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_759 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_439_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_767 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_463_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_772 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_473_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_780 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_785 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_467_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_483_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_1_reg_790 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out_addr_reg_795 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln18_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal wr_fu_511_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_804 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_fu_533_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_reg_809 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_fu_549_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_814 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state6_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln21_reg_824_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_1_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_858 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_weights_1_load_reg_891 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_load_reg_896 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_load_reg_901 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_load_reg_906 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_load_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_fu_694_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_931 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_1_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_5_reg_941 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_946 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state10_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_3_reg_951 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state11_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_1_5_reg_956 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state13_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_block_state29_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal r_0_reg_280 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_292 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal wr_0_reg_327 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal w_sum_0_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_354_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln35_3_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_587_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_638_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_649_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_11_fu_669_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_679_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_13_fu_689_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_374_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal grp_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln35_fu_445_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_449_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_455_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_fu_487_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_491_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_521_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_529_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_517_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_501_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_539_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_549_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_565_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_569_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_cast_fu_574_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_3_fu_582_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_fu_561_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_597_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_6_fu_603_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_4_fu_607_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_620_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_612_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_628_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln26_fu_643_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_664_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_674_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_684_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_700_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_704_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_714_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_736_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (34 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state14_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_state17_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state18_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state19_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_state21_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_state22_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_state23_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_state25_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_state26_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_state27_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln26_fu_549_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_conv_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_conv_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_conv_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_conv_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_weights_3_U : component conv_conv_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_address0,
        ce0 => conv_weights_3_ce0,
        q0 => conv_weights_3_q0);

    conv_weights_4_U : component conv_conv_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_address0,
        ce0 => conv_weights_4_ce0,
        q0 => conv_weights_4_q0);

    conv_weights_5_U : component conv_conv_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_address0,
        ce0 => conv_weights_5_ce0,
        q0 => conv_weights_5_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_374_p0,
        din1 => grp_fu_374_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_374_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_381_p0,
        din1 => grp_fu_381_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_374_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_387_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_505_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage23_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_505_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_304 <= c_reg_767;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_421_p2 = ap_const_lv1_0))) then 
                c_0_reg_304 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                f_0_reg_316 <= f_reg_780;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_433_p2 = ap_const_lv1_0))) then 
                f_0_reg_316 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_292 <= add_ln8_reg_751;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_292 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_280 <= r_reg_759;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_280 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_398_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                    reg_398 <= input_r_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    reg_398 <= input_r_q1;
                end if;
            end if; 
        end if;
    end process;

    w_sum_0_reg_338_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                w_sum_0_reg_338 <= w_sum_1_reg_362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_467_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_338 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_362_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_824_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_1_reg_362 <= grp_fu_374_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_505_p2 = ap_const_lv1_0))) then 
                w_sum_1_reg_362 <= w_sum_0_reg_338;
            end if; 
        end if;
    end process;

    wc_0_reg_350_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then 
                wc_0_reg_350 <= wc_reg_931;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_505_p2 = ap_const_lv1_0))) then 
                wc_0_reg_350 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_327_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
                wr_0_reg_327 <= wr_reg_804;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_467_p2 = ap_const_lv1_0))) then 
                wr_0_reg_327 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_751 <= add_ln8_fu_415_p2;
                r_reg_759 <= r_fu_427_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_767 <= c_fu_439_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_467_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_795 <= zext_ln35_3_fu_496_p1(11 - 1 downto 0);
                    zext_ln26_reg_785(4 downto 0) <= zext_ln26_fu_479_p1(4 downto 0);
                    zext_ln35_1_reg_790(4 downto 0) <= zext_ln35_1_fu_483_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln21_reg_824 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_weights_1_load_reg_891 <= conv_weights_1_q0;
                conv_weights_2_load_reg_896 <= conv_weights_2_q0;
                conv_weights_3_load_reg_901 <= conv_weights_3_q0;
                conv_weights_4_load_reg_906 <= conv_weights_4_q0;
                conv_weights_5_load_reg_911 <= conv_weights_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_780 <= f_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln21_reg_824 <= icmp_ln21_fu_555_p2;
                icmp_ln21_reg_824_pp0_iter1_reg <= icmp_ln21_reg_824;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then
                input_load_3_reg_926 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then
                input_load_5_reg_941 <= input_r_q1;
                tmp_1_1_reg_936 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_505_p2 = ap_const_lv1_0))) then
                mul_ln26_reg_814 <= mul_ln26_fu_549_p2;
                sub_ln26_reg_809 <= sub_ln26_fu_533_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln21_reg_824 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_393 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0)))) then
                reg_404 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln21_reg_824 = ap_const_lv1_0)))) then
                reg_409 <= grp_fu_374_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_fu_555_p2 = ap_const_lv1_0))) then
                    sub_ln26_1_reg_858(10 downto 1) <= sub_ln26_1_fu_632_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then
                tmp_1_2_reg_946 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then
                tmp_1_3_reg_951 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then
                tmp_1_5_reg_956 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                wc_reg_931 <= wc_fu_694_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_804 <= wr_fu_511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_433_p2 = ap_const_lv1_0))) then
                    zext_ln14_reg_772(10 downto 4) <= zext_ln14_fu_463_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_772(3 downto 0) <= "0000";
    zext_ln14_reg_772(11) <= '0';
    zext_ln26_reg_785(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_1_reg_790(8 downto 5) <= "0000";
    sub_ln26_1_reg_858(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln21_reg_824, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_433_p2, ap_CS_fsm_state4, icmp_ln14_fu_467_p2, icmp_ln18_fu_505_p2, ap_CS_fsm_state5, ap_block_pp0_stage3_subdone, ap_block_pp0_stage23_subdone, icmp_ln8_fu_421_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_433_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_467_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_505_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln21_reg_824 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_597_p2 <= std_logic_vector(unsigned(c_0_reg_304) + unsigned(zext_ln21_fu_561_p1));
    add_ln26_2_fu_569_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_565_p1) + unsigned(sub_ln26_reg_809));
    add_ln26_3_fu_582_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_790) + unsigned(tmp_11_cast_fu_574_p3));
    add_ln26_4_fu_607_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_603_p1) + unsigned(mul_ln26_reg_814));
    add_ln26_5_fu_654_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_858) + unsigned(ap_const_lv11_2));
    add_ln26_6_fu_664_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_858) + unsigned(ap_const_lv11_3));
    add_ln26_7_fu_674_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_858) + unsigned(ap_const_lv11_4));
    add_ln26_8_fu_684_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_858) + unsigned(ap_const_lv11_5));
    add_ln26_fu_539_p2 <= std_logic_vector(unsigned(zext_ln18_fu_501_p1) + unsigned(r_0_reg_280));
    add_ln35_1_fu_491_p2 <= std_logic_vector(unsigned(zext_ln14_reg_772) + unsigned(zext_ln35_2_fu_487_p1));
    add_ln35_fu_449_p2 <= std_logic_vector(unsigned(phi_mul_reg_292) + unsigned(zext_ln35_fu_445_p1));
    add_ln8_fu_415_p2 <= std_logic_vector(unsigned(phi_mul_reg_292) + unsigned(ap_const_lv7_B));
    and_ln34_fu_736_p2 <= (or_ln34_fu_730_p2 and grp_fu_387_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(23);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(27);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(12);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state33 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state37 <= ap_CS_fsm(33);
    ap_CS_fsm_state38 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln21_reg_824)
    begin
        if ((icmp_ln21_reg_824 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_421_p2)
    begin
        if (((icmp_ln8_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_354_p4_assign_proc : process(wc_0_reg_350, icmp_ln21_reg_824, ap_CS_fsm_pp0_stage0, wc_reg_931, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln21_reg_824 = ap_const_lv1_0))) then 
            ap_phi_mux_wc_0_phi_fu_354_p4 <= wc_reg_931;
        else 
            ap_phi_mux_wc_0_phi_fu_354_p4 <= wc_0_reg_350;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_421_p2)
    begin
        if (((icmp_ln8_fu_421_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_700_p1 <= reg_409;
    c_fu_439_p2 <= std_logic_vector(unsigned(c_0_reg_304) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln26_reg_785(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_795;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_409 when (and_ln34_fu_736_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_5_fu_587_p1(8 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_5_fu_587_p1(8 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_5_fu_587_p1(8 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_address0 <= zext_ln26_5_fu_587_p1(8 - 1 downto 0);

    conv_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_address0 <= zext_ln26_5_fu_587_p1(8 - 1 downto 0);

    conv_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_address0 <= zext_ln26_5_fu_587_p1(8 - 1 downto 0);

    conv_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_473_p2 <= std_logic_vector(unsigned(f_0_reg_316) + unsigned(ap_const_lv5_1));

    grp_fu_374_p0_assign_proc : process(w_sum_1_reg_362, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, reg_409, ap_CS_fsm_pp0_stage7, ap_CS_fsm_state34, ap_CS_fsm_pp0_stage23, w_sum_0_reg_338, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_374_p0 <= w_sum_0_reg_338;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_374_p0 <= reg_409;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_374_p0 <= w_sum_1_reg_362;
        else 
            grp_fu_374_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_374_p1_assign_proc : process(conv_bias_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, reg_404, tmp_1_1_reg_936, tmp_1_2_reg_946, tmp_1_3_reg_951, tmp_1_5_reg_956, ap_CS_fsm_pp0_stage7, ap_CS_fsm_state34, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            grp_fu_374_p1 <= conv_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_374_p1 <= tmp_1_5_reg_956;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_374_p1 <= tmp_1_3_reg_951;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_374_p1 <= tmp_1_2_reg_946;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_374_p1 <= tmp_1_1_reg_936;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_374_p1 <= reg_404;
        else 
            grp_fu_374_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_381_p0_assign_proc : process(conv_weights_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, conv_weights_1_load_reg_891, conv_weights_2_load_reg_896, conv_weights_3_load_reg_901, conv_weights_4_load_reg_906, conv_weights_5_load_reg_911, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_381_p0 <= conv_weights_5_load_reg_911;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_381_p0 <= conv_weights_4_load_reg_906;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_381_p0 <= conv_weights_3_load_reg_901;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_381_p0 <= conv_weights_2_load_reg_896;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_381_p0 <= conv_weights_1_load_reg_891;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_381_p0 <= conv_weights_0_q0;
            else 
                grp_fu_381_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_381_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_381_p1_assign_proc : process(input_r_q0, reg_393, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_398, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, input_load_3_reg_926, input_load_5_reg_941, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_381_p1 <= input_load_5_reg_941;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_381_p1 <= input_load_3_reg_926;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_381_p1 <= reg_393;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_381_p1 <= reg_398;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_381_p1 <= input_r_q0;
        else 
            grp_fu_381_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_433_p2 <= "1" when (c_0_reg_304 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_467_p2 <= "1" when (f_0_reg_316 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_505_p2 <= "1" when (wr_0_reg_327 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_555_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_354_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_724_p2 <= "1" when (trunc_ln34_fu_714_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_718_p2 <= "0" when (tmp_fu_704_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_421_p2 <= "1" when (r_0_reg_280 = ap_const_lv4_B) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_8_fu_638_p1, zext_ln26_10_fu_659_p1, ap_block_pp0_stage1, zext_ln26_12_fu_679_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= zext_ln26_12_fu_679_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln26_10_fu_659_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln26_8_fu_638_p1(10 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_9_fu_649_p1, ap_block_pp0_stage1, zext_ln26_11_fu_669_p1, ap_block_pp0_stage2, zext_ln26_13_fu_689_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln26_13_fu_689_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln26_11_fu_669_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= zext_ln26_9_fu_649_p1(10 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_549_p0 <= mul_ln26_fu_549_p00(4 - 1 downto 0);
    mul_ln26_fu_549_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_539_p2),8));
    mul_ln26_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_549_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln26_fu_643_p2 <= (sub_ln26_1_fu_632_p2 or ap_const_lv11_1);
    or_ln34_fu_730_p2 <= (icmp_ln34_fu_718_p2 or icmp_ln34_1_fu_724_p2);
    p_shl1_cast_fu_612_p3 <= (add_ln26_4_fu_607_p2 & ap_const_lv3_0);
    r_fu_427_p2 <= std_logic_vector(unsigned(r_0_reg_280) + unsigned(ap_const_lv4_1));
    sub_ln26_1_fu_632_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_612_p3) - unsigned(zext_ln26_7_fu_628_p1));
    sub_ln26_fu_533_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_529_p1) - unsigned(zext_ln26_1_fu_517_p1));
    tmp_11_cast_fu_574_p3 <= (add_ln26_2_fu_569_p2 & ap_const_lv4_0);
    tmp_7_fu_455_p3 <= (add_ln35_fu_449_p2 & ap_const_lv4_0);
    tmp_8_fu_620_p3 <= (add_ln26_4_fu_607_p2 & ap_const_lv1_0);
    tmp_9_fu_521_p3 <= (wr_0_reg_327 & ap_const_lv2_0);
    tmp_fu_704_p4 <= bitcast_ln34_fu_700_p1(30 downto 23);
    trunc_ln34_fu_714_p1 <= bitcast_ln34_fu_700_p1(23 - 1 downto 0);
    wc_fu_694_p2 <= std_logic_vector(unsigned(wc_0_reg_350) + unsigned(ap_const_lv2_1));
    wr_fu_511_p2 <= std_logic_vector(unsigned(wr_0_reg_327) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_455_p3),12));
    zext_ln18_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_327),4));
    zext_ln21_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_354_p4),4));
    zext_ln26_10_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_654_p2),64));
    zext_ln26_11_fu_669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_664_p2),64));
    zext_ln26_12_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_674_p2),64));
    zext_ln26_13_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_684_p2),64));
    zext_ln26_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_327),5));
    zext_ln26_2_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_521_p3),5));
    zext_ln26_4_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_354_p4),5));
    zext_ln26_5_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_582_p2),64));
    zext_ln26_6_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_597_p2),8));
    zext_ln26_7_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_620_p3),11));
    zext_ln26_8_fu_638_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_1_fu_632_p2),64));
    zext_ln26_9_fu_649_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_643_p2),64));
    zext_ln26_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_316),64));
    zext_ln35_1_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_316),9));
    zext_ln35_2_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_316),12));
    zext_ln35_3_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_491_p2),64));
    zext_ln35_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_304),7));
end behav;
