// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.808000,HLS_SYN_LAT=466841,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=5,HLS_SYN_FF=1135,HLS_SYN_LUT=1792,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 35'd1;
parameter    ap_ST_fsm_state2 = 35'd2;
parameter    ap_ST_fsm_state3 = 35'd4;
parameter    ap_ST_fsm_state4 = 35'd8;
parameter    ap_ST_fsm_state5 = 35'd16;
parameter    ap_ST_fsm_pp0_stage0 = 35'd32;
parameter    ap_ST_fsm_pp0_stage1 = 35'd64;
parameter    ap_ST_fsm_pp0_stage2 = 35'd128;
parameter    ap_ST_fsm_pp0_stage3 = 35'd256;
parameter    ap_ST_fsm_pp0_stage4 = 35'd512;
parameter    ap_ST_fsm_pp0_stage5 = 35'd1024;
parameter    ap_ST_fsm_pp0_stage6 = 35'd2048;
parameter    ap_ST_fsm_pp0_stage7 = 35'd4096;
parameter    ap_ST_fsm_pp0_stage8 = 35'd8192;
parameter    ap_ST_fsm_pp0_stage9 = 35'd16384;
parameter    ap_ST_fsm_pp0_stage10 = 35'd32768;
parameter    ap_ST_fsm_pp0_stage11 = 35'd65536;
parameter    ap_ST_fsm_pp0_stage12 = 35'd131072;
parameter    ap_ST_fsm_pp0_stage13 = 35'd262144;
parameter    ap_ST_fsm_pp0_stage14 = 35'd524288;
parameter    ap_ST_fsm_pp0_stage15 = 35'd1048576;
parameter    ap_ST_fsm_pp0_stage16 = 35'd2097152;
parameter    ap_ST_fsm_pp0_stage17 = 35'd4194304;
parameter    ap_ST_fsm_pp0_stage18 = 35'd8388608;
parameter    ap_ST_fsm_pp0_stage19 = 35'd16777216;
parameter    ap_ST_fsm_pp0_stage20 = 35'd33554432;
parameter    ap_ST_fsm_pp0_stage21 = 35'd67108864;
parameter    ap_ST_fsm_pp0_stage22 = 35'd134217728;
parameter    ap_ST_fsm_pp0_stage23 = 35'd268435456;
parameter    ap_ST_fsm_state33 = 35'd536870912;
parameter    ap_ST_fsm_state34 = 35'd1073741824;
parameter    ap_ST_fsm_state35 = 35'd2147483648;
parameter    ap_ST_fsm_state36 = 35'd4294967296;
parameter    ap_ST_fsm_state37 = 35'd8589934592;
parameter    ap_ST_fsm_state38 = 35'd17179869184;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg[9:0] input_r_address1;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [34:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [7:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [7:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire   [7:0] conv_weights_3_address0;
reg    conv_weights_3_ce0;
wire   [31:0] conv_weights_3_q0;
wire   [7:0] conv_weights_4_address0;
reg    conv_weights_4_ce0;
wire   [31:0] conv_weights_4_q0;
wire   [7:0] conv_weights_5_address0;
reg    conv_weights_5_ce0;
wire   [31:0] conv_weights_5_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
reg   [1:0] wc_0_reg_350;
reg   [31:0] w_sum_1_reg_362;
reg   [31:0] reg_393;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state31_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln21_reg_824;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state8_pp0_stage2_iter0;
wire    ap_block_state32_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] reg_398;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state9_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_381_p2;
reg   [31:0] reg_404;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state12_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] reg_409;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state16_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state20_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state24_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state28_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_11001;
wire    ap_CS_fsm_state37;
wire   [6:0] add_ln8_fu_415_p2;
reg   [6:0] add_ln8_reg_751;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_427_p2;
reg   [3:0] r_reg_759;
wire   [3:0] c_fu_439_p2;
reg   [3:0] c_reg_767;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln14_fu_463_p1;
reg   [11:0] zext_ln14_reg_772;
wire   [0:0] icmp_ln11_fu_433_p2;
wire   [4:0] f_fu_473_p2;
reg   [4:0] f_reg_780;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_479_p1;
reg   [63:0] zext_ln26_reg_785;
wire   [0:0] icmp_ln14_fu_467_p2;
wire   [8:0] zext_ln35_1_fu_483_p1;
reg   [8:0] zext_ln35_1_reg_790;
reg   [10:0] conv_out_addr_reg_795;
wire   [0:0] icmp_ln18_fu_505_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] wr_fu_511_p2;
reg   [1:0] wr_reg_804;
wire   [4:0] sub_ln26_fu_533_p2;
reg   [4:0] sub_ln26_reg_809;
wire   [7:0] mul_ln26_fu_549_p2;
reg   [7:0] mul_ln26_reg_814;
wire   [0:0] icmp_ln21_fu_555_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state30_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln21_reg_824_pp0_iter1_reg;
wire   [10:0] sub_ln26_1_fu_632_p2;
reg   [10:0] sub_ln26_1_reg_858;
reg   [31:0] conv_weights_1_load_reg_891;
reg   [31:0] conv_weights_2_load_reg_896;
reg   [31:0] conv_weights_3_load_reg_901;
reg   [31:0] conv_weights_4_load_reg_906;
reg   [31:0] conv_weights_5_load_reg_911;
reg   [31:0] input_load_3_reg_926;
wire   [1:0] wc_fu_694_p2;
reg   [1:0] wc_reg_931;
reg   [31:0] tmp_1_1_reg_936;
reg   [31:0] input_load_5_reg_941;
reg   [31:0] tmp_1_2_reg_946;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state10_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] tmp_1_3_reg_951;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state11_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] tmp_1_5_reg_956;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state13_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state34;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
wire    ap_block_state29_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
wire    ap_CS_fsm_pp0_stage23;
reg   [3:0] r_0_reg_280;
reg   [6:0] phi_mul_reg_292;
reg   [3:0] c_0_reg_304;
wire   [0:0] icmp_ln8_fu_421_p2;
reg   [4:0] f_0_reg_316;
wire    ap_CS_fsm_state38;
reg   [1:0] wr_0_reg_327;
wire    ap_CS_fsm_state33;
reg   [31:0] w_sum_0_reg_338;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_354_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln35_3_fu_496_p1;
wire   [63:0] zext_ln26_5_fu_587_p1;
wire   [63:0] zext_ln26_8_fu_638_p1;
wire   [63:0] zext_ln26_9_fu_649_p1;
wire   [63:0] zext_ln26_10_fu_659_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln26_11_fu_669_p1;
wire   [63:0] zext_ln26_12_fu_679_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln26_13_fu_689_p1;
reg   [31:0] grp_fu_374_p0;
reg   [31:0] grp_fu_374_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_block_pp0_stage23;
reg   [31:0] grp_fu_381_p0;
reg   [31:0] grp_fu_381_p1;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire   [6:0] zext_ln35_fu_445_p1;
wire   [6:0] add_ln35_fu_449_p2;
wire   [10:0] tmp_7_fu_455_p3;
wire   [11:0] zext_ln35_2_fu_487_p1;
wire   [11:0] add_ln35_1_fu_491_p2;
wire   [3:0] tmp_9_fu_521_p3;
wire   [4:0] zext_ln26_2_fu_529_p1;
wire   [4:0] zext_ln26_1_fu_517_p1;
wire   [3:0] zext_ln18_fu_501_p1;
wire   [3:0] add_ln26_fu_539_p2;
wire   [3:0] mul_ln26_fu_549_p0;
wire   [4:0] zext_ln26_4_fu_565_p1;
wire   [4:0] add_ln26_2_fu_569_p2;
wire   [8:0] tmp_11_cast_fu_574_p3;
wire   [8:0] add_ln26_3_fu_582_p2;
wire   [3:0] zext_ln21_fu_561_p1;
wire   [3:0] add_ln26_1_fu_597_p2;
wire   [7:0] zext_ln26_6_fu_603_p1;
wire   [7:0] add_ln26_4_fu_607_p2;
wire   [8:0] tmp_8_fu_620_p3;
wire   [10:0] p_shl1_cast_fu_612_p3;
wire   [10:0] zext_ln26_7_fu_628_p1;
wire   [10:0] or_ln26_fu_643_p2;
wire   [10:0] add_ln26_5_fu_654_p2;
wire   [10:0] add_ln26_6_fu_664_p2;
wire   [10:0] add_ln26_7_fu_674_p2;
wire   [10:0] add_ln26_8_fu_684_p2;
wire   [31:0] bitcast_ln34_fu_700_p1;
wire   [7:0] tmp_fu_704_p4;
wire   [22:0] trunc_ln34_fu_714_p1;
wire   [0:0] icmp_ln34_1_fu_724_p2;
wire   [0:0] icmp_ln34_fu_718_p2;
wire   [0:0] or_ln34_fu_730_p2;
wire   [0:0] grp_fu_387_p2;
wire   [0:0] and_ln34_fu_736_p2;
reg   [34:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state14_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_state15_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state17_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_state18_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage12_11001;
wire    ap_block_state19_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state21_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage15_11001;
wire    ap_block_state22_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage16_11001;
wire    ap_block_state23_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage17_11001;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state25_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage19_11001;
wire    ap_block_state26_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage20_11001;
wire    ap_block_state27_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage21_11001;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_pp0_stage23_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul_ln26_fu_549_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 35'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_conv_weights_3 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_address0),
    .ce0(conv_weights_3_ce0),
    .q0(conv_weights_3_q0)
);

conv_conv_weights_4 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_address0),
    .ce0(conv_weights_4_ce0),
    .q0(conv_weights_4_q0)
);

conv_conv_weights_5 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_address0),
    .ce0(conv_weights_5_ce0),
    .q0(conv_weights_5_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_374_p0),
    .din1(grp_fu_374_p1),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_381_p0),
    .din1(grp_fu_381_p1),
    .ce(1'b1),
    .dout(grp_fu_381_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_374_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_387_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_505_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage23_subdone) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_505_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_467_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_304 <= c_reg_767;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_421_p2 == 1'd0))) begin
        c_0_reg_304 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        f_0_reg_316 <= f_reg_780;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_433_p2 == 1'd0))) begin
        f_0_reg_316 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_292 <= add_ln8_reg_751;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_292 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_280 <= r_reg_759;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_280 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_398 <= input_r_q0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            reg_398 <= input_r_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        w_sum_0_reg_338 <= w_sum_1_reg_362;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_467_p2 == 1'd0))) begin
        w_sum_0_reg_338 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_824_pp0_iter1_reg == 1'd0))) begin
        w_sum_1_reg_362 <= grp_fu_374_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_505_p2 == 1'd0))) begin
        w_sum_1_reg_362 <= w_sum_0_reg_338;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_reg_824 == 1'd0))) begin
        wc_0_reg_350 <= wc_reg_931;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_505_p2 == 1'd0))) begin
        wc_0_reg_350 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        wr_0_reg_327 <= wr_reg_804;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_467_p2 == 1'd0))) begin
        wr_0_reg_327 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_751 <= add_ln8_fu_415_p2;
        r_reg_759 <= r_fu_427_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_767 <= c_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_467_p2 == 1'd0))) begin
        conv_out_addr_reg_795 <= zext_ln35_3_fu_496_p1;
        zext_ln26_reg_785[4 : 0] <= zext_ln26_fu_479_p1[4 : 0];
        zext_ln35_1_reg_790[4 : 0] <= zext_ln35_1_fu_483_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln21_reg_824 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_weights_1_load_reg_891 <= conv_weights_1_q0;
        conv_weights_2_load_reg_896 <= conv_weights_2_q0;
        conv_weights_3_load_reg_901 <= conv_weights_3_q0;
        conv_weights_4_load_reg_906 <= conv_weights_4_q0;
        conv_weights_5_load_reg_911 <= conv_weights_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_780 <= f_fu_473_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_824 <= icmp_ln21_fu_555_p2;
        icmp_ln21_reg_824_pp0_iter1_reg <= icmp_ln21_reg_824;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_824 == 1'd0))) begin
        input_load_3_reg_926 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln21_reg_824 == 1'd0))) begin
        input_load_5_reg_941 <= input_r_q1;
        tmp_1_1_reg_936 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_505_p2 == 1'd0))) begin
        mul_ln26_reg_814 <= mul_ln26_fu_549_p2;
        sub_ln26_reg_809 <= sub_ln26_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_824 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln21_reg_824 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_393 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln21_reg_824 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_824 == 1'd0)))) begin
        reg_404 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state37) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0)) | ((1'b0 == ap_block_pp0_stage18_11001) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln21_reg_824 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln21_reg_824 == 1'd0)))) begin
        reg_409 <= grp_fu_374_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_fu_555_p2 == 1'd0))) begin
        sub_ln26_1_reg_858[10 : 1] <= sub_ln26_1_fu_632_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0))) begin
        tmp_1_2_reg_946 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0))) begin
        tmp_1_3_reg_951 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd0))) begin
        tmp_1_5_reg_956 <= grp_fu_381_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        wc_reg_931 <= wc_fu_694_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_804 <= wr_fu_511_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_433_p2 == 1'd0))) begin
        zext_ln14_reg_772[10 : 4] <= zext_ln14_fu_463_p1[10 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln21_reg_824 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln21_reg_824 == 1'd0))) begin
        ap_phi_mux_wc_0_phi_fu_354_p4 = wc_reg_931;
    end else begin
        ap_phi_mux_wc_0_phi_fu_354_p4 = wc_0_reg_350;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_374_p0 = w_sum_0_reg_338;
    end else if ((((1'b0 == ap_block_pp0_stage19) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_374_p0 = reg_409;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_374_p0 = w_sum_1_reg_362;
    end else begin
        grp_fu_374_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_374_p1 = conv_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_374_p1 = tmp_1_5_reg_956;
    end else if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_374_p1 = tmp_1_3_reg_951;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_374_p1 = tmp_1_2_reg_946;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_374_p1 = tmp_1_1_reg_936;
    end else if ((((1'b0 == ap_block_pp0_stage19) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_374_p1 = reg_404;
    end else begin
        grp_fu_374_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_381_p0 = conv_weights_5_load_reg_911;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_381_p0 = conv_weights_4_load_reg_906;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_381_p0 = conv_weights_3_load_reg_901;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_381_p0 = conv_weights_2_load_reg_896;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_381_p0 = conv_weights_1_load_reg_891;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_381_p0 = conv_weights_0_q0;
        end else begin
            grp_fu_381_p0 = 'bx;
        end
    end else begin
        grp_fu_381_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_381_p1 = input_load_5_reg_941;
    end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_381_p1 = input_load_3_reg_926;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_381_p1 = reg_393;
    end else if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_381_p1 = reg_398;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_381_p1 = input_r_q0;
    end else begin
        grp_fu_381_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address0 = zext_ln26_12_fu_679_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln26_10_fu_659_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = zext_ln26_8_fu_638_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            input_r_address1 = zext_ln26_13_fu_689_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address1 = zext_ln26_11_fu_669_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address1 = zext_ln26_9_fu_649_p1;
        end else begin
            input_r_address1 = 'bx;
        end
    end else begin
        input_r_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_421_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_467_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln18_fu_505_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln21_reg_824 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_597_p2 = (c_0_reg_304 + zext_ln21_fu_561_p1);

assign add_ln26_2_fu_569_p2 = (zext_ln26_4_fu_565_p1 + sub_ln26_reg_809);

assign add_ln26_3_fu_582_p2 = (zext_ln35_1_reg_790 + tmp_11_cast_fu_574_p3);

assign add_ln26_4_fu_607_p2 = (zext_ln26_6_fu_603_p1 + mul_ln26_reg_814);

assign add_ln26_5_fu_654_p2 = (sub_ln26_1_reg_858 + 11'd2);

assign add_ln26_6_fu_664_p2 = (sub_ln26_1_reg_858 + 11'd3);

assign add_ln26_7_fu_674_p2 = (sub_ln26_1_reg_858 + 11'd4);

assign add_ln26_8_fu_684_p2 = (sub_ln26_1_reg_858 + 11'd5);

assign add_ln26_fu_539_p2 = (zext_ln18_fu_501_p1 + r_0_reg_280);

assign add_ln35_1_fu_491_p2 = (zext_ln14_reg_772 + zext_ln35_2_fu_487_p1);

assign add_ln35_fu_449_p2 = (phi_mul_reg_292 + zext_ln35_fu_445_p1);

assign add_ln8_fu_415_p2 = (phi_mul_reg_292 + 7'd11);

assign and_ln34_fu_736_p2 = (or_ln34_fu_730_p2 & grp_fu_387_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln34_fu_700_p1 = reg_409;

assign c_fu_439_p2 = (c_0_reg_304 + 4'd1);

assign conv_bias_address0 = zext_ln26_reg_785;

assign conv_out_address0 = conv_out_addr_reg_795;

assign conv_out_d0 = ((and_ln34_fu_736_p2[0:0] === 1'b1) ? reg_409 : 32'd0);

assign conv_weights_0_address0 = zext_ln26_5_fu_587_p1;

assign conv_weights_1_address0 = zext_ln26_5_fu_587_p1;

assign conv_weights_2_address0 = zext_ln26_5_fu_587_p1;

assign conv_weights_3_address0 = zext_ln26_5_fu_587_p1;

assign conv_weights_4_address0 = zext_ln26_5_fu_587_p1;

assign conv_weights_5_address0 = zext_ln26_5_fu_587_p1;

assign f_fu_473_p2 = (f_0_reg_316 + 5'd1);

assign icmp_ln11_fu_433_p2 = ((c_0_reg_304 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_467_p2 = ((f_0_reg_316 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_505_p2 = ((wr_0_reg_327 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_555_p2 = ((ap_phi_mux_wc_0_phi_fu_354_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_724_p2 = ((trunc_ln34_fu_714_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_718_p2 = ((tmp_fu_704_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_421_p2 = ((r_0_reg_280 == 4'd11) ? 1'b1 : 1'b0);

assign mul_ln26_fu_549_p0 = mul_ln26_fu_549_p00;

assign mul_ln26_fu_549_p00 = add_ln26_fu_539_p2;

assign mul_ln26_fu_549_p2 = (mul_ln26_fu_549_p0 * $signed('hD));

assign or_ln26_fu_643_p2 = (sub_ln26_1_fu_632_p2 | 11'd1);

assign or_ln34_fu_730_p2 = (icmp_ln34_fu_718_p2 | icmp_ln34_1_fu_724_p2);

assign p_shl1_cast_fu_612_p3 = {{add_ln26_4_fu_607_p2}, {3'd0}};

assign r_fu_427_p2 = (r_0_reg_280 + 4'd1);

assign sub_ln26_1_fu_632_p2 = (p_shl1_cast_fu_612_p3 - zext_ln26_7_fu_628_p1);

assign sub_ln26_fu_533_p2 = (zext_ln26_2_fu_529_p1 - zext_ln26_1_fu_517_p1);

assign tmp_11_cast_fu_574_p3 = {{add_ln26_2_fu_569_p2}, {4'd0}};

assign tmp_7_fu_455_p3 = {{add_ln35_fu_449_p2}, {4'd0}};

assign tmp_8_fu_620_p3 = {{add_ln26_4_fu_607_p2}, {1'd0}};

assign tmp_9_fu_521_p3 = {{wr_0_reg_327}, {2'd0}};

assign tmp_fu_704_p4 = {{bitcast_ln34_fu_700_p1[30:23]}};

assign trunc_ln34_fu_714_p1 = bitcast_ln34_fu_700_p1[22:0];

assign wc_fu_694_p2 = (wc_0_reg_350 + 2'd1);

assign wr_fu_511_p2 = (wr_0_reg_327 + 2'd1);

assign zext_ln14_fu_463_p1 = tmp_7_fu_455_p3;

assign zext_ln18_fu_501_p1 = wr_0_reg_327;

assign zext_ln21_fu_561_p1 = ap_phi_mux_wc_0_phi_fu_354_p4;

assign zext_ln26_10_fu_659_p1 = add_ln26_5_fu_654_p2;

assign zext_ln26_11_fu_669_p1 = add_ln26_6_fu_664_p2;

assign zext_ln26_12_fu_679_p1 = add_ln26_7_fu_674_p2;

assign zext_ln26_13_fu_689_p1 = add_ln26_8_fu_684_p2;

assign zext_ln26_1_fu_517_p1 = wr_0_reg_327;

assign zext_ln26_2_fu_529_p1 = tmp_9_fu_521_p3;

assign zext_ln26_4_fu_565_p1 = ap_phi_mux_wc_0_phi_fu_354_p4;

assign zext_ln26_5_fu_587_p1 = add_ln26_3_fu_582_p2;

assign zext_ln26_6_fu_603_p1 = add_ln26_1_fu_597_p2;

assign zext_ln26_7_fu_628_p1 = tmp_8_fu_620_p3;

assign zext_ln26_8_fu_638_p1 = sub_ln26_1_fu_632_p2;

assign zext_ln26_9_fu_649_p1 = or_ln26_fu_643_p2;

assign zext_ln26_fu_479_p1 = f_0_reg_316;

assign zext_ln35_1_fu_483_p1 = f_0_reg_316;

assign zext_ln35_2_fu_487_p1 = f_0_reg_316;

assign zext_ln35_3_fu_496_p1 = add_ln35_1_fu_491_p2;

assign zext_ln35_fu_445_p1 = c_0_reg_304;

always @ (posedge ap_clk) begin
    zext_ln14_reg_772[3:0] <= 4'b0000;
    zext_ln14_reg_772[11] <= 1'b0;
    zext_ln26_reg_785[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_790[8:5] <= 4'b0000;
    sub_ln26_1_reg_858[0] <= 1'b0;
end

endmodule //conv
