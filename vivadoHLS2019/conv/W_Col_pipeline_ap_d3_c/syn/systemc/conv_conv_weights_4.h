// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_conv_weights_4_H__
#define __conv_conv_weights_4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_conv_weights_4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 144;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_conv_weights_4_ram) {
        ram[0] = "0b10111110011111110101101010010110";
        ram[1] = "0b10111100001011001010001101100010";
        ram[2] = "0b00111011011000011101011001001001";
        ram[3] = "0b10111110101010000100000110101011";
        ram[4] = "0b10111110000000110011111101000010";
        ram[5] = "0b00111110011010111000111111011110";
        ram[6] = "0b00111111000001100100001110111011";
        ram[7] = "0b10111111000100010000101101010010";
        ram[8] = "0b00111110011100101111110001101001";
        ram[9] = "0b10111111000010001101111010100000";
        ram[10] = "0b10111110000110111101111001000000";
        ram[11] = "0b10111110011111001010010011110100";
        ram[12] = "0b10111110101101011110000011111000";
        ram[13] = "0b00111110010000111000010000110100";
        ram[14] = "0b10111111011010111111011110001100";
        ram[15] = "0b00111110011000101011101110101010";
        ram[16] = "0b10111110010011101101001110010101";
        ram[17] = "0b00111110100000110101110111001100";
        ram[18] = "0b10111110100011100101110011110110";
        ram[19] = "0b10111110110010110010111110001000";
        ram[20] = "0b10111110011101001111111101000011";
        ram[21] = "0b00111100010011111001000110100011";
        ram[22] = "0b00111011111111010001000100111000";
        ram[23] = "0b10111110001101111011101111111001";
        ram[24] = "0b00111101110100100001110101010100";
        ram[25] = "0b10111110110000010010001001110101";
        ram[26] = "0b00111110001100000111101000101001";
        ram[27] = "0b10111110000101000010100011010100";
        ram[28] = "0b10111101101100111011110000001010";
        ram[29] = "0b00111110000010111000001010000000";
        ram[30] = "0b10111111001111101000001111010011";
        ram[31] = "0b10111100110100100010010000100101";
        ram[32] = "0b10111110010111101011101110111010";
        ram[33] = "0b10111110100101010111001110101000";
        ram[34] = "0b10111111000011010100110110100101";
        ram[35] = "0b10111111001000111110010000000100";
        ram[36] = "0b10111101101101100110001001111000";
        ram[37] = "0b00111101101000100101111100100000";
        ram[38] = "0b00111110010011110011101010011011";
        ram[39] = "0b10111111001000001110111100110101";
        ram[40] = "0b00111101100110010000010010110100";
        ram[41] = "0b10111110111000111000100001100110";
        ram[42] = "0b00111010101001011010110011001101";
        ram[43] = "0b10111110011000110111110111101001";
        ram[44] = "0b10111110000010000011011110110101";
        ram[45] = "0b10111101101100001110000000100010";
        ram[46] = "0b10111110101001100000011010111000";
        ram[47] = "0b10111101110000101010110111000101";
        ram[48] = "0b10111110110110111000111000101010";
        ram[49] = "0b10111101000101110011101001111001";
        ram[50] = "0b00111101000110011000001110010100";
        ram[51] = "0b10111110000001111000010100101111";
        ram[52] = "0b00111101011100010110010011000111";
        ram[53] = "0b00111110100100110100001001101000";
        ram[54] = "0b10111110011000000010011111011001";
        ram[55] = "0b10111110000110101100100100101010";
        ram[56] = "0b10111110101011010001011101100001";
        ram[57] = "0b10111110100001000000101011010000";
        ram[58] = "0b10111110111001001000001010011101";
        ram[59] = "0b10111110100000011101100111010011";
        ram[60] = "0b10111101101101100010110011111110";
        ram[61] = "0b00111110101000110101111101011111";
        ram[62] = "0b10111110111010001000111001111010";
        ram[63] = "0b00111101111010111110100000110110";
        ram[64] = "0b10111110011010010111110000111101";
        ram[65] = "0b10111110101000110010000011011010";
        ram[66] = "0b10111101110010011110010111100010";
        ram[67] = "0b10111111100100110111101011001100";
        ram[68] = "0b00111110101000010000110100010111";
        ram[69] = "0b00111110100100001001101010101010";
        ram[70] = "0b10111100001011010101001110001011";
        ram[71] = "0b00111101111000111101110111011011";
        ram[72] = "0b00111101101110010111110111010000";
        ram[73] = "0b10111110011011101000111110110000";
        ram[74] = "0b00111100110100111001000100001100";
        ram[75] = "0b10111110010010011011110010111010";
        ram[76] = "0b10111101110011011101110011101000";
        ram[77] = "0b00111100111111111100110110101011";
        ram[78] = "0b10111111001100011111010100111000";
        ram[79] = "0b00111110010010001001101010001001";
        ram[80] = "0b10111110000101110101110111011101";
        ram[81] = "0b10111110111100001000001000101000";
        ram[82] = "0b10111110100110011011101101001001";
        ram[83] = "0b10111100100011001000100010100100";
        ram[84] = "0b00111111000000101110110110011010";
        ram[85] = "0b00111110100010100000110000101000";
        ram[86] = "0b10111101110011100100010100111101";
        ram[87] = "0b10111110000011000011100001101101";
        ram[88] = "0b00111101110011011011100111000111";
        ram[89] = "0b10111110101001001000000101101111";
        ram[90] = "0b10111101111011000000110111110110";
        ram[91] = "0b10111110100110100001001111000010";
        ram[92] = "0b10111110000010100101000010010100";
        ram[93] = "0b10111111000110101100011010011011";
        ram[94] = "0b10111110100000111100111110010010";
        ram[95] = "0b10111110001001110001110110100011";
        ram[96] = "0b10111101111101011110100001001111";
        ram[97] = "0b10111110000011111000010110010100";
        ram[98] = "0b10111110000100000111011001111101";
        ram[99] = "0b10111111000000010101001100100110";
        ram[100] = "0b10111101100111001100011111010010";
        ram[101] = "0b10111101110111011000111100001100";
        ram[102] = "0b10111110010000011001001101110001";
        ram[103] = "0b00111110100100001111100000011111";
        ram[104] = "0b10111110011010010011010111111100";
        ram[105] = "0b00111110101010010000101011011101";
        ram[106] = "0b10111110001001000010001001000110";
        ram[107] = "0b10111110100101010111110101111100";
        ram[108] = "0b00111101001111011101110010100101";
        ram[109] = "0b00111100101010011011011010110011";
        ram[110] = "0b10111101100111001001101000110101";
        ram[111] = "0b10111101000010000010010010010010";
        ram[112] = "0b10111110101001111111001101101011";
        ram[113] = "0b10111110101010111010111001101000";
        ram[114] = "0b10111110011001101011000010010110";
        ram[115] = "0b10111111001001000001010011000110";
        ram[116] = "0b00111110000100111010010000101111";
        ram[117] = "0b00111101011011000101100111111011";
        ram[118] = "0b00111110101001100110100101101010";
        ram[119] = "0b00111110010001110111010100110010";
        ram[120] = "0b10111110100001000100010110101010";
        ram[121] = "0b10111110011001010010100100110101";
        ram[122] = "0b10111110001000101111111111010010";
        ram[123] = "0b10111101001110001011100110111011";
        ram[124] = "0b00111101110111101010101100110110";
        ram[125] = "0b10111110010011010010010010011110";
        ram[126] = "0b00111101111000011010110001011000";
        ram[127] = "0b10111110100100011110001001011000";
        ram[128] = "0b00111100010111100010111011110101";
        ram[129] = "0b10111110000011001010000111001111";
        ram[130] = "0b00111110001110010000011100010000";
        ram[131] = "0b10111110000110011101111101010101";
        ram[132] = "0b00111110100001100101100000011101";
        ram[133] = "0b10111110010001111010100001010000";
        ram[134] = "0b00111101001111010010111110100001";
        ram[135] = "0b00111101101101100111101010010110";
        ram[136] = "0b00111101010001110111100010011010";
        ram[137] = "0b10111101100100101000101011100111";
        ram[138] = "0b10111110100000001110011010110000";
        ram[139] = "0b10111110100011110110010010101110";
        ram[140] = "0b10111110001011001011110111011100";
        ram[141] = "0b10111111001011111100101000000000";
        ram[142] = "0b00111110110000110101001100101110";
        ram[143] = "0b10111101110010011101001001111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_conv_weights_4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 144;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_conv_weights_4_ram* meminst;


SC_CTOR(conv_conv_weights_4) {
meminst = new conv_conv_weights_4_ram("conv_conv_weights_4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_conv_weights_4() {
    delete meminst;
}


};//endmodule
#endif
