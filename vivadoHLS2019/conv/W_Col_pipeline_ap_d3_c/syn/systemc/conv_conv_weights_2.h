// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_conv_weights_2_H__
#define __conv_conv_weights_2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_conv_weights_2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 144;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_conv_weights_2_ram) {
        ram[0] = "0b10111101011100010001101101100001";
        ram[1] = "0b00111101000010010111001000000100";
        ram[2] = "0b10111101010111111110100001101000";
        ram[3] = "0b10111110101001011111000000101100";
        ram[4] = "0b10111100100000010011010001001000";
        ram[5] = "0b10111101101101000011000101111011";
        ram[6] = "0b10111110001110100001101001010000";
        ram[7] = "0b00111101110000110111111001101111";
        ram[8] = "0b10111101111011010101101011100010";
        ram[9] = "0b10111101100011001010111011101010";
        ram[10] = "0b00111110100001000101001011100111";
        ram[11] = "0b10111100001011110100111100001110";
        ram[12] = "0b00111101001001111100110100000011";
        ram[13] = "0b10111101001011111000100111000110";
        ram[14] = "0b00111101110000101011111100010010";
        ram[15] = "0b10111110000000110001000001010110";
        ram[16] = "0b00111101000001100111101011011001";
        ram[17] = "0b00111100101100100000010100110110";
        ram[18] = "0b00111110000011101011000110000001";
        ram[19] = "0b00111101100100010001000001011110";
        ram[20] = "0b10111110011010010111101100110001";
        ram[21] = "0b00111110011110101001110100011111";
        ram[22] = "0b10111110011001000101010110101000";
        ram[23] = "0b10111101100011110101101000010000";
        ram[24] = "0b10111110001100110110000010001101";
        ram[25] = "0b00111101100000001100101101101100";
        ram[26] = "0b00111110000110111000001101001001";
        ram[27] = "0b00111100100001111110100111011001";
        ram[28] = "0b10111101101110101011100001100011";
        ram[29] = "0b00111101010001111100101001100100";
        ram[30] = "0b00111110100000110000010100010000";
        ram[31] = "0b00111101010001100011010010011000";
        ram[32] = "0b10111100010111101010100010010111";
        ram[33] = "0b00111110001011110110001000110000";
        ram[34] = "0b00111110100001011000111000000000";
        ram[35] = "0b00111110011111100111010010110000";
        ram[36] = "0b10111110001001001110111111001100";
        ram[37] = "0b00111110100110011100011110111101";
        ram[38] = "0b10111110101011000000101010001101";
        ram[39] = "0b10111110000100001001110011000011";
        ram[40] = "0b10111110000100110101000001001100";
        ram[41] = "0b10111110010100011001101111010100";
        ram[42] = "0b10111110000111101010010001100110";
        ram[43] = "0b10111100110111100001110000010101";
        ram[44] = "0b10111110100111101110101010100111";
        ram[45] = "0b00111110011101110100011101010010";
        ram[46] = "0b10111100110101111000110001000011";
        ram[47] = "0b10111011101110100111101110010001";
        ram[48] = "0b10111110001001001101011100101000";
        ram[49] = "0b10111110011101111011001010001001";
        ram[50] = "0b10111101111000010000101011011101";
        ram[51] = "0b00111101100110000111111110001000";
        ram[52] = "0b10111101100010001111100101101110";
        ram[53] = "0b10111110101011000000111111101101";
        ram[54] = "0b10111110011010011001100001001010";
        ram[55] = "0b00111100101001000011110111001101";
        ram[56] = "0b00111110101101010010101110110010";
        ram[57] = "0b00111100100000101100001010111101";
        ram[58] = "0b00111110011000110001101010001111";
        ram[59] = "0b10111101011100011111101111000110";
        ram[60] = "0b10111101100110011010101101101101";
        ram[61] = "0b10111110100100000100100110001000";
        ram[62] = "0b10111101100001011010101000101110";
        ram[63] = "0b10111101000100101101000100101000";
        ram[64] = "0b10111110001011100010000011001101";
        ram[65] = "0b00111101100100001000101110111001";
        ram[66] = "0b10111101101111100000111110000000";
        ram[67] = "0b00111101000101000101101101101100";
        ram[68] = "0b10111101001110100011111011000000";
        ram[69] = "0b10111110110100010110111110000111";
        ram[70] = "0b00111010001111111010000010010100";
        ram[71] = "0b10111101010101111111100001000100";
        ram[72] = "0b10111110000110101011100001100011";
        ram[73] = "0b10111110011110011100101101101000";
        ram[74] = "0b10111011110101001100101110011111";
        ram[75] = "0b00111101111001100111001001110101";
        ram[76] = "0b10111101110000101110000010100000";
        ram[77] = "0b10111011000111111100011011011010";
        ram[78] = "0b10111100010101111110110010111011";
        ram[79] = "0b10111110100101001011000000111010";
        ram[80] = "0b10111101110011100101001101100101";
        ram[81] = "0b00111101100011000100101011000111";
        ram[82] = "0b00111101000001010101111110111011";
        ram[83] = "0b00111011011110010100110010001000";
        ram[84] = "0b00111101100111101111110100000000";
        ram[85] = "0b10111110100001011010010101010101";
        ram[86] = "0b00111110011010011111011000100011";
        ram[87] = "0b00111110001011110010110001110011";
        ram[88] = "0b10111110100011010110011000100111";
        ram[89] = "0b00111110000011110000001011000101";
        ram[90] = "0b10111110010101000100010110101010";
        ram[91] = "0b00111110011111010100100110010101";
        ram[92] = "0b10111101101011011110010000111111";
        ram[93] = "0b00111110100000100111110001011011";
        ram[94] = "0b10111101101001100011101111101111";
        ram[95] = "0b10111110101100011111100101001000";
        ram[96] = "0b00111100110000100111100001001011";
        ram[97] = "0b00111110100011011110000000101111";
        ram[98] = "0b10111110110011010011101011100111";
        ram[99] = "0b00111101011010111010111100010000";
        ram[100] = "0b00111101000100111101010100110100";
        ram[101] = "0b10111101101011011010010011001111";
        ram[102] = "0b00111110010111100011110001010011";
        ram[103] = "0b10111101001010011000101110110101";
        ram[104] = "0b00111110010010101011111111111101";
        ram[105] = "0b00111101001110010001000011000011";
        ram[106] = "0b10111101001011100101011010001010";
        ram[107] = "0b00111101111100010011110111111011";
        ram[108] = "0b10111110100010001010011000010001";
        ram[109] = "0b10111101111100011000111010111001";
        ram[110] = "0b10111101000011011110011011011110";
        ram[111] = "0b00111110100001011111011100011111";
        ram[112] = "0b00111100010000110000110100110000";
        ram[113] = "0b00111110010011011110100101111101";
        ram[114] = "0b00111101001110011111101110100100";
        ram[115] = "0b10111100111001100100111101010101";
        ram[116] = "0b10111110010000101101110011110100";
        ram[117] = "0b10111101001110000011000101101010";
        ram[118] = "0b00111101011111011000001001110111";
        ram[119] = "0b00111101100111011011010101010010";
        ram[120] = "0b10111101101010000101000110101000";
        ram[121] = "0b00111101000011010001001100001110";
        ram[122] = "0b10111110011010111000111100010101";
        ram[123] = "0b10111100101111100011000110010100";
        ram[124] = "0b10111100011011111001110110110010";
        ram[125] = "0b00111110000101100100011001101011";
        ram[126] = "0b00111101100110111101100000111000";
        ram[127] = "0b00111101001011000100000111011101";
        ram[128] = "0b10111101101001111111001000111101";
        ram[129] = "0b00111101101101010000010000111110";
        ram[130] = "0b10111101011100110111110010011010";
        ram[131] = "0b10111110010100010010110100110100";
        ram[132] = "0b10111110010111110110101010010100";
        ram[133] = "0b10111110011110001101100011101101";
        ram[134] = "0b00111110100001001100100110000110";
        ram[135] = "0b00111101101000010000000111110011";
        ram[136] = "0b10111110011001111001111100100011";
        ram[137] = "0b00111101100110110100100110011101";
        ram[138] = "0b00111100110101001100011101101101";
        ram[139] = "0b00111110011101010011010110000111";
        ram[140] = "0b00111100001111111101011100011011";
        ram[141] = "0b00111010111100010110111101000100";
        ram[142] = "0b00111110011010100010100101000001";
        ram[143] = "0b10111110000000000010011000000011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_conv_weights_2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 144;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_conv_weights_2_ram* meminst;


SC_CTOR(conv_conv_weights_2) {
meminst = new conv_conv_weights_2_ram("conv_conv_weights_2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_conv_weights_2() {
    delete meminst;
}


};//endmodule
#endif
