// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.808000,HLS_SYN_LAT=437537,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=7,HLS_SYN_FF=1144,HLS_SYN_LUT=1699,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 32'd1;
parameter    ap_ST_fsm_state2 = 32'd2;
parameter    ap_ST_fsm_pp0_stage0 = 32'd4;
parameter    ap_ST_fsm_pp0_stage1 = 32'd8;
parameter    ap_ST_fsm_pp0_stage2 = 32'd16;
parameter    ap_ST_fsm_pp0_stage3 = 32'd32;
parameter    ap_ST_fsm_pp0_stage4 = 32'd64;
parameter    ap_ST_fsm_pp0_stage5 = 32'd128;
parameter    ap_ST_fsm_pp0_stage6 = 32'd256;
parameter    ap_ST_fsm_pp0_stage7 = 32'd512;
parameter    ap_ST_fsm_pp0_stage8 = 32'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 32'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 32'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 32'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 32'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 32'd32768;
parameter    ap_ST_fsm_pp0_stage14 = 32'd65536;
parameter    ap_ST_fsm_pp0_stage15 = 32'd131072;
parameter    ap_ST_fsm_pp0_stage16 = 32'd262144;
parameter    ap_ST_fsm_pp0_stage17 = 32'd524288;
parameter    ap_ST_fsm_pp0_stage18 = 32'd1048576;
parameter    ap_ST_fsm_pp0_stage19 = 32'd2097152;
parameter    ap_ST_fsm_pp0_stage20 = 32'd4194304;
parameter    ap_ST_fsm_pp0_stage21 = 32'd8388608;
parameter    ap_ST_fsm_pp0_stage22 = 32'd16777216;
parameter    ap_ST_fsm_pp0_stage23 = 32'd33554432;
parameter    ap_ST_fsm_state30 = 32'd67108864;
parameter    ap_ST_fsm_state31 = 32'd134217728;
parameter    ap_ST_fsm_state32 = 32'd268435456;
parameter    ap_ST_fsm_state33 = 32'd536870912;
parameter    ap_ST_fsm_state34 = 32'd1073741824;
parameter    ap_ST_fsm_state35 = 32'd2147483648;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [7:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [7:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [7:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [7:0] input_4_address0;
output   input_4_ce0;
input  [31:0] input_4_q0;
output  [7:0] input_5_address0;
output   input_5_ce0;
input  [31:0] input_5_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_0_ce0;
reg input_1_ce0;
reg input_2_ce0;
reg input_3_ce0;
reg input_4_ce0;
reg input_5_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [31:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] conv_weights_0_address0;
reg    conv_weights_0_ce0;
wire   [31:0] conv_weights_0_q0;
wire   [7:0] conv_weights_1_address0;
reg    conv_weights_1_ce0;
wire   [31:0] conv_weights_1_q0;
wire   [7:0] conv_weights_2_address0;
reg    conv_weights_2_ce0;
wire   [31:0] conv_weights_2_q0;
wire   [7:0] conv_weights_3_address0;
reg    conv_weights_3_ce0;
wire   [31:0] conv_weights_3_q0;
wire   [7:0] conv_weights_4_address0;
reg    conv_weights_4_ce0;
wire   [31:0] conv_weights_4_q0;
wire   [7:0] conv_weights_5_address0;
reg    conv_weights_5_ce0;
wire   [31:0] conv_weights_5_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
reg   [3:0] indvar_flatten_reg_359;
reg   [1:0] wr_0_reg_370;
reg   [31:0] w_sum_1_reg_381;
reg   [1:0] wc_0_reg_393;
wire   [31:0] grp_fu_410_p2;
reg   [31:0] reg_422;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state29_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln20_reg_825;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire   [31:0] grp_fu_404_p2;
reg   [31:0] reg_427;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state17_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state21_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state25_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_11001;
wire    ap_CS_fsm_state34;
wire   [0:0] icmp_ln10_fu_433_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln10_fu_439_p2;
reg   [10:0] add_ln10_reg_783;
wire   [0:0] icmp_ln13_fu_451_p2;
reg   [0:0] icmp_ln13_reg_788;
wire   [3:0] select_ln37_1_fu_465_p3;
reg   [3:0] select_ln37_1_reg_793;
wire   [4:0] select_ln37_2_fu_507_p3;
reg   [4:0] select_ln37_2_reg_799;
wire   [3:0] select_ln37_3_fu_515_p3;
reg   [3:0] select_ln37_3_reg_804;
wire   [63:0] zext_ln28_fu_534_p1;
reg   [63:0] zext_ln28_reg_810;
wire   [8:0] zext_ln37_2_fu_538_p1;
reg   [8:0] zext_ln37_2_reg_815;
reg   [10:0] conv_out_addr_reg_820;
wire   [0:0] icmp_ln20_fu_557_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state27_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_825_pp0_iter1_reg;
wire   [3:0] add_ln20_1_fu_563_p2;
reg   [3:0] add_ln20_1_reg_829;
wire   [1:0] select_ln20_fu_581_p3;
reg   [1:0] select_ln20_reg_834;
wire   [1:0] select_ln20_1_fu_589_p3;
reg   [1:0] select_ln20_1_reg_839;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state28_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv_weights_1_load_reg_914;
reg   [31:0] input_1_load_reg_919;
reg   [31:0] conv_weights_2_load_reg_924;
reg   [31:0] input_2_load_reg_929;
reg   [31:0] conv_weights_3_load_reg_934;
reg   [31:0] input_3_load_reg_939;
reg   [31:0] conv_weights_4_load_reg_944;
reg   [31:0] input_4_load_reg_949;
reg   [31:0] conv_weights_5_load_reg_954;
reg   [31:0] input_5_load_reg_959;
reg   [31:0] tmp_1_1_reg_964;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] tmp_1_2_reg_969;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] tmp_1_3_reg_974;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
reg   [31:0] tmp_1_5_reg_979;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire   [1:0] wc_fu_687_p2;
reg   [1:0] wc_reg_984;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_state26_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state30;
wire   [4:0] f_fu_692_p2;
reg   [4:0] f_reg_999;
wire   [8:0] select_ln13_fu_703_p3;
reg   [8:0] select_ln13_reg_1004;
wire    ap_CS_fsm_state31;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [10:0] indvar_flatten21_reg_303;
wire    ap_CS_fsm_state35;
reg   [3:0] r_0_reg_314;
reg   [8:0] indvar_flatten7_reg_325;
reg   [3:0] c_0_reg_337;
reg   [4:0] f_0_reg_348;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_363_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_374_p4;
wire   [31:0] ap_phi_mux_w_sum_1_phi_fu_385_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_397_p4;
wire   [63:0] zext_ln37_4_fu_552_p1;
wire   [63:0] zext_ln28_5_fu_659_p1;
wire   [63:0] zext_ln28_7_fu_678_p1;
reg   [31:0] grp_fu_404_p0;
reg   [31:0] grp_fu_404_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_block_pp0_stage23;
reg   [31:0] grp_fu_410_p0;
reg   [31:0] grp_fu_410_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage6;
wire   [3:0] r_fu_445_p2;
wire   [0:0] icmp_ln16_fu_483_p2;
wire   [0:0] xor_ln37_fu_477_p2;
wire   [3:0] select_ln37_fu_457_p3;
wire   [0:0] and_ln37_fu_489_p2;
wire   [0:0] or_ln37_fu_501_p2;
wire   [3:0] c_fu_495_p2;
wire   [7:0] grp_fu_761_p3;
wire   [11:0] zext_ln37_3_fu_542_p1;
wire   [11:0] tmp_2_cast_fu_527_p3;
wire   [11:0] add_ln37_1_fu_546_p2;
wire   [0:0] icmp_ln23_fu_575_p2;
wire   [1:0] wr_fu_569_p2;
wire   [3:0] tmp_4_fu_601_p3;
wire   [4:0] zext_ln28_2_fu_609_p1;
wire   [4:0] zext_ln28_1_fu_597_p1;
wire   [3:0] zext_ln20_fu_619_p1;
wire   [3:0] add_ln20_fu_623_p2;
wire   [4:0] sub_ln28_fu_613_p2;
wire   [4:0] zext_ln28_4_fu_636_p1;
wire   [4:0] add_ln28_fu_640_p2;
wire   [8:0] tmp_8_cast_fu_646_p3;
wire   [8:0] add_ln28_2_fu_654_p2;
wire   [3:0] zext_ln23_fu_632_p1;
wire   [3:0] add_ln28_1_fu_669_p2;
wire   [7:0] grp_fu_770_p3;
wire   [8:0] add_ln13_1_fu_697_p2;
wire   [31:0] bitcast_ln36_fu_710_p1;
wire   [7:0] tmp_fu_714_p4;
wire   [22:0] trunc_ln36_fu_724_p1;
wire   [0:0] icmp_ln36_1_fu_734_p2;
wire   [0:0] icmp_ln36_fu_728_p2;
wire   [0:0] or_ln36_fu_740_p2;
wire   [0:0] grp_fu_416_p2;
wire   [0:0] and_ln36_fu_746_p2;
wire   [3:0] grp_fu_761_p0;
wire   [4:0] grp_fu_761_p1;
wire   [3:0] grp_fu_761_p2;
wire   [3:0] grp_fu_770_p0;
wire   [4:0] grp_fu_770_p1;
wire   [3:0] grp_fu_770_p2;
reg   [31:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage9_11001;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_state15_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_pp0_stage12_11001;
wire    ap_block_state16_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage13_11001;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state18_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_pp0_stage15_11001;
wire    ap_block_state19_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_pp0_stage16_11001;
wire    ap_block_state20_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage17_11001;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state22_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_pp0_stage19_11001;
wire    ap_block_state23_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_pp0_stage20_11001;
wire    ap_block_state24_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage21_11001;
wire    ap_block_pp0_stage22_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_761_p00;
wire   [7:0] grp_fu_761_p20;
wire   [7:0] grp_fu_770_p00;
wire   [7:0] grp_fu_770_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 32'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_weights_0 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_address0),
    .ce0(conv_weights_0_ce0),
    .q0(conv_weights_0_q0)
);

conv_conv_weights_1 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_address0),
    .ce0(conv_weights_1_ce0),
    .q0(conv_weights_1_q0)
);

conv_conv_weights_2 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_address0),
    .ce0(conv_weights_2_ce0),
    .q0(conv_weights_2_q0)
);

conv_conv_weights_3 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_3_address0),
    .ce0(conv_weights_3_ce0),
    .q0(conv_weights_3_q0)
);

conv_conv_weights_4 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_4_address0),
    .ce0(conv_weights_4_ce0),
    .q0(conv_weights_4_q0)
);

conv_conv_weights_5 #(
    .DataWidth( 32 ),
    .AddressRange( 144 ),
    .AddressWidth( 8 ))
conv_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_5_address0),
    .ce0(conv_weights_5_ce0),
    .q0(conv_weights_5_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_404_p0),
    .din1(grp_fu_404_p1),
    .ce(1'b1),
    .dout(grp_fu_404_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_410_p0),
    .din1(grp_fu_410_p1),
    .ce(1'b1),
    .dout(grp_fu_410_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_404_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_416_p2)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U4(
    .din0(grp_fu_761_p0),
    .din1(grp_fu_761_p1),
    .din2(grp_fu_761_p2),
    .dout(grp_fu_761_p3)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U5(
    .din0(grp_fu_770_p0),
    .din1(grp_fu_770_p1),
    .din2(grp_fu_770_p2),
    .dout(grp_fu_770_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage23_subdone) & (1'b1 == ap_CS_fsm_pp0_stage23)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        c_0_reg_337 <= select_ln37_3_reg_804;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_337 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        f_0_reg_348 <= f_reg_999;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_348 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        indvar_flatten21_reg_303 <= add_ln10_reg_783;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_303 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        indvar_flatten7_reg_325 <= select_ln13_reg_1004;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_325 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_825 == 1'd0))) begin
        indvar_flatten_reg_359 <= add_ln20_1_reg_829;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
        indvar_flatten_reg_359 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        r_0_reg_314 <= select_ln37_1_reg_793;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_314 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln20_reg_825_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_sum_1_reg_381 <= grp_fu_404_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
        w_sum_1_reg_381 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_825 == 1'd0))) begin
        wc_0_reg_393 <= wc_reg_984;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
        wc_0_reg_393 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_825 == 1'd0))) begin
        wr_0_reg_370 <= select_ln20_1_reg_839;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
        wr_0_reg_370 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_783 <= add_ln10_fu_439_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln20_1_reg_829 <= add_ln20_1_fu_563_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_433_p2 == 1'd0))) begin
        conv_out_addr_reg_820 <= zext_ln37_4_fu_552_p1;
        icmp_ln13_reg_788 <= icmp_ln13_fu_451_p2;
        select_ln37_1_reg_793 <= select_ln37_1_fu_465_p3;
        select_ln37_2_reg_799 <= select_ln37_2_fu_507_p3;
        select_ln37_3_reg_804 <= select_ln37_3_fu_515_p3;
        zext_ln28_reg_810[4 : 0] <= zext_ln28_fu_534_p1[4 : 0];
        zext_ln37_2_reg_815[4 : 0] <= zext_ln37_2_fu_538_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln20_reg_825 == 1'd0))) begin
        conv_weights_1_load_reg_914 <= conv_weights_1_q0;
        conv_weights_2_load_reg_924 <= conv_weights_2_q0;
        conv_weights_3_load_reg_934 <= conv_weights_3_q0;
        conv_weights_4_load_reg_944 <= conv_weights_4_q0;
        conv_weights_5_load_reg_954 <= conv_weights_5_q0;
        input_1_load_reg_919 <= input_1_q0;
        input_2_load_reg_929 <= input_2_q0;
        input_3_load_reg_939 <= input_3_q0;
        input_4_load_reg_949 <= input_4_q0;
        input_5_load_reg_959 <= input_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        f_reg_999 <= f_fu_692_p2;
        select_ln13_reg_1004 <= select_ln13_fu_703_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_reg_825 <= icmp_ln20_fu_557_p2;
        icmp_ln20_reg_825_pp0_iter1_reg <= icmp_ln20_reg_825;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln20_reg_825 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln20_reg_825 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_422 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state34) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0)) | ((1'b0 == ap_block_pp0_stage18_11001) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln20_reg_825 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln20_reg_825 == 1'd0)))) begin
        reg_427 <= grp_fu_404_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_fu_557_p2 == 1'd0))) begin
        select_ln20_1_reg_839 <= select_ln20_1_fu_589_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_fu_557_p2 == 1'd0))) begin
        select_ln20_reg_834 <= select_ln20_fu_581_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0))) begin
        tmp_1_1_reg_964 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0))) begin
        tmp_1_2_reg_969 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0))) begin
        tmp_1_3_reg_974 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0))) begin
        tmp_1_5_reg_979 <= grp_fu_410_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage23_11001) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln20_reg_825 == 1'd0))) begin
        wc_reg_984 <= wc_fu_687_p2;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_557_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_825 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_363_p4 = add_ln20_1_reg_829;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_363_p4 = indvar_flatten_reg_359;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_825 == 1'd0))) begin
        ap_phi_mux_wc_0_phi_fu_397_p4 = wc_reg_984;
    end else begin
        ap_phi_mux_wc_0_phi_fu_397_p4 = wc_0_reg_393;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_reg_825 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_374_p4 = select_ln20_1_reg_839;
    end else begin
        ap_phi_mux_wr_0_phi_fu_374_p4 = wr_0_reg_370;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_3_ce0 = 1'b1;
    end else begin
        conv_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_4_ce0 = 1'b1;
    end else begin
        conv_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_5_ce0 = 1'b1;
    end else begin
        conv_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_404_p0 = w_sum_1_reg_381;
    end else if ((((1'b0 == ap_block_pp0_stage19) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_404_p0 = reg_427;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_404_p0 = ap_phi_mux_w_sum_1_phi_fu_385_p4;
    end else begin
        grp_fu_404_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        grp_fu_404_p1 = conv_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_404_p1 = tmp_1_5_reg_979;
    end else if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_404_p1 = tmp_1_3_reg_974;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_404_p1 = tmp_1_2_reg_969;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_404_p1 = tmp_1_1_reg_964;
    end else if ((((1'b0 == ap_block_pp0_stage19) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_404_p1 = reg_422;
    end else begin
        grp_fu_404_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_410_p0 = conv_weights_5_load_reg_954;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_410_p0 = conv_weights_4_load_reg_944;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_410_p0 = conv_weights_3_load_reg_934;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_410_p0 = conv_weights_2_load_reg_924;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_410_p0 = conv_weights_1_load_reg_914;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_410_p0 = conv_weights_0_q0;
        end else begin
            grp_fu_410_p0 = 'bx;
        end
    end else begin
        grp_fu_410_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            grp_fu_410_p1 = input_5_load_reg_959;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            grp_fu_410_p1 = input_4_load_reg_949;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            grp_fu_410_p1 = input_3_load_reg_939;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_410_p1 = input_2_load_reg_929;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_410_p1 = input_1_load_reg_919;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_410_p1 = input_0_q0;
        end else begin
            grp_fu_410_p1 = 'bx;
        end
    end else begin
        grp_fu_410_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_433_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln20_fu_557_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln20_fu_557_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_439_p2 = (indvar_flatten21_reg_303 + 11'd1);

assign add_ln13_1_fu_697_p2 = (9'd1 + indvar_flatten7_reg_325);

assign add_ln20_1_fu_563_p2 = (ap_phi_mux_indvar_flatten_phi_fu_363_p4 + 4'd1);

assign add_ln20_fu_623_p2 = (zext_ln20_fu_619_p1 + select_ln37_1_reg_793);

assign add_ln28_1_fu_669_p2 = (zext_ln23_fu_632_p1 + select_ln37_3_reg_804);

assign add_ln28_2_fu_654_p2 = (tmp_8_cast_fu_646_p3 + zext_ln37_2_reg_815);

assign add_ln28_fu_640_p2 = (sub_ln28_fu_613_p2 + zext_ln28_4_fu_636_p1);

assign add_ln37_1_fu_546_p2 = (zext_ln37_3_fu_542_p1 + tmp_2_cast_fu_527_p3);

assign and_ln36_fu_746_p2 = (or_ln36_fu_740_p2 & grp_fu_416_p2);

assign and_ln37_fu_489_p2 = (xor_ln37_fu_477_p2 & icmp_ln16_fu_483_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_1_phi_fu_385_p4 = w_sum_1_reg_381;

assign bitcast_ln36_fu_710_p1 = reg_427;

assign c_fu_495_p2 = (select_ln37_fu_457_p3 + 4'd1);

assign conv_bias_address0 = zext_ln28_reg_810;

assign conv_out_address0 = conv_out_addr_reg_820;

assign conv_out_d0 = ((and_ln36_fu_746_p2[0:0] === 1'b1) ? reg_427 : 32'd0);

assign conv_weights_0_address0 = zext_ln28_5_fu_659_p1;

assign conv_weights_1_address0 = zext_ln28_5_fu_659_p1;

assign conv_weights_2_address0 = zext_ln28_5_fu_659_p1;

assign conv_weights_3_address0 = zext_ln28_5_fu_659_p1;

assign conv_weights_4_address0 = zext_ln28_5_fu_659_p1;

assign conv_weights_5_address0 = zext_ln28_5_fu_659_p1;

assign f_fu_692_p2 = (5'd1 + select_ln37_2_reg_799);

assign grp_fu_761_p0 = grp_fu_761_p00;

assign grp_fu_761_p00 = select_ln37_1_fu_465_p3;

assign grp_fu_761_p1 = 8'd11;

assign grp_fu_761_p2 = grp_fu_761_p20;

assign grp_fu_761_p20 = select_ln37_3_fu_515_p3;

assign grp_fu_770_p0 = grp_fu_770_p00;

assign grp_fu_770_p00 = add_ln20_fu_623_p2;

assign grp_fu_770_p1 = 8'd13;

assign grp_fu_770_p2 = grp_fu_770_p20;

assign grp_fu_770_p20 = add_ln28_1_fu_669_p2;

assign icmp_ln10_fu_433_p2 = ((indvar_flatten21_reg_303 == 11'd1936) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_451_p2 = ((indvar_flatten7_reg_325 == 9'd176) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_483_p2 = ((f_0_reg_348 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_557_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_363_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_575_p2 = ((ap_phi_mux_wc_0_phi_fu_397_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln36_1_fu_734_p2 = ((trunc_ln36_fu_724_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_728_p2 = ((tmp_fu_714_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_address0 = zext_ln28_7_fu_678_p1;

assign input_1_address0 = zext_ln28_7_fu_678_p1;

assign input_2_address0 = zext_ln28_7_fu_678_p1;

assign input_3_address0 = zext_ln28_7_fu_678_p1;

assign input_4_address0 = zext_ln28_7_fu_678_p1;

assign input_5_address0 = zext_ln28_7_fu_678_p1;

assign or_ln36_fu_740_p2 = (icmp_ln36_fu_728_p2 | icmp_ln36_1_fu_734_p2);

assign or_ln37_fu_501_p2 = (icmp_ln13_fu_451_p2 | and_ln37_fu_489_p2);

assign r_fu_445_p2 = (r_0_reg_314 + 4'd1);

assign select_ln13_fu_703_p3 = ((icmp_ln13_reg_788[0:0] === 1'b1) ? 9'd1 : add_ln13_1_fu_697_p2);

assign select_ln20_1_fu_589_p3 = ((icmp_ln23_fu_575_p2[0:0] === 1'b1) ? wr_fu_569_p2 : ap_phi_mux_wr_0_phi_fu_374_p4);

assign select_ln20_fu_581_p3 = ((icmp_ln23_fu_575_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_397_p4);

assign select_ln37_1_fu_465_p3 = ((icmp_ln13_fu_451_p2[0:0] === 1'b1) ? r_fu_445_p2 : r_0_reg_314);

assign select_ln37_2_fu_507_p3 = ((or_ln37_fu_501_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_348);

assign select_ln37_3_fu_515_p3 = ((and_ln37_fu_489_p2[0:0] === 1'b1) ? c_fu_495_p2 : select_ln37_fu_457_p3);

assign select_ln37_fu_457_p3 = ((icmp_ln13_fu_451_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_337);

assign sub_ln28_fu_613_p2 = (zext_ln28_2_fu_609_p1 - zext_ln28_1_fu_597_p1);

assign tmp_2_cast_fu_527_p3 = {{grp_fu_761_p3}, {4'd0}};

assign tmp_4_fu_601_p3 = {{select_ln20_1_fu_589_p3}, {2'd0}};

assign tmp_8_cast_fu_646_p3 = {{add_ln28_fu_640_p2}, {4'd0}};

assign tmp_fu_714_p4 = {{bitcast_ln36_fu_710_p1[30:23]}};

assign trunc_ln36_fu_724_p1 = bitcast_ln36_fu_710_p1[22:0];

assign wc_fu_687_p2 = (select_ln20_reg_834 + 2'd1);

assign wr_fu_569_p2 = (ap_phi_mux_wr_0_phi_fu_374_p4 + 2'd1);

assign xor_ln37_fu_477_p2 = (icmp_ln13_fu_451_p2 ^ 1'd1);

assign zext_ln20_fu_619_p1 = select_ln20_1_fu_589_p3;

assign zext_ln23_fu_632_p1 = select_ln20_fu_581_p3;

assign zext_ln28_1_fu_597_p1 = select_ln20_1_fu_589_p3;

assign zext_ln28_2_fu_609_p1 = tmp_4_fu_601_p3;

assign zext_ln28_4_fu_636_p1 = select_ln20_fu_581_p3;

assign zext_ln28_5_fu_659_p1 = add_ln28_2_fu_654_p2;

assign zext_ln28_7_fu_678_p1 = grp_fu_770_p3;

assign zext_ln28_fu_534_p1 = select_ln37_2_fu_507_p3;

assign zext_ln37_2_fu_538_p1 = select_ln37_2_fu_507_p3;

assign zext_ln37_3_fu_542_p1 = select_ln37_2_fu_507_p3;

assign zext_ln37_4_fu_552_p1 = add_ln37_1_fu_546_p2;

always @ (posedge ap_clk) begin
    zext_ln28_reg_810[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln37_2_reg_815[8:5] <= 4'b0000;
end

endmodule //conv
