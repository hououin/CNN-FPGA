// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=548153,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=745,HLS_SYN_LUT=1590,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_pp0_stage0 = 16'd64;
parameter    ap_ST_fsm_pp0_stage1 = 16'd128;
parameter    ap_ST_fsm_pp0_stage2 = 16'd256;
parameter    ap_ST_fsm_pp0_stage3 = 16'd512;
parameter    ap_ST_fsm_state14 = 16'd1024;
parameter    ap_ST_fsm_state15 = 16'd2048;
parameter    ap_ST_fsm_state16 = 16'd4096;
parameter    ap_ST_fsm_state17 = 16'd8192;
parameter    ap_ST_fsm_state18 = 16'd16384;
parameter    ap_ST_fsm_state19 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
reg   [2:0] ch_0_reg_254;
reg   [31:0] w_sum_2_reg_266;
wire   [6:0] add_ln8_fu_297_p2;
reg   [6:0] add_ln8_reg_635;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_309_p2;
reg   [3:0] r_reg_643;
wire   [3:0] c_fu_321_p2;
reg   [3:0] c_reg_651;
wire    ap_CS_fsm_state3;
wire   [11:0] zext_ln14_fu_345_p1;
reg   [11:0] zext_ln14_reg_656;
wire   [0:0] icmp_ln11_fu_315_p2;
wire   [4:0] f_fu_355_p2;
reg   [4:0] f_reg_664;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_361_p1;
reg   [63:0] zext_ln26_reg_669;
wire   [0:0] icmp_ln14_fu_349_p2;
wire   [10:0] zext_ln35_1_fu_365_p1;
reg   [10:0] zext_ln35_1_reg_674;
reg   [10:0] conv_out_addr_reg_679;
wire   [1:0] wr_fu_393_p2;
reg   [1:0] wr_reg_687;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln26_fu_421_p1;
reg  signed [5:0] sext_ln26_reg_692;
wire   [0:0] icmp_ln18_fu_387_p2;
wire   [7:0] mul_ln26_fu_435_p2;
reg   [7:0] mul_ln26_reg_697;
wire   [0:0] icmp_ln21_fu_445_p2;
wire    ap_CS_fsm_state6;
wire   [1:0] wc_fu_451_p2;
reg   [1:0] wc_reg_711;
wire   [6:0] sub_ln26_1_fu_486_p2;
reg   [6:0] sub_ln26_1_reg_716;
wire   [10:0] sub_ln26_2_fu_527_p2;
reg   [10:0] sub_ln26_2_reg_721;
wire   [0:0] icmp_ln24_fu_533_p2;
reg   [0:0] icmp_ln24_reg_726;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state11_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln24_reg_726_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state8_pp0_stage1_iter0;
wire    ap_block_state12_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_285_p2;
reg   [31:0] tmp_1_reg_750;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state9_pp0_stage2_iter0;
wire    ap_block_state13_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [2:0] ch_fu_580_p2;
reg   [2:0] ch_reg_755;
wire    ap_CS_fsm_pp0_stage3;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state10_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_278_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state15;
reg   [31:0] w_sum_reg_770;
wire    ap_CS_fsm_state18;
wire    ap_block_pp0_stage3_subdone;
reg    ap_condition_pp0_exit_iter0_state10;
reg   [3:0] r_0_reg_161;
reg   [6:0] phi_mul_reg_173;
reg   [3:0] c_0_reg_185;
wire   [0:0] icmp_ln8_fu_303_p2;
reg   [4:0] f_0_reg_197;
wire    ap_CS_fsm_state19;
reg   [1:0] wr_0_reg_208;
reg   [31:0] w_sum_0_reg_219;
reg   [31:0] w_sum_1_reg_231;
wire    ap_CS_fsm_state14;
reg   [1:0] wc_0_reg_243;
reg   [2:0] ap_phi_mux_ch_0_phi_fu_258_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln35_3_fu_378_p1;
wire   [63:0] zext_ln26_9_fu_565_p1;
wire   [63:0] zext_ln26_10_fu_575_p1;
reg   [31:0] grp_fu_278_p0;
reg   [31:0] grp_fu_278_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage1;
wire   [6:0] zext_ln35_fu_327_p1;
wire   [6:0] add_ln35_fu_331_p2;
wire   [10:0] tmp_9_fu_337_p3;
wire   [11:0] zext_ln35_2_fu_369_p1;
wire   [11:0] add_ln35_1_fu_373_p2;
wire   [3:0] tmp_s_fu_403_p3;
wire   [4:0] zext_ln26_2_fu_411_p1;
wire   [4:0] zext_ln26_1_fu_399_p1;
wire   [4:0] sub_ln26_fu_415_p2;
wire   [3:0] zext_ln18_fu_383_p1;
wire   [3:0] add_ln26_fu_425_p2;
wire   [3:0] mul_ln26_fu_435_p0;
wire   [5:0] zext_ln26_4_fu_457_p1;
wire   [5:0] add_ln26_2_fu_461_p2;
wire   [3:0] trunc_ln26_fu_466_p1;
wire   [6:0] p_shl_fu_470_p3;
wire   [6:0] tmp_10_fu_478_p3;
wire   [3:0] zext_ln21_fu_441_p1;
wire   [3:0] add_ln26_1_fu_492_p2;
wire   [7:0] zext_ln26_6_fu_498_p1;
wire   [7:0] add_ln26_3_fu_502_p2;
wire   [8:0] tmp_11_fu_515_p3;
wire   [10:0] p_shl1_cast_fu_507_p3;
wire   [10:0] zext_ln26_7_fu_523_p1;
wire   [6:0] zext_ln26_5_fu_539_p1;
wire   [6:0] add_ln26_4_fu_547_p2;
wire   [10:0] tmp_17_cast_fu_552_p3;
wire   [10:0] add_ln26_5_fu_560_p2;
wire   [10:0] zext_ln26_8_fu_543_p1;
wire   [10:0] add_ln26_6_fu_570_p2;
wire   [31:0] bitcast_ln34_fu_586_p1;
wire   [7:0] tmp_fu_589_p4;
wire   [22:0] trunc_ln34_fu_599_p1;
wire   [0:0] icmp_ln34_1_fu_609_p2;
wire   [0:0] icmp_ln34_fu_603_p2;
wire   [0:0] or_ln34_fu_615_p2;
wire   [0:0] grp_fu_291_p2;
wire   [0:0] and_ln34_fu_621_p2;
reg   [15:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul_ln26_fu_435_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 864 ),
    .AddressWidth( 10 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_278_p0),
    .din1(grp_fu_278_p1),
    .ce(1'b1),
    .dout(grp_fu_278_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_285_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_278_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_291_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln21_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state10) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state10);
        end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln21_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_185 <= c_reg_651;
    end else if (((icmp_ln8_fu_303_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_185 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ch_0_reg_254 <= ch_reg_755;
    end else if (((icmp_ln21_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        ch_0_reg_254 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        f_0_reg_197 <= f_reg_664;
    end else if (((icmp_ln11_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_197 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_173 <= add_ln8_reg_635;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_173 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_161 <= r_reg_643;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_161 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_445_p2 == 1'd1))) begin
        w_sum_0_reg_219 <= w_sum_1_reg_231;
    end else if (((icmp_ln14_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_219 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_1_reg_231 <= w_sum_2_reg_266;
    end else if (((icmp_ln18_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_231 <= w_sum_0_reg_219;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_726_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_sum_2_reg_266 <= grp_fu_278_p2;
    end else if (((icmp_ln21_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        w_sum_2_reg_266 <= w_sum_1_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        wc_0_reg_243 <= wc_reg_711;
    end else if (((icmp_ln18_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_243 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_445_p2 == 1'd1))) begin
        wr_0_reg_208 <= wr_reg_687;
    end else if (((icmp_ln14_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_208 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_635 <= add_ln8_fu_297_p2;
        r_reg_643 <= r_fu_309_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_651 <= c_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        ch_reg_755 <= ch_fu_580_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_349_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_addr_reg_679 <= zext_ln35_3_fu_378_p1;
        zext_ln26_reg_669[4 : 0] <= zext_ln26_fu_361_p1[4 : 0];
        zext_ln35_1_reg_674[4 : 0] <= zext_ln35_1_fu_365_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_664 <= f_fu_355_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln24_reg_726 <= icmp_ln24_fu_533_p2;
        icmp_ln24_reg_726_pp0_iter1_reg <= icmp_ln24_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln26_reg_697 <= mul_ln26_fu_435_p2;
        sext_ln26_reg_692 <= sext_ln26_fu_421_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_445_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        sub_ln26_1_reg_716[6 : 1] <= sub_ln26_1_fu_486_p2[6 : 1];
        sub_ln26_2_reg_721[10 : 1] <= sub_ln26_2_fu_527_p2[10 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_reg_726 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_1_reg_750 <= grp_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        w_sum_reg_770 <= grp_fu_278_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_711 <= wc_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_687 <= wr_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_315_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln14_reg_656[10 : 4] <= zext_ln14_fu_345_p1[10 : 4];
    end
end

always @ (*) begin
    if ((icmp_ln24_reg_726 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state10 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state10 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_303_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_726 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_ch_0_phi_fu_258_p4 = ch_reg_755;
    end else begin
        ap_phi_mux_ch_0_phi_fu_258_p4 = ch_0_reg_254;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_303_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_278_p0 = w_sum_0_reg_219;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_278_p0 = w_sum_2_reg_266;
    end else begin
        grp_fu_278_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_278_p1 = conv_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_278_p1 = tmp_1_reg_750;
    end else begin
        grp_fu_278_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_303_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_315_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_349_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_387_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((~((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_reg_726 == 1'd1)) & (1'b0 == ap_block_pp0_stage3_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage3_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_reg_726 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_492_p2 = (c_0_reg_185 + zext_ln21_fu_441_p1);

assign add_ln26_2_fu_461_p2 = ($signed(zext_ln26_4_fu_457_p1) + $signed(sext_ln26_reg_692));

assign add_ln26_3_fu_502_p2 = (zext_ln26_6_fu_498_p1 + mul_ln26_reg_697);

assign add_ln26_4_fu_547_p2 = (zext_ln26_5_fu_539_p1 + sub_ln26_1_reg_716);

assign add_ln26_5_fu_560_p2 = (zext_ln35_1_reg_674 + tmp_17_cast_fu_552_p3);

assign add_ln26_6_fu_570_p2 = (zext_ln26_8_fu_543_p1 + sub_ln26_2_reg_721);

assign add_ln26_fu_425_p2 = (zext_ln18_fu_383_p1 + r_0_reg_161);

assign add_ln35_1_fu_373_p2 = (zext_ln14_reg_656 + zext_ln35_2_fu_369_p1);

assign add_ln35_fu_331_p2 = (phi_mul_reg_173 + zext_ln35_fu_327_p1);

assign add_ln8_fu_297_p2 = (phi_mul_reg_173 + 7'd11);

assign and_ln34_fu_621_p2 = (or_ln34_fu_615_p2 & grp_fu_291_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln34_fu_586_p1 = w_sum_reg_770;

assign c_fu_321_p2 = (c_0_reg_185 + 4'd1);

assign ch_fu_580_p2 = (ch_0_reg_254 + 3'd1);

assign conv_bias_address0 = zext_ln26_reg_669;

assign conv_out_address0 = conv_out_addr_reg_679;

assign conv_out_d0 = ((and_ln34_fu_621_p2[0:0] === 1'b1) ? w_sum_reg_770 : 32'd0);

assign conv_weights_address0 = zext_ln26_9_fu_565_p1;

assign f_fu_355_p2 = (f_0_reg_197 + 5'd1);

assign icmp_ln11_fu_315_p2 = ((c_0_reg_185 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_349_p2 = ((f_0_reg_197 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_387_p2 = ((wr_0_reg_208 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_445_p2 = ((wc_0_reg_243 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_533_p2 = ((ap_phi_mux_ch_0_phi_fu_258_p4 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_609_p2 = ((trunc_ln34_fu_599_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_603_p2 = ((tmp_fu_589_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_303_p2 = ((r_0_reg_161 == 4'd11) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln26_10_fu_575_p1;

assign mul_ln26_fu_435_p0 = mul_ln26_fu_435_p00;

assign mul_ln26_fu_435_p00 = add_ln26_fu_425_p2;

assign mul_ln26_fu_435_p2 = (mul_ln26_fu_435_p0 * $signed('hD));

assign or_ln34_fu_615_p2 = (icmp_ln34_fu_603_p2 | icmp_ln34_1_fu_609_p2);

assign p_shl1_cast_fu_507_p3 = {{add_ln26_3_fu_502_p2}, {3'd0}};

assign p_shl_fu_470_p3 = {{trunc_ln26_fu_466_p1}, {3'd0}};

assign r_fu_309_p2 = (r_0_reg_161 + 4'd1);

assign sext_ln26_fu_421_p1 = $signed(sub_ln26_fu_415_p2);

assign sub_ln26_1_fu_486_p2 = (p_shl_fu_470_p3 - tmp_10_fu_478_p3);

assign sub_ln26_2_fu_527_p2 = (p_shl1_cast_fu_507_p3 - zext_ln26_7_fu_523_p1);

assign sub_ln26_fu_415_p2 = (zext_ln26_2_fu_411_p1 - zext_ln26_1_fu_399_p1);

assign tmp_10_fu_478_p3 = {{add_ln26_2_fu_461_p2}, {1'd0}};

assign tmp_11_fu_515_p3 = {{add_ln26_3_fu_502_p2}, {1'd0}};

assign tmp_17_cast_fu_552_p3 = {{add_ln26_4_fu_547_p2}, {4'd0}};

assign tmp_9_fu_337_p3 = {{add_ln35_fu_331_p2}, {4'd0}};

assign tmp_fu_589_p4 = {{bitcast_ln34_fu_586_p1[30:23]}};

assign tmp_s_fu_403_p3 = {{wr_0_reg_208}, {2'd0}};

assign trunc_ln26_fu_466_p1 = add_ln26_2_fu_461_p2[3:0];

assign trunc_ln34_fu_599_p1 = bitcast_ln34_fu_586_p1[22:0];

assign wc_fu_451_p2 = (wc_0_reg_243 + 2'd1);

assign wr_fu_393_p2 = (wr_0_reg_208 + 2'd1);

assign zext_ln14_fu_345_p1 = tmp_9_fu_337_p3;

assign zext_ln18_fu_383_p1 = wr_0_reg_208;

assign zext_ln21_fu_441_p1 = wc_0_reg_243;

assign zext_ln26_10_fu_575_p1 = add_ln26_6_fu_570_p2;

assign zext_ln26_1_fu_399_p1 = wr_0_reg_208;

assign zext_ln26_2_fu_411_p1 = tmp_s_fu_403_p3;

assign zext_ln26_4_fu_457_p1 = wc_0_reg_243;

assign zext_ln26_5_fu_539_p1 = ap_phi_mux_ch_0_phi_fu_258_p4;

assign zext_ln26_6_fu_498_p1 = add_ln26_1_fu_492_p2;

assign zext_ln26_7_fu_523_p1 = tmp_11_fu_515_p3;

assign zext_ln26_8_fu_543_p1 = ap_phi_mux_ch_0_phi_fu_258_p4;

assign zext_ln26_9_fu_565_p1 = add_ln26_5_fu_560_p2;

assign zext_ln26_fu_361_p1 = f_0_reg_197;

assign zext_ln35_1_fu_365_p1 = f_0_reg_197;

assign zext_ln35_2_fu_369_p1 = f_0_reg_197;

assign zext_ln35_3_fu_378_p1 = add_ln35_1_fu_373_p2;

assign zext_ln35_fu_327_p1 = c_0_reg_185;

always @ (posedge ap_clk) begin
    zext_ln14_reg_656[3:0] <= 4'b0000;
    zext_ln14_reg_656[11] <= 1'b0;
    zext_ln26_reg_669[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_674[10:5] <= 6'b000000;
    sub_ln26_1_reg_716[0] <= 1'b0;
    sub_ln26_2_reg_721[0] <= 1'b0;
end

endmodule //conv
