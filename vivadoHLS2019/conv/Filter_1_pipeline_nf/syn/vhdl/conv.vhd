-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=548153,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=745,HLS_SYN_LUT=1590,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_weights_ce0 : STD_LOGIC;
    signal conv_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_254 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sum_2_reg_266 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_297_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_635 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_309_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_643 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_651 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_345_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_656 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_355_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_664 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_669 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_365_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_reg_674 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_679 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_393_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_687 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln26_fu_421_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_reg_692 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_435_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_697 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln21_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal wc_fu_451_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_711 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_1_fu_486_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_reg_716 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_2_fu_527_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_reg_721 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_726 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_726_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state9_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ch_fu_580_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_755 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal w_sum_reg_770 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal r_0_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_173 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_185 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_197 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal wr_0_reg_208 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_reg_231 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal wc_0_reg_243 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_258_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln35_3_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_575_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_278_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_278_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln35_fu_327_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_331_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_337_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_fu_369_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_373_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_s_fu_403_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_411_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_399_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_383_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_435_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_461_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_466_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_470_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_478_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_441_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_492_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_6_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_3_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_515_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_507_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_5_fu_539_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_547_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_cast_fu_552_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_560_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_8_fu_543_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_570_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_589_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_599_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln26_fu_435_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_conv_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_U : component conv_conv_weights
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_address0,
        ce0 => conv_weights_ce0,
        q0 => conv_weights_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p0,
        din1 => grp_fu_278_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_278_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_285_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_278_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_291_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln21_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln21_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_185 <= c_reg_651;
            elsif (((icmp_ln8_fu_303_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_185 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_726 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_254 <= ch_reg_755;
            elsif (((icmp_ln21_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_254 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                f_0_reg_197 <= f_reg_664;
            elsif (((icmp_ln11_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_197 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_173 <= add_ln8_reg_635;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_173 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_161 <= r_reg_643;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_445_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_219 <= w_sum_1_reg_231;
            elsif (((icmp_ln14_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_219 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                w_sum_1_reg_231 <= w_sum_2_reg_266;
            elsif (((icmp_ln18_fu_387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_231 <= w_sum_0_reg_219;
            end if; 
        end if;
    end process;

    w_sum_2_reg_266_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_726_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                w_sum_2_reg_266 <= grp_fu_278_p2;
            elsif (((icmp_ln21_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                w_sum_2_reg_266 <= w_sum_1_reg_231;
            end if; 
        end if;
    end process;

    wc_0_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                wc_0_reg_243 <= wc_reg_711;
            elsif (((icmp_ln18_fu_387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_243 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_445_p2 = ap_const_lv1_1))) then 
                wr_0_reg_208 <= wr_reg_687;
            elsif (((icmp_ln14_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_208 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_635 <= add_ln8_fu_297_p2;
                r_reg_643 <= r_fu_309_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_651 <= c_fu_321_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                ch_reg_755 <= ch_fu_580_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_679 <= zext_ln35_3_fu_378_p1(11 - 1 downto 0);
                    zext_ln26_reg_669(4 downto 0) <= zext_ln26_fu_361_p1(4 downto 0);
                    zext_ln35_1_reg_674(4 downto 0) <= zext_ln35_1_fu_365_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_664 <= f_fu_355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_reg_726 <= icmp_ln24_fu_533_p2;
                icmp_ln24_reg_726_pp0_iter1_reg <= icmp_ln24_reg_726;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln26_reg_697 <= mul_ln26_fu_435_p2;
                sext_ln26_reg_692 <= sext_ln26_fu_421_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_445_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln26_1_reg_716(6 downto 1) <= sub_ln26_1_fu_486_p2(6 downto 1);
                    sub_ln26_2_reg_721(10 downto 1) <= sub_ln26_2_fu_527_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_726 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_1_reg_750 <= grp_fu_285_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                w_sum_reg_770 <= grp_fu_278_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_711 <= wc_fu_451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_687 <= wr_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_315_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_656(10 downto 4) <= zext_ln14_fu_345_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_656(3 downto 0) <= "0000";
    zext_ln14_reg_656(11) <= '0';
    zext_ln26_reg_669(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_1_reg_674(10 downto 5) <= "000000";
    sub_ln26_1_reg_716(0) <= '0';
    sub_ln26_2_reg_721(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_315_p2, ap_CS_fsm_state4, icmp_ln14_fu_349_p2, ap_CS_fsm_state5, icmp_ln18_fu_387_p2, icmp_ln21_fu_445_p2, ap_CS_fsm_state6, icmp_ln24_reg_726, ap_enable_reg_pp0_iter0, ap_block_pp0_stage3_subdone, icmp_ln8_fu_303_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_303_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_315_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_387_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_445_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_reg_726 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_reg_726 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_492_p2 <= std_logic_vector(unsigned(c_0_reg_185) + unsigned(zext_ln21_fu_441_p1));
    add_ln26_2_fu_461_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_457_p1) + unsigned(sext_ln26_reg_692));
    add_ln26_3_fu_502_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_498_p1) + unsigned(mul_ln26_reg_697));
    add_ln26_4_fu_547_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_539_p1) + unsigned(sub_ln26_1_reg_716));
    add_ln26_5_fu_560_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_674) + unsigned(tmp_17_cast_fu_552_p3));
    add_ln26_6_fu_570_p2 <= std_logic_vector(unsigned(zext_ln26_8_fu_543_p1) + unsigned(sub_ln26_2_reg_721));
    add_ln26_fu_425_p2 <= std_logic_vector(unsigned(zext_ln18_fu_383_p1) + unsigned(r_0_reg_161));
    add_ln35_1_fu_373_p2 <= std_logic_vector(unsigned(zext_ln14_reg_656) + unsigned(zext_ln35_2_fu_369_p1));
    add_ln35_fu_331_p2 <= std_logic_vector(unsigned(phi_mul_reg_173) + unsigned(zext_ln35_fu_327_p1));
    add_ln8_fu_297_p2 <= std_logic_vector(unsigned(phi_mul_reg_173) + unsigned(ap_const_lv7_B));
    and_ln34_fu_621_p2 <= (or_ln34_fu_615_p2 and grp_fu_291_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln24_reg_726)
    begin
        if ((icmp_ln24_reg_726 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_303_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_303_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_258_p4_assign_proc : process(ch_0_reg_254, icmp_ln24_reg_726, ap_CS_fsm_pp0_stage0, ch_reg_755, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_726 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_phi_fu_258_p4 <= ch_reg_755;
        else 
            ap_phi_mux_ch_0_phi_fu_258_p4 <= ch_0_reg_254;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_303_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_303_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_586_p1 <= w_sum_reg_770;
    c_fu_321_p2 <= std_logic_vector(unsigned(c_0_reg_185) + unsigned(ap_const_lv4_1));
    ch_fu_580_p2 <= std_logic_vector(unsigned(ch_0_reg_254) + unsigned(ap_const_lv3_1));
    conv_bias_address0 <= zext_ln26_reg_669(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_679;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_770 when (and_ln34_fu_621_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_address0 <= zext_ln26_9_fu_565_p1(10 - 1 downto 0);

    conv_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_weights_ce0 <= ap_const_logic_1;
        else 
            conv_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_355_p2 <= std_logic_vector(unsigned(f_0_reg_197) + unsigned(ap_const_lv5_1));

    grp_fu_278_p0_assign_proc : process(w_sum_2_reg_266, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_CS_fsm_state15, w_sum_0_reg_219, ap_block_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_278_p0 <= w_sum_0_reg_219;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_278_p0 <= w_sum_2_reg_266;
        else 
            grp_fu_278_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_278_p1_assign_proc : process(conv_bias_q0, tmp_1_reg_750, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter0, ap_CS_fsm_state15, ap_block_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_278_p1 <= conv_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_278_p1 <= tmp_1_reg_750;
        else 
            grp_fu_278_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_315_p2 <= "1" when (c_0_reg_185 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_349_p2 <= "1" when (f_0_reg_197 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_387_p2 <= "1" when (wr_0_reg_208 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_445_p2 <= "1" when (wc_0_reg_243 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_533_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_258_p4 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_609_p2 <= "1" when (trunc_ln34_fu_599_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_603_p2 <= "0" when (tmp_fu_589_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_303_p2 <= "1" when (r_0_reg_161 = ap_const_lv4_B) else "0";
    input_r_address0 <= zext_ln26_10_fu_575_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_435_p0 <= mul_ln26_fu_435_p00(4 - 1 downto 0);
    mul_ln26_fu_435_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_425_p2),8));
    mul_ln26_fu_435_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_435_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln34_fu_615_p2 <= (icmp_ln34_fu_603_p2 or icmp_ln34_1_fu_609_p2);
    p_shl1_cast_fu_507_p3 <= (add_ln26_3_fu_502_p2 & ap_const_lv3_0);
    p_shl_fu_470_p3 <= (trunc_ln26_fu_466_p1 & ap_const_lv3_0);
    r_fu_309_p2 <= std_logic_vector(unsigned(r_0_reg_161) + unsigned(ap_const_lv4_1));
        sext_ln26_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_415_p2),6));

    sub_ln26_1_fu_486_p2 <= std_logic_vector(unsigned(p_shl_fu_470_p3) - unsigned(tmp_10_fu_478_p3));
    sub_ln26_2_fu_527_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_507_p3) - unsigned(zext_ln26_7_fu_523_p1));
    sub_ln26_fu_415_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_411_p1) - unsigned(zext_ln26_1_fu_399_p1));
    tmp_10_fu_478_p3 <= (add_ln26_2_fu_461_p2 & ap_const_lv1_0);
    tmp_11_fu_515_p3 <= (add_ln26_3_fu_502_p2 & ap_const_lv1_0);
    tmp_17_cast_fu_552_p3 <= (add_ln26_4_fu_547_p2 & ap_const_lv4_0);
    tmp_9_fu_337_p3 <= (add_ln35_fu_331_p2 & ap_const_lv4_0);
    tmp_fu_589_p4 <= bitcast_ln34_fu_586_p1(30 downto 23);
    tmp_s_fu_403_p3 <= (wr_0_reg_208 & ap_const_lv2_0);
    trunc_ln26_fu_466_p1 <= add_ln26_2_fu_461_p2(4 - 1 downto 0);
    trunc_ln34_fu_599_p1 <= bitcast_ln34_fu_586_p1(23 - 1 downto 0);
    wc_fu_451_p2 <= std_logic_vector(unsigned(wc_0_reg_243) + unsigned(ap_const_lv2_1));
    wr_fu_393_p2 <= std_logic_vector(unsigned(wr_0_reg_208) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_337_p3),12));
    zext_ln18_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_208),4));
    zext_ln21_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_243),4));
    zext_ln26_10_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_570_p2),64));
    zext_ln26_1_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_208),5));
    zext_ln26_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_403_p3),5));
    zext_ln26_4_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_243),6));
    zext_ln26_5_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_phi_fu_258_p4),7));
    zext_ln26_6_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_492_p2),8));
    zext_ln26_7_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_515_p3),11));
    zext_ln26_8_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_phi_fu_258_p4),11));
    zext_ln26_9_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_560_p2),64));
    zext_ln26_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_197),64));
    zext_ln35_1_fu_365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_197),11));
    zext_ln35_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_197),12));
    zext_ln35_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_373_p2),64));
    zext_ln35_fu_327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_185),7));
end behav;
