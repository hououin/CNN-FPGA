// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.964200,HLS_SYN_LAT=849905,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=715,HLS_SYN_LUT=1611,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 15'd1;
parameter    ap_ST_fsm_state2 = 15'd2;
parameter    ap_ST_fsm_state3 = 15'd4;
parameter    ap_ST_fsm_state4 = 15'd8;
parameter    ap_ST_fsm_state5 = 15'd16;
parameter    ap_ST_fsm_state6 = 15'd32;
parameter    ap_ST_fsm_state7 = 15'd64;
parameter    ap_ST_fsm_state8 = 15'd128;
parameter    ap_ST_fsm_state9 = 15'd256;
parameter    ap_ST_fsm_state10 = 15'd512;
parameter    ap_ST_fsm_state11 = 15'd1024;
parameter    ap_ST_fsm_state12 = 15'd2048;
parameter    ap_ST_fsm_state13 = 15'd4096;
parameter    ap_ST_fsm_state14 = 15'd8192;
parameter    ap_ST_fsm_state15 = 15'd16384;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] conv_weights_address0;
reg    conv_weights_ce0;
wire   [31:0] conv_weights_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
wire   [10:0] add_ln8_fu_312_p2;
reg   [10:0] add_ln8_reg_799;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_324_p2;
reg   [0:0] icmp_ln11_reg_804;
wire   [0:0] icmp_ln8_fu_306_p2;
wire   [3:0] select_ln35_1_fu_338_p3;
reg   [3:0] select_ln35_1_reg_809;
wire   [4:0] select_ln35_2_fu_380_p3;
reg   [4:0] select_ln35_2_reg_815;
wire   [3:0] select_ln35_3_fu_388_p3;
reg   [3:0] select_ln35_3_reg_820;
wire   [63:0] zext_ln26_fu_407_p1;
reg   [63:0] zext_ln26_reg_828;
wire   [10:0] zext_ln35_2_fu_411_p1;
reg   [10:0] zext_ln35_2_reg_833;
reg   [10:0] conv_out_addr_reg_838;
wire   [5:0] add_ln18_1_fu_445_p2;
reg   [5:0] add_ln18_1_reg_846;
wire    ap_CS_fsm_state3;
wire   [1:0] select_ln18_1_fu_471_p3;
reg   [1:0] select_ln18_1_reg_851;
wire   [0:0] icmp_ln18_fu_439_p2;
wire   [3:0] add_ln18_fu_509_p2;
reg   [3:0] add_ln18_reg_856;
wire   [2:0] select_ln21_fu_544_p3;
reg   [2:0] select_ln21_reg_861;
wire   [1:0] select_ln21_1_fu_556_p3;
reg   [1:0] select_ln21_1_reg_867;
wire   [3:0] select_ln21_2_fu_612_p3;
reg   [3:0] select_ln21_2_reg_872;
wire   [10:0] add_ln26_5_fu_638_p2;
reg   [10:0] add_ln26_5_reg_877;
wire   [4:0] select_ln21_3_fu_649_p3;
reg   [4:0] select_ln21_3_reg_882;
wire   [4:0] f_fu_657_p2;
reg   [4:0] f_reg_892;
wire   [8:0] select_ln11_fu_668_p3;
reg   [8:0] select_ln11_reg_897;
wire    ap_CS_fsm_state4;
wire   [2:0] ch_fu_723_p2;
reg   [2:0] ch_reg_912;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] tmp_1_reg_927;
wire    ap_CS_fsm_state6;
wire   [31:0] grp_fu_288_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [31:0] w_sum_reg_942;
wire    ap_CS_fsm_state14;
reg   [10:0] indvar_flatten43_reg_165;
wire    ap_CS_fsm_state15;
reg   [3:0] r_0_reg_176;
reg   [8:0] indvar_flatten29_reg_187;
reg   [3:0] c_0_reg_199;
reg   [4:0] f_0_reg_210;
reg   [5:0] indvar_flatten21_reg_221;
reg   [1:0] wr_0_reg_232;
reg   [4:0] indvar_flatten_reg_243;
reg   [1:0] wc_0_reg_254;
reg   [31:0] w_sum_2_reg_265;
reg   [2:0] ch_0_reg_277;
wire   [63:0] zext_ln35_4_fu_425_p1;
wire   [63:0] zext_ln26_8_fu_708_p1;
wire   [63:0] zext_ln26_9_fu_718_p1;
reg   [31:0] grp_fu_288_p1;
wire    ap_CS_fsm_state7;
wire   [3:0] r_fu_318_p2;
wire   [0:0] icmp_ln14_fu_356_p2;
wire   [0:0] xor_ln35_fu_350_p2;
wire   [3:0] select_ln35_fu_330_p3;
wire   [0:0] and_ln35_fu_362_p2;
wire   [0:0] or_ln35_fu_374_p2;
wire   [3:0] c_fu_368_p2;
wire   [7:0] grp_fu_777_p3;
wire   [11:0] zext_ln35_3_fu_415_p1;
wire   [11:0] tmp_3_cast_fu_400_p3;
wire   [11:0] add_ln35_1_fu_419_p2;
wire   [3:0] zext_ln21_fu_430_p1;
wire   [0:0] icmp_ln21_fu_457_p2;
wire   [1:0] wr_fu_451_p2;
wire   [3:0] tmp_5_fu_483_p3;
wire   [4:0] zext_ln26_2_fu_491_p1;
wire   [4:0] zext_ln26_1_fu_479_p1;
wire   [4:0] sub_ln26_fu_495_p2;
wire   [3:0] zext_ln18_fu_505_p1;
wire   [0:0] icmp_ln24_fu_520_p2;
wire   [0:0] xor_ln18_fu_514_p2;
wire   [1:0] select_ln18_fu_463_p3;
wire   [0:0] and_ln18_fu_526_p2;
wire   [0:0] or_ln21_fu_538_p2;
wire   [1:0] wc_fu_532_p2;
wire   [5:0] zext_ln21_2_fu_564_p1;
wire  signed [5:0] sext_ln26_fu_501_p1;
wire   [5:0] add_ln26_1_fu_568_p2;
wire   [3:0] trunc_ln26_fu_574_p1;
wire   [6:0] p_shl_fu_578_p3;
wire   [6:0] tmp_2_fu_586_p3;
wire   [3:0] zext_ln21_1_fu_552_p1;
wire   [3:0] add_ln26_fu_434_p2;
wire   [3:0] add_ln26_2_fu_600_p2;
wire   [3:0] select_ln18_2_fu_605_p3;
wire   [6:0] zext_ln26_4_fu_620_p1;
wire   [6:0] sub_ln26_1_fu_594_p2;
wire   [6:0] add_ln26_4_fu_624_p2;
wire   [10:0] tmp_12_cast_fu_630_p3;
wire   [4:0] add_ln21_fu_643_p2;
wire   [8:0] add_ln11_1_fu_662_p2;
wire   [7:0] grp_fu_786_p3;
wire   [8:0] tmp_3_fu_688_p3;
wire   [10:0] p_shl_cast_fu_681_p3;
wire   [10:0] zext_ln26_6_fu_695_p1;
wire   [10:0] zext_ln26_7_fu_705_p1;
wire   [10:0] sub_ln26_2_fu_699_p2;
wire   [10:0] add_ln26_6_fu_712_p2;
wire   [31:0] bitcast_ln34_fu_728_p1;
wire   [7:0] tmp_fu_731_p4;
wire   [22:0] trunc_ln34_fu_741_p1;
wire   [0:0] icmp_ln34_1_fu_751_p2;
wire   [0:0] icmp_ln34_fu_745_p2;
wire   [0:0] or_ln34_fu_757_p2;
wire   [0:0] grp_fu_300_p2;
wire   [0:0] and_ln34_fu_763_p2;
wire   [3:0] grp_fu_777_p0;
wire   [4:0] grp_fu_777_p1;
wire   [3:0] grp_fu_777_p2;
wire   [3:0] grp_fu_786_p0;
wire   [4:0] grp_fu_786_p1;
wire   [3:0] grp_fu_786_p2;
reg   [14:0] ap_NS_fsm;
wire   [7:0] grp_fu_777_p00;
wire   [7:0] grp_fu_777_p20;
wire   [7:0] grp_fu_786_p00;
wire   [7:0] grp_fu_786_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'd1;
end

conv_conv_weights #(
    .DataWidth( 32 ),
    .AddressRange( 864 ),
    .AddressWidth( 10 ))
conv_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_address0),
    .ce0(conv_weights_ce0),
    .q0(conv_weights_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_fadd_32ns_32bkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32bkb_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w_sum_2_reg_265),
    .din1(grp_fu_288_p1),
    .ce(1'b1),
    .dout(grp_fu_288_p2)
);

conv_fmul_32ns_32cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32cud_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

conv_fcmp_32ns_32dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32dEe_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_300_p2)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U4(
    .din0(grp_fu_777_p0),
    .din1(grp_fu_777_p1),
    .din2(grp_fu_777_p2),
    .dout(grp_fu_777_p3)
);

conv_mac_muladd_4eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4eOg_U5(
    .din0(grp_fu_786_p0),
    .din1(grp_fu_786_p1),
    .din2(grp_fu_786_p2),
    .dout(grp_fu_786_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        c_0_reg_199 <= select_ln35_3_reg_820;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_199 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ch_0_reg_277 <= ch_reg_912;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ch_0_reg_277 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        f_0_reg_210 <= f_reg_892;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_210 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten21_reg_221 <= add_ln18_1_reg_846;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten21_reg_221 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten29_reg_187 <= select_ln11_reg_897;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten29_reg_187 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten43_reg_165 <= add_ln8_reg_799;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten43_reg_165 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        indvar_flatten_reg_243 <= select_ln21_3_reg_882;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_243 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_0_reg_176 <= select_ln35_1_reg_809;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_176 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w_sum_2_reg_265 <= grp_fu_288_p2;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_2_reg_265 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        wc_0_reg_254 <= select_ln21_1_reg_867;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_254 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        wr_0_reg_232 <= select_ln18_1_reg_851;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_232 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln18_1_reg_846 <= add_ln18_1_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_439_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln18_reg_856 <= add_ln18_fu_509_p2;
        add_ln26_5_reg_877 <= add_ln26_5_fu_638_p2;
        select_ln18_1_reg_851 <= select_ln18_1_fu_471_p3;
        select_ln21_1_reg_867 <= select_ln21_1_fu_556_p3;
        select_ln21_2_reg_872 <= select_ln21_2_fu_612_p3;
        select_ln21_3_reg_882 <= select_ln21_3_fu_649_p3;
        select_ln21_reg_861 <= select_ln21_fu_544_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_799 <= add_ln8_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ch_reg_912 <= ch_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_838 <= zext_ln35_4_fu_425_p1;
        icmp_ln11_reg_804 <= icmp_ln11_fu_324_p2;
        select_ln35_1_reg_809 <= select_ln35_1_fu_338_p3;
        select_ln35_2_reg_815 <= select_ln35_2_fu_380_p3;
        select_ln35_3_reg_820 <= select_ln35_3_fu_388_p3;
        zext_ln26_reg_828[4 : 0] <= zext_ln26_fu_407_p1[4 : 0];
        zext_ln35_2_reg_833[4 : 0] <= zext_ln35_2_fu_411_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_reg_892 <= f_fu_657_p2;
        select_ln11_reg_897 <= select_ln11_fu_668_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_1_reg_927 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_reg_942 <= grp_fu_288_p2;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_weights_ce0 = 1'b1;
    end else begin
        conv_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_288_p1 = conv_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_288_p1 = tmp_1_reg_927;
    end else begin
        grp_fu_288_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_306_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln18_fu_439_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_662_p2 = (9'd1 + indvar_flatten29_reg_187);

assign add_ln18_1_fu_445_p2 = (indvar_flatten21_reg_221 + 6'd1);

assign add_ln18_fu_509_p2 = (select_ln35_1_reg_809 + zext_ln18_fu_505_p1);

assign add_ln21_fu_643_p2 = (indvar_flatten_reg_243 + 5'd1);

assign add_ln26_1_fu_568_p2 = ($signed(zext_ln21_2_fu_564_p1) + $signed(sext_ln26_fu_501_p1));

assign add_ln26_2_fu_600_p2 = (select_ln35_3_reg_820 + zext_ln21_1_fu_552_p1);

assign add_ln26_4_fu_624_p2 = (zext_ln26_4_fu_620_p1 + sub_ln26_1_fu_594_p2);

assign add_ln26_5_fu_638_p2 = (zext_ln35_2_reg_833 + tmp_12_cast_fu_630_p3);

assign add_ln26_6_fu_712_p2 = (zext_ln26_7_fu_705_p1 + sub_ln26_2_fu_699_p2);

assign add_ln26_fu_434_p2 = (select_ln35_3_reg_820 + zext_ln21_fu_430_p1);

assign add_ln35_1_fu_419_p2 = (zext_ln35_3_fu_415_p1 + tmp_3_cast_fu_400_p3);

assign add_ln8_fu_312_p2 = (indvar_flatten43_reg_165 + 11'd1);

assign and_ln18_fu_526_p2 = (xor_ln18_fu_514_p2 & icmp_ln24_fu_520_p2);

assign and_ln34_fu_763_p2 = (or_ln34_fu_757_p2 & grp_fu_300_p2);

assign and_ln35_fu_362_p2 = (xor_ln35_fu_350_p2 & icmp_ln14_fu_356_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln34_fu_728_p1 = w_sum_reg_942;

assign c_fu_368_p2 = (select_ln35_fu_330_p3 + 4'd1);

assign ch_fu_723_p2 = (select_ln21_reg_861 + 3'd1);

assign conv_bias_address0 = zext_ln26_reg_828;

assign conv_out_address0 = conv_out_addr_reg_838;

assign conv_out_d0 = ((and_ln34_fu_763_p2[0:0] === 1'b1) ? w_sum_reg_942 : 32'd0);

assign conv_weights_address0 = zext_ln26_8_fu_708_p1;

assign f_fu_657_p2 = (5'd1 + select_ln35_2_reg_815);

assign grp_fu_777_p0 = grp_fu_777_p00;

assign grp_fu_777_p00 = select_ln35_1_fu_338_p3;

assign grp_fu_777_p1 = 8'd11;

assign grp_fu_777_p2 = grp_fu_777_p20;

assign grp_fu_777_p20 = select_ln35_3_fu_388_p3;

assign grp_fu_786_p0 = grp_fu_786_p00;

assign grp_fu_786_p00 = add_ln18_reg_856;

assign grp_fu_786_p1 = 8'd13;

assign grp_fu_786_p2 = grp_fu_786_p20;

assign grp_fu_786_p20 = select_ln21_2_reg_872;

assign icmp_ln11_fu_324_p2 = ((indvar_flatten29_reg_187 == 9'd176) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_356_p2 = ((f_0_reg_210 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_439_p2 = ((indvar_flatten21_reg_221 == 6'd54) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_457_p2 = ((indvar_flatten_reg_243 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_520_p2 = ((ch_0_reg_277 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_751_p2 = ((trunc_ln34_fu_741_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_745_p2 = ((tmp_fu_731_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_306_p2 = ((indvar_flatten43_reg_165 == 11'd1936) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln26_9_fu_718_p1;

assign or_ln21_fu_538_p2 = (icmp_ln21_fu_457_p2 | and_ln18_fu_526_p2);

assign or_ln34_fu_757_p2 = (icmp_ln34_fu_745_p2 | icmp_ln34_1_fu_751_p2);

assign or_ln35_fu_374_p2 = (icmp_ln11_fu_324_p2 | and_ln35_fu_362_p2);

assign p_shl_cast_fu_681_p3 = {{grp_fu_786_p3}, {3'd0}};

assign p_shl_fu_578_p3 = {{trunc_ln26_fu_574_p1}, {3'd0}};

assign r_fu_318_p2 = (r_0_reg_176 + 4'd1);

assign select_ln11_fu_668_p3 = ((icmp_ln11_reg_804[0:0] === 1'b1) ? 9'd1 : add_ln11_1_fu_662_p2);

assign select_ln18_1_fu_471_p3 = ((icmp_ln21_fu_457_p2[0:0] === 1'b1) ? wr_fu_451_p2 : wr_0_reg_232);

assign select_ln18_2_fu_605_p3 = ((icmp_ln21_fu_457_p2[0:0] === 1'b1) ? select_ln35_3_reg_820 : add_ln26_fu_434_p2);

assign select_ln18_fu_463_p3 = ((icmp_ln21_fu_457_p2[0:0] === 1'b1) ? 2'd0 : wc_0_reg_254);

assign select_ln21_1_fu_556_p3 = ((and_ln18_fu_526_p2[0:0] === 1'b1) ? wc_fu_532_p2 : select_ln18_fu_463_p3);

assign select_ln21_2_fu_612_p3 = ((and_ln18_fu_526_p2[0:0] === 1'b1) ? add_ln26_2_fu_600_p2 : select_ln18_2_fu_605_p3);

assign select_ln21_3_fu_649_p3 = ((icmp_ln21_fu_457_p2[0:0] === 1'b1) ? 5'd1 : add_ln21_fu_643_p2);

assign select_ln21_fu_544_p3 = ((or_ln21_fu_538_p2[0:0] === 1'b1) ? 3'd0 : ch_0_reg_277);

assign select_ln35_1_fu_338_p3 = ((icmp_ln11_fu_324_p2[0:0] === 1'b1) ? r_fu_318_p2 : r_0_reg_176);

assign select_ln35_2_fu_380_p3 = ((or_ln35_fu_374_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_210);

assign select_ln35_3_fu_388_p3 = ((and_ln35_fu_362_p2[0:0] === 1'b1) ? c_fu_368_p2 : select_ln35_fu_330_p3);

assign select_ln35_fu_330_p3 = ((icmp_ln11_fu_324_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_199);

assign sext_ln26_fu_501_p1 = $signed(sub_ln26_fu_495_p2);

assign sub_ln26_1_fu_594_p2 = (p_shl_fu_578_p3 - tmp_2_fu_586_p3);

assign sub_ln26_2_fu_699_p2 = (p_shl_cast_fu_681_p3 - zext_ln26_6_fu_695_p1);

assign sub_ln26_fu_495_p2 = (zext_ln26_2_fu_491_p1 - zext_ln26_1_fu_479_p1);

assign tmp_12_cast_fu_630_p3 = {{add_ln26_4_fu_624_p2}, {4'd0}};

assign tmp_2_fu_586_p3 = {{add_ln26_1_fu_568_p2}, {1'd0}};

assign tmp_3_cast_fu_400_p3 = {{grp_fu_777_p3}, {4'd0}};

assign tmp_3_fu_688_p3 = {{grp_fu_786_p3}, {1'd0}};

assign tmp_5_fu_483_p3 = {{select_ln18_1_fu_471_p3}, {2'd0}};

assign tmp_fu_731_p4 = {{bitcast_ln34_fu_728_p1[30:23]}};

assign trunc_ln26_fu_574_p1 = add_ln26_1_fu_568_p2[3:0];

assign trunc_ln34_fu_741_p1 = bitcast_ln34_fu_728_p1[22:0];

assign wc_fu_532_p2 = (select_ln18_fu_463_p3 + 2'd1);

assign wr_fu_451_p2 = (wr_0_reg_232 + 2'd1);

assign xor_ln18_fu_514_p2 = (icmp_ln21_fu_457_p2 ^ 1'd1);

assign xor_ln35_fu_350_p2 = (icmp_ln11_fu_324_p2 ^ 1'd1);

assign zext_ln18_fu_505_p1 = select_ln18_1_fu_471_p3;

assign zext_ln21_1_fu_552_p1 = wc_fu_532_p2;

assign zext_ln21_2_fu_564_p1 = select_ln21_1_fu_556_p3;

assign zext_ln21_fu_430_p1 = wc_0_reg_254;

assign zext_ln26_1_fu_479_p1 = select_ln18_1_fu_471_p3;

assign zext_ln26_2_fu_491_p1 = tmp_5_fu_483_p3;

assign zext_ln26_4_fu_620_p1 = select_ln21_fu_544_p3;

assign zext_ln26_6_fu_695_p1 = tmp_3_fu_688_p3;

assign zext_ln26_7_fu_705_p1 = select_ln21_reg_861;

assign zext_ln26_8_fu_708_p1 = add_ln26_5_reg_877;

assign zext_ln26_9_fu_718_p1 = add_ln26_6_fu_712_p2;

assign zext_ln26_fu_407_p1 = select_ln35_2_fu_380_p3;

assign zext_ln35_2_fu_411_p1 = select_ln35_2_fu_380_p3;

assign zext_ln35_3_fu_415_p1 = select_ln35_2_fu_380_p3;

assign zext_ln35_4_fu_425_p1 = add_ln35_1_fu_419_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_828[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_833[10:5] <= 6'b000000;
end

endmodule //conv
