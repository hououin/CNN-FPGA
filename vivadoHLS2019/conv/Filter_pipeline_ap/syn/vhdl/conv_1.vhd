-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_0_ce0 : OUT STD_LOGIC;
    conv_input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_0_ce1 : OUT STD_LOGIC;
    conv_input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_1_ce0 : OUT STD_LOGIC;
    conv_input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_1_ce1 : OUT STD_LOGIC;
    conv_input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_2_ce0 : OUT STD_LOGIC;
    conv_input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_2_ce1 : OUT STD_LOGIC;
    conv_input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_3_ce0 : OUT STD_LOGIC;
    conv_input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    conv_input_3_ce1 : OUT STD_LOGIC;
    conv_input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.104550,HLS_SYN_LAT=108186,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=11,HLS_SYN_FF=2759,HLS_SYN_LUT=3710,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv12_25 : STD_LOGIC_VECTOR (11 downto 0) := "000000100101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten77_reg_595 : STD_LOGIC_VECTOR (14 downto 0);
    signal indvar_flatten_reg_607 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_618 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_0_reg_630 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_641 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_678_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state31_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln8_reg_1542 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1542_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln8_reg_1542_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_661_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_728 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_693_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_652_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_740 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state30_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_708_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_750 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1542_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_657_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_755 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1542_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_760 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal icmp_ln8_reg_1542_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1546 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1546_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_783_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_reg_1562 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_3_fu_791_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_3_reg_1569 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_fu_803_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln11_reg_1576 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_809_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_1581 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_7_fu_821_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_7_reg_1587 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_832_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_reg_1593 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_11_fu_844_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_11_reg_1599 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln8_fu_855_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_1605 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal and_ln35_fu_872_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_1610 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_reg_1610_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_10_fu_883_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_10_reg_1620 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_10_reg_1620_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_10_reg_1620_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_10_reg_1620_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_10_reg_1620_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_11_fu_891_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_11_reg_1627 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_11_reg_1627_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_11_reg_1627_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_11_reg_1627_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_11_reg_1627_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_897_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_1633 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_12_fu_957_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_12_reg_1638 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_964_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1643 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1643_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1643_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1643_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln35_14_fu_1024_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_14_reg_1673 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_0_0_2_reg_1678 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_0_2_reg_1683 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_2_reg_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_2_reg_1693 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln35_16_fu_1084_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_16_reg_1698 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_fu_1101_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_1703 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_1703_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_1703_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_1703_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_1703_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_1124_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln26_reg_1709 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln26_1_fu_1159_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln26_1_reg_1715 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln35_fu_1172_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_reg_1721 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_5_fu_1196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_5_reg_1727 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_1228_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_1772 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_4_fu_1244_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_4_reg_1777 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_7_fu_1259_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_7_reg_1782 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1289_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_6_fu_1335_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_6_reg_1832 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_6_fu_1340_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_6_reg_1837 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_10_fu_1344_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_10_reg_1842 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_14_fu_1390_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_14_reg_1857 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_666_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1897 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1897_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_1396_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_8_fu_1425_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_8_reg_1967 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1977 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1977_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1429_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_2_reg_1992 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_2_reg_1997 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_2_reg_2002 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_0_2_reg_2027 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_2032 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_2_reg_2032_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_2037 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_2037_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_2042 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_2042_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_1_reg_2042_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_2047 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_2047_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_2_reg_2047_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_3_1_1_reg_2052 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_load_reg_2062 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter2_state12 : STD_LOGIC;
    signal ap_phi_mux_indvar_flatten77_phi_fu_599_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_611_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_c_0_phi_fu_622_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_f_0_phi_fu_634_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_645_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln26_10_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_1220_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_1268_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_14_fu_1281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_1369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_17_fu_1382_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_4_fu_1411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal sext_ln26_6_fu_1418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_18_fu_1444_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln35_11_fu_1477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_652_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_652_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_657_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_657_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_661_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_661_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_666_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_666_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_678_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_693_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_708_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_765_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_797_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_797_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_815_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_815_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_826_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_826_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_838_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_838_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_849_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_849_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_866_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_878_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_907_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_fu_907_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_1_fu_913_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_fu_923_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_3_fu_937_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_3_fu_937_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_19_fu_943_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_3_fu_953_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_4_fu_927_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_1_fu_974_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_1_fu_974_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_980_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_1_fu_990_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_4_fu_1004_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_4_fu_1004_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_20_fu_1010_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_5_fu_1020_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_6_fu_994_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_2_fu_1034_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_2_fu_1034_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_14_fu_1040_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_2_fu_1050_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_5_fu_1064_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln26_5_fu_1064_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_21_fu_1070_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln26_7_fu_1080_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_8_fu_1054_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_765_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_fu_1091_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_16_fu_1112_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_4_fu_1120_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_1_fu_1108_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_fu_1130_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_1136_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_1147_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_5_fu_1155_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_2_fu_1143_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln35_3_fu_1165_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln26_fu_1097_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_797_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln35_fu_1185_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln35_5_fu_1178_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln35_13_fu_1189_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_4_fu_1200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_5_fu_1214_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_815_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln26_1_fu_1233_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_826_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln35_1_fu_1248_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln35_7_fu_1237_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln35_15_fu_1252_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln26_8_fu_1263_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_9_fu_1276_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_1289_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_838_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_15_fu_1311_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_7_fu_1318_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln26_6_fu_1308_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln8_fu_1304_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln26_2_fu_1322_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_849_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln35_2_fu_1349_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln35_9_fu_1328_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln35_17_fu_1353_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_9_fu_1360_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_12_fu_1364_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_13_fu_1377_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_7_fu_1396_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1429_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_1533_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_1457_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_8_fu_1464_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_10_fu_1468_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_2_fu_1471_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln34_fu_1482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_12_fu_1486_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_1496_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_1506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_1500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_1512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_672_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_1518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1533_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1533_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1533_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1533_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1533_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln26_1_fu_974_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln26_2_fu_1034_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln26_3_fu_937_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln26_4_fu_1004_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln26_5_fu_1064_p10 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln26_fu_907_p10 : STD_LOGIC_VECTOR (11 downto 0);

    component conv_1_fadd_32ns_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_lbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_mb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mux_432_32ncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_urem_5ns_4ocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (2 downto 0) );
    end component;


    component conv_1_mac_muladdpcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_0_address0,
        ce0 => conv_1_weights_0_0_0_ce0,
        q0 => conv_1_weights_0_0_0_q0);

    conv_1_weights_0_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_1_0_address0,
        ce0 => conv_1_weights_0_1_0_ce0,
        q0 => conv_1_weights_0_1_0_q0);

    conv_1_weights_0_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_2_0_address0,
        ce0 => conv_1_weights_0_2_0_ce0,
        q0 => conv_1_weights_0_2_0_q0);

    conv_1_weights_1_0_0_U : component conv_1_conv_1_weieOg
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_0_address0,
        ce0 => conv_1_weights_1_0_0_ce0,
        q0 => conv_1_weights_1_0_0_q0);

    conv_1_weights_1_1_0_U : component conv_1_conv_1_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_1_0_address0,
        ce0 => conv_1_weights_1_1_0_ce0,
        q0 => conv_1_weights_1_1_0_q0);

    conv_1_weights_1_2_0_U : component conv_1_conv_1_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_2_0_address0,
        ce0 => conv_1_weights_1_2_0_ce0,
        q0 => conv_1_weights_1_2_0_q0);

    conv_1_weights_2_0_0_U : component conv_1_conv_1_weihbi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_0_address0,
        ce0 => conv_1_weights_2_0_0_ce0,
        q0 => conv_1_weights_2_0_0_q0);

    conv_1_weights_2_1_0_U : component conv_1_conv_1_weiibs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_1_0_address0,
        ce0 => conv_1_weights_2_1_0_ce0,
        q0 => conv_1_weights_2_1_0_q0);

    conv_1_weights_2_2_0_U : component conv_1_conv_1_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_2_0_address0,
        ce0 => conv_1_weights_2_2_0_ce0,
        q0 => conv_1_weights_2_2_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_kbM_U1 : component conv_1_fadd_32ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_652_p0,
        din1 => grp_fu_652_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_652_p2);

    conv_1_fadd_32ns_kbM_U2 : component conv_1_fadd_32ns_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_657_p0,
        din1 => grp_fu_657_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_657_p2);

    conv_1_fmul_32ns_lbW_U3 : component conv_1_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_661_p0,
        din1 => grp_fu_661_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_661_p2);

    conv_1_fmul_32ns_lbW_U4 : component conv_1_fmul_32ns_lbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_666_p0,
        din1 => grp_fu_666_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_666_p2);

    conv_1_fcmp_32ns_mb6_U5 : component conv_1_fcmp_32ns_mb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_657_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_13_fu_672_p2);

    conv_1_mux_432_32ncg_U6 : component conv_1_mux_432_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_input_0_q0,
        din1 => conv_input_1_q0,
        din2 => conv_input_2_q0,
        din3 => conv_input_3_q0,
        din4 => grp_fu_678_p5,
        dout => grp_fu_678_p6);

    conv_1_mux_432_32ncg_U7 : component conv_1_mux_432_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_input_0_q1,
        din1 => conv_input_1_q1,
        din2 => conv_input_2_q1,
        din3 => conv_input_3_q1,
        din4 => grp_fu_693_p5,
        dout => grp_fu_693_p6);

    conv_1_mux_432_32ncg_U8 : component conv_1_mux_432_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_input_0_q0,
        din1 => conv_input_1_q0,
        din2 => conv_input_2_q0,
        din3 => conv_input_3_q0,
        din4 => grp_fu_708_p5,
        dout => grp_fu_708_p6);

    conv_1_urem_5ns_4ocq_U9 : component conv_1_urem_5ns_4ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_phi_mux_c_0_phi_fu_622_p4,
        din1 => grp_fu_765_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_765_p2);

    conv_1_urem_5ns_4ocq_U10 : component conv_1_urem_5ns_4ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_797_p0,
        din1 => grp_fu_797_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_797_p2);

    conv_1_urem_5ns_4ocq_U11 : component conv_1_urem_5ns_4ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_815_p0,
        din1 => grp_fu_815_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_815_p2);

    conv_1_urem_5ns_4ocq_U12 : component conv_1_urem_5ns_4ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_826_p0,
        din1 => grp_fu_826_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_826_p2);

    conv_1_urem_5ns_4ocq_U13 : component conv_1_urem_5ns_4ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_838_p0,
        din1 => grp_fu_838_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_838_p2);

    conv_1_urem_5ns_4ocq_U14 : component conv_1_urem_5ns_4ocq
    generic map (
        ID => 1,
        NUM_STAGE => 9,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        dout_WIDTH => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_849_p0,
        din1 => grp_fu_849_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_849_p2);

    conv_1_mux_432_32ncg_U15 : component conv_1_mux_432_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_input_0_q1,
        din1 => conv_input_1_q1,
        din2 => conv_input_2_q1,
        din3 => conv_input_3_q1,
        din4 => tmp_fu_1289_p5,
        dout => tmp_fu_1289_p6);

    conv_1_mux_432_32ncg_U16 : component conv_1_mux_432_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_input_0_q0,
        din1 => conv_input_1_q0,
        din2 => conv_input_2_q0,
        din3 => conv_input_3_q0,
        din4 => tmp_7_fu_1396_p5,
        dout => tmp_7_fu_1396_p6);

    conv_1_mux_432_32ncg_U17 : component conv_1_mux_432_32ncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => conv_input_0_q1,
        din1 => conv_input_1_q1,
        din2 => conv_input_2_q1,
        din3 => conv_input_3_q1,
        din4 => tmp_8_fu_1429_p5,
        dout => tmp_8_fu_1429_p6);

    conv_1_mac_muladdpcA_U18 : component conv_1_mac_muladdpcA
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_1533_p0,
        din1 => grp_fu_1533_p1,
        din2 => grp_fu_1533_p2,
        dout => grp_fu_1533_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter2_state12)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter1;
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_618_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_0_reg_618 <= select_ln35_11_reg_1627;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_618 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_630_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
                f_0_reg_630 <= f_reg_1772;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_630 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten77_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten77_reg_595 <= add_ln8_reg_1605;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten77_reg_595 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_607_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_607 <= select_ln11_reg_1633;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_607 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_0_reg_641_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0))) then 
                r_0_reg_641 <= select_ln35_1_reg_1703;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_641 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_fu_771_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln11_reg_1576 <= add_ln11_fu_803_p2;
                add_ln26_3_reg_1569 <= add_ln26_3_fu_791_p2;
                icmp_ln11_reg_1546 <= icmp_ln11_fu_777_p2;
                select_ln35_reg_1562 <= select_ln35_fu_783_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln26_10_reg_1842 <= add_ln26_10_fu_1344_p2;
                add_ln26_14_reg_1857 <= add_ln26_14_fu_1390_p2;
                add_ln26_6_reg_1832 <= add_ln26_6_fu_1335_p2;
                    zext_ln35_6_reg_1837(4 downto 0) <= zext_ln35_6_fu_1340_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1542 = ap_const_lv1_0))) then
                add_ln26_11_reg_1599 <= add_ln26_11_fu_844_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                add_ln26_1_reg_1593 <= add_ln26_1_fu_832_p2;
                tmp_1_1_2_reg_2032_pp0_iter3_reg <= tmp_1_1_2_reg_2032;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1542 = ap_const_lv1_0))) then
                add_ln26_7_reg_1587 <= add_ln26_7_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0))) then
                add_ln35_reg_1721 <= add_ln35_fu_1172_p2;
                sub_ln26_1_reg_1715 <= sub_ln26_1_fu_1159_p2;
                sub_ln26_reg_1709 <= sub_ln26_fu_1124_p2;
                    zext_ln35_5_reg_1727(2 downto 0) <= zext_ln35_5_fu_1196_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln8_reg_1605 <= add_ln8_fu_855_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                and_ln35_reg_1610 <= and_ln35_fu_872_p2;
                select_ln35_10_reg_1620 <= select_ln35_10_fu_883_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                and_ln35_reg_1610_pp0_iter1_reg <= and_ln35_reg_1610;
                select_ln35_10_reg_1620_pp0_iter1_reg <= select_ln35_10_reg_1620;
                select_ln35_10_reg_1620_pp0_iter2_reg <= select_ln35_10_reg_1620_pp0_iter1_reg;
                select_ln35_10_reg_1620_pp0_iter3_reg <= select_ln35_10_reg_1620_pp0_iter2_reg;
                select_ln35_10_reg_1620_pp0_iter4_reg <= select_ln35_10_reg_1620_pp0_iter3_reg;
                select_ln35_11_reg_1627_pp0_iter1_reg <= select_ln35_11_reg_1627;
                select_ln35_11_reg_1627_pp0_iter2_reg <= select_ln35_11_reg_1627_pp0_iter1_reg;
                select_ln35_11_reg_1627_pp0_iter3_reg <= select_ln35_11_reg_1627_pp0_iter2_reg;
                select_ln35_11_reg_1627_pp0_iter4_reg <= select_ln35_11_reg_1627_pp0_iter3_reg;
                tmp_1_2_2_reg_2047_pp0_iter3_reg <= tmp_1_2_2_reg_2047;
                tmp_1_2_2_reg_2047_pp0_iter4_reg <= tmp_1_2_2_reg_2047_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                c_reg_1581 <= c_fu_809_p2;
                tmp_1_1_1_reg_1977_pp0_iter3_reg <= tmp_1_1_1_reg_1977;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1542_pp0_iter5_reg = ap_const_lv1_0))) then
                conv_1_bias_load_reg_2062 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0))) then
                conv_1_weights_0_0_0_2_reg_1678 <= conv_1_weights_0_0_0_q0;
                conv_1_weights_0_1_0_2_reg_1683 <= conv_1_weights_0_1_0_q0;
                conv_1_weights_1_0_0_2_reg_1688 <= conv_1_weights_1_0_0_q0;
                conv_1_weights_1_1_0_2_reg_1693 <= conv_1_weights_1_1_0_q0;
                select_ln35_14_reg_1673 <= select_ln35_14_fu_1024_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0))) then
                conv_1_weights_2_0_0_2_reg_1992 <= conv_1_weights_2_0_0_q0;
                conv_1_weights_2_1_0_2_reg_1997 <= conv_1_weights_2_1_0_q0;
                conv_1_weights_2_2_0_2_reg_2002 <= conv_1_weights_2_2_0_q0;
                    zext_ln35_8_reg_1967(4 downto 0) <= zext_ln35_8_fu_1425_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0))) then
                f_reg_1772 <= f_fu_1228_p2;
                select_ln35_1_reg_1703 <= select_ln35_1_fu_1101_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln11_reg_1546_pp0_iter1_reg <= icmp_ln11_reg_1546;
                icmp_ln8_reg_1542 <= icmp_ln8_fu_771_p2;
                icmp_ln8_reg_1542_pp0_iter1_reg <= icmp_ln8_reg_1542;
                icmp_ln8_reg_1542_pp0_iter2_reg <= icmp_ln8_reg_1542_pp0_iter1_reg;
                icmp_ln8_reg_1542_pp0_iter3_reg <= icmp_ln8_reg_1542_pp0_iter2_reg;
                icmp_ln8_reg_1542_pp0_iter4_reg <= icmp_ln8_reg_1542_pp0_iter3_reg;
                icmp_ln8_reg_1542_pp0_iter5_reg <= icmp_ln8_reg_1542_pp0_iter4_reg;
                tmp_1_1_reg_1897_pp0_iter3_reg <= tmp_1_1_reg_1897;
                    zext_ln26_reg_1643_pp0_iter2_reg(5 downto 0) <= zext_ln26_reg_1643(5 downto 0);
                    zext_ln26_reg_1643_pp0_iter3_reg(5 downto 0) <= zext_ln26_reg_1643_pp0_iter2_reg(5 downto 0);
                    zext_ln26_reg_1643_pp0_iter4_reg(5 downto 0) <= zext_ln26_reg_1643_pp0_iter3_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_728 <= grp_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0)))) then
                reg_740 <= grp_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1542_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_750 <= grp_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln8_reg_1542_pp0_iter4_reg = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1542_pp0_iter4_reg = ap_const_lv1_0)))) then
                reg_755 <= grp_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1542_pp0_iter5_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then
                reg_760 <= grp_fu_657_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                select_ln11_reg_1633 <= select_ln11_fu_897_p3;
                select_ln35_11_reg_1627 <= select_ln35_11_fu_891_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln35_12_reg_1638 <= select_ln35_12_fu_957_p3;
                    zext_ln26_reg_1643(5 downto 0) <= zext_ln26_fu_964_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0))) then
                select_ln35_16_reg_1698 <= select_ln35_16_fu_1084_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                select_ln35_1_reg_1703_pp0_iter2_reg <= select_ln35_1_reg_1703;
                select_ln35_1_reg_1703_pp0_iter3_reg <= select_ln35_1_reg_1703_pp0_iter2_reg;
                select_ln35_1_reg_1703_pp0_iter4_reg <= select_ln35_1_reg_1703_pp0_iter3_reg;
                select_ln35_1_reg_1703_pp0_iter5_reg <= select_ln35_1_reg_1703_pp0_iter4_reg;
                tmp_1_2_1_reg_2042_pp0_iter3_reg <= tmp_1_2_1_reg_2042;
                tmp_1_2_1_reg_2042_pp0_iter4_reg <= tmp_1_2_1_reg_2042_pp0_iter3_reg;
                tmp_1_2_reg_2037_pp0_iter3_reg <= tmp_1_2_reg_2037;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0))) then
                tmp_1_0_2_reg_2027 <= grp_fu_661_p2;
                tmp_1_1_2_reg_2032 <= grp_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0))) then
                tmp_1_1_1_reg_1977 <= grp_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_1_1_reg_1897 <= grp_fu_666_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0))) then
                tmp_1_2_1_reg_2042 <= grp_fu_666_p2;
                tmp_1_2_reg_2037 <= grp_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_1_2_2_reg_2047 <= grp_fu_661_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                w_sum_3_1_1_reg_2052 <= grp_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                    zext_ln35_4_reg_1777(4 downto 0) <= zext_ln35_4_fu_1244_p1(4 downto 0);
                    zext_ln35_7_reg_1782(2 downto 0) <= zext_ln35_7_fu_1259_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln26_reg_1643(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_1643_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_1643_pp0_iter3_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_1643_pp0_iter4_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_5_reg_1727(8 downto 3) <= "000000";
    zext_ln35_4_reg_1777(31 downto 5) <= "000000000000000000000000000";
    zext_ln35_7_reg_1782(8 downto 3) <= "000000";
    zext_ln35_6_reg_1837(31 downto 5) <= "000000000000000000000000000";
    zext_ln35_8_reg_1967(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp0_stage4_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_fu_803_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_611_p4));
    add_ln26_10_fu_1344_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_1322_p2) + unsigned(zext_ln35_7_reg_1782));
    add_ln26_11_fu_844_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(select_ln35_reg_1562));
    add_ln26_12_fu_1364_p2 <= std_logic_vector(unsigned(sub_ln26_reg_1709) + unsigned(zext_ln35_9_fu_1360_p1));
    add_ln26_13_fu_1377_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_1715) + unsigned(zext_ln35_9_fu_1360_p1));
    add_ln26_14_fu_1390_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_1322_p2) + unsigned(zext_ln35_9_fu_1360_p1));
    add_ln26_1_fu_832_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(c_0_reg_618));
    add_ln26_3_fu_791_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_fu_783_p3));
    add_ln26_4_fu_1200_p2 <= std_logic_vector(unsigned(sub_ln26_fu_1124_p2) + unsigned(zext_ln35_5_fu_1196_p1));
    add_ln26_5_fu_1214_p2 <= std_logic_vector(unsigned(sub_ln26_1_fu_1159_p2) + unsigned(zext_ln35_5_fu_1196_p1));
    add_ln26_6_fu_1335_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_1322_p2) + unsigned(zext_ln35_5_reg_1727));
    add_ln26_7_fu_821_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln35_reg_1562));
    add_ln26_8_fu_1263_p2 <= std_logic_vector(unsigned(sub_ln26_reg_1709) + unsigned(zext_ln35_7_fu_1259_p1));
    add_ln26_9_fu_1276_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_1715) + unsigned(zext_ln35_7_fu_1259_p1));
    add_ln26_fu_1130_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(ap_phi_mux_r_0_phi_fu_645_p4));
    add_ln35_2_fu_1471_p2 <= std_logic_vector(unsigned(zext_ln26_8_fu_1464_p1) + unsigned(zext_ln35_10_fu_1468_p1));
    add_ln35_fu_1172_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_645_p4) + unsigned(select_ln35_3_fu_1165_p3));
    add_ln8_fu_855_p2 <= std_logic_vector(unsigned(ap_const_lv15_1) + unsigned(indvar_flatten77_reg_595));
    and_ln34_fu_1518_p2 <= (tmp_13_fu_672_p2 and or_ln34_fu_1512_p2);
    and_ln35_fu_872_p2 <= (xor_ln35_fu_861_p2 and icmp_ln14_fu_866_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state32 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter2_state12_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_condition_pp0_exit_iter2_state12 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter2_state12 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_622_p4_assign_proc : process(c_0_reg_618, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln8_reg_1542, select_ln35_11_reg_1627, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_622_p4 <= select_ln35_11_reg_1627;
        else 
            ap_phi_mux_c_0_phi_fu_622_p4 <= c_0_reg_618;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_634_p4_assign_proc : process(f_0_reg_630, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, icmp_ln8_reg_1542_pp0_iter1_reg, f_reg_1772, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_634_p4 <= f_reg_1772;
        else 
            ap_phi_mux_f_0_phi_fu_634_p4 <= f_0_reg_630;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten77_phi_fu_599_p4_assign_proc : process(indvar_flatten77_reg_595, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln8_reg_1542, add_ln8_reg_1605, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten77_phi_fu_599_p4 <= add_ln8_reg_1605;
        else 
            ap_phi_mux_indvar_flatten77_phi_fu_599_p4 <= indvar_flatten77_reg_595;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_611_p4_assign_proc : process(indvar_flatten_reg_607, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln8_reg_1542, select_ln11_reg_1633, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1542 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_611_p4 <= select_ln11_reg_1633;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_611_p4 <= indvar_flatten_reg_607;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_645_p4_assign_proc : process(r_0_reg_641, ap_enable_reg_pp0_iter2, icmp_ln8_reg_1542_pp0_iter2_reg, ap_CS_fsm_pp0_stage3, select_ln35_1_reg_1703, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln8_reg_1542_pp0_iter2_reg = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_645_p4 <= select_ln35_1_reg_1703;
        else 
            ap_phi_mux_r_0_phi_fu_645_p4 <= r_0_reg_641;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state32)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_1482_p1 <= grp_fu_657_p2;
    c_fu_809_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(c_0_reg_618));
    conv_1_bias_address0 <= zext_ln26_reg_1643_pp0_iter4_reg(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_0_address0 <= zext_ln26_fu_964_p1(5 - 1 downto 0);

    conv_1_weights_0_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_1_0_address0 <= zext_ln26_fu_964_p1(5 - 1 downto 0);

    conv_1_weights_0_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_2_0_address0 <= zext_ln26_reg_1643(5 - 1 downto 0);

    conv_1_weights_0_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_0_address0 <= zext_ln26_fu_964_p1(5 - 1 downto 0);

    conv_1_weights_1_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_1_0_address0 <= zext_ln26_fu_964_p1(5 - 1 downto 0);

    conv_1_weights_1_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_2_0_address0 <= zext_ln26_reg_1643(5 - 1 downto 0);

    conv_1_weights_1_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_0_address0 <= zext_ln26_reg_1643(5 - 1 downto 0);

    conv_1_weights_2_0_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_1_0_address0 <= zext_ln26_reg_1643(5 - 1 downto 0);

    conv_1_weights_2_1_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_2_0_address0 <= zext_ln26_reg_1643(5 - 1 downto 0);

    conv_1_weights_2_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_11_fu_1220_p1, zext_ln26_14_fu_1281_p1, zext_ln26_16_fu_1369_p1, sext_ln26_4_fu_1411_p1, ap_block_pp0_stage1, zext_ln26_18_fu_1444_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv_input_0_address0 <= zext_ln26_18_fu_1444_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_0_address0 <= sext_ln26_4_fu_1411_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_0_address0 <= zext_ln26_16_fu_1369_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_0_address0 <= zext_ln26_14_fu_1281_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_0_address0 <= zext_ln26_11_fu_1220_p1(8 - 1 downto 0);
        else 
            conv_input_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_10_fu_1206_p1, zext_ln26_13_fu_1268_p1, zext_ln26_17_fu_1382_p1, ap_block_pp0_stage1, sext_ln26_6_fu_1418_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_0_address1 <= sext_ln26_6_fu_1418_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_0_address1 <= zext_ln26_17_fu_1382_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_0_address1 <= zext_ln26_13_fu_1268_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_0_address1 <= zext_ln26_10_fu_1206_p1(8 - 1 downto 0);
        else 
            conv_input_0_address1 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_0_ce0 <= ap_const_logic_1;
        else 
            conv_input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_0_ce1 <= ap_const_logic_1;
        else 
            conv_input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_11_fu_1220_p1, zext_ln26_14_fu_1281_p1, zext_ln26_16_fu_1369_p1, sext_ln26_4_fu_1411_p1, ap_block_pp0_stage1, zext_ln26_18_fu_1444_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv_input_1_address0 <= zext_ln26_18_fu_1444_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_1_address0 <= sext_ln26_4_fu_1411_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_1_address0 <= zext_ln26_16_fu_1369_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_1_address0 <= zext_ln26_14_fu_1281_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_1_address0 <= zext_ln26_11_fu_1220_p1(8 - 1 downto 0);
        else 
            conv_input_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_10_fu_1206_p1, zext_ln26_13_fu_1268_p1, zext_ln26_17_fu_1382_p1, ap_block_pp0_stage1, sext_ln26_6_fu_1418_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_1_address1 <= sext_ln26_6_fu_1418_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_1_address1 <= zext_ln26_17_fu_1382_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_1_address1 <= zext_ln26_13_fu_1268_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_1_address1 <= zext_ln26_10_fu_1206_p1(8 - 1 downto 0);
        else 
            conv_input_1_address1 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_1_ce0 <= ap_const_logic_1;
        else 
            conv_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_1_ce1 <= ap_const_logic_1;
        else 
            conv_input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_11_fu_1220_p1, zext_ln26_14_fu_1281_p1, zext_ln26_16_fu_1369_p1, sext_ln26_4_fu_1411_p1, ap_block_pp0_stage1, zext_ln26_18_fu_1444_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv_input_2_address0 <= zext_ln26_18_fu_1444_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_2_address0 <= sext_ln26_4_fu_1411_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_2_address0 <= zext_ln26_16_fu_1369_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_2_address0 <= zext_ln26_14_fu_1281_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_2_address0 <= zext_ln26_11_fu_1220_p1(8 - 1 downto 0);
        else 
            conv_input_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_2_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_10_fu_1206_p1, zext_ln26_13_fu_1268_p1, zext_ln26_17_fu_1382_p1, ap_block_pp0_stage1, sext_ln26_6_fu_1418_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_2_address1 <= sext_ln26_6_fu_1418_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_2_address1 <= zext_ln26_17_fu_1382_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_2_address1 <= zext_ln26_13_fu_1268_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_2_address1 <= zext_ln26_10_fu_1206_p1(8 - 1 downto 0);
        else 
            conv_input_2_address1 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_2_ce0 <= ap_const_logic_1;
        else 
            conv_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_2_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_2_ce1 <= ap_const_logic_1;
        else 
            conv_input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_11_fu_1220_p1, zext_ln26_14_fu_1281_p1, zext_ln26_16_fu_1369_p1, sext_ln26_4_fu_1411_p1, ap_block_pp0_stage1, zext_ln26_18_fu_1444_p1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            conv_input_3_address0 <= zext_ln26_18_fu_1444_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_3_address0 <= sext_ln26_4_fu_1411_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_3_address0 <= zext_ln26_16_fu_1369_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_3_address0 <= zext_ln26_14_fu_1281_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_3_address0 <= zext_ln26_11_fu_1220_p1(8 - 1 downto 0);
        else 
            conv_input_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_3_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, zext_ln26_10_fu_1206_p1, zext_ln26_13_fu_1268_p1, zext_ln26_17_fu_1382_p1, ap_block_pp0_stage1, sext_ln26_6_fu_1418_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_input_3_address1 <= sext_ln26_6_fu_1418_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_3_address1 <= zext_ln26_17_fu_1382_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_input_3_address1 <= zext_ln26_13_fu_1268_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_input_3_address1 <= zext_ln26_10_fu_1206_p1(8 - 1 downto 0);
        else 
            conv_input_3_address1 <= "XXXXXXXX";
        end if; 
    end process;


    conv_input_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_3_ce0 <= ap_const_logic_1;
        else 
            conv_input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_3_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            conv_input_3_ce1 <= ap_const_logic_1;
        else 
            conv_input_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= zext_ln35_11_fu_1477_p1(15 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_657_p2 when (and_ln34_fu_1518_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter5, icmp_ln8_reg_1542_pp0_iter5_reg)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_1542_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_1228_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_10_reg_1620));
    grp_fu_1533_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_1533_p1 <= grp_fu_1533_p10(5 - 1 downto 0);
    grp_fu_1533_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_reg_1703_pp0_iter5_reg),10));
    grp_fu_1533_p2 <= grp_fu_1533_p20(5 - 1 downto 0);
    grp_fu_1533_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_11_reg_1627_pp0_iter4_reg),10));

    grp_fu_652_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, grp_fu_661_p2, ap_CS_fsm_pp0_stage1, reg_740, ap_CS_fsm_pp0_stage3, reg_750, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_652_p0 <= reg_750;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_652_p0 <= reg_740;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_652_p0 <= grp_fu_661_p2;
        else 
            grp_fu_652_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_652_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, reg_728, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter3, tmp_1_1_reg_1897_pp0_iter3_reg, tmp_1_1_1_reg_1977_pp0_iter3_reg, tmp_1_0_2_reg_2027, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_652_p1 <= tmp_1_1_1_reg_1977_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_652_p1 <= tmp_1_1_reg_1897_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_652_p1 <= tmp_1_0_2_reg_2027;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_652_p1 <= reg_728;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_652_p1 <= ap_const_lv32_0;
        else 
            grp_fu_652_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_657_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, reg_755, ap_enable_reg_pp0_iter4, reg_760, ap_enable_reg_pp0_iter5, w_sum_3_1_1_reg_2052, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_657_p0 <= reg_760;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_657_p0 <= reg_755;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_657_p0 <= w_sum_3_1_1_reg_2052;
        else 
            grp_fu_657_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_657_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, tmp_1_1_2_reg_2032_pp0_iter3_reg, tmp_1_2_reg_2037_pp0_iter3_reg, tmp_1_2_1_reg_2042_pp0_iter4_reg, tmp_1_2_2_reg_2047_pp0_iter4_reg, conv_1_bias_load_reg_2062, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_657_p1 <= conv_1_bias_load_reg_2062;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_657_p1 <= tmp_1_2_2_reg_2047_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_657_p1 <= tmp_1_2_1_reg_2042_pp0_iter4_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_657_p1 <= tmp_1_2_reg_2037_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_657_p1 <= tmp_1_1_2_reg_2032_pp0_iter3_reg;
        else 
            grp_fu_657_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_661_p0_assign_proc : process(conv_1_weights_0_2_0_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, conv_1_weights_0_0_0_2_reg_1678, conv_1_weights_0_1_0_2_reg_1683, conv_1_weights_2_0_0_2_reg_1992, conv_1_weights_2_2_0_2_reg_2002, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_661_p0 <= conv_1_weights_2_2_0_2_reg_2002;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_661_p0 <= conv_1_weights_2_0_0_2_reg_1992;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_661_p0 <= conv_1_weights_0_2_0_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_661_p0 <= conv_1_weights_0_1_0_2_reg_1683;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_661_p0 <= conv_1_weights_0_0_0_2_reg_1678;
        else 
            grp_fu_661_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_661_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, grp_fu_678_p6, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, grp_fu_693_p6, ap_CS_fsm_pp0_stage3, grp_fu_708_p6, tmp_fu_1289_p6, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_661_p1 <= grp_fu_678_p6;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)))) then 
            grp_fu_661_p1 <= grp_fu_708_p6;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_661_p1 <= grp_fu_693_p6;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_661_p1 <= tmp_fu_1289_p6;
        else 
            grp_fu_661_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_666_p0_assign_proc : process(conv_1_weights_1_2_0_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, conv_1_weights_1_0_0_2_reg_1688, conv_1_weights_1_1_0_2_reg_1693, conv_1_weights_2_1_0_2_reg_1997, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_666_p0 <= conv_1_weights_2_1_0_2_reg_1997;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_666_p0 <= conv_1_weights_1_2_0_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_666_p0 <= conv_1_weights_1_1_0_2_reg_1693;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_666_p0 <= conv_1_weights_1_0_0_2_reg_1688;
        else 
            grp_fu_666_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_666_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, grp_fu_678_p6, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, grp_fu_693_p6, tmp_7_fu_1396_p6, tmp_8_fu_1429_p6, ap_block_pp0_stage0, ap_block_pp0_stage4, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_666_p1 <= grp_fu_693_p6;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            grp_fu_666_p1 <= tmp_8_fu_1429_p6;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_666_p1 <= tmp_7_fu_1396_p6;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_666_p1 <= grp_fu_678_p6;
        else 
            grp_fu_666_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_678_p5_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, zext_ln35_4_fu_1244_p1, zext_ln35_4_reg_1777, ap_block_pp0_stage4, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_678_p5 <= zext_ln35_4_reg_1777;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_678_p5 <= zext_ln35_4_fu_1244_p1;
        else 
            grp_fu_678_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_693_p5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter2, zext_ln35_6_fu_1340_p1, zext_ln35_6_reg_1837, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_693_p5 <= zext_ln35_6_reg_1837;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                grp_fu_693_p5 <= zext_ln35_6_fu_1340_p1;
            else 
                grp_fu_693_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_693_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_708_p5_assign_proc : process(ap_enable_reg_pp0_iter2, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, zext_ln35_8_fu_1425_p1, zext_ln35_8_reg_1967, ap_block_pp0_stage3, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_708_p5 <= zext_ln35_8_reg_1967;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_708_p5 <= zext_ln35_8_fu_1425_p1;
            else 
                grp_fu_708_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_708_p5 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_765_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    grp_fu_797_p0 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_fu_783_p3));
    grp_fu_797_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    grp_fu_815_p0 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(c_0_reg_618));
    grp_fu_815_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    grp_fu_826_p0 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln35_reg_1562));
    grp_fu_826_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    grp_fu_838_p0 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(c_0_reg_618));
    grp_fu_838_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    grp_fu_849_p0 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(select_ln35_reg_1562));
    grp_fu_849_p1 <= ap_const_lv5_7(4 - 1 downto 0);
    icmp_ln11_fu_777_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_611_p4 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_866_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_634_p4 = ap_const_lv6_20) else "0";
    icmp_ln34_1_fu_1506_p2 <= "1" when (trunc_ln34_fu_1496_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_1500_p2 <= "0" when (tmp_12_fu_1486_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_771_p2 <= "1" when (ap_phi_mux_indvar_flatten77_phi_fu_599_p4 = ap_const_lv15_5480) else "0";
    mul_ln26_1_fu_974_p1 <= mul_ln26_1_fu_974_p10(5 - 1 downto 0);
    mul_ln26_1_fu_974_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_reg_1581),12));
    mul_ln26_1_fu_974_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_25) * unsigned(mul_ln26_1_fu_974_p1), 12));
    mul_ln26_2_fu_1034_p1 <= mul_ln26_2_fu_1034_p10(5 - 1 downto 0);
    mul_ln26_2_fu_1034_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_reg_1593),12));
    mul_ln26_2_fu_1034_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_25) * unsigned(mul_ln26_2_fu_1034_p1), 12));
    mul_ln26_3_fu_937_p1 <= mul_ln26_3_fu_937_p10(5 - 1 downto 0);
    mul_ln26_3_fu_937_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_reg_1569),12));
    mul_ln26_3_fu_937_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_25) * unsigned(mul_ln26_3_fu_937_p1), 12));
    mul_ln26_4_fu_1004_p1 <= mul_ln26_4_fu_1004_p10(5 - 1 downto 0);
    mul_ln26_4_fu_1004_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_reg_1587),12));
    mul_ln26_4_fu_1004_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_25) * unsigned(mul_ln26_4_fu_1004_p1), 12));
    mul_ln26_5_fu_1064_p1 <= mul_ln26_5_fu_1064_p10(5 - 1 downto 0);
    mul_ln26_5_fu_1064_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_reg_1599),12));
    mul_ln26_5_fu_1064_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_25) * unsigned(mul_ln26_5_fu_1064_p1), 12));
    mul_ln26_fu_907_p1 <= mul_ln26_fu_907_p10(5 - 1 downto 0);
    mul_ln26_fu_907_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_618),12));
    mul_ln26_fu_907_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv12_25) * unsigned(mul_ln26_fu_907_p1), 12));
    or_ln34_fu_1512_p2 <= (icmp_ln34_fu_1500_p2 or icmp_ln34_1_fu_1506_p2);
    or_ln35_fu_878_p2 <= (icmp_ln11_reg_1546 or and_ln35_fu_872_p2);
    r_fu_1091_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_r_0_phi_fu_645_p4));
    select_ln11_fu_897_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_reg_1546(0) = '1') else 
        add_ln11_reg_1576;
    select_ln35_10_fu_883_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_878_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_634_p4;
    select_ln35_11_fu_891_p3 <= 
        add_ln26_3_reg_1569 when (and_ln35_fu_872_p2(0) = '1') else 
        select_ln35_reg_1562;
    select_ln35_12_fu_957_p3 <= 
        sext_ln26_3_fu_953_p1 when (and_ln35_reg_1610(0) = '1') else 
        select_ln35_4_fu_927_p3;
    select_ln35_13_fu_1189_p3 <= 
        trunc_ln35_fu_1185_p1 when (and_ln35_reg_1610(0) = '1') else 
        select_ln35_5_fu_1178_p3;
    select_ln35_14_fu_1024_p3 <= 
        sext_ln26_5_fu_1020_p1 when (and_ln35_reg_1610(0) = '1') else 
        select_ln35_6_fu_994_p3;
    select_ln35_15_fu_1252_p3 <= 
        trunc_ln35_1_fu_1248_p1 when (and_ln35_reg_1610(0) = '1') else 
        select_ln35_7_fu_1237_p3;
    select_ln35_16_fu_1084_p3 <= 
        sext_ln26_7_fu_1080_p1 when (and_ln35_reg_1610(0) = '1') else 
        select_ln35_8_fu_1054_p3;
    select_ln35_17_fu_1353_p3 <= 
        trunc_ln35_2_fu_1349_p1 when (and_ln35_reg_1610_pp0_iter1_reg(0) = '1') else 
        select_ln35_9_fu_1328_p3;
    select_ln35_1_fu_1101_p3 <= 
        r_fu_1091_p2 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_645_p4;
    select_ln35_2_fu_1136_p3 <= 
        add_ln26_fu_1130_p2 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        r_fu_1091_p2;
    select_ln35_3_fu_1165_p3 <= 
        ap_const_lv5_3 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        ap_const_lv5_2;
    select_ln35_4_fu_927_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_reg_1546(0) = '1') else 
        sext_ln26_fu_923_p1;
    select_ln35_5_fu_1178_p3 <= 
        ap_const_lv3_0 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        trunc_ln26_fu_1097_p1;
    select_ln35_6_fu_994_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        sext_ln26_1_fu_990_p1;
    select_ln35_7_fu_1237_p3 <= 
        ap_const_lv3_1 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        trunc_ln26_1_fu_1233_p1;
    select_ln35_8_fu_1054_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        sext_ln26_2_fu_1050_p1;
    select_ln35_9_fu_1328_p3 <= 
        ap_const_lv3_2 when (icmp_ln11_reg_1546_pp0_iter1_reg(0) = '1') else 
        trunc_ln8_fu_1304_p1;
    select_ln35_fu_783_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_777_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_622_p4;
        sext_ln26_1_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_980_p4),5));

        sext_ln26_2_fu_1050_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_1040_p4),5));

        sext_ln26_3_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_943_p4),5));

        sext_ln26_4_fu_1411_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_6_reg_1832),64));

        sext_ln26_5_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_20_fu_1010_p4),5));

        sext_ln26_6_fu_1418_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_10_reg_1842),64));

        sext_ln26_7_fu_1080_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_21_fu_1070_p4),5));

        sext_ln26_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_1_fu_913_p4),5));

    sub_ln26_1_fu_1159_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_1155_p1) - unsigned(zext_ln35_2_fu_1143_p1));
    sub_ln26_2_fu_1322_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_1318_p1) - unsigned(zext_ln26_6_fu_1308_p1));
    sub_ln26_fu_1124_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_1120_p1) - unsigned(zext_ln35_1_fu_1108_p1));
    tmp_12_fu_1486_p4 <= bitcast_ln34_fu_1482_p1(30 downto 23);
    tmp_14_fu_1040_p4 <= mul_ln26_2_fu_1034_p2(11 downto 8);
    tmp_15_fu_1311_p3 <= (add_ln35_reg_1721 & ap_const_lv3_0);
    tmp_16_fu_1112_p3 <= (select_ln35_1_fu_1101_p3 & ap_const_lv3_0);
    tmp_17_fu_1147_p3 <= (select_ln35_2_fu_1136_p3 & ap_const_lv3_0);
    tmp_18_fu_1457_p3 <= (grp_fu_1533_p3 & ap_const_lv5_0);
    tmp_19_fu_943_p4 <= mul_ln26_3_fu_937_p2(11 downto 8);
    tmp_1_fu_913_p4 <= mul_ln26_fu_907_p2(11 downto 8);
    tmp_20_fu_1010_p4 <= mul_ln26_4_fu_1004_p2(11 downto 8);
    tmp_21_fu_1070_p4 <= mul_ln26_5_fu_1064_p2(11 downto 8);
    tmp_2_fu_980_p4 <= mul_ln26_1_fu_974_p2(11 downto 8);
    tmp_7_fu_1396_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_14_reg_1673),32));
    tmp_8_fu_1429_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_16_reg_1698),32));
    tmp_fu_1289_p5 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_12_reg_1638),32));
    trunc_ln26_1_fu_1233_p1 <= grp_fu_815_p2(3 - 1 downto 0);
    trunc_ln26_fu_1097_p1 <= grp_fu_765_p2(3 - 1 downto 0);
    trunc_ln34_fu_1496_p1 <= bitcast_ln34_fu_1482_p1(23 - 1 downto 0);
    trunc_ln35_1_fu_1248_p1 <= grp_fu_826_p2(3 - 1 downto 0);
    trunc_ln35_2_fu_1349_p1 <= grp_fu_849_p2(3 - 1 downto 0);
    trunc_ln35_fu_1185_p1 <= grp_fu_797_p2(3 - 1 downto 0);
    trunc_ln8_fu_1304_p1 <= grp_fu_838_p2(3 - 1 downto 0);
    xor_ln35_fu_861_p2 <= (icmp_ln11_reg_1546 xor ap_const_lv1_1);
    zext_ln26_10_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_1200_p2),64));
    zext_ln26_11_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_1214_p2),64));
    zext_ln26_13_fu_1268_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_1263_p2),64));
    zext_ln26_14_fu_1281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_1276_p2),64));
    zext_ln26_16_fu_1369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_12_fu_1364_p2),64));
    zext_ln26_17_fu_1382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_1377_p2),64));
    zext_ln26_18_fu_1444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_14_reg_1857),64));
    zext_ln26_4_fu_1120_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_1112_p3),9));
    zext_ln26_5_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_1147_p3),9));
    zext_ln26_6_fu_1308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_reg_1721),9));
    zext_ln26_7_fu_1318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1311_p3),9));
    zext_ln26_8_fu_1464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_1457_p3),16));
    zext_ln26_fu_964_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_10_reg_1620),64));
    zext_ln35_10_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_10_reg_1620_pp0_iter4_reg),16));
    zext_ln35_11_fu_1477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_1471_p2),64));
    zext_ln35_1_fu_1108_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_1101_p3),9));
    zext_ln35_2_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_1136_p3),9));
    zext_ln35_4_fu_1244_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_12_reg_1638),32));
    zext_ln35_5_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_13_fu_1189_p3),9));
    zext_ln35_6_fu_1340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_14_reg_1673),32));
    zext_ln35_7_fu_1259_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_15_fu_1252_p3),9));
    zext_ln35_8_fu_1425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_16_reg_1698),32));
    zext_ln35_9_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_17_fu_1353_p3),9));
end behav;
