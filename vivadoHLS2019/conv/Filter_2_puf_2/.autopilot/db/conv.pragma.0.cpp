# 1 "conv/conv.cpp"
# 1 "conv/conv.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 152 "<built-in>" 3
# 1 "<command line>" 1







# 1 "C:/Xilinx2019/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 157 "C:/Xilinx2019/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "conv/conv.cpp" 2
# 1 "conv/conv.h" 1

# 1 "conv/parameters.h" 1
# 3 "conv/conv.h" 2


void conv
(
  float input[(26 / 2)][(26 / 2)][6],
  float conv_out[11][11][16]
);
# 2 "conv/conv.cpp" 2

# 1 "conv/conv_weights.h" 1



float conv_weights [3][3][6][16] = {
  {
   {
    {0.082367, -0.010378, 0.281754, -0.310401, -0.045535, -0.36757, -0.259841, 0.125754, -0.062743, -0.04527, 0.186684, 0.284593, -0.123771, 0.003567, 0.203984, -0.341246},
    {0.080784, 0.1168, 0.174256, -0.763268, -0.089182, 0.193707, 0.106304, -0.30134, -0.253216, 0.178802, -0.132675, -0.214101, 0.017269, 0.061313, -0.236012, 0.244633},
    {-0.058864, 0.033556, -0.054665, -0.324098, -0.015772, -0.087985, -0.181741, 0.095456, -0.115896, -0.068693, 0.258445, -0.0107, 0.040967, -0.042856, 0.095091, -0.127992},
    {0.047861, 0.121546, -0.01564, -0.410738, 0.062868, -0.327719, -0.208497, 0.145434, 0.22187, 0.097869, -0.021913, 0.095172, 0.335597, 0.031336, -0.092498, -0.484808},
    {-0.249369, -0.010537, 0.003446, -0.328626, -0.128171, 0.230041, 0.524471, -0.566579, 0.237291, -0.534647, -0.152215, -0.246723, -0.355232, 0.190934, -0.921746, 0.221419},
    {0.19849, -0.012489, 0.183526, -0.078986, -0.077567, 0.341469, 0.092685, 0.046797, -0.178576, -0.001407, 0.060151, 0.084446, -0.069769, -0.030276, 0.164528, -0.090222}
   },
   {
    {-0.00166, 0.083123, 0.145174, 0.285113, 0.196075, -0.170739, -0.040503, 0.053757, -0.305788, -0.181922, 0.058334, -0.175068, 0.221109, -0.267825, 0.050658, 0.013875},
    {0.150212, -0.02369, -0.220301, -0.952453, -0.198814, 0.240481, 0.100008, 0.080183, 0.022845, -0.005355, 0.254317, -0.064373, -0.105451, 0.052493, 0.252227, 0.291436},
    {0.032832, 0.021731, 0.139349, 0.070832, -0.228009, 0.24474, -0.222983, -0.069996, -0.175173, 0.062888, 0.151868, 0.016591, -0.091172, 0.048777, 0.255898, 0.04839},
    {0.060308, 0.222073, 0.127843, -0.204144, 0.128583, -0.342051, -0.066883, 0.004217, -0.060705, -0.159106, 0.142815, 0.139143, 0.166379, -0.310786, -0.177316, -0.155109},
    {-0.201979, 0.256575, -0.278053, -0.396847, -0.239255, 0.012669, 0.007723, -0.179428, 0.102595, -0.377216, 0.172341, -0.144687, -0.087761, 0.13624, -0.744199, -0.025652},
    {0.059354, 0.038512, 0.133893, 0.091448, 0.119349, 0.075114, -0.416361, -0.300138, 0.194309, 0.06294, 0.114252, 0.104745, 0.207812, -0.145583, -0.1693, 0.06219}
   },
   {
    {0.019393, -0.043863, -0.037441, 0.28633, 0.231028, 0.173947, -0.238535, -0.029774, -0.323059, -0.158325, -0.252161, 0.137681, -0.074486, 0.079916, -0.105093, -0.097925},
    {-0.034301, -0.322986, -0.237212, 0.212326, -0.176188, 0.130753, 0.069427, -0.130933, -0.15965, -0.080885, 0.159798, -0.334204, -0.0378, -0.298069, 0.510907, -0.003536},
    {-0.01359, 0.171273, 0.260849, 0.248492, -0.161071, 0.300352, -0.336018, -0.141223, -0.143861, -0.204696, -0.154924, -0.027113, -0.310384, 0.241483, -0.026312, -0.005691},
    {0.192155, 0.081669, 0.313035, -0.108628, 0.153943, -0.165073, -0.198316, 0.128275, -0.249671, 0.217785, 0.103189, 0.055855, 0.010893, -0.258525, -0.122497, 0.044179},
    {-0.217513, -0.291898, -0.551966, -0.640198, -0.089055, 0.079283, 0.202372, -0.62865, 0.074716, -0.4444, 0.001264, -0.22216, -0.133025, -0.086365, -0.32427, -0.095058},
    {-0.062279, 0.311115, -0.172223, -0.002746, -0.284632, 0.110634, -0.16558, 0.093908, 0.138319, 0.093381, 0.037986, 0.103288, -0.0991, 0.305192, -0.523192, 0.097052}
   }
  },
  {
   {
    {-0.060821, -0.15723, -0.172967, 0.059104, -0.035748, -0.358229, -0.01192, 0.161098, 0.305915, -0.051262, 0.163692, 0.034103, -0.033201, -0.276481, 0.053171, 0.128101},
    {0.175465, -0.094958, 0.029385, -0.84056, 0.254603, 0.035769, -0.292368, -0.111627, -0.19613, -0.062411, -0.260986, -0.363369, -0.196325, 0.241721, -0.109439, 0.205782},
    {-0.160977, -0.241892, -0.109884, 0.074462, -0.066882, -0.336059, -0.22812, 0.020049, 0.353849, 0.015962, 0.221781, -0.059078, -0.075034, -0.281811, -0.065266, -0.035844},
    {0.205016, -0.228164, 0.043041, -0.524784, -0.017769, -0.189356, -0.253114, 0.107527, 0.379033, 0.36581, 0.045698, -0.047008, 0.076058, 0.227523, 0.027413, 0.269505},
    {-0.428819, -0.036921, 0.037479, -0.132344, 0.058934, 0.287616, -0.218902, -0.151158, -0.338069, -0.257895, -0.446309, -0.253615, -0.088953, 0.319087, -0.454212, 0.115189},
    {-0.238168, 0.145956, 0.073765, 0.505341, 0.090428, 0.027613, -0.235821, -0.197894, 0.045286, 0.014512, 0.220238, -0.011715, 0.22915, 0.065142, 0.115499, -0.258491}
   },
   {
    {-0.104671, 0.057188, 0.2189, 0.074921, 0.09953, -0.269659, 0.103883, 0.151765, 0.024072, -0.153048, -0.047812, -0.23008, 0.14699, -0.18907, 0.057932, -0.133007},
    {0.324252, 0.017304, -0.26255, -0.206589, 0.485143, 0.212922, 0.285292, -0.106312, -0.059874, -0.030481, -0.079532, -0.790659, -0.156709, -0.019673, -0.416225, 0.117455},
    {-0.170047, 0.070579, -0.092803, 0.03622, -0.04547, -0.409054, 0.000731, -0.052727, -0.151094, -0.24394, -0.006494, 0.112523, -0.095155, -0.002438, -0.013179, -0.290407},
    {-0.33403, -0.328181, -0.152407, 0.051346, -0.195208, -0.2243, 0.012704, 0.075414, 0.115976, 0.037532, 0.301719, -0.13977, 0.257437, -0.455642, 0.18233, -0.058851},
    {-0.228013, -0.31861, -0.098583, -1.152185, 0.314553, 0.28243, -0.010579, 0.111263, 0.090572, -0.23297, 0.025826, -0.197009, -0.100519, 0.031226, -0.695148, 0.195902},
    {0.261207, 0.110093, 0.239873, 0.087072, 0.147396, 0.206104, -0.218912, -0.1921, -0.287145, 0.279918, 0.007951, 0.271799, 0.335467, 0.015586, -0.299975, 0.077451}
   },
   {
    {0.104114, -0.073213, 0.1072, -0.155808, -0.052397, -0.377281, 0.293426, -0.001348, -0.368551, 0.186887, -0.265392, -0.011892, -0.023202, 0.299375, -0.198484, -0.069339},
    {0.009529, -0.150481, -0.489245, 0.151108, 0.312303, 0.393918, -0.41996, -0.267895, -0.022745, -0.296194, -0.009428, -0.583301, -0.127348, -0.258571, -0.114423, -0.193034},
    {-0.100745, 0.068502, 0.032562, 0.003804, 0.077631, -0.261027, 0.228478, 0.171068, -0.27617, 0.139659, -0.207297, 0.247351, -0.084908, 0.254855, -0.081169, -0.347605},
    {0.220512, -0.174918, 0.310774, 0.240979, -0.274793, -0.637276, 0.140873, 0.083802, -0.006587, 0.115508, -0.288305, -0.200076, 0.232626, -0.144212, -0.004923, 0.23214},
    {-0.147819, -0.469743, -0.300257, -0.017155, 0.511438, 0.269624, -0.100718, -0.136934, 0.100452, -0.3213, -0.115261, -0.300932, -0.135073, -0.604593, -0.257443, -0.163199},
    {0.216887, -0.072469, -0.092674, -0.421683, 0.1486, -0.039065, -0.427357, -0.105079, 0.495864, 0.137083, 0.255011, 0.073007, -0.125591, 0.268443, -0.213955, 0.057797}
   }
  },
  {
   {
    {0.144207, 0.101927, -0.464485, 0.015315, 0.057002, 0.099128, 0.105873, -0.10671, 0.22579, 0.21502, 0.034587, 0.092566, -0.167637, -0.304833, -0.215601, 0.154338},
    {-0.21267, 0.363741, 0.069675, -0.658131, -0.194818, -0.059404, 0.106543, 0.082603, -0.129452, 0.085392, -0.091001, -0.125247, -0.149175, 0.159209, -0.044948, -0.315165},
    {0.023739, 0.277101, -0.40084, 0.05754, 0.036092, -0.084787, 0.217027, -0.041393, 0.197998, 0.045182, -0.042563, 0.117794, -0.266892, -0.117948, -0.034644, 0.261651},
    {0.102498, -0.078101, -0.575771, 0.039768, 0.058012, -0.003492, 0.098735, -0.19328, 0.315975, 0.281836, 0.105954, 0.135951, 0.126377, -0.003648, -0.360182, 0.193325},
    {-0.120072, -0.140158, -0.141077, -0.505175, -0.076553, -0.108183, -0.189039, 0.283143, -0.227745, 0.330161, -0.160287, -0.291973, 0.046353, 0.020717, -0.076466, -0.033238},
    {0.087242, -0.132013, 0.031321, 0.36386, -0.226217, -0.131085, -0.162051, 0.133094, 0.267017, 0.184899, -0.05564, 0.040225, 0.247971, 0.1606, 0.135592, 0.136495}
   },
   {
    {0.054922, 0.157572, 0.021222, 0.101174, 0.074128, 0.250651, 0.109757, -0.059386, -0.367897, -0.069226, -0.316121, 0.262004, 0.102486, 0.148036, -0.001061, 0.219777},
    {0.120557, 0.137552, -0.115941, -0.301779, 0.067069, -0.44285, 0.061877, 0.115306, -0.203699, 0.177097, -0.124138, -0.450779, -0.248937, -0.054218, -0.00098, -0.583576},
    {0.011905, 0.201086, 0.045406, -0.028114, -0.190296, -0.044969, 0.061892, 0.077006, -0.082187, 0.034442, -0.230038, -0.023217, -0.014625, 0.146753, 0.076096, 0.042055},
    {0.172371, -0.154229, 0.007731, 0.148846, -0.068475, 0.177376, -0.019863, -0.150433, -0.233771, 0.22059, 0.09663, -0.064009, 0.023417, 0.030211, 0.077015, 0.253523},
    {-0.328029, -0.335315, -0.225283, -0.640942, 0.144181, 0.057703, 0.325023, 0.194783, -0.258344, -0.22379, -0.159179, -0.045099, 0.108725, -0.200335, 0.110192, -0.28493},
    {-0.288797, -0.440146, 0.181533, 0.297478, 0.199838, 0.128664, -0.10687, 0.155072, 0.139209, -0.276993, 0.096607, -0.158509, 0.267422, 0.114902, 0.343309, 0.019157}
   },
   {
    {0.080798, -0.031859, 0.258881, -0.05643, -0.217655, 0.189677, 0.233454, -0.221974, -0.306398, 0.051407, -0.22803, 0.088284, 0.190078, 0.133207, 0.186189, 0.23789},
    {0.36058, 0.372677, -0.405957, -0.286607, 0.153795, -0.485211, 0.205307, 0.482373, -0.260564, 0.004458, -0.273685, -0.34734, -0.202151, -0.126192, 0.146811, -0.087884},
    {-0.082005, 0.088387, -0.059445, -0.204274, -0.21818, -0.243015, 0.25935, 0.078617, -0.226193, 0.075824, 0.025974, 0.239462, 0.011709, 0.001842, 0.228673, -0.125145},
    {-0.112368, -0.244775, 0.079976, 0.062337, -0.203229, 0.186208, -0.013787, -0.368984, 0.023605, -0.025447, 0.076751, -0.066523, 0.039029, 0.062288, 0.408428, 0.171905},
    {0.013561, -0.137336, 0.180691, -0.150266, 0.262391, -0.194978, 0.046188, 0.089101, 0.048699, -0.071554, -0.25176, -0.280065, -0.168693, -0.686676, 0.381494, -0.098546},
    {0.268865, -0.477977, 0.347142, -0.139175, 0.004457, -0.270113, -0.00321, -0.023759, 0.292893, 0.067822, 0.455024, -0.380528, 0.220081, 0.002639, 0.13258, -0.08409}
   }
  }
};
float conv_bias [16] = {-0.216688 ,-0.144009 ,-0.252378 ,0.132175 ,-0.193526 ,-0.095462 ,-0.075797 ,-0.230617 ,0.185964 ,-0.178931 ,-0.050411 ,-0.045991 ,-0.204324 ,0.037598 ,-0.310033 ,-0.09754};
# 4 "conv/conv.cpp" 2

void conv(float input[(26 / 2)][(26 / 2)][6], float conv_out[11][11][16]) {_ssdm_SpecArrayDimSize(input, 13);_ssdm_SpecArrayDimSize(conv_out, 11);

 Row_Loop:
    for (int r = 0; r < 11; ++r)
    {
     Col_Loop:
        for (int c = 0; c < 11; ++c)
        {
         Filter2_Loop:
            for (int f = 0; f < 16; ++f)
            {
#pragma HLS PIPELINE
# 15 "conv/conv.cpp"

#pragma HLS UNROLL factor=2
# 15 "conv/conv.cpp"

             float w_sum = 0.0;
                W_Row_Loop:
                for (int wr = 0; wr < 3; ++wr)
                {
                 W_Col_Loop:
                    for (int wc = 0; wc < 3; ++wc)
                    {
                     Filter1_Loop:
                        for (int ch = 0; ch < 6; ++ch)
                        {
                            w_sum += conv_weights[wr][wc][ch][f] * input[r + wr][c + wc][ch];
                        }
                    }
                }

                w_sum += conv_bias[f];


                if (w_sum > 0.0)
                    conv_out[r][c][f] = w_sum;
                else
                    conv_out[r][c][f] = 0;
            }
        }
    }
}
