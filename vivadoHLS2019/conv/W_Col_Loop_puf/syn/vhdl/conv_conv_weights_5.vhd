-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_5_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010010110100000011110110", 
    1 => "10111100010011001001111010101010", 
    2 => "00111110001110111110111000111101", 
    3 => "10111101101000011100001101101001", 
    4 => "10111101100111101101101101110011", 
    5 => "00111110101011101101010100000110", 
    6 => "00111101101111011101000110100010", 
    7 => "00111101001111111010111000110110", 
    8 => "10111110001101101101110010100000", 
    9 => "10111010101110000110101100010110", 
    10 => "00111101011101100110000011100101", 
    11 => "00111101101011001111001000000110", 
    12 => "10111101100011101110001100001101", 
    13 => "10111100111110000000010101100000", 
    14 => "00111110001010000111101000000111", 
    15 => "10111101101110001100011001010000", 
    16 => "00111101011100110001110100101110", 
    17 => "00111101000111011011111011000010", 
    18 => "00111110000010010001101100111111", 
    19 => "00111101101110110100100100010111", 
    20 => "00111101111101000110110101000000", 
    21 => "00111101100110011101010101011110", 
    22 => "10111110110101010010110101000101", 
    23 => "10111110100110011010101110110000", 
    24 => "00111110010001101111100011110000", 
    25 => "00111101100000001110011010110000", 
    26 => "00111101111010011111110011110100", 
    27 => "00111101110101101000010010001100", 
    28 => "00111110010101001100110010101011", 
    29 => "10111110000101010001001110110110", 
    30 => "10111110001011010101110011111011", 
    31 => "00111101011111101011101011110001", 
    32 => "10111101011111110001100001000100", 
    33 => "00111110100111110100101001110111", 
    34 => "10111110001100000101101100111010", 
    35 => "10111011001100111111011000111100", 
    36 => "10111110100100011011101101001001", 
    37 => "00111101111000101001010000010100", 
    38 => "10111110001010011000110111001110", 
    39 => "00111101110000000101001011010110", 
    40 => "00111110000011011010001101111111", 
    41 => "00111101101111110011111010001010", 
    42 => "00111101000110111001011100110101", 
    43 => "00111101110100111000100010101001", 
    44 => "10111101110010101111010011110001", 
    45 => "00111110100111000100001000100000", 
    46 => "10111111000001011110111111101001", 
    47 => "00111101110001101100001100110011", 
    48 => "10111110011100111110001001010000", 
    49 => "00111110000101010111010101111101", 
    50 => "00111101100101110001001000011011", 
    51 => "00111111000000010101111000000111", 
    52 => "00111101101110010011001001010001", 
    53 => "00111100111000100011010010101000", 
    54 => "10111110011100010111101100001111", 
    55 => "10111110010010101010010010111010", 
    56 => "00111101001110010111110111010000", 
    57 => "00111100011011011100001110111101", 
    58 => "00111110011000011000011000010010", 
    59 => "10111100001111111111000001000101", 
    60 => "00111110011010101010011001001100", 
    61 => "00111101100001010110100100101011", 
    62 => "00111101111011001000101010111101", 
    63 => "10111110100001000101100011101111", 
    64 => "00111110100001011011110011101101", 
    65 => "00111101111000010111100001110000", 
    66 => "00111110011101011010000101000101", 
    67 => "00111101101100100101001011001110", 
    68 => "00111110000101101110111011111010", 
    69 => "00111110010100110000110011101101", 
    70 => "10111110011000000010101001111000", 
    71 => "10111110010001001011010111011101", 
    72 => "10111110100100110000010010101011", 
    73 => "00111110100011110101000101101001", 
    74 => "00111100000000100100010011101001", 
    75 => "00111110100010110010100100111101", 
    76 => "00111110101010111100001001010101", 
    77 => "00111100011111110101110001101100", 
    78 => "10111110100110011001011001010011", 
    79 => "00111101100111101001111010100001", 
    80 => "00111110010111100001011110100000", 
    81 => "10111101100101000110101010100001", 
    82 => "10111101101111011100101111011110", 
    83 => "10111110110101111110011011010110", 
    84 => "00111110000110000010101010011001", 
    85 => "10111101001000000000001010011111", 
    86 => "10111110110110101100111010001001", 
    87 => "10111101110101110011001110101001", 
    88 => "00111110111111011110000111100011", 
    89 => "00111110000011000101111101111100", 
    90 => "00111110100000101001000011001101", 
    91 => "00111101100101011000010010110010", 
    92 => "10111110000000001001101011101101", 
    93 => "00111110100010010111000101011100", 
    94 => "10111110010110110001011100000101", 
    95 => "00111101011011001011110010001100", 
    96 => "00111101101100101010101111101111", 
    97 => "10111110000001110010111001101010", 
    98 => "00111101000000000100101001110011", 
    99 => "00111110101110100100101111011100", 
    100 => "10111110011001111010010101101110", 
    101 => "10111110000001100011101100100101", 
    102 => "10111110001001011111000010110011", 
    103 => "00111110000010000100100111001011", 
    104 => "00111110100010001011011001110100", 
    105 => "00111110001111010101011000101010", 
    106 => "10111101011000111110011011000101", 
    107 => "00111101001001001100001011111000", 
    108 => "00111110011111011110110000011100", 
    109 => "00111110001001000111010001010100", 
    110 => "00111110000010101101100010100001", 
    111 => "00111110000010111100010101011000", 
    112 => "10111110100100111101110100110011", 
    113 => "10111110111000010101101011010001", 
    114 => "00111110001110011110001111001001", 
    115 => "00111110100110000100111100001001", 
    116 => "00111110010011001010001001010101", 
    117 => "00111110000000111100000001111111", 
    118 => "10111101110110101101111010101001", 
    119 => "00111110000111101100101100110010", 
    120 => "00111110000011101000110011001110", 
    121 => "10111110100011011101001000000111", 
    122 => "00111101110001011101100111100100", 
    123 => "10111110001000100101000000101111", 
    124 => "00111110100010001110101110001001", 
    125 => "00111101111010110101000110111101", 
    126 => "00111110101011111100011000110010", 
    127 => "00111100100111001110111100100100", 
    128 => "00111110100010011010100010101100", 
    129 => "10111110111101001011100101100111", 
    130 => "00111110101100011011110010011001", 
    131 => "10111110000011101000001111100100", 
    132 => "00111011100100100000110000000111", 
    133 => "10111110100010100100110001000000", 
    134 => "10111011010100100101111011011101", 
    135 => "10111100110000101010001000111100", 
    136 => "00111110100101011111011000010010", 
    137 => "00111101100010101110011001000011", 
    138 => "00111110111010001111100011101000", 
    139 => "10111110110000101101010010010001", 
    140 => "00111110011000010101110011101010", 
    141 => "00111011001011001111001100010011", 
    142 => "00111110000001111100001100001101", 
    143 => "10111101101011000011011101100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_5 is
    component conv_conv_weights_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_5_rom_U :  component conv_conv_weights_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


