// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.636800,HLS_SYN_LAT=172305,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=25,HLS_SYN_FF=3337,HLS_SYN_LUT=4661,HLS_VERSION=2019_1}" *)

module conv (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_0_address0,
        input_0_ce0,
        input_0_q0,
        input_0_address1,
        input_0_ce1,
        input_0_q1,
        input_1_address0,
        input_1_ce0,
        input_1_q0,
        input_1_address1,
        input_1_ce1,
        input_1_q1,
        input_2_address0,
        input_2_ce0,
        input_2_q0,
        input_2_address1,
        input_2_ce1,
        input_2_q1,
        input_3_address0,
        input_3_ce0,
        input_3_q0,
        input_3_address1,
        input_3_ce1,
        input_3_q1,
        input_4_address0,
        input_4_ce0,
        input_4_q0,
        input_4_address1,
        input_4_ce1,
        input_4_q1,
        input_5_address0,
        input_5_ce0,
        input_5_q0,
        input_5_address1,
        input_5_ce1,
        input_5_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 25'd1;
parameter    ap_ST_fsm_state2 = 25'd2;
parameter    ap_ST_fsm_state3 = 25'd4;
parameter    ap_ST_fsm_state4 = 25'd8;
parameter    ap_ST_fsm_pp0_stage0 = 25'd16;
parameter    ap_ST_fsm_pp0_stage1 = 25'd32;
parameter    ap_ST_fsm_pp0_stage2 = 25'd64;
parameter    ap_ST_fsm_pp0_stage3 = 25'd128;
parameter    ap_ST_fsm_pp0_stage4 = 25'd256;
parameter    ap_ST_fsm_pp0_stage5 = 25'd512;
parameter    ap_ST_fsm_pp0_stage6 = 25'd1024;
parameter    ap_ST_fsm_pp0_stage7 = 25'd2048;
parameter    ap_ST_fsm_pp0_stage8 = 25'd4096;
parameter    ap_ST_fsm_pp0_stage9 = 25'd8192;
parameter    ap_ST_fsm_pp0_stage10 = 25'd16384;
parameter    ap_ST_fsm_pp0_stage11 = 25'd32768;
parameter    ap_ST_fsm_pp0_stage12 = 25'd65536;
parameter    ap_ST_fsm_pp0_stage13 = 25'd131072;
parameter    ap_ST_fsm_state24 = 25'd262144;
parameter    ap_ST_fsm_state25 = 25'd524288;
parameter    ap_ST_fsm_state26 = 25'd1048576;
parameter    ap_ST_fsm_state27 = 25'd2097152;
parameter    ap_ST_fsm_state28 = 25'd4194304;
parameter    ap_ST_fsm_state29 = 25'd8388608;
parameter    ap_ST_fsm_state30 = 25'd16777216;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] input_0_address0;
output   input_0_ce0;
input  [31:0] input_0_q0;
output  [7:0] input_0_address1;
output   input_0_ce1;
input  [31:0] input_0_q1;
output  [7:0] input_1_address0;
output   input_1_ce0;
input  [31:0] input_1_q0;
output  [7:0] input_1_address1;
output   input_1_ce1;
input  [31:0] input_1_q1;
output  [7:0] input_2_address0;
output   input_2_ce0;
input  [31:0] input_2_q0;
output  [7:0] input_2_address1;
output   input_2_ce1;
input  [31:0] input_2_q1;
output  [7:0] input_3_address0;
output   input_3_ce0;
input  [31:0] input_3_q0;
output  [7:0] input_3_address1;
output   input_3_ce1;
input  [31:0] input_3_q1;
output  [7:0] input_4_address0;
output   input_4_ce0;
input  [31:0] input_4_q0;
output  [7:0] input_4_address1;
output   input_4_ce1;
input  [31:0] input_4_q1;
output  [7:0] input_5_address0;
output   input_5_ce0;
input  [31:0] input_5_q0;
output  [7:0] input_5_address1;
output   input_5_ce1;
input  [31:0] input_5_q1;
output  [10:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] input_0_address0;
reg input_0_ce0;
reg input_0_ce1;
reg[7:0] input_1_address0;
reg input_1_ce0;
reg input_1_ce1;
reg[7:0] input_2_address0;
reg input_2_ce0;
reg input_2_ce1;
reg[7:0] input_3_address0;
reg input_3_ce0;
reg input_3_ce1;
reg[7:0] input_4_address0;
reg input_4_ce0;
reg input_4_ce1;
reg[7:0] input_5_address0;
reg input_5_ce0;
reg input_5_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [24:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_weights_0_0_address0;
reg    conv_weights_0_0_ce0;
wire   [31:0] conv_weights_0_0_q0;
wire   [5:0] conv_weights_0_1_address0;
reg    conv_weights_0_1_ce0;
wire   [31:0] conv_weights_0_1_q0;
wire   [5:0] conv_weights_0_2_address0;
reg    conv_weights_0_2_ce0;
wire   [31:0] conv_weights_0_2_q0;
wire   [5:0] conv_weights_0_3_address0;
reg    conv_weights_0_3_ce0;
wire   [31:0] conv_weights_0_3_q0;
wire   [5:0] conv_weights_0_4_address0;
reg    conv_weights_0_4_ce0;
wire   [31:0] conv_weights_0_4_q0;
wire   [5:0] conv_weights_0_5_address0;
reg    conv_weights_0_5_ce0;
wire   [31:0] conv_weights_0_5_q0;
wire   [5:0] conv_weights_1_0_address0;
reg    conv_weights_1_0_ce0;
wire   [31:0] conv_weights_1_0_q0;
wire   [5:0] conv_weights_1_1_address0;
reg    conv_weights_1_1_ce0;
wire   [31:0] conv_weights_1_1_q0;
wire   [5:0] conv_weights_1_2_address0;
reg    conv_weights_1_2_ce0;
wire   [31:0] conv_weights_1_2_q0;
wire   [5:0] conv_weights_1_3_address0;
reg    conv_weights_1_3_ce0;
wire   [31:0] conv_weights_1_3_q0;
wire   [5:0] conv_weights_1_4_address0;
reg    conv_weights_1_4_ce0;
wire   [31:0] conv_weights_1_4_q0;
wire   [5:0] conv_weights_1_5_address0;
reg    conv_weights_1_5_ce0;
wire   [31:0] conv_weights_1_5_q0;
wire   [5:0] conv_weights_2_0_address0;
reg    conv_weights_2_0_ce0;
wire   [31:0] conv_weights_2_0_q0;
wire   [5:0] conv_weights_2_1_address0;
reg    conv_weights_2_1_ce0;
wire   [31:0] conv_weights_2_1_q0;
wire   [5:0] conv_weights_2_2_address0;
reg    conv_weights_2_2_ce0;
wire   [31:0] conv_weights_2_2_q0;
wire   [5:0] conv_weights_2_3_address0;
reg    conv_weights_2_3_ce0;
wire   [31:0] conv_weights_2_3_q0;
wire   [5:0] conv_weights_2_4_address0;
reg    conv_weights_2_4_ce0;
wire   [31:0] conv_weights_2_4_q0;
wire   [5:0] conv_weights_2_5_address0;
reg    conv_weights_2_5_ce0;
wire   [31:0] conv_weights_2_5_q0;
wire   [3:0] conv_bias_address0;
reg    conv_bias_ce0;
wire   [31:0] conv_bias_q0;
reg   [1:0] wr_0_reg_761;
reg   [31:0] reg_854;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state6_pp0_stage1_iter0;
wire    ap_block_state20_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln63_reg_1459;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state7_pp0_stage2_iter0;
wire    ap_block_state21_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [31:0] reg_859;
reg   [31:0] reg_864;
reg   [31:0] reg_869;
reg   [31:0] reg_874;
reg   [31:0] reg_879;
wire   [31:0] w_sumf_q1;
reg   [31:0] reg_884;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state11_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state8_pp0_stage3_iter0;
wire    ap_block_state22_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] w_sumf_q0;
wire   [31:0] grp_fu_793_p2;
reg   [31:0] reg_898;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state15_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state19_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln63_reg_1459_pp0_iter1_reg;
wire   [31:0] grp_fu_798_p2;
reg   [31:0] reg_905;
wire   [31:0] grp_fu_803_p2;
reg   [31:0] reg_911;
reg   [31:0] reg_916;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state13_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state17_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_11001;
reg   [31:0] reg_921;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state14_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state18_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_11001;
reg   [31:0] reg_926;
wire   [10:0] add_ln51_fu_949_p2;
reg   [10:0] add_ln51_reg_1375;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln54_fu_955_p2;
reg   [0:0] icmp_ln54_reg_1380;
wire   [0:0] icmp_ln51_fu_943_p2;
wire   [4:0] select_ln79_4_fu_1015_p3;
reg   [4:0] select_ln79_4_reg_1386;
wire   [3:0] select_ln79_5_fu_1023_p3;
reg   [3:0] select_ln79_5_reg_1393;
wire   [3:0] select_ln79_6_fu_1037_p3;
reg   [3:0] select_ln79_6_reg_1399;
wire   [3:0] select_ln79_7_fu_1051_p3;
reg   [3:0] select_ln79_7_reg_1404;
wire   [3:0] select_ln79_1_fu_1070_p3;
reg   [3:0] select_ln79_1_reg_1414;
wire    ap_CS_fsm_state3;
wire   [7:0] zext_ln79_1_fu_1081_p1;
reg   [7:0] zext_ln79_1_reg_1420;
wire   [7:0] zext_ln79_2_fu_1091_p1;
reg   [7:0] zext_ln79_2_reg_1425;
wire   [7:0] zext_ln79_3_fu_1094_p1;
reg   [7:0] zext_ln79_3_reg_1430;
wire   [6:0] zext_ln79_4_fu_1097_p1;
reg   [6:0] zext_ln79_4_reg_1435;
reg   [10:0] conv_out_addr_reg_1440;
reg   [31:0] w_sum_reg_1445;
wire   [0:0] icmp_ln60_fu_1114_p2;
wire    ap_CS_fsm_state4;
wire   [2:0] ch_fu_1120_p2;
wire   [0:0] icmp_ln63_fu_1131_p2;
wire   [1:0] wr_fu_1137_p2;
reg   [1:0] wr_reg_1463;
wire   [7:0] add_ln71_9_fu_1231_p2;
reg   [7:0] add_ln71_9_reg_1568;
reg   [31:0] conv_weights_1_0_loa_reg_1683;
reg   [31:0] input_0_load_1_reg_1688;
reg   [31:0] conv_weights_1_1_loa_reg_1693;
reg   [31:0] input_1_load_1_reg_1698;
reg   [31:0] conv_weights_1_2_loa_reg_1703;
reg   [31:0] input_2_load_1_reg_1708;
reg   [31:0] conv_weights_1_3_loa_reg_1713;
reg   [31:0] input_3_load_1_reg_1718;
reg   [31:0] conv_weights_1_4_loa_reg_1723;
reg   [31:0] input_4_load_1_reg_1728;
reg   [31:0] conv_weights_1_5_loa_reg_1733;
reg   [31:0] input_5_load_1_reg_1738;
reg   [31:0] conv_weights_2_0_loa_reg_1743;
reg   [31:0] conv_weights_2_1_loa_reg_1748;
reg   [31:0] conv_weights_2_2_loa_reg_1753;
reg   [31:0] conv_weights_2_3_loa_reg_1758;
reg   [31:0] conv_weights_2_4_loa_reg_1763;
reg   [31:0] conv_weights_2_5_loa_reg_1768;
wire   [31:0] grp_fu_812_p2;
reg   [31:0] tmp_s_reg_1773;
wire   [31:0] grp_fu_818_p2;
reg   [31:0] tmp_2_0_1_reg_1778;
wire   [31:0] grp_fu_824_p2;
reg   [31:0] tmp_2_0_2_reg_1783;
wire   [31:0] grp_fu_830_p2;
reg   [31:0] tmp_2_0_3_reg_1788;
wire   [31:0] grp_fu_836_p2;
reg   [31:0] tmp_2_0_4_reg_1793;
wire   [31:0] grp_fu_842_p2;
reg   [31:0] tmp_2_0_5_reg_1798;
reg   [31:0] tmp_2_1_reg_1808;
reg   [31:0] tmp_2_1_1_reg_1813;
reg   [31:0] tmp_2_1_2_reg_1818;
reg   [31:0] tmp_2_1_3_reg_1823;
reg   [31:0] tmp_2_1_4_reg_1828;
reg   [31:0] tmp_2_1_5_reg_1833;
reg   [31:0] tmp_2_2_reg_1838;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state9_pp0_stage4_iter0;
wire    ap_block_state23_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
reg   [31:0] tmp_2_2_1_reg_1843;
reg   [31:0] tmp_2_2_2_reg_1848;
reg   [31:0] tmp_2_2_3_reg_1853;
reg   [31:0] tmp_2_2_4_reg_1858;
reg   [31:0] tmp_2_2_5_reg_1863;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state10_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [2:0] ch_1_fu_1251_p2;
reg   [2:0] ch_1_reg_1876;
wire    ap_CS_fsm_state25;
wire   [0:0] icmp_ln75_fu_1245_p2;
wire   [4:0] f_fu_1262_p2;
reg   [4:0] f_reg_1886;
wire   [8:0] select_ln54_fu_1273_p3;
reg   [8:0] select_ln54_reg_1891;
wire    ap_CS_fsm_state29;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage4_subdone;
reg   [2:0] w_sumf_address0;
reg    w_sumf_ce0;
reg    w_sumf_we0;
reg   [31:0] w_sumf_d0;
reg   [2:0] w_sumf_address1;
reg    w_sumf_ce1;
reg    w_sumf_we1;
reg   [31:0] w_sumf_d1;
reg   [10:0] indvar_flatten21_reg_693;
wire    ap_CS_fsm_state30;
reg   [3:0] r_0_reg_704;
reg   [8:0] indvar_flatten_reg_716;
reg   [3:0] c_0_reg_728;
reg   [4:0] f_0_reg_739;
reg   [2:0] ch_0_reg_750;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_765_p4;
wire    ap_block_pp0_stage0;
reg   [31:0] w_sum_0_reg_772;
wire    ap_CS_fsm_state24;
reg   [2:0] ch2_0_reg_782;
wire   [63:0] zext_ln59_fu_1059_p1;
wire   [63:0] zext_ln79_6_fu_1109_p1;
wire   [63:0] zext_ln61_fu_1126_p1;
wire   [63:0] zext_ln71_1_fu_1164_p1;
wire   [63:0] zext_ln71_3_fu_1206_p1;
wire   [63:0] zext_ln71_4_fu_1221_p1;
wire   [63:0] zext_ln71_5_fu_1236_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln76_fu_1257_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage4;
wire    ap_block_pp0_stage5;
wire    ap_block_pp0_stage3;
reg   [31:0] grp_fu_793_p0;
reg   [31:0] grp_fu_793_p1;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage9;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage13;
reg   [31:0] grp_fu_798_p0;
reg   [31:0] grp_fu_798_p1;
reg   [31:0] grp_fu_803_p0;
reg   [31:0] grp_fu_803_p1;
reg   [31:0] grp_fu_812_p0;
reg   [31:0] grp_fu_812_p1;
reg   [31:0] grp_fu_818_p0;
reg   [31:0] grp_fu_818_p1;
reg   [31:0] grp_fu_824_p0;
reg   [31:0] grp_fu_824_p1;
reg   [31:0] grp_fu_830_p0;
reg   [31:0] grp_fu_830_p1;
reg   [31:0] grp_fu_836_p0;
reg   [31:0] grp_fu_836_p1;
reg   [31:0] grp_fu_842_p0;
reg   [31:0] grp_fu_842_p1;
wire   [3:0] c_fu_931_p2;
wire   [3:0] add_ln71_2_fu_937_p2;
wire   [0:0] icmp_ln57_fu_991_p2;
wire   [0:0] xor_ln79_fu_985_p2;
wire   [3:0] select_ln79_fu_961_p3;
wire   [0:0] and_ln79_fu_997_p2;
wire   [0:0] or_ln79_fu_1009_p2;
wire   [3:0] add_ln71_3_fu_1003_p2;
wire   [3:0] add_ln71_4_fu_1031_p2;
wire   [3:0] select_ln79_2_fu_969_p3;
wire   [3:0] add_ln71_5_fu_1045_p2;
wire   [3:0] select_ln79_3_fu_977_p3;
wire   [3:0] r_fu_1064_p2;
wire   [7:0] grp_fu_1331_p3;
wire   [11:0] zext_ln79_5_fu_1100_p1;
wire   [11:0] tmp_2_cast_fu_1084_p3;
wire   [11:0] add_ln79_1_fu_1103_p2;
wire   [5:0] tmp_7_fu_1147_p3;
wire   [6:0] zext_ln71_fu_1155_p1;
wire   [6:0] add_ln71_6_fu_1159_p2;
wire   [3:0] zext_ln63_fu_1143_p1;
wire   [3:0] add_ln71_fu_1186_p2;
wire   [3:0] mul_ln71_fu_1195_p0;
wire   [7:0] mul_ln71_fu_1195_p2;
wire   [7:0] add_ln71_7_fu_1201_p2;
wire   [7:0] add_ln71_8_fu_1216_p2;
wire   [8:0] add_ln54_fu_1267_p2;
wire   [31:0] bitcast_ln78_fu_1280_p1;
wire   [7:0] tmp_fu_1284_p4;
wire   [22:0] trunc_ln78_fu_1294_p1;
wire   [0:0] icmp_ln78_1_fu_1304_p2;
wire   [0:0] icmp_ln78_fu_1298_p2;
wire   [0:0] or_ln78_fu_1310_p2;
wire   [0:0] grp_fu_848_p2;
wire   [0:0] and_ln78_fu_1316_p2;
wire   [3:0] grp_fu_1331_p0;
wire   [4:0] grp_fu_1331_p1;
wire   [3:0] grp_fu_1331_p2;
reg   [24:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_state12_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_state16_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_pp0_stage11_11001;
wire    ap_block_pp0_stage12_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_1331_p00;
wire   [7:0] grp_fu_1331_p20;
wire   [7:0] mul_ln71_fu_1195_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 25'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_conv_weightsbkb #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_0_address0),
    .ce0(conv_weights_0_0_ce0),
    .q0(conv_weights_0_0_q0)
);

conv_conv_weightscud #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_1_address0),
    .ce0(conv_weights_0_1_ce0),
    .q0(conv_weights_0_1_q0)
);

conv_conv_weightsdEe #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_2_address0),
    .ce0(conv_weights_0_2_ce0),
    .q0(conv_weights_0_2_q0)
);

conv_conv_weightseOg #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_3_address0),
    .ce0(conv_weights_0_3_ce0),
    .q0(conv_weights_0_3_q0)
);

conv_conv_weightsfYi #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_4_address0),
    .ce0(conv_weights_0_4_ce0),
    .q0(conv_weights_0_4_q0)
);

conv_conv_weightsg8j #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_0_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_0_5_address0),
    .ce0(conv_weights_0_5_ce0),
    .q0(conv_weights_0_5_q0)
);

conv_conv_weightshbi #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_0_address0),
    .ce0(conv_weights_1_0_ce0),
    .q0(conv_weights_1_0_q0)
);

conv_conv_weightsibs #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_1_address0),
    .ce0(conv_weights_1_1_ce0),
    .q0(conv_weights_1_1_q0)
);

conv_conv_weightsjbC #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_2_address0),
    .ce0(conv_weights_1_2_ce0),
    .q0(conv_weights_1_2_q0)
);

conv_conv_weightskbM #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_3_address0),
    .ce0(conv_weights_1_3_ce0),
    .q0(conv_weights_1_3_q0)
);

conv_conv_weightslbW #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_4_address0),
    .ce0(conv_weights_1_4_ce0),
    .q0(conv_weights_1_4_q0)
);

conv_conv_weightsmb6 #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_1_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_1_5_address0),
    .ce0(conv_weights_1_5_ce0),
    .q0(conv_weights_1_5_q0)
);

conv_conv_weightsncg #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_0_address0),
    .ce0(conv_weights_2_0_ce0),
    .q0(conv_weights_2_0_q0)
);

conv_conv_weightsocq #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_1_address0),
    .ce0(conv_weights_2_1_ce0),
    .q0(conv_weights_2_1_q0)
);

conv_conv_weightspcA #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_2_address0),
    .ce0(conv_weights_2_2_ce0),
    .q0(conv_weights_2_2_q0)
);

conv_conv_weightsqcK #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_3_address0),
    .ce0(conv_weights_2_3_ce0),
    .q0(conv_weights_2_3_q0)
);

conv_conv_weightsrcU #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_4_address0),
    .ce0(conv_weights_2_4_ce0),
    .q0(conv_weights_2_4_q0)
);

conv_conv_weightssc4 #(
    .DataWidth( 32 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
conv_weights_2_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_weights_2_5_address0),
    .ce0(conv_weights_2_5_ce0),
    .q0(conv_weights_2_5_q0)
);

conv_conv_bias #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
conv_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_bias_address0),
    .ce0(conv_bias_ce0),
    .q0(conv_bias_q0)
);

conv_w_sumf #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
w_sumf_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w_sumf_address0),
    .ce0(w_sumf_ce0),
    .we0(w_sumf_we0),
    .d0(w_sumf_d0),
    .q0(w_sumf_q0),
    .address1(w_sumf_address1),
    .ce1(w_sumf_ce1),
    .we1(w_sumf_we1),
    .d1(w_sumf_d1),
    .q1(w_sumf_q1)
);

conv_fadd_32ns_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32tde_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_793_p0),
    .din1(grp_fu_793_p1),
    .ce(1'b1),
    .dout(grp_fu_793_p2)
);

conv_fadd_32ns_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32tde_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_798_p0),
    .din1(grp_fu_798_p1),
    .ce(1'b1),
    .dout(grp_fu_798_p2)
);

conv_fadd_32ns_32tde #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fadd_32ns_32tde_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_803_p0),
    .din1(grp_fu_803_p1),
    .ce(1'b1),
    .dout(grp_fu_803_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_812_p0),
    .din1(grp_fu_812_p1),
    .ce(1'b1),
    .dout(grp_fu_812_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_818_p0),
    .din1(grp_fu_818_p1),
    .ce(1'b1),
    .dout(grp_fu_818_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_824_p0),
    .din1(grp_fu_824_p1),
    .ce(1'b1),
    .dout(grp_fu_824_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_830_p0),
    .din1(grp_fu_830_p1),
    .ce(1'b1),
    .dout(grp_fu_830_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_836_p0),
    .din1(grp_fu_836_p1),
    .ce(1'b1),
    .dout(grp_fu_836_p2)
);

conv_fmul_32ns_32udo #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_fmul_32ns_32udo_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_842_p0),
    .din1(grp_fu_842_p1),
    .ce(1'b1),
    .dout(grp_fu_842_p2)
);

conv_fcmp_32ns_32vdy #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_fcmp_32ns_32vdy_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w_sum_0_reg_772),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_848_p2)
);

conv_mac_muladd_4wdI #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_mac_muladd_4wdI_U11(
    .din0(grp_fu_1331_p0),
    .din1(grp_fu_1331_p1),
    .din2(grp_fu_1331_p2),
    .dout(grp_fu_1331_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln60_fu_1114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage13_subdone) & (1'b1 == ap_CS_fsm_pp0_stage13)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln60_fu_1114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        c_0_reg_728 <= select_ln79_5_reg_1393;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_728 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        ch2_0_reg_782 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        ch2_0_reg_782 <= ch_1_reg_1876;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_1114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        ch_0_reg_750 <= ch_fu_1120_p2;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        ch_0_reg_750 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        f_0_reg_739 <= f_reg_1886;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_739 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        indvar_flatten21_reg_693 <= add_ln51_reg_1375;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_693 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        indvar_flatten_reg_716 <= select_ln54_reg_1891;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_716 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        r_0_reg_704 <= select_ln79_1_reg_1414;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_704 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        w_sum_0_reg_772 <= w_sum_reg_1445;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        w_sum_0_reg_772 <= grp_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln60_fu_1114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_761 <= 2'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_1459 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        wr_0_reg_761 <= wr_reg_1463;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln51_reg_1375 <= add_ln51_fu_949_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_fu_1131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln71_9_reg_1568 <= add_ln71_9_fu_1231_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        ch_1_reg_1876 <= ch_1_fu_1251_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_out_addr_reg_1440 <= zext_ln79_6_fu_1109_p1;
        select_ln79_1_reg_1414 <= select_ln79_1_fu_1070_p3;
        w_sum_reg_1445 <= conv_bias_q0;
        zext_ln79_1_reg_1420[3 : 0] <= zext_ln79_1_fu_1081_p1[3 : 0];
        zext_ln79_2_reg_1425[3 : 0] <= zext_ln79_2_fu_1091_p1[3 : 0];
        zext_ln79_3_reg_1430[3 : 0] <= zext_ln79_3_fu_1094_p1[3 : 0];
        zext_ln79_4_reg_1435[4 : 0] <= zext_ln79_4_fu_1097_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_reg_1459 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_weights_1_0_loa_reg_1683 <= conv_weights_1_0_q0;
        conv_weights_1_1_loa_reg_1693 <= conv_weights_1_1_q0;
        conv_weights_1_2_loa_reg_1703 <= conv_weights_1_2_q0;
        conv_weights_1_3_loa_reg_1713 <= conv_weights_1_3_q0;
        conv_weights_1_4_loa_reg_1723 <= conv_weights_1_4_q0;
        conv_weights_1_5_loa_reg_1733 <= conv_weights_1_5_q0;
        conv_weights_2_0_loa_reg_1743 <= conv_weights_2_0_q0;
        conv_weights_2_1_loa_reg_1748 <= conv_weights_2_1_q0;
        conv_weights_2_2_loa_reg_1753 <= conv_weights_2_2_q0;
        conv_weights_2_3_loa_reg_1758 <= conv_weights_2_3_q0;
        conv_weights_2_4_loa_reg_1763 <= conv_weights_2_4_q0;
        conv_weights_2_5_loa_reg_1768 <= conv_weights_2_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_1245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
        f_reg_1886 <= f_fu_1262_p2;
        select_ln54_reg_1891 <= select_ln54_fu_1273_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln51_fu_943_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln54_reg_1380 <= icmp_ln54_fu_955_p2;
        select_ln79_4_reg_1386 <= select_ln79_4_fu_1015_p3;
        select_ln79_5_reg_1393 <= select_ln79_5_fu_1023_p3;
        select_ln79_6_reg_1399 <= select_ln79_6_fu_1037_p3;
        select_ln79_7_reg_1404 <= select_ln79_7_fu_1051_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln63_reg_1459 <= icmp_ln63_fu_1131_p2;
        icmp_ln63_reg_1459_pp0_iter1_reg <= icmp_ln63_reg_1459;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_reg_1459 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        input_0_load_1_reg_1688 <= input_0_q1;
        input_1_load_1_reg_1698 <= input_1_q1;
        input_2_load_1_reg_1708 <= input_2_q1;
        input_3_load_1_reg_1718 <= input_3_q1;
        input_4_load_1_reg_1728 <= input_4_q1;
        input_5_load_1_reg_1738 <= input_5_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln63_reg_1459 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_854 <= input_0_q0;
        reg_859 <= input_1_q0;
        reg_864 <= input_2_q0;
        reg_869 <= input_3_q0;
        reg_874 <= input_4_q0;
        reg_879 <= input_5_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_884 <= w_sumf_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln63_reg_1459_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_1459 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_898 <= grp_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln63_reg_1459_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_905 <= grp_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_911 <= grp_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage12_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_916 <= grp_fu_793_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage13_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        reg_921 <= grp_fu_793_p2;
        reg_926 <= grp_fu_798_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_2_0_1_reg_1778 <= grp_fu_818_p2;
        tmp_2_0_2_reg_1783 <= grp_fu_824_p2;
        tmp_2_0_3_reg_1788 <= grp_fu_830_p2;
        tmp_2_0_4_reg_1793 <= grp_fu_836_p2;
        tmp_2_0_5_reg_1798 <= grp_fu_842_p2;
        tmp_s_reg_1773 <= grp_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_2_1_1_reg_1813 <= grp_fu_818_p2;
        tmp_2_1_2_reg_1818 <= grp_fu_824_p2;
        tmp_2_1_3_reg_1823 <= grp_fu_830_p2;
        tmp_2_1_4_reg_1828 <= grp_fu_836_p2;
        tmp_2_1_5_reg_1833 <= grp_fu_842_p2;
        tmp_2_1_reg_1808 <= grp_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln63_reg_1459 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        tmp_2_2_1_reg_1843 <= grp_fu_818_p2;
        tmp_2_2_2_reg_1848 <= grp_fu_824_p2;
        tmp_2_2_3_reg_1853 <= grp_fu_830_p2;
        tmp_2_2_4_reg_1858 <= grp_fu_836_p2;
        tmp_2_2_5_reg_1863 <= grp_fu_842_p2;
        tmp_2_2_reg_1838 <= grp_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wr_reg_1463 <= wr_fu_1137_p2;
    end
end

always @ (*) begin
    if ((icmp_ln63_fu_1131_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_943_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln63_reg_1459 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_765_p4 = wr_reg_1463;
    end else begin
        ap_phi_mux_wr_0_phi_fu_765_p4 = wr_0_reg_761;
    end
end

always @ (*) begin
    if (((icmp_ln51_fu_943_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        conv_bias_ce0 = 1'b1;
    end else begin
        conv_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_0_ce0 = 1'b1;
    end else begin
        conv_weights_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_1_ce0 = 1'b1;
    end else begin
        conv_weights_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_2_ce0 = 1'b1;
    end else begin
        conv_weights_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_3_ce0 = 1'b1;
    end else begin
        conv_weights_0_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_4_ce0 = 1'b1;
    end else begin
        conv_weights_0_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_0_5_ce0 = 1'b1;
    end else begin
        conv_weights_0_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_0_ce0 = 1'b1;
    end else begin
        conv_weights_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_1_ce0 = 1'b1;
    end else begin
        conv_weights_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_2_ce0 = 1'b1;
    end else begin
        conv_weights_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_3_ce0 = 1'b1;
    end else begin
        conv_weights_1_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_4_ce0 = 1'b1;
    end else begin
        conv_weights_1_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_1_5_ce0 = 1'b1;
    end else begin
        conv_weights_1_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_0_ce0 = 1'b1;
    end else begin
        conv_weights_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_1_ce0 = 1'b1;
    end else begin
        conv_weights_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_2_ce0 = 1'b1;
    end else begin
        conv_weights_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_3_ce0 = 1'b1;
    end else begin
        conv_weights_2_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_4_ce0 = 1'b1;
    end else begin
        conv_weights_2_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_weights_2_5_ce0 = 1'b1;
    end else begin
        conv_weights_2_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_793_p0 = w_sum_0_reg_772;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_793_p0 = reg_921;
    end else if ((((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_793_p0 = reg_916;
    end else if ((((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_793_p0 = reg_898;
    end else if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_793_p0 = w_sumf_q1;
    end else begin
        grp_fu_793_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_793_p1 = w_sumf_q1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_793_p1 = tmp_2_2_1_reg_1843;
    end else if (((1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_2_reg_1838;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_2_3_reg_1853;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_1_1_reg_1813;
    end else if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_1_reg_1808;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_1_3_reg_1823;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_0_1_reg_1778;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_s_reg_1773;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_793_p1 = tmp_2_0_3_reg_1788;
    end else begin
        grp_fu_793_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_798_p0 = reg_926;
    end else if ((((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_798_p0 = reg_905;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_798_p0 = w_sumf_q0;
    end else begin
        grp_fu_798_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_798_p1 = tmp_2_2_2_reg_1848;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_798_p1 = tmp_2_2_4_reg_1858;
    end else if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_798_p1 = tmp_2_1_2_reg_1818;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_798_p1 = tmp_2_1_4_reg_1828;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_798_p1 = tmp_2_0_2_reg_1783;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_798_p1 = tmp_2_0_4_reg_1793;
    end else begin
        grp_fu_798_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_803_p0 = reg_911;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_803_p0 = reg_884;
    end else begin
        grp_fu_803_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
            grp_fu_803_p1 = tmp_2_2_5_reg_1863;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            grp_fu_803_p1 = tmp_2_1_5_reg_1833;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_803_p1 = tmp_2_0_5_reg_1798;
        end else begin
            grp_fu_803_p1 = 'bx;
        end
    end else begin
        grp_fu_803_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_812_p0 = conv_weights_2_0_loa_reg_1743;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_812_p0 = conv_weights_1_0_loa_reg_1683;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_812_p0 = conv_weights_0_0_q0;
        end else begin
            grp_fu_812_p0 = 'bx;
        end
    end else begin
        grp_fu_812_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_812_p1 = reg_854;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_812_p1 = input_0_load_1_reg_1688;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_812_p1 = input_0_q0;
        end else begin
            grp_fu_812_p1 = 'bx;
        end
    end else begin
        grp_fu_812_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_818_p0 = conv_weights_2_1_loa_reg_1748;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_818_p0 = conv_weights_1_1_loa_reg_1693;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_818_p0 = conv_weights_0_1_q0;
        end else begin
            grp_fu_818_p0 = 'bx;
        end
    end else begin
        grp_fu_818_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_818_p1 = reg_859;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_818_p1 = input_1_load_1_reg_1698;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_818_p1 = input_1_q0;
        end else begin
            grp_fu_818_p1 = 'bx;
        end
    end else begin
        grp_fu_818_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_824_p0 = conv_weights_2_2_loa_reg_1753;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_824_p0 = conv_weights_1_2_loa_reg_1703;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_824_p0 = conv_weights_0_2_q0;
        end else begin
            grp_fu_824_p0 = 'bx;
        end
    end else begin
        grp_fu_824_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_824_p1 = reg_864;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_824_p1 = input_2_load_1_reg_1708;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_824_p1 = input_2_q0;
        end else begin
            grp_fu_824_p1 = 'bx;
        end
    end else begin
        grp_fu_824_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_830_p0 = conv_weights_2_3_loa_reg_1758;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_830_p0 = conv_weights_1_3_loa_reg_1713;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_830_p0 = conv_weights_0_3_q0;
        end else begin
            grp_fu_830_p0 = 'bx;
        end
    end else begin
        grp_fu_830_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_830_p1 = reg_869;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_830_p1 = input_3_load_1_reg_1718;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_830_p1 = input_3_q0;
        end else begin
            grp_fu_830_p1 = 'bx;
        end
    end else begin
        grp_fu_830_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_836_p0 = conv_weights_2_4_loa_reg_1763;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_836_p0 = conv_weights_1_4_loa_reg_1723;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_836_p0 = conv_weights_0_4_q0;
        end else begin
            grp_fu_836_p0 = 'bx;
        end
    end else begin
        grp_fu_836_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_836_p1 = reg_874;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_836_p1 = input_4_load_1_reg_1728;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_836_p1 = input_4_q0;
        end else begin
            grp_fu_836_p1 = 'bx;
        end
    end else begin
        grp_fu_836_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_842_p0 = conv_weights_2_5_loa_reg_1768;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_842_p0 = conv_weights_1_5_loa_reg_1733;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_842_p0 = conv_weights_0_5_q0;
        end else begin
            grp_fu_842_p0 = 'bx;
        end
    end else begin
        grp_fu_842_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_842_p1 = reg_879;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_842_p1 = input_5_load_1_reg_1738;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_842_p1 = input_5_q0;
        end else begin
            grp_fu_842_p1 = 'bx;
        end
    end else begin
        grp_fu_842_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_0_address0 = zext_ln71_5_fu_1236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_0_address0 = zext_ln71_3_fu_1206_p1;
        end else begin
            input_0_address0 = 'bx;
        end
    end else begin
        input_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_0_ce0 = 1'b1;
    end else begin
        input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_0_ce1 = 1'b1;
    end else begin
        input_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_1_address0 = zext_ln71_5_fu_1236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_1_address0 = zext_ln71_3_fu_1206_p1;
        end else begin
            input_1_address0 = 'bx;
        end
    end else begin
        input_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_1_ce0 = 1'b1;
    end else begin
        input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_1_ce1 = 1'b1;
    end else begin
        input_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_2_address0 = zext_ln71_5_fu_1236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_2_address0 = zext_ln71_3_fu_1206_p1;
        end else begin
            input_2_address0 = 'bx;
        end
    end else begin
        input_2_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_2_ce0 = 1'b1;
    end else begin
        input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_2_ce1 = 1'b1;
    end else begin
        input_2_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_3_address0 = zext_ln71_5_fu_1236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_3_address0 = zext_ln71_3_fu_1206_p1;
        end else begin
            input_3_address0 = 'bx;
        end
    end else begin
        input_3_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_3_ce0 = 1'b1;
    end else begin
        input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_3_ce1 = 1'b1;
    end else begin
        input_3_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_4_address0 = zext_ln71_5_fu_1236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_4_address0 = zext_ln71_3_fu_1206_p1;
        end else begin
            input_4_address0 = 'bx;
        end
    end else begin
        input_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_4_ce0 = 1'b1;
    end else begin
        input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_4_ce1 = 1'b1;
    end else begin
        input_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_5_address0 = zext_ln71_5_fu_1236_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_5_address0 = zext_ln71_3_fu_1206_p1;
        end else begin
            input_5_address0 = 'bx;
        end
    end else begin
        input_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        input_5_ce0 = 1'b1;
    end else begin
        input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        input_5_ce1 = 1'b1;
    end else begin
        input_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        w_sumf_address0 = 64'd1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_sumf_address0 = 64'd3;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        w_sumf_address0 = 64'd2;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        w_sumf_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_sumf_address0 = zext_ln61_fu_1126_p1;
    end else begin
        w_sumf_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        w_sumf_address1 = zext_ln76_fu_1257_p1;
    end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_sumf_address1 = 64'd1;
    end else if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        w_sumf_address1 = 64'd0;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        w_sumf_address1 = 64'd3;
    end else if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        w_sumf_address1 = 64'd5;
    end else begin
        w_sumf_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        w_sumf_ce0 = 1'b1;
    end else begin
        w_sumf_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state25) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        w_sumf_ce1 = 1'b1;
    end else begin
        w_sumf_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_sumf_d0 = reg_905;
    end else if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        w_sumf_d0 = grp_fu_793_p2;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        w_sumf_d0 = reg_898;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_sumf_d0 = grp_fu_798_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        w_sumf_d0 = 32'd0;
    end else begin
        w_sumf_d0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            w_sumf_d1 = reg_898;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            w_sumf_d1 = grp_fu_803_p2;
        end else begin
            w_sumf_d1 = 'bx;
        end
    end else begin
        w_sumf_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln60_fu_1114_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln63_reg_1459_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln63_reg_1459_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_1459 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln63_reg_1459_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        w_sumf_we0 = 1'b1;
    end else begin
        w_sumf_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln63_reg_1459_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln63_reg_1459 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        w_sumf_we1 = 1'b1;
    end else begin
        w_sumf_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln51_fu_943_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln60_fu_1114_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln63_fu_1131_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln63_fu_1131_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((~((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage4_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else if (((1'b0 == ap_block_pp0_stage4_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            if (((icmp_ln75_fu_1245_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state25))) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln51_fu_949_p2 = (indvar_flatten21_reg_693 + 11'd1);

assign add_ln54_fu_1267_p2 = (9'd1 + indvar_flatten_reg_716);

assign add_ln71_2_fu_937_p2 = (c_0_reg_728 + 4'd2);

assign add_ln71_3_fu_1003_p2 = (select_ln79_fu_961_p3 + 4'd1);

assign add_ln71_4_fu_1031_p2 = (select_ln79_fu_961_p3 + 4'd2);

assign add_ln71_5_fu_1045_p2 = (select_ln79_fu_961_p3 + 4'd3);

assign add_ln71_6_fu_1159_p2 = (zext_ln79_4_reg_1435 + zext_ln71_fu_1155_p1);

assign add_ln71_7_fu_1201_p2 = (zext_ln79_1_reg_1420 + mul_ln71_fu_1195_p2);

assign add_ln71_8_fu_1216_p2 = (zext_ln79_2_reg_1425 + mul_ln71_fu_1195_p2);

assign add_ln71_9_fu_1231_p2 = (zext_ln79_3_reg_1430 + mul_ln71_fu_1195_p2);

assign add_ln71_fu_1186_p2 = (select_ln79_1_reg_1414 + zext_ln63_fu_1143_p1);

assign add_ln79_1_fu_1103_p2 = (zext_ln79_5_fu_1100_p1 + tmp_2_cast_fu_1084_p3);

assign and_ln78_fu_1316_p2 = (or_ln78_fu_1310_p2 & grp_fu_848_p2);

assign and_ln79_fu_997_p2 = (xor_ln79_fu_985_p2 & icmp_ln57_fu_991_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln78_fu_1280_p1 = w_sum_0_reg_772;

assign c_fu_931_p2 = (c_0_reg_728 + 4'd1);

assign ch_1_fu_1251_p2 = (ch2_0_reg_782 + 3'd1);

assign ch_fu_1120_p2 = (ch_0_reg_750 + 3'd1);

assign conv_bias_address0 = zext_ln59_fu_1059_p1;

assign conv_out_address0 = conv_out_addr_reg_1440;

assign conv_out_d0 = ((and_ln78_fu_1316_p2[0:0] === 1'b1) ? w_sum_0_reg_772 : 32'd0);

assign conv_weights_0_0_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_0_1_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_0_2_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_0_3_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_0_4_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_0_5_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_1_0_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_1_1_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_1_2_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_1_3_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_1_4_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_1_5_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_2_0_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_2_1_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_2_2_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_2_3_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_2_4_address0 = zext_ln71_1_fu_1164_p1;

assign conv_weights_2_5_address0 = zext_ln71_1_fu_1164_p1;

assign f_fu_1262_p2 = (5'd1 + select_ln79_4_reg_1386);

assign grp_fu_1331_p0 = grp_fu_1331_p00;

assign grp_fu_1331_p00 = select_ln79_1_fu_1070_p3;

assign grp_fu_1331_p1 = 8'd11;

assign grp_fu_1331_p2 = grp_fu_1331_p20;

assign grp_fu_1331_p20 = select_ln79_5_reg_1393;

assign icmp_ln51_fu_943_p2 = ((indvar_flatten21_reg_693 == 11'd1936) ? 1'b1 : 1'b0);

assign icmp_ln54_fu_955_p2 = ((indvar_flatten_reg_716 == 9'd176) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_991_p2 = ((f_0_reg_739 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_1114_p2 = ((ch_0_reg_750 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_1131_p2 = ((ap_phi_mux_wr_0_phi_fu_765_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_1245_p2 = ((ch2_0_reg_782 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln78_1_fu_1304_p2 = ((trunc_ln78_fu_1294_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln78_fu_1298_p2 = ((tmp_fu_1284_p4 != 8'd255) ? 1'b1 : 1'b0);

assign input_0_address1 = zext_ln71_4_fu_1221_p1;

assign input_1_address1 = zext_ln71_4_fu_1221_p1;

assign input_2_address1 = zext_ln71_4_fu_1221_p1;

assign input_3_address1 = zext_ln71_4_fu_1221_p1;

assign input_4_address1 = zext_ln71_4_fu_1221_p1;

assign input_5_address1 = zext_ln71_4_fu_1221_p1;

assign mul_ln71_fu_1195_p0 = mul_ln71_fu_1195_p00;

assign mul_ln71_fu_1195_p00 = add_ln71_fu_1186_p2;

assign mul_ln71_fu_1195_p2 = (mul_ln71_fu_1195_p0 * $signed('hD));

assign or_ln78_fu_1310_p2 = (icmp_ln78_fu_1298_p2 | icmp_ln78_1_fu_1304_p2);

assign or_ln79_fu_1009_p2 = (icmp_ln54_fu_955_p2 | and_ln79_fu_997_p2);

assign r_fu_1064_p2 = (r_0_reg_704 + 4'd1);

assign select_ln54_fu_1273_p3 = ((icmp_ln54_reg_1380[0:0] === 1'b1) ? 9'd1 : add_ln54_fu_1267_p2);

assign select_ln79_1_fu_1070_p3 = ((icmp_ln54_reg_1380[0:0] === 1'b1) ? r_fu_1064_p2 : r_0_reg_704);

assign select_ln79_2_fu_969_p3 = ((icmp_ln54_fu_955_p2[0:0] === 1'b1) ? 4'd1 : c_fu_931_p2);

assign select_ln79_3_fu_977_p3 = ((icmp_ln54_fu_955_p2[0:0] === 1'b1) ? 4'd2 : add_ln71_2_fu_937_p2);

assign select_ln79_4_fu_1015_p3 = ((or_ln79_fu_1009_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_739);

assign select_ln79_5_fu_1023_p3 = ((and_ln79_fu_997_p2[0:0] === 1'b1) ? add_ln71_3_fu_1003_p2 : select_ln79_fu_961_p3);

assign select_ln79_6_fu_1037_p3 = ((and_ln79_fu_997_p2[0:0] === 1'b1) ? add_ln71_4_fu_1031_p2 : select_ln79_2_fu_969_p3);

assign select_ln79_7_fu_1051_p3 = ((and_ln79_fu_997_p2[0:0] === 1'b1) ? add_ln71_5_fu_1045_p2 : select_ln79_3_fu_977_p3);

assign select_ln79_fu_961_p3 = ((icmp_ln54_fu_955_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_728);

assign tmp_2_cast_fu_1084_p3 = {{grp_fu_1331_p3}, {4'd0}};

assign tmp_7_fu_1147_p3 = {{ap_phi_mux_wr_0_phi_fu_765_p4}, {4'd0}};

assign tmp_fu_1284_p4 = {{bitcast_ln78_fu_1280_p1[30:23]}};

assign trunc_ln78_fu_1294_p1 = bitcast_ln78_fu_1280_p1[22:0];

assign wr_fu_1137_p2 = (ap_phi_mux_wr_0_phi_fu_765_p4 + 2'd1);

assign xor_ln79_fu_985_p2 = (icmp_ln54_fu_955_p2 ^ 1'd1);

assign zext_ln59_fu_1059_p1 = select_ln79_4_fu_1015_p3;

assign zext_ln61_fu_1126_p1 = ch_0_reg_750;

assign zext_ln63_fu_1143_p1 = ap_phi_mux_wr_0_phi_fu_765_p4;

assign zext_ln71_1_fu_1164_p1 = add_ln71_6_fu_1159_p2;

assign zext_ln71_3_fu_1206_p1 = add_ln71_7_fu_1201_p2;

assign zext_ln71_4_fu_1221_p1 = add_ln71_8_fu_1216_p2;

assign zext_ln71_5_fu_1236_p1 = add_ln71_9_reg_1568;

assign zext_ln71_fu_1155_p1 = tmp_7_fu_1147_p3;

assign zext_ln76_fu_1257_p1 = ch2_0_reg_782;

assign zext_ln79_1_fu_1081_p1 = select_ln79_5_reg_1393;

assign zext_ln79_2_fu_1091_p1 = select_ln79_6_reg_1399;

assign zext_ln79_3_fu_1094_p1 = select_ln79_7_reg_1404;

assign zext_ln79_4_fu_1097_p1 = select_ln79_4_reg_1386;

assign zext_ln79_5_fu_1100_p1 = select_ln79_4_reg_1386;

assign zext_ln79_6_fu_1109_p1 = add_ln79_1_fu_1103_p2;

always @ (posedge ap_clk) begin
    zext_ln79_1_reg_1420[7:4] <= 4'b0000;
    zext_ln79_2_reg_1425[7:4] <= 4'b0000;
    zext_ln79_3_reg_1430[7:4] <= 4'b0000;
    zext_ln79_4_reg_1435[6:5] <= 2'b00;
end

endmodule //conv
