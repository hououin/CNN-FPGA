-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_ce0 : OUT STD_LOGIC;
    input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_ce1 : OUT STD_LOGIC;
    input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_3_ce0 : OUT STD_LOGIC;
    input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_3_ce1 : OUT STD_LOGIC;
    input_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_4_ce0 : OUT STD_LOGIC;
    input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_4_ce1 : OUT STD_LOGIC;
    input_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_5_ce0 : OUT STD_LOGIC;
    input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_5_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_5_ce1 : OUT STD_LOGIC;
    input_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=15.636800,HLS_SYN_LAT=172305,HLS_SYN_TPT=none,HLS_SYN_MEM=20,HLS_SYN_DSP=25,HLS_SYN_FF=3337,HLS_SYN_LUT=4661,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_0_0_ce0 : STD_LOGIC;
    signal conv_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_0_1_ce0 : STD_LOGIC;
    signal conv_weights_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_0_2_ce0 : STD_LOGIC;
    signal conv_weights_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_0_3_ce0 : STD_LOGIC;
    signal conv_weights_0_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_0_4_ce0 : STD_LOGIC;
    signal conv_weights_0_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_0_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_0_5_ce0 : STD_LOGIC;
    signal conv_weights_0_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_1_0_ce0 : STD_LOGIC;
    signal conv_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_1_1_ce0 : STD_LOGIC;
    signal conv_weights_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_1_2_ce0 : STD_LOGIC;
    signal conv_weights_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_1_3_ce0 : STD_LOGIC;
    signal conv_weights_1_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_1_4_ce0 : STD_LOGIC;
    signal conv_weights_1_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_1_5_ce0 : STD_LOGIC;
    signal conv_weights_1_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_0_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_2_0_ce0 : STD_LOGIC;
    signal conv_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_1_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_2_1_ce0 : STD_LOGIC;
    signal conv_weights_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_2_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_2_2_ce0 : STD_LOGIC;
    signal conv_weights_2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_3_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_2_3_ce0 : STD_LOGIC;
    signal conv_weights_2_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_4_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_2_4_ce0 : STD_LOGIC;
    signal conv_weights_2_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_5_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_weights_2_5_ce0 : STD_LOGIC;
    signal conv_weights_2_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_0_reg_761 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln63_reg_1459 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sumf_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state11_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state8_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal w_sumf_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_793_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state15_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln63_reg_1459_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_905 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_803_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_916 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state13_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_state17_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal reg_921 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state14_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state18_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal reg_926 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln51_fu_949_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln51_reg_1375 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln54_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_1380 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_943_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_4_fu_1015_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln79_4_reg_1386 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln79_5_fu_1023_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_5_reg_1393 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_6_fu_1037_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_6_reg_1399 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_7_fu_1051_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_7_reg_1404 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_1_fu_1070_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_1_reg_1414 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln79_1_fu_1081_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_1_reg_1420 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_2_fu_1091_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_2_reg_1425 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_3_fu_1094_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_3_reg_1430 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_4_fu_1097_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln79_4_reg_1435 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_out_addr_reg_1440 : STD_LOGIC_VECTOR (10 downto 0);
    signal w_sum_reg_1445 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln60_fu_1114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ch_fu_1120_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln63_fu_1131_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_1137_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1463 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln71_9_fu_1231_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_9_reg_1568 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_1_0_loa_reg_1683 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_0_load_1_reg_1688 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_1_loa_reg_1693 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_1_load_1_reg_1698 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_2_loa_reg_1703 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_2_load_1_reg_1708 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_3_loa_reg_1713 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_3_load_1_reg_1718 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_4_loa_reg_1723 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_4_load_1_reg_1728 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_5_loa_reg_1733 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_5_load_1_reg_1738 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_0_loa_reg_1743 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_1_loa_reg_1748 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_2_loa_reg_1753 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_3_loa_reg_1758 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_4_loa_reg_1763 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_5_loa_reg_1768 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_812_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_1773 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_1_reg_1778 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_2_reg_1783 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_830_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_3_reg_1788 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_836_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_4_reg_1793 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_0_5_reg_1798 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1808 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_1_reg_1813 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_2_reg_1818 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_3_reg_1823 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_4_reg_1828 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_5_reg_1833 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1838 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state9_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_2_2_1_reg_1843 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_2_reg_1848 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_3_reg_1853 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_4_reg_1858 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_5_reg_1863 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state10_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ch_1_fu_1251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_1_reg_1876 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal icmp_ln75_fu_1245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_1262_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1886 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln54_fu_1273_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln54_reg_1891 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal w_sumf_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sumf_ce0 : STD_LOGIC;
    signal w_sumf_we0 : STD_LOGIC;
    signal w_sumf_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sumf_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sumf_ce1 : STD_LOGIC;
    signal w_sumf_we1 : STD_LOGIC;
    signal w_sumf_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_693 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal r_0_reg_704 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_716 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_728 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_739 : STD_LOGIC_VECTOR (4 downto 0);
    signal ch_0_reg_750 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_765_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal w_sum_0_reg_772 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ch2_0_reg_782 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln59_fu_1059_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln79_6_fu_1109_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln61_fu_1126_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_1_fu_1164_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_3_fu_1206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_4_fu_1221_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_5_fu_1236_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln76_fu_1257_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_793_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_793_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal grp_fu_798_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_798_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_803_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_803_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_812_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_812_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_818_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_824_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_830_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_830_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_836_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_836_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_842_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_931_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_2_fu_937_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln57_fu_991_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln79_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln79_fu_961_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln79_fu_997_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln79_fu_1009_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_3_fu_1003_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_4_fu_1031_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_2_fu_969_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_5_fu_1045_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln79_3_fu_977_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_fu_1064_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1331_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln79_5_fu_1100_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_1084_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln79_1_fu_1103_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_7_fu_1147_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln71_fu_1155_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln71_6_fu_1159_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln63_fu_1143_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln71_fu_1186_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln71_fu_1195_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln71_fu_1195_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_7_fu_1201_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_8_fu_1216_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln54_fu_1267_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln78_fu_1280_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln78_fu_1294_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln78_1_fu_1304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln78_fu_1298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln78_fu_1310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_848_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln78_fu_1316_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1331_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1331_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_state12_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_state16_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1331_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1331_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln71_fu_1195_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32tde IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4wdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weightsbkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightscud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsdEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightseOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsfYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsg8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightshbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightskbM IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightslbW IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightspcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightsrcU IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weightssc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_w_sumf IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_0_U : component conv_conv_weightsbkb
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_0_address0,
        ce0 => conv_weights_0_0_ce0,
        q0 => conv_weights_0_0_q0);

    conv_weights_0_1_U : component conv_conv_weightscud
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_1_address0,
        ce0 => conv_weights_0_1_ce0,
        q0 => conv_weights_0_1_q0);

    conv_weights_0_2_U : component conv_conv_weightsdEe
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_2_address0,
        ce0 => conv_weights_0_2_ce0,
        q0 => conv_weights_0_2_q0);

    conv_weights_0_3_U : component conv_conv_weightseOg
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_3_address0,
        ce0 => conv_weights_0_3_ce0,
        q0 => conv_weights_0_3_q0);

    conv_weights_0_4_U : component conv_conv_weightsfYi
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_4_address0,
        ce0 => conv_weights_0_4_ce0,
        q0 => conv_weights_0_4_q0);

    conv_weights_0_5_U : component conv_conv_weightsg8j
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_5_address0,
        ce0 => conv_weights_0_5_ce0,
        q0 => conv_weights_0_5_q0);

    conv_weights_1_0_U : component conv_conv_weightshbi
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_0_address0,
        ce0 => conv_weights_1_0_ce0,
        q0 => conv_weights_1_0_q0);

    conv_weights_1_1_U : component conv_conv_weightsibs
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_1_address0,
        ce0 => conv_weights_1_1_ce0,
        q0 => conv_weights_1_1_q0);

    conv_weights_1_2_U : component conv_conv_weightsjbC
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_2_address0,
        ce0 => conv_weights_1_2_ce0,
        q0 => conv_weights_1_2_q0);

    conv_weights_1_3_U : component conv_conv_weightskbM
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_3_address0,
        ce0 => conv_weights_1_3_ce0,
        q0 => conv_weights_1_3_q0);

    conv_weights_1_4_U : component conv_conv_weightslbW
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_4_address0,
        ce0 => conv_weights_1_4_ce0,
        q0 => conv_weights_1_4_q0);

    conv_weights_1_5_U : component conv_conv_weightsmb6
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_5_address0,
        ce0 => conv_weights_1_5_ce0,
        q0 => conv_weights_1_5_q0);

    conv_weights_2_0_U : component conv_conv_weightsncg
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_0_address0,
        ce0 => conv_weights_2_0_ce0,
        q0 => conv_weights_2_0_q0);

    conv_weights_2_1_U : component conv_conv_weightsocq
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_1_address0,
        ce0 => conv_weights_2_1_ce0,
        q0 => conv_weights_2_1_q0);

    conv_weights_2_2_U : component conv_conv_weightspcA
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_2_address0,
        ce0 => conv_weights_2_2_ce0,
        q0 => conv_weights_2_2_q0);

    conv_weights_2_3_U : component conv_conv_weightsqcK
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_3_address0,
        ce0 => conv_weights_2_3_ce0,
        q0 => conv_weights_2_3_q0);

    conv_weights_2_4_U : component conv_conv_weightsrcU
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_4_address0,
        ce0 => conv_weights_2_4_ce0,
        q0 => conv_weights_2_4_q0);

    conv_weights_2_5_U : component conv_conv_weightssc4
    generic map (
        DataWidth => 32,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_5_address0,
        ce0 => conv_weights_2_5_ce0,
        q0 => conv_weights_2_5_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    w_sumf_U : component conv_w_sumf
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w_sumf_address0,
        ce0 => w_sumf_ce0,
        we0 => w_sumf_we0,
        d0 => w_sumf_d0,
        q0 => w_sumf_q0,
        address1 => w_sumf_address1,
        ce1 => w_sumf_ce1,
        we1 => w_sumf_we1,
        d1 => w_sumf_d1,
        q1 => w_sumf_q1);

    conv_fadd_32ns_32tde_U1 : component conv_fadd_32ns_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_793_p0,
        din1 => grp_fu_793_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_793_p2);

    conv_fadd_32ns_32tde_U2 : component conv_fadd_32ns_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_798_p0,
        din1 => grp_fu_798_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_798_p2);

    conv_fadd_32ns_32tde_U3 : component conv_fadd_32ns_32tde
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_803_p0,
        din1 => grp_fu_803_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_803_p2);

    conv_fmul_32ns_32udo_U4 : component conv_fmul_32ns_32udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_812_p0,
        din1 => grp_fu_812_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_812_p2);

    conv_fmul_32ns_32udo_U5 : component conv_fmul_32ns_32udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_818_p0,
        din1 => grp_fu_818_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_818_p2);

    conv_fmul_32ns_32udo_U6 : component conv_fmul_32ns_32udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_824_p0,
        din1 => grp_fu_824_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_824_p2);

    conv_fmul_32ns_32udo_U7 : component conv_fmul_32ns_32udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_830_p0,
        din1 => grp_fu_830_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_830_p2);

    conv_fmul_32ns_32udo_U8 : component conv_fmul_32ns_32udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_836_p0,
        din1 => grp_fu_836_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_836_p2);

    conv_fmul_32ns_32udo_U9 : component conv_fmul_32ns_32udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_842_p0,
        din1 => grp_fu_842_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_842_p2);

    conv_fcmp_32ns_32vdy_U10 : component conv_fcmp_32ns_32vdy
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_sum_0_reg_772,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_848_p2);

    conv_mac_muladd_4wdI_U11 : component conv_mac_muladd_4wdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1331_p0,
        din1 => grp_fu_1331_p1,
        din2 => grp_fu_1331_p2,
        dout => grp_fu_1331_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln60_fu_1114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln60_fu_1114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_728_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                c_0_reg_728 <= select_ln79_5_reg_1393;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_728 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch2_0_reg_782_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                ch2_0_reg_782 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                ch2_0_reg_782 <= ch_1_reg_1876;
            end if; 
        end if;
    end process;

    ch_0_reg_750_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_1114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ch_0_reg_750 <= ch_fu_1120_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                ch_0_reg_750 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_739_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                f_0_reg_739 <= f_reg_1886;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_739 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten21_reg_693 <= add_ln51_reg_1375;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_693 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_716_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                indvar_flatten_reg_716 <= select_ln54_reg_1891;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_716 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    r_0_reg_704_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
                r_0_reg_704 <= select_ln79_1_reg_1414;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_704 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_772_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
                w_sum_0_reg_772 <= w_sum_reg_1445;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                w_sum_0_reg_772 <= grp_fu_793_p2;
            end if; 
        end if;
    end process;

    wr_0_reg_761_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln60_fu_1114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_761 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                wr_0_reg_761 <= wr_reg_1463;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln51_reg_1375 <= add_ln51_fu_949_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_fu_1131_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln71_9_reg_1568 <= add_ln71_9_fu_1231_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                ch_1_reg_1876 <= ch_1_fu_1251_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                conv_out_addr_reg_1440 <= zext_ln79_6_fu_1109_p1(11 - 1 downto 0);
                select_ln79_1_reg_1414 <= select_ln79_1_fu_1070_p3;
                w_sum_reg_1445 <= conv_bias_q0;
                    zext_ln79_1_reg_1420(3 downto 0) <= zext_ln79_1_fu_1081_p1(3 downto 0);
                    zext_ln79_2_reg_1425(3 downto 0) <= zext_ln79_2_fu_1091_p1(3 downto 0);
                    zext_ln79_3_reg_1430(3 downto 0) <= zext_ln79_3_fu_1094_p1(3 downto 0);
                    zext_ln79_4_reg_1435(4 downto 0) <= zext_ln79_4_fu_1097_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_weights_1_0_loa_reg_1683 <= conv_weights_1_0_q0;
                conv_weights_1_1_loa_reg_1693 <= conv_weights_1_1_q0;
                conv_weights_1_2_loa_reg_1703 <= conv_weights_1_2_q0;
                conv_weights_1_3_loa_reg_1713 <= conv_weights_1_3_q0;
                conv_weights_1_4_loa_reg_1723 <= conv_weights_1_4_q0;
                conv_weights_1_5_loa_reg_1733 <= conv_weights_1_5_q0;
                conv_weights_2_0_loa_reg_1743 <= conv_weights_2_0_q0;
                conv_weights_2_1_loa_reg_1748 <= conv_weights_2_1_q0;
                conv_weights_2_2_loa_reg_1753 <= conv_weights_2_2_q0;
                conv_weights_2_3_loa_reg_1758 <= conv_weights_2_3_q0;
                conv_weights_2_4_loa_reg_1763 <= conv_weights_2_4_q0;
                conv_weights_2_5_loa_reg_1768 <= conv_weights_2_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_1245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                f_reg_1886 <= f_fu_1262_p2;
                select_ln54_reg_1891 <= select_ln54_fu_1273_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln51_fu_943_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln54_reg_1380 <= icmp_ln54_fu_955_p2;
                select_ln79_4_reg_1386 <= select_ln79_4_fu_1015_p3;
                select_ln79_5_reg_1393 <= select_ln79_5_fu_1023_p3;
                select_ln79_6_reg_1399 <= select_ln79_6_fu_1037_p3;
                select_ln79_7_reg_1404 <= select_ln79_7_fu_1051_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln63_reg_1459 <= icmp_ln63_fu_1131_p2;
                icmp_ln63_reg_1459_pp0_iter1_reg <= icmp_ln63_reg_1459;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                input_0_load_1_reg_1688 <= input_0_q1;
                input_1_load_1_reg_1698 <= input_1_q1;
                input_2_load_1_reg_1708 <= input_2_q1;
                input_3_load_1_reg_1718 <= input_3_q1;
                input_4_load_1_reg_1728 <= input_4_q1;
                input_5_load_1_reg_1738 <= input_5_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_854 <= input_0_q0;
                reg_859 <= input_1_q0;
                reg_864 <= input_2_q0;
                reg_869 <= input_3_q0;
                reg_874 <= input_4_q0;
                reg_879 <= input_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_884 <= w_sumf_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln63_reg_1459_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_898 <= grp_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln63_reg_1459_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_905 <= grp_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_911 <= grp_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_916 <= grp_fu_793_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                reg_921 <= grp_fu_793_p2;
                reg_926 <= grp_fu_798_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_2_0_1_reg_1778 <= grp_fu_818_p2;
                tmp_2_0_2_reg_1783 <= grp_fu_824_p2;
                tmp_2_0_3_reg_1788 <= grp_fu_830_p2;
                tmp_2_0_4_reg_1793 <= grp_fu_836_p2;
                tmp_2_0_5_reg_1798 <= grp_fu_842_p2;
                tmp_s_reg_1773 <= grp_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_2_1_1_reg_1813 <= grp_fu_818_p2;
                tmp_2_1_2_reg_1818 <= grp_fu_824_p2;
                tmp_2_1_3_reg_1823 <= grp_fu_830_p2;
                tmp_2_1_4_reg_1828 <= grp_fu_836_p2;
                tmp_2_1_5_reg_1833 <= grp_fu_842_p2;
                tmp_2_1_reg_1808 <= grp_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_2_2_1_reg_1843 <= grp_fu_818_p2;
                tmp_2_2_2_reg_1848 <= grp_fu_824_p2;
                tmp_2_2_3_reg_1853 <= grp_fu_830_p2;
                tmp_2_2_4_reg_1858 <= grp_fu_836_p2;
                tmp_2_2_5_reg_1863 <= grp_fu_842_p2;
                tmp_2_2_reg_1838 <= grp_fu_812_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                wr_reg_1463 <= wr_fu_1137_p2;
            end if;
        end if;
    end process;
    zext_ln79_1_reg_1420(7 downto 4) <= "0000";
    zext_ln79_2_reg_1425(7 downto 4) <= "0000";
    zext_ln79_3_reg_1430(7 downto 4) <= "0000";
    zext_ln79_4_reg_1435(6 downto 5) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state2, icmp_ln51_fu_943_p2, icmp_ln60_fu_1114_p2, ap_CS_fsm_state4, icmp_ln63_fu_1131_p2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_state25, icmp_ln75_fu_1245_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln51_fu_943_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln60_fu_1114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln63_fu_1131_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln63_fu_1131_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((icmp_ln75_fu_1245_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln51_fu_949_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_693) + unsigned(ap_const_lv11_1));
    add_ln54_fu_1267_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten_reg_716));
    add_ln71_2_fu_937_p2 <= std_logic_vector(unsigned(c_0_reg_728) + unsigned(ap_const_lv4_2));
    add_ln71_3_fu_1003_p2 <= std_logic_vector(unsigned(select_ln79_fu_961_p3) + unsigned(ap_const_lv4_1));
    add_ln71_4_fu_1031_p2 <= std_logic_vector(unsigned(select_ln79_fu_961_p3) + unsigned(ap_const_lv4_2));
    add_ln71_5_fu_1045_p2 <= std_logic_vector(unsigned(select_ln79_fu_961_p3) + unsigned(ap_const_lv4_3));
    add_ln71_6_fu_1159_p2 <= std_logic_vector(unsigned(zext_ln79_4_reg_1435) + unsigned(zext_ln71_fu_1155_p1));
    add_ln71_7_fu_1201_p2 <= std_logic_vector(unsigned(zext_ln79_1_reg_1420) + unsigned(mul_ln71_fu_1195_p2));
    add_ln71_8_fu_1216_p2 <= std_logic_vector(unsigned(zext_ln79_2_reg_1425) + unsigned(mul_ln71_fu_1195_p2));
    add_ln71_9_fu_1231_p2 <= std_logic_vector(unsigned(zext_ln79_3_reg_1430) + unsigned(mul_ln71_fu_1195_p2));
    add_ln71_fu_1186_p2 <= std_logic_vector(unsigned(select_ln79_1_reg_1414) + unsigned(zext_ln63_fu_1143_p1));
    add_ln79_1_fu_1103_p2 <= std_logic_vector(unsigned(zext_ln79_5_fu_1100_p1) + unsigned(tmp_2_cast_fu_1084_p3));
    and_ln78_fu_1316_p2 <= (or_ln78_fu_1310_p2 and grp_fu_848_p2);
    and_ln79_fu_997_p2 <= (xor_ln79_fu_985_p2 and icmp_ln57_fu_991_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state24 <= ap_CS_fsm(18);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(20);
    ap_CS_fsm_state29 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(24);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln63_fu_1131_p2)
    begin
        if ((icmp_ln63_fu_1131_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln51_fu_943_p2)
    begin
        if (((icmp_ln51_fu_943_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_765_p4_assign_proc : process(wr_0_reg_761, icmp_ln63_reg_1459, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, wr_reg_1463, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_765_p4 <= wr_reg_1463;
        else 
            ap_phi_mux_wr_0_phi_fu_765_p4 <= wr_0_reg_761;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln51_fu_943_p2)
    begin
        if (((icmp_ln51_fu_943_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln78_fu_1280_p1 <= w_sum_0_reg_772;
    c_fu_931_p2 <= std_logic_vector(unsigned(c_0_reg_728) + unsigned(ap_const_lv4_1));
    ch_1_fu_1251_p2 <= std_logic_vector(unsigned(ch2_0_reg_782) + unsigned(ap_const_lv3_1));
    ch_fu_1120_p2 <= std_logic_vector(unsigned(ch_0_reg_750) + unsigned(ap_const_lv3_1));
    conv_bias_address0 <= zext_ln59_fu_1059_p1(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1440;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_0_reg_772 when (and_ln78_fu_1316_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_0_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_1_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_2_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_3_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_0_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_4_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_0_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_5_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_0_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_0_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_1_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_2_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_3_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_1_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_4_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_1_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_5_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_1_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_0_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_1_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_2_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_3_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_2_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_4_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_2_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_5_address0 <= zext_ln71_1_fu_1164_p1(6 - 1 downto 0);

    conv_weights_2_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_1262_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln79_4_reg_1386));
    grp_fu_1331_p0 <= grp_fu_1331_p00(4 - 1 downto 0);
    grp_fu_1331_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_1_fu_1070_p3),8));
    grp_fu_1331_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_1331_p2 <= grp_fu_1331_p20(4 - 1 downto 0);
    grp_fu_1331_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_5_reg_1393),8));

    grp_fu_793_p0_assign_proc : process(ap_enable_reg_pp0_iter0, w_sumf_q1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_state26, ap_CS_fsm_pp0_stage3, reg_898, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_916, reg_921, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0, w_sum_0_reg_772, ap_block_pp0_stage5, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_block_pp0_stage13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_793_p0 <= w_sum_0_reg_772;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_793_p0 <= reg_921;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_793_p0 <= reg_916;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_793_p0 <= reg_898;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_793_p0 <= w_sumf_q1;
        else 
            grp_fu_793_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_793_p1_assign_proc : process(ap_enable_reg_pp0_iter0, w_sumf_q1, ap_CS_fsm_pp0_stage6, ap_CS_fsm_state26, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage13, tmp_s_reg_1773, tmp_2_0_1_reg_1778, tmp_2_0_3_reg_1788, tmp_2_1_reg_1808, tmp_2_1_1_reg_1813, tmp_2_1_3_reg_1823, tmp_2_2_reg_1838, tmp_2_2_1_reg_1843, tmp_2_2_3_reg_1853, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0, ap_block_pp0_stage5, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage9, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_block_pp0_stage13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_793_p1 <= w_sumf_q1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_793_p1 <= tmp_2_2_1_reg_1843;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_2_reg_1838;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_2_3_reg_1853;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_1_1_reg_1813;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_1_reg_1808;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_1_3_reg_1823;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_0_1_reg_1778;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_s_reg_1773;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_793_p1 <= tmp_2_0_3_reg_1788;
        else 
            grp_fu_793_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_798_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, w_sumf_q0, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_905, reg_926, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_798_p0 <= reg_926;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_798_p0 <= reg_905;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_798_p0 <= w_sumf_q0;
        else 
            grp_fu_798_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_798_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_2_0_2_reg_1783, tmp_2_0_4_reg_1793, tmp_2_1_2_reg_1818, tmp_2_1_4_reg_1828, tmp_2_2_2_reg_1848, tmp_2_2_4_reg_1858, ap_block_pp0_stage0, ap_block_pp0_stage3, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_798_p1 <= tmp_2_2_2_reg_1848;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_798_p1 <= tmp_2_2_4_reg_1858;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_798_p1 <= tmp_2_1_2_reg_1818;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_798_p1 <= tmp_2_1_4_reg_1828;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_798_p1 <= tmp_2_0_2_reg_1783;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_798_p1 <= tmp_2_0_4_reg_1793;
        else 
            grp_fu_798_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_803_p0_assign_proc : process(ap_enable_reg_pp0_iter0, reg_884, ap_CS_fsm_pp0_stage3, reg_911, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_803_p0 <= reg_911;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_803_p0 <= reg_884;
        else 
            grp_fu_803_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_803_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, tmp_2_0_5_reg_1798, tmp_2_1_5_reg_1833, tmp_2_2_5_reg_1863, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
                grp_fu_803_p1 <= tmp_2_2_5_reg_1863;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                grp_fu_803_p1 <= tmp_2_1_5_reg_1833;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_803_p1 <= tmp_2_0_5_reg_1798;
            else 
                grp_fu_803_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_803_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_812_p0_assign_proc : process(conv_weights_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_weights_1_0_loa_reg_1683, conv_weights_2_0_loa_reg_1743, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_812_p0 <= conv_weights_2_0_loa_reg_1743;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_812_p0 <= conv_weights_1_0_loa_reg_1683;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_812_p0 <= conv_weights_0_0_q0;
            else 
                grp_fu_812_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_812_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_812_p1_assign_proc : process(input_0_q0, reg_854, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, input_0_load_1_reg_1688, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_812_p1 <= reg_854;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_812_p1 <= input_0_load_1_reg_1688;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_812_p1 <= input_0_q0;
            else 
                grp_fu_812_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_812_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_818_p0_assign_proc : process(conv_weights_0_1_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_weights_1_1_loa_reg_1693, conv_weights_2_1_loa_reg_1748, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_818_p0 <= conv_weights_2_1_loa_reg_1748;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_818_p0 <= conv_weights_1_1_loa_reg_1693;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_818_p0 <= conv_weights_0_1_q0;
            else 
                grp_fu_818_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_818_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_818_p1_assign_proc : process(input_1_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_859, ap_CS_fsm_pp0_stage3, input_1_load_1_reg_1698, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_818_p1 <= reg_859;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_818_p1 <= input_1_load_1_reg_1698;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_818_p1 <= input_1_q0;
            else 
                grp_fu_818_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_818_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_824_p0_assign_proc : process(conv_weights_0_2_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_weights_1_2_loa_reg_1703, conv_weights_2_2_loa_reg_1753, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_824_p0 <= conv_weights_2_2_loa_reg_1753;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_824_p0 <= conv_weights_1_2_loa_reg_1703;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_824_p0 <= conv_weights_0_2_q0;
            else 
                grp_fu_824_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_824_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_824_p1_assign_proc : process(input_2_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_864, ap_CS_fsm_pp0_stage3, input_2_load_1_reg_1708, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_824_p1 <= reg_864;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_824_p1 <= input_2_load_1_reg_1708;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_824_p1 <= input_2_q0;
            else 
                grp_fu_824_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_824_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_830_p0_assign_proc : process(conv_weights_0_3_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_weights_1_3_loa_reg_1713, conv_weights_2_3_loa_reg_1758, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_830_p0 <= conv_weights_2_3_loa_reg_1758;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_830_p0 <= conv_weights_1_3_loa_reg_1713;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_830_p0 <= conv_weights_0_3_q0;
            else 
                grp_fu_830_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_830_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_830_p1_assign_proc : process(input_3_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_869, ap_CS_fsm_pp0_stage3, input_3_load_1_reg_1718, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_830_p1 <= reg_869;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_830_p1 <= input_3_load_1_reg_1718;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_830_p1 <= input_3_q0;
            else 
                grp_fu_830_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_830_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_836_p0_assign_proc : process(conv_weights_0_4_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_weights_1_4_loa_reg_1723, conv_weights_2_4_loa_reg_1763, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_836_p0 <= conv_weights_2_4_loa_reg_1763;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_836_p0 <= conv_weights_1_4_loa_reg_1723;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_836_p0 <= conv_weights_0_4_q0;
            else 
                grp_fu_836_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_836_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_836_p1_assign_proc : process(input_4_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_874, ap_CS_fsm_pp0_stage3, input_4_load_1_reg_1728, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_836_p1 <= reg_874;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_836_p1 <= input_4_load_1_reg_1728;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_836_p1 <= input_4_q0;
            else 
                grp_fu_836_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_836_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_842_p0_assign_proc : process(conv_weights_0_5_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_weights_1_5_loa_reg_1733, conv_weights_2_5_loa_reg_1768, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_842_p0 <= conv_weights_2_5_loa_reg_1768;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_842_p0 <= conv_weights_1_5_loa_reg_1733;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_842_p0 <= conv_weights_0_5_q0;
            else 
                grp_fu_842_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_842_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_842_p1_assign_proc : process(input_5_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_879, ap_CS_fsm_pp0_stage3, input_5_load_1_reg_1738, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_842_p1 <= reg_879;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_842_p1 <= input_5_load_1_reg_1738;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_842_p1 <= input_5_q0;
            else 
                grp_fu_842_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_842_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln51_fu_943_p2 <= "1" when (indvar_flatten21_reg_693 = ap_const_lv11_790) else "0";
    icmp_ln54_fu_955_p2 <= "1" when (indvar_flatten_reg_716 = ap_const_lv9_B0) else "0";
    icmp_ln57_fu_991_p2 <= "1" when (f_0_reg_739 = ap_const_lv5_10) else "0";
    icmp_ln60_fu_1114_p2 <= "1" when (ch_0_reg_750 = ap_const_lv3_6) else "0";
    icmp_ln63_fu_1131_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_765_p4 = ap_const_lv2_3) else "0";
    icmp_ln75_fu_1245_p2 <= "1" when (ch2_0_reg_782 = ap_const_lv3_6) else "0";
    icmp_ln78_1_fu_1304_p2 <= "1" when (trunc_ln78_fu_1294_p1 = ap_const_lv23_0) else "0";
    icmp_ln78_fu_1298_p2 <= "0" when (tmp_fu_1284_p4 = ap_const_lv8_FF) else "1";

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln71_3_fu_1206_p1, zext_ln71_5_fu_1236_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_0_address0 <= zext_ln71_5_fu_1236_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_0_address0 <= zext_ln71_3_fu_1206_p1(8 - 1 downto 0);
            else 
                input_0_address0 <= "XXXXXXXX";
            end if;
        else 
            input_0_address0 <= "XXXXXXXX";
        end if; 
    end process;

    input_0_address1 <= zext_ln71_4_fu_1221_p1(8 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln71_3_fu_1206_p1, zext_ln71_5_fu_1236_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_1_address0 <= zext_ln71_5_fu_1236_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_1_address0 <= zext_ln71_3_fu_1206_p1(8 - 1 downto 0);
            else 
                input_1_address0 <= "XXXXXXXX";
            end if;
        else 
            input_1_address0 <= "XXXXXXXX";
        end if; 
    end process;

    input_1_address1 <= zext_ln71_4_fu_1221_p1(8 - 1 downto 0);

    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln71_3_fu_1206_p1, zext_ln71_5_fu_1236_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_2_address0 <= zext_ln71_5_fu_1236_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_2_address0 <= zext_ln71_3_fu_1206_p1(8 - 1 downto 0);
            else 
                input_2_address0 <= "XXXXXXXX";
            end if;
        else 
            input_2_address0 <= "XXXXXXXX";
        end if; 
    end process;

    input_2_address1 <= zext_ln71_4_fu_1221_p1(8 - 1 downto 0);

    input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_2_ce0 <= ap_const_logic_1;
        else 
            input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_2_ce1 <= ap_const_logic_1;
        else 
            input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln71_3_fu_1206_p1, zext_ln71_5_fu_1236_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_3_address0 <= zext_ln71_5_fu_1236_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_3_address0 <= zext_ln71_3_fu_1206_p1(8 - 1 downto 0);
            else 
                input_3_address0 <= "XXXXXXXX";
            end if;
        else 
            input_3_address0 <= "XXXXXXXX";
        end if; 
    end process;

    input_3_address1 <= zext_ln71_4_fu_1221_p1(8 - 1 downto 0);

    input_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_3_ce0 <= ap_const_logic_1;
        else 
            input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_3_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_3_ce1 <= ap_const_logic_1;
        else 
            input_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln71_3_fu_1206_p1, zext_ln71_5_fu_1236_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_4_address0 <= zext_ln71_5_fu_1236_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_4_address0 <= zext_ln71_3_fu_1206_p1(8 - 1 downto 0);
            else 
                input_4_address0 <= "XXXXXXXX";
            end if;
        else 
            input_4_address0 <= "XXXXXXXX";
        end if; 
    end process;

    input_4_address1 <= zext_ln71_4_fu_1221_p1(8 - 1 downto 0);

    input_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_4_ce0 <= ap_const_logic_1;
        else 
            input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_4_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_4_ce1 <= ap_const_logic_1;
        else 
            input_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln71_3_fu_1206_p1, zext_ln71_5_fu_1236_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_5_address0 <= zext_ln71_5_fu_1236_p1(8 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_5_address0 <= zext_ln71_3_fu_1206_p1(8 - 1 downto 0);
            else 
                input_5_address0 <= "XXXXXXXX";
            end if;
        else 
            input_5_address0 <= "XXXXXXXX";
        end if; 
    end process;

    input_5_address1 <= zext_ln71_4_fu_1221_p1(8 - 1 downto 0);

    input_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            input_5_ce0 <= ap_const_logic_1;
        else 
            input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_5_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            input_5_ce1 <= ap_const_logic_1;
        else 
            input_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln71_fu_1195_p0 <= mul_ln71_fu_1195_p00(4 - 1 downto 0);
    mul_ln71_fu_1195_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_fu_1186_p2),8));
    mul_ln71_fu_1195_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln71_fu_1195_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln78_fu_1310_p2 <= (icmp_ln78_fu_1298_p2 or icmp_ln78_1_fu_1304_p2);
    or_ln79_fu_1009_p2 <= (icmp_ln54_fu_955_p2 or and_ln79_fu_997_p2);
    r_fu_1064_p2 <= std_logic_vector(unsigned(r_0_reg_704) + unsigned(ap_const_lv4_1));
    select_ln54_fu_1273_p3 <= 
        ap_const_lv9_1 when (icmp_ln54_reg_1380(0) = '1') else 
        add_ln54_fu_1267_p2;
    select_ln79_1_fu_1070_p3 <= 
        r_fu_1064_p2 when (icmp_ln54_reg_1380(0) = '1') else 
        r_0_reg_704;
    select_ln79_2_fu_969_p3 <= 
        ap_const_lv4_1 when (icmp_ln54_fu_955_p2(0) = '1') else 
        c_fu_931_p2;
    select_ln79_3_fu_977_p3 <= 
        ap_const_lv4_2 when (icmp_ln54_fu_955_p2(0) = '1') else 
        add_ln71_2_fu_937_p2;
    select_ln79_4_fu_1015_p3 <= 
        ap_const_lv5_0 when (or_ln79_fu_1009_p2(0) = '1') else 
        f_0_reg_739;
    select_ln79_5_fu_1023_p3 <= 
        add_ln71_3_fu_1003_p2 when (and_ln79_fu_997_p2(0) = '1') else 
        select_ln79_fu_961_p3;
    select_ln79_6_fu_1037_p3 <= 
        add_ln71_4_fu_1031_p2 when (and_ln79_fu_997_p2(0) = '1') else 
        select_ln79_2_fu_969_p3;
    select_ln79_7_fu_1051_p3 <= 
        add_ln71_5_fu_1045_p2 when (and_ln79_fu_997_p2(0) = '1') else 
        select_ln79_3_fu_977_p3;
    select_ln79_fu_961_p3 <= 
        ap_const_lv4_0 when (icmp_ln54_fu_955_p2(0) = '1') else 
        c_0_reg_728;
    tmp_2_cast_fu_1084_p3 <= (grp_fu_1331_p3 & ap_const_lv4_0);
    tmp_7_fu_1147_p3 <= (ap_phi_mux_wr_0_phi_fu_765_p4 & ap_const_lv4_0);
    tmp_fu_1284_p4 <= bitcast_ln78_fu_1280_p1(30 downto 23);
    trunc_ln78_fu_1294_p1 <= bitcast_ln78_fu_1280_p1(23 - 1 downto 0);

    w_sumf_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage0, zext_ln61_fu_1126_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            w_sumf_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_sumf_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            w_sumf_address0 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            w_sumf_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_sumf_address0 <= zext_ln61_fu_1126_p1(3 - 1 downto 0);
        else 
            w_sumf_address0 <= "XXX";
        end if; 
    end process;


    w_sumf_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_state25, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln76_fu_1257_p1, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            w_sumf_address1 <= zext_ln76_fu_1257_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_sumf_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            w_sumf_address1 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            w_sumf_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w_sumf_address1 <= ap_const_lv64_5(3 - 1 downto 0);
        else 
            w_sumf_address1 <= "XXX";
        end if; 
    end process;


    w_sumf_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w_sumf_ce0 <= ap_const_logic_1;
        else 
            w_sumf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w_sumf_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_state25)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w_sumf_ce1 <= ap_const_logic_1;
        else 
            w_sumf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    w_sumf_d0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage3, grp_fu_793_p2, reg_898, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_798_p2, reg_905, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            w_sumf_d0 <= reg_905;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            w_sumf_d0 <= grp_fu_793_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            w_sumf_d0 <= reg_898;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            w_sumf_d0 <= grp_fu_798_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w_sumf_d0 <= ap_const_lv32_0;
        else 
            w_sumf_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_sumf_d1_assign_proc : process(ap_CS_fsm_pp0_stage3, reg_898, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_803_p2, ap_block_pp0_stage0, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                w_sumf_d1 <= reg_898;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                w_sumf_d1 <= grp_fu_803_p2;
            else 
                w_sumf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            w_sumf_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    w_sumf_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln63_reg_1459, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln63_reg_1459_pp0_iter1_reg, icmp_ln60_fu_1114_p2, ap_CS_fsm_state4, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if ((((icmp_ln60_fu_1114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln63_reg_1459_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln63_reg_1459_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((icmp_ln63_reg_1459_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            w_sumf_we0 <= ap_const_logic_1;
        else 
            w_sumf_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w_sumf_we1_assign_proc : process(icmp_ln63_reg_1459, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, icmp_ln63_reg_1459_pp0_iter1_reg)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln63_reg_1459_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln63_reg_1459 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            w_sumf_we1 <= ap_const_logic_1;
        else 
            w_sumf_we1 <= ap_const_logic_0;
        end if; 
    end process;

    wr_fu_1137_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_765_p4) + unsigned(ap_const_lv2_1));
    xor_ln79_fu_985_p2 <= (icmp_ln54_fu_955_p2 xor ap_const_lv1_1);
    zext_ln59_fu_1059_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_4_fu_1015_p3),64));
    zext_ln61_fu_1126_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_750),64));
    zext_ln63_fu_1143_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wr_0_phi_fu_765_p4),4));
    zext_ln71_1_fu_1164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_6_fu_1159_p2),64));
    zext_ln71_3_fu_1206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_7_fu_1201_p2),64));
    zext_ln71_4_fu_1221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_8_fu_1216_p2),64));
    zext_ln71_5_fu_1236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_9_reg_1568),64));
    zext_ln71_fu_1155_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_1147_p3),7));
    zext_ln76_fu_1257_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch2_0_reg_782),64));
    zext_ln79_1_fu_1081_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_5_reg_1393),8));
    zext_ln79_2_fu_1091_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_6_reg_1399),8));
    zext_ln79_3_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_7_reg_1404),8));
    zext_ln79_4_fu_1097_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_4_reg_1386),7));
    zext_ln79_5_fu_1100_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln79_4_reg_1386),12));
    zext_ln79_6_fu_1109_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln79_1_fu_1103_p2),64));
end behav;
