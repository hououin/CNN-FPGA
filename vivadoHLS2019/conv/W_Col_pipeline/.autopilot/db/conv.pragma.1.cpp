# 1 "conv/conv.cpp"
# 1 "conv/conv.cpp" 1
# 1 "<built-in>" 1
# 1 "<built-in>" 3
# 152 "<built-in>" 3
# 1 "<command line>" 1







# 1 "C:/Xilinx2019/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h" 1
# 157 "C:/Xilinx2019/Vivado/2019.1/common/technology/autopilot\\etc/autopilot_ssdm_op.h"
extern "C" {






    void _ssdm_op_IfRead(...) __attribute__ ((nothrow));
    void _ssdm_op_IfWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_op_IfCanWrite(...) __attribute__ ((nothrow));


    void _ssdm_StreamRead(...) __attribute__ ((nothrow));
    void _ssdm_StreamWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamNbWrite(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanRead(...) __attribute__ ((nothrow));
    unsigned int __attribute__ ((bitwidth(1))) _ssdm_StreamCanWrite(...) __attribute__ ((nothrow));
    unsigned _ssdm_StreamSize(...) __attribute__ ((nothrow));




    void _ssdm_op_MemShiftRead(...) __attribute__ ((nothrow));

    void _ssdm_op_Wait(...) __attribute__ ((nothrow));
    void _ssdm_op_Poll(...) __attribute__ ((nothrow));

    void _ssdm_op_Return(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecSynModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecTopModule(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDecl(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProcessDef(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPort(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecConnection(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecChannel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecSensitive(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecModuleInst(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPortMap(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecReset(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPlatform(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecClockDomain(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecPowerDomain(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecRegionBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecRegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopName(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecLoopTripCount(...) __attribute__ ((nothrow));

    int _ssdm_op_SpecStateBegin(...) __attribute__ ((nothrow));
    int _ssdm_op_SpecStateEnd(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecInterface(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipeline(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecDataflowPipeline(...) __attribute__ ((nothrow));


    void _ssdm_op_SpecLatency(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecParallel(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecProtocol(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecOccurrence(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecResource(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecResourceLimit(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecCHCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecFUCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIFCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecIPCore(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecKeepValue(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecMemCore(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecExt(...) __attribute__ ((nothrow));




    void _ssdm_SpecArrayDimSize(...) __attribute__ ((nothrow));

    void _ssdm_RegionBegin(...) __attribute__ ((nothrow));
    void _ssdm_RegionEnd(...) __attribute__ ((nothrow));

    void _ssdm_Unroll(...) __attribute__ ((nothrow));
    void _ssdm_UnrollRegion(...) __attribute__ ((nothrow));

    void _ssdm_InlineAll(...) __attribute__ ((nothrow));
    void _ssdm_InlineLoop(...) __attribute__ ((nothrow));
    void _ssdm_Inline(...) __attribute__ ((nothrow));
    void _ssdm_InlineSelf(...) __attribute__ ((nothrow));
    void _ssdm_InlineRegion(...) __attribute__ ((nothrow));

    void _ssdm_SpecArrayMap(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayPartition(...) __attribute__ ((nothrow));
    void _ssdm_SpecArrayReshape(...) __attribute__ ((nothrow));

    void _ssdm_SpecStream(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecStable(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecStableContent(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecPipoDepth(...) __attribute__ ((nothrow));

    void _ssdm_SpecExpr(...) __attribute__ ((nothrow));
    void _ssdm_SpecExprBalance(...) __attribute__ ((nothrow));

    void _ssdm_SpecDependence(...) __attribute__ ((nothrow));

    void _ssdm_SpecLoopMerge(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopFlatten(...) __attribute__ ((nothrow));
    void _ssdm_SpecLoopRewind(...) __attribute__ ((nothrow));

    void _ssdm_SpecFuncInstantiation(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncBuffer(...) __attribute__ ((nothrow));
    void _ssdm_SpecFuncExtract(...) __attribute__ ((nothrow));
    void _ssdm_SpecConstant(...) __attribute__ ((nothrow));

    void _ssdm_DataPack(...) __attribute__ ((nothrow));
    void _ssdm_SpecDataPack(...) __attribute__ ((nothrow));

    void _ssdm_op_SpecBitsMap(...) __attribute__ ((nothrow));
    void _ssdm_op_SpecLicense(...) __attribute__ ((nothrow));

    void __xilinx_ip_top(...) __attribute__ ((nothrow));


}
# 9 "<command line>" 2
# 1 "<built-in>" 2
# 1 "conv/conv.cpp" 2
# 1 "conv/conv.h" 1

# 1 "conv/parameters.h" 1
# 3 "conv/conv.h" 2


void conv
(
  float input[(26 / 2)][(26 / 2)][6],
  float conv_out[11][11][16]
);
# 2 "conv/conv.cpp" 2

# 1 "conv/conv_weights.h" 1



float conv_weights [3][3][6][16] = {
 {
  {
   {0.04650447, -0.3321381, 0.12605862, -0.02347998, -0.28319246, 0.21562819, -0.22156046, 0.050781492, -0.101310275, 0.0425307, -0.27811202, -0.066875786, -0.15652528, -0.03964, 0.30650586, 0.21268},
   {-0.038114812, -0.09315984, 0.20073508, -0.10995624, -0.008810944, 0.17029804, -0.08959614, -0.016747138, 0.103707775, 0.13331746, -0.45856896, -0.2245239, 0.24441779, -0.16514459, -0.011883339, -0.021771017},
   {0.023614729, -0.61487037, 0.13895708, -0.17183672, 0.15878324, -0.08362789, -0.21761866, -0.0655597, 0.11491801, 0.41030762, -0.5881246, -0.10381559, 0.27033278, 0.012624404, -0.039232284, 0.16933553},
   {-0.08791631, -0.4078754, -0.030766778, -0.15201688, 0.111604065, -0.028940924, -0.2343956, 0.1000509, -0.124557406, 0.30692527, -0.4456822, -0.24427709, -0.0034228489, 0.01899369, 0.13183302, -0.21637513},
   {-0.12758403, 0.04706466, 0.055278506, -0.037457205, -0.0759857, 0.0352415, -0.12125111, 0.20365803, 0.24489436, -0.18452984, -0.050506935, -0.11074722, 0.37768602, 0.22806546, -0.18651769, -0.12017058},
   {0.2819025, 0.046062473, -0.07002804, 0.026876433, -0.050059784, 0.13882342, 0.542661, -0.1789157, -0.4503408, -0.17719176, -0.1564202, 0.36547458, -0.27444494, -0.2579627, -0.2091276, -0.27084976}
  },
  {
   {0.20559365, -0.09718741, 0.013528306, -0.049909927, -0.13112704, 0.03381362, 0.17297508, 0.013565211, -0.09064851, -0.06289863, -0.14338668, 0.11345103, -0.31395224, 0.31239453, 0.08585199, 0.14266331},
   {-0.11247761, -0.0507628, -0.050824694, 0.15749294, 0.12570551, 0.059096675, -0.14532599, 0.11286099, -0.073953986, -0.11010439, -0.16794147, -0.46099284, -0.054593332, 0.017658176, 0.33950868, 0.09922605},
   {-0.1166667, -0.128711, 0.018722193, 0.08887952, 0.049405582, 0.12798257, -0.08809086, 0.041448332, 0.25245836, -0.048807256, -0.16143125, -0.41961467, 0.04342903, -0.14775616, 0.0049548307, 0.17689796},
   {0.042220484, -0.054796856, -0.009997594, -0.06334986, 0.096833035, 0.014286154, 0.11126908, -0.13798486, -0.026668688, 0.026404738, -0.0113830855, -0.34892213, -0.0010186036, -0.04475256, 0.105353594, -0.063472904},
   {0.05825115, 0.10080263, -0.083346024, -0.026850091, -0.1620396, -0.4006751, 0.0026460446, 0.08852728, 0.17895497, -0.24358052, 0.33087113, 0.08820984, 0.55533576, -0.4892843, -0.04472941, -0.1903469},
   {-0.19043757, 0.10819301, 0.022159168, -0.28665295, -0.021233954, -0.27480942, -0.055200975, -0.017165488, -0.03671954, -0.20376492, 0.4343701, 0.2603796, -0.2152296, -0.5633999, -0.12539484, -0.098364376}
  },
  {
   {0.33841377, 0.15802471, -0.12802085, -0.105534, 0.11724639, 0.01663486, 0.3433956, 0.38967302, 0.17636651, 0.10943792, -0.28738582, -0.20756789, 0.18037952, 0.072737515, -0.13700624, 0.08835326},
   {-0.040239394, 0.085963525, 0.15008575, 0.1109652, 0.05080706, 0.22381218, 0.15471116, 0.06923762, -0.013039351, -0.37353796, -0.075513445, -0.31648904, -0.09936851, 0.10988451, -0.116483055, -0.0438464},
   {0.036088295, 0.16306512, 0.19151539, -0.015696343, 0.025991144, 0.19771345, 0.06715565, -0.18491301, -0.005591106, -0.35824525, 0.06025175, -0.5527539, 0.12170871, 0.27090022, 0.021876074, 0.0030632082},
   {-0.0073738242, 0.3290078, 0.0021091935, 0.057616055, 0.14508186, 0.072916776, -0.12502234, -0.050333016, -0.091502815, -0.35618386, -0.23453467, -0.30241576, -0.12558007, 0.14848457, -0.044263527, -0.2179591},
   {-0.15804929, -0.64856166, 0.24653333, 0.025056727, -0.2675954, -0.15312128, -0.3963729, -0.010688871, -0.11371143, -0.3796009, -0.11186882, 0.42931527, 0.13984871, -0.113405615, -0.09178627, -0.015264595},
   {-0.09680905, 0.31402478, -0.42549583, -0.83701706, -0.38476616, -0.30083993, -0.07012198, -0.35405293, 0.24744666, -0.3878032, 0.25798196, 0.18988436, 0.02113906, -0.44347236, -0.012993176, -0.18550985}
  }
 },
 {
  {
   {-0.09416987, -0.14335115, -0.01974527, 0.07811716, 0.08076008, 0.25948536, 0.32688552, -0.34675863, -0.3182721, -0.116316654, 0.12886493, 0.23285589, 0.20991968, -0.011482583, 0.06439798, -0.21286999},
   {0.11344633, -0.23265548, -0.18481311, 0.08037771, 0.073750645, -0.013766001, 0.24548236, 0.038576774, 0.07359949, 0.09036773, 0.03226649, 0.07995093, 0.038644783, -0.20317362, 0.20289046, -0.029692069},
   {-0.009040624, -0.18454711, 0.064527646, 0.11385818, 0.14254221, -0.15320122, 0.05450153, -0.008481382, -0.09540166, 0.1560623, -0.108396955, -0.3010131, -0.19774006, 0.091601565, 0.09603776, 0.095650144},
   {-0.09115132, 0.020435207, -0.09554612, 0.111954585, 0.01032148, -0.14040008, -0.083558895, 0.14161533, 0.08039449, 0.0024026092, 0.07269305, -0.2136375, 0.15152079, -0.09001836, -0.087550856, -0.029331947},
   {0.1766263, 0.3078157, 0.000995678, 0.19087437, 0.18681183, -0.18186465, -0.18535493, -0.14489801, -0.090852275, -0.28012773, 0.05093624, -0.39015257, -0.1641544, 0.12158419, 0.055096537, 0.14104283},
   {-0.038044475, -0.040221542, 0.2896577, -0.23048073, -0.12291653, 0.05770091, -0.05148405, 0.26302755, -0.06547913, 0.016102625, -0.023164479, -0.53869706, -0.45086065, -0.14052743, -0.25121474, -0.03366423}
  },
  {
   {0.033991348, -0.4210726, 0.5512644, 0.07708765, 0.21771562, 0.21891935, 0.22139426, -0.09238659, -0.09487283, 0.11587895, -0.050610296, 0.11337534, -0.2175977, 0.04820214, 0.33891618, -0.23825164},
   {-0.058944892, -0.014524442, 0.10922915, -0.08887753, 0.019704262, -0.0071290736, 0.2077048, 0.20040081, 0.124286875, -0.26296496, -0.017597662, 0.014346862, 0.03717726, -0.012121217, 0.20137855, 0.030185226},
   {0.13493161, -0.10846066, -0.17869605, 0.04093745, -0.1957599, 0.22885197, 0.1776228, -0.06353261, 0.049501456, 0.0077026533, -0.19724368, 0.060117565, 0.092434056, 0.04020335, 0.14182034, -0.13840346},
   {-0.13739207, -0.15777744, -0.14006469, 0.1287307, -0.128035, 0.042551685, 0.12317154, 0.22364545, 0.09931021, -0.06437198, 0.015261996, 0.092059694, 0.025080532, 0.101952896, 0.20639609, 0.11818649},
   {-0.049247243, 0.39987344, -0.024287708, -0.33328363, -0.37494966, -0.13152933, -0.5692584, 0.26910573, 0.3805413, -0.26232937, 0.08824927, -0.051503476, 0.25890487, -0.62035173, -0.16320626, 0.29591036},
   {0.32834202, -0.14438033, -0.46321234, -0.33952647, -0.093734674, -0.5655707, -0.026145244, 0.053733658, -0.32181385, -0.1334023, -0.3217998, 0.2995218, -0.68695587, -0.6720086, -0.012607147, -0.13731492}
  },
  {
   {-0.2257899, -0.46172485, -0.061019767, -0.11592513, 0.26663598, -0.36630744, 0.12741981, -0.35712156, -0.28222424, -0.01455907, -0.34285665, 0.017036099, -0.13191016, 0.14562954, -0.026894534, -0.09850885},
   {-0.16497748, -0.09333118, 0.16693963, 0.1534148, 0.30862808, 0.05912591, 0.038630296, 0.09920218, -0.052499026, 0.021566102, -0.0836736, 0.122322954, -0.15081063, 0.21501179, -0.39883366, 0.09038586},
   {0.014506259, -0.24740921, 0.39095494, 0.10588313, 0.119626336, 0.20224373, -0.019911788, 0.2721774, -0.0072872136, -0.064603455, -0.26750377, -0.030687861, 0.10933026, 0.26627842, -0.10878638, -0.02921105},
   {0.04307583, -0.0648646, -0.18974458, 0.016485296, 0.009077134, -0.029963167, -0.107370436, 0.086149715, -0.049646113, 0.1925017, 0.13165891, 0.19076546, -0.31145817, -0.044262584, -0.32239458, 0.19374299},
   {-0.069621466, 0.3627915, -0.15810597, -0.26099128, -0.5805398, 0.37641764, -0.55696297, -0.28003448, 0.45123097, -0.40864107, 0.3838135, 0.08237935, 0.107020356, -0.046870887, -0.25054276, 0.15050195},
   {0.5524858, 0.044547565, -0.28447297, 0.053041868, -0.50116134, -0.40166882, -0.12141832, 0.25541437, -0.027123405, -0.2722767, -0.026200121, 0.21723972, -0.19263299, -0.6343989, -0.32467335, -0.21045485}
  }
 },
 {
  {
   {-0.22760555, 0.104222916, 0.13312285, -0.34642154, 0.19452092, -0.0025858092, 0.090141825, -0.48845494, -0.33716074, 0.28094116, -0.26327583, 0.1865915, 0.53937936, 0.01293511, -0.23378924, -0.35001442},
   {-0.16276495, -0.09845506, -0.009293116, 0.069749795, -0.37010404, -0.3253562, 0.07362554, -0.23878855, -0.069451965, -0.17982894, 0.05900429, -0.13661489, 0.028908135, -0.10348542, 0.054949872, 0.03398142},
   {0.04064653, 0.21844894, 0.18635681, -0.05412612, -0.2117455, -0.4274848, 0.2548042, -0.35057268, -0.25091788, -0.10354212, 0.18804832, -0.10912617, -0.19100158, -0.14628877, 0.2110936, -0.21058892},
   {0.06129983, 0.2051534, -0.03940662, 0.034826864, -0.2676099, -0.39705703, 0.14820711, -0.37399644, -0.19451071, -0.1855551, 0.06763612, -0.029442415, -0.04789723, -0.11638016, -0.028070308, -0.3171121},
   {-0.10483621, 0.1271505, 0.12892668, -0.20672178, -0.53994566, -0.34789288, -0.19497763, 0.31980503, -0.3869121, -0.30285612, 0.03294501, -0.05121947, -0.20849212, 0.030553102, -0.5478309, 0.10044223},
   {0.40399277, -0.04787234, -0.09281473, 0.5257327, -0.06703137, 0.028407512, 0.08557422, 0.033867083, 0.15427825, 0.009605865, 0.08458671, -0.09025046, -0.20753296, -0.028227158, 0.16189328, 0.47797203}
  },
  {
   {-0.14164814, -0.055395436, 0.09369805, -0.18577856, 0.017352428, -0.0036596933, -0.013821544, -0.21218155, -0.22529647, 0.30997702, -0.119193025, -0.20049953, 0.34371394, 0.019308887, -0.2529325, -0.53258973},
   {-0.129578, -0.1379505, 0.13731067, -0.0346374, -0.037111335, -0.01095939, -0.019402632, -0.11747244, -0.11194438, 0.0815066, -0.08738765, 0.114693336, 0.027489476, -0.06978446, 0.016690599, 0.01893148},
   {0.0018963796, 0.0050761467, 0.017103955, 0.039124485, -0.017578578, -0.02271329, 0.06432168, 0.076440305, 0.09987966, -0.03274553, 0.0809582, 0.15738426, 0.20862329, 0.06012932, -0.20661753, 0.006027404},
   {0.05793017, 0.105855465, 0.10392882, 0.044511303, 0.063370496, 0.07343274, -0.15887077, -0.091086954, 0.034795105, -0.13013749, 0.15900896, 0.09409675, 0.03850743, -0.11803682, -0.20340239, -0.16648059},
   {0.087507986, 0.20341823, -0.13625321, -0.5668231, -0.6307453, -0.10105206, -0.32531485, -0.014957652, 0.017175173, -0.21905227, 0.21610223, 0.07950479, -0.2554487, -0.53252506, -0.68421704, 0.4790395},
   {0.008446671, -0.18381229, 0.023343861, 0.16518451, -0.48426887, -0.22122699, -0.09309232, 0.3206954, 0.16333203, -0.4406282, -0.16727018, 0.2883467, -0.2853403, -0.55304724, -0.045896765, 0.4335318}
  },
  {
   {-0.062886246, -0.03294117, 0.10905984, -0.43799365, 0.18359274, -0.32770592, -0.12349122, -0.39844307, -0.30320033, 0.17337117, -0.09036319, 0.014193078, 0.039428234, 0.03250439, 0.42376798, -0.29490402},
   {-0.096666925, -0.10709639, -0.19953613, 0.050756294, 0.16331227, -0.0051197093, -0.016901784, -0.4151677, 0.13350046, 0.21154, 0.10246532, 0.13541421, -0.05097748, 0.032911673, -0.06909164, 0.17084725},
   {0.014569222, -0.018441096, 0.08960613, 0.13106301, 0.011283733, 0.20493475, -0.023929045, -0.081048, 0.09770336, 0.25807887, 0.13165472, 0.16210642, -0.08094676, 0.05310074, -0.36926806, 0.031779498},
   {0.060733844, 0.1686178, -0.07732905, -0.12026791, 0.052945286, -0.03376579, 0.08644767, -0.3345686, 0.1987508, -0.08752491, 0.2663936, -0.03656261, -0.28975764, 0.13204838, -0.0006356664, -0.12615712},
   {0.6377971, 0.4243438, -0.23857768, -0.6309954, -0.3838986, 0.4461765, 0.2940685, -0.39308155, 0.58910537, -0.18767849, 0.18461044, -0.19679818, -0.040230315, 0.18365096, -0.22556342, 0.15973349},
   {-0.3328205, -0.26247385, -0.4253948, -0.060932763, -0.44901475, -0.2779138, 0.07664421, 0.2486975, -0.24805948, -0.16606551, 0.01444421, 0.24381977, -0.267912, -0.5094522, -0.2196013, 0.70746356}
  }
 }
};

float conv_bias [16] = {-0.36161113 ,-0.13911594 ,-0.31475914 ,-0.09356918 ,-0.11094983 ,-0.1104639 ,-0.31287244 ,-0.1251041 ,-0.39976802 ,0.09637376 ,-0.070186324 ,-0.11941797 ,-0.15117115 ,0.037398737 ,0.08222941 ,-0.15544574};
# 4 "conv/conv.cpp" 2

void conv(float input[(26 / 2)][(26 / 2)][6], float conv_out[11][11][16]) {_ssdm_SpecArrayDimSize(input, 13);_ssdm_SpecArrayDimSize(conv_out, 11);

 Row_Loop:
    for (int r = 0; r < 11; ++r)
    {
     Col_Loop:
        for (int c = 0; c < 11; ++c)
        {
         Filter2_Loop:
            for (int f = 0; f < 16; ++f)
            {
             float w_sum = 0.0;
                W_Row_Loop:
                for (int wr = 0; wr < 3; ++wr)
                {
                 W_Col_Loop:
                    for (int wc = 0; wc < 3; ++wc)
                    {
_ssdm_op_SpecPipeline(-1, 1, 1, 0, "");
# 22 "conv/conv.cpp"

                     Filter1_Loop:
                        for (int ch = 0; ch < 6; ++ch)
                        {
                            w_sum += conv_weights[wr][wc][ch][f] * input[r + wr][c + wc][ch];
                        }
                    }
                }

                w_sum += conv_bias[f];


                if (w_sum > 0.0)
                    conv_out[r][c][f] = w_sum;
                else
                    conv_out[r][c][f] = 0;
            }
        }
    }
}
