-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001111100111101101111001", 
    1 => "10111110101010100000111000000001", 
    2 => "00111110000000010001010110000011", 
    3 => "10111100110000000101100100010110", 
    4 => "10111110100100001111111010011010", 
    5 => "00111110010111001100110110100011", 
    6 => "10111110011000101110000010111111", 
    7 => "00111101010100000000000001000001", 
    8 => "10111101110011110111101111000011", 
    9 => "00111101001011100011010010101100", 
    10 => "10111110100011100110010010110011", 
    11 => "10111101100010001111011000101100", 
    12 => "10111110001000000100100000101010", 
    13 => "10111101001000100101110110001101", 
    14 => "00111110100111001110111001010110", 
    15 => "00111110010110011100100011001001", 
    16 => "00111110010100101000011100100100", 
    17 => "10111101110001110000101000110001", 
    18 => "00111100010111011010010111010100", 
    19 => "10111101010011000110111001011010", 
    20 => "10111110000001100100011000101011", 
    21 => "00111101000010101000000000100111", 
    22 => "00111110001100010010000001100001", 
    23 => "00111100010111100100000010011110", 
    24 => "10111101101110011010010111101101", 
    25 => "10111101100000001101000011111111", 
    26 => "10111110000100101101001111110101", 
    27 => "00111101111010000101100100000011", 
    28 => "10111110101000001011111001011001", 
    29 => "00111110100111111111001000101101", 
    30 => "00111101101011111101001100101011", 
    31 => "00111110000100100001011001010101", 
    32 => "00111110101011010100010010010010", 
    33 => "00111110001000011101000100111011", 
    34 => "10111110000000110001011111100110", 
    35 => "10111101110110000010001000110110", 
    36 => "00111101111100000001111011100000", 
    37 => "00111100100010000100010111010100", 
    38 => "00111110101011111101000110001100", 
    39 => "00111110110001111000001100111001", 
    40 => "00111110001101001001100101101100", 
    41 => "00111101111000000010000011111101", 
    42 => "10111110100100110010010000111100", 
    43 => "10111110010101001000110010101101", 
    44 => "00111110001110001011010101101001", 
    45 => "00111101100101001111011101101000", 
    46 => "10111110000011000100101101011101", 
    47 => "00111101101101001111001010001110", 
    48 => "10111101110000001101110000100010", 
    49 => "10111110000100101100101010100101", 
    50 => "10111100101000011100000011010101", 
    51 => "00111101100111111111101111100100", 
    52 => "00111101101001010110010110001010", 
    53 => "00111110100001001101101101000100", 
    54 => "00111110101001110101110110001010", 
    55 => "10111110101100011000101001011001", 
    56 => "10111110101000101111010010010000", 
    57 => "10111101111011100011011101101101", 
    58 => "00111110000000111111010100101011", 
    59 => "00111110011011100111000111000110", 
    60 => "00111110010101101111010100101111", 
    61 => "10111100001111000010000101110010", 
    62 => "00111101100000111110001100010111", 
    63 => "10111110010110011111101010010111", 
    64 => "00111101000010110011101010000011", 
    65 => "10111110110101111001011011010100", 
    66 => "00111111000011010001111110101010", 
    67 => "00111101100111011110000000100001", 
    68 => "00111110010111101111000011011000", 
    69 => "00111110011000000010110001100101", 
    70 => "00111110011000101011010100101101", 
    71 => "10111101101111010011010100101110", 
    72 => "10111101110000100100110010110000", 
    73 => "00111101111011010101000111110001", 
    74 => "10111101010011110100110010111110", 
    75 => "00111101111010000011000101010101", 
    76 => "10111110010111101101000111101110", 
    77 => "00111101010001010110111110011011", 
    78 => "00111110101011011000011001101100", 
    79 => "10111110011100111111100000111101", 
    80 => "10111110011001110011010101111000", 
    81 => "10111110111011000110011100110011", 
    82 => "10111101011110011110111111011101", 
    83 => "10111101111011010110101000101000", 
    84 => "00111110100010001000010010000011", 
    85 => "10111110101110111000110010100110", 
    86 => "00111110000000100111101001010111", 
    87 => "10111110101101101101100010100011", 
    88 => "10111110100100000111111110110010", 
    89 => "10111100011011101000100100101010", 
    90 => "10111110101011111000101011101000", 
    91 => "00111100100010111000111101001010", 
    92 => "10111110000001110001001101110101", 
    93 => "00111110000101010001111111101001", 
    94 => "10111100110111000101000111101101", 
    95 => "10111101110010011011111100000010", 
    96 => "10111110011010010001000101101110", 
    97 => "00111101110101010111001011010011", 
    98 => "00111110000010000101000101011011", 
    99 => "10111110101100010101111000101010", 
    100 => "00111110010001110011000001111110", 
    101 => "10111011001010010111011010101110", 
    102 => "00111101101110001001110001000111", 
    103 => "10111110111110100001011011000100", 
    104 => "10111110101011001010000001010101", 
    105 => "00111110100011111101011110000101", 
    106 => "10111110100001101100110000010111", 
    107 => "00111110001111110001000111011000", 
    108 => "00111111000010100001010011000100", 
    109 => "00111100010100111110110111001001", 
    110 => "10111110011011110110011001110010", 
    111 => "10111110101100110011010100010111", 
    112 => "10111110000100010000110000110110", 
    113 => "10111101011000101110011001010011", 
    114 => "00111101101111111110010011000011", 
    115 => "10111110001111100011110010111100", 
    116 => "00111100100011100010011010101110", 
    117 => "10111011011011111101011101110111", 
    118 => "10111100011000100111001111000010", 
    119 => "10111110010110010100011000011111", 
    120 => "10111110011001101011010000011110", 
    121 => "00111110100111101011010101001111", 
    122 => "10111101111101000001101101111001", 
    123 => "10111110010011010100111111000000", 
    124 => "00111110101011111111101101000110", 
    125 => "00111100100111100010110110101100", 
    126 => "10111110100000011000000001011110", 
    127 => "10111111000010000101011111001101", 
    128 => "10111101100000001100101010000001", 
    129 => "10111101000001101110110101010010", 
    130 => "00111101110111110101101011000100", 
    131 => "10111110111000000100000010110100", 
    132 => "00111110001110111111111110111100", 
    133 => "10111110101001111100100100010010", 
    134 => "10111101111111001110100011110111", 
    135 => "10111110110011000000000010111011", 
    136 => "10111110100110110011110100010011", 
    137 => "00111110001100011000100000110110", 
    138 => "10111101101110010001000001010110", 
    139 => "00111100011010001000101000010101", 
    140 => "00111101001000010111111110000000", 
    141 => "00111101000001010010001101010011", 
    142 => "00111110110110001111100000011110", 
    143 => "10111110100101101111110110101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_0 is
    component conv_conv_weights_0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_0_rom_U :  component conv_conv_weights_0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


