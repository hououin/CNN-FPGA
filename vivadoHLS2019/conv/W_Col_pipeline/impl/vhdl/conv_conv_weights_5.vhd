-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_5_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_5_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100100000101010110000110", 
    1 => "00111101001111001010110000000001", 
    2 => "10111101100011110110101011011100", 
    3 => "00111100110111000010101111110111", 
    4 => "10111101010011010000101101111101", 
    5 => "00111110000011100010011110111010", 
    6 => "00111111000010101110101111010101", 
    7 => "10111110001101110011010110101101", 
    8 => "10111110111001101001001100010010", 
    9 => "10111110001101010111000111000010", 
    10 => "10111110001000000010110010011110", 
    11 => "00111110101110110001111101111100", 
    12 => "10111110100011001000010000001100", 
    13 => "10111110100001000001001110110000", 
    14 => "10111110010101100010010110001100", 
    15 => "10111110100010101010110011010010", 
    16 => "10111110010000110000001000010001", 
    17 => "00111101110111011001010001001100", 
    18 => "00111100101101011000011100100101", 
    19 => "10111110100100101100010000101101", 
    20 => "10111100101011011111001011010100", 
    21 => "10111110100011001011001111010010", 
    22 => "10111101011000100001101001101011", 
    23 => "10111100100011001001111010100011", 
    24 => "10111101000101100110011100111010", 
    25 => "10111110010100001010011111000000", 
    26 => "00111110110111100110010111000010", 
    27 => "00111110100001010101000001111010", 
    28 => "10111110010111000110010100100110", 
    29 => "10111111000100000011101011111010", 
    30 => "10111110000000000110011110000001", 
    31 => "10111101110010010111001101000011", 
    32 => "10111101110001100100001111010011", 
    33 => "00111110101000001100011111011011", 
    34 => "10111110110110011101101010010111", 
    35 => "10111111010101100100011011000000", 
    36 => "10111110110001010000000000010010", 
    37 => "10111110100110100000011110110001", 
    38 => "10111101100011111001110000011101", 
    39 => "10111110101101010100011001101101", 
    40 => "00111110011111010110001010101000", 
    41 => "10111110110001101000111000100100", 
    42 => "00111110100001000001011000110110", 
    43 => "00111110010000100111000100001100", 
    44 => "00111100101011010010101111010010", 
    45 => "10111110111000110000111011001111", 
    46 => "10111100010101001110000101010100", 
    47 => "10111110001111011111011001001011", 
    48 => "10111101000110111101010010000110", 
    49 => "10111101001001001011111101011000", 
    50 => "00111110100101000100111000000100", 
    51 => "10111110011011000000001100100100", 
    52 => "10111101111110111011101110101001", 
    53 => "00111101011011000101011111001010", 
    54 => "10111101010100101110000011110000", 
    55 => "00111110100001101010101110001100", 
    56 => "10111101100001100001100111101100", 
    57 => "00111100100000111110100110100111", 
    58 => "10111100101111011100001101101111", 
    59 => "10111111000010011110100000001101", 
    60 => "10111110111001101101011100110101", 
    61 => "10111110000011111110011001101100", 
    62 => "10111110100000001001111100111000", 
    63 => "10111101000010011110001110000001", 
    64 => "00111110101010000001110001110010", 
    65 => "10111110000100111101100001110000", 
    66 => "10111110111011010010101000101011", 
    67 => "10111110101011011101011001101010", 
    68 => "10111101101111111111011111110111", 
    69 => "10111111000100001100100100111110", 
    70 => "10111100110101100010111010001101", 
    71 => "00111101010111000001011111010011", 
    72 => "10111110101001001100010011001001", 
    73 => "10111110000010001001101010011101", 
    74 => "10111110101001001100001011110010", 
    75 => "00111110100110010101101011101100", 
    76 => "10111111001011111101110001010111", 
    77 => "10111111001011000000100011000001", 
    78 => "10111100010011101000111000110101", 
    79 => "10111110000011001001110001001000", 
    80 => "00111111000011010110111110110110", 
    81 => "00111101001101100111011110000010", 
    82 => "10111110100100011010011001110001", 
    83 => "00111101010110010100001001101110", 
    84 => "10111111000000000100110000011100", 
    85 => "10111110110011011010011110001001", 
    86 => "10111101111110001010101000101011", 
    87 => "00111110100000101100010110101100", 
    88 => "10111100110111100011000111100111", 
    89 => "10111110100010110110011111011010", 
    90 => "10111100110101101010000110100011", 
    91 => "00111110010111100111010000010111", 
    92 => "10111110010001010100000110010101", 
    93 => "10111111001000100110011111110111", 
    94 => "10111110101001100011101110010110", 
    95 => "10111110010101111000000101111010", 
    96 => "00111110110011101101100000100100", 
    97 => "10111101010001000001010111001001", 
    98 => "10111101101111100001010110100110", 
    99 => "00111111000001101001011001101011", 
    100 => "10111101100010010100011110111110", 
    101 => "00111100111010001011011011011111", 
    102 => "00111101101011110100000110001001", 
    103 => "00111101000010101011100000110110", 
    104 => "00111110000111011111101100011110", 
    105 => "00111100000111010110000111101011", 
    106 => "00111101101011010011101111001100", 
    107 => "10111101101110001101010100111100", 
    108 => "10111110010101001000001110000101", 
    109 => "10111100111001110011110010100100", 
    110 => "00111110001001011100011101011010", 
    111 => "00111110111101001011100011000000", 
    112 => "00111100000010100110001111101000", 
    113 => "10111110001111000011100101001010", 
    114 => "00111100101111110011101110100000", 
    115 => "00111110001010010010011000100001", 
    116 => "10111110111101111111001000010111", 
    117 => "10111110011000101000100101010100", 
    118 => "10111101101111101010011100110000", 
    119 => "00111110101001000011001000110000", 
    120 => "00111110001001110100000010000011", 
    121 => "10111110111000011001101000000101", 
    122 => "10111110001010110100100011100000", 
    123 => "00111110100100111010001000101110", 
    124 => "10111110100100100001100000100000", 
    125 => "10111111000011011001010010000001", 
    126 => "10111101001110111111111000111111", 
    127 => "00111110110111011111011111100001", 
    128 => "10111110101010100110011101110011", 
    129 => "10111110100001100110001011111001", 
    130 => "10111110110110011100110101011001", 
    131 => "10111101011110011001010010100010", 
    132 => "10111110111001011110010101000011", 
    133 => "10111110100011100100101010111000", 
    134 => "00111101100111001111011110100100", 
    135 => "00111110011111101010101010001111", 
    136 => "10111110011111100000001101001110", 
    137 => "10111110001010100000110100010100", 
    138 => "00111100011011001010011101101000", 
    139 => "00111110011110011010101111100100", 
    140 => "10111110100010010010101111000011", 
    141 => "10111111000000100110101101110110", 
    142 => "10111110011000001101111100101010", 
    143 => "00111111001101010001110001010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_5 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_5 is
    component conv_conv_weights_5_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_5_rom_U :  component conv_conv_weights_5_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


