-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_conv_weights_3_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 144
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_conv_weights_3_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101000000110101110111", 
    1 => "10111110110100001101010100001011", 
    2 => "10111100111111000000101010011100", 
    3 => "10111110000110111010101001010000", 
    4 => "00111101111001001001000010101100", 
    5 => "10111100111011010001010110000100", 
    6 => "10111110011100000000010101100110", 
    7 => "00111101110011001110011101111100", 
    8 => "10111101111111110001011111110100", 
    9 => "00111110100111010010010101001111", 
    10 => "10111110111001000011000001110101", 
    11 => "10111110011110100010001111000110", 
    12 => "10111011011000000101000111100000", 
    13 => "00111100100110111001100010101000", 
    14 => "00111110000001101111111100111100", 
    15 => "10111110010111011001000101110001", 
    16 => "00111101001011001110111101100011", 
    17 => "10111101011000000111001010101011", 
    18 => "10111100001000111100110011110011", 
    19 => "10111101100000011011110110010010", 
    20 => "00111101110001100101000001100110", 
    21 => "00111100011010100001000001111001", 
    22 => "00111101111000111110000100001011", 
    23 => "10111110000011010100101111100111", 
    24 => "10111100110110100111100001001011", 
    25 => "00111100110110000100111011000000", 
    26 => "10111100001110101000000000011111", 
    27 => "10111110101100101010010111101100", 
    28 => "10111010100001011000001010101010", 
    29 => "10111101001101110100111001110110", 
    30 => "00111101110101111100001110100000", 
    31 => "10111101100000011111111000010101", 
    32 => "10111011111100011010000000011111", 
    33 => "00111110101010000111001110110110", 
    34 => "00111011000010100011101001100101", 
    35 => "00111101011010111111111011010000", 
    36 => "00111110000101001001000001010111", 
    37 => "00111101100101010101010101100100", 
    38 => "10111110000000000000010111011011", 
    39 => "10111101010011100010100111111110", 
    40 => "10111101101110110110010111010100", 
    41 => "10111110101101100101110110111011", 
    42 => "10111110011100000010100111011011", 
    43 => "10111110100110101101011000111101", 
    44 => "10111110000000001001100000010000", 
    45 => "00111110000110000000110001010111", 
    46 => "10111101001101010100110110101100", 
    47 => "10111110010111110011000010101100", 
    48 => "10111101101110101010110110001011", 
    49 => "00111100101001110110011110111100", 
    50 => "10111101110000111010110110101111", 
    51 => "00111101111001010100100001110010", 
    52 => "00111100001010010001101101101101", 
    53 => "10111110000011111100010100001010", 
    54 => "10111101101010110010000011101101", 
    55 => "00111110000100010000001110011100", 
    56 => "00111101101001001010010111011110", 
    57 => "00111011000111010111010100011000", 
    58 => "00111101100101001110000000011000", 
    59 => "10111110010110101100001111001010", 
    60 => "00111110000110110010100001000100", 
    61 => "10111101101110000101101110001100", 
    62 => "10111101101100110100110111011101", 
    63 => "10111100111100000100100110001101", 
    64 => "10111110000011001011000010000010", 
    65 => "10111110001000011001000001101001", 
    66 => "10111110000011110110110100011110", 
    67 => "00111110000000111101000111111011", 
    68 => "10111110000000110001101110011011", 
    69 => "00111101001011100100101010101101", 
    70 => "00111101111111000100000101011100", 
    71 => "00111110011001010000001101010000", 
    72 => "00111101110010110110001100100111", 
    73 => "10111101100000111101010101110101", 
    74 => "00111100011110100000110101110011", 
    75 => "00111101101111001000100111001011", 
    76 => "00111100110011010111010110110000", 
    77 => "00111101110100001100110010101110", 
    78 => "00111110010100110101100101111111", 
    79 => "00111101111100100000101111000010", 
    80 => "00111101001100000111000001001000", 
    81 => "10111101100001001101011110111011", 
    82 => "10111110010000100100110001100111", 
    83 => "00111100100001110000110000101100", 
    84 => "00111100000101001011100001000010", 
    85 => "10111100111101010111010101010001", 
    86 => "10111101110110111110010100001000", 
    87 => "00111101101100000110111101000011", 
    88 => "10111101010010110101100110111001", 
    89 => "00111110010001010001111100101010", 
    90 => "00111110000001101101000110011000", 
    91 => "00111110010000110101100000000101", 
    92 => "10111110100111110111011101110010", 
    93 => "10111101001101010100110010101111", 
    94 => "10111110101001010001000011100111", 
    95 => "00111110010001100110010010010000", 
    96 => "00111101011110110001010110001000", 
    97 => "00111110010100100001001110111100", 
    98 => "10111101001000010110100011010110", 
    99 => "00111101000011101010011010011101", 
    100 => "10111110100010010000010000101010", 
    101 => "10111110110010110100101100001111", 
    102 => "00111110000101111100001110011011", 
    103 => "10111110101111110111110001110110", 
    104 => "10111110010001110010110111010001", 
    105 => "10111110001111100000001000101000", 
    106 => "00111101100010101000010011001110", 
    107 => "10111100111100010011000100111000", 
    108 => "10111101010001000010111111100011", 
    109 => "10111101111011100101100010111001", 
    110 => "10111100111001011111001110110100", 
    111 => "10111110101000100101110010000100", 
    112 => "00111101011011010100100000110000", 
    113 => "00111101110110001100101011000000", 
    114 => "00111101110101001101100010100010", 
    115 => "00111101001101100101000101111100", 
    116 => "00111101100000011100100001100100", 
    117 => "00111101100101100110001111101000", 
    118 => "10111110001000101010111100000101", 
    119 => "10111101101110101000101111001100", 
    120 => "00111101000011101000010101010000", 
    121 => "10111110000001010100001011000011", 
    122 => "00111110001000101101001100111111", 
    123 => "00111101110000001011010111001100", 
    124 => "00111101000111011011100111111000", 
    125 => "10111101111100011011110101001010", 
    126 => "10111110010100000100100010110111", 
    127 => "10111110001010100111100111100011", 
    128 => "00111101011110001100010000001101", 
    129 => "00111110001011001010101000100101", 
    130 => "10111101100111100101111010110001", 
    131 => "10111101111101100100111100000110", 
    132 => "00111101010110001101110100101000", 
    133 => "10111101000010100100110111111111", 
    134 => "00111101101100010000101101111010", 
    135 => "10111110101010110100110010010011", 
    136 => "00111110010010111000010101010100", 
    137 => "10111101101100110100000001000011", 
    138 => "00111110100010000110010010111110", 
    139 => "10111101000101011100001010101101", 
    140 => "10111110100101000101101100011101", 
    141 => "00111110000001110011011110110001", 
    142 => "10111010001001101010001011011010", 
    143 => "10111110000000010010111101010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_conv_weights_3 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 144;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_conv_weights_3 is
    component conv_conv_weights_3_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_conv_weights_3_rom_U :  component conv_conv_weights_3_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


