-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.808000,HLS_SYN_LAT=437537,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=7,HLS_SYN_FF=1122,HLS_SYN_LUT=1821,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_const_lv11_3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000011";
    constant ap_const_lv11_4 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_const_lv11_5 : STD_LOGIC_VECTOR (10 downto 0) := "00000000101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_weights_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_0_ce0 : STD_LOGIC;
    signal conv_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_1_ce0 : STD_LOGIC;
    signal conv_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_2_ce0 : STD_LOGIC;
    signal conv_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_3_ce0 : STD_LOGIC;
    signal conv_weights_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_4_ce0 : STD_LOGIC;
    signal conv_weights_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_weights_5_ce0 : STD_LOGIC;
    signal conv_weights_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_bias_ce0 : STD_LOGIC;
    signal conv_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_355 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_366 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_378 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_407 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_893 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal reg_412 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_395_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_418 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal grp_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_423 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state17_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state21_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state25_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln8_fu_429_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_435_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_851 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln11_fu_447_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_856 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_461_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_861 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_fu_503_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_reg_867 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_511_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_3_reg_872 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_878 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_534_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln35_2_reg_883 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_out_addr_reg_888 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln18_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_893_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_559_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_1_reg_897 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_fu_577_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_reg_902 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_fu_585_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_907 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_1_fu_692_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_942 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_weights_1_load_reg_975 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_2_load_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_3_load_reg_985 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_4_load_reg_990 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_weights_5_load_reg_995 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_3_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1015 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_5_reg_1020 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_1_3_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal tmp_1_5_reg_1035 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal wc_fu_754_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1040 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_state26_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal f_fu_759_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1055 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_770_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln11_reg_1060 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten21_reg_288 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal r_0_reg_299 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten7_reg_310 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_322 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_333 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_348_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_359_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_1_phi_fu_370_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_382_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_4_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_5_fu_655_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_709_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_719_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_11_fu_729_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_739_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_13_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_389_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal grp_fu_395_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_395_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal r_fu_441_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_453_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_491_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_828_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_3_fu_538_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_523_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_542_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln21_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_565_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_597_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_605_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_593_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_615_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_619_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_632_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_609_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_636_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_cast_fu_642_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln26_2_fu_650_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln21_fu_628_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_665_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_837_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_681_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_674_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_688_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln26_fu_703_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_4_fu_714_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_724_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_734_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_744_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln11_1_fu_764_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln34_fu_777_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_781_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_791_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_828_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_828_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_828_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_837_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_837_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_837_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_state14_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state16_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_state18_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_state19_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_block_state20_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_state22_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_pp0_stage19_11001 : BOOLEAN;
    signal ap_block_state23_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_pp0_stage20_11001 : BOOLEAN;
    signal ap_block_state24_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage21_11001 : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_828_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_828_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_837_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_837_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_fadd_32ns_32bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fmul_32ns_32cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_fcmp_32ns_32dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_mac_muladd_4eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_conv_weights_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_3 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_weights_5 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_conv_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_weights_0_U : component conv_conv_weights_0
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_0_address0,
        ce0 => conv_weights_0_ce0,
        q0 => conv_weights_0_q0);

    conv_weights_1_U : component conv_conv_weights_1
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_1_address0,
        ce0 => conv_weights_1_ce0,
        q0 => conv_weights_1_q0);

    conv_weights_2_U : component conv_conv_weights_2
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_2_address0,
        ce0 => conv_weights_2_ce0,
        q0 => conv_weights_2_q0);

    conv_weights_3_U : component conv_conv_weights_3
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_3_address0,
        ce0 => conv_weights_3_ce0,
        q0 => conv_weights_3_q0);

    conv_weights_4_U : component conv_conv_weights_4
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_4_address0,
        ce0 => conv_weights_4_ce0,
        q0 => conv_weights_4_q0);

    conv_weights_5_U : component conv_conv_weights_5
    generic map (
        DataWidth => 32,
        AddressRange => 144,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_weights_5_address0,
        ce0 => conv_weights_5_ce0,
        q0 => conv_weights_5_q0);

    conv_bias_U : component conv_conv_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_bias_address0,
        ce0 => conv_bias_ce0,
        q0 => conv_bias_q0);

    conv_fadd_32ns_32bkb_U1 : component conv_fadd_32ns_32bkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_389_p0,
        din1 => grp_fu_389_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_389_p2);

    conv_fmul_32ns_32cud_U2 : component conv_fmul_32ns_32cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_395_p0,
        din1 => grp_fu_395_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_395_p2);

    conv_fcmp_32ns_32dEe_U3 : component conv_fcmp_32ns_32dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_389_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_401_p2);

    conv_mac_muladd_4eOg_U4 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_828_p0,
        din1 => grp_fu_828_p1,
        din2 => grp_fu_828_p2,
        dout => grp_fu_828_p3);

    conv_mac_muladd_4eOg_U5 : component conv_mac_muladd_4eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_837_p0,
        din1 => grp_fu_837_p1,
        din2 => grp_fu_837_p2,
        dout => grp_fu_837_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage23_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_322_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                c_0_reg_322 <= select_ln35_3_reg_872;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_322 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_333_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                f_0_reg_333 <= f_reg_1055;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_333 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_288_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                indvar_flatten21_reg_288 <= add_ln8_reg_851;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten21_reg_288 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                indvar_flatten7_reg_310 <= select_ln11_reg_1060;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_310 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then 
                indvar_flatten_reg_344 <= add_ln18_1_reg_897;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_344 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_299_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                r_0_reg_299 <= select_ln35_1_reg_861;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_299 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    reg_412_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                    reg_412 <= input_r_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    reg_412 <= input_r_q1;
                end if;
            end if; 
        end if;
    end process;

    w_sum_1_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_893_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_1_reg_366 <= grp_fu_389_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then 
                w_sum_1_reg_366 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_378_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then 
                wc_0_reg_378 <= wc_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then 
                wc_0_reg_378 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then 
                wr_0_reg_355 <= select_ln18_1_reg_907;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then 
                wr_0_reg_355 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln18_1_reg_897 <= add_ln18_1_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_851 <= add_ln8_fu_435_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_429_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_888 <= zext_ln35_4_fu_548_p1(11 - 1 downto 0);
                icmp_ln11_reg_856 <= icmp_ln11_fu_447_p2;
                select_ln35_1_reg_861 <= select_ln35_1_fu_461_p3;
                select_ln35_2_reg_867 <= select_ln35_2_fu_503_p3;
                select_ln35_3_reg_872 <= select_ln35_3_fu_511_p3;
                    zext_ln26_reg_878(4 downto 0) <= zext_ln26_fu_530_p1(4 downto 0);
                    zext_ln35_2_reg_883(4 downto 0) <= zext_ln35_2_fu_534_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_893 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_weights_1_load_reg_975 <= conv_weights_1_q0;
                conv_weights_2_load_reg_980 <= conv_weights_2_q0;
                conv_weights_3_load_reg_985 <= conv_weights_3_q0;
                conv_weights_4_load_reg_990 <= conv_weights_4_q0;
                conv_weights_5_load_reg_995 <= conv_weights_5_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                f_reg_1055 <= f_fu_759_p2;
                select_ln11_reg_1060 <= select_ln11_fu_770_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_893 <= icmp_ln18_fu_553_p2;
                icmp_ln18_reg_893_pp0_iter1_reg <= icmp_ln18_reg_893;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                input_load_3_reg_1010 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                input_load_5_reg_1020 <= input_r_q1;
                tmp_1_1_reg_1015 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_893 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_407 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0)))) then
                reg_418 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln18_reg_893 = ap_const_lv1_0)))) then
                reg_423 <= grp_fu_389_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_553_p2 = ap_const_lv1_0))) then
                select_ln18_1_reg_907 <= select_ln18_1_fu_585_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_553_p2 = ap_const_lv1_0))) then
                select_ln18_reg_902 <= select_ln18_fu_577_p3;
                    sub_ln26_1_reg_942(10 downto 1) <= sub_ln26_1_fu_692_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                tmp_1_2_reg_1025 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                tmp_1_3_reg_1030 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                tmp_1_5_reg_1035 <= grp_fu_395_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage23_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then
                wc_reg_1040 <= wc_fu_754_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_878(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_883(8 downto 5) <= "0000";
    sub_ln26_1_reg_942(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln8_fu_429_p2, ap_CS_fsm_state2, icmp_ln18_fu_553_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_553_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_553_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_764_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten7_reg_310));
    add_ln18_1_fu_559_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_348_p4) + unsigned(ap_const_lv4_1));
    add_ln18_fu_619_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_861) + unsigned(zext_ln18_fu_615_p1));
    add_ln26_1_fu_665_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_872) + unsigned(zext_ln21_fu_628_p1));
    add_ln26_2_fu_650_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_883) + unsigned(tmp_8_cast_fu_642_p3));
    add_ln26_4_fu_714_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_942) + unsigned(ap_const_lv11_2));
    add_ln26_5_fu_724_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_942) + unsigned(ap_const_lv11_3));
    add_ln26_6_fu_734_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_942) + unsigned(ap_const_lv11_4));
    add_ln26_7_fu_744_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_942) + unsigned(ap_const_lv11_5));
    add_ln26_fu_636_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_632_p1) + unsigned(sub_ln26_fu_609_p2));
    add_ln35_1_fu_542_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_538_p1) + unsigned(tmp_2_cast_fu_523_p3));
    add_ln8_fu_435_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_288) + unsigned(ap_const_lv11_1));
    and_ln34_fu_813_p2 <= (or_ln34_fu_807_p2 and grp_fu_401_p2);
    and_ln35_fu_485_p2 <= (xor_ln35_fu_473_p2 and icmp_ln14_fu_479_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_553_p2)
    begin
        if ((icmp_ln18_fu_553_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_429_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_348_p4_assign_proc : process(indvar_flatten_reg_344, icmp_ln18_reg_893, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_897, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_348_p4 <= add_ln18_1_reg_897;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_348_p4 <= indvar_flatten_reg_344;
        end if; 
    end process;

    ap_phi_mux_w_sum_1_phi_fu_370_p4 <= w_sum_1_reg_366;

    ap_phi_mux_wc_0_phi_fu_382_p4_assign_proc : process(wc_0_reg_378, icmp_ln18_reg_893, ap_CS_fsm_pp0_stage0, wc_reg_1040, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then 
            ap_phi_mux_wc_0_phi_fu_382_p4 <= wc_reg_1040;
        else 
            ap_phi_mux_wc_0_phi_fu_382_p4 <= wc_0_reg_378;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_359_p4_assign_proc : process(wr_0_reg_355, icmp_ln18_reg_893, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_907, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_893 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_359_p4 <= select_ln18_1_reg_907;
        else 
            ap_phi_mux_wr_0_phi_fu_359_p4 <= wr_0_reg_355;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_429_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_429_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_777_p1 <= reg_423;
    c_fu_491_p2 <= std_logic_vector(unsigned(select_ln35_fu_453_p3) + unsigned(ap_const_lv4_1));
    conv_bias_address0 <= zext_ln26_reg_878(4 - 1 downto 0);

    conv_bias_ce0_assign_proc : process(ap_CS_fsm_state30)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            conv_bias_ce0 <= ap_const_logic_1;
        else 
            conv_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_888;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_423 when (and_ln34_fu_813_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state35)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_0_address0 <= zext_ln26_5_fu_655_p1(8 - 1 downto 0);

    conv_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_1_address0 <= zext_ln26_5_fu_655_p1(8 - 1 downto 0);

    conv_weights_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_2_address0 <= zext_ln26_5_fu_655_p1(8 - 1 downto 0);

    conv_weights_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_3_address0 <= zext_ln26_5_fu_655_p1(8 - 1 downto 0);

    conv_weights_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_3_ce0 <= ap_const_logic_1;
        else 
            conv_weights_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_4_address0 <= zext_ln26_5_fu_655_p1(8 - 1 downto 0);

    conv_weights_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_4_ce0 <= ap_const_logic_1;
        else 
            conv_weights_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_weights_5_address0 <= zext_ln26_5_fu_655_p1(8 - 1 downto 0);

    conv_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_weights_5_ce0 <= ap_const_logic_1;
        else 
            conv_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_759_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_2_reg_867));

    grp_fu_389_p0_assign_proc : process(w_sum_1_reg_366, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, reg_423, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage23, ap_CS_fsm_state31, ap_phi_mux_w_sum_1_phi_fu_370_p4, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_389_p0 <= w_sum_1_reg_366;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_389_p0 <= reg_423;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_389_p0 <= ap_phi_mux_w_sum_1_phi_fu_370_p4;
        else 
            grp_fu_389_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_389_p1_assign_proc : process(conv_bias_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, reg_418, tmp_1_1_reg_1015, tmp_1_2_reg_1025, tmp_1_3_reg_1030, tmp_1_5_reg_1035, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage23, ap_CS_fsm_state31, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_block_pp0_stage23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            grp_fu_389_p1 <= conv_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_389_p1 <= tmp_1_5_reg_1035;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_389_p1 <= tmp_1_3_reg_1030;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_389_p1 <= tmp_1_2_reg_1025;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_389_p1 <= tmp_1_1_reg_1015;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_389_p1 <= reg_418;
        else 
            grp_fu_389_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p0_assign_proc : process(conv_weights_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, conv_weights_1_load_reg_975, conv_weights_2_load_reg_980, conv_weights_3_load_reg_985, conv_weights_4_load_reg_990, conv_weights_5_load_reg_995, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_395_p0 <= conv_weights_5_load_reg_995;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_395_p0 <= conv_weights_4_load_reg_990;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_395_p0 <= conv_weights_3_load_reg_985;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_395_p0 <= conv_weights_2_load_reg_980;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_395_p0 <= conv_weights_1_load_reg_975;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_395_p0 <= conv_weights_0_q0;
            else 
                grp_fu_395_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_395_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_395_p1_assign_proc : process(input_r_q0, reg_407, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_412, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6, input_load_3_reg_1010, input_load_5_reg_1020, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= input_load_5_reg_1020;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= input_load_3_reg_1010;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_395_p1 <= reg_407;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_395_p1 <= reg_412;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_395_p1 <= input_r_q0;
        else 
            grp_fu_395_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_828_p0 <= grp_fu_828_p00(4 - 1 downto 0);
    grp_fu_828_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_461_p3),8));
    grp_fu_828_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_828_p2 <= grp_fu_828_p20(4 - 1 downto 0);
    grp_fu_828_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_511_p3),8));
    grp_fu_837_p0 <= grp_fu_837_p00(4 - 1 downto 0);
    grp_fu_837_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_619_p2),8));
    grp_fu_837_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_837_p2 <= grp_fu_837_p20(4 - 1 downto 0);
    grp_fu_837_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_665_p2),8));
    icmp_ln11_fu_447_p2 <= "1" when (indvar_flatten7_reg_310 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_479_p2 <= "1" when (f_0_reg_333 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_553_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_348_p4 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_571_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_382_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_801_p2 <= "1" when (trunc_ln34_fu_791_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_795_p2 <= "0" when (tmp_fu_781_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_429_p2 <= "1" when (indvar_flatten21_reg_288 = ap_const_lv11_790) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_8_fu_698_p1, zext_ln26_10_fu_719_p1, ap_block_pp0_stage1, zext_ln26_12_fu_739_p1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= zext_ln26_12_fu_739_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln26_10_fu_719_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln26_8_fu_698_p1(10 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_9_fu_709_p1, ap_block_pp0_stage1, zext_ln26_11_fu_729_p1, ap_block_pp0_stage2, zext_ln26_13_fu_749_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln26_13_fu_749_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln26_11_fu_729_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= zext_ln26_9_fu_709_p1(10 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln26_fu_703_p2 <= (sub_ln26_1_fu_692_p2 or ap_const_lv11_1);
    or_ln34_fu_807_p2 <= (icmp_ln34_fu_795_p2 or icmp_ln34_1_fu_801_p2);
    or_ln35_fu_497_p2 <= (icmp_ln11_fu_447_p2 or and_ln35_fu_485_p2);
    p_shl_cast_fu_674_p3 <= (grp_fu_837_p3 & ap_const_lv3_0);
    r_fu_441_p2 <= std_logic_vector(unsigned(r_0_reg_299) + unsigned(ap_const_lv4_1));
    select_ln11_fu_770_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_856(0) = '1') else 
        add_ln11_1_fu_764_p2;
    select_ln18_1_fu_585_p3 <= 
        wr_fu_565_p2 when (icmp_ln21_fu_571_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_359_p4;
    select_ln18_fu_577_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_571_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_382_p4;
    select_ln35_1_fu_461_p3 <= 
        r_fu_441_p2 when (icmp_ln11_fu_447_p2(0) = '1') else 
        r_0_reg_299;
    select_ln35_2_fu_503_p3 <= 
        ap_const_lv5_0 when (or_ln35_fu_497_p2(0) = '1') else 
        f_0_reg_333;
    select_ln35_3_fu_511_p3 <= 
        c_fu_491_p2 when (and_ln35_fu_485_p2(0) = '1') else 
        select_ln35_fu_453_p3;
    select_ln35_fu_453_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_447_p2(0) = '1') else 
        c_0_reg_322;
    sub_ln26_1_fu_692_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_674_p3) - unsigned(zext_ln26_7_fu_688_p1));
    sub_ln26_fu_609_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_605_p1) - unsigned(zext_ln26_1_fu_593_p1));
    tmp_1_fu_681_p3 <= (grp_fu_837_p3 & ap_const_lv1_0);
    tmp_2_cast_fu_523_p3 <= (grp_fu_828_p3 & ap_const_lv4_0);
    tmp_4_fu_597_p3 <= (select_ln18_1_fu_585_p3 & ap_const_lv2_0);
    tmp_8_cast_fu_642_p3 <= (add_ln26_fu_636_p2 & ap_const_lv4_0);
    tmp_fu_781_p4 <= bitcast_ln34_fu_777_p1(30 downto 23);
    trunc_ln34_fu_791_p1 <= bitcast_ln34_fu_777_p1(23 - 1 downto 0);
    wc_fu_754_p2 <= std_logic_vector(unsigned(select_ln18_reg_902) + unsigned(ap_const_lv2_1));
    wr_fu_565_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_359_p4) + unsigned(ap_const_lv2_1));
    xor_ln35_fu_473_p2 <= (icmp_ln11_fu_447_p2 xor ap_const_lv1_1);
    zext_ln18_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_585_p3),4));
    zext_ln21_fu_628_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_577_p3),4));
    zext_ln26_10_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_714_p2),64));
    zext_ln26_11_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_724_p2),64));
    zext_ln26_12_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_734_p2),64));
    zext_ln26_13_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_744_p2),64));
    zext_ln26_1_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_585_p3),5));
    zext_ln26_2_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_597_p3),5));
    zext_ln26_4_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_577_p3),5));
    zext_ln26_5_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_650_p2),64));
    zext_ln26_7_fu_688_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_681_p3),11));
    zext_ln26_8_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_1_fu_692_p2),64));
    zext_ln26_9_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_703_p2),64));
    zext_ln26_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_503_p3),64));
    zext_ln35_2_fu_534_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_503_p3),9));
    zext_ln35_3_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_503_p3),12));
    zext_ln35_4_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_542_p2),64));
end behav;
