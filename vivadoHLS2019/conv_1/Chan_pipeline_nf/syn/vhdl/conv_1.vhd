-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=2359293,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=5,HLS_SYN_FF=618,HLS_SYN_LUT=1547,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_weights_ce0 : STD_LOGIC;
    signal conv_1_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_244 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_256 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_288_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_reg_630 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_638 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_646 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_336_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln14_reg_651 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln11_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_346_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_659 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_664 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_356_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_reg_669 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_674 : STD_LOGIC_VECTOR (14 downto 0);
    signal wr_fu_384_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_682 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln26_fu_408_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_reg_687 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln26_1_fu_448_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln26_1_reg_692 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln21_fu_456_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal wc_fu_462_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_706 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_2_fu_483_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_2_reg_711 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln26_3_fu_520_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_reg_716 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln24_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state7_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln24_reg_721_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ch_fu_573_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_reg_735 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state8_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal r_0_reg_151 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_163 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_187 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal wr_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_209 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_reg_221 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal wc_0_reg_233 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_248_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln35_3_fu_369_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_568_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln35_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_322_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_328_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln35_2_fu_360_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_364_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_fu_390_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_1_fu_398_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_374_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_418_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_430_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_2_fu_426_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_3_fu_438_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_442_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_468_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_472_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_fu_477_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_fu_452_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_489_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_6_fu_495_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_3_fu_499_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_fu_508_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_512_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_2_fu_504_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_5_fu_532_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_4_fu_540_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_cast_fu_545_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_553_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_536_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_6_fu_563_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln34_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_583_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_593_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_address0,
        ce0 => conv_1_weights_ce0,
        q0 => conv_1_weights_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_cud_U1 : component conv_1_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => grp_fu_268_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_268_p2);

    conv_1_fmul_32ns_dEe_U2 : component conv_1_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_weights_q0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    conv_1_fcmp_32ns_eOg_U3 : component conv_1_fcmp_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_268_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_282_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (icmp_ln24_reg_721 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln21_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln21_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_175 <= c_reg_646;
            elsif (((icmp_ln8_fu_294_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ch_0_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_721 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_244 <= ch_reg_735;
            elsif (((icmp_ln21_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_244 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                f_0_reg_187 <= f_reg_659;
            elsif (((icmp_ln11_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_187 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_163 <= add_ln8_reg_630;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_163 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_151 <= r_reg_638;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_151 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_456_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_209 <= w_sum_1_reg_221;
            elsif (((icmp_ln14_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_209 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                w_sum_1_reg_221 <= w_sum_2_reg_256;
            elsif (((icmp_ln18_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_221 <= w_sum_0_reg_209;
            end if; 
        end if;
    end process;

    w_sum_2_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln24_reg_721_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_sum_2_reg_256 <= grp_fu_268_p2;
            elsif (((icmp_ln21_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                w_sum_2_reg_256 <= w_sum_1_reg_221;
            end if; 
        end if;
    end process;

    wc_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                wc_0_reg_233 <= wc_reg_706;
            elsif (((icmp_ln18_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_233 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_456_p2 = ap_const_lv1_1))) then 
                wr_0_reg_198 <= wr_reg_682;
            elsif (((icmp_ln14_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_198 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_630 <= add_ln8_fu_288_p2;
                r_reg_638 <= r_fu_300_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_646 <= c_fu_312_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ch_reg_735 <= ch_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_340_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_674 <= zext_ln35_3_fu_369_p1(15 - 1 downto 0);
                    zext_ln26_reg_664(5 downto 0) <= zext_ln26_fu_352_p1(5 downto 0);
                    zext_ln35_1_reg_669(5 downto 0) <= zext_ln35_1_fu_356_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_659 <= f_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_reg_721 <= icmp_ln24_fu_526_p2;
                icmp_ln24_reg_721_pp0_iter1_reg <= icmp_ln24_reg_721;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    sext_ln26_1_reg_692(11 downto 2) <= sext_ln26_1_fu_448_p1(11 downto 2);
                sext_ln26_reg_687 <= sext_ln26_fu_408_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_456_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                sub_ln26_2_reg_711 <= sub_ln26_2_fu_483_p2;
                sub_ln26_3_reg_716 <= sub_ln26_3_fu_520_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_706 <= wc_fu_462_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_682 <= wr_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_651(14 downto 5) <= zext_ln14_fu_336_p1(14 downto 5);
            end if;
        end if;
    end process;
    zext_ln14_reg_651(4 downto 0) <= "00000";
    zext_ln14_reg_651(15) <= '0';
    zext_ln26_reg_664(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_1_reg_669(10 downto 6) <= "00000";
    sext_ln26_1_reg_692(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_306_p2, ap_CS_fsm_state4, icmp_ln14_fu_340_p2, ap_CS_fsm_state5, icmp_ln18_fu_378_p2, icmp_ln21_fu_456_p2, ap_CS_fsm_state6, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, icmp_ln8_fu_294_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_294_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_306_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_340_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_456_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_489_p2 <= std_logic_vector(unsigned(zext_ln21_fu_452_p1) + unsigned(c_0_reg_175));
    add_ln26_2_fu_472_p2 <= std_logic_vector(signed(sext_ln26_reg_687) + signed(zext_ln26_4_fu_468_p1));
    add_ln26_3_fu_499_p2 <= std_logic_vector(signed(sext_ln26_1_reg_692) + signed(zext_ln26_6_fu_495_p1));
    add_ln26_4_fu_540_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_532_p1) + unsigned(sub_ln26_2_reg_711));
    add_ln26_5_fu_553_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_669) + unsigned(tmp_17_cast_fu_545_p3));
    add_ln26_6_fu_563_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_536_p1) + unsigned(sub_ln26_3_reg_716));
    add_ln26_fu_412_p2 <= std_logic_vector(unsigned(zext_ln18_fu_374_p1) + unsigned(r_0_reg_151));
    add_ln35_1_fu_364_p2 <= std_logic_vector(unsigned(zext_ln14_reg_651) + unsigned(zext_ln35_2_fu_360_p1));
    add_ln35_fu_322_p2 <= std_logic_vector(unsigned(phi_mul_reg_163) + unsigned(zext_ln35_fu_318_p1));
    add_ln8_fu_288_p2 <= std_logic_vector(unsigned(phi_mul_reg_163) + unsigned(ap_const_lv10_1A));
    and_ln34_fu_615_p2 <= (tmp_8_fu_282_p2 and or_ln34_fu_609_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_294_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_248_p4_assign_proc : process(ch_0_reg_244, icmp_ln24_reg_721, ap_CS_fsm_pp0_stage0, ch_reg_735, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln24_reg_721 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_phi_fu_248_p4 <= ch_reg_735;
        else 
            ap_phi_mux_ch_0_phi_fu_248_p4 <= ch_0_reg_244;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_294_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_294_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_579_p1 <= grp_fu_268_p2;
    c_fu_312_p2 <= std_logic_vector(unsigned(c_0_reg_175) + unsigned(ap_const_lv5_1));
    ch_fu_573_p2 <= std_logic_vector(unsigned(ch_0_reg_244) + unsigned(ap_const_lv2_1));
    conv_1_bias_address0 <= zext_ln26_reg_664(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_address0 <= zext_ln26_8_fu_558_p1(10 - 1 downto 0);

    conv_1_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_input_address0 <= zext_ln26_9_fu_568_p1(12 - 1 downto 0);

    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_674;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_268_p2 when (and_ln34_fu_615_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_346_p2 <= std_logic_vector(unsigned(f_0_reg_187) + unsigned(ap_const_lv6_1));

    grp_fu_268_p0_assign_proc : process(w_sum_2_reg_256, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, w_sum_0_reg_209, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_268_p0 <= w_sum_0_reg_209;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_268_p0 <= w_sum_2_reg_256;
        else 
            grp_fu_268_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_268_p1_assign_proc : process(conv_1_bias_q0, ap_CS_fsm_pp0_stage0, grp_fu_275_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_268_p1 <= conv_1_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_268_p1 <= grp_fu_275_p2;
        else 
            grp_fu_268_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_306_p2 <= "1" when (c_0_reg_175 = ap_const_lv5_1A) else "0";
    icmp_ln14_fu_340_p2 <= "1" when (f_0_reg_187 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_378_p2 <= "1" when (wr_0_reg_198 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_456_p2 <= "1" when (wc_0_reg_233 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_526_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_248_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_603_p2 <= "1" when (trunc_ln34_fu_593_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_597_p2 <= "0" when (tmp_fu_583_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_294_p2 <= "1" when (r_0_reg_151 = ap_const_lv5_1A) else "0";
    or_ln34_fu_609_p2 <= (icmp_ln34_fu_597_p2 or icmp_ln34_1_fu_603_p2);
    p_shl3_cast_fu_512_p3 <= (trunc_ln26_fu_508_p1 & ap_const_lv2_0);
    r_fu_300_p2 <= std_logic_vector(unsigned(r_0_reg_151) + unsigned(ap_const_lv5_1));
        sext_ln26_1_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_1_fu_442_p2),12));

        sext_ln26_2_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_3_fu_499_p2),13));

        sext_ln26_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_402_p2),6));

    shl_ln26_fu_477_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_2_fu_472_p2),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln26_1_fu_442_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_426_p1) - unsigned(zext_ln26_3_fu_438_p1));
    sub_ln26_2_fu_483_p2 <= std_logic_vector(unsigned(shl_ln26_fu_477_p2) - unsigned(add_ln26_2_fu_472_p2));
    sub_ln26_3_fu_520_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_512_p3) - unsigned(sext_ln26_2_fu_504_p1));
    sub_ln26_fu_402_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_398_p1) - unsigned(zext_ln18_fu_374_p1));
    tmp_10_fu_418_p3 <= (add_ln26_fu_412_p2 & ap_const_lv5_0);
    tmp_11_fu_430_p3 <= (add_ln26_fu_412_p2 & ap_const_lv2_0);
    tmp_17_cast_fu_545_p3 <= (add_ln26_4_fu_540_p2 & ap_const_lv5_0);
    tmp_9_fu_328_p3 <= (add_ln35_fu_322_p2 & ap_const_lv5_0);
    tmp_fu_583_p4 <= bitcast_ln34_fu_579_p1(30 downto 23);
    tmp_s_fu_390_p3 <= (wr_0_reg_198 & ap_const_lv2_0);
    trunc_ln26_fu_508_p1 <= add_ln26_3_fu_499_p2(11 - 1 downto 0);
    trunc_ln34_fu_593_p1 <= bitcast_ln34_fu_579_p1(23 - 1 downto 0);
    wc_fu_462_p2 <= std_logic_vector(unsigned(wc_0_reg_233) + unsigned(ap_const_lv2_1));
    wr_fu_384_p2 <= std_logic_vector(unsigned(wr_0_reg_198) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_328_p3),16));
    zext_ln18_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_198),5));
    zext_ln21_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_233),5));
    zext_ln26_1_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_390_p3),5));
    zext_ln26_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_418_p3),11));
    zext_ln26_3_fu_438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_430_p3),11));
    zext_ln26_4_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_233),6));
    zext_ln26_5_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_phi_fu_248_p4),6));
    zext_ln26_6_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_489_p2),12));
    zext_ln26_7_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_phi_fu_248_p4),13));
    zext_ln26_8_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_553_p2),64));
    zext_ln26_9_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_563_p2),64));
    zext_ln26_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),64));
    zext_ln35_1_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),11));
    zext_ln35_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),16));
    zext_ln35_3_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_364_p2),64));
    zext_ln35_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_175),10));
end behav;
