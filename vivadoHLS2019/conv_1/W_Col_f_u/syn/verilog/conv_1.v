// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=2682369,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=709,HLS_SYN_LUT=1896,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_input_address0;
reg conv_input_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [8:0] conv_1_weights_1_address0;
reg    conv_1_weights_1_ce0;
wire   [31:0] conv_1_weights_1_q0;
wire   [8:0] conv_1_weights_2_address0;
reg    conv_1_weights_2_ce0;
wire   [31:0] conv_1_weights_2_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state13;
wire   [31:0] grp_fu_350_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state14;
wire   [14:0] add_ln8_fu_393_p2;
reg   [14:0] add_ln8_reg_965;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_405_p2;
reg   [0:0] icmp_ln11_reg_970;
wire   [0:0] icmp_ln8_fu_387_p2;
wire   [4:0] select_ln35_1_fu_419_p3;
reg   [4:0] select_ln35_1_reg_975;
wire   [5:0] select_ln35_4_fu_477_p3;
reg   [5:0] select_ln35_4_reg_981;
wire   [4:0] select_ln35_5_fu_485_p3;
reg   [4:0] select_ln35_5_reg_986;
wire   [11:0] zext_ln35_1_fu_493_p1;
reg   [11:0] zext_ln35_1_reg_991;
wire   [11:0] zext_ln35_3_fu_526_p1;
reg   [11:0] zext_ln35_3_reg_996;
wire   [11:0] zext_ln35_4_fu_544_p1;
reg   [11:0] zext_ln35_4_reg_1001;
wire   [63:0] zext_ln26_fu_548_p1;
reg   [63:0] zext_ln26_reg_1006;
wire   [9:0] zext_ln35_5_fu_552_p1;
reg   [9:0] zext_ln35_5_reg_1011;
reg   [14:0] conv_out_addr_reg_1018;
wire   [1:0] wr_fu_577_p2;
reg   [1:0] wr_reg_1026;
wire    ap_CS_fsm_state3;
wire   [4:0] sub_ln26_fu_599_p2;
reg   [4:0] sub_ln26_reg_1031;
wire   [0:0] icmp_ln18_fu_571_p2;
wire   [12:0] sub_ln26_2_fu_665_p2;
reg   [12:0] sub_ln26_2_reg_1038;
wire   [12:0] sub_ln26_3_fu_692_p2;
reg   [12:0] sub_ln26_3_reg_1043;
wire   [12:0] sub_ln26_4_fu_719_p2;
reg   [12:0] sub_ln26_4_reg_1048;
wire   [5:0] f_fu_725_p2;
reg   [5:0] f_reg_1058;
wire   [10:0] select_ln11_fu_736_p3;
reg   [10:0] select_ln11_reg_1063;
wire   [1:0] add_ln24_fu_749_p2;
reg   [1:0] add_ln24_reg_1071;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln24_fu_743_p2;
wire   [31:0] grp_fu_341_p2;
wire    ap_CS_fsm_state7;
wire   [1:0] add_ln24_1_fu_802_p2;
reg   [1:0] add_ln24_1_reg_1099;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln24_1_fu_796_p2;
wire    ap_CS_fsm_state11;
wire   [1:0] add_ln24_2_fu_855_p2;
reg   [1:0] add_ln24_2_reg_1127;
wire    ap_CS_fsm_state12;
wire   [0:0] icmp_ln24_2_fu_849_p2;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
reg   [14:0] indvar_flatten21_reg_195;
wire    ap_CS_fsm_state17;
reg   [4:0] r_0_reg_206;
reg   [10:0] indvar_flatten_reg_217;
reg   [4:0] c_0_reg_229;
reg   [5:0] f_0_reg_240;
reg   [1:0] wr_0_reg_251;
reg   [31:0] w_sum_0_reg_262;
reg   [31:0] w_sum_2_0_reg_274;
reg   [1:0] ch_0_0_reg_285;
reg   [31:0] w_sum_2_1_reg_296;
reg   [1:0] ch_0_1_reg_307;
reg   [31:0] w_sum_2_2_reg_318;
reg   [1:0] ch_0_2_reg_330;
wire   [63:0] zext_ln35_7_fu_566_p1;
wire   [63:0] zext_ln26_7_fu_781_p1;
wire   [63:0] zext_ln26_8_fu_791_p1;
wire   [63:0] zext_ln26_11_fu_834_p1;
wire   [63:0] zext_ln26_12_fu_844_p1;
wire   [63:0] zext_ln26_15_fu_887_p1;
wire   [63:0] zext_ln26_16_fu_897_p1;
reg   [31:0] grp_fu_341_p0;
reg   [31:0] grp_fu_341_p1;
reg   [31:0] grp_fu_350_p0;
wire   [4:0] r_fu_399_p2;
wire   [4:0] c_fu_375_p2;
wire   [4:0] add_ln26_2_fu_381_p2;
wire   [0:0] icmp_ln14_fu_453_p2;
wire   [0:0] xor_ln35_fu_447_p2;
wire   [4:0] select_ln35_fu_411_p3;
wire   [0:0] and_ln35_fu_459_p2;
wire   [0:0] or_ln35_fu_471_p2;
wire   [4:0] add_ln26_3_fu_465_p2;
wire   [9:0] grp_fu_953_p3;
wire   [14:0] tmp_1_fu_501_p3;
wire   [4:0] add_ln26_4_fu_512_p2;
wire   [4:0] select_ln35_2_fu_431_p3;
wire   [4:0] select_ln35_6_fu_518_p3;
wire   [4:0] add_ln26_5_fu_530_p2;
wire   [4:0] select_ln35_3_fu_439_p3;
wire   [4:0] select_ln35_7_fu_536_p3;
wire   [15:0] zext_ln26_1_fu_508_p1;
wire   [15:0] zext_ln35_6_fu_556_p1;
wire   [15:0] add_ln35_1_fu_560_p2;
wire   [3:0] tmp_8_fu_587_p3;
wire   [4:0] zext_ln26_2_fu_595_p1;
wire   [4:0] zext_ln18_fu_583_p1;
wire   [4:0] add_ln26_fu_605_p2;
wire   [9:0] tmp_9_fu_610_p3;
wire   [6:0] tmp_2_fu_622_p3;
wire   [10:0] zext_ln26_3_fu_618_p1;
wire   [10:0] zext_ln26_4_fu_630_p1;
wire   [10:0] sub_ln26_1_fu_634_p2;
wire  signed [11:0] sext_ln26_fu_640_p1;
wire  signed [11:0] add_ln26_6_fu_644_p2;
wire   [10:0] trunc_ln26_fu_653_p1;
wire   [12:0] p_shl2_cast_fu_657_p3;
wire  signed [12:0] sext_ln26_1_fu_649_p1;
wire  signed [11:0] add_ln26_7_fu_671_p2;
wire   [10:0] trunc_ln26_1_fu_680_p1;
wire   [12:0] p_shl1_cast_fu_684_p3;
wire  signed [12:0] sext_ln26_2_fu_676_p1;
wire  signed [11:0] add_ln26_8_fu_698_p2;
wire   [10:0] trunc_ln26_2_fu_707_p1;
wire   [12:0] p_shl_cast_fu_711_p3;
wire  signed [12:0] sext_ln26_3_fu_703_p1;
wire   [10:0] add_ln11_fu_730_p2;
wire   [4:0] zext_ln26_6_fu_759_p1;
wire   [4:0] add_ln26_9_fu_763_p2;
wire   [9:0] tmp_15_cast_fu_768_p3;
wire   [9:0] add_ln26_10_fu_776_p2;
wire   [12:0] zext_ln26_5_fu_755_p1;
wire   [12:0] add_ln26_11_fu_786_p2;
wire   [4:0] zext_ln26_10_fu_812_p1;
wire   [4:0] add_ln26_12_fu_816_p2;
wire   [9:0] tmp_17_cast_fu_821_p3;
wire   [9:0] add_ln26_13_fu_829_p2;
wire   [12:0] zext_ln26_9_fu_808_p1;
wire   [12:0] add_ln26_14_fu_839_p2;
wire   [4:0] zext_ln26_14_fu_865_p1;
wire   [4:0] add_ln26_15_fu_869_p2;
wire   [9:0] tmp_19_cast_fu_874_p3;
wire   [9:0] add_ln26_16_fu_882_p2;
wire   [12:0] zext_ln26_13_fu_861_p1;
wire   [12:0] add_ln26_17_fu_892_p2;
wire   [31:0] bitcast_ln34_fu_902_p1;
wire   [7:0] tmp_fu_906_p4;
wire   [22:0] trunc_ln34_fu_916_p1;
wire   [0:0] icmp_ln34_1_fu_926_p2;
wire   [0:0] icmp_ln34_fu_920_p2;
wire   [0:0] or_ln34_fu_932_p2;
wire   [0:0] tmp_7_fu_359_p2;
wire   [0:0] and_ln34_fu_938_p2;
wire   [4:0] grp_fu_953_p0;
wire   [5:0] grp_fu_953_p1;
wire   [4:0] grp_fu_953_p2;
reg   [16:0] ap_NS_fsm;
wire   [9:0] grp_fu_953_p00;
wire   [9:0] grp_fu_953_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_address0),
    .ce0(conv_1_weights_1_ce0),
    .q0(conv_1_weights_1_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_address0),
    .ce0(conv_1_weights_2_ce0),
    .q0(conv_1_weights_2_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_341_p0),
    .din1(grp_fu_341_p1),
    .ce(1'b1),
    .dout(grp_fu_341_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_350_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_350_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_341_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_7_fu_359_p2)
);

conv_1_mac_muladdhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
conv_1_mac_muladdhbi_U4(
    .din0(grp_fu_953_p0),
    .din1(grp_fu_953_p1),
    .din2(grp_fu_953_p2),
    .dout(grp_fu_953_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        c_0_reg_229 <= select_ln35_5_reg_986;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_229 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ch_0_0_reg_285 <= add_ln24_reg_1071;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_571_p2 == 1'd0))) begin
        ch_0_0_reg_285 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ch_0_1_reg_307 <= add_ln24_1_reg_1099;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln24_fu_743_p2 == 1'd1))) begin
        ch_0_1_reg_307 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ch_0_2_reg_330 <= add_ln24_2_reg_1127;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln24_1_fu_796_p2 == 1'd1))) begin
        ch_0_2_reg_330 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        f_0_reg_240 <= f_reg_1058;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_240 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten21_reg_195 <= add_ln8_reg_965;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten21_reg_195 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        indvar_flatten_reg_217 <= select_ln11_reg_1063;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_217 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        r_0_reg_206 <= select_ln35_1_reg_975;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_206 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln24_2_fu_849_p2 == 1'd1))) begin
        w_sum_0_reg_262 <= w_sum_2_2_reg_318;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_387_p2 == 1'd0))) begin
        w_sum_0_reg_262 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        w_sum_2_0_reg_274 <= grp_fu_341_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_571_p2 == 1'd0))) begin
        w_sum_2_0_reg_274 <= w_sum_0_reg_262;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        w_sum_2_1_reg_296 <= grp_fu_341_p2;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln24_fu_743_p2 == 1'd1))) begin
        w_sum_2_1_reg_296 <= w_sum_2_0_reg_274;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        w_sum_2_2_reg_318 <= grp_fu_341_p2;
    end else if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln24_1_fu_796_p2 == 1'd1))) begin
        w_sum_2_2_reg_318 <= w_sum_2_1_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln24_2_fu_849_p2 == 1'd1))) begin
        wr_0_reg_251 <= wr_reg_1026;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_387_p2 == 1'd0))) begin
        wr_0_reg_251 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln24_1_reg_1099 <= add_ln24_1_fu_802_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        add_ln24_2_reg_1127 <= add_ln24_2_fu_855_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln24_reg_1071 <= add_ln24_fu_749_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_965 <= add_ln8_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_387_p2 == 1'd0))) begin
        conv_out_addr_reg_1018 <= zext_ln35_7_fu_566_p1;
        icmp_ln11_reg_970 <= icmp_ln11_fu_405_p2;
        select_ln35_1_reg_975 <= select_ln35_1_fu_419_p3;
        select_ln35_4_reg_981 <= select_ln35_4_fu_477_p3;
        select_ln35_5_reg_986 <= select_ln35_5_fu_485_p3;
        zext_ln26_reg_1006[5 : 0] <= zext_ln26_fu_548_p1[5 : 0];
        zext_ln35_1_reg_991[4 : 0] <= zext_ln35_1_fu_493_p1[4 : 0];
        zext_ln35_3_reg_996[4 : 0] <= zext_ln35_3_fu_526_p1[4 : 0];
        zext_ln35_4_reg_1001[4 : 0] <= zext_ln35_4_fu_544_p1[4 : 0];
        zext_ln35_5_reg_1011[5 : 0] <= zext_ln35_5_fu_552_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_571_p2 == 1'd1))) begin
        f_reg_1058 <= f_fu_725_p2;
        select_ln11_reg_1063 <= select_ln11_fu_736_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_571_p2 == 1'd0))) begin
        sub_ln26_2_reg_1038 <= sub_ln26_2_fu_665_p2;
        sub_ln26_3_reg_1043 <= sub_ln26_3_fu_692_p2;
        sub_ln26_4_reg_1048 <= sub_ln26_4_fu_719_p2;
        sub_ln26_reg_1031 <= sub_ln26_fu_599_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wr_reg_1026 <= wr_fu_577_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_387_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_387_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_1_weights_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_1_weights_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        conv_input_address0 = zext_ln26_16_fu_897_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_input_address0 = zext_ln26_12_fu_844_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_input_address0 = zext_ln26_8_fu_791_p1;
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_341_p0 = w_sum_0_reg_262;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        grp_fu_341_p0 = w_sum_2_2_reg_318;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_341_p0 = w_sum_2_1_reg_296;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_341_p0 = w_sum_2_0_reg_274;
    end else begin
        grp_fu_341_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        grp_fu_341_p1 = conv_1_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state6))) begin
        grp_fu_341_p1 = grp_fu_350_p2;
    end else begin
        grp_fu_341_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_350_p0 = conv_1_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_350_p0 = conv_1_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        grp_fu_350_p0 = conv_1_weights_0_q0;
    end else begin
        grp_fu_350_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_387_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_571_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln24_fu_743_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln24_1_fu_796_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & (icmp_ln24_2_fu_849_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_730_p2 = (11'd1 + indvar_flatten_reg_217);

assign add_ln24_1_fu_802_p2 = (ch_0_1_reg_307 + 2'd1);

assign add_ln24_2_fu_855_p2 = (ch_0_2_reg_330 + 2'd1);

assign add_ln24_fu_749_p2 = (ch_0_0_reg_285 + 2'd1);

assign add_ln26_10_fu_776_p2 = (zext_ln35_5_reg_1011 + tmp_15_cast_fu_768_p3);

assign add_ln26_11_fu_786_p2 = (zext_ln26_5_fu_755_p1 + sub_ln26_2_reg_1038);

assign add_ln26_12_fu_816_p2 = (zext_ln26_10_fu_812_p1 + sub_ln26_reg_1031);

assign add_ln26_13_fu_829_p2 = (zext_ln35_5_reg_1011 + tmp_17_cast_fu_821_p3);

assign add_ln26_14_fu_839_p2 = (zext_ln26_9_fu_808_p1 + sub_ln26_3_reg_1043);

assign add_ln26_15_fu_869_p2 = (zext_ln26_14_fu_865_p1 + sub_ln26_reg_1031);

assign add_ln26_16_fu_882_p2 = (zext_ln35_5_reg_1011 + tmp_19_cast_fu_874_p3);

assign add_ln26_17_fu_892_p2 = (zext_ln26_13_fu_861_p1 + sub_ln26_4_reg_1048);

assign add_ln26_2_fu_381_p2 = (c_0_reg_229 + 5'd2);

assign add_ln26_3_fu_465_p2 = (select_ln35_fu_411_p3 + 5'd1);

assign add_ln26_4_fu_512_p2 = (select_ln35_fu_411_p3 + 5'd2);

assign add_ln26_5_fu_530_p2 = (select_ln35_fu_411_p3 + 5'd3);

assign add_ln26_6_fu_644_p2 = ($signed(zext_ln35_1_reg_991) + $signed(sext_ln26_fu_640_p1));

assign add_ln26_7_fu_671_p2 = ($signed(zext_ln35_3_reg_996) + $signed(sext_ln26_fu_640_p1));

assign add_ln26_8_fu_698_p2 = ($signed(zext_ln35_4_reg_1001) + $signed(sext_ln26_fu_640_p1));

assign add_ln26_9_fu_763_p2 = (zext_ln26_6_fu_759_p1 + sub_ln26_reg_1031);

assign add_ln26_fu_605_p2 = (select_ln35_1_reg_975 + zext_ln18_fu_583_p1);

assign add_ln35_1_fu_560_p2 = (zext_ln26_1_fu_508_p1 + zext_ln35_6_fu_556_p1);

assign add_ln8_fu_393_p2 = (indvar_flatten21_reg_195 + 15'd1);

assign and_ln34_fu_938_p2 = (tmp_7_fu_359_p2 & or_ln34_fu_932_p2);

assign and_ln35_fu_459_p2 = (xor_ln35_fu_447_p2 & icmp_ln14_fu_453_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_902_p1 = grp_fu_341_p2;

assign c_fu_375_p2 = (c_0_reg_229 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_1006;

assign conv_1_weights_0_address0 = zext_ln26_7_fu_781_p1;

assign conv_1_weights_1_address0 = zext_ln26_11_fu_834_p1;

assign conv_1_weights_2_address0 = zext_ln26_15_fu_887_p1;

assign conv_out_address0 = conv_out_addr_reg_1018;

assign conv_out_d0 = ((and_ln34_fu_938_p2[0:0] === 1'b1) ? grp_fu_341_p2 : 32'd0);

assign f_fu_725_p2 = (6'd1 + select_ln35_4_reg_981);

assign grp_fu_953_p0 = grp_fu_953_p00;

assign grp_fu_953_p00 = select_ln35_1_fu_419_p3;

assign grp_fu_953_p1 = 10'd26;

assign grp_fu_953_p2 = grp_fu_953_p20;

assign grp_fu_953_p20 = select_ln35_5_fu_485_p3;

assign icmp_ln11_fu_405_p2 = ((indvar_flatten_reg_217 == 11'd832) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_453_p2 = ((f_0_reg_240 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_571_p2 = ((wr_0_reg_251 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_796_p2 = ((ch_0_1_reg_307 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_849_p2 = ((ch_0_2_reg_330 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_743_p2 = ((ch_0_0_reg_285 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_926_p2 = ((trunc_ln34_fu_916_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_920_p2 = ((tmp_fu_906_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_387_p2 = ((indvar_flatten21_reg_195 == 15'd21632) ? 1'b1 : 1'b0);

assign or_ln34_fu_932_p2 = (icmp_ln34_fu_920_p2 | icmp_ln34_1_fu_926_p2);

assign or_ln35_fu_471_p2 = (icmp_ln11_fu_405_p2 | and_ln35_fu_459_p2);

assign p_shl1_cast_fu_684_p3 = {{trunc_ln26_1_fu_680_p1}, {2'd0}};

assign p_shl2_cast_fu_657_p3 = {{trunc_ln26_fu_653_p1}, {2'd0}};

assign p_shl_cast_fu_711_p3 = {{trunc_ln26_2_fu_707_p1}, {2'd0}};

assign r_fu_399_p2 = (r_0_reg_206 + 5'd1);

assign select_ln11_fu_736_p3 = ((icmp_ln11_reg_970[0:0] === 1'b1) ? 11'd1 : add_ln11_fu_730_p2);

assign select_ln35_1_fu_419_p3 = ((icmp_ln11_fu_405_p2[0:0] === 1'b1) ? r_fu_399_p2 : r_0_reg_206);

assign select_ln35_2_fu_431_p3 = ((icmp_ln11_fu_405_p2[0:0] === 1'b1) ? 5'd1 : c_fu_375_p2);

assign select_ln35_3_fu_439_p3 = ((icmp_ln11_fu_405_p2[0:0] === 1'b1) ? 5'd2 : add_ln26_2_fu_381_p2);

assign select_ln35_4_fu_477_p3 = ((or_ln35_fu_471_p2[0:0] === 1'b1) ? 6'd0 : f_0_reg_240);

assign select_ln35_5_fu_485_p3 = ((and_ln35_fu_459_p2[0:0] === 1'b1) ? add_ln26_3_fu_465_p2 : select_ln35_fu_411_p3);

assign select_ln35_6_fu_518_p3 = ((and_ln35_fu_459_p2[0:0] === 1'b1) ? add_ln26_4_fu_512_p2 : select_ln35_2_fu_431_p3);

assign select_ln35_7_fu_536_p3 = ((and_ln35_fu_459_p2[0:0] === 1'b1) ? add_ln26_5_fu_530_p2 : select_ln35_3_fu_439_p3);

assign select_ln35_fu_411_p3 = ((icmp_ln11_fu_405_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_229);

assign sext_ln26_1_fu_649_p1 = add_ln26_6_fu_644_p2;

assign sext_ln26_2_fu_676_p1 = add_ln26_7_fu_671_p2;

assign sext_ln26_3_fu_703_p1 = add_ln26_8_fu_698_p2;

assign sext_ln26_fu_640_p1 = $signed(sub_ln26_1_fu_634_p2);

assign sub_ln26_1_fu_634_p2 = (zext_ln26_3_fu_618_p1 - zext_ln26_4_fu_630_p1);

assign sub_ln26_2_fu_665_p2 = ($signed(p_shl2_cast_fu_657_p3) - $signed(sext_ln26_1_fu_649_p1));

assign sub_ln26_3_fu_692_p2 = ($signed(p_shl1_cast_fu_684_p3) - $signed(sext_ln26_2_fu_676_p1));

assign sub_ln26_4_fu_719_p2 = ($signed(p_shl_cast_fu_711_p3) - $signed(sext_ln26_3_fu_703_p1));

assign sub_ln26_fu_599_p2 = (zext_ln26_2_fu_595_p1 - zext_ln18_fu_583_p1);

assign tmp_15_cast_fu_768_p3 = {{add_ln26_9_fu_763_p2}, {5'd0}};

assign tmp_17_cast_fu_821_p3 = {{add_ln26_12_fu_816_p2}, {5'd0}};

assign tmp_19_cast_fu_874_p3 = {{add_ln26_15_fu_869_p2}, {5'd0}};

assign tmp_1_fu_501_p3 = {{grp_fu_953_p3}, {5'd0}};

assign tmp_2_fu_622_p3 = {{add_ln26_fu_605_p2}, {2'd0}};

assign tmp_8_fu_587_p3 = {{wr_0_reg_251}, {2'd0}};

assign tmp_9_fu_610_p3 = {{add_ln26_fu_605_p2}, {5'd0}};

assign tmp_fu_906_p4 = {{bitcast_ln34_fu_902_p1[30:23]}};

assign trunc_ln26_1_fu_680_p1 = add_ln26_7_fu_671_p2[10:0];

assign trunc_ln26_2_fu_707_p1 = add_ln26_8_fu_698_p2[10:0];

assign trunc_ln26_fu_653_p1 = add_ln26_6_fu_644_p2[10:0];

assign trunc_ln34_fu_916_p1 = bitcast_ln34_fu_902_p1[22:0];

assign wr_fu_577_p2 = (wr_0_reg_251 + 2'd1);

assign xor_ln35_fu_447_p2 = (icmp_ln11_fu_405_p2 ^ 1'd1);

assign zext_ln18_fu_583_p1 = wr_0_reg_251;

assign zext_ln26_10_fu_812_p1 = ch_0_1_reg_307;

assign zext_ln26_11_fu_834_p1 = add_ln26_13_fu_829_p2;

assign zext_ln26_12_fu_844_p1 = add_ln26_14_fu_839_p2;

assign zext_ln26_13_fu_861_p1 = ch_0_2_reg_330;

assign zext_ln26_14_fu_865_p1 = ch_0_2_reg_330;

assign zext_ln26_15_fu_887_p1 = add_ln26_16_fu_882_p2;

assign zext_ln26_16_fu_897_p1 = add_ln26_17_fu_892_p2;

assign zext_ln26_1_fu_508_p1 = tmp_1_fu_501_p3;

assign zext_ln26_2_fu_595_p1 = tmp_8_fu_587_p3;

assign zext_ln26_3_fu_618_p1 = tmp_9_fu_610_p3;

assign zext_ln26_4_fu_630_p1 = tmp_2_fu_622_p3;

assign zext_ln26_5_fu_755_p1 = ch_0_0_reg_285;

assign zext_ln26_6_fu_759_p1 = ch_0_0_reg_285;

assign zext_ln26_7_fu_781_p1 = add_ln26_10_fu_776_p2;

assign zext_ln26_8_fu_791_p1 = add_ln26_11_fu_786_p2;

assign zext_ln26_9_fu_808_p1 = ch_0_1_reg_307;

assign zext_ln26_fu_548_p1 = select_ln35_4_fu_477_p3;

assign zext_ln35_1_fu_493_p1 = select_ln35_5_fu_485_p3;

assign zext_ln35_3_fu_526_p1 = select_ln35_6_fu_518_p3;

assign zext_ln35_4_fu_544_p1 = select_ln35_7_fu_536_p3;

assign zext_ln35_5_fu_552_p1 = select_ln35_4_fu_477_p3;

assign zext_ln35_6_fu_556_p1 = select_ln35_4_fu_477_p3;

assign zext_ln35_7_fu_566_p1 = add_ln35_1_fu_560_p2;

always @ (posedge ap_clk) begin
    zext_ln35_1_reg_991[11:5] <= 7'b0000000;
    zext_ln35_3_reg_996[11:5] <= 7'b0000000;
    zext_ln35_4_reg_1001[11:5] <= 7'b0000000;
    zext_ln26_reg_1006[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_5_reg_1011[9:6] <= 4'b0000;
end

endmodule //conv_1
