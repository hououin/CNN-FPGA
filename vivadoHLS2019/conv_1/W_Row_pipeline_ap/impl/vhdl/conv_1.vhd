-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_0_ce0 : OUT STD_LOGIC;
    conv_input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_0_ce1 : OUT STD_LOGIC;
    conv_input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_1_ce0 : OUT STD_LOGIC;
    conv_input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_1_ce1 : OUT STD_LOGIC;
    conv_input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_2_ce0 : OUT STD_LOGIC;
    conv_input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_input_2_ce1 : OUT STD_LOGIC;
    conv_input_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.022200,HLS_SYN_LAT=1168134,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=1141,HLS_SYN_LUT=1888,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (19 downto 0) := "00000000010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (19 downto 0) := "00000000100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (19 downto 0) := "00000001000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (19 downto 0) := "00000010000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (19 downto 0) := "00000100000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (19 downto 0) := "00001000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (19 downto 0) := "00010000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (19 downto 0) := "00100000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (19 downto 0) := "01000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (19 downto 0) := "10000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv16_FD80 : STD_LOGIC_VECTOR (15 downto 0) := "1111110110000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv12_9C0 : STD_LOGIC_VECTOR (11 downto 0) := "100111000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten47_reg_275 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_0_reg_286 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten14_reg_297 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_0_reg_308 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_319 : STD_LOGIC_VECTOR (7 downto 0);
    signal f_0_reg_330 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_341 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_382 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_868 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_368_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_387 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal grp_fu_364_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_392 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state15_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state17_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state19_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal reg_397 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal icmp_ln8_fu_414_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln8_reg_868_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln8_reg_872 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln35_1_fu_446_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_877 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_fu_520_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_reg_883 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_1_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_1_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln26_fu_604_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_reg_894 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln26_2_fu_612_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln26_2_reg_899 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_9_fu_715_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_9_reg_931 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln14_fu_727_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln14_reg_956 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_fu_741_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln11_reg_961 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_input_1_load_reg_986 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_2_load_reg_991 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_l_reg_996 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_0_load_1_reg_1001 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_1_load_1_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_2_load_1_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_l_reg_1016 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln26_1_fu_755_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_1_load_2_reg_1026 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_2_load_2_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_1_2_reg_1041 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_1_2_2_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal wr_fu_763_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1051 : STD_LOGIC_VECTOR (1 downto 0);
    signal conv_out_addr_reg_1057 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln18_1_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_1062 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_sum_3_2_2_reg_1071 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal conv_1_bias_load_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten47_phi_fu_279_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_290_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten14_phi_fu_301_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_phi_mux_c_0_phi_fu_312_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_323_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_f_0_phi_fu_334_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_345_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_0_phi_fu_356_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_5_fu_646_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_1_fu_708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_749_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln35_5_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_3_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_364_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_368_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal icmp_ln11_fu_432_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_426_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_402_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_408_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_438_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_3_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_4_fu_532_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_454_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_6_fu_538_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_5_fu_550_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_462_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_fu_556_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln35_1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln35_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_4_fu_512_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln35_2_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_586_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_628_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_1_fu_620_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_4_fu_636_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_6_fu_640_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_fu_624_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_653_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_659_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_671_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_6_fu_667_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_679_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_fu_528_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_fu_683_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_7_fu_689_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_3_fu_546_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_8_fu_702_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_4_fu_564_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_fu_735_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage17 : BOOLEAN;
    signal grp_fu_859_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_774_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_2_fu_785_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_fu_781_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_792_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln34_fu_808_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_812_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_822_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_832_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_826_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_838_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_844_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_859_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_859_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_859_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage4_00001 : BOOLEAN;
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state14_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_state16_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_state18_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_859_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_859_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_weights_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_address0,
        ce0 => conv_1_weights_0_0_ce0,
        q0 => conv_1_weights_0_0_q0);

    conv_1_weights_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_address0,
        ce0 => conv_1_weights_1_0_ce0,
        q0 => conv_1_weights_1_0_q0);

    conv_1_weights_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_address0,
        ce0 => conv_1_weights_2_0_ce0,
        q0 => conv_1_weights_2_0_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_364_p0,
        din1 => grp_fu_364_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_364_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_368_p0,
        din1 => grp_fu_368_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_368_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_364_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_5_fu_376_p2);

    conv_1_mac_muladdhbi_U4 : component conv_1_mac_muladdhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_859_p0,
        din1 => grp_fu_859_p1,
        din2 => grp_fu_859_p2,
        dout => grp_fu_859_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_308_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                c_0_reg_308 <= select_ln35_5_reg_883;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_308 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                f_0_reg_330 <= select_ln26_2_reg_899;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_330 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten14_reg_297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                indvar_flatten14_reg_297 <= select_ln11_reg_961;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten14_reg_297 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten47_reg_275_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                indvar_flatten47_reg_275 <= add_ln8_reg_872;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten47_reg_275 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                indvar_flatten_reg_319 <= select_ln14_reg_956;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_319 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                r_0_reg_286 <= select_ln35_1_reg_877;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_286 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_352_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_868_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_0_reg_352 <= w_sum_3_2_2_reg_1071;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_sum_0_reg_352 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wr_0_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
                wr_0_reg_341 <= wr_reg_1051;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                wr_0_reg_341 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_fu_414_p2 = ap_const_lv1_0))) then
                add_ln26_9_reg_931 <= add_ln26_9_fu_715_p2;
                or_ln26_1_reg_889 <= or_ln26_1_fu_598_p2;
                select_ln26_reg_894 <= select_ln26_fu_604_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln8_reg_872 <= add_ln8_fu_420_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_1_reg_1062 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_bias_load_reg_1077 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_868 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_1_0_l_reg_996 <= conv_1_weights_1_0_q0;
                conv_1_weights_2_0_l_reg_1016 <= conv_1_weights_2_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_868 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_input_0_load_1_reg_1001 <= conv_input_0_q1;
                conv_input_1_load_1_reg_1006 <= conv_input_1_q1;
                conv_input_1_load_reg_986 <= conv_input_1_q0;
                conv_input_2_load_1_reg_1011 <= conv_input_2_q1;
                conv_input_2_load_reg_991 <= conv_input_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then
                conv_input_1_load_2_reg_1026 <= conv_input_1_q0;
                conv_input_2_load_2_reg_1031 <= conv_input_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then
                conv_out_addr_reg_1057 <= zext_ln35_5_fu_798_p1(15 - 1 downto 0);
                icmp_ln18_1_reg_1062 <= icmp_ln18_1_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln8_reg_868 <= icmp_ln8_fu_414_p2;
                icmp_ln8_reg_868_pp0_iter1_reg <= icmp_ln8_reg_868;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_868 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_382 <= conv_input_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)))) then
                reg_387 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_868 = ap_const_lv1_0)))) then
                reg_392 <= grp_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0)))) then
                reg_397 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_414_p2 = ap_const_lv1_0))) then
                select_ln11_reg_961 <= select_ln11_fu_741_p3;
                select_ln14_reg_956 <= select_ln14_fu_727_p3;
                select_ln26_2_reg_899 <= select_ln26_2_fu_612_p3;
                select_ln35_1_reg_877 <= select_ln35_1_fu_446_p3;
                select_ln35_5_reg_883 <= select_ln35_5_fu_520_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then
                tmp_1_1_1_reg_1036 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then
                tmp_1_2_2_reg_1046 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then
                tmp_1_2_reg_1041 <= grp_fu_368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_868_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                w_sum_3_2_2_reg_1071 <= grp_fu_364_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then
                wr_reg_1051 <= wr_fu_763_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage4, icmp_ln8_fu_414_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln8_fu_414_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln8_fu_414_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage4_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_fu_735_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten14_phi_fu_301_p4) + unsigned(ap_const_lv12_1));
    add_ln14_fu_721_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_323_p4) + unsigned(ap_const_lv8_1));
    add_ln26_2_fu_408_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_312_p4) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_500_p2 <= std_logic_vector(unsigned(select_ln35_fu_438_p3) + unsigned(ap_const_lv5_1));
    add_ln26_4_fu_532_p2 <= std_logic_vector(unsigned(select_ln35_fu_438_p3) + unsigned(ap_const_lv5_2));
    add_ln26_5_fu_550_p2 <= std_logic_vector(unsigned(select_ln35_fu_438_p3) + unsigned(ap_const_lv5_3));
    add_ln26_6_fu_640_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_620_p1) + unsigned(zext_ln26_4_fu_636_p1));
    add_ln26_7_fu_689_p2 <= std_logic_vector(unsigned(zext_ln35_1_fu_528_p1) + unsigned(sub_ln26_fu_683_p2));
    add_ln26_8_fu_702_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_546_p1) + unsigned(sub_ln26_fu_683_p2));
    add_ln26_9_fu_715_p2 <= std_logic_vector(unsigned(zext_ln35_4_fu_564_p1) + unsigned(sub_ln26_fu_683_p2));
    add_ln26_fu_653_p2 <= std_logic_vector(unsigned(select_ln35_1_fu_446_p3) + unsigned(zext_ln18_fu_624_p1));
    add_ln35_1_fu_792_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_785_p1) + unsigned(zext_ln26_fu_781_p1));
    add_ln8_fu_420_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten47_phi_fu_279_p4) + unsigned(ap_const_lv16_1));
    and_ln34_fu_844_p2 <= (tmp_5_fu_376_p2 and or_ln34_fu_838_p2);
    and_ln35_1_fu_494_p2 <= (xor_ln35_fu_470_p2 and icmp_ln14_fu_488_p2);
    and_ln35_2_fu_580_p2 <= (or_ln35_1_fu_574_p2 and and_ln35_fu_482_p2);
    and_ln35_fu_482_p2 <= (xor_ln35_fu_470_p2 and icmp_ln18_fu_476_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state25 <= ap_CS_fsm(19);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_414_p2)
    begin
        if ((icmp_ln8_fu_414_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_312_p4_assign_proc : process(c_0_reg_308, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, select_ln35_5_reg_883, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_312_p4 <= select_ln35_5_reg_883;
        else 
            ap_phi_mux_c_0_phi_fu_312_p4 <= c_0_reg_308;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_334_p4_assign_proc : process(f_0_reg_330, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, select_ln26_2_reg_899, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_334_p4 <= select_ln26_2_reg_899;
        else 
            ap_phi_mux_f_0_phi_fu_334_p4 <= f_0_reg_330;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten14_phi_fu_301_p4_assign_proc : process(indvar_flatten14_reg_297, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, select_ln11_reg_961, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten14_phi_fu_301_p4 <= select_ln11_reg_961;
        else 
            ap_phi_mux_indvar_flatten14_phi_fu_301_p4 <= indvar_flatten14_reg_297;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten47_phi_fu_279_p4_assign_proc : process(indvar_flatten47_reg_275, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, add_ln8_reg_872, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten47_phi_fu_279_p4 <= add_ln8_reg_872;
        else 
            ap_phi_mux_indvar_flatten47_phi_fu_279_p4 <= indvar_flatten47_reg_275;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_323_p4_assign_proc : process(indvar_flatten_reg_319, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, select_ln14_reg_956, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_323_p4 <= select_ln14_reg_956;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_323_p4 <= indvar_flatten_reg_319;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_290_p4_assign_proc : process(r_0_reg_286, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, select_ln35_1_reg_877, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_290_p4 <= select_ln35_1_reg_877;
        else 
            ap_phi_mux_r_0_phi_fu_290_p4 <= r_0_reg_286;
        end if; 
    end process;


    ap_phi_mux_w_sum_0_phi_fu_356_p4_assign_proc : process(w_sum_0_reg_352, ap_CS_fsm_pp0_stage2, icmp_ln8_reg_868_pp0_iter1_reg, w_sum_3_2_2_reg_1071, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_868_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w_sum_0_phi_fu_356_p4 <= w_sum_3_2_2_reg_1071;
        else 
            ap_phi_mux_w_sum_0_phi_fu_356_p4 <= w_sum_0_reg_352;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_345_p4_assign_proc : process(wr_0_reg_341, icmp_ln8_reg_868, ap_CS_fsm_pp0_stage0, wr_reg_1051, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_868 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_345_p4 <= wr_reg_1051;
        else 
            ap_phi_mux_wr_0_phi_fu_345_p4 <= wr_0_reg_341;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_808_p1 <= grp_fu_364_p2;
    c_fu_402_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_312_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_3_fu_788_p1(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_address0 <= zext_ln26_5_fu_646_p1(7 - 1 downto 0);

    conv_1_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_address0 <= zext_ln26_5_fu_646_p1(7 - 1 downto 0);

    conv_1_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_address0 <= zext_ln26_5_fu_646_p1(7 - 1 downto 0);

    conv_1_weights_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln26_fu_695_p1, zext_ln26_8_fu_749_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_0_address0 <= zext_ln26_8_fu_749_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_0_address0 <= sext_ln26_fu_695_p1(10 - 1 downto 0);
            else 
                conv_input_0_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    conv_input_0_address1 <= sext_ln26_1_fu_708_p1(10 - 1 downto 0);

    conv_input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_0_ce0 <= ap_const_logic_1;
        else 
            conv_input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_0_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_input_0_ce1 <= ap_const_logic_1;
        else 
            conv_input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln26_fu_695_p1, zext_ln26_8_fu_749_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_1_address0 <= zext_ln26_8_fu_749_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_1_address0 <= sext_ln26_fu_695_p1(10 - 1 downto 0);
            else 
                conv_input_1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    conv_input_1_address1 <= sext_ln26_1_fu_708_p1(10 - 1 downto 0);

    conv_input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_1_ce0 <= ap_const_logic_1;
        else 
            conv_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_1_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_input_1_ce1 <= ap_const_logic_1;
        else 
            conv_input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln26_fu_695_p1, zext_ln26_8_fu_749_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_2_address0 <= zext_ln26_8_fu_749_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_2_address0 <= sext_ln26_fu_695_p1(10 - 1 downto 0);
            else 
                conv_input_2_address0 <= "XXXXXXXXXX";
            end if;
        else 
            conv_input_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    conv_input_2_address1 <= sext_ln26_1_fu_708_p1(10 - 1 downto 0);

    conv_input_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_input_2_ce0 <= ap_const_logic_1;
        else 
            conv_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_2_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_input_2_ce1 <= ap_const_logic_1;
        else 
            conv_input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1057;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_364_p2 when (and_ln34_fu_844_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, icmp_ln18_1_reg_1062, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln18_1_reg_1062 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_586_p2 <= std_logic_vector(unsigned(select_ln35_4_fu_512_p3) + unsigned(ap_const_lv6_1));

    grp_fu_364_p0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, reg_392, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, select_ln26_1_fu_755_p3, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage10, w_sum_3_2_2_reg_1071, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_364_p0 <= w_sum_3_2_2_reg_1071;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_364_p0 <= reg_392;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_364_p0 <= select_ln26_1_fu_755_p3;
        else 
            grp_fu_364_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_364_p1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, grp_fu_368_p2, reg_387, ap_CS_fsm_pp0_stage3, reg_397, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, tmp_1_1_1_reg_1036, ap_CS_fsm_pp0_stage6, tmp_1_2_reg_1041, ap_CS_fsm_pp0_stage8, tmp_1_2_2_reg_1046, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, conv_1_bias_load_reg_1077, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_364_p1 <= conv_1_bias_load_reg_1077;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_364_p1 <= tmp_1_2_2_reg_1046;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_364_p1 <= tmp_1_2_reg_1041;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_364_p1 <= tmp_1_1_1_reg_1036;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_364_p1 <= reg_397;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_364_p1 <= reg_387;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_364_p1 <= grp_fu_368_p2;
        else 
            grp_fu_364_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_368_p0_assign_proc : process(conv_1_weights_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, conv_input_1_load_reg_986, conv_input_2_load_reg_991, conv_1_weights_1_0_l_reg_996, conv_input_1_load_1_reg_1006, conv_input_2_load_1_reg_1011, conv_1_weights_2_0_l_reg_1016, conv_input_1_load_2_reg_1026, conv_input_2_load_2_reg_1031, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage3, ap_block_pp0_stage5, ap_block_pp0_stage7, ap_block_pp0_stage9)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                grp_fu_368_p0 <= conv_input_2_load_2_reg_1031;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                grp_fu_368_p0 <= conv_input_1_load_2_reg_1026;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                grp_fu_368_p0 <= conv_1_weights_2_0_l_reg_1016;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                grp_fu_368_p0 <= conv_input_2_load_1_reg_1011;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                grp_fu_368_p0 <= conv_input_1_load_1_reg_1006;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_368_p0 <= conv_1_weights_1_0_l_reg_996;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_368_p0 <= conv_input_2_load_reg_991;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_368_p0 <= conv_input_1_load_reg_986;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_368_p0 <= conv_1_weights_0_0_q0;
            else 
                grp_fu_368_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_368_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_368_p1_assign_proc : process(conv_input_0_q0, reg_382, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, conv_input_0_load_1_reg_1001, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage2, ap_block_pp0_stage1, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage3, ap_block_pp0_stage5, ap_block_pp0_stage7, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_368_p1 <= reg_382;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_368_p1 <= conv_input_0_load_1_reg_1001;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_368_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_368_p1 <= conv_input_0_q0;
        else 
            grp_fu_368_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_859_p0 <= grp_fu_859_p00(5 - 1 downto 0);
    grp_fu_859_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_reg_877),10));
    grp_fu_859_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_859_p2 <= grp_fu_859_p20(5 - 1 downto 0);
    grp_fu_859_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_reg_883),10));
    icmp_ln11_fu_432_p2 <= "1" when (ap_phi_mux_indvar_flatten14_phi_fu_301_p4 = ap_const_lv12_9C0) else "0";
    icmp_ln14_fu_488_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_323_p4 = ap_const_lv8_60) else "0";
    icmp_ln18_1_fu_803_p2 <= "1" when (wr_reg_1051 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_476_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_345_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_832_p2 <= "1" when (trunc_ln34_fu_822_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_826_p2 <= "0" when (tmp_fu_812_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_414_p2 <= "1" when (ap_phi_mux_indvar_flatten47_phi_fu_279_p4 = ap_const_lv16_FD80) else "0";
    or_ln26_1_fu_598_p2 <= (or_ln26_fu_592_p2 or icmp_ln11_fu_432_p2);
    or_ln26_fu_592_p2 <= (and_ln35_2_fu_580_p2 or and_ln35_1_fu_494_p2);
    or_ln34_fu_838_p2 <= (icmp_ln34_fu_826_p2 or icmp_ln34_1_fu_832_p2);
    or_ln35_1_fu_574_p2 <= (xor_ln35_1_fu_568_p2 or icmp_ln11_fu_432_p2);
    or_ln35_fu_506_p2 <= (icmp_ln11_fu_432_p2 or and_ln35_1_fu_494_p2);
    r_fu_426_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_290_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_741_p3 <= 
        ap_const_lv12_1 when (icmp_ln11_fu_432_p2(0) = '1') else 
        add_ln11_fu_735_p2;
    select_ln14_fu_727_p3 <= 
        ap_const_lv8_1 when (or_ln35_fu_506_p2(0) = '1') else 
        add_ln14_fu_721_p2;
    select_ln26_1_fu_755_p3 <= 
        ap_const_lv32_0 when (or_ln26_1_reg_889(0) = '1') else 
        ap_phi_mux_w_sum_0_phi_fu_356_p4;
    select_ln26_2_fu_612_p3 <= 
        f_fu_586_p2 when (and_ln35_2_fu_580_p2(0) = '1') else 
        select_ln35_4_fu_512_p3;
    select_ln26_fu_604_p3 <= 
        ap_const_lv2_0 when (or_ln26_1_fu_598_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_345_p4;
    select_ln35_1_fu_446_p3 <= 
        r_fu_426_p2 when (icmp_ln11_fu_432_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_290_p4;
    select_ln35_2_fu_454_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_432_p2(0) = '1') else 
        c_fu_402_p2;
    select_ln35_3_fu_462_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_432_p2(0) = '1') else 
        add_ln26_2_fu_408_p2;
    select_ln35_4_fu_512_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_506_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_334_p4;
    select_ln35_5_fu_520_p3 <= 
        add_ln26_3_fu_500_p2 when (and_ln35_1_fu_494_p2(0) = '1') else 
        select_ln35_fu_438_p3;
    select_ln35_6_fu_538_p3 <= 
        add_ln26_4_fu_532_p2 when (and_ln35_1_fu_494_p2(0) = '1') else 
        select_ln35_2_fu_454_p3;
    select_ln35_7_fu_556_p3 <= 
        add_ln26_5_fu_550_p2 when (and_ln35_1_fu_494_p2(0) = '1') else 
        select_ln35_3_fu_462_p3;
    select_ln35_fu_438_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_432_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_312_p4;
        sext_ln26_1_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_8_fu_702_p2),64));

        sext_ln26_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_7_fu_689_p2),64));

    sub_ln26_fu_683_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_667_p1) - unsigned(zext_ln26_7_fu_679_p1));
    tmp_1_fu_774_p3 <= (grp_fu_859_p3 & ap_const_lv5_0);
    tmp_3_fu_628_p3 <= (select_ln26_fu_604_p3 & ap_const_lv5_0);
    tmp_6_fu_659_p3 <= (add_ln26_fu_653_p2 & ap_const_lv5_0);
    tmp_7_fu_671_p3 <= (add_ln26_fu_653_p2 & ap_const_lv2_0);
    tmp_fu_812_p4 <= bitcast_ln34_fu_808_p1(30 downto 23);
    trunc_ln34_fu_822_p1 <= bitcast_ln34_fu_808_p1(23 - 1 downto 0);
    wr_fu_763_p2 <= std_logic_vector(unsigned(select_ln26_reg_894) + unsigned(ap_const_lv2_1));
    xor_ln35_1_fu_568_p2 <= (icmp_ln14_fu_488_p2 xor ap_const_lv1_1);
    xor_ln35_fu_470_p2 <= (icmp_ln11_fu_432_p2 xor ap_const_lv1_1);
    zext_ln18_fu_624_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_fu_604_p3),5));
    zext_ln26_1_fu_620_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_fu_612_p3),8));
    zext_ln26_2_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_reg_899),16));
    zext_ln26_3_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_2_reg_899),64));
    zext_ln26_4_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_628_p3),8));
    zext_ln26_5_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_640_p2),64));
    zext_ln26_6_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_659_p3),11));
    zext_ln26_7_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_671_p3),11));
    zext_ln26_8_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_reg_931),64));
    zext_ln26_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_774_p3),16));
    zext_ln35_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_fu_520_p3),11));
    zext_ln35_3_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_6_fu_538_p3),11));
    zext_ln35_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_7_fu_556_p3),11));
    zext_ln35_5_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_792_p2),64));
end behav;
