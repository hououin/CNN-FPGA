// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=1297921,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=6,HLS_SYN_FF=714,HLS_SYN_LUT=1584,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_0_address0,
        conv_input_0_ce0,
        conv_input_0_q0,
        conv_input_1_address0,
        conv_input_1_ce0,
        conv_input_1_q0,
        conv_input_2_address0,
        conv_input_2_ce0,
        conv_input_2_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_pp0_stage1 = 11'd8;
parameter    ap_ST_fsm_pp0_stage2 = 11'd16;
parameter    ap_ST_fsm_pp0_stage3 = 11'd32;
parameter    ap_ST_fsm_pp0_stage4 = 11'd64;
parameter    ap_ST_fsm_pp0_stage5 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] conv_input_0_address0;
output   conv_input_0_ce0;
input  [31:0] conv_input_0_q0;
output  [9:0] conv_input_1_address0;
output   conv_input_1_ce0;
input  [31:0] conv_input_1_q0;
output  [9:0] conv_input_2_address0;
output   conv_input_2_ce0;
input  [31:0] conv_input_2_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_input_0_ce0;
reg conv_input_1_ce0;
reg conv_input_2_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
reg   [3:0] indvar_flatten_reg_243;
reg   [1:0] wr_0_reg_254;
reg   [31:0] w_sum_1_reg_265;
reg   [1:0] wc_0_reg_277;
wire   [31:0] grp_fu_294_p2;
reg   [31:0] reg_308;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln18_reg_726;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_288_p2;
reg   [31:0] reg_313;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [0:0] icmp_ln8_fu_318_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] add_ln8_fu_324_p2;
reg   [14:0] add_ln8_reg_684;
wire   [0:0] icmp_ln11_fu_336_p2;
reg   [0:0] icmp_ln11_reg_689;
wire   [4:0] select_ln35_1_fu_350_p3;
reg   [4:0] select_ln35_1_reg_694;
wire   [5:0] select_ln35_2_fu_392_p3;
reg   [5:0] select_ln35_2_reg_700;
wire   [4:0] select_ln35_3_fu_400_p3;
reg   [4:0] select_ln35_3_reg_705;
wire   [63:0] zext_ln26_fu_423_p1;
reg   [63:0] zext_ln26_reg_711;
wire   [9:0] zext_ln35_2_fu_427_p1;
reg   [9:0] zext_ln35_2_reg_716;
reg   [14:0] conv_out_addr_reg_721;
wire   [0:0] icmp_ln18_fu_446_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_726_pp0_iter1_reg;
wire   [3:0] add_ln18_1_fu_452_p2;
reg   [3:0] add_ln18_1_reg_730;
wire   [1:0] select_ln18_fu_470_p3;
reg   [1:0] select_ln18_reg_735;
wire   [1:0] select_ln18_1_fu_478_p3;
reg   [1:0] select_ln18_1_reg_740;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv_input_1_load_reg_775;
reg   [31:0] conv_input_2_load_reg_780;
reg   [31:0] tmp_1_2_reg_785;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [1:0] wc_fu_597_p2;
reg   [1:0] wc_reg_790;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state11;
wire   [5:0] f_fu_602_p2;
reg   [5:0] f_reg_805;
wire   [10:0] select_ln11_fu_613_p3;
reg   [10:0] select_ln11_reg_810;
wire    ap_CS_fsm_state12;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [14:0] indvar_flatten21_reg_187;
wire    ap_CS_fsm_state13;
reg   [4:0] r_0_reg_198;
reg   [10:0] indvar_flatten7_reg_209;
reg   [4:0] c_0_reg_221;
reg   [5:0] f_0_reg_232;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_247_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_258_p4;
wire   [31:0] ap_phi_mux_w_sum_1_phi_fu_269_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_281_p4;
wire   [63:0] zext_ln35_4_fu_441_p1;
wire   [63:0] zext_ln26_6_fu_570_p1;
wire  signed [63:0] sext_ln26_fu_590_p1;
reg   [31:0] grp_fu_288_p0;
reg   [31:0] grp_fu_288_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_294_p0;
reg   [31:0] grp_fu_294_p1;
wire    ap_block_pp0_stage1;
wire    ap_block_pp0_stage3;
wire   [4:0] r_fu_330_p2;
wire   [0:0] icmp_ln14_fu_368_p2;
wire   [0:0] xor_ln35_fu_362_p2;
wire   [4:0] select_ln35_fu_342_p3;
wire   [0:0] and_ln35_fu_374_p2;
wire   [0:0] or_ln35_fu_386_p2;
wire   [4:0] c_fu_380_p2;
wire   [9:0] grp_fu_671_p3;
wire   [14:0] tmp_1_fu_412_p3;
wire   [15:0] zext_ln11_fu_419_p1;
wire   [15:0] zext_ln35_3_fu_431_p1;
wire   [15:0] add_ln35_1_fu_435_p2;
wire   [0:0] icmp_ln21_fu_464_p2;
wire   [1:0] wr_fu_458_p2;
wire   [3:0] tmp_4_fu_490_p3;
wire   [4:0] zext_ln26_2_fu_498_p1;
wire   [4:0] zext_ln26_1_fu_486_p1;
wire   [4:0] add_ln18_fu_508_p2;
wire   [9:0] tmp_7_fu_513_p3;
wire   [6:0] tmp_8_fu_525_p3;
wire   [10:0] zext_ln26_3_fu_521_p1;
wire   [10:0] zext_ln26_4_fu_533_p1;
wire   [4:0] sub_ln26_fu_502_p2;
wire   [4:0] zext_ln26_5_fu_547_p1;
wire   [4:0] add_ln26_fu_551_p2;
wire   [9:0] tmp_10_cast_fu_557_p3;
wire   [9:0] add_ln26_2_fu_565_p2;
wire   [4:0] zext_ln21_fu_543_p1;
wire   [4:0] add_ln26_1_fu_575_p2;
wire   [10:0] sub_ln26_1_fu_537_p2;
wire   [10:0] zext_ln26_7_fu_580_p1;
wire   [10:0] add_ln26_3_fu_584_p2;
wire    ap_block_pp0_stage5;
wire   [10:0] add_ln11_1_fu_607_p2;
wire   [31:0] bitcast_ln34_fu_620_p1;
wire   [7:0] tmp_fu_624_p4;
wire   [22:0] trunc_ln34_fu_634_p1;
wire   [0:0] icmp_ln34_1_fu_644_p2;
wire   [0:0] icmp_ln34_fu_638_p2;
wire   [0:0] or_ln34_fu_650_p2;
wire   [0:0] tmp_6_fu_302_p2;
wire   [0:0] and_ln34_fu_656_p2;
wire   [4:0] grp_fu_671_p0;
wire   [5:0] grp_fu_671_p1;
wire   [4:0] grp_fu_671_p2;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_671_p00;
wire   [9:0] grp_fu_671_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_288_p0),
    .din1(grp_fu_288_p1),
    .ce(1'b1),
    .dout(grp_fu_288_p2)
);

conv_1_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_294_p0),
    .din1(grp_fu_294_p1),
    .ce(1'b1),
    .dout(grp_fu_294_p2)
);

conv_1_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_eOg_U3(
    .din0(grp_fu_288_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_302_p2)
);

conv_1_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
conv_1_mac_muladdfYi_U4(
    .din0(grp_fu_671_p0),
    .din1(grp_fu_671_p1),
    .din2(grp_fu_671_p2),
    .dout(grp_fu_671_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        c_0_reg_221 <= select_ln35_3_reg_705;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_221 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_0_reg_232 <= f_reg_805;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_232 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten21_reg_187 <= add_ln8_reg_684;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_187 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten7_reg_209 <= select_ln11_reg_810;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_209 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_243 <= add_ln18_1_reg_730;
    end else if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_243 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_0_reg_198 <= select_ln35_1_reg_694;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_198 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_1_reg_265 <= grp_fu_288_p2;
    end else if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_1_reg_265 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_277 <= wc_reg_790;
    end else if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_277 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_254 <= select_ln18_1_reg_740;
    end else if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_254 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln18_1_reg_730 <= add_ln18_1_fu_452_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_684 <= add_ln8_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_input_1_load_reg_775 <= conv_input_1_q0;
        conv_input_2_load_reg_780 <= conv_input_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_721 <= zext_ln35_4_fu_441_p1;
        icmp_ln11_reg_689 <= icmp_ln11_fu_336_p2;
        select_ln35_1_reg_694 <= select_ln35_1_fu_350_p3;
        select_ln35_2_reg_700 <= select_ln35_2_fu_392_p3;
        select_ln35_3_reg_705 <= select_ln35_3_fu_400_p3;
        zext_ln26_reg_711[5 : 0] <= zext_ln26_fu_423_p1[5 : 0];
        zext_ln35_2_reg_716[5 : 0] <= zext_ln35_2_fu_427_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        f_reg_805 <= f_fu_602_p2;
        select_ln11_reg_810 <= select_ln11_fu_613_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_726 <= icmp_ln18_fu_446_p2;
        icmp_ln18_reg_726_pp0_iter1_reg <= icmp_ln18_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((icmp_ln18_reg_726 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        reg_308 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_313 <= grp_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_446_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_1_reg_740 <= select_ln18_1_fu_478_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_446_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_reg_735 <= select_ln18_fu_470_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_1_2_reg_785 <= grp_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        wc_reg_790 <= wc_fu_597_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_446_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_318_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_247_p4 = add_ln18_1_reg_730;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_247_p4 = indvar_flatten_reg_243;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wc_0_phi_fu_281_p4 = wc_reg_790;
    end else begin
        ap_phi_mux_wc_0_phi_fu_281_p4 = wc_0_reg_277;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_726 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_258_p4 = select_ln18_1_reg_740;
    end else begin
        ap_phi_mux_wr_0_phi_fu_258_p4 = wr_0_reg_254;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_318_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_input_0_ce0 = 1'b1;
    end else begin
        conv_input_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_input_1_ce0 = 1'b1;
    end else begin
        conv_input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_input_2_ce0 = 1'b1;
    end else begin
        conv_input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_288_p0 = w_sum_1_reg_265;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_288_p0 = reg_313;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_288_p0 = ap_phi_mux_w_sum_1_phi_fu_269_p4;
    end else begin
        grp_fu_288_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_288_p1 = conv_1_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_288_p1 = tmp_1_2_reg_785;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_288_p1 = reg_308;
    end else if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_288_p1 = grp_fu_294_p2;
    end else begin
        grp_fu_288_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_294_p0 = conv_input_2_load_reg_780;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_294_p0 = conv_input_1_load_reg_775;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_294_p0 = conv_1_weights_0_q0;
        end else begin
            grp_fu_294_p0 = 'bx;
        end
    end else begin
        grp_fu_294_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
        grp_fu_294_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_294_p1 = conv_input_0_q0;
    end else begin
        grp_fu_294_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_318_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_446_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_607_p2 = (11'd1 + indvar_flatten7_reg_209);

assign add_ln18_1_fu_452_p2 = (ap_phi_mux_indvar_flatten_phi_fu_247_p4 + 4'd1);

assign add_ln18_fu_508_p2 = (zext_ln26_1_fu_486_p1 + select_ln35_1_reg_694);

assign add_ln26_1_fu_575_p2 = (zext_ln21_fu_543_p1 + select_ln35_3_reg_705);

assign add_ln26_2_fu_565_p2 = (tmp_10_cast_fu_557_p3 + zext_ln35_2_reg_716);

assign add_ln26_3_fu_584_p2 = (sub_ln26_1_fu_537_p2 + zext_ln26_7_fu_580_p1);

assign add_ln26_fu_551_p2 = (sub_ln26_fu_502_p2 + zext_ln26_5_fu_547_p1);

assign add_ln35_1_fu_435_p2 = (zext_ln11_fu_419_p1 + zext_ln35_3_fu_431_p1);

assign add_ln8_fu_324_p2 = (indvar_flatten21_reg_187 + 15'd1);

assign and_ln34_fu_656_p2 = (tmp_6_fu_302_p2 & or_ln34_fu_650_p2);

assign and_ln35_fu_374_p2 = (xor_ln35_fu_362_p2 & icmp_ln14_fu_368_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_1_phi_fu_269_p4 = w_sum_1_reg_265;

assign bitcast_ln34_fu_620_p1 = grp_fu_288_p2;

assign c_fu_380_p2 = (select_ln35_fu_342_p3 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_711;

assign conv_1_weights_0_address0 = zext_ln26_6_fu_570_p1;

assign conv_input_0_address0 = sext_ln26_fu_590_p1;

assign conv_input_1_address0 = sext_ln26_fu_590_p1;

assign conv_input_2_address0 = sext_ln26_fu_590_p1;

assign conv_out_address0 = conv_out_addr_reg_721;

assign conv_out_d0 = ((and_ln34_fu_656_p2[0:0] === 1'b1) ? grp_fu_288_p2 : 32'd0);

assign f_fu_602_p2 = (6'd1 + select_ln35_2_reg_700);

assign grp_fu_671_p0 = grp_fu_671_p00;

assign grp_fu_671_p00 = select_ln35_1_fu_350_p3;

assign grp_fu_671_p1 = 10'd26;

assign grp_fu_671_p2 = grp_fu_671_p20;

assign grp_fu_671_p20 = select_ln35_3_fu_400_p3;

assign icmp_ln11_fu_336_p2 = ((indvar_flatten7_reg_209 == 11'd832) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_368_p2 = ((f_0_reg_232 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_446_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_247_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_464_p2 = ((ap_phi_mux_wc_0_phi_fu_281_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_644_p2 = ((trunc_ln34_fu_634_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_638_p2 = ((tmp_fu_624_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_318_p2 = ((indvar_flatten21_reg_187 == 15'd21632) ? 1'b1 : 1'b0);

assign or_ln34_fu_650_p2 = (icmp_ln34_fu_638_p2 | icmp_ln34_1_fu_644_p2);

assign or_ln35_fu_386_p2 = (icmp_ln11_fu_336_p2 | and_ln35_fu_374_p2);

assign r_fu_330_p2 = (r_0_reg_198 + 5'd1);

assign select_ln11_fu_613_p3 = ((icmp_ln11_reg_689[0:0] === 1'b1) ? 11'd1 : add_ln11_1_fu_607_p2);

assign select_ln18_1_fu_478_p3 = ((icmp_ln21_fu_464_p2[0:0] === 1'b1) ? wr_fu_458_p2 : ap_phi_mux_wr_0_phi_fu_258_p4);

assign select_ln18_fu_470_p3 = ((icmp_ln21_fu_464_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_281_p4);

assign select_ln35_1_fu_350_p3 = ((icmp_ln11_fu_336_p2[0:0] === 1'b1) ? r_fu_330_p2 : r_0_reg_198);

assign select_ln35_2_fu_392_p3 = ((or_ln35_fu_386_p2[0:0] === 1'b1) ? 6'd0 : f_0_reg_232);

assign select_ln35_3_fu_400_p3 = ((and_ln35_fu_374_p2[0:0] === 1'b1) ? c_fu_380_p2 : select_ln35_fu_342_p3);

assign select_ln35_fu_342_p3 = ((icmp_ln11_fu_336_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_221);

assign sext_ln26_fu_590_p1 = $signed(add_ln26_3_fu_584_p2);

assign sub_ln26_1_fu_537_p2 = (zext_ln26_3_fu_521_p1 - zext_ln26_4_fu_533_p1);

assign sub_ln26_fu_502_p2 = (zext_ln26_2_fu_498_p1 - zext_ln26_1_fu_486_p1);

assign tmp_10_cast_fu_557_p3 = {{add_ln26_fu_551_p2}, {5'd0}};

assign tmp_1_fu_412_p3 = {{grp_fu_671_p3}, {5'd0}};

assign tmp_4_fu_490_p3 = {{select_ln18_1_fu_478_p3}, {2'd0}};

assign tmp_7_fu_513_p3 = {{add_ln18_fu_508_p2}, {5'd0}};

assign tmp_8_fu_525_p3 = {{add_ln18_fu_508_p2}, {2'd0}};

assign tmp_fu_624_p4 = {{bitcast_ln34_fu_620_p1[30:23]}};

assign trunc_ln34_fu_634_p1 = bitcast_ln34_fu_620_p1[22:0];

assign wc_fu_597_p2 = (select_ln18_reg_735 + 2'd1);

assign wr_fu_458_p2 = (ap_phi_mux_wr_0_phi_fu_258_p4 + 2'd1);

assign xor_ln35_fu_362_p2 = (icmp_ln11_fu_336_p2 ^ 1'd1);

assign zext_ln11_fu_419_p1 = tmp_1_fu_412_p3;

assign zext_ln21_fu_543_p1 = select_ln18_fu_470_p3;

assign zext_ln26_1_fu_486_p1 = select_ln18_1_fu_478_p3;

assign zext_ln26_2_fu_498_p1 = tmp_4_fu_490_p3;

assign zext_ln26_3_fu_521_p1 = tmp_7_fu_513_p3;

assign zext_ln26_4_fu_533_p1 = tmp_8_fu_525_p3;

assign zext_ln26_5_fu_547_p1 = select_ln18_fu_470_p3;

assign zext_ln26_6_fu_570_p1 = add_ln26_2_fu_565_p2;

assign zext_ln26_7_fu_580_p1 = add_ln26_1_fu_575_p2;

assign zext_ln26_fu_423_p1 = select_ln35_2_fu_392_p3;

assign zext_ln35_2_fu_427_p1 = select_ln35_2_fu_392_p3;

assign zext_ln35_3_fu_431_p1 = select_ln35_2_fu_392_p3;

assign zext_ln35_4_fu_441_p1 = add_ln35_1_fu_435_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_711[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_716[9:6] <= 4'b0000;
end

endmodule //conv_1
