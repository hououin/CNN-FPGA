// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=1580541,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=5,HLS_SYN_FF=738,HLS_SYN_LUT=1577,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_input_address1,
        conv_input_ce1,
        conv_input_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_pp0_stage0 = 14'd32;
parameter    ap_ST_fsm_pp0_stage1 = 14'd64;
parameter    ap_ST_fsm_pp0_stage2 = 14'd128;
parameter    ap_ST_fsm_pp0_stage3 = 14'd256;
parameter    ap_ST_fsm_pp0_stage4 = 14'd512;
parameter    ap_ST_fsm_pp0_stage5 = 14'd1024;
parameter    ap_ST_fsm_state14 = 14'd2048;
parameter    ap_ST_fsm_state15 = 14'd4096;
parameter    ap_ST_fsm_state16 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [11:0] conv_input_address1;
output   conv_input_ce1;
input  [31:0] conv_input_q1;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_input_address0;
reg conv_input_ce0;
reg conv_input_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
reg   [1:0] wc_0_reg_239;
reg   [31:0] w_sum_1_reg_251;
reg   [31:0] reg_284;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state13_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln21_reg_690;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state8_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_270_p2;
reg   [31:0] reg_290;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state9_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_263_p2;
reg   [31:0] reg_295;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state11_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [9:0] add_ln8_fu_300_p2;
reg   [9:0] add_ln8_reg_617;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_312_p2;
reg   [4:0] r_reg_625;
wire   [4:0] c_fu_324_p2;
reg   [4:0] c_reg_633;
wire    ap_CS_fsm_state3;
wire   [15:0] zext_ln14_fu_348_p1;
reg   [15:0] zext_ln14_reg_638;
wire   [0:0] icmp_ln11_fu_318_p2;
wire   [5:0] f_fu_358_p2;
reg   [5:0] f_reg_646;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_364_p1;
reg   [63:0] zext_ln26_reg_651;
wire   [0:0] icmp_ln14_fu_352_p2;
wire   [9:0] zext_ln35_1_fu_368_p1;
reg   [9:0] zext_ln35_1_reg_656;
reg   [14:0] conv_out_addr_reg_661;
wire   [0:0] icmp_ln18_fu_390_p2;
wire    ap_CS_fsm_state5;
wire   [1:0] wr_fu_396_p2;
reg   [1:0] wr_reg_670;
wire   [4:0] sub_ln26_fu_414_p2;
reg   [4:0] sub_ln26_reg_675;
wire  signed [11:0] sext_ln26_fu_456_p1;
reg  signed [11:0] sext_ln26_reg_680;
wire   [0:0] icmp_ln21_fu_460_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state12_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln21_reg_690_pp0_iter1_reg;
wire   [12:0] sub_ln26_2_fu_528_p2;
reg   [12:0] sub_ln26_2_reg_699;
reg   [31:0] conv_input_load_1_reg_724;
wire   [1:0] wc_fu_560_p2;
reg   [1:0] wc_reg_729;
reg   [31:0] tmp_1_2_reg_734;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state10_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state15;
wire    ap_block_pp0_stage2_subdone;
reg    ap_condition_pp0_exit_iter0_state8;
wire    ap_block_pp0_stage5_subdone;
reg   [4:0] r_0_reg_169;
reg   [9:0] phi_mul_reg_181;
reg   [4:0] c_0_reg_193;
wire   [0:0] icmp_ln8_fu_306_p2;
reg   [5:0] f_0_reg_205;
wire    ap_CS_fsm_state16;
reg   [1:0] wr_0_reg_216;
wire    ap_CS_fsm_state14;
reg   [31:0] w_sum_0_reg_227;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_243_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln35_3_fu_381_p1;
wire   [63:0] zext_ln26_5_fu_492_p1;
wire   [63:0] zext_ln26_7_fu_534_p1;
wire   [63:0] zext_ln26_8_fu_545_p1;
wire   [63:0] zext_ln26_9_fu_555_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_263_p0;
reg   [31:0] grp_fu_263_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_270_p0;
reg   [31:0] grp_fu_270_p1;
wire    ap_block_pp0_stage3;
wire   [9:0] zext_ln35_fu_330_p1;
wire   [9:0] add_ln35_fu_334_p2;
wire   [14:0] tmp_7_fu_340_p3;
wire   [15:0] zext_ln35_2_fu_372_p1;
wire   [15:0] add_ln35_1_fu_376_p2;
wire   [3:0] tmp_9_fu_402_p3;
wire   [4:0] zext_ln26_1_fu_410_p1;
wire   [4:0] zext_ln18_fu_386_p1;
wire   [4:0] add_ln26_fu_420_p2;
wire   [9:0] tmp_8_fu_426_p3;
wire   [6:0] tmp_10_fu_438_p3;
wire   [10:0] zext_ln26_2_fu_434_p1;
wire   [10:0] zext_ln26_3_fu_446_p1;
wire   [10:0] sub_ln26_1_fu_450_p2;
wire   [4:0] zext_ln26_4_fu_470_p1;
wire   [4:0] add_ln26_2_fu_474_p2;
wire   [9:0] tmp_13_cast_fu_479_p3;
wire   [9:0] add_ln26_3_fu_487_p2;
wire   [4:0] zext_ln21_fu_466_p1;
wire   [4:0] add_ln26_1_fu_497_p2;
wire   [11:0] zext_ln26_6_fu_503_p1;
wire  signed [11:0] add_ln26_4_fu_507_p2;
wire   [10:0] trunc_ln26_fu_516_p1;
wire   [12:0] p_shl3_cast_fu_520_p3;
wire  signed [12:0] sext_ln26_1_fu_512_p1;
wire   [12:0] add_ln26_5_fu_539_p2;
wire   [12:0] add_ln26_6_fu_550_p2;
wire   [31:0] bitcast_ln34_fu_566_p1;
wire   [7:0] tmp_fu_570_p4;
wire   [22:0] trunc_ln34_fu_580_p1;
wire   [0:0] icmp_ln34_1_fu_590_p2;
wire   [0:0] icmp_ln34_fu_584_p2;
wire   [0:0] or_ln34_fu_596_p2;
wire   [0:0] tmp_6_fu_278_p2;
wire   [0:0] and_ln34_fu_602_p2;
reg   [13:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_263_p0),
    .din1(grp_fu_263_p1),
    .ce(1'b1),
    .dout(grp_fu_263_p2)
);

conv_1_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_270_p0),
    .din1(grp_fu_270_p1),
    .ce(1'b1),
    .dout(grp_fu_270_p2)
);

conv_1_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_eOg_U3(
    .din0(grp_fu_263_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_278_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_condition_pp0_exit_iter0_state8))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln18_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln18_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_352_p2 == 1'd1))) begin
        c_0_reg_193 <= c_reg_633;
    end else if (((icmp_ln8_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_193 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        f_0_reg_205 <= f_reg_646;
    end else if (((icmp_ln11_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_205 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_318_p2 == 1'd1))) begin
        phi_mul_reg_181 <= add_ln8_reg_617;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_181 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_318_p2 == 1'd1))) begin
        r_0_reg_169 <= r_reg_625;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_169 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_0_reg_227 <= w_sum_1_reg_251;
    end else if (((icmp_ln14_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_227 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_690_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_sum_1_reg_251 <= grp_fu_263_p2;
    end else if (((icmp_ln18_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_251 <= w_sum_0_reg_227;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_239 <= wc_reg_729;
    end else if (((icmp_ln18_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_239 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        wr_0_reg_216 <= wr_reg_670;
    end else if (((icmp_ln14_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_216 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_617 <= add_ln8_fu_300_p2;
        r_reg_625 <= r_fu_312_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_633 <= c_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_input_load_1_reg_724 <= conv_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_352_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_addr_reg_661 <= zext_ln35_3_fu_381_p1;
        zext_ln26_reg_651[5 : 0] <= zext_ln26_fu_364_p1[5 : 0];
        zext_ln35_1_reg_656[5 : 0] <= zext_ln35_1_fu_368_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_646 <= f_fu_358_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln21_reg_690 <= icmp_ln21_fu_460_p2;
        icmp_ln21_reg_690_pp0_iter1_reg <= icmp_ln21_reg_690;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_690 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln21_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_284 <= conv_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln21_reg_690 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln21_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_290 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln21_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((icmp_ln21_reg_690 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_295 <= grp_fu_263_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln26_reg_680[11 : 2] <= sext_ln26_fu_456_p1[11 : 2];
        sub_ln26_reg_675 <= sub_ln26_fu_414_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_fu_460_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sub_ln26_2_reg_699 <= sub_ln26_2_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln21_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_1_2_reg_734 <= grp_fu_270_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        wc_reg_729 <= wc_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_670 <= wr_fu_396_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_318_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln14_reg_638[14 : 5] <= zext_ln14_fu_348_p1[14 : 5];
    end
end

always @ (*) begin
    if ((icmp_ln21_reg_690 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state8 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_306_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_reg_690 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wc_0_phi_fu_243_p4 = wc_reg_729;
    end else begin
        ap_phi_mux_wc_0_phi_fu_243_p4 = wc_0_reg_239;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_306_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_input_address0 = zext_ln26_9_fu_555_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_input_address0 = zext_ln26_7_fu_534_p1;
        end else begin
            conv_input_address0 = 'bx;
        end
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_input_ce1 = 1'b1;
    end else begin
        conv_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_263_p0 = w_sum_0_reg_227;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_263_p0 = reg_295;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_263_p0 = w_sum_1_reg_251;
    end else begin
        grp_fu_263_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        grp_fu_263_p1 = conv_1_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_263_p1 = tmp_1_2_reg_734;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_263_p1 = reg_290;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_263_p1 = grp_fu_270_p2;
    end else begin
        grp_fu_263_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_270_p0 = reg_284;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_270_p0 = conv_input_load_1_reg_724;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_270_p0 = conv_1_weights_0_q0;
        end else begin
            grp_fu_270_p0 = 'bx;
        end
    end else begin
        grp_fu_270_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_270_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_270_p1 = conv_input_q0;
    end else begin
        grp_fu_270_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_306_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_318_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_352_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_390_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((icmp_ln21_reg_690 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((icmp_ln21_reg_690 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln26_1_fu_497_p2 = (c_0_reg_193 + zext_ln21_fu_466_p1);

assign add_ln26_2_fu_474_p2 = (zext_ln26_4_fu_470_p1 + sub_ln26_reg_675);

assign add_ln26_3_fu_487_p2 = (zext_ln35_1_reg_656 + tmp_13_cast_fu_479_p3);

assign add_ln26_4_fu_507_p2 = ($signed(zext_ln26_6_fu_503_p1) + $signed(sext_ln26_reg_680));

assign add_ln26_5_fu_539_p2 = (13'd1 + sub_ln26_2_fu_528_p2);

assign add_ln26_6_fu_550_p2 = (13'd2 + sub_ln26_2_reg_699);

assign add_ln26_fu_420_p2 = (zext_ln18_fu_386_p1 + r_0_reg_169);

assign add_ln35_1_fu_376_p2 = (zext_ln14_reg_638 + zext_ln35_2_fu_372_p1);

assign add_ln35_fu_334_p2 = (phi_mul_reg_181 + zext_ln35_fu_330_p1);

assign add_ln8_fu_300_p2 = (phi_mul_reg_181 + 10'd26);

assign and_ln34_fu_602_p2 = (tmp_6_fu_278_p2 & or_ln34_fu_596_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln34_fu_566_p1 = grp_fu_263_p2;

assign c_fu_324_p2 = (c_0_reg_193 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_651;

assign conv_1_weights_0_address0 = zext_ln26_5_fu_492_p1;

assign conv_input_address1 = zext_ln26_8_fu_545_p1;

assign conv_out_address0 = conv_out_addr_reg_661;

assign conv_out_d0 = ((and_ln34_fu_602_p2[0:0] === 1'b1) ? grp_fu_263_p2 : 32'd0);

assign f_fu_358_p2 = (f_0_reg_205 + 6'd1);

assign icmp_ln11_fu_318_p2 = ((c_0_reg_193 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_352_p2 = ((f_0_reg_205 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_390_p2 = ((wr_0_reg_216 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_460_p2 = ((ap_phi_mux_wc_0_phi_fu_243_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_590_p2 = ((trunc_ln34_fu_580_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_584_p2 = ((tmp_fu_570_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_306_p2 = ((r_0_reg_169 == 5'd26) ? 1'b1 : 1'b0);

assign or_ln34_fu_596_p2 = (icmp_ln34_fu_584_p2 | icmp_ln34_1_fu_590_p2);

assign p_shl3_cast_fu_520_p3 = {{trunc_ln26_fu_516_p1}, {2'd0}};

assign r_fu_312_p2 = (r_0_reg_169 + 5'd1);

assign sext_ln26_1_fu_512_p1 = add_ln26_4_fu_507_p2;

assign sext_ln26_fu_456_p1 = $signed(sub_ln26_1_fu_450_p2);

assign sub_ln26_1_fu_450_p2 = (zext_ln26_2_fu_434_p1 - zext_ln26_3_fu_446_p1);

assign sub_ln26_2_fu_528_p2 = ($signed(p_shl3_cast_fu_520_p3) - $signed(sext_ln26_1_fu_512_p1));

assign sub_ln26_fu_414_p2 = (zext_ln26_1_fu_410_p1 - zext_ln18_fu_386_p1);

assign tmp_10_fu_438_p3 = {{add_ln26_fu_420_p2}, {2'd0}};

assign tmp_13_cast_fu_479_p3 = {{add_ln26_2_fu_474_p2}, {5'd0}};

assign tmp_7_fu_340_p3 = {{add_ln35_fu_334_p2}, {5'd0}};

assign tmp_8_fu_426_p3 = {{add_ln26_fu_420_p2}, {5'd0}};

assign tmp_9_fu_402_p3 = {{wr_0_reg_216}, {2'd0}};

assign tmp_fu_570_p4 = {{bitcast_ln34_fu_566_p1[30:23]}};

assign trunc_ln26_fu_516_p1 = add_ln26_4_fu_507_p2[10:0];

assign trunc_ln34_fu_580_p1 = bitcast_ln34_fu_566_p1[22:0];

assign wc_fu_560_p2 = (wc_0_reg_239 + 2'd1);

assign wr_fu_396_p2 = (wr_0_reg_216 + 2'd1);

assign zext_ln14_fu_348_p1 = tmp_7_fu_340_p3;

assign zext_ln18_fu_386_p1 = wr_0_reg_216;

assign zext_ln21_fu_466_p1 = ap_phi_mux_wc_0_phi_fu_243_p4;

assign zext_ln26_1_fu_410_p1 = tmp_9_fu_402_p3;

assign zext_ln26_2_fu_434_p1 = tmp_8_fu_426_p3;

assign zext_ln26_3_fu_446_p1 = tmp_10_fu_438_p3;

assign zext_ln26_4_fu_470_p1 = ap_phi_mux_wc_0_phi_fu_243_p4;

assign zext_ln26_5_fu_492_p1 = add_ln26_3_fu_487_p2;

assign zext_ln26_6_fu_503_p1 = add_ln26_1_fu_497_p2;

assign zext_ln26_7_fu_534_p1 = sub_ln26_2_fu_528_p2;

assign zext_ln26_8_fu_545_p1 = add_ln26_5_fu_539_p2;

assign zext_ln26_9_fu_555_p1 = add_ln26_6_fu_550_p2;

assign zext_ln26_fu_364_p1 = f_0_reg_205;

assign zext_ln35_1_fu_368_p1 = f_0_reg_205;

assign zext_ln35_2_fu_372_p1 = f_0_reg_205;

assign zext_ln35_3_fu_381_p1 = add_ln35_1_fu_376_p2;

assign zext_ln35_fu_330_p1 = c_0_reg_193;

always @ (posedge ap_clk) begin
    zext_ln14_reg_638[4:0] <= 5'b00000;
    zext_ln14_reg_638[15] <= 1'b0;
    zext_ln26_reg_651[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_656[9:6] <= 4'b0000;
    sext_ln26_reg_680[1:0] <= 2'b00;
end

endmodule //conv_1
