-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=1297921,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=6,HLS_SYN_FF=564,HLS_SYN_LUT=1691,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_1B : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_weights_ce0 : STD_LOGIC;
    signal conv_1_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_223 : STD_LOGIC_VECTOR (4 downto 0);
    signal wr_0_reg_234 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_245 : STD_LOGIC_VECTOR (3 downto 0);
    signal wc_0_reg_256 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_279 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_315_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_819 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln11_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_341_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_829 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_383_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_2_reg_835 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_3_fu_391_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_reg_840 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_848 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_418_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_reg_853 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_858 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln18_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_863_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_452_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_1_reg_867 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln18_1_fu_478_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_872 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_fu_581_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_reg_877 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_fu_593_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_reg_882 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_3_fu_724_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_3_reg_897 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ch_fu_732_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_reg_912 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_fu_737_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_932 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln11_fu_748_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_937 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten43_reg_167 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_0_reg_178 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten29_reg_189 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_201 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_212 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_227_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_238_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_249_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_260_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_phi_fu_271_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_283_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_4_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_702_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_713_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_333_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_371_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_806_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_403_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln11_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_3_fu_422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_426_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln21_fu_437_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln21_fu_464_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_458_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_5_fu_490_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_498_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_486_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_502_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_fu_512_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_517_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_529_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_525_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_537_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_541_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_470_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln18_fu_563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_575_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_569_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln26_fu_508_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_2_fu_601_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_605_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln26_fu_611_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln21_1_fu_589_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_623_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln18_2_fu_628_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_2_fu_635_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal sext_ln26_1_fu_547_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_6_fu_643_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_3_fu_647_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_fu_657_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_661_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_2_fu_653_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_2_fu_617_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_5_fu_675_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_4_fu_683_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_cast_fu_689_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_697_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_3_fu_669_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_7_fu_679_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_6_fu_707_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln21_fu_718_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln11_1_fu_742_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_755_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_759_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_769_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_806_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_806_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_806_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_806_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_806_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_address0,
        ce0 => conv_1_weights_ce0,
        q0 => conv_1_weights_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_cud_U1 : component conv_1_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        din1 => grp_fu_290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    conv_1_fmul_32ns_dEe_U2 : component conv_1_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_weights_q0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);

    conv_1_fcmp_32ns_eOg_U3 : component conv_1_fcmp_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_290_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_303_p2);

    conv_1_mac_muladdfYi_U4 : component conv_1_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_806_p0,
        din1 => grp_fu_806_p1,
        din2 => grp_fu_806_p2,
        dout => grp_fu_806_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_0_reg_201 <= select_ln35_3_reg_840;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_201 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ch_0_reg_279_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_279 <= ch_reg_912;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_279 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                f_0_reg_212 <= f_reg_932;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_212 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_223 <= add_ln18_1_reg_867;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_223 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten29_reg_189 <= select_ln11_reg_937;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten29_reg_189 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten43_reg_167 <= add_ln8_reg_819;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten43_reg_167 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_245 <= select_ln21_3_reg_897;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_245 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_178 <= select_ln35_1_reg_829;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_178 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_267_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_sum_2_reg_267 <= grp_fu_290_p2;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_267 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_256 <= select_ln21_1_reg_882;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_256 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_234 <= select_ln18_1_reg_872;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_234 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_867 <= add_ln18_1_fu_452_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_819 <= add_ln8_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ch_reg_912 <= ch_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_858 <= zext_ln35_4_fu_432_p1(15 - 1 downto 0);
                icmp_ln11_reg_824 <= icmp_ln11_fu_327_p2;
                select_ln35_1_reg_829 <= select_ln35_1_fu_341_p3;
                select_ln35_2_reg_835 <= select_ln35_2_fu_383_p3;
                select_ln35_3_reg_840 <= select_ln35_3_fu_391_p3;
                    zext_ln26_reg_848(5 downto 0) <= zext_ln26_fu_414_p1(5 downto 0);
                    zext_ln35_2_reg_853(5 downto 0) <= zext_ln35_2_fu_418_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                f_reg_932 <= f_fu_737_p2;
                select_ln11_reg_937 <= select_ln11_fu_748_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_863 <= icmp_ln18_fu_446_p2;
                icmp_ln18_reg_863_pp0_iter1_reg <= icmp_ln18_reg_863;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_872 <= select_ln18_1_fu_478_p3;
                select_ln21_1_reg_882 <= select_ln21_1_fu_593_p3;
                select_ln21_3_reg_897 <= select_ln21_3_fu_724_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_446_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln21_reg_877 <= select_ln21_fu_581_p3;
            end if;
        end if;
    end process;
    zext_ln26_reg_848(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_853(10 downto 6) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_309_p2, ap_CS_fsm_state2, icmp_ln18_fu_446_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_446_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_446_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_742_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten29_reg_189));
    add_ln18_1_fu_452_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_227_p4) + unsigned(ap_const_lv5_1));
    add_ln18_fu_512_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_486_p1) + unsigned(select_ln35_1_reg_829));
    add_ln21_fu_718_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_249_p4) + unsigned(ap_const_lv4_1));
    add_ln26_1_fu_605_p2 <= std_logic_vector(signed(sext_ln26_fu_508_p1) + signed(zext_ln21_2_fu_601_p1));
    add_ln26_2_fu_623_p2 <= std_logic_vector(unsigned(zext_ln21_1_fu_589_p1) + unsigned(select_ln35_3_reg_840));
    add_ln26_3_fu_647_p2 <= std_logic_vector(signed(sext_ln26_1_fu_547_p1) + signed(zext_ln26_6_fu_643_p1));
    add_ln26_4_fu_683_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_617_p2) + unsigned(zext_ln26_5_fu_675_p1));
    add_ln26_5_fu_697_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_689_p3) + unsigned(zext_ln35_2_reg_853));
    add_ln26_6_fu_707_p2 <= std_logic_vector(unsigned(sub_ln26_3_fu_669_p2) + unsigned(zext_ln26_7_fu_679_p1));
    add_ln26_fu_441_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_840) + unsigned(zext_ln21_fu_437_p1));
    add_ln35_1_fu_426_p2 <= std_logic_vector(unsigned(zext_ln11_fu_410_p1) + unsigned(zext_ln35_3_fu_422_p1));
    add_ln8_fu_315_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_167) + unsigned(ap_const_lv15_1));
    and_ln18_fu_563_p2 <= (xor_ln18_fu_551_p2 and icmp_ln24_fu_557_p2);
    and_ln34_fu_791_p2 <= (tmp_8_fu_303_p2 and or_ln34_fu_785_p2);
    and_ln35_fu_365_p2 <= (xor_ln35_fu_353_p2 and icmp_ln14_fu_359_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_446_p2)
    begin
        if ((icmp_ln18_fu_446_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_309_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_283_p4_assign_proc : process(ch_0_reg_279, icmp_ln18_reg_863, ap_CS_fsm_pp0_stage0, ch_reg_912, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ch_0_phi_fu_283_p4 <= ch_reg_912;
        else 
            ap_phi_mux_ch_0_phi_fu_283_p4 <= ch_0_reg_279;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_227_p4_assign_proc : process(indvar_flatten21_reg_223, icmp_ln18_reg_863, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_867, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_227_p4 <= add_ln18_1_reg_867;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_227_p4 <= indvar_flatten21_reg_223;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_249_p4_assign_proc : process(indvar_flatten_reg_245, icmp_ln18_reg_863, ap_CS_fsm_pp0_stage0, select_ln21_3_reg_897, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_249_p4 <= select_ln21_3_reg_897;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_249_p4 <= indvar_flatten_reg_245;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_phi_fu_271_p4 <= w_sum_2_reg_267;

    ap_phi_mux_wc_0_phi_fu_260_p4_assign_proc : process(wc_0_reg_256, icmp_ln18_reg_863, ap_CS_fsm_pp0_stage0, select_ln21_1_reg_882, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wc_0_phi_fu_260_p4 <= select_ln21_1_reg_882;
        else 
            ap_phi_mux_wc_0_phi_fu_260_p4 <= wc_0_reg_256;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_238_p4_assign_proc : process(wr_0_reg_234, icmp_ln18_reg_863, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_872, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_863 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wr_0_phi_fu_238_p4 <= select_ln18_1_reg_872;
        else 
            ap_phi_mux_wr_0_phi_fu_238_p4 <= wr_0_reg_234;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_309_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_755_p1 <= grp_fu_290_p2;
    c_fu_371_p2 <= std_logic_vector(unsigned(select_ln35_fu_333_p3) + unsigned(ap_const_lv5_1));
    ch_fu_732_p2 <= std_logic_vector(unsigned(select_ln21_reg_877) + unsigned(ap_const_lv2_1));
    conv_1_bias_address0 <= zext_ln26_reg_848(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_address0 <= zext_ln26_8_fu_702_p1(10 - 1 downto 0);

    conv_1_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_input_address0 <= zext_ln26_9_fu_713_p1(12 - 1 downto 0);

    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_858;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_290_p2 when (and_ln34_fu_791_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_737_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_2_reg_835));

    grp_fu_290_p0_assign_proc : process(w_sum_2_reg_267, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_phi_mux_w_sum_2_phi_fu_271_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_290_p0 <= w_sum_2_reg_267;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_290_p0 <= ap_phi_mux_w_sum_2_phi_fu_271_p4;
        else 
            grp_fu_290_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_290_p1_assign_proc : process(conv_1_bias_q0, ap_CS_fsm_pp0_stage0, grp_fu_296_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_290_p1 <= conv_1_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_290_p1 <= grp_fu_296_p2;
        else 
            grp_fu_290_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_806_p0 <= grp_fu_806_p00(5 - 1 downto 0);
    grp_fu_806_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_341_p3),10));
    grp_fu_806_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_806_p2 <= grp_fu_806_p20(5 - 1 downto 0);
    grp_fu_806_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_391_p3),10));
    icmp_ln11_fu_327_p2 <= "1" when (indvar_flatten29_reg_189 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_359_p2 <= "1" when (f_0_reg_212 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_446_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_227_p4 = ap_const_lv5_1B) else "0";
    icmp_ln21_fu_464_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_249_p4 = ap_const_lv4_9) else "0";
    icmp_ln24_fu_557_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_283_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_779_p2 <= "1" when (trunc_ln34_fu_769_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_773_p2 <= "0" when (tmp_fu_759_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_309_p2 <= "1" when (indvar_flatten43_reg_167 = ap_const_lv15_5480) else "0";
    or_ln21_fu_575_p2 <= (icmp_ln21_fu_464_p2 or and_ln18_fu_563_p2);
    or_ln34_fu_785_p2 <= (icmp_ln34_fu_773_p2 or icmp_ln34_1_fu_779_p2);
    or_ln35_fu_377_p2 <= (icmp_ln11_fu_327_p2 or and_ln35_fu_365_p2);
    p_shl_cast_fu_661_p3 <= (trunc_ln26_fu_657_p1 & ap_const_lv2_0);
    r_fu_321_p2 <= std_logic_vector(unsigned(r_0_reg_178) + unsigned(ap_const_lv5_1));
    select_ln11_fu_748_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_reg_824(0) = '1') else 
        add_ln11_1_fu_742_p2;
    select_ln18_1_fu_478_p3 <= 
        wr_fu_458_p2 when (icmp_ln21_fu_464_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_238_p4;
    select_ln18_2_fu_628_p3 <= 
        select_ln35_3_reg_840 when (icmp_ln21_fu_464_p2(0) = '1') else 
        add_ln26_fu_441_p2;
    select_ln18_fu_470_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_464_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_260_p4;
    select_ln21_1_fu_593_p3 <= 
        wc_fu_569_p2 when (and_ln18_fu_563_p2(0) = '1') else 
        select_ln18_fu_470_p3;
    select_ln21_2_fu_635_p3 <= 
        add_ln26_2_fu_623_p2 when (and_ln18_fu_563_p2(0) = '1') else 
        select_ln18_2_fu_628_p3;
    select_ln21_3_fu_724_p3 <= 
        ap_const_lv4_1 when (icmp_ln21_fu_464_p2(0) = '1') else 
        add_ln21_fu_718_p2;
    select_ln21_fu_581_p3 <= 
        ap_const_lv2_0 when (or_ln21_fu_575_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_283_p4;
    select_ln35_1_fu_341_p3 <= 
        r_fu_321_p2 when (icmp_ln11_fu_327_p2(0) = '1') else 
        r_0_reg_178;
    select_ln35_2_fu_383_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_377_p2(0) = '1') else 
        f_0_reg_212;
    select_ln35_3_fu_391_p3 <= 
        c_fu_371_p2 when (and_ln35_fu_365_p2(0) = '1') else 
        select_ln35_fu_333_p3;
    select_ln35_fu_333_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_327_p2(0) = '1') else 
        c_0_reg_201;
        sext_ln26_1_fu_547_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_1_fu_541_p2),12));

        sext_ln26_2_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_3_fu_647_p2),13));

        sext_ln26_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_502_p2),6));

    shl_ln26_fu_611_p2 <= std_logic_vector(shift_left(unsigned(add_ln26_1_fu_605_p2),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    sub_ln26_1_fu_541_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_525_p1) - unsigned(zext_ln26_4_fu_537_p1));
    sub_ln26_2_fu_617_p2 <= std_logic_vector(unsigned(shl_ln26_fu_611_p2) - unsigned(add_ln26_1_fu_605_p2));
    sub_ln26_3_fu_669_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_661_p3) - unsigned(sext_ln26_2_fu_653_p1));
    sub_ln26_fu_502_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_498_p1) - unsigned(zext_ln26_1_fu_486_p1));
    tmp_13_cast_fu_689_p3 <= (add_ln26_4_fu_683_p2 & ap_const_lv5_0);
    tmp_2_fu_403_p3 <= (grp_fu_806_p3 & ap_const_lv5_0);
    tmp_5_fu_490_p3 <= (select_ln18_1_fu_478_p3 & ap_const_lv2_0);
    tmp_6_fu_517_p3 <= (add_ln18_fu_512_p2 & ap_const_lv5_0);
    tmp_9_fu_529_p3 <= (add_ln18_fu_512_p2 & ap_const_lv2_0);
    tmp_fu_759_p4 <= bitcast_ln34_fu_755_p1(30 downto 23);
    trunc_ln26_fu_657_p1 <= add_ln26_3_fu_647_p2(11 - 1 downto 0);
    trunc_ln34_fu_769_p1 <= bitcast_ln34_fu_755_p1(23 - 1 downto 0);
    wc_fu_569_p2 <= std_logic_vector(unsigned(select_ln18_fu_470_p3) + unsigned(ap_const_lv2_1));
    wr_fu_458_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_238_p4) + unsigned(ap_const_lv2_1));
    xor_ln18_fu_551_p2 <= (icmp_ln21_fu_464_p2 xor ap_const_lv1_1);
    xor_ln35_fu_353_p2 <= (icmp_ln11_fu_327_p2 xor ap_const_lv1_1);
    zext_ln11_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_403_p3),16));
    zext_ln21_1_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_569_p2),5));
    zext_ln21_2_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_593_p3),6));
    zext_ln21_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_260_p4),5));
    zext_ln26_1_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_478_p3),5));
    zext_ln26_2_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_490_p3),5));
    zext_ln26_3_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_517_p3),11));
    zext_ln26_4_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_529_p3),11));
    zext_ln26_5_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_581_p3),6));
    zext_ln26_6_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_fu_635_p3),12));
    zext_ln26_7_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_581_p3),13));
    zext_ln26_8_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_697_p2),64));
    zext_ln26_9_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_707_p2),64));
    zext_ln26_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_383_p3),64));
    zext_ln35_2_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_383_p3),11));
    zext_ln35_3_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_383_p3),16));
    zext_ln35_4_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_426_p2),64));
end behav;
