// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=2098305,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=718,HLS_SYN_LUT=1929,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_pp0_stage0 = 14'd8;
parameter    ap_ST_fsm_pp0_stage1 = 14'd16;
parameter    ap_ST_fsm_state8 = 14'd32;
parameter    ap_ST_fsm_pp1_stage0 = 14'd64;
parameter    ap_ST_fsm_pp1_stage1 = 14'd128;
parameter    ap_ST_fsm_state13 = 14'd256;
parameter    ap_ST_fsm_pp2_stage0 = 14'd512;
parameter    ap_ST_fsm_pp2_stage1 = 14'd1024;
parameter    ap_ST_fsm_state18 = 14'd2048;
parameter    ap_ST_fsm_state19 = 14'd4096;
parameter    ap_ST_fsm_state20 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_input_address0;
reg conv_input_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [8:0] conv_1_weights_1_address0;
reg    conv_1_weights_1_ce0;
wire   [31:0] conv_1_weights_1_q0;
wire   [8:0] conv_1_weights_2_address0;
reg    conv_1_weights_2_ce0;
wire   [31:0] conv_1_weights_2_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
reg   [1:0] ch_0_0_reg_284;
reg   [31:0] w_sum_2_0_reg_296;
reg   [1:0] ch_0_1_reg_307;
reg   [31:0] w_sum_2_1_reg_319;
reg   [1:0] ch_0_2_reg_330;
reg   [31:0] w_sum_2_2_reg_342;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state5_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln24_reg_1082;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state10_pp1_stage1_iter0;
wire    ap_block_state12_pp1_stage1_iter1;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln24_1_reg_1111;
wire    ap_CS_fsm_pp2_stage1;
reg    ap_enable_reg_pp2_iter0;
wire    ap_block_state15_pp2_stage1_iter0;
wire    ap_block_state17_pp2_stage1_iter1;
wire    ap_block_pp2_stage1_11001;
reg   [0:0] icmp_ln24_2_reg_1140;
wire   [31:0] grp_fu_363_p2;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state4_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter1;
wire    ap_block_state9_pp1_stage0_iter0;
wire    ap_block_state11_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
wire    ap_block_state14_pp2_stage0_iter0;
wire    ap_block_state16_pp2_stage0_iter1;
wire    ap_block_pp2_stage0_11001;
wire   [14:0] add_ln8_fu_406_p2;
reg   [14:0] add_ln8_reg_978;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln11_fu_418_p2;
reg   [0:0] icmp_ln11_reg_983;
wire   [0:0] icmp_ln8_fu_400_p2;
wire   [4:0] select_ln35_1_fu_432_p3;
reg   [4:0] select_ln35_1_reg_988;
wire   [5:0] select_ln35_4_fu_490_p3;
reg   [5:0] select_ln35_4_reg_994;
wire   [4:0] select_ln35_5_fu_498_p3;
reg   [4:0] select_ln35_5_reg_999;
wire   [11:0] zext_ln35_1_fu_506_p1;
reg   [11:0] zext_ln35_1_reg_1004;
wire   [11:0] zext_ln35_3_fu_539_p1;
reg   [11:0] zext_ln35_3_reg_1009;
wire   [11:0] zext_ln35_4_fu_557_p1;
reg   [11:0] zext_ln35_4_reg_1014;
wire   [63:0] zext_ln26_fu_561_p1;
reg   [63:0] zext_ln26_reg_1019;
wire   [9:0] zext_ln35_5_fu_565_p1;
reg   [9:0] zext_ln35_5_reg_1024;
reg   [14:0] conv_out_addr_reg_1031;
wire   [0:0] icmp_ln18_fu_584_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] wr_fu_590_p2;
reg   [1:0] wr_reg_1040;
wire   [4:0] sub_ln26_fu_612_p2;
reg   [4:0] sub_ln26_reg_1045;
wire   [12:0] sub_ln26_2_fu_678_p2;
reg   [12:0] sub_ln26_2_reg_1052;
wire   [12:0] sub_ln26_3_fu_705_p2;
reg   [12:0] sub_ln26_3_reg_1057;
wire   [12:0] sub_ln26_4_fu_732_p2;
reg   [12:0] sub_ln26_4_reg_1062;
wire   [5:0] f_fu_738_p2;
reg   [5:0] f_reg_1072;
wire   [10:0] select_ln11_fu_749_p3;
reg   [10:0] select_ln11_reg_1077;
wire   [0:0] icmp_ln24_fu_756_p2;
reg   [0:0] icmp_ln24_reg_1082_pp0_iter1_reg;
wire   [1:0] add_ln24_fu_803_p2;
reg   [1:0] add_ln24_reg_1096;
wire   [31:0] grp_fu_354_p2;
wire   [0:0] icmp_ln24_1_fu_809_p2;
reg   [0:0] icmp_ln24_1_reg_1111_pp1_iter1_reg;
wire   [1:0] add_ln24_1_fu_856_p2;
reg   [1:0] add_ln24_1_reg_1125;
wire   [0:0] icmp_ln24_2_fu_862_p2;
reg   [0:0] icmp_ln24_2_reg_1140_pp2_iter1_reg;
wire   [1:0] add_ln24_2_fu_909_p2;
reg   [1:0] add_ln24_2_reg_1154;
wire    ap_CS_fsm_state19;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage0_subdone;
wire    ap_CS_fsm_state8;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage0_subdone;
wire    ap_CS_fsm_state13;
wire    ap_block_pp2_stage1_subdone;
wire    ap_block_pp2_stage0_subdone;
reg   [14:0] indvar_flatten21_reg_205;
wire    ap_CS_fsm_state20;
reg   [4:0] r_0_reg_216;
reg   [10:0] indvar_flatten_reg_227;
reg   [4:0] c_0_reg_239;
reg   [5:0] f_0_reg_250;
reg   [1:0] wr_0_reg_261;
wire    ap_CS_fsm_state18;
reg   [31:0] w_sum_0_reg_272;
reg   [1:0] ap_phi_mux_ch_0_0_phi_fu_288_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_ch_0_1_phi_fu_311_p4;
wire    ap_block_pp1_stage0;
reg   [1:0] ap_phi_mux_ch_0_2_phi_fu_334_p4;
wire    ap_block_pp2_stage0;
wire   [63:0] zext_ln35_7_fu_579_p1;
wire   [63:0] zext_ln26_7_fu_788_p1;
wire   [63:0] zext_ln26_8_fu_798_p1;
wire   [63:0] zext_ln26_11_fu_841_p1;
wire   [63:0] zext_ln26_12_fu_851_p1;
wire   [63:0] zext_ln26_15_fu_894_p1;
wire   [63:0] zext_ln26_16_fu_904_p1;
reg   [31:0] grp_fu_354_p0;
reg   [31:0] grp_fu_354_p1;
reg   [31:0] grp_fu_363_p0;
wire    ap_block_pp0_stage1;
wire    ap_block_pp1_stage1;
wire    ap_block_pp2_stage1;
wire   [4:0] r_fu_412_p2;
wire   [4:0] c_fu_388_p2;
wire   [4:0] add_ln26_2_fu_394_p2;
wire   [0:0] icmp_ln14_fu_466_p2;
wire   [0:0] xor_ln35_fu_460_p2;
wire   [4:0] select_ln35_fu_424_p3;
wire   [0:0] and_ln35_fu_472_p2;
wire   [0:0] or_ln35_fu_484_p2;
wire   [4:0] add_ln26_3_fu_478_p2;
wire   [9:0] grp_fu_966_p3;
wire   [14:0] tmp_1_fu_514_p3;
wire   [4:0] add_ln26_4_fu_525_p2;
wire   [4:0] select_ln35_2_fu_444_p3;
wire   [4:0] select_ln35_6_fu_531_p3;
wire   [4:0] add_ln26_5_fu_543_p2;
wire   [4:0] select_ln35_3_fu_452_p3;
wire   [4:0] select_ln35_7_fu_549_p3;
wire   [15:0] zext_ln26_1_fu_521_p1;
wire   [15:0] zext_ln35_6_fu_569_p1;
wire   [15:0] add_ln35_1_fu_573_p2;
wire   [3:0] tmp_10_fu_600_p3;
wire   [4:0] zext_ln26_2_fu_608_p1;
wire   [4:0] zext_ln18_fu_596_p1;
wire   [4:0] add_ln26_fu_618_p2;
wire   [9:0] tmp_11_fu_623_p3;
wire   [6:0] tmp_12_fu_635_p3;
wire   [10:0] zext_ln26_3_fu_631_p1;
wire   [10:0] zext_ln26_4_fu_643_p1;
wire   [10:0] sub_ln26_1_fu_647_p2;
wire  signed [11:0] sext_ln26_fu_653_p1;
wire  signed [11:0] add_ln26_6_fu_657_p2;
wire   [10:0] trunc_ln26_fu_666_p1;
wire   [12:0] p_shl2_cast_fu_670_p3;
wire  signed [12:0] sext_ln26_1_fu_662_p1;
wire  signed [11:0] add_ln26_7_fu_684_p2;
wire   [10:0] trunc_ln26_1_fu_693_p1;
wire   [12:0] p_shl1_cast_fu_697_p3;
wire  signed [12:0] sext_ln26_2_fu_689_p1;
wire  signed [11:0] add_ln26_8_fu_711_p2;
wire   [10:0] trunc_ln26_2_fu_720_p1;
wire   [12:0] p_shl_cast_fu_724_p3;
wire  signed [12:0] sext_ln26_3_fu_716_p1;
wire   [10:0] add_ln11_fu_743_p2;
wire   [4:0] zext_ln26_6_fu_766_p1;
wire   [4:0] add_ln26_9_fu_770_p2;
wire   [9:0] tmp_18_cast_fu_775_p3;
wire   [9:0] add_ln26_10_fu_783_p2;
wire   [12:0] zext_ln26_5_fu_762_p1;
wire   [12:0] add_ln26_11_fu_793_p2;
wire   [4:0] zext_ln26_10_fu_819_p1;
wire   [4:0] add_ln26_12_fu_823_p2;
wire   [9:0] tmp_20_cast_fu_828_p3;
wire   [9:0] add_ln26_13_fu_836_p2;
wire   [12:0] zext_ln26_9_fu_815_p1;
wire   [12:0] add_ln26_14_fu_846_p2;
wire   [4:0] zext_ln26_14_fu_872_p1;
wire   [4:0] add_ln26_15_fu_876_p2;
wire   [9:0] tmp_22_cast_fu_881_p3;
wire   [9:0] add_ln26_16_fu_889_p2;
wire   [12:0] zext_ln26_13_fu_868_p1;
wire   [12:0] add_ln26_17_fu_899_p2;
wire   [31:0] bitcast_ln34_fu_915_p1;
wire   [7:0] tmp_fu_919_p4;
wire   [22:0] trunc_ln34_fu_929_p1;
wire   [0:0] icmp_ln34_1_fu_939_p2;
wire   [0:0] icmp_ln34_fu_933_p2;
wire   [0:0] or_ln34_fu_945_p2;
wire   [0:0] tmp_2_fu_372_p2;
wire   [0:0] and_ln34_fu_951_p2;
wire   [4:0] grp_fu_966_p0;
wire   [5:0] grp_fu_966_p1;
wire   [4:0] grp_fu_966_p2;
reg   [13:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;
wire   [9:0] grp_fu_966_p00;
wire   [9:0] grp_fu_966_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_address0),
    .ce0(conv_1_weights_1_ce0),
    .q0(conv_1_weights_1_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_address0),
    .ce0(conv_1_weights_2_ce0),
    .q0(conv_1_weights_2_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_354_p0),
    .din1(grp_fu_354_p1),
    .ce(1'b1),
    .dout(grp_fu_354_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_363_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_363_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_354_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_2_fu_372_p2)
);

conv_1_mac_muladdhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
conv_1_mac_muladdhbi_U4(
    .din0(grp_fu_966_p0),
    .din1(grp_fu_966_p1),
    .din2(grp_fu_966_p2),
    .dout(grp_fu_966_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln24_reg_1082 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_584_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_584_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1) & (icmp_ln24_1_reg_1111 == 1'd1))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1) & (icmp_ln24_2_reg_1140 == 1'd1))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp2_stage1_subdone) & (1'b1 == ap_CS_fsm_pp2_stage1)))) begin
            ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp2_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        c_0_reg_239 <= select_ln35_5_reg_999;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_239 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln24_reg_1082 == 1'd0))) begin
        ch_0_0_reg_284 <= add_ln24_reg_1096;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_584_p2 == 1'd0))) begin
        ch_0_0_reg_284 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln24_1_reg_1111 == 1'd0))) begin
        ch_0_1_reg_307 <= add_ln24_1_reg_1125;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        ch_0_1_reg_307 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001) & (icmp_ln24_2_reg_1140 == 1'd0))) begin
        ch_0_2_reg_330 <= add_ln24_2_reg_1154;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        ch_0_2_reg_330 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        f_0_reg_250 <= f_reg_1072;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_250 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten21_reg_205 <= add_ln8_reg_978;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_205 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        indvar_flatten_reg_227 <= select_ln11_reg_1077;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_227 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        r_0_reg_216 <= select_ln35_1_reg_988;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_216 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        w_sum_0_reg_272 <= w_sum_2_2_reg_342;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_400_p2 == 1'd0))) begin
        w_sum_0_reg_272 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln24_reg_1082_pp0_iter1_reg == 1'd0))) begin
        w_sum_2_0_reg_296 <= grp_fu_354_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_584_p2 == 1'd0))) begin
        w_sum_2_0_reg_296 <= w_sum_0_reg_272;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001) & (icmp_ln24_1_reg_1111_pp1_iter1_reg == 1'd0))) begin
        w_sum_2_1_reg_319 <= grp_fu_354_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        w_sum_2_1_reg_319 <= w_sum_2_0_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001) & (icmp_ln24_2_reg_1140_pp2_iter1_reg == 1'd0))) begin
        w_sum_2_2_reg_342 <= grp_fu_354_p2;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        w_sum_2_2_reg_342 <= w_sum_2_1_reg_319;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        wr_0_reg_261 <= wr_reg_1040;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_400_p2 == 1'd0))) begin
        wr_0_reg_261 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        add_ln24_1_reg_1125 <= add_ln24_1_fu_856_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1) & (1'b0 == ap_block_pp2_stage1_11001))) begin
        add_ln24_2_reg_1154 <= add_ln24_2_fu_909_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln24_reg_1096 <= add_ln24_fu_803_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_978 <= add_ln8_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_400_p2 == 1'd0))) begin
        conv_out_addr_reg_1031 <= zext_ln35_7_fu_579_p1;
        icmp_ln11_reg_983 <= icmp_ln11_fu_418_p2;
        select_ln35_1_reg_988 <= select_ln35_1_fu_432_p3;
        select_ln35_4_reg_994 <= select_ln35_4_fu_490_p3;
        select_ln35_5_reg_999 <= select_ln35_5_fu_498_p3;
        zext_ln26_reg_1019[5 : 0] <= zext_ln26_fu_561_p1[5 : 0];
        zext_ln35_1_reg_1004[4 : 0] <= zext_ln35_1_fu_506_p1[4 : 0];
        zext_ln35_3_reg_1009[4 : 0] <= zext_ln35_3_fu_539_p1[4 : 0];
        zext_ln35_4_reg_1014[4 : 0] <= zext_ln35_4_fu_557_p1[4 : 0];
        zext_ln35_5_reg_1024[5 : 0] <= zext_ln35_5_fu_565_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_584_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_reg_1072 <= f_fu_738_p2;
        select_ln11_reg_1077 <= select_ln11_fu_749_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        icmp_ln24_1_reg_1111 <= icmp_ln24_1_fu_809_p2;
        icmp_ln24_1_reg_1111_pp1_iter1_reg <= icmp_ln24_1_reg_1111;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln24_2_reg_1140 <= icmp_ln24_2_fu_862_p2;
        icmp_ln24_2_reg_1140_pp2_iter1_reg <= icmp_ln24_2_reg_1140;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln24_reg_1082 <= icmp_ln24_fu_756_p2;
        icmp_ln24_reg_1082_pp0_iter1_reg <= icmp_ln24_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_584_p2 == 1'd0))) begin
        sub_ln26_2_reg_1052 <= sub_ln26_2_fu_678_p2;
        sub_ln26_3_reg_1057 <= sub_ln26_3_fu_705_p2;
        sub_ln26_4_reg_1062 <= sub_ln26_4_fu_732_p2;
        sub_ln26_reg_1045 <= sub_ln26_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        wr_reg_1040 <= wr_fu_590_p2;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter1 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln24_reg_1082 == 1'd0))) begin
        ap_phi_mux_ch_0_0_phi_fu_288_p4 = add_ln24_reg_1096;
    end else begin
        ap_phi_mux_ch_0_0_phi_fu_288_p4 = ch_0_0_reg_284;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (icmp_ln24_1_reg_1111 == 1'd0))) begin
        ap_phi_mux_ch_0_1_phi_fu_311_p4 = add_ln24_1_reg_1125;
    end else begin
        ap_phi_mux_ch_0_1_phi_fu_311_p4 = ch_0_1_reg_307;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (icmp_ln24_2_reg_1140 == 1'd0))) begin
        ap_phi_mux_ch_0_2_phi_fu_334_p4 = add_ln24_2_reg_1154;
    end else begin
        ap_phi_mux_ch_0_2_phi_fu_334_p4 = ch_0_2_reg_330;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        conv_1_weights_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        conv_1_weights_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1))) begin
        conv_input_address0 = zext_ln26_16_fu_904_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        conv_input_address0 = zext_ln26_12_fu_851_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_input_address0 = zext_ln26_8_fu_798_p1;
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_354_p0 = w_sum_0_reg_272;
    end else if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        grp_fu_354_p0 = w_sum_2_2_reg_342;
    end else if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        grp_fu_354_p0 = w_sum_2_1_reg_319;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_354_p0 = w_sum_2_0_reg_296;
    end else begin
        grp_fu_354_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        grp_fu_354_p1 = conv_1_bias_q0;
    end else if ((((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0)) | ((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_354_p1 = grp_fu_363_p2;
    end else begin
        grp_fu_354_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage1))) begin
        grp_fu_363_p0 = conv_1_weights_2_q0;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        grp_fu_363_p0 = conv_1_weights_1_q0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_363_p0 = conv_1_weights_0_q0;
    end else begin
        grp_fu_363_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_400_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln18_fu_584_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0)) & (1'b0 == ap_block_pp2_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end else if (((1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_pp2_stage1 : begin
            if ((1'b0 == ap_block_pp2_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage1;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_743_p2 = (11'd1 + indvar_flatten_reg_227);

assign add_ln24_1_fu_856_p2 = (ch_0_1_reg_307 + 2'd1);

assign add_ln24_2_fu_909_p2 = (ch_0_2_reg_330 + 2'd1);

assign add_ln24_fu_803_p2 = (ch_0_0_reg_284 + 2'd1);

assign add_ln26_10_fu_783_p2 = (zext_ln35_5_reg_1024 + tmp_18_cast_fu_775_p3);

assign add_ln26_11_fu_793_p2 = (zext_ln26_5_fu_762_p1 + sub_ln26_2_reg_1052);

assign add_ln26_12_fu_823_p2 = (zext_ln26_10_fu_819_p1 + sub_ln26_reg_1045);

assign add_ln26_13_fu_836_p2 = (zext_ln35_5_reg_1024 + tmp_20_cast_fu_828_p3);

assign add_ln26_14_fu_846_p2 = (zext_ln26_9_fu_815_p1 + sub_ln26_3_reg_1057);

assign add_ln26_15_fu_876_p2 = (zext_ln26_14_fu_872_p1 + sub_ln26_reg_1045);

assign add_ln26_16_fu_889_p2 = (zext_ln35_5_reg_1024 + tmp_22_cast_fu_881_p3);

assign add_ln26_17_fu_899_p2 = (zext_ln26_13_fu_868_p1 + sub_ln26_4_reg_1062);

assign add_ln26_2_fu_394_p2 = (c_0_reg_239 + 5'd2);

assign add_ln26_3_fu_478_p2 = (select_ln35_fu_424_p3 + 5'd1);

assign add_ln26_4_fu_525_p2 = (select_ln35_fu_424_p3 + 5'd2);

assign add_ln26_5_fu_543_p2 = (select_ln35_fu_424_p3 + 5'd3);

assign add_ln26_6_fu_657_p2 = ($signed(zext_ln35_1_reg_1004) + $signed(sext_ln26_fu_653_p1));

assign add_ln26_7_fu_684_p2 = ($signed(zext_ln35_3_reg_1009) + $signed(sext_ln26_fu_653_p1));

assign add_ln26_8_fu_711_p2 = ($signed(zext_ln35_4_reg_1014) + $signed(sext_ln26_fu_653_p1));

assign add_ln26_9_fu_770_p2 = (zext_ln26_6_fu_766_p1 + sub_ln26_reg_1045);

assign add_ln26_fu_618_p2 = (select_ln35_1_reg_988 + zext_ln18_fu_596_p1);

assign add_ln35_1_fu_573_p2 = (zext_ln26_1_fu_521_p1 + zext_ln35_6_fu_569_p1);

assign add_ln8_fu_406_p2 = (indvar_flatten21_reg_205 + 15'd1);

assign and_ln34_fu_951_p2 = (tmp_2_fu_372_p2 & or_ln34_fu_945_p2);

assign and_ln35_fu_472_p2 = (xor_ln35_fu_460_p2 & icmp_ln14_fu_466_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp2_stage1 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp2_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp2_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign bitcast_ln34_fu_915_p1 = grp_fu_354_p2;

assign c_fu_388_p2 = (c_0_reg_239 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_1019;

assign conv_1_weights_0_address0 = zext_ln26_7_fu_788_p1;

assign conv_1_weights_1_address0 = zext_ln26_11_fu_841_p1;

assign conv_1_weights_2_address0 = zext_ln26_15_fu_894_p1;

assign conv_out_address0 = conv_out_addr_reg_1031;

assign conv_out_d0 = ((and_ln34_fu_951_p2[0:0] === 1'b1) ? grp_fu_354_p2 : 32'd0);

assign f_fu_738_p2 = (6'd1 + select_ln35_4_reg_994);

assign grp_fu_966_p0 = grp_fu_966_p00;

assign grp_fu_966_p00 = select_ln35_1_fu_432_p3;

assign grp_fu_966_p1 = 10'd26;

assign grp_fu_966_p2 = grp_fu_966_p20;

assign grp_fu_966_p20 = select_ln35_5_fu_498_p3;

assign icmp_ln11_fu_418_p2 = ((indvar_flatten_reg_227 == 11'd832) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_466_p2 = ((f_0_reg_250 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_584_p2 = ((wr_0_reg_261 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_809_p2 = ((ap_phi_mux_ch_0_1_phi_fu_311_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_862_p2 = ((ap_phi_mux_ch_0_2_phi_fu_334_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_756_p2 = ((ap_phi_mux_ch_0_0_phi_fu_288_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_939_p2 = ((trunc_ln34_fu_929_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_933_p2 = ((tmp_fu_919_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_400_p2 = ((indvar_flatten21_reg_205 == 15'd21632) ? 1'b1 : 1'b0);

assign or_ln34_fu_945_p2 = (icmp_ln34_fu_933_p2 | icmp_ln34_1_fu_939_p2);

assign or_ln35_fu_484_p2 = (icmp_ln11_fu_418_p2 | and_ln35_fu_472_p2);

assign p_shl1_cast_fu_697_p3 = {{trunc_ln26_1_fu_693_p1}, {2'd0}};

assign p_shl2_cast_fu_670_p3 = {{trunc_ln26_fu_666_p1}, {2'd0}};

assign p_shl_cast_fu_724_p3 = {{trunc_ln26_2_fu_720_p1}, {2'd0}};

assign r_fu_412_p2 = (r_0_reg_216 + 5'd1);

assign select_ln11_fu_749_p3 = ((icmp_ln11_reg_983[0:0] === 1'b1) ? 11'd1 : add_ln11_fu_743_p2);

assign select_ln35_1_fu_432_p3 = ((icmp_ln11_fu_418_p2[0:0] === 1'b1) ? r_fu_412_p2 : r_0_reg_216);

assign select_ln35_2_fu_444_p3 = ((icmp_ln11_fu_418_p2[0:0] === 1'b1) ? 5'd1 : c_fu_388_p2);

assign select_ln35_3_fu_452_p3 = ((icmp_ln11_fu_418_p2[0:0] === 1'b1) ? 5'd2 : add_ln26_2_fu_394_p2);

assign select_ln35_4_fu_490_p3 = ((or_ln35_fu_484_p2[0:0] === 1'b1) ? 6'd0 : f_0_reg_250);

assign select_ln35_5_fu_498_p3 = ((and_ln35_fu_472_p2[0:0] === 1'b1) ? add_ln26_3_fu_478_p2 : select_ln35_fu_424_p3);

assign select_ln35_6_fu_531_p3 = ((and_ln35_fu_472_p2[0:0] === 1'b1) ? add_ln26_4_fu_525_p2 : select_ln35_2_fu_444_p3);

assign select_ln35_7_fu_549_p3 = ((and_ln35_fu_472_p2[0:0] === 1'b1) ? add_ln26_5_fu_543_p2 : select_ln35_3_fu_452_p3);

assign select_ln35_fu_424_p3 = ((icmp_ln11_fu_418_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_239);

assign sext_ln26_1_fu_662_p1 = add_ln26_6_fu_657_p2;

assign sext_ln26_2_fu_689_p1 = add_ln26_7_fu_684_p2;

assign sext_ln26_3_fu_716_p1 = add_ln26_8_fu_711_p2;

assign sext_ln26_fu_653_p1 = $signed(sub_ln26_1_fu_647_p2);

assign sub_ln26_1_fu_647_p2 = (zext_ln26_3_fu_631_p1 - zext_ln26_4_fu_643_p1);

assign sub_ln26_2_fu_678_p2 = ($signed(p_shl2_cast_fu_670_p3) - $signed(sext_ln26_1_fu_662_p1));

assign sub_ln26_3_fu_705_p2 = ($signed(p_shl1_cast_fu_697_p3) - $signed(sext_ln26_2_fu_689_p1));

assign sub_ln26_4_fu_732_p2 = ($signed(p_shl_cast_fu_724_p3) - $signed(sext_ln26_3_fu_716_p1));

assign sub_ln26_fu_612_p2 = (zext_ln26_2_fu_608_p1 - zext_ln18_fu_596_p1);

assign tmp_10_fu_600_p3 = {{wr_0_reg_261}, {2'd0}};

assign tmp_11_fu_623_p3 = {{add_ln26_fu_618_p2}, {5'd0}};

assign tmp_12_fu_635_p3 = {{add_ln26_fu_618_p2}, {2'd0}};

assign tmp_18_cast_fu_775_p3 = {{add_ln26_9_fu_770_p2}, {5'd0}};

assign tmp_1_fu_514_p3 = {{grp_fu_966_p3}, {5'd0}};

assign tmp_20_cast_fu_828_p3 = {{add_ln26_12_fu_823_p2}, {5'd0}};

assign tmp_22_cast_fu_881_p3 = {{add_ln26_15_fu_876_p2}, {5'd0}};

assign tmp_fu_919_p4 = {{bitcast_ln34_fu_915_p1[30:23]}};

assign trunc_ln26_1_fu_693_p1 = add_ln26_7_fu_684_p2[10:0];

assign trunc_ln26_2_fu_720_p1 = add_ln26_8_fu_711_p2[10:0];

assign trunc_ln26_fu_666_p1 = add_ln26_6_fu_657_p2[10:0];

assign trunc_ln34_fu_929_p1 = bitcast_ln34_fu_915_p1[22:0];

assign wr_fu_590_p2 = (wr_0_reg_261 + 2'd1);

assign xor_ln35_fu_460_p2 = (icmp_ln11_fu_418_p2 ^ 1'd1);

assign zext_ln18_fu_596_p1 = wr_0_reg_261;

assign zext_ln26_10_fu_819_p1 = ap_phi_mux_ch_0_1_phi_fu_311_p4;

assign zext_ln26_11_fu_841_p1 = add_ln26_13_fu_836_p2;

assign zext_ln26_12_fu_851_p1 = add_ln26_14_fu_846_p2;

assign zext_ln26_13_fu_868_p1 = ap_phi_mux_ch_0_2_phi_fu_334_p4;

assign zext_ln26_14_fu_872_p1 = ap_phi_mux_ch_0_2_phi_fu_334_p4;

assign zext_ln26_15_fu_894_p1 = add_ln26_16_fu_889_p2;

assign zext_ln26_16_fu_904_p1 = add_ln26_17_fu_899_p2;

assign zext_ln26_1_fu_521_p1 = tmp_1_fu_514_p3;

assign zext_ln26_2_fu_608_p1 = tmp_10_fu_600_p3;

assign zext_ln26_3_fu_631_p1 = tmp_11_fu_623_p3;

assign zext_ln26_4_fu_643_p1 = tmp_12_fu_635_p3;

assign zext_ln26_5_fu_762_p1 = ap_phi_mux_ch_0_0_phi_fu_288_p4;

assign zext_ln26_6_fu_766_p1 = ap_phi_mux_ch_0_0_phi_fu_288_p4;

assign zext_ln26_7_fu_788_p1 = add_ln26_10_fu_783_p2;

assign zext_ln26_8_fu_798_p1 = add_ln26_11_fu_793_p2;

assign zext_ln26_9_fu_815_p1 = ap_phi_mux_ch_0_1_phi_fu_311_p4;

assign zext_ln26_fu_561_p1 = select_ln35_4_fu_490_p3;

assign zext_ln35_1_fu_506_p1 = select_ln35_5_fu_498_p3;

assign zext_ln35_3_fu_539_p1 = select_ln35_6_fu_531_p3;

assign zext_ln35_4_fu_557_p1 = select_ln35_7_fu_549_p3;

assign zext_ln35_5_fu_565_p1 = select_ln35_4_fu_490_p3;

assign zext_ln35_6_fu_569_p1 = select_ln35_4_fu_490_p3;

assign zext_ln35_7_fu_579_p1 = add_ln35_1_fu_573_p2;

always @ (posedge ap_clk) begin
    zext_ln35_1_reg_1004[11:5] <= 7'b0000000;
    zext_ln35_3_reg_1009[11:5] <= 7'b0000000;
    zext_ln35_4_reg_1014[11:5] <= 7'b0000000;
    zext_ln26_reg_1019[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_5_reg_1024[9:6] <= 4'b0000;
end

endmodule //conv_1
