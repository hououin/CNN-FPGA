-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=2098305,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=6,HLS_SYN_FF=718,HLS_SYN_LUT=1929,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp2_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_1_ce0 : STD_LOGIC;
    signal conv_1_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_2_ce0 : STD_LOGIC;
    signal conv_1_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_284 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_0_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_307 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_1_reg_319 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_2_reg_330 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_2_reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state5_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln24_reg_1082 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state10_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal icmp_ln24_1_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage1 : signal is "none";
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal ap_block_state15_pp2_stage1_iter0 : BOOLEAN;
    signal ap_block_state17_pp2_stage1_iter1 : BOOLEAN;
    signal ap_block_pp2_stage1_11001 : BOOLEAN;
    signal icmp_ln24_2_reg_1140 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_363_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state9_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_block_state14_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln8_fu_406_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_978 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln11_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_983 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_432_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_988 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_4_fu_490_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_4_reg_994 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_5_fu_498_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_5_reg_999 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_1_fu_506_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_1_reg_1004 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_3_fu_539_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_3_reg_1009 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_4_fu_557_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_4_reg_1014 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_fu_561_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1019 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_5_fu_565_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_5_reg_1024 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_addr_reg_1031 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln18_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal wr_fu_590_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1040 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_fu_612_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_reg_1045 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_2_fu_678_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_2_reg_1052 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_fu_705_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_reg_1057 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_4_fu_732_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_4_reg_1062 : STD_LOGIC_VECTOR (12 downto 0);
    signal f_fu_738_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_1072 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln11_fu_749_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_1077 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln24_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_reg_1082_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_fu_803_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_1096 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_354_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln24_1_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_1_reg_1111_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_1_fu_856_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_1_reg_1125 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln24_2_fu_862_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln24_2_reg_1140_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln24_2_fu_909_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_2_reg_1154 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_block_pp2_stage1_subdone : BOOLEAN;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal indvar_flatten21_reg_205 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal r_0_reg_216 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_227 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_239 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_250 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_261 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal w_sum_0_reg_272 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_0_phi_fu_288_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_ch_0_1_phi_fu_311_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_ch_0_2_phi_fu_334_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln35_7_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_841_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_851_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_15_fu_894_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_904_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_354_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_363_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_block_pp2_stage1 : BOOLEAN;
    signal r_fu_412_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_388_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_2_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_424_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_3_fu_478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_966_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_514_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln26_4_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_444_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_6_fu_531_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_5_fu_543_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_452_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_7_fu_549_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_521_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_6_fu_569_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_573_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_10_fu_600_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_608_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_596_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_618_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_635_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_631_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_643_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_647_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln26_fu_653_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_6_fu_657_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_fu_666_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_670_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_1_fu_662_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_7_fu_684_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_1_fu_693_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_697_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_2_fu_689_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_8_fu_711_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_2_fu_720_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_724_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_3_fu_716_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln11_fu_743_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_766_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_9_fu_770_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_18_cast_fu_775_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_10_fu_783_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_5_fu_762_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_11_fu_793_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_10_fu_819_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_12_fu_823_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_20_cast_fu_828_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_13_fu_836_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_9_fu_815_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_14_fu_846_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_14_fu_872_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_15_fu_876_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_22_cast_fu_881_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_16_fu_889_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_13_fu_868_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_17_fu_899_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln34_fu_915_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_919_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_929_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_966_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_966_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_966_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal grp_fu_966_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_966_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_address0,
        ce0 => conv_1_weights_0_ce0,
        q0 => conv_1_weights_0_q0);

    conv_1_weights_1_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_address0,
        ce0 => conv_1_weights_1_ce0,
        q0 => conv_1_weights_1_q0);

    conv_1_weights_2_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_address0,
        ce0 => conv_1_weights_2_ce0,
        q0 => conv_1_weights_2_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_354_p0,
        din1 => grp_fu_354_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_354_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_363_p0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_363_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_354_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_2_fu_372_p2);

    conv_1_mac_muladdhbi_U4 : component conv_1_mac_muladdhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_966_p0,
        din1 => grp_fu_966_p1,
        din2 => grp_fu_966_p2,
        dout => grp_fu_966_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln24_reg_1082 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln18_fu_584_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln18_fu_584_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (icmp_ln24_1_reg_1111 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (icmp_ln24_2_reg_1140 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1)))) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                c_0_reg_239 <= select_ln35_5_reg_999;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_239 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln24_reg_1082 = ap_const_lv1_0))) then 
                ch_0_0_reg_284 <= add_ln24_reg_1096;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln18_fu_584_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_284 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (icmp_ln24_1_reg_1111 = ap_const_lv1_0))) then 
                ch_0_1_reg_307 <= add_ln24_1_reg_1125;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ch_0_1_reg_307 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_2_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (icmp_ln24_2_reg_1140 = ap_const_lv1_0))) then 
                ch_0_2_reg_330 <= add_ln24_2_reg_1154;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_2_reg_330 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                f_0_reg_250 <= f_reg_1072;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_250 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten21_reg_205 <= add_ln8_reg_978;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_reg_205 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                indvar_flatten_reg_227 <= select_ln11_reg_1077;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_227 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                r_0_reg_216 <= select_ln35_1_reg_988;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_216 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                w_sum_0_reg_272 <= w_sum_2_2_reg_342;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_400_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_272 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln24_reg_1082_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_2_0_reg_296 <= grp_fu_354_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln18_fu_584_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_296 <= w_sum_0_reg_272;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_319_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (icmp_ln24_1_reg_1111_pp1_iter1_reg = ap_const_lv1_0))) then 
                w_sum_2_1_reg_319 <= grp_fu_354_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                w_sum_2_1_reg_319 <= w_sum_2_0_reg_296;
            end if; 
        end if;
    end process;

    w_sum_2_2_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001) and (icmp_ln24_2_reg_1140_pp2_iter1_reg = ap_const_lv1_0))) then 
                w_sum_2_2_reg_342 <= grp_fu_354_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_sum_2_2_reg_342 <= w_sum_2_1_reg_319;
            end if; 
        end if;
    end process;

    wr_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                wr_0_reg_261 <= wr_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_400_p2 = ap_const_lv1_0))) then 
                wr_0_reg_261 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1) and (ap_const_boolean_0 = ap_block_pp1_stage1_11001))) then
                add_ln24_1_reg_1125 <= add_ln24_1_fu_856_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1) and (ap_const_boolean_0 = ap_block_pp2_stage1_11001))) then
                add_ln24_2_reg_1154 <= add_ln24_2_fu_909_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                add_ln24_reg_1096 <= add_ln24_fu_803_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_978 <= add_ln8_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_400_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_1031 <= zext_ln35_7_fu_579_p1(15 - 1 downto 0);
                icmp_ln11_reg_983 <= icmp_ln11_fu_418_p2;
                select_ln35_1_reg_988 <= select_ln35_1_fu_432_p3;
                select_ln35_4_reg_994 <= select_ln35_4_fu_490_p3;
                select_ln35_5_reg_999 <= select_ln35_5_fu_498_p3;
                    zext_ln26_reg_1019(5 downto 0) <= zext_ln26_fu_561_p1(5 downto 0);
                    zext_ln35_1_reg_1004(4 downto 0) <= zext_ln35_1_fu_506_p1(4 downto 0);
                    zext_ln35_3_reg_1009(4 downto 0) <= zext_ln35_3_fu_539_p1(4 downto 0);
                    zext_ln35_4_reg_1014(4 downto 0) <= zext_ln35_4_fu_557_p1(4 downto 0);
                    zext_ln35_5_reg_1024(5 downto 0) <= zext_ln35_5_fu_565_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_584_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                f_reg_1072 <= f_fu_738_p2;
                select_ln11_reg_1077 <= select_ln11_fu_749_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                icmp_ln24_1_reg_1111 <= icmp_ln24_1_fu_809_p2;
                icmp_ln24_1_reg_1111_pp1_iter1_reg <= icmp_ln24_1_reg_1111;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln24_2_reg_1140 <= icmp_ln24_2_fu_862_p2;
                icmp_ln24_2_reg_1140_pp2_iter1_reg <= icmp_ln24_2_reg_1140;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln24_reg_1082 <= icmp_ln24_fu_756_p2;
                icmp_ln24_reg_1082_pp0_iter1_reg <= icmp_ln24_reg_1082;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln18_fu_584_p2 = ap_const_lv1_0))) then
                sub_ln26_2_reg_1052 <= sub_ln26_2_fu_678_p2;
                sub_ln26_3_reg_1057 <= sub_ln26_3_fu_705_p2;
                sub_ln26_4_reg_1062 <= sub_ln26_4_fu_732_p2;
                sub_ln26_reg_1045 <= sub_ln26_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                wr_reg_1040 <= wr_fu_590_p2;
            end if;
        end if;
    end process;
    zext_ln35_1_reg_1004(11 downto 5) <= "0000000";
    zext_ln35_3_reg_1009(11 downto 5) <= "0000000";
    zext_ln35_4_reg_1014(11 downto 5) <= "0000000";
    zext_ln26_reg_1019(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_5_reg_1024(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state2, icmp_ln8_fu_400_p2, icmp_ln18_fu_584_p2, ap_CS_fsm_state3, ap_block_pp0_stage1_subdone, ap_block_pp0_stage0_subdone, ap_block_pp1_stage1_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage1_subdone, ap_block_pp2_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln18_fu_584_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_pp2_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp2_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage1;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten_reg_227));
    add_ln24_1_fu_856_p2 <= std_logic_vector(unsigned(ch_0_1_reg_307) + unsigned(ap_const_lv2_1));
    add_ln24_2_fu_909_p2 <= std_logic_vector(unsigned(ch_0_2_reg_330) + unsigned(ap_const_lv2_1));
    add_ln24_fu_803_p2 <= std_logic_vector(unsigned(ch_0_0_reg_284) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_783_p2 <= std_logic_vector(unsigned(zext_ln35_5_reg_1024) + unsigned(tmp_18_cast_fu_775_p3));
    add_ln26_11_fu_793_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_762_p1) + unsigned(sub_ln26_2_reg_1052));
    add_ln26_12_fu_823_p2 <= std_logic_vector(unsigned(zext_ln26_10_fu_819_p1) + unsigned(sub_ln26_reg_1045));
    add_ln26_13_fu_836_p2 <= std_logic_vector(unsigned(zext_ln35_5_reg_1024) + unsigned(tmp_20_cast_fu_828_p3));
    add_ln26_14_fu_846_p2 <= std_logic_vector(unsigned(zext_ln26_9_fu_815_p1) + unsigned(sub_ln26_3_reg_1057));
    add_ln26_15_fu_876_p2 <= std_logic_vector(unsigned(zext_ln26_14_fu_872_p1) + unsigned(sub_ln26_reg_1045));
    add_ln26_16_fu_889_p2 <= std_logic_vector(unsigned(zext_ln35_5_reg_1024) + unsigned(tmp_22_cast_fu_881_p3));
    add_ln26_17_fu_899_p2 <= std_logic_vector(unsigned(zext_ln26_13_fu_868_p1) + unsigned(sub_ln26_4_reg_1062));
    add_ln26_2_fu_394_p2 <= std_logic_vector(unsigned(c_0_reg_239) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_478_p2 <= std_logic_vector(unsigned(select_ln35_fu_424_p3) + unsigned(ap_const_lv5_1));
    add_ln26_4_fu_525_p2 <= std_logic_vector(unsigned(select_ln35_fu_424_p3) + unsigned(ap_const_lv5_2));
    add_ln26_5_fu_543_p2 <= std_logic_vector(unsigned(select_ln35_fu_424_p3) + unsigned(ap_const_lv5_3));
    add_ln26_6_fu_657_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_1004) + unsigned(sext_ln26_fu_653_p1));
    add_ln26_7_fu_684_p2 <= std_logic_vector(unsigned(zext_ln35_3_reg_1009) + unsigned(sext_ln26_fu_653_p1));
    add_ln26_8_fu_711_p2 <= std_logic_vector(unsigned(zext_ln35_4_reg_1014) + unsigned(sext_ln26_fu_653_p1));
    add_ln26_9_fu_770_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_766_p1) + unsigned(sub_ln26_reg_1045));
    add_ln26_fu_618_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_988) + unsigned(zext_ln18_fu_596_p1));
    add_ln35_1_fu_573_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_521_p1) + unsigned(zext_ln35_6_fu_569_p1));
    add_ln8_fu_406_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_205) + unsigned(ap_const_lv15_1));
    and_ln34_fu_951_p2 <= (tmp_2_fu_372_p2 and or_ln34_fu_945_p2);
    and_ln35_fu_472_p2 <= (xor_ln35_fu_460_p2 and icmp_ln14_fu_466_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(4);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(6);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(7);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp2_stage1 <= ap_CS_fsm(10);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(8);
    ap_CS_fsm_state18 <= ap_CS_fsm(11);
    ap_CS_fsm_state19 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(13);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_400_p2)
    begin
        if (((icmp_ln8_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_0_phi_fu_288_p4_assign_proc : process(ch_0_0_reg_284, icmp_ln24_reg_1082, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln24_reg_1096, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_reg_1082 = ap_const_lv1_0))) then 
            ap_phi_mux_ch_0_0_phi_fu_288_p4 <= add_ln24_reg_1096;
        else 
            ap_phi_mux_ch_0_0_phi_fu_288_p4 <= ch_0_0_reg_284;
        end if; 
    end process;


    ap_phi_mux_ch_0_1_phi_fu_311_p4_assign_proc : process(ch_0_1_reg_307, icmp_ln24_1_reg_1111, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, add_ln24_1_reg_1125, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln24_1_reg_1111 = ap_const_lv1_0))) then 
            ap_phi_mux_ch_0_1_phi_fu_311_p4 <= add_ln24_1_reg_1125;
        else 
            ap_phi_mux_ch_0_1_phi_fu_311_p4 <= ch_0_1_reg_307;
        end if; 
    end process;


    ap_phi_mux_ch_0_2_phi_fu_334_p4_assign_proc : process(ch_0_2_reg_330, icmp_ln24_2_reg_1140, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, add_ln24_2_reg_1154, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln24_2_reg_1140 = ap_const_lv1_0))) then 
            ap_phi_mux_ch_0_2_phi_fu_334_p4 <= add_ln24_2_reg_1154;
        else 
            ap_phi_mux_ch_0_2_phi_fu_334_p4 <= ch_0_2_reg_330;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_400_p2)
    begin
        if (((icmp_ln8_fu_400_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_915_p1 <= grp_fu_354_p2;
    c_fu_388_p2 <= std_logic_vector(unsigned(c_0_reg_239) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_1019(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_address0 <= zext_ln26_7_fu_788_p1(9 - 1 downto 0);

    conv_1_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_address0 <= zext_ln26_11_fu_841_p1(9 - 1 downto 0);

    conv_1_weights_1_ce0_assign_proc : process(ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            conv_1_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_address0 <= zext_ln26_15_fu_894_p1(9 - 1 downto 0);

    conv_1_weights_2_ce0_assign_proc : process(ap_enable_reg_pp2_iter0, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            conv_1_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_CS_fsm_pp2_stage0, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0, zext_ln26_8_fu_798_p1, zext_ln26_12_fu_851_p1, zext_ln26_16_fu_904_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then 
            conv_input_address0 <= zext_ln26_16_fu_904_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            conv_input_address0 <= zext_ln26_12_fu_851_p1(12 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_input_address0 <= zext_ln26_8_fu_798_p1(12 - 1 downto 0);
        else 
            conv_input_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_input_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp1_iter0, ap_enable_reg_pp2_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1031;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_354_p2 when (and_ln34_fu_951_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_738_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_4_reg_994));

    grp_fu_354_p0_assign_proc : process(w_sum_2_0_reg_296, w_sum_2_1_reg_319, w_sum_2_2_reg_342, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state19, w_sum_0_reg_272, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_354_p0 <= w_sum_0_reg_272;
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            grp_fu_354_p0 <= w_sum_2_2_reg_342;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            grp_fu_354_p0 <= w_sum_2_1_reg_319;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_354_p0 <= w_sum_2_0_reg_296;
        else 
            grp_fu_354_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_354_p1_assign_proc : process(conv_1_bias_q0, grp_fu_363_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, ap_CS_fsm_state19, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_354_p1 <= conv_1_bias_q0;
        elsif ((((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_354_p1 <= grp_fu_363_p2;
        else 
            grp_fu_354_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_363_p0_assign_proc : process(conv_1_weights_0_q0, conv_1_weights_1_q0, conv_1_weights_2_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage1, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp2_stage1, ap_enable_reg_pp2_iter0, ap_block_pp0_stage1, ap_block_pp1_stage1, ap_block_pp2_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage1))) then 
            grp_fu_363_p0 <= conv_1_weights_2_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            grp_fu_363_p0 <= conv_1_weights_1_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_363_p0 <= conv_1_weights_0_q0;
        else 
            grp_fu_363_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_966_p0 <= grp_fu_966_p00(5 - 1 downto 0);
    grp_fu_966_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_432_p3),10));
    grp_fu_966_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_966_p2 <= grp_fu_966_p20(5 - 1 downto 0);
    grp_fu_966_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_fu_498_p3),10));
    icmp_ln11_fu_418_p2 <= "1" when (indvar_flatten_reg_227 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_466_p2 <= "1" when (f_0_reg_250 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_584_p2 <= "1" when (wr_0_reg_261 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_809_p2 <= "1" when (ap_phi_mux_ch_0_1_phi_fu_311_p4 = ap_const_lv2_3) else "0";
    icmp_ln24_2_fu_862_p2 <= "1" when (ap_phi_mux_ch_0_2_phi_fu_334_p4 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_756_p2 <= "1" when (ap_phi_mux_ch_0_0_phi_fu_288_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_939_p2 <= "1" when (trunc_ln34_fu_929_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_933_p2 <= "0" when (tmp_fu_919_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_400_p2 <= "1" when (indvar_flatten21_reg_205 = ap_const_lv15_5480) else "0";
    or_ln34_fu_945_p2 <= (icmp_ln34_fu_933_p2 or icmp_ln34_1_fu_939_p2);
    or_ln35_fu_484_p2 <= (icmp_ln11_fu_418_p2 or and_ln35_fu_472_p2);
    p_shl1_cast_fu_697_p3 <= (trunc_ln26_1_fu_693_p1 & ap_const_lv2_0);
    p_shl2_cast_fu_670_p3 <= (trunc_ln26_fu_666_p1 & ap_const_lv2_0);
    p_shl_cast_fu_724_p3 <= (trunc_ln26_2_fu_720_p1 & ap_const_lv2_0);
    r_fu_412_p2 <= std_logic_vector(unsigned(r_0_reg_216) + unsigned(ap_const_lv5_1));
    select_ln11_fu_749_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_reg_983(0) = '1') else 
        add_ln11_fu_743_p2;
    select_ln35_1_fu_432_p3 <= 
        r_fu_412_p2 when (icmp_ln11_fu_418_p2(0) = '1') else 
        r_0_reg_216;
    select_ln35_2_fu_444_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_418_p2(0) = '1') else 
        c_fu_388_p2;
    select_ln35_3_fu_452_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_418_p2(0) = '1') else 
        add_ln26_2_fu_394_p2;
    select_ln35_4_fu_490_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_484_p2(0) = '1') else 
        f_0_reg_250;
    select_ln35_5_fu_498_p3 <= 
        add_ln26_3_fu_478_p2 when (and_ln35_fu_472_p2(0) = '1') else 
        select_ln35_fu_424_p3;
    select_ln35_6_fu_531_p3 <= 
        add_ln26_4_fu_525_p2 when (and_ln35_fu_472_p2(0) = '1') else 
        select_ln35_2_fu_444_p3;
    select_ln35_7_fu_549_p3 <= 
        add_ln26_5_fu_543_p2 when (and_ln35_fu_472_p2(0) = '1') else 
        select_ln35_3_fu_452_p3;
    select_ln35_fu_424_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_418_p2(0) = '1') else 
        c_0_reg_239;
        sext_ln26_1_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_6_fu_657_p2),13));

        sext_ln26_2_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_7_fu_684_p2),13));

        sext_ln26_3_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_8_fu_711_p2),13));

        sext_ln26_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_1_fu_647_p2),12));

    sub_ln26_1_fu_647_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_631_p1) - unsigned(zext_ln26_4_fu_643_p1));
    sub_ln26_2_fu_678_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_670_p3) - unsigned(sext_ln26_1_fu_662_p1));
    sub_ln26_3_fu_705_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_697_p3) - unsigned(sext_ln26_2_fu_689_p1));
    sub_ln26_4_fu_732_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_724_p3) - unsigned(sext_ln26_3_fu_716_p1));
    sub_ln26_fu_612_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_608_p1) - unsigned(zext_ln18_fu_596_p1));
    tmp_10_fu_600_p3 <= (wr_0_reg_261 & ap_const_lv2_0);
    tmp_11_fu_623_p3 <= (add_ln26_fu_618_p2 & ap_const_lv5_0);
    tmp_12_fu_635_p3 <= (add_ln26_fu_618_p2 & ap_const_lv2_0);
    tmp_18_cast_fu_775_p3 <= (add_ln26_9_fu_770_p2 & ap_const_lv5_0);
    tmp_1_fu_514_p3 <= (grp_fu_966_p3 & ap_const_lv5_0);
    tmp_20_cast_fu_828_p3 <= (add_ln26_12_fu_823_p2 & ap_const_lv5_0);
    tmp_22_cast_fu_881_p3 <= (add_ln26_15_fu_876_p2 & ap_const_lv5_0);
    tmp_fu_919_p4 <= bitcast_ln34_fu_915_p1(30 downto 23);
    trunc_ln26_1_fu_693_p1 <= add_ln26_7_fu_684_p2(11 - 1 downto 0);
    trunc_ln26_2_fu_720_p1 <= add_ln26_8_fu_711_p2(11 - 1 downto 0);
    trunc_ln26_fu_666_p1 <= add_ln26_6_fu_657_p2(11 - 1 downto 0);
    trunc_ln34_fu_929_p1 <= bitcast_ln34_fu_915_p1(23 - 1 downto 0);
    wr_fu_590_p2 <= std_logic_vector(unsigned(wr_0_reg_261) + unsigned(ap_const_lv2_1));
    xor_ln35_fu_460_p2 <= (icmp_ln11_fu_418_p2 xor ap_const_lv1_1);
    zext_ln18_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_261),5));
    zext_ln26_10_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_1_phi_fu_311_p4),5));
    zext_ln26_11_fu_841_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_836_p2),64));
    zext_ln26_12_fu_851_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_14_fu_846_p2),64));
    zext_ln26_13_fu_868_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_2_phi_fu_334_p4),13));
    zext_ln26_14_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_2_phi_fu_334_p4),5));
    zext_ln26_15_fu_894_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_16_fu_889_p2),64));
    zext_ln26_16_fu_904_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_17_fu_899_p2),64));
    zext_ln26_1_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_514_p3),16));
    zext_ln26_2_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_600_p3),5));
    zext_ln26_3_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_623_p3),11));
    zext_ln26_4_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_635_p3),11));
    zext_ln26_5_fu_762_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_0_phi_fu_288_p4),13));
    zext_ln26_6_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_0_phi_fu_288_p4),5));
    zext_ln26_7_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_10_fu_783_p2),64));
    zext_ln26_8_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_fu_793_p2),64));
    zext_ln26_9_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_ch_0_1_phi_fu_311_p4),13));
    zext_ln26_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_490_p3),64));
    zext_ln35_1_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_fu_498_p3),12));
    zext_ln35_3_fu_539_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_6_fu_531_p3),12));
    zext_ln35_4_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_7_fu_549_p3),12));
    zext_ln35_5_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_490_p3),10));
    zext_ln35_6_fu_569_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_490_p3),16));
    zext_ln35_7_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_573_p2),64));
end behav;
