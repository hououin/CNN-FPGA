-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce1 : OUT STD_LOGIC;
    conv_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=36.022200,HLS_SYN_LAT=1299325,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=995,HLS_SYN_LUT=1809,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000010000";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000100000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000001000000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000010000000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000100000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000001000000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000010000000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000100000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000001000000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000010000000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (24 downto 0) := "0000000000100000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (24 downto 0) := "0000000001000000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (24 downto 0) := "0000000010000000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (24 downto 0) := "0000000100000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (24 downto 0) := "0000001000000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (24 downto 0) := "0000010000000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (24 downto 0) := "0000100000000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (24 downto 0) := "0001000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (24 downto 0) := "0010000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (24 downto 0) := "0100000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (24 downto 0) := "1000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (24 downto 0) := "0000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_1_weights_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_0_reg_293 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_336 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state6_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_825 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state7_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state9_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal reg_342 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state8_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_322_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state10_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state14_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_360 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state12_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state16_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_state18_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_state20_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage17 : signal is "none";
    signal ap_block_state22_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_11001 : BOOLEAN;
    signal reg_365 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_370_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_reg_760 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_768 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_776 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln35_fu_400_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_reg_781 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_422_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_1_reg_786 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_2_fu_426_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_2_reg_791 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_fu_436_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_796 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln14_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal f_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_805 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_810 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_456_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_2_reg_815 : STD_LOGIC_VECTOR (7 downto 0);
    signal conv_out_addr_reg_820 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln18_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_825_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_480_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_829 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_1_fu_575_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_1_reg_849 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_2_fu_618_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_2_reg_864 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_fu_645_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_reg_871 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_1_weights_1_0_l_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_l_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_load_5_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_input_load_7_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_1_reg_938 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state11_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal tmp_1_2_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state13_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal tmp_1_2_2_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state15_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal r_0_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_259 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_271 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_282 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_phi_mux_wr_0_phi_fu_297_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_w_sum_0_phi_fu_308_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_4_fu_469_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_4_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_10_fu_661_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_11_fu_670_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_12_fu_680_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln26_14_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_15_fu_704_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage16 : signal is "none";
    signal ap_block_pp0_stage16 : BOOLEAN;
    signal grp_fu_322_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_322_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal zext_ln35_1_fu_404_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_408_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_414_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln26_2_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_3_fu_460_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_464_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_fu_490_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_498_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_3_fu_502_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln18_fu_486_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_514_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_fu_520_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_532_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_5_fu_528_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_540_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_fu_544_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln26_fu_550_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_4_fu_554_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_fu_563_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_567_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_1_fu_559_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_5_fu_586_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_7_fu_597_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_1_fu_606_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_610_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_2_fu_602_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_10_fu_624_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_2_fu_633_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_637_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_3_fu_629_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_6_fu_651_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_8_fu_665_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_9_fu_675_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_11_fu_689_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_12_fu_699_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln34_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_713_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_723_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state17_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_state19_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_state21_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_pp0_stage16_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_address0,
        ce0 => conv_1_weights_0_0_ce0,
        q0 => conv_1_weights_0_0_q0);

    conv_1_weights_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_address0,
        ce0 => conv_1_weights_1_0_ce0,
        q0 => conv_1_weights_1_0_q0);

    conv_1_weights_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 96,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_address0,
        ce0 => conv_1_weights_2_0_ce0,
        q0 => conv_1_weights_2_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_316_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_322_p0,
        din1 => grp_fu_322_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_322_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_316_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_5_fu_330_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_440_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_440_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_271_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_271 <= c_reg_776;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_376_p2 = ap_const_lv1_0))) then 
                c_0_reg_271 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_282_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                f_0_reg_282 <= f_reg_805;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_388_p2 = ap_const_lv1_0))) then 
                f_0_reg_282 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_259 <= add_ln8_reg_760;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_259 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_247 <= r_reg_768;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_247 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                    reg_342 <= conv_input_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    reg_342 <= conv_input_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                    reg_353 <= conv_input_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_353 <= conv_input_q1;
                end if;
            end if; 
        end if;
    end process;

    w_sum_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln18_reg_825_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_sum_0_reg_304 <= grp_fu_316_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_440_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_304 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wr_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then 
                wr_0_reg_293 <= wr_reg_829;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_440_p2 = ap_const_lv1_0))) then 
                wr_0_reg_293 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_760 <= add_ln8_fu_370_p2;
                r_reg_768 <= r_fu_382_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_776 <= c_fu_394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_1_0_l_reg_893 <= conv_1_weights_1_0_q0;
                conv_1_weights_2_0_l_reg_898 <= conv_1_weights_2_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                conv_input_load_5_reg_923 <= conv_input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                conv_input_load_7_reg_933 <= conv_input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_440_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_820 <= zext_ln35_4_fu_469_p1(15 - 1 downto 0);
                    zext_ln26_reg_810(5 downto 0) <= zext_ln26_fu_452_p1(5 downto 0);
                    zext_ln35_2_reg_815(5 downto 0) <= zext_ln35_2_fu_456_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_805 <= f_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln18_reg_825 <= icmp_ln18_fu_474_p2;
                icmp_ln18_reg_825_pp0_iter1_reg <= icmp_ln18_reg_825;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln18_reg_825 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)))) then
                reg_336 <= conv_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)))) then
                reg_348 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage17_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage17) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)))) then
                reg_360 <= grp_fu_316_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln18_reg_825 = ap_const_lv1_0)))) then
                reg_365 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_fu_474_p2 = ap_const_lv1_0))) then
                sub_ln26_1_reg_849 <= sub_ln26_1_fu_575_p2;
                sub_ln26_2_reg_864 <= sub_ln26_2_fu_618_p2;
                sub_ln26_3_reg_871 <= sub_ln26_3_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                tmp_1_1_1_reg_938 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                tmp_1_2_2_reg_948 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then
                tmp_1_2_reg_943 <= grp_fu_322_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                wr_reg_829 <= wr_fu_480_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_388_p2 = ap_const_lv1_0))) then
                    zext_ln14_reg_796(4 downto 0) <= zext_ln14_fu_436_p1(4 downto 0);
                    zext_ln26_1_reg_786(14 downto 5) <= zext_ln26_1_fu_422_p1(14 downto 5);
                    zext_ln26_2_reg_791(4 downto 0) <= zext_ln26_2_fu_426_p1(4 downto 0);
                    zext_ln35_reg_781(4 downto 0) <= zext_ln35_fu_400_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln35_reg_781(11 downto 5) <= "0000000";
    zext_ln26_1_reg_786(4 downto 0) <= "00000";
    zext_ln26_1_reg_786(15) <= '0';
    zext_ln26_2_reg_791(11 downto 5) <= "0000000";
    zext_ln14_reg_796(11 downto 5) <= "0000000";
    zext_ln26_reg_810(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_815(7 downto 6) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_388_p2, icmp_ln14_fu_440_p2, ap_CS_fsm_state4, icmp_ln18_fu_474_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage1_subdone, icmp_ln8_fu_376_p2, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_388_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_440_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_474_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln18_fu_474_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_10_fu_624_p2 <= std_logic_vector(unsigned(zext_ln14_reg_796) + unsigned(sext_ln26_fu_550_p1));
    add_ln26_11_fu_689_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(sub_ln26_3_reg_871));
    add_ln26_12_fu_699_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(sub_ln26_3_reg_871));
    add_ln26_2_fu_430_p2 <= std_logic_vector(unsigned(c_0_reg_271) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_502_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_815) + unsigned(zext_ln26_3_fu_498_p1));
    add_ln26_4_fu_554_p2 <= std_logic_vector(unsigned(zext_ln35_reg_781) + unsigned(sext_ln26_fu_550_p1));
    add_ln26_5_fu_586_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(sub_ln26_1_fu_575_p2));
    add_ln26_6_fu_651_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(sub_ln26_1_reg_849));
    add_ln26_7_fu_597_p2 <= std_logic_vector(unsigned(zext_ln26_2_reg_791) + unsigned(sext_ln26_fu_550_p1));
    add_ln26_8_fu_665_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(sub_ln26_2_reg_864));
    add_ln26_9_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(sub_ln26_2_reg_864));
    add_ln26_fu_514_p2 <= std_logic_vector(unsigned(r_0_reg_247) + unsigned(zext_ln18_fu_486_p1));
    add_ln35_1_fu_464_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_786) + unsigned(zext_ln35_3_fu_460_p1));
    add_ln35_fu_408_p2 <= std_logic_vector(unsigned(phi_mul_reg_259) + unsigned(zext_ln35_1_fu_404_p1));
    add_ln8_fu_370_p2 <= std_logic_vector(unsigned(phi_mul_reg_259) + unsigned(ap_const_lv10_1A));
    and_ln34_fu_745_p2 <= (tmp_5_fu_330_p2 and or_ln34_fu_739_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(18);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(19);
    ap_CS_fsm_pp0_stage16 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage17 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(13);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state25 <= ap_CS_fsm(22);
    ap_CS_fsm_state26 <= ap_CS_fsm(23);
    ap_CS_fsm_state27 <= ap_CS_fsm(24);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(icmp_ln18_fu_474_p2)
    begin
        if ((icmp_ln18_fu_474_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_376_p2)
    begin
        if (((icmp_ln8_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_w_sum_0_phi_fu_308_p4 <= w_sum_0_reg_304;

    ap_phi_mux_wr_0_phi_fu_297_p4_assign_proc : process(wr_0_reg_293, icmp_ln18_reg_825, ap_CS_fsm_pp0_stage0, wr_reg_829, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln18_reg_825 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_297_p4 <= wr_reg_829;
        else 
            ap_phi_mux_wr_0_phi_fu_297_p4 <= wr_0_reg_293;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_376_p2)
    begin
        if (((icmp_ln8_fu_376_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_709_p1 <= grp_fu_316_p2;
    c_fu_394_p2 <= std_logic_vector(unsigned(c_0_reg_271) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_810(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_address0 <= zext_ln26_4_fu_507_p1(7 - 1 downto 0);

    conv_1_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_address0 <= zext_ln26_4_fu_507_p1(7 - 1 downto 0);

    conv_1_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_address0 <= zext_ln26_4_fu_507_p1(7 - 1 downto 0);

    conv_1_weights_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_7_fu_581_p1, zext_ln26_9_fu_656_p1, ap_block_pp0_stage1, zext_ln26_11_fu_670_p1, ap_block_pp0_stage2, zext_ln26_13_fu_685_p1, ap_block_pp0_stage3, zext_ln26_15_fu_704_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                conv_input_address0 <= zext_ln26_15_fu_704_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv_input_address0 <= zext_ln26_13_fu_685_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_input_address0 <= zext_ln26_11_fu_670_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address0 <= zext_ln26_9_fu_656_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address0 <= zext_ln26_7_fu_581_p1(12 - 1 downto 0);
            else 
                conv_input_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            conv_input_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_input_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_8_fu_592_p1, ap_block_pp0_stage1, zext_ln26_10_fu_661_p1, ap_block_pp0_stage2, zext_ln26_12_fu_680_p1, ap_block_pp0_stage3, zext_ln26_14_fu_694_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                conv_input_address1 <= zext_ln26_14_fu_694_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                conv_input_address1 <= zext_ln26_12_fu_680_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address1 <= zext_ln26_10_fu_661_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address1 <= zext_ln26_8_fu_592_p1(12 - 1 downto 0);
            else 
                conv_input_address1 <= "XXXXXXXXXXXX";
            end if;
        else 
            conv_input_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            conv_input_ce1 <= ap_const_logic_1;
        else 
            conv_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_820;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_316_p2 when (and_ln34_fu_745_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state27)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_446_p2 <= std_logic_vector(unsigned(f_0_reg_282) + unsigned(ap_const_lv6_1));

    grp_fu_316_p0_assign_proc : process(w_sum_0_reg_304, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, reg_360, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, ap_CS_fsm_state26, ap_block_pp0_stage0, ap_phi_mux_w_sum_0_phi_fu_308_p4, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_316_p0 <= w_sum_0_reg_304;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_316_p0 <= reg_360;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_316_p0 <= ap_phi_mux_w_sum_0_phi_fu_308_p4;
        else 
            grp_fu_316_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_316_p1_assign_proc : process(conv_1_bias_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, grp_fu_322_p2, reg_348, reg_365, ap_CS_fsm_pp0_stage0, tmp_1_1_1_reg_938, ap_CS_fsm_pp0_stage6, tmp_1_2_reg_943, ap_CS_fsm_pp0_stage8, tmp_1_2_2_reg_948, ap_CS_fsm_pp0_stage10, ap_enable_reg_pp0_iter1, ap_CS_fsm_state26, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_CS_fsm_pp0_stage16, ap_block_pp0_stage16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_fu_316_p1 <= conv_1_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_316_p1 <= tmp_1_2_2_reg_948;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_316_p1 <= tmp_1_2_reg_943;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_316_p1 <= tmp_1_1_1_reg_938;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)))) then 
            grp_fu_316_p1 <= reg_365;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage16)) or ((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            grp_fu_316_p1 <= reg_348;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_316_p1 <= grp_fu_322_p2;
        else 
            grp_fu_316_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_p0_assign_proc : process(conv_1_weights_0_0_q0, reg_336, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, reg_342, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, reg_353, ap_CS_fsm_pp0_stage7, conv_1_weights_1_0_l_reg_893, conv_1_weights_2_0_l_reg_898, conv_input_load_5_reg_923, conv_input_load_7_reg_933, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage5, ap_block_pp0_stage7, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_322_p0 <= reg_353;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_322_p0 <= conv_input_load_7_reg_933;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_322_p0 <= conv_1_weights_2_0_l_reg_898;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_322_p0 <= conv_input_load_5_reg_923;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_322_p0 <= conv_1_weights_1_0_l_reg_893;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_322_p0 <= reg_336;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_322_p0 <= reg_342;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_322_p0 <= conv_1_weights_0_0_q0;
        else 
            grp_fu_322_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_322_p1_assign_proc : process(conv_input_q0, reg_336, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage9, reg_353, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage6, ap_block_pp0_stage8, ap_block_pp0_stage5, ap_block_pp0_stage7, ap_block_pp0_stage9)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_322_p1 <= reg_336;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_322_p1 <= reg_353;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_322_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_322_p1 <= conv_input_q0;
        else 
            grp_fu_322_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_388_p2 <= "1" when (c_0_reg_271 = ap_const_lv5_1A) else "0";
    icmp_ln14_fu_440_p2 <= "1" when (f_0_reg_282 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_474_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_297_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_733_p2 <= "1" when (trunc_ln34_fu_723_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_727_p2 <= "0" when (tmp_fu_713_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_376_p2 <= "1" when (r_0_reg_247 = ap_const_lv5_1A) else "0";
    or_ln34_fu_739_p2 <= (icmp_ln34_fu_727_p2 or icmp_ln34_1_fu_733_p2);
    p_shl1_cast_fu_610_p3 <= (trunc_ln26_1_fu_606_p1 & ap_const_lv2_0);
    p_shl2_cast_fu_567_p3 <= (trunc_ln26_fu_563_p1 & ap_const_lv2_0);
    p_shl_cast_fu_637_p3 <= (trunc_ln26_2_fu_633_p1 & ap_const_lv2_0);
    r_fu_382_p2 <= std_logic_vector(unsigned(r_0_reg_247) + unsigned(ap_const_lv5_1));
        sext_ln26_1_fu_559_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_4_fu_554_p2),13));

        sext_ln26_2_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_7_fu_597_p2),13));

        sext_ln26_3_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_10_fu_624_p2),13));

        sext_ln26_fu_550_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_544_p2),12));

    sub_ln26_1_fu_575_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_567_p3) - unsigned(sext_ln26_1_fu_559_p1));
    sub_ln26_2_fu_618_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_610_p3) - unsigned(sext_ln26_2_fu_602_p1));
    sub_ln26_3_fu_645_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_637_p3) - unsigned(sext_ln26_3_fu_629_p1));
    sub_ln26_fu_544_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_528_p1) - unsigned(zext_ln26_6_fu_540_p1));
    tmp_6_fu_414_p3 <= (add_ln35_fu_408_p2 & ap_const_lv5_0);
    tmp_7_fu_532_p3 <= (add_ln26_fu_514_p2 & ap_const_lv2_0);
    tmp_8_fu_490_p3 <= (ap_phi_mux_wr_0_phi_fu_297_p4 & ap_const_lv5_0);
    tmp_9_fu_520_p3 <= (add_ln26_fu_514_p2 & ap_const_lv5_0);
    tmp_fu_713_p4 <= bitcast_ln34_fu_709_p1(30 downto 23);
    trunc_ln26_1_fu_606_p1 <= add_ln26_7_fu_597_p2(11 - 1 downto 0);
    trunc_ln26_2_fu_633_p1 <= add_ln26_10_fu_624_p2(11 - 1 downto 0);
    trunc_ln26_fu_563_p1 <= add_ln26_4_fu_554_p2(11 - 1 downto 0);
    trunc_ln34_fu_723_p1 <= bitcast_ln34_fu_709_p1(23 - 1 downto 0);
    wr_fu_480_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_297_p4) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_430_p2),12));
    zext_ln18_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wr_0_phi_fu_297_p4),5));
    zext_ln26_10_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_2_reg_864),64));
    zext_ln26_11_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_665_p2),64));
    zext_ln26_12_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_9_fu_675_p2),64));
    zext_ln26_13_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_3_reg_871),64));
    zext_ln26_14_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_fu_689_p2),64));
    zext_ln26_15_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_12_fu_699_p2),64));
    zext_ln26_1_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_414_p3),16));
    zext_ln26_2_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_394_p2),12));
    zext_ln26_3_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_490_p3),8));
    zext_ln26_4_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_3_fu_502_p2),64));
    zext_ln26_5_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_520_p3),11));
    zext_ln26_6_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_532_p3),11));
    zext_ln26_7_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_1_fu_575_p2),64));
    zext_ln26_8_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_586_p2),64));
    zext_ln26_9_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_651_p2),64));
    zext_ln26_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_282),64));
    zext_ln35_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_271),10));
    zext_ln35_2_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_282),8));
    zext_ln35_3_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_282),16));
    zext_ln35_4_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_464_p2),64));
    zext_ln35_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_271),12));
end behav;
