-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=2683773,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=682,HLS_SYN_LUT=1782,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (18 downto 0) := "0000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (18 downto 0) := "0000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (18 downto 0) := "0000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (18 downto 0) := "0000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (18 downto 0) := "0000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (18 downto 0) := "0001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (18 downto 0) := "0010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (18 downto 0) := "0100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_1_ce0 : STD_LOGIC;
    signal conv_1_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_2_ce0 : STD_LOGIC;
    signal conv_1_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal grp_fu_330_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal add_ln8_fu_355_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln8_reg_824 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_367_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_832 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_379_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_840 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln35_fu_385_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_reg_845 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln26_1_fu_407_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_1_reg_850 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_2_fu_411_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_2_reg_855 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_fu_421_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_860 : STD_LOGIC_VECTOR (11 downto 0);
    signal f_fu_431_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_868 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_873 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_2_fu_441_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_2_reg_878 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_addr_reg_885 : STD_LOGIC_VECTOR (14 downto 0);
    signal wr_fu_469_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_893 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sub_ln26_fu_487_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_reg_898 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_2_fu_554_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_2_reg_905 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_fu_581_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_3_reg_910 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_4_fu_608_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_4_reg_915 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln24_fu_620_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_reg_928 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln24_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal add_ln24_1_fu_673_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_1_reg_956 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln24_1_fu_667_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal add_ln24_2_fu_726_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln24_2_reg_984 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln24_2_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal r_0_reg_185 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_197 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_209 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_220 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal wr_0_reg_231 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_242 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_2_0_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_0_reg_265 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_1_reg_276 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_1_reg_287 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_2_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_2_reg_310 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_4_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_12_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_13_fu_715_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_16_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_17_fu_768_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_321_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_321_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_1_fu_389_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln35_fu_393_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_399_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln26_2_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_3_fu_445_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_449_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_475_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_3_fu_483_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_459_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_493_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_499_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_511_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_4_fu_507_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_5_fu_519_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_523_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sext_ln26_fu_529_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_3_fu_533_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_fu_542_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_546_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_1_fu_538_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_4_fu_560_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_1_fu_569_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_573_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_2_fu_565_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_5_fu_587_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_2_fu_596_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_600_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_3_fu_592_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_7_fu_630_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_6_fu_634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_cast_fu_639_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_7_fu_647_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_6_fu_626_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_8_fu_657_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_11_fu_683_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_9_fu_687_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_cast_fu_692_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_10_fu_700_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_10_fu_679_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_11_fu_710_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_15_fu_736_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_12_fu_740_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_21_cast_fu_745_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_13_fu_753_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_14_fu_732_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_14_fu_763_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln34_fu_773_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_777_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_787_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_809_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (18 downto 0);

    component conv_1_fadd_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_address0,
        ce0 => conv_1_weights_0_ce0,
        q0 => conv_1_weights_0_q0);

    conv_1_weights_1_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_address0,
        ce0 => conv_1_weights_1_ce0,
        q0 => conv_1_weights_1_q0);

    conv_1_weights_2_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_address0,
        ce0 => conv_1_weights_2_ce0,
        q0 => conv_1_weights_2_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_eOg_U1 : component conv_1_fadd_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_321_p0,
        din1 => grp_fu_321_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_321_p2);

    conv_1_fmul_32ns_fYi_U2 : component conv_1_fmul_32ns_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_330_p0,
        din1 => conv_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_330_p2);

    conv_1_fcmp_32ns_g8j_U3 : component conv_1_fcmp_32ns_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_321_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_7_fu_339_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_425_p2 = ap_const_lv1_1))) then 
                c_0_reg_209 <= c_reg_840;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_361_p2 = ap_const_lv1_0))) then 
                c_0_reg_209 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ch_0_0_reg_265_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                ch_0_0_reg_265 <= add_ln24_reg_928;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_463_p2 = ap_const_lv1_0))) then 
                ch_0_0_reg_265 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_1_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_1_reg_287 <= add_ln24_1_reg_956;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_614_p2 = ap_const_lv1_1))) then 
                ch_0_1_reg_287 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    ch_0_2_reg_310_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                ch_0_2_reg_310 <= add_ln24_2_reg_984;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln24_1_fu_667_p2 = ap_const_lv1_1))) then 
                ch_0_2_reg_310 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    f_0_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
                f_0_reg_220 <= f_reg_868;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_373_p2 = ap_const_lv1_0))) then 
                f_0_reg_220 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_373_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_197 <= add_ln8_reg_824;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_197 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_373_p2 = ap_const_lv1_1))) then 
                r_0_reg_185 <= r_reg_832;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_185 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_242_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_2_fu_720_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_242 <= w_sum_2_2_reg_298;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_425_p2 = ap_const_lv1_0))) then 
                w_sum_0_reg_242 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_2_0_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_sum_2_0_reg_254 <= grp_fu_321_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_463_p2 = ap_const_lv1_0))) then 
                w_sum_2_0_reg_254 <= w_sum_0_reg_242;
            end if; 
        end if;
    end process;

    w_sum_2_1_reg_276_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_sum_2_1_reg_276 <= grp_fu_321_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_614_p2 = ap_const_lv1_1))) then 
                w_sum_2_1_reg_276 <= w_sum_2_0_reg_254;
            end if; 
        end if;
    end process;

    w_sum_2_2_reg_298_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                w_sum_2_2_reg_298 <= grp_fu_321_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln24_1_fu_667_p2 = ap_const_lv1_1))) then 
                w_sum_2_2_reg_298 <= w_sum_2_1_reg_276;
            end if; 
        end if;
    end process;

    wr_0_reg_231_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_2_fu_720_p2 = ap_const_lv1_1))) then 
                wr_0_reg_231 <= wr_reg_893;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_425_p2 = ap_const_lv1_0))) then 
                wr_0_reg_231 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                add_ln24_1_reg_956 <= add_ln24_1_fu_673_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                add_ln24_2_reg_984 <= add_ln24_2_fu_726_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                add_ln24_reg_928 <= add_ln24_fu_620_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_824 <= add_ln8_fu_355_p2;
                r_reg_832 <= r_fu_367_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_840 <= c_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_425_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_885 <= zext_ln35_4_fu_454_p1(15 - 1 downto 0);
                    zext_ln26_reg_873(5 downto 0) <= zext_ln26_fu_437_p1(5 downto 0);
                    zext_ln35_2_reg_878(5 downto 0) <= zext_ln35_2_fu_441_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_868 <= f_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_463_p2 = ap_const_lv1_0))) then
                sub_ln26_2_reg_905 <= sub_ln26_2_fu_554_p2;
                sub_ln26_3_reg_910 <= sub_ln26_3_fu_581_p2;
                sub_ln26_4_reg_915 <= sub_ln26_4_fu_608_p2;
                sub_ln26_reg_898 <= sub_ln26_fu_487_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_893 <= wr_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_373_p2 = ap_const_lv1_0))) then
                    zext_ln14_reg_860(4 downto 0) <= zext_ln14_fu_421_p1(4 downto 0);
                    zext_ln26_1_reg_850(14 downto 5) <= zext_ln26_1_fu_407_p1(14 downto 5);
                    zext_ln26_2_reg_855(4 downto 0) <= zext_ln26_2_fu_411_p1(4 downto 0);
                    zext_ln35_reg_845(4 downto 0) <= zext_ln35_fu_385_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln35_reg_845(11 downto 5) <= "0000000";
    zext_ln26_1_reg_850(4 downto 0) <= "00000";
    zext_ln26_1_reg_850(15) <= '0';
    zext_ln26_2_reg_855(11 downto 5) <= "0000000";
    zext_ln14_reg_860(11 downto 5) <= "0000000";
    zext_ln26_reg_873(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_878(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_373_p2, ap_CS_fsm_state4, icmp_ln14_fu_425_p2, ap_CS_fsm_state5, icmp_ln18_fu_463_p2, ap_CS_fsm_state6, icmp_ln24_fu_614_p2, ap_CS_fsm_state10, icmp_ln24_1_fu_667_p2, ap_CS_fsm_state14, icmp_ln24_2_fu_720_p2, icmp_ln8_fu_361_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_361_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_373_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_425_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_463_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln24_fu_614_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln24_1_fu_667_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_2_fu_720_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln24_1_fu_673_p2 <= std_logic_vector(unsigned(ch_0_1_reg_287) + unsigned(ap_const_lv2_1));
    add_ln24_2_fu_726_p2 <= std_logic_vector(unsigned(ch_0_2_reg_310) + unsigned(ap_const_lv2_1));
    add_ln24_fu_620_p2 <= std_logic_vector(unsigned(ch_0_0_reg_265) + unsigned(ap_const_lv2_1));
    add_ln26_10_fu_700_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_878) + unsigned(tmp_19_cast_fu_692_p3));
    add_ln26_11_fu_710_p2 <= std_logic_vector(unsigned(zext_ln26_10_fu_679_p1) + unsigned(sub_ln26_3_reg_910));
    add_ln26_12_fu_740_p2 <= std_logic_vector(unsigned(zext_ln26_15_fu_736_p1) + unsigned(sub_ln26_reg_898));
    add_ln26_13_fu_753_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_878) + unsigned(tmp_21_cast_fu_745_p3));
    add_ln26_14_fu_763_p2 <= std_logic_vector(unsigned(zext_ln26_14_fu_732_p1) + unsigned(sub_ln26_4_reg_915));
    add_ln26_2_fu_415_p2 <= std_logic_vector(unsigned(c_0_reg_209) + unsigned(ap_const_lv5_2));
    add_ln26_3_fu_533_p2 <= std_logic_vector(unsigned(zext_ln35_reg_845) + unsigned(sext_ln26_fu_529_p1));
    add_ln26_4_fu_560_p2 <= std_logic_vector(unsigned(zext_ln26_2_reg_855) + unsigned(sext_ln26_fu_529_p1));
    add_ln26_5_fu_587_p2 <= std_logic_vector(unsigned(zext_ln14_reg_860) + unsigned(sext_ln26_fu_529_p1));
    add_ln26_6_fu_634_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_630_p1) + unsigned(sub_ln26_reg_898));
    add_ln26_7_fu_647_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_878) + unsigned(tmp_17_cast_fu_639_p3));
    add_ln26_8_fu_657_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_626_p1) + unsigned(sub_ln26_2_reg_905));
    add_ln26_9_fu_687_p2 <= std_logic_vector(unsigned(zext_ln26_11_fu_683_p1) + unsigned(sub_ln26_reg_898));
    add_ln26_fu_493_p2 <= std_logic_vector(unsigned(r_0_reg_185) + unsigned(zext_ln18_fu_459_p1));
    add_ln35_1_fu_449_p2 <= std_logic_vector(unsigned(zext_ln26_1_reg_850) + unsigned(zext_ln35_3_fu_445_p1));
    add_ln35_fu_393_p2 <= std_logic_vector(unsigned(phi_mul_reg_197) + unsigned(zext_ln35_1_fu_389_p1));
    add_ln8_fu_355_p2 <= std_logic_vector(unsigned(phi_mul_reg_197) + unsigned(ap_const_lv10_1A));
    and_ln34_fu_809_p2 <= (tmp_7_fu_339_p2 and or_ln34_fu_803_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_361_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_361_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_361_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_361_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_773_p1 <= grp_fu_321_p2;
    c_fu_379_p2 <= std_logic_vector(unsigned(c_0_reg_209) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_873(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_address0 <= zext_ln26_8_fu_652_p1(9 - 1 downto 0);

    conv_1_weights_0_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_address0 <= zext_ln26_12_fu_705_p1(9 - 1 downto 0);

    conv_1_weights_1_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_address0 <= zext_ln26_16_fu_758_p1(9 - 1 downto 0);

    conv_1_weights_2_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_1_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14, zext_ln26_9_fu_662_p1, zext_ln26_13_fu_715_p1, zext_ln26_17_fu_768_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_input_address0 <= zext_ln26_17_fu_768_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_input_address0 <= zext_ln26_13_fu_715_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_input_address0 <= zext_ln26_9_fu_662_p1(12 - 1 downto 0);
        else 
            conv_input_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_input_ce0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state10, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_885;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_321_p2 when (and_ln34_fu_809_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_431_p2 <= std_logic_vector(unsigned(f_0_reg_220) + unsigned(ap_const_lv6_1));

    grp_fu_321_p0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18, w_sum_0_reg_242, w_sum_2_0_reg_254, w_sum_2_1_reg_276, w_sum_2_2_reg_298)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_321_p0 <= w_sum_0_reg_242;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_321_p0 <= w_sum_2_2_reg_298;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_321_p0 <= w_sum_2_1_reg_276;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_321_p0 <= w_sum_2_0_reg_254;
        else 
            grp_fu_321_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_321_p1_assign_proc : process(conv_1_bias_q0, grp_fu_330_p2, ap_CS_fsm_state8, ap_CS_fsm_state12, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_fu_321_p1 <= conv_1_bias_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_fu_321_p1 <= grp_fu_330_p2;
        else 
            grp_fu_321_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_330_p0_assign_proc : process(conv_1_weights_0_q0, conv_1_weights_1_q0, conv_1_weights_2_q0, ap_CS_fsm_state7, ap_CS_fsm_state11, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_fu_330_p0 <= conv_1_weights_2_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_330_p0 <= conv_1_weights_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            grp_fu_330_p0 <= conv_1_weights_0_q0;
        else 
            grp_fu_330_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_373_p2 <= "1" when (c_0_reg_209 = ap_const_lv5_1A) else "0";
    icmp_ln14_fu_425_p2 <= "1" when (f_0_reg_220 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_463_p2 <= "1" when (wr_0_reg_231 = ap_const_lv2_3) else "0";
    icmp_ln24_1_fu_667_p2 <= "1" when (ch_0_1_reg_287 = ap_const_lv2_3) else "0";
    icmp_ln24_2_fu_720_p2 <= "1" when (ch_0_2_reg_310 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_614_p2 <= "1" when (ch_0_0_reg_265 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_797_p2 <= "1" when (trunc_ln34_fu_787_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_791_p2 <= "0" when (tmp_fu_777_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_361_p2 <= "1" when (r_0_reg_185 = ap_const_lv5_1A) else "0";
    or_ln34_fu_803_p2 <= (icmp_ln34_fu_791_p2 or icmp_ln34_1_fu_797_p2);
    p_shl1_cast_fu_573_p3 <= (trunc_ln26_1_fu_569_p1 & ap_const_lv2_0);
    p_shl2_cast_fu_546_p3 <= (trunc_ln26_fu_542_p1 & ap_const_lv2_0);
    p_shl_cast_fu_600_p3 <= (trunc_ln26_2_fu_596_p1 & ap_const_lv2_0);
    r_fu_367_p2 <= std_logic_vector(unsigned(r_0_reg_185) + unsigned(ap_const_lv5_1));
        sext_ln26_1_fu_538_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_3_fu_533_p2),13));

        sext_ln26_2_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_4_fu_560_p2),13));

        sext_ln26_3_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_5_fu_587_p2),13));

        sext_ln26_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_1_fu_523_p2),12));

    sub_ln26_1_fu_523_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_507_p1) - unsigned(zext_ln26_5_fu_519_p1));
    sub_ln26_2_fu_554_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_546_p3) - unsigned(sext_ln26_1_fu_538_p1));
    sub_ln26_3_fu_581_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_573_p3) - unsigned(sext_ln26_2_fu_565_p1));
    sub_ln26_4_fu_608_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_600_p3) - unsigned(sext_ln26_3_fu_592_p1));
    sub_ln26_fu_487_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_483_p1) - unsigned(zext_ln18_fu_459_p1));
    tmp_10_fu_499_p3 <= (add_ln26_fu_493_p2 & ap_const_lv5_0);
    tmp_11_fu_511_p3 <= (add_ln26_fu_493_p2 & ap_const_lv2_0);
    tmp_17_cast_fu_639_p3 <= (add_ln26_6_fu_634_p2 & ap_const_lv5_0);
    tmp_19_cast_fu_692_p3 <= (add_ln26_9_fu_687_p2 & ap_const_lv5_0);
    tmp_21_cast_fu_745_p3 <= (add_ln26_12_fu_740_p2 & ap_const_lv5_0);
    tmp_8_fu_399_p3 <= (add_ln35_fu_393_p2 & ap_const_lv5_0);
    tmp_9_fu_475_p3 <= (wr_0_reg_231 & ap_const_lv2_0);
    tmp_fu_777_p4 <= bitcast_ln34_fu_773_p1(30 downto 23);
    trunc_ln26_1_fu_569_p1 <= add_ln26_4_fu_560_p2(11 - 1 downto 0);
    trunc_ln26_2_fu_596_p1 <= add_ln26_5_fu_587_p2(11 - 1 downto 0);
    trunc_ln26_fu_542_p1 <= add_ln26_3_fu_533_p2(11 - 1 downto 0);
    trunc_ln34_fu_787_p1 <= bitcast_ln34_fu_773_p1(23 - 1 downto 0);
    wr_fu_469_p2 <= std_logic_vector(unsigned(wr_0_reg_231) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_415_p2),12));
    zext_ln18_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_231),5));
    zext_ln26_10_fu_679_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_287),13));
    zext_ln26_11_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_1_reg_287),5));
    zext_ln26_12_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_10_fu_700_p2),64));
    zext_ln26_13_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_11_fu_710_p2),64));
    zext_ln26_14_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_310),13));
    zext_ln26_15_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_2_reg_310),5));
    zext_ln26_16_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_753_p2),64));
    zext_ln26_17_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_14_fu_763_p2),64));
    zext_ln26_1_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_399_p3),16));
    zext_ln26_2_fu_411_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_379_p2),12));
    zext_ln26_3_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_475_p3),5));
    zext_ln26_4_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_499_p3),11));
    zext_ln26_5_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_511_p3),11));
    zext_ln26_6_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_265),13));
    zext_ln26_7_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_0_reg_265),5));
    zext_ln26_8_fu_652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_7_fu_647_p2),64));
    zext_ln26_9_fu_662_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_8_fu_657_p2),64));
    zext_ln26_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_220),64));
    zext_ln35_1_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_209),10));
    zext_ln35_2_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_220),10));
    zext_ln35_3_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_220),16));
    zext_ln35_4_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_449_p2),64));
    zext_ln35_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_209),12));
end behav;
