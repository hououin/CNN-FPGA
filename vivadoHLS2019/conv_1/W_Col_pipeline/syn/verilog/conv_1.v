// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=1297921,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=6,HLS_SYN_FF=727,HLS_SYN_LUT=1647,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_input_address1,
        conv_input_ce1,
        conv_input_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 11'd1;
parameter    ap_ST_fsm_state2 = 11'd2;
parameter    ap_ST_fsm_pp0_stage0 = 11'd4;
parameter    ap_ST_fsm_pp0_stage1 = 11'd8;
parameter    ap_ST_fsm_pp0_stage2 = 11'd16;
parameter    ap_ST_fsm_pp0_stage3 = 11'd32;
parameter    ap_ST_fsm_pp0_stage4 = 11'd64;
parameter    ap_ST_fsm_pp0_stage5 = 11'd128;
parameter    ap_ST_fsm_state11 = 11'd256;
parameter    ap_ST_fsm_state12 = 11'd512;
parameter    ap_ST_fsm_state13 = 11'd1024;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [11:0] conv_input_address1;
output   conv_input_ce1;
input  [31:0] conv_input_q1;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_input_address0;
reg conv_input_ce0;
reg conv_input_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [10:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
reg   [3:0] indvar_flatten_reg_239;
reg   [1:0] wr_0_reg_250;
reg   [31:0] w_sum_1_reg_261;
reg   [1:0] wc_0_reg_273;
reg   [31:0] reg_304;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state10_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln18_reg_773;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_290_p2;
reg   [31:0] reg_310;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_284_p2;
reg   [31:0] reg_315;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire   [0:0] icmp_ln8_fu_320_p2;
wire    ap_CS_fsm_state2;
wire   [14:0] add_ln8_fu_326_p2;
reg   [14:0] add_ln8_reg_731;
wire   [0:0] icmp_ln11_fu_338_p2;
reg   [0:0] icmp_ln11_reg_736;
wire   [4:0] select_ln35_1_fu_352_p3;
reg   [4:0] select_ln35_1_reg_741;
wire   [5:0] select_ln35_2_fu_394_p3;
reg   [5:0] select_ln35_2_reg_747;
wire   [4:0] select_ln35_3_fu_402_p3;
reg   [4:0] select_ln35_3_reg_752;
wire   [63:0] zext_ln26_fu_425_p1;
reg   [63:0] zext_ln26_reg_758;
wire   [9:0] zext_ln35_2_fu_429_p1;
reg   [9:0] zext_ln35_2_reg_763;
reg   [14:0] conv_out_addr_reg_768;
wire   [0:0] icmp_ln18_fu_448_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state9_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_773_pp0_iter1_reg;
wire   [3:0] add_ln18_1_fu_454_p2;
reg   [3:0] add_ln18_1_reg_777;
wire   [1:0] select_ln18_fu_472_p3;
reg   [1:0] select_ln18_reg_782;
wire   [1:0] select_ln18_1_fu_480_p3;
reg   [1:0] select_ln18_1_reg_787;
wire   [12:0] sub_ln26_2_fu_612_p2;
reg   [12:0] sub_ln26_2_reg_797;
reg   [31:0] conv_input_load_1_reg_822;
reg   [31:0] tmp_1_2_reg_827;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire   [1:0] wc_fu_644_p2;
reg   [1:0] wc_reg_832;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state11;
wire   [5:0] f_fu_649_p2;
reg   [5:0] f_reg_847;
wire   [10:0] select_ln11_fu_660_p3;
reg   [10:0] select_ln11_reg_852;
wire    ap_CS_fsm_state12;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage1_subdone;
reg   [14:0] indvar_flatten21_reg_183;
wire    ap_CS_fsm_state13;
reg   [4:0] r_0_reg_194;
reg   [10:0] indvar_flatten7_reg_205;
reg   [4:0] c_0_reg_217;
reg   [5:0] f_0_reg_228;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_243_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_254_p4;
wire   [31:0] ap_phi_mux_w_sum_1_phi_fu_265_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_277_p4;
wire   [63:0] zext_ln35_4_fu_443_p1;
wire   [63:0] zext_ln26_6_fu_576_p1;
wire   [63:0] zext_ln26_8_fu_618_p1;
wire   [63:0] zext_ln26_9_fu_629_p1;
wire   [63:0] zext_ln26_10_fu_639_p1;
wire    ap_block_pp0_stage1;
reg   [31:0] grp_fu_284_p0;
reg   [31:0] grp_fu_284_p1;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_290_p0;
reg   [31:0] grp_fu_290_p1;
wire    ap_block_pp0_stage3;
wire   [4:0] r_fu_332_p2;
wire   [0:0] icmp_ln14_fu_370_p2;
wire   [0:0] xor_ln35_fu_364_p2;
wire   [4:0] select_ln35_fu_344_p3;
wire   [0:0] and_ln35_fu_376_p2;
wire   [0:0] or_ln35_fu_388_p2;
wire   [4:0] c_fu_382_p2;
wire   [9:0] grp_fu_718_p3;
wire   [14:0] tmp_1_fu_414_p3;
wire   [15:0] zext_ln11_fu_421_p1;
wire   [15:0] zext_ln35_3_fu_433_p1;
wire   [15:0] add_ln35_1_fu_437_p2;
wire   [0:0] icmp_ln21_fu_466_p2;
wire   [1:0] wr_fu_460_p2;
wire   [3:0] tmp_4_fu_492_p3;
wire   [4:0] zext_ln26_2_fu_500_p1;
wire   [4:0] zext_ln26_1_fu_488_p1;
wire   [4:0] add_ln18_fu_510_p2;
wire   [9:0] tmp_7_fu_515_p3;
wire   [6:0] tmp_8_fu_527_p3;
wire   [10:0] zext_ln26_3_fu_523_p1;
wire   [10:0] zext_ln26_4_fu_535_p1;
wire   [10:0] sub_ln26_1_fu_539_p2;
wire   [4:0] zext_ln26_5_fu_553_p1;
wire   [4:0] sub_ln26_fu_504_p2;
wire   [4:0] add_ln26_fu_557_p2;
wire   [9:0] tmp_10_cast_fu_563_p3;
wire   [9:0] add_ln26_2_fu_571_p2;
wire   [4:0] zext_ln21_fu_549_p1;
wire   [4:0] add_ln26_1_fu_581_p2;
wire   [11:0] zext_ln26_7_fu_586_p1;
wire  signed [11:0] sext_ln26_fu_545_p1;
wire  signed [11:0] add_ln26_3_fu_590_p2;
wire   [10:0] trunc_ln26_fu_600_p1;
wire   [12:0] p_shl_cast_fu_604_p3;
wire  signed [12:0] sext_ln26_1_fu_596_p1;
wire   [12:0] add_ln26_4_fu_623_p2;
wire   [12:0] add_ln26_5_fu_634_p2;
wire    ap_block_pp0_stage5;
wire   [10:0] add_ln11_1_fu_654_p2;
wire   [31:0] bitcast_ln34_fu_667_p1;
wire   [7:0] tmp_fu_671_p4;
wire   [22:0] trunc_ln34_fu_681_p1;
wire   [0:0] icmp_ln34_1_fu_691_p2;
wire   [0:0] icmp_ln34_fu_685_p2;
wire   [0:0] or_ln34_fu_697_p2;
wire   [0:0] tmp_6_fu_298_p2;
wire   [0:0] and_ln34_fu_703_p2;
wire   [4:0] grp_fu_718_p0;
wire   [5:0] grp_fu_718_p1;
wire   [4:0] grp_fu_718_p2;
reg   [10:0] ap_NS_fsm;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_718_p00;
wire   [9:0] grp_fu_718_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 11'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_284_p0),
    .din1(grp_fu_284_p1),
    .ce(1'b1),
    .dout(grp_fu_284_p2)
);

conv_1_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_290_p0),
    .din1(grp_fu_290_p1),
    .ce(1'b1),
    .dout(grp_fu_290_p2)
);

conv_1_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_eOg_U3(
    .din0(grp_fu_284_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_6_fu_298_p2)
);

conv_1_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
conv_1_mac_muladdfYi_U4(
    .din0(grp_fu_718_p0),
    .din1(grp_fu_718_p1),
    .din2(grp_fu_718_p2),
    .dout(grp_fu_718_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        c_0_reg_217 <= select_ln35_3_reg_752;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_217 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        f_0_reg_228 <= f_reg_847;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_228 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten21_reg_183 <= add_ln8_reg_731;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_183 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        indvar_flatten7_reg_205 <= select_ln11_reg_852;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_205 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_239 <= add_ln18_1_reg_777;
    end else if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_239 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        r_0_reg_194 <= select_ln35_1_reg_741;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_194 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_sum_1_reg_261 <= grp_fu_284_p2;
    end else if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_1_reg_261 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_273 <= wc_reg_832;
    end else if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_273 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_250 <= select_ln18_1_reg_787;
    end else if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_250 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln18_1_reg_777 <= add_ln18_1_fu_454_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_731 <= add_ln8_fu_326_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        conv_input_load_1_reg_822 <= conv_input_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_320_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_768 <= zext_ln35_4_fu_443_p1;
        icmp_ln11_reg_736 <= icmp_ln11_fu_338_p2;
        select_ln35_1_reg_741 <= select_ln35_1_fu_352_p3;
        select_ln35_2_reg_747 <= select_ln35_2_fu_394_p3;
        select_ln35_3_reg_752 <= select_ln35_3_fu_402_p3;
        zext_ln26_reg_758[5 : 0] <= zext_ln26_fu_425_p1[5 : 0];
        zext_ln35_2_reg_763[5 : 0] <= zext_ln35_2_fu_429_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        f_reg_847 <= f_fu_649_p2;
        select_ln11_reg_852 <= select_ln11_fu_660_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_773 <= icmp_ln18_fu_448_p2;
        icmp_ln18_reg_773_pp0_iter1_reg <= icmp_ln18_reg_773;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_773 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln18_reg_773 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        reg_304 <= conv_input_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln18_reg_773 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_310 <= grp_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001)) | ((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)))) begin
        reg_315 <= grp_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_448_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_1_reg_787 <= select_ln18_1_fu_480_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_448_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_reg_782 <= select_ln18_fu_472_p3;
        sub_ln26_2_reg_797 <= sub_ln26_2_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        tmp_1_2_reg_827 <= grp_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
        wc_reg_832 <= wc_fu_644_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_448_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_320_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_243_p4 = add_ln18_1_reg_777;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_243_p4 = indvar_flatten_reg_239;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wc_0_phi_fu_277_p4 = wc_reg_832;
    end else begin
        ap_phi_mux_wc_0_phi_fu_277_p4 = wc_0_reg_273;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_773 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_wr_0_phi_fu_254_p4 = select_ln18_1_reg_787;
    end else begin
        ap_phi_mux_wr_0_phi_fu_254_p4 = wr_0_reg_250;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_320_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_input_address0 = zext_ln26_10_fu_639_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_input_address0 = zext_ln26_8_fu_618_p1;
        end else begin
            conv_input_address0 = 'bx;
        end
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_input_ce1 = 1'b1;
    end else begin
        conv_input_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_284_p0 = w_sum_1_reg_261;
    end else if ((((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_284_p0 = reg_315;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_284_p0 = ap_phi_mux_w_sum_1_phi_fu_265_p4;
    end else begin
        grp_fu_284_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_284_p1 = conv_1_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_284_p1 = tmp_1_2_reg_827;
    end else if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_284_p1 = reg_310;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_284_p1 = grp_fu_290_p2;
    end else begin
        grp_fu_284_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_290_p0 = reg_304;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_290_p0 = conv_input_load_1_reg_822;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_290_p0 = conv_1_weights_0_q0;
        end else begin
            grp_fu_290_p0 = 'bx;
        end
    end else begin
        grp_fu_290_p0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)))) begin
        grp_fu_290_p1 = 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_290_p1 = conv_input_q0;
    end else begin
        grp_fu_290_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_320_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_448_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln18_fu_448_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_654_p2 = (11'd1 + indvar_flatten7_reg_205);

assign add_ln18_1_fu_454_p2 = (ap_phi_mux_indvar_flatten_phi_fu_243_p4 + 4'd1);

assign add_ln18_fu_510_p2 = (select_ln35_1_reg_741 + zext_ln26_1_fu_488_p1);

assign add_ln26_1_fu_581_p2 = (select_ln35_3_reg_752 + zext_ln21_fu_549_p1);

assign add_ln26_2_fu_571_p2 = (zext_ln35_2_reg_763 + tmp_10_cast_fu_563_p3);

assign add_ln26_3_fu_590_p2 = ($signed(zext_ln26_7_fu_586_p1) + $signed(sext_ln26_fu_545_p1));

assign add_ln26_4_fu_623_p2 = (13'd1 + sub_ln26_2_fu_612_p2);

assign add_ln26_5_fu_634_p2 = (13'd2 + sub_ln26_2_reg_797);

assign add_ln26_fu_557_p2 = (zext_ln26_5_fu_553_p1 + sub_ln26_fu_504_p2);

assign add_ln35_1_fu_437_p2 = (zext_ln11_fu_421_p1 + zext_ln35_3_fu_433_p1);

assign add_ln8_fu_326_p2 = (indvar_flatten21_reg_183 + 15'd1);

assign and_ln34_fu_703_p2 = (tmp_6_fu_298_p2 & or_ln34_fu_697_p2);

assign and_ln35_fu_376_p2 = (xor_ln35_fu_364_p2 & icmp_ln14_fu_370_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_1_phi_fu_265_p4 = w_sum_1_reg_261;

assign bitcast_ln34_fu_667_p1 = grp_fu_284_p2;

assign c_fu_382_p2 = (select_ln35_fu_344_p3 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_758;

assign conv_1_weights_0_address0 = zext_ln26_6_fu_576_p1;

assign conv_input_address1 = zext_ln26_9_fu_629_p1;

assign conv_out_address0 = conv_out_addr_reg_768;

assign conv_out_d0 = ((and_ln34_fu_703_p2[0:0] === 1'b1) ? grp_fu_284_p2 : 32'd0);

assign f_fu_649_p2 = (6'd1 + select_ln35_2_reg_747);

assign grp_fu_718_p0 = grp_fu_718_p00;

assign grp_fu_718_p00 = select_ln35_1_fu_352_p3;

assign grp_fu_718_p1 = 10'd26;

assign grp_fu_718_p2 = grp_fu_718_p20;

assign grp_fu_718_p20 = select_ln35_3_fu_402_p3;

assign icmp_ln11_fu_338_p2 = ((indvar_flatten7_reg_205 == 11'd832) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_370_p2 = ((f_0_reg_228 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_448_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_243_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_466_p2 = ((ap_phi_mux_wc_0_phi_fu_277_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_691_p2 = ((trunc_ln34_fu_681_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_685_p2 = ((tmp_fu_671_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_320_p2 = ((indvar_flatten21_reg_183 == 15'd21632) ? 1'b1 : 1'b0);

assign or_ln34_fu_697_p2 = (icmp_ln34_fu_685_p2 | icmp_ln34_1_fu_691_p2);

assign or_ln35_fu_388_p2 = (icmp_ln11_fu_338_p2 | and_ln35_fu_376_p2);

assign p_shl_cast_fu_604_p3 = {{trunc_ln26_fu_600_p1}, {2'd0}};

assign r_fu_332_p2 = (r_0_reg_194 + 5'd1);

assign select_ln11_fu_660_p3 = ((icmp_ln11_reg_736[0:0] === 1'b1) ? 11'd1 : add_ln11_1_fu_654_p2);

assign select_ln18_1_fu_480_p3 = ((icmp_ln21_fu_466_p2[0:0] === 1'b1) ? wr_fu_460_p2 : ap_phi_mux_wr_0_phi_fu_254_p4);

assign select_ln18_fu_472_p3 = ((icmp_ln21_fu_466_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_277_p4);

assign select_ln35_1_fu_352_p3 = ((icmp_ln11_fu_338_p2[0:0] === 1'b1) ? r_fu_332_p2 : r_0_reg_194);

assign select_ln35_2_fu_394_p3 = ((or_ln35_fu_388_p2[0:0] === 1'b1) ? 6'd0 : f_0_reg_228);

assign select_ln35_3_fu_402_p3 = ((and_ln35_fu_376_p2[0:0] === 1'b1) ? c_fu_382_p2 : select_ln35_fu_344_p3);

assign select_ln35_fu_344_p3 = ((icmp_ln11_fu_338_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_217);

assign sext_ln26_1_fu_596_p1 = add_ln26_3_fu_590_p2;

assign sext_ln26_fu_545_p1 = $signed(sub_ln26_1_fu_539_p2);

assign sub_ln26_1_fu_539_p2 = (zext_ln26_3_fu_523_p1 - zext_ln26_4_fu_535_p1);

assign sub_ln26_2_fu_612_p2 = ($signed(p_shl_cast_fu_604_p3) - $signed(sext_ln26_1_fu_596_p1));

assign sub_ln26_fu_504_p2 = (zext_ln26_2_fu_500_p1 - zext_ln26_1_fu_488_p1);

assign tmp_10_cast_fu_563_p3 = {{add_ln26_fu_557_p2}, {5'd0}};

assign tmp_1_fu_414_p3 = {{grp_fu_718_p3}, {5'd0}};

assign tmp_4_fu_492_p3 = {{select_ln18_1_fu_480_p3}, {2'd0}};

assign tmp_7_fu_515_p3 = {{add_ln18_fu_510_p2}, {5'd0}};

assign tmp_8_fu_527_p3 = {{add_ln18_fu_510_p2}, {2'd0}};

assign tmp_fu_671_p4 = {{bitcast_ln34_fu_667_p1[30:23]}};

assign trunc_ln26_fu_600_p1 = add_ln26_3_fu_590_p2[10:0];

assign trunc_ln34_fu_681_p1 = bitcast_ln34_fu_667_p1[22:0];

assign wc_fu_644_p2 = (2'd1 + select_ln18_reg_782);

assign wr_fu_460_p2 = (2'd1 + ap_phi_mux_wr_0_phi_fu_254_p4);

assign xor_ln35_fu_364_p2 = (icmp_ln11_fu_338_p2 ^ 1'd1);

assign zext_ln11_fu_421_p1 = tmp_1_fu_414_p3;

assign zext_ln21_fu_549_p1 = select_ln18_fu_472_p3;

assign zext_ln26_10_fu_639_p1 = add_ln26_5_fu_634_p2;

assign zext_ln26_1_fu_488_p1 = select_ln18_1_fu_480_p3;

assign zext_ln26_2_fu_500_p1 = tmp_4_fu_492_p3;

assign zext_ln26_3_fu_523_p1 = tmp_7_fu_515_p3;

assign zext_ln26_4_fu_535_p1 = tmp_8_fu_527_p3;

assign zext_ln26_5_fu_553_p1 = select_ln18_fu_472_p3;

assign zext_ln26_6_fu_576_p1 = add_ln26_2_fu_571_p2;

assign zext_ln26_7_fu_586_p1 = add_ln26_1_fu_581_p2;

assign zext_ln26_8_fu_618_p1 = sub_ln26_2_fu_612_p2;

assign zext_ln26_9_fu_629_p1 = add_ln26_4_fu_623_p2;

assign zext_ln26_fu_425_p1 = select_ln35_2_fu_394_p3;

assign zext_ln35_2_fu_429_p1 = select_ln35_2_fu_394_p3;

assign zext_ln35_3_fu_433_p1 = select_ln35_2_fu_394_p3;

assign zext_ln35_4_fu_443_p1 = add_ln35_1_fu_437_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_758[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_2_reg_763[9:6] <= 4'b0000;
end

endmodule //conv_1
