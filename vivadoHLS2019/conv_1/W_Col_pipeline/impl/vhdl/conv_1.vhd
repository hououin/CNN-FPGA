-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_input_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce0 : OUT STD_LOGIC;
    conv_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_input_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_input_ce1 : OUT STD_LOGIC;
    conv_input_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=1297921,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=6,HLS_SYN_FF=727,HLS_SYN_LUT=1647,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv13_2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_239 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_250 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_261 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_273 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln18_reg_773 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_290_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_284_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_315 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal icmp_ln8_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_326_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_731 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln11_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_352_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_1_reg_741 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_fu_394_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_2_reg_747 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_3_fu_402_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_reg_752 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_758 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_429_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln35_2_reg_763 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_addr_reg_768 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln18_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_773_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_454_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_1_reg_777 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_fu_472_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_reg_782 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_fu_480_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_787 : STD_LOGIC_VECTOR (1 downto 0);
    signal sub_ln26_2_fu_612_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln26_2_reg_797 : STD_LOGIC_VECTOR (12 downto 0);
    signal conv_input_load_1_reg_822 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_827 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal wc_fu_644_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_832 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal f_fu_649_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_847 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln11_fu_660_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_852 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten21_reg_183 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal r_0_reg_194 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten7_reg_205 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_217 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_228 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_243_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_254_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_1_phi_fu_265_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_277_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln35_4_fu_443_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_6_fu_576_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_639_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_284_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_284_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal r_fu_332_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_344_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_382_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_718_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_414_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln11_fu_421_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_3_fu_433_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_1_fu_437_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln21_fu_466_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_460_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_492_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_500_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_488_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_fu_510_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_515_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_527_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_3_fu_523_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_4_fu_535_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_539_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_5_fu_553_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_504_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_fu_557_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_cast_fu_563_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_2_fu_571_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln21_fu_549_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_1_fu_581_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_7_fu_586_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln26_fu_545_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln26_3_fu_590_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln26_fu_600_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_604_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln26_1_fu_596_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_4_fu_623_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln26_5_fu_634_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal add_ln11_1_fu_654_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_671_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_681_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_691_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_685_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_703_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_718_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_718_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_718_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_718_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_718_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component conv_1_fadd_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fmul_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_fcmp_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_mac_muladdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_address0,
        ce0 => conv_1_weights_0_ce0,
        q0 => conv_1_weights_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_fadd_32ns_cud_U1 : component conv_1_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_284_p0,
        din1 => grp_fu_284_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_284_p2);

    conv_1_fmul_32ns_dEe_U2 : component conv_1_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        din1 => grp_fu_290_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_290_p2);

    conv_1_fcmp_32ns_eOg_U3 : component conv_1_fcmp_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_284_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_298_p2);

    conv_1_mac_muladdfYi_U4 : component conv_1_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_718_p0,
        din1 => grp_fu_718_p1,
        din2 => grp_fu_718_p2,
        dout => grp_fu_718_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                c_0_reg_217 <= select_ln35_3_reg_752;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_217 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                f_0_reg_228 <= f_reg_847;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_228 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten21_reg_183 <= add_ln8_reg_731;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_reg_183 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                indvar_flatten7_reg_205 <= select_ln11_reg_852;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_reg_205 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_239 <= add_ln18_1_reg_777;
            elsif (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_239 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_194_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                r_0_reg_194 <= select_ln35_1_reg_741;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_194 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                w_sum_1_reg_261 <= grp_fu_284_p2;
            elsif (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_1_reg_261 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_273 <= wc_reg_832;
            elsif (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_273 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_250 <= select_ln18_1_reg_787;
            elsif (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_250 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_777 <= add_ln18_1_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_731 <= add_ln8_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                conv_input_load_1_reg_822 <= conv_input_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_320_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_768 <= zext_ln35_4_fu_443_p1(15 - 1 downto 0);
                icmp_ln11_reg_736 <= icmp_ln11_fu_338_p2;
                select_ln35_1_reg_741 <= select_ln35_1_fu_352_p3;
                select_ln35_2_reg_747 <= select_ln35_2_fu_394_p3;
                select_ln35_3_reg_752 <= select_ln35_3_fu_402_p3;
                    zext_ln26_reg_758(5 downto 0) <= zext_ln26_fu_425_p1(5 downto 0);
                    zext_ln35_2_reg_763(5 downto 0) <= zext_ln35_2_fu_429_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                f_reg_847 <= f_fu_649_p2;
                select_ln11_reg_852 <= select_ln11_fu_660_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_773 <= icmp_ln18_fu_448_p2;
                icmp_ln18_reg_773_pp0_iter1_reg <= icmp_ln18_reg_773;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then
                reg_304 <= conv_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_310 <= grp_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)))) then
                reg_315 <= grp_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_448_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_787 <= select_ln18_1_fu_480_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_448_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_reg_782 <= select_ln18_fu_472_p3;
                sub_ln26_2_reg_797 <= sub_ln26_2_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_1_2_reg_827 <= grp_fu_290_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then
                wc_reg_832 <= wc_fu_644_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_758(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_763(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, icmp_ln8_fu_320_p2, ap_CS_fsm_state2, icmp_ln18_fu_448_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_320_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_448_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln18_fu_448_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_654_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten7_reg_205));
    add_ln18_1_fu_454_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_243_p4) + unsigned(ap_const_lv4_1));
    add_ln18_fu_510_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_741) + unsigned(zext_ln26_1_fu_488_p1));
    add_ln26_1_fu_581_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_752) + unsigned(zext_ln21_fu_549_p1));
    add_ln26_2_fu_571_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_763) + unsigned(tmp_10_cast_fu_563_p3));
    add_ln26_3_fu_590_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_586_p1) + unsigned(sext_ln26_fu_545_p1));
    add_ln26_4_fu_623_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(sub_ln26_2_fu_612_p2));
    add_ln26_5_fu_634_p2 <= std_logic_vector(unsigned(ap_const_lv13_2) + unsigned(sub_ln26_2_reg_797));
    add_ln26_fu_557_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_553_p1) + unsigned(sub_ln26_fu_504_p2));
    add_ln35_1_fu_437_p2 <= std_logic_vector(unsigned(zext_ln11_fu_421_p1) + unsigned(zext_ln35_3_fu_433_p1));
    add_ln8_fu_326_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_183) + unsigned(ap_const_lv15_1));
    and_ln34_fu_703_p2 <= (tmp_6_fu_298_p2 and or_ln34_fu_697_p2);
    and_ln35_fu_376_p2 <= (xor_ln35_fu_364_p2 and icmp_ln14_fu_370_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(8);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_448_p2)
    begin
        if ((icmp_ln18_fu_448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(icmp_ln8_fu_320_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_320_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_243_p4_assign_proc : process(indvar_flatten_reg_239, icmp_ln18_reg_773, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_777, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_243_p4 <= add_ln18_1_reg_777;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_243_p4 <= indvar_flatten_reg_239;
        end if; 
    end process;

    ap_phi_mux_w_sum_1_phi_fu_265_p4 <= w_sum_1_reg_261;

    ap_phi_mux_wc_0_phi_fu_277_p4_assign_proc : process(wc_0_reg_273, icmp_ln18_reg_773, ap_CS_fsm_pp0_stage0, wc_reg_832, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_277_p4 <= wc_reg_832;
        else 
            ap_phi_mux_wc_0_phi_fu_277_p4 <= wc_0_reg_273;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_254_p4_assign_proc : process(wr_0_reg_250, icmp_ln18_reg_773, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_787, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_773 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_254_p4 <= select_ln18_1_reg_787;
        else 
            ap_phi_mux_wr_0_phi_fu_254_p4 <= wr_0_reg_250;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_320_p2, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_320_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_667_p1 <= grp_fu_284_p2;
    c_fu_382_p2 <= std_logic_vector(unsigned(select_ln35_fu_344_p3) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_758(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_address0 <= zext_ln26_6_fu_576_p1(9 - 1 downto 0);

    conv_1_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_8_fu_618_p1, zext_ln26_10_fu_639_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_input_address0 <= zext_ln26_10_fu_639_p1(12 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_input_address0 <= zext_ln26_8_fu_618_p1(12 - 1 downto 0);
            else 
                conv_input_address0 <= "XXXXXXXXXXXX";
            end if;
        else 
            conv_input_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;

    conv_input_address1 <= zext_ln26_9_fu_629_p1(12 - 1 downto 0);

    conv_input_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            conv_input_ce0 <= ap_const_logic_1;
        else 
            conv_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_input_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_input_ce1 <= ap_const_logic_1;
        else 
            conv_input_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_768;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_284_p2 when (and_ln34_fu_703_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_649_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_2_reg_747));

    grp_fu_284_p0_assign_proc : process(w_sum_1_reg_261, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, reg_315, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_phi_mux_w_sum_1_phi_fu_265_p4, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_284_p0 <= w_sum_1_reg_261;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_284_p0 <= reg_315;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_284_p0 <= ap_phi_mux_w_sum_1_phi_fu_265_p4;
        else 
            grp_fu_284_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_284_p1_assign_proc : process(conv_1_bias_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, grp_fu_290_p2, reg_310, ap_CS_fsm_pp0_stage0, tmp_1_2_reg_827, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_block_pp0_stage2, ap_block_pp0_stage4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_284_p1 <= conv_1_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_284_p1 <= tmp_1_2_reg_827;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_284_p1 <= reg_310;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_284_p1 <= grp_fu_290_p2;
        else 
            grp_fu_284_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_290_p0_assign_proc : process(conv_1_weights_0_q0, reg_304, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, conv_input_load_1_reg_822, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_290_p0 <= reg_304;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_290_p0 <= conv_input_load_1_reg_822;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_290_p0 <= conv_1_weights_0_q0;
            else 
                grp_fu_290_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_290_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_290_p1_assign_proc : process(conv_input_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_290_p1 <= ap_const_lv32_0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_290_p1 <= conv_input_q0;
        else 
            grp_fu_290_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_718_p0 <= grp_fu_718_p00(5 - 1 downto 0);
    grp_fu_718_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_352_p3),10));
    grp_fu_718_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_718_p2 <= grp_fu_718_p20(5 - 1 downto 0);
    grp_fu_718_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_402_p3),10));
    icmp_ln11_fu_338_p2 <= "1" when (indvar_flatten7_reg_205 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_370_p2 <= "1" when (f_0_reg_228 = ap_const_lv6_20) else "0";
    icmp_ln18_fu_448_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_243_p4 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_466_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_277_p4 = ap_const_lv2_3) else "0";
    icmp_ln34_1_fu_691_p2 <= "1" when (trunc_ln34_fu_681_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_685_p2 <= "0" when (tmp_fu_671_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_320_p2 <= "1" when (indvar_flatten21_reg_183 = ap_const_lv15_5480) else "0";
    or_ln34_fu_697_p2 <= (icmp_ln34_fu_685_p2 or icmp_ln34_1_fu_691_p2);
    or_ln35_fu_388_p2 <= (icmp_ln11_fu_338_p2 or and_ln35_fu_376_p2);
    p_shl_cast_fu_604_p3 <= (trunc_ln26_fu_600_p1 & ap_const_lv2_0);
    r_fu_332_p2 <= std_logic_vector(unsigned(r_0_reg_194) + unsigned(ap_const_lv5_1));
    select_ln11_fu_660_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_reg_736(0) = '1') else 
        add_ln11_1_fu_654_p2;
    select_ln18_1_fu_480_p3 <= 
        wr_fu_460_p2 when (icmp_ln21_fu_466_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_254_p4;
    select_ln18_fu_472_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_466_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_277_p4;
    select_ln35_1_fu_352_p3 <= 
        r_fu_332_p2 when (icmp_ln11_fu_338_p2(0) = '1') else 
        r_0_reg_194;
    select_ln35_2_fu_394_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_388_p2(0) = '1') else 
        f_0_reg_228;
    select_ln35_3_fu_402_p3 <= 
        c_fu_382_p2 when (and_ln35_fu_376_p2(0) = '1') else 
        select_ln35_fu_344_p3;
    select_ln35_fu_344_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_338_p2(0) = '1') else 
        c_0_reg_217;
        sext_ln26_1_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_3_fu_590_p2),13));

        sext_ln26_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_1_fu_539_p2),12));

    sub_ln26_1_fu_539_p2 <= std_logic_vector(unsigned(zext_ln26_3_fu_523_p1) - unsigned(zext_ln26_4_fu_535_p1));
    sub_ln26_2_fu_612_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_604_p3) - unsigned(sext_ln26_1_fu_596_p1));
    sub_ln26_fu_504_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_500_p1) - unsigned(zext_ln26_1_fu_488_p1));
    tmp_10_cast_fu_563_p3 <= (add_ln26_fu_557_p2 & ap_const_lv5_0);
    tmp_1_fu_414_p3 <= (grp_fu_718_p3 & ap_const_lv5_0);
    tmp_4_fu_492_p3 <= (select_ln18_1_fu_480_p3 & ap_const_lv2_0);
    tmp_7_fu_515_p3 <= (add_ln18_fu_510_p2 & ap_const_lv5_0);
    tmp_8_fu_527_p3 <= (add_ln18_fu_510_p2 & ap_const_lv2_0);
    tmp_fu_671_p4 <= bitcast_ln34_fu_667_p1(30 downto 23);
    trunc_ln26_fu_600_p1 <= add_ln26_3_fu_590_p2(11 - 1 downto 0);
    trunc_ln34_fu_681_p1 <= bitcast_ln34_fu_667_p1(23 - 1 downto 0);
    wc_fu_644_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln18_reg_782));
    wr_fu_460_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_254_p4));
    xor_ln35_fu_364_p2 <= (icmp_ln11_fu_338_p2 xor ap_const_lv1_1);
    zext_ln11_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_414_p3),16));
    zext_ln21_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_472_p3),5));
    zext_ln26_10_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_634_p2),64));
    zext_ln26_1_fu_488_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_480_p3),5));
    zext_ln26_2_fu_500_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_492_p3),5));
    zext_ln26_3_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_515_p3),11));
    zext_ln26_4_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_527_p3),11));
    zext_ln26_5_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_472_p3),5));
    zext_ln26_6_fu_576_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_2_fu_571_p2),64));
    zext_ln26_7_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_581_p2),12));
    zext_ln26_8_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln26_2_fu_612_p2),64));
    zext_ln26_9_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_4_fu_623_p2),64));
    zext_ln26_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_394_p3),64));
    zext_ln35_2_fu_429_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_394_p3),10));
    zext_ln35_3_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_394_p3),16));
    zext_ln35_4_fu_443_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_437_p2),64));
end behav;
