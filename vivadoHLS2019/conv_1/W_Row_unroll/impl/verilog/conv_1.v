// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_1,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=2856829,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=5,HLS_SYN_FF=781,HLS_SYN_LUT=1948,HLS_VERSION=2019_1}" *)

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_input_address0,
        conv_input_ce0,
        conv_input_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 21'd1;
parameter    ap_ST_fsm_state2 = 21'd2;
parameter    ap_ST_fsm_state3 = 21'd4;
parameter    ap_ST_fsm_state4 = 21'd8;
parameter    ap_ST_fsm_state5 = 21'd16;
parameter    ap_ST_fsm_state6 = 21'd32;
parameter    ap_ST_fsm_state7 = 21'd64;
parameter    ap_ST_fsm_state8 = 21'd128;
parameter    ap_ST_fsm_state9 = 21'd256;
parameter    ap_ST_fsm_state10 = 21'd512;
parameter    ap_ST_fsm_state11 = 21'd1024;
parameter    ap_ST_fsm_state12 = 21'd2048;
parameter    ap_ST_fsm_state13 = 21'd4096;
parameter    ap_ST_fsm_state14 = 21'd8192;
parameter    ap_ST_fsm_state15 = 21'd16384;
parameter    ap_ST_fsm_state16 = 21'd32768;
parameter    ap_ST_fsm_state17 = 21'd65536;
parameter    ap_ST_fsm_state18 = 21'd131072;
parameter    ap_ST_fsm_state19 = 21'd262144;
parameter    ap_ST_fsm_state20 = 21'd524288;
parameter    ap_ST_fsm_state21 = 21'd1048576;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_input_address0;
output   conv_input_ce0;
input  [31:0] conv_input_q0;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[11:0] conv_input_address0;
reg conv_input_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [20:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [8:0] conv_1_weights_1_address0;
reg    conv_1_weights_1_ce0;
wire   [31:0] conv_1_weights_1_q0;
wire   [4:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [8:0] conv_1_weights_2_address0;
reg    conv_1_weights_2_ce0;
wire   [31:0] conv_1_weights_2_q0;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state17;
wire   [31:0] grp_fu_376_p2;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state18;
wire   [9:0] add_ln8_fu_401_p2;
reg   [9:0] add_ln8_reg_1018;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_413_p2;
reg   [4:0] r_reg_1026;
wire  signed [11:0] sext_ln26_fu_449_p1;
reg  signed [11:0] sext_ln26_reg_1031;
wire   [0:0] icmp_ln8_fu_407_p2;
wire  signed [11:0] sext_ln26_1_fu_483_p1;
reg  signed [11:0] sext_ln26_1_reg_1036;
wire  signed [11:0] sext_ln26_2_fu_523_p1;
reg  signed [11:0] sext_ln26_2_reg_1041;
wire   [4:0] c_fu_533_p2;
reg   [4:0] c_reg_1049;
wire    ap_CS_fsm_state3;
wire   [15:0] zext_ln14_fu_557_p1;
reg   [15:0] zext_ln14_reg_1054;
wire   [0:0] icmp_ln11_fu_527_p2;
wire   [5:0] f_fu_567_p2;
reg   [5:0] f_reg_1062;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln26_fu_573_p1;
reg   [63:0] zext_ln26_reg_1067;
wire   [0:0] icmp_ln14_fu_561_p2;
wire   [9:0] zext_ln35_1_fu_577_p1;
reg   [9:0] zext_ln35_1_reg_1072;
reg   [14:0] conv_out_addr_reg_1079;
wire   [1:0] add_ln21_fu_605_p2;
reg   [1:0] add_ln21_reg_1087;
wire    ap_CS_fsm_state5;
wire   [4:0] sub_ln26_3_fu_623_p2;
reg   [4:0] sub_ln26_3_reg_1092;
wire   [0:0] icmp_ln21_fu_599_p2;
wire   [12:0] sub_ln26_4_fu_660_p2;
reg   [12:0] sub_ln26_4_reg_1097;
wire   [1:0] add_ln24_fu_672_p2;
reg   [1:0] add_ln24_reg_1105;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln24_fu_666_p2;
wire   [31:0] grp_fu_367_p2;
wire    ap_CS_fsm_state9;
wire   [1:0] add_ln21_1_fu_729_p2;
reg   [1:0] add_ln21_1_reg_1133;
wire    ap_CS_fsm_state10;
wire   [4:0] sub_ln26_5_fu_747_p2;
reg   [4:0] sub_ln26_5_reg_1138;
wire   [0:0] icmp_ln21_1_fu_723_p2;
wire   [12:0] sub_ln26_6_fu_784_p2;
reg   [12:0] sub_ln26_6_reg_1143;
wire   [1:0] add_ln24_1_fu_796_p2;
reg   [1:0] add_ln24_1_reg_1151;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln24_1_fu_790_p2;
wire    ap_CS_fsm_state14;
wire   [1:0] add_ln21_2_fu_853_p2;
reg   [1:0] add_ln21_2_reg_1179;
wire    ap_CS_fsm_state15;
wire   [4:0] sub_ln26_7_fu_871_p2;
reg   [4:0] sub_ln26_7_reg_1184;
wire   [0:0] icmp_ln21_2_fu_847_p2;
wire   [12:0] sub_ln26_8_fu_908_p2;
reg   [12:0] sub_ln26_8_reg_1189;
wire   [1:0] add_ln24_2_fu_920_p2;
reg   [1:0] add_ln24_2_reg_1202;
wire    ap_CS_fsm_state16;
wire   [0:0] icmp_ln24_2_fu_914_p2;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
reg   [4:0] r_0_reg_185;
reg   [9:0] phi_mul_reg_196;
reg   [4:0] c_0_reg_208;
reg   [5:0] f_0_reg_220;
wire    ap_CS_fsm_state21;
reg   [31:0] w_sum_1_0_reg_231;
reg   [1:0] wc_0_0_reg_243;
reg   [31:0] w_sum_2_0_reg_254;
reg   [1:0] ch_0_0_reg_266;
reg   [31:0] w_sum_1_1_reg_277;
reg   [1:0] wc_0_1_reg_288;
reg   [31:0] w_sum_2_1_reg_299;
reg   [1:0] ch_0_1_reg_311;
reg   [31:0] w_sum_1_2_reg_322;
reg   [1:0] wc_0_2_reg_333;
reg   [31:0] w_sum_2_2_reg_344;
reg   [1:0] ch_0_2_reg_356;
wire   [63:0] zext_ln35_3_fu_590_p1;
wire   [63:0] zext_ln26_13_fu_704_p1;
wire   [63:0] zext_ln26_14_fu_714_p1;
wire   [63:0] zext_ln26_19_fu_828_p1;
wire   [63:0] zext_ln26_20_fu_838_p1;
wire   [63:0] zext_ln26_23_fu_952_p1;
wire   [63:0] zext_ln26_24_fu_962_p1;
reg   [31:0] grp_fu_367_p0;
reg   [31:0] grp_fu_367_p1;
reg   [31:0] grp_fu_376_p0;
wire   [9:0] tmp_10_fu_419_p3;
wire   [6:0] tmp_11_fu_431_p3;
wire   [10:0] zext_ln26_1_fu_427_p1;
wire   [10:0] zext_ln26_2_fu_439_p1;
wire   [10:0] sub_ln26_fu_443_p2;
wire   [9:0] tmp_12_fu_453_p3;
wire   [6:0] tmp_13_fu_465_p3;
wire   [10:0] zext_ln26_3_fu_461_p1;
wire   [10:0] zext_ln26_4_fu_473_p1;
wire   [10:0] sub_ln26_1_fu_477_p2;
wire   [4:0] add_ln26_2_fu_487_p2;
wire   [9:0] tmp_14_fu_493_p3;
wire   [6:0] tmp_15_fu_505_p3;
wire   [10:0] zext_ln26_5_fu_501_p1;
wire   [10:0] zext_ln26_6_fu_513_p1;
wire   [10:0] sub_ln26_2_fu_517_p2;
wire   [9:0] zext_ln35_fu_539_p1;
wire   [9:0] add_ln35_fu_543_p2;
wire   [14:0] tmp_16_fu_549_p3;
wire   [15:0] zext_ln35_2_fu_581_p1;
wire   [15:0] add_ln35_1_fu_585_p2;
wire   [3:0] tmp_17_fu_611_p3;
wire   [4:0] zext_ln26_7_fu_619_p1;
wire   [4:0] zext_ln21_fu_595_p1;
wire   [4:0] add_ln26_1_fu_629_p2;
wire   [11:0] zext_ln26_8_fu_635_p1;
wire  signed [11:0] add_ln26_5_fu_639_p2;
wire   [10:0] trunc_ln26_fu_648_p1;
wire   [12:0] p_shl6_cast_fu_652_p3;
wire  signed [12:0] sext_ln26_3_fu_644_p1;
wire   [4:0] zext_ln26_12_fu_682_p1;
wire   [4:0] add_ln26_7_fu_686_p2;
wire   [9:0] tmp_23_cast_fu_691_p3;
wire   [9:0] add_ln26_8_fu_699_p2;
wire   [12:0] zext_ln26_11_fu_678_p1;
wire   [12:0] add_ln26_9_fu_709_p2;
wire   [3:0] tmp_18_fu_735_p3;
wire   [4:0] zext_ln26_9_fu_743_p1;
wire   [4:0] zext_ln21_1_fu_719_p1;
wire   [4:0] add_ln26_fu_753_p2;
wire   [11:0] zext_ln26_10_fu_759_p1;
wire  signed [11:0] add_ln26_6_fu_763_p2;
wire   [10:0] trunc_ln26_1_fu_772_p1;
wire   [12:0] p_shl8_cast_fu_776_p3;
wire  signed [12:0] sext_ln26_4_fu_768_p1;
wire   [4:0] zext_ln26_18_fu_806_p1;
wire   [4:0] add_ln26_11_fu_810_p2;
wire   [9:0] tmp_27_cast_fu_815_p3;
wire   [9:0] add_ln26_12_fu_823_p2;
wire   [12:0] zext_ln26_17_fu_802_p1;
wire   [12:0] add_ln26_13_fu_833_p2;
wire   [3:0] tmp_19_fu_859_p3;
wire   [4:0] zext_ln26_15_fu_867_p1;
wire   [4:0] zext_ln21_2_fu_843_p1;
wire   [4:0] add_ln26_3_fu_877_p2;
wire   [11:0] zext_ln26_16_fu_883_p1;
wire  signed [11:0] add_ln26_10_fu_887_p2;
wire   [10:0] trunc_ln26_2_fu_896_p1;
wire   [12:0] p_shl_cast_fu_900_p3;
wire  signed [12:0] sext_ln26_5_fu_892_p1;
wire   [4:0] zext_ln26_22_fu_930_p1;
wire   [4:0] add_ln26_14_fu_934_p2;
wire   [9:0] tmp_29_cast_fu_939_p3;
wire   [9:0] add_ln26_15_fu_947_p2;
wire   [12:0] zext_ln26_21_fu_926_p1;
wire   [12:0] add_ln26_16_fu_957_p2;
wire   [31:0] bitcast_ln34_fu_967_p1;
wire   [7:0] tmp_fu_971_p4;
wire   [22:0] trunc_ln34_fu_981_p1;
wire   [0:0] icmp_ln34_1_fu_991_p2;
wire   [0:0] icmp_ln34_fu_985_p2;
wire   [0:0] or_ln34_fu_997_p2;
wire   [0:0] tmp_9_fu_385_p2;
wire   [0:0] and_ln34_fu_1003_p2;
reg   [20:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 21'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_address0),
    .ce0(conv_1_weights_1_ce0),
    .q0(conv_1_weights_1_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 288 ),
    .AddressWidth( 9 ))
conv_1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_address0),
    .ce0(conv_1_weights_2_ce0),
    .q0(conv_1_weights_2_q0)
);

conv_1_fadd_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fadd_32ns_eOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_367_p0),
    .din1(grp_fu_367_p1),
    .ce(1'b1),
    .dout(grp_fu_367_p2)
);

conv_1_fmul_32ns_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_1_fmul_32ns_fYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_376_p0),
    .din1(conv_input_q0),
    .ce(1'b1),
    .dout(grp_fu_376_p2)
);

conv_1_fcmp_32ns_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_1_fcmp_32ns_g8j_U3(
    .din0(grp_fu_367_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_9_fu_385_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_561_p2 == 1'd1))) begin
        c_0_reg_208 <= c_reg_1049;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_407_p2 == 1'd0))) begin
        c_0_reg_208 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ch_0_0_reg_266 <= add_ln24_reg_1105;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_599_p2 == 1'd0))) begin
        ch_0_0_reg_266 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ch_0_1_reg_311 <= add_ln24_1_reg_1151;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_723_p2 == 1'd0))) begin
        ch_0_1_reg_311 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        ch_0_2_reg_356 <= add_ln24_2_reg_1202;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_847_p2 == 1'd0))) begin
        ch_0_2_reg_356 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        f_0_reg_220 <= f_reg_1062;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_527_p2 == 1'd0))) begin
        f_0_reg_220 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_527_p2 == 1'd1))) begin
        phi_mul_reg_196 <= add_ln8_reg_1018;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_196 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_527_p2 == 1'd1))) begin
        r_0_reg_185 <= r_reg_1026;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_185 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_666_p2 == 1'd1))) begin
        w_sum_1_0_reg_231 <= w_sum_2_0_reg_254;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_561_p2 == 1'd0))) begin
        w_sum_1_0_reg_231 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        w_sum_1_1_reg_277 <= w_sum_2_1_reg_299;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_599_p2 == 1'd1))) begin
        w_sum_1_1_reg_277 <= w_sum_1_0_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_2_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        w_sum_1_2_reg_322 <= w_sum_2_2_reg_344;
    end else if (((icmp_ln21_1_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        w_sum_1_2_reg_322 <= w_sum_1_1_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w_sum_2_0_reg_254 <= grp_fu_367_p2;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_599_p2 == 1'd0))) begin
        w_sum_2_0_reg_254 <= w_sum_1_0_reg_231;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_2_1_reg_299 <= grp_fu_367_p2;
    end else if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_723_p2 == 1'd0))) begin
        w_sum_2_1_reg_299 <= w_sum_1_1_reg_277;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        w_sum_2_2_reg_344 <= grp_fu_367_p2;
    end else if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_847_p2 == 1'd0))) begin
        w_sum_2_2_reg_344 <= w_sum_1_2_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_666_p2 == 1'd1))) begin
        wc_0_0_reg_243 <= add_ln21_reg_1087;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_561_p2 == 1'd0))) begin
        wc_0_0_reg_243 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_1_fu_790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        wc_0_1_reg_288 <= add_ln21_1_reg_1133;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_599_p2 == 1'd1))) begin
        wc_0_1_reg_288 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_2_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        wc_0_2_reg_333 <= add_ln21_2_reg_1179;
    end else if (((icmp_ln21_1_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        wc_0_2_reg_333 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        add_ln21_1_reg_1133 <= add_ln21_1_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln21_2_reg_1179 <= add_ln21_2_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        add_ln21_reg_1087 <= add_ln21_fu_605_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        add_ln24_1_reg_1151 <= add_ln24_1_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln24_2_reg_1202 <= add_ln24_2_fu_920_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        add_ln24_reg_1105 <= add_ln24_fu_672_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_1018 <= add_ln8_fu_401_p2;
        r_reg_1026 <= r_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_1049 <= c_fu_533_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_561_p2 == 1'd0))) begin
        conv_out_addr_reg_1079 <= zext_ln35_3_fu_590_p1;
        zext_ln26_reg_1067[5 : 0] <= zext_ln26_fu_573_p1[5 : 0];
        zext_ln35_1_reg_1072[5 : 0] <= zext_ln35_1_fu_577_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_1062 <= f_fu_567_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_407_p2 == 1'd0))) begin
        sext_ln26_1_reg_1036[11 : 2] <= sext_ln26_1_fu_483_p1[11 : 2];
        sext_ln26_2_reg_1041[11 : 2] <= sext_ln26_2_fu_523_p1[11 : 2];
        sext_ln26_reg_1031[11 : 2] <= sext_ln26_fu_449_p1[11 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_599_p2 == 1'd0))) begin
        sub_ln26_3_reg_1092 <= sub_ln26_3_fu_623_p2;
        sub_ln26_4_reg_1097 <= sub_ln26_4_fu_660_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (icmp_ln21_1_fu_723_p2 == 1'd0))) begin
        sub_ln26_5_reg_1138 <= sub_ln26_5_fu_747_p2;
        sub_ln26_6_reg_1143 <= sub_ln26_6_fu_784_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_847_p2 == 1'd0))) begin
        sub_ln26_7_reg_1184 <= sub_ln26_7_fu_871_p2;
        sub_ln26_8_reg_1189 <= sub_ln26_8_fu_908_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_527_p2 == 1'd0))) begin
        zext_ln14_reg_1054[14 : 5] <= zext_ln14_fu_557_p1[14 : 5];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_407_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_407_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_1_weights_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_1_weights_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        conv_input_address0 = zext_ln26_24_fu_962_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        conv_input_address0 = zext_ln26_20_fu_838_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_input_address0 = zext_ln26_14_fu_714_p1;
    end else begin
        conv_input_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state6))) begin
        conv_input_ce0 = 1'b1;
    end else begin
        conv_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_367_p0 = w_sum_1_2_reg_322;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_367_p0 = w_sum_2_2_reg_344;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_367_p0 = w_sum_2_1_reg_299;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_367_p0 = w_sum_2_0_reg_254;
    end else begin
        grp_fu_367_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_367_p1 = conv_1_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state8))) begin
        grp_fu_367_p1 = grp_fu_376_p2;
    end else begin
        grp_fu_367_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_fu_376_p0 = conv_1_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_376_p0 = conv_1_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_fu_376_p0 = conv_1_weights_0_q0;
    end else begin
        grp_fu_376_p0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_407_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_527_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_561_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln21_fu_599_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln24_fu_666_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln21_1_fu_723_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((icmp_ln24_1_fu_790_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (icmp_ln21_2_fu_847_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((icmp_ln24_2_fu_914_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state16))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln21_1_fu_729_p2 = (wc_0_1_reg_288 + 2'd1);

assign add_ln21_2_fu_853_p2 = (wc_0_2_reg_333 + 2'd1);

assign add_ln21_fu_605_p2 = (wc_0_0_reg_243 + 2'd1);

assign add_ln24_1_fu_796_p2 = (ch_0_1_reg_311 + 2'd1);

assign add_ln24_2_fu_920_p2 = (ch_0_2_reg_356 + 2'd1);

assign add_ln24_fu_672_p2 = (ch_0_0_reg_266 + 2'd1);

assign add_ln26_10_fu_887_p2 = ($signed(zext_ln26_16_fu_883_p1) + $signed(sext_ln26_2_reg_1041));

assign add_ln26_11_fu_810_p2 = (zext_ln26_18_fu_806_p1 + sub_ln26_5_reg_1138);

assign add_ln26_12_fu_823_p2 = (zext_ln35_1_reg_1072 + tmp_27_cast_fu_815_p3);

assign add_ln26_13_fu_833_p2 = (zext_ln26_17_fu_802_p1 + sub_ln26_6_reg_1143);

assign add_ln26_14_fu_934_p2 = (zext_ln26_22_fu_930_p1 + sub_ln26_7_reg_1184);

assign add_ln26_15_fu_947_p2 = (zext_ln35_1_reg_1072 + tmp_29_cast_fu_939_p3);

assign add_ln26_16_fu_957_p2 = (zext_ln26_21_fu_926_p1 + sub_ln26_8_reg_1189);

assign add_ln26_1_fu_629_p2 = (c_0_reg_208 + zext_ln21_fu_595_p1);

assign add_ln26_2_fu_487_p2 = (r_0_reg_185 + 5'd2);

assign add_ln26_3_fu_877_p2 = (c_0_reg_208 + zext_ln21_2_fu_843_p1);

assign add_ln26_5_fu_639_p2 = ($signed(zext_ln26_8_fu_635_p1) + $signed(sext_ln26_reg_1031));

assign add_ln26_6_fu_763_p2 = ($signed(zext_ln26_10_fu_759_p1) + $signed(sext_ln26_1_reg_1036));

assign add_ln26_7_fu_686_p2 = (zext_ln26_12_fu_682_p1 + sub_ln26_3_reg_1092);

assign add_ln26_8_fu_699_p2 = (zext_ln35_1_reg_1072 + tmp_23_cast_fu_691_p3);

assign add_ln26_9_fu_709_p2 = (zext_ln26_11_fu_678_p1 + sub_ln26_4_reg_1097);

assign add_ln26_fu_753_p2 = (c_0_reg_208 + zext_ln21_1_fu_719_p1);

assign add_ln35_1_fu_585_p2 = (zext_ln14_reg_1054 + zext_ln35_2_fu_581_p1);

assign add_ln35_fu_543_p2 = (phi_mul_reg_196 + zext_ln35_fu_539_p1);

assign add_ln8_fu_401_p2 = (phi_mul_reg_196 + 10'd26);

assign and_ln34_fu_1003_p2 = (tmp_9_fu_385_p2 & or_ln34_fu_997_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln34_fu_967_p1 = grp_fu_367_p2;

assign c_fu_533_p2 = (c_0_reg_208 + 5'd1);

assign conv_1_bias_address0 = zext_ln26_reg_1067;

assign conv_1_weights_0_address0 = zext_ln26_13_fu_704_p1;

assign conv_1_weights_1_address0 = zext_ln26_19_fu_828_p1;

assign conv_1_weights_2_address0 = zext_ln26_23_fu_952_p1;

assign conv_out_address0 = conv_out_addr_reg_1079;

assign conv_out_d0 = ((and_ln34_fu_1003_p2[0:0] === 1'b1) ? grp_fu_367_p2 : 32'd0);

assign f_fu_567_p2 = (f_0_reg_220 + 6'd1);

assign icmp_ln11_fu_527_p2 = ((c_0_reg_208 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_561_p2 = ((f_0_reg_220 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_723_p2 = ((wc_0_1_reg_288 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_2_fu_847_p2 = ((wc_0_2_reg_333 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_599_p2 = ((wc_0_0_reg_243 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_1_fu_790_p2 = ((ch_0_1_reg_311 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_2_fu_914_p2 = ((ch_0_2_reg_356 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_666_p2 = ((ch_0_0_reg_266 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_991_p2 = ((trunc_ln34_fu_981_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_985_p2 = ((tmp_fu_971_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_407_p2 = ((r_0_reg_185 == 5'd26) ? 1'b1 : 1'b0);

assign or_ln34_fu_997_p2 = (icmp_ln34_fu_985_p2 | icmp_ln34_1_fu_991_p2);

assign p_shl6_cast_fu_652_p3 = {{trunc_ln26_fu_648_p1}, {2'd0}};

assign p_shl8_cast_fu_776_p3 = {{trunc_ln26_1_fu_772_p1}, {2'd0}};

assign p_shl_cast_fu_900_p3 = {{trunc_ln26_2_fu_896_p1}, {2'd0}};

assign r_fu_413_p2 = (r_0_reg_185 + 5'd1);

assign sext_ln26_1_fu_483_p1 = $signed(sub_ln26_1_fu_477_p2);

assign sext_ln26_2_fu_523_p1 = $signed(sub_ln26_2_fu_517_p2);

assign sext_ln26_3_fu_644_p1 = add_ln26_5_fu_639_p2;

assign sext_ln26_4_fu_768_p1 = add_ln26_6_fu_763_p2;

assign sext_ln26_5_fu_892_p1 = add_ln26_10_fu_887_p2;

assign sext_ln26_fu_449_p1 = $signed(sub_ln26_fu_443_p2);

assign sub_ln26_1_fu_477_p2 = (zext_ln26_3_fu_461_p1 - zext_ln26_4_fu_473_p1);

assign sub_ln26_2_fu_517_p2 = (zext_ln26_5_fu_501_p1 - zext_ln26_6_fu_513_p1);

assign sub_ln26_3_fu_623_p2 = (zext_ln26_7_fu_619_p1 - zext_ln21_fu_595_p1);

assign sub_ln26_4_fu_660_p2 = ($signed(p_shl6_cast_fu_652_p3) - $signed(sext_ln26_3_fu_644_p1));

assign sub_ln26_5_fu_747_p2 = (zext_ln26_9_fu_743_p1 - zext_ln21_1_fu_719_p1);

assign sub_ln26_6_fu_784_p2 = ($signed(p_shl8_cast_fu_776_p3) - $signed(sext_ln26_4_fu_768_p1));

assign sub_ln26_7_fu_871_p2 = (zext_ln26_15_fu_867_p1 - zext_ln21_2_fu_843_p1);

assign sub_ln26_8_fu_908_p2 = ($signed(p_shl_cast_fu_900_p3) - $signed(sext_ln26_5_fu_892_p1));

assign sub_ln26_fu_443_p2 = (zext_ln26_1_fu_427_p1 - zext_ln26_2_fu_439_p1);

assign tmp_10_fu_419_p3 = {{r_0_reg_185}, {5'd0}};

assign tmp_11_fu_431_p3 = {{r_0_reg_185}, {2'd0}};

assign tmp_12_fu_453_p3 = {{r_fu_413_p2}, {5'd0}};

assign tmp_13_fu_465_p3 = {{r_fu_413_p2}, {2'd0}};

assign tmp_14_fu_493_p3 = {{add_ln26_2_fu_487_p2}, {5'd0}};

assign tmp_15_fu_505_p3 = {{add_ln26_2_fu_487_p2}, {2'd0}};

assign tmp_16_fu_549_p3 = {{add_ln35_fu_543_p2}, {5'd0}};

assign tmp_17_fu_611_p3 = {{wc_0_0_reg_243}, {2'd0}};

assign tmp_18_fu_735_p3 = {{wc_0_1_reg_288}, {2'd0}};

assign tmp_19_fu_859_p3 = {{wc_0_2_reg_333}, {2'd0}};

assign tmp_23_cast_fu_691_p3 = {{add_ln26_7_fu_686_p2}, {5'd0}};

assign tmp_27_cast_fu_815_p3 = {{add_ln26_11_fu_810_p2}, {5'd0}};

assign tmp_29_cast_fu_939_p3 = {{add_ln26_14_fu_934_p2}, {5'd0}};

assign tmp_fu_971_p4 = {{bitcast_ln34_fu_967_p1[30:23]}};

assign trunc_ln26_1_fu_772_p1 = add_ln26_6_fu_763_p2[10:0];

assign trunc_ln26_2_fu_896_p1 = add_ln26_10_fu_887_p2[10:0];

assign trunc_ln26_fu_648_p1 = add_ln26_5_fu_639_p2[10:0];

assign trunc_ln34_fu_981_p1 = bitcast_ln34_fu_967_p1[22:0];

assign zext_ln14_fu_557_p1 = tmp_16_fu_549_p3;

assign zext_ln21_1_fu_719_p1 = wc_0_1_reg_288;

assign zext_ln21_2_fu_843_p1 = wc_0_2_reg_333;

assign zext_ln21_fu_595_p1 = wc_0_0_reg_243;

assign zext_ln26_10_fu_759_p1 = add_ln26_fu_753_p2;

assign zext_ln26_11_fu_678_p1 = ch_0_0_reg_266;

assign zext_ln26_12_fu_682_p1 = ch_0_0_reg_266;

assign zext_ln26_13_fu_704_p1 = add_ln26_8_fu_699_p2;

assign zext_ln26_14_fu_714_p1 = add_ln26_9_fu_709_p2;

assign zext_ln26_15_fu_867_p1 = tmp_19_fu_859_p3;

assign zext_ln26_16_fu_883_p1 = add_ln26_3_fu_877_p2;

assign zext_ln26_17_fu_802_p1 = ch_0_1_reg_311;

assign zext_ln26_18_fu_806_p1 = ch_0_1_reg_311;

assign zext_ln26_19_fu_828_p1 = add_ln26_12_fu_823_p2;

assign zext_ln26_1_fu_427_p1 = tmp_10_fu_419_p3;

assign zext_ln26_20_fu_838_p1 = add_ln26_13_fu_833_p2;

assign zext_ln26_21_fu_926_p1 = ch_0_2_reg_356;

assign zext_ln26_22_fu_930_p1 = ch_0_2_reg_356;

assign zext_ln26_23_fu_952_p1 = add_ln26_15_fu_947_p2;

assign zext_ln26_24_fu_962_p1 = add_ln26_16_fu_957_p2;

assign zext_ln26_2_fu_439_p1 = tmp_11_fu_431_p3;

assign zext_ln26_3_fu_461_p1 = tmp_12_fu_453_p3;

assign zext_ln26_4_fu_473_p1 = tmp_13_fu_465_p3;

assign zext_ln26_5_fu_501_p1 = tmp_14_fu_493_p3;

assign zext_ln26_6_fu_513_p1 = tmp_15_fu_505_p3;

assign zext_ln26_7_fu_619_p1 = tmp_17_fu_611_p3;

assign zext_ln26_8_fu_635_p1 = add_ln26_1_fu_629_p2;

assign zext_ln26_9_fu_743_p1 = tmp_18_fu_735_p3;

assign zext_ln26_fu_573_p1 = f_0_reg_220;

assign zext_ln35_1_fu_577_p1 = f_0_reg_220;

assign zext_ln35_2_fu_581_p1 = f_0_reg_220;

assign zext_ln35_3_fu_590_p1 = add_ln35_1_fu_585_p2;

assign zext_ln35_fu_539_p1 = c_0_reg_208;

always @ (posedge ap_clk) begin
    sext_ln26_reg_1031[1:0] <= 2'b00;
    sext_ln26_1_reg_1036[1:0] <= 2'b00;
    sext_ln26_2_reg_1041[1:0] <= 2'b00;
    zext_ln14_reg_1054[4:0] <= 5'b00000;
    zext_ln14_reg_1054[15] <= 1'b0;
    zext_ln26_reg_1067[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln35_1_reg_1072[9:6] <= 4'b0000;
end

endmodule //conv_1
