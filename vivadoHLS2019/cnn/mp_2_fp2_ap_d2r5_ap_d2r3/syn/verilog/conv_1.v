// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_1_out_address0,
        conv_1_out_ce0,
        conv_1_out_we0,
        conv_1_out_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] conv_1_out_address0;
output   conv_1_out_ce0;
output   conv_1_out_we0;
output  [31:0] conv_1_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_1_out_ce0;
reg conv_1_out_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_1_weights_address0;
reg    conv_1_weights_ce0;
wire   [31:0] conv_1_weights_q0;
wire   [2:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [9:0] add_ln8_fu_247_p2;
reg   [9:0] add_ln8_reg_551;
wire    ap_CS_fsm_state2;
wire   [4:0] r_fu_259_p2;
reg   [4:0] r_reg_559;
wire   [4:0] c_fu_271_p2;
reg   [4:0] c_reg_567;
wire    ap_CS_fsm_state3;
wire   [12:0] sub_ln30_fu_307_p2;
reg   [12:0] sub_ln30_reg_572;
wire   [0:0] icmp_ln11_fu_265_p2;
wire   [2:0] f_fu_319_p2;
reg   [2:0] f_reg_580;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln23_fu_325_p1;
reg   [63:0] zext_ln23_reg_585;
wire   [0:0] icmp_ln14_fu_313_p2;
wire   [6:0] zext_ln30_2_fu_329_p1;
reg   [6:0] zext_ln30_2_reg_590;
reg   [11:0] conv_1_out_addr_reg_595;
wire   [1:0] wr_fu_357_p2;
reg   [1:0] wr_reg_603;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln23_fu_381_p1;
reg  signed [5:0] sext_ln23_reg_608;
wire   [0:0] icmp_ln18_fu_351_p2;
wire   [10:0] sub_ln23_1_fu_415_p2;
reg   [10:0] sub_ln23_1_reg_613;
wire   [1:0] wc_fu_431_p2;
reg   [1:0] wc_reg_626;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln21_fu_425_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_235_p2;
reg   [31:0] tmp_s_reg_651;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_228_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [31:0] w_sum_reg_666;
wire    ap_CS_fsm_state16;
reg   [4:0] r_0_reg_135;
reg   [9:0] phi_mul_reg_147;
reg   [4:0] c_0_reg_159;
wire   [0:0] icmp_ln8_fu_253_p2;
reg   [2:0] f_0_reg_171;
wire    ap_CS_fsm_state17;
reg   [31:0] w_sum_0_reg_182;
reg   [1:0] wr_0_reg_194;
reg   [31:0] w_sum_1_reg_205;
reg   [1:0] wc_0_reg_217;
wire   [63:0] zext_ln30_4_fu_342_p1;
wire   [63:0] zext_ln23_5_fu_477_p1;
wire  signed [63:0] sext_ln23_1_fu_497_p1;
reg   [31:0] grp_fu_228_p0;
reg   [31:0] grp_fu_228_p1;
wire    ap_CS_fsm_state9;
wire   [9:0] zext_ln30_fu_277_p1;
wire   [9:0] add_ln30_fu_281_p2;
wire   [10:0] tmp_67_fu_295_p3;
wire   [12:0] p_shl_cast_fu_287_p3;
wire   [12:0] zext_ln30_1_fu_303_p1;
wire   [12:0] zext_ln30_3_fu_333_p1;
wire   [12:0] add_ln30_1_fu_337_p2;
wire   [3:0] tmp_69_fu_363_p3;
wire   [4:0] zext_ln23_1_fu_371_p1;
wire   [4:0] zext_ln18_fu_347_p1;
wire   [4:0] sub_ln23_fu_375_p2;
wire   [4:0] add_ln23_fu_385_p2;
wire   [9:0] tmp_70_fu_391_p3;
wire   [6:0] tmp_71_fu_403_p3;
wire   [10:0] zext_ln23_2_fu_399_p1;
wire   [10:0] zext_ln23_3_fu_411_p1;
wire   [5:0] zext_ln23_4_fu_437_p1;
wire   [5:0] add_ln23_2_fu_441_p2;
wire   [3:0] trunc_ln23_fu_446_p1;
wire   [6:0] p_shl5_cast_fu_450_p3;
wire   [6:0] p_shl6_cast_fu_458_p3;
wire   [6:0] sub_ln23_2_fu_466_p2;
wire   [6:0] add_ln23_3_fu_472_p2;
wire   [4:0] zext_ln21_fu_421_p1;
wire   [4:0] add_ln23_1_fu_482_p2;
wire   [10:0] zext_ln23_6_fu_488_p1;
wire   [10:0] add_ln23_4_fu_492_p2;
wire   [31:0] bitcast_ln29_fu_502_p1;
wire   [7:0] tmp_fu_505_p4;
wire   [22:0] trunc_ln29_fu_515_p1;
wire   [0:0] icmp_ln29_73_fu_525_p2;
wire   [0:0] icmp_ln29_fu_519_p2;
wire   [0:0] or_ln29_fu_531_p2;
wire   [0:0] grp_fu_241_p2;
wire   [0:0] and_ln29_fu_537_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_address0),
    .ce0(conv_1_weights_ce0),
    .q0(conv_1_weights_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_228_p0),
    .din1(grp_fu_228_p1),
    .ce(1'b1),
    .dout(grp_fu_228_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_235_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_228_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_241_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_159 <= c_reg_567;
    end else if (((icmp_ln8_fu_253_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_159 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        f_0_reg_171 <= f_reg_580;
    end else if (((icmp_ln11_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_171 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_147 <= add_ln8_reg_551;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_147 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_135 <= r_reg_559;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_135 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_425_p2 == 1'd1))) begin
        w_sum_0_reg_182 <= w_sum_1_reg_205;
    end else if (((icmp_ln14_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_182 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_1_reg_205 <= grp_fu_228_p2;
    end else if (((icmp_ln18_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_205 <= w_sum_0_reg_182;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        wc_0_reg_217 <= wc_reg_626;
    end else if (((icmp_ln18_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_217 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_425_p2 == 1'd1))) begin
        wr_0_reg_194 <= wr_reg_603;
    end else if (((icmp_ln14_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_194 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_551 <= add_ln8_fu_247_p2;
        r_reg_559 <= r_fu_259_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_567 <= c_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_313_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_1_out_addr_reg_595 <= zext_ln30_4_fu_342_p1;
        zext_ln23_reg_585[2 : 0] <= zext_ln23_fu_325_p1[2 : 0];
        zext_ln30_2_reg_590[2 : 0] <= zext_ln30_2_fu_329_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_580 <= f_fu_319_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln23_reg_608 <= sext_ln23_fu_381_p1;
        sub_ln23_1_reg_613[10 : 2] <= sub_ln23_1_fu_415_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln30_reg_572[12 : 1] <= sub_ln30_fu_307_p2[12 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_s_reg_651 <= grp_fu_235_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        w_sum_reg_666 <= grp_fu_228_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_626 <= wc_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_603 <= wr_fu_357_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_253_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_253_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_1_out_ce0 = 1'b1;
    end else begin
        conv_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_1_out_we0 = 1'b1;
    end else begin
        conv_1_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_weights_ce0 = 1'b1;
    end else begin
        conv_1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_228_p0 = w_sum_0_reg_182;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_228_p0 = w_sum_1_reg_205;
    end else begin
        grp_fu_228_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_228_p1 = conv_1_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_228_p1 = tmp_s_reg_651;
    end else begin
        grp_fu_228_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln8_fu_253_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln11_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln14_fu_313_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_351_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_425_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_482_p2 = (c_0_reg_159 + zext_ln21_fu_421_p1);

assign add_ln23_2_fu_441_p2 = ($signed(zext_ln23_4_fu_437_p1) + $signed(sext_ln23_reg_608));

assign add_ln23_3_fu_472_p2 = (zext_ln30_2_reg_590 + sub_ln23_2_fu_466_p2);

assign add_ln23_4_fu_492_p2 = (zext_ln23_6_fu_488_p1 + sub_ln23_1_reg_613);

assign add_ln23_fu_385_p2 = (zext_ln18_fu_347_p1 + r_0_reg_135);

assign add_ln30_1_fu_337_p2 = (sub_ln30_reg_572 + zext_ln30_3_fu_333_p1);

assign add_ln30_fu_281_p2 = (zext_ln30_fu_277_p1 + phi_mul_reg_147);

assign add_ln8_fu_247_p2 = (phi_mul_reg_147 + 10'd26);

assign and_ln29_fu_537_p2 = (or_ln29_fu_531_p2 & grp_fu_241_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln29_fu_502_p1 = w_sum_reg_666;

assign c_fu_271_p2 = (c_0_reg_159 + 5'd1);

assign conv_1_bias_address0 = zext_ln23_reg_585;

assign conv_1_out_address0 = conv_1_out_addr_reg_595;

assign conv_1_out_d0 = ((and_ln29_fu_537_p2[0:0] === 1'b1) ? w_sum_reg_666 : 32'd0);

assign conv_1_weights_address0 = zext_ln23_5_fu_477_p1;

assign f_fu_319_p2 = (f_0_reg_171 + 3'd1);

assign icmp_ln11_fu_265_p2 = ((c_0_reg_159 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_313_p2 = ((f_0_reg_171 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_351_p2 = ((wr_0_reg_194 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_425_p2 = ((wc_0_reg_217 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln29_73_fu_525_p2 = ((trunc_ln29_fu_515_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_519_p2 = ((tmp_fu_505_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_253_p2 = ((r_0_reg_135 == 5'd26) ? 1'b1 : 1'b0);

assign input_r_address0 = sext_ln23_1_fu_497_p1;

assign or_ln29_fu_531_p2 = (icmp_ln29_fu_519_p2 | icmp_ln29_73_fu_525_p2);

assign p_shl5_cast_fu_450_p3 = {{trunc_ln23_fu_446_p1}, {3'd0}};

assign p_shl6_cast_fu_458_p3 = {{add_ln23_2_fu_441_p2}, {1'd0}};

assign p_shl_cast_fu_287_p3 = {{add_ln30_fu_281_p2}, {3'd0}};

assign r_fu_259_p2 = (r_0_reg_135 + 5'd1);

assign sext_ln23_1_fu_497_p1 = $signed(add_ln23_4_fu_492_p2);

assign sext_ln23_fu_381_p1 = $signed(sub_ln23_fu_375_p2);

assign sub_ln23_1_fu_415_p2 = (zext_ln23_2_fu_399_p1 - zext_ln23_3_fu_411_p1);

assign sub_ln23_2_fu_466_p2 = (p_shl5_cast_fu_450_p3 - p_shl6_cast_fu_458_p3);

assign sub_ln23_fu_375_p2 = (zext_ln23_1_fu_371_p1 - zext_ln18_fu_347_p1);

assign sub_ln30_fu_307_p2 = (p_shl_cast_fu_287_p3 - zext_ln30_1_fu_303_p1);

assign tmp_67_fu_295_p3 = {{add_ln30_fu_281_p2}, {1'd0}};

assign tmp_69_fu_363_p3 = {{wr_0_reg_194}, {2'd0}};

assign tmp_70_fu_391_p3 = {{add_ln23_fu_385_p2}, {5'd0}};

assign tmp_71_fu_403_p3 = {{add_ln23_fu_385_p2}, {2'd0}};

assign tmp_fu_505_p4 = {{bitcast_ln29_fu_502_p1[30:23]}};

assign trunc_ln23_fu_446_p1 = add_ln23_2_fu_441_p2[3:0];

assign trunc_ln29_fu_515_p1 = bitcast_ln29_fu_502_p1[22:0];

assign wc_fu_431_p2 = (wc_0_reg_217 + 2'd1);

assign wr_fu_357_p2 = (wr_0_reg_194 + 2'd1);

assign zext_ln18_fu_347_p1 = wr_0_reg_194;

assign zext_ln21_fu_421_p1 = wc_0_reg_217;

assign zext_ln23_1_fu_371_p1 = tmp_69_fu_363_p3;

assign zext_ln23_2_fu_399_p1 = tmp_70_fu_391_p3;

assign zext_ln23_3_fu_411_p1 = tmp_71_fu_403_p3;

assign zext_ln23_4_fu_437_p1 = wc_0_reg_217;

assign zext_ln23_5_fu_477_p1 = add_ln23_3_fu_472_p2;

assign zext_ln23_6_fu_488_p1 = add_ln23_1_fu_482_p2;

assign zext_ln23_fu_325_p1 = f_0_reg_171;

assign zext_ln30_1_fu_303_p1 = tmp_67_fu_295_p3;

assign zext_ln30_2_fu_329_p1 = f_0_reg_171;

assign zext_ln30_3_fu_333_p1 = f_0_reg_171;

assign zext_ln30_4_fu_342_p1 = add_ln30_1_fu_337_p2;

assign zext_ln30_fu_277_p1 = c_0_reg_159;

always @ (posedge ap_clk) begin
    sub_ln30_reg_572[0] <= 1'b0;
    zext_ln23_reg_585[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln30_2_reg_590[6:3] <= 4'b0000;
    sub_ln23_1_reg_613[1:0] <= 2'b00;
end

endmodule //conv_1
