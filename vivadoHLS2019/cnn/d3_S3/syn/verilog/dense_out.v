// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        prediction_Addr_A,
        prediction_EN_A,
        prediction_WEN_A,
        prediction_Din_A,
        prediction_Dout_A,
        dense_2_out_address0,
        dense_2_out_ce0,
        dense_2_out_q0,
        dense_2_out_address1,
        dense_2_out_ce1,
        dense_2_out_q1
);

parameter    ap_ST_fsm_state1 = 48'd1;
parameter    ap_ST_fsm_state2 = 48'd2;
parameter    ap_ST_fsm_pp0_stage0 = 48'd4;
parameter    ap_ST_fsm_pp0_stage1 = 48'd8;
parameter    ap_ST_fsm_pp0_stage2 = 48'd16;
parameter    ap_ST_fsm_pp0_stage3 = 48'd32;
parameter    ap_ST_fsm_pp0_stage4 = 48'd64;
parameter    ap_ST_fsm_pp0_stage5 = 48'd128;
parameter    ap_ST_fsm_pp0_stage6 = 48'd256;
parameter    ap_ST_fsm_pp0_stage7 = 48'd512;
parameter    ap_ST_fsm_pp0_stage8 = 48'd1024;
parameter    ap_ST_fsm_pp0_stage9 = 48'd2048;
parameter    ap_ST_fsm_pp0_stage10 = 48'd4096;
parameter    ap_ST_fsm_pp0_stage11 = 48'd8192;
parameter    ap_ST_fsm_pp0_stage12 = 48'd16384;
parameter    ap_ST_fsm_pp0_stage13 = 48'd32768;
parameter    ap_ST_fsm_pp0_stage14 = 48'd65536;
parameter    ap_ST_fsm_pp0_stage15 = 48'd131072;
parameter    ap_ST_fsm_pp0_stage16 = 48'd262144;
parameter    ap_ST_fsm_pp0_stage17 = 48'd524288;
parameter    ap_ST_fsm_pp0_stage18 = 48'd1048576;
parameter    ap_ST_fsm_pp0_stage19 = 48'd2097152;
parameter    ap_ST_fsm_pp0_stage20 = 48'd4194304;
parameter    ap_ST_fsm_pp0_stage21 = 48'd8388608;
parameter    ap_ST_fsm_pp0_stage22 = 48'd16777216;
parameter    ap_ST_fsm_pp0_stage23 = 48'd33554432;
parameter    ap_ST_fsm_pp0_stage24 = 48'd67108864;
parameter    ap_ST_fsm_pp0_stage25 = 48'd134217728;
parameter    ap_ST_fsm_pp0_stage26 = 48'd268435456;
parameter    ap_ST_fsm_pp0_stage27 = 48'd536870912;
parameter    ap_ST_fsm_pp0_stage28 = 48'd1073741824;
parameter    ap_ST_fsm_pp0_stage29 = 48'd2147483648;
parameter    ap_ST_fsm_pp0_stage30 = 48'd4294967296;
parameter    ap_ST_fsm_pp0_stage31 = 48'd8589934592;
parameter    ap_ST_fsm_pp0_stage32 = 48'd17179869184;
parameter    ap_ST_fsm_pp0_stage33 = 48'd34359738368;
parameter    ap_ST_fsm_pp0_stage34 = 48'd68719476736;
parameter    ap_ST_fsm_pp0_stage35 = 48'd137438953472;
parameter    ap_ST_fsm_pp0_stage36 = 48'd274877906944;
parameter    ap_ST_fsm_pp0_stage37 = 48'd549755813888;
parameter    ap_ST_fsm_pp0_stage38 = 48'd1099511627776;
parameter    ap_ST_fsm_pp0_stage39 = 48'd2199023255552;
parameter    ap_ST_fsm_state46 = 48'd4398046511104;
parameter    ap_ST_fsm_state47 = 48'd8796093022208;
parameter    ap_ST_fsm_state48 = 48'd17592186044416;
parameter    ap_ST_fsm_state49 = 48'd35184372088832;
parameter    ap_ST_fsm_state50 = 48'd70368744177664;
parameter    ap_ST_fsm_state51 = 48'd140737488355328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [31:0] prediction_Addr_A;
output   prediction_EN_A;
output  [3:0] prediction_WEN_A;
output  [31:0] prediction_Din_A;
input  [31:0] prediction_Dout_A;
output  [4:0] dense_2_out_address0;
output   dense_2_out_ce0;
input  [31:0] dense_2_out_q0;
output  [4:0] dense_2_out_address1;
output   dense_2_out_ce1;
input  [31:0] dense_2_out_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] dense_2_out_address0;
reg dense_2_out_ce0;
reg[4:0] dense_2_out_address1;
reg dense_2_out_ce1;

(* fsm_encoding = "none" *) reg   [47:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] dense_out_weights_address0;
reg    dense_out_weights_ce0;
wire   [31:0] dense_out_weights_q0;
wire   [3:0] dense_out_bias_address0;
reg    dense_out_bias_ce0;
wire   [31:0] dense_out_bias_q0;
reg   [31:0] w_sum_0_0_reg_304;
reg   [4:0] f_0_0_reg_316;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state44_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln36_reg_938;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state45_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state8_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_11001;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state9_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state10_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_11001;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state11_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_11001;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state12_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state13_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
reg   [31:0] reg_353;
reg   [31:0] reg_358;
wire   [31:0] grp_fu_342_p2;
reg   [31:0] reg_364;
reg   [31:0] reg_369;
reg   [31:0] reg_375;
wire   [31:0] grp_fu_335_p2;
reg   [31:0] reg_380;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state17_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_11001;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state21_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_11001;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state25_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_11001;
wire    ap_CS_fsm_pp0_stage26;
wire    ap_block_state29_pp0_stage26_iter0;
wire    ap_block_pp0_stage26_11001;
wire    ap_CS_fsm_pp0_stage30;
wire    ap_block_state33_pp0_stage30_iter0;
wire    ap_block_pp0_stage30_11001;
wire    ap_CS_fsm_pp0_stage34;
wire    ap_block_state37_pp0_stage34_iter0;
wire    ap_block_pp0_stage34_11001;
wire    ap_CS_fsm_pp0_stage38;
wire    ap_block_state41_pp0_stage38_iter0;
wire    ap_block_pp0_stage38_11001;
wire   [0:0] icmp_ln31_fu_385_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] d_fu_391_p2;
reg   [3:0] d_reg_909;
wire   [63:0] zext_ln38_fu_397_p1;
reg   [63:0] zext_ln38_reg_914;
wire   [9:0] zext_ln36_fu_401_p1;
reg   [9:0] zext_ln36_reg_920;
wire   [8:0] zext_ln36_6_fu_405_p1;
reg   [8:0] zext_ln36_6_reg_931;
wire   [0:0] icmp_ln36_fu_409_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state43_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln36_reg_938_pp0_iter1_reg;
wire   [4:0] or_ln36_fu_460_p2;
reg   [4:0] or_ln36_reg_952;
wire   [5:0] f_0_0_cast1_fu_471_p1;
reg   [5:0] f_0_0_cast1_reg_963;
wire   [8:0] add_ln38_5_fu_554_p2;
reg   [8:0] add_ln38_5_reg_978;
wire   [5:0] add_ln36_1_fu_559_p2;
reg   [5:0] add_ln36_1_reg_988;
wire   [5:0] add_ln36_2_fu_574_p2;
reg   [5:0] add_ln36_2_reg_1004;
wire   [5:0] add_ln36_3_fu_584_p2;
reg   [5:0] add_ln36_3_reg_1015;
reg   [31:0] dense_2_out_load_5_reg_1031;
wire   [5:0] add_ln36_4_fu_632_p2;
reg   [5:0] add_ln36_4_reg_1036;
wire   [5:0] add_ln36_5_fu_642_p2;
reg   [5:0] add_ln36_5_reg_1047;
reg   [31:0] tmp_4_2_reg_1058;
reg   [31:0] dense_2_out_load_7_reg_1068;
wire   [5:0] add_ln36_6_fu_690_p2;
reg   [5:0] add_ln36_6_reg_1073;
wire   [5:0] add_ln36_7_fu_700_p2;
reg   [5:0] add_ln36_7_reg_1084;
reg   [31:0] tmp_4_3_reg_1095;
reg   [31:0] dense_2_out_load_9_reg_1105;
reg   [31:0] tmp_4_5_reg_1115;
reg   [31:0] tmp_4_6_reg_1125;
wire   [9:0] add_ln38_19_fu_890_p2;
reg   [9:0] add_ln38_19_reg_1135;
reg   [31:0] tmp_4_7_reg_1140;
reg   [31:0] tmp_4_9_reg_1150;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state14_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [4:0] add_ln36_8_fu_899_p2;
reg   [4:0] add_ln36_8_reg_1155;
wire    ap_CS_fsm_pp0_stage39;
wire    ap_block_state42_pp0_stage39_iter0;
wire    ap_block_pp0_stage39_11001;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage39_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
wire   [31:0] dense_array_q0;
wire    grp_soft_max_fu_328_ap_start;
wire    grp_soft_max_fu_328_ap_done;
wire    grp_soft_max_fu_328_ap_idle;
wire    grp_soft_max_fu_328_ap_ready;
wire   [3:0] grp_soft_max_fu_328_dense_array_address0;
wire    grp_soft_max_fu_328_dense_array_ce0;
wire   [31:0] grp_soft_max_fu_328_prediction_Addr_A;
wire    grp_soft_max_fu_328_prediction_EN_A;
wire   [3:0] grp_soft_max_fu_328_prediction_WEN_A;
wire   [31:0] grp_soft_max_fu_328_prediction_Din_A;
reg   [3:0] d_0_reg_293;
wire    ap_CS_fsm_state50;
wire   [31:0] ap_phi_mux_w_sum_0_0_phi_fu_308_p4;
reg   [4:0] ap_phi_mux_f_0_0_phi_fu_320_p4;
wire    ap_block_pp0_stage0;
reg    grp_soft_max_fu_328_ap_start_reg;
wire    ap_CS_fsm_state51;
wire   [63:0] zext_ln38_13_fu_455_p1;
wire   [63:0] zext_ln38_1_fu_415_p1;
wire   [63:0] zext_ln38_2_fu_466_p1;
wire   [63:0] zext_ln38_16_fu_508_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln38_3_fu_519_p1;
wire   [63:0] zext_ln38_4_fu_565_p1;
wire   [63:0] zext_ln38_19_fu_570_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln38_5_fu_579_p1;
wire   [63:0] zext_ln38_6_fu_589_p1;
wire   [63:0] zext_ln38_22_fu_627_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln38_7_fu_637_p1;
wire   [63:0] zext_ln38_8_fu_647_p1;
wire   [63:0] zext_ln38_25_fu_685_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln38_9_fu_695_p1;
wire   [63:0] zext_ln38_10_fu_705_p1;
wire   [63:0] zext_ln38_28_fu_743_p1;
wire    ap_block_pp0_stage5;
wire   [63:0] zext_ln38_31_fu_781_p1;
wire    ap_block_pp0_stage6;
wire   [63:0] zext_ln38_34_fu_819_p1;
wire    ap_block_pp0_stage7;
wire   [63:0] zext_ln38_37_fu_857_p1;
wire    ap_block_pp0_stage8;
wire   [63:0] zext_ln38_40_fu_895_p1;
wire    ap_block_pp0_stage9;
reg   [31:0] grp_fu_335_p0;
reg   [31:0] grp_fu_335_p1;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_pp0_stage19;
wire    ap_CS_fsm_pp0_stage23;
wire    ap_block_pp0_stage23;
wire    ap_CS_fsm_pp0_stage27;
wire    ap_block_pp0_stage27;
wire    ap_CS_fsm_pp0_stage31;
wire    ap_block_pp0_stage31;
wire    ap_CS_fsm_pp0_stage35;
wire    ap_block_pp0_stage35;
wire    ap_block_pp0_stage39;
reg   [31:0] grp_fu_342_p1;
wire    ap_block_pp0_stage10;
wire   [7:0] tmp_2_fu_420_p3;
wire   [5:0] tmp_5_fu_432_p3;
wire   [8:0] zext_ln38_12_fu_440_p1;
wire   [8:0] zext_ln38_11_fu_428_p1;
wire   [8:0] add_ln38_fu_444_p2;
wire   [8:0] add_ln38_1_fu_450_p2;
wire   [7:0] tmp_6_fu_475_p3;
wire   [5:0] tmp_7_fu_486_p3;
wire   [8:0] zext_ln38_15_fu_493_p1;
wire   [8:0] zext_ln38_14_fu_482_p1;
wire   [8:0] add_ln38_2_fu_497_p2;
wire   [8:0] add_ln38_3_fu_503_p2;
wire   [4:0] add_ln36_fu_513_p2;
wire   [7:0] tmp_8_fu_524_p3;
wire   [5:0] tmp_9_fu_536_p3;
wire   [8:0] zext_ln38_18_fu_544_p1;
wire   [8:0] zext_ln38_17_fu_532_p1;
wire   [8:0] add_ln38_4_fu_548_p2;
wire   [8:0] tmp_10_fu_594_p3;
wire   [6:0] tmp_11_fu_605_p3;
wire   [9:0] zext_ln38_21_fu_612_p1;
wire   [9:0] zext_ln38_20_fu_601_p1;
wire   [9:0] add_ln38_6_fu_616_p2;
wire   [9:0] add_ln38_7_fu_622_p2;
wire   [8:0] tmp_12_fu_652_p3;
wire   [6:0] tmp_13_fu_663_p3;
wire   [9:0] zext_ln38_24_fu_670_p1;
wire   [9:0] zext_ln38_23_fu_659_p1;
wire   [9:0] add_ln38_8_fu_674_p2;
wire   [9:0] add_ln38_9_fu_680_p2;
wire   [8:0] tmp_14_fu_710_p3;
wire   [6:0] tmp_15_fu_721_p3;
wire   [9:0] zext_ln38_27_fu_728_p1;
wire   [9:0] zext_ln38_26_fu_717_p1;
wire   [9:0] add_ln38_10_fu_732_p2;
wire   [9:0] add_ln38_11_fu_738_p2;
wire   [8:0] tmp_16_fu_748_p3;
wire   [6:0] tmp_17_fu_759_p3;
wire   [9:0] zext_ln38_30_fu_766_p1;
wire   [9:0] zext_ln38_29_fu_755_p1;
wire   [9:0] add_ln38_12_fu_770_p2;
wire   [9:0] add_ln38_13_fu_776_p2;
wire   [8:0] tmp_18_fu_786_p3;
wire   [6:0] tmp_19_fu_797_p3;
wire   [9:0] zext_ln38_33_fu_804_p1;
wire   [9:0] zext_ln38_32_fu_793_p1;
wire   [9:0] add_ln38_14_fu_808_p2;
wire   [9:0] add_ln38_15_fu_814_p2;
wire   [8:0] tmp_20_fu_824_p3;
wire   [6:0] tmp_21_fu_835_p3;
wire   [9:0] zext_ln38_36_fu_842_p1;
wire   [9:0] zext_ln38_35_fu_831_p1;
wire   [9:0] add_ln38_16_fu_846_p2;
wire   [9:0] add_ln38_17_fu_852_p2;
wire   [8:0] tmp_22_fu_862_p3;
wire   [6:0] tmp_23_fu_873_p3;
wire   [9:0] zext_ln38_39_fu_880_p1;
wire   [9:0] zext_ln38_38_fu_869_p1;
wire   [9:0] add_ln38_18_fu_884_p2;
reg   [47:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_pp0_stage8_subdone;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state15_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_subdone;
wire    ap_block_state16_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_subdone;
wire    ap_block_pp0_stage14_subdone;
wire    ap_block_state18_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_subdone;
wire    ap_block_state19_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_subdone;
wire    ap_block_state20_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_subdone;
wire    ap_block_pp0_stage18_subdone;
wire    ap_block_state22_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_subdone;
wire    ap_block_state23_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_subdone;
wire    ap_block_state24_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_subdone;
wire    ap_block_pp0_stage22_subdone;
wire    ap_block_state26_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_subdone;
wire    ap_block_state27_pp0_stage24_iter0;
wire    ap_block_pp0_stage24_subdone;
wire    ap_block_state28_pp0_stage25_iter0;
wire    ap_block_pp0_stage25_subdone;
wire    ap_block_pp0_stage26_subdone;
wire    ap_block_state30_pp0_stage27_iter0;
wire    ap_block_pp0_stage27_subdone;
wire    ap_block_state31_pp0_stage28_iter0;
wire    ap_block_pp0_stage28_subdone;
wire    ap_block_state32_pp0_stage29_iter0;
wire    ap_block_pp0_stage29_subdone;
wire    ap_block_pp0_stage30_subdone;
wire    ap_block_state34_pp0_stage31_iter0;
wire    ap_block_pp0_stage31_subdone;
wire    ap_block_state35_pp0_stage32_iter0;
wire    ap_block_pp0_stage32_subdone;
wire    ap_block_state36_pp0_stage33_iter0;
wire    ap_block_pp0_stage33_subdone;
wire    ap_block_pp0_stage34_subdone;
wire    ap_block_state38_pp0_stage35_iter0;
wire    ap_block_pp0_stage35_subdone;
wire    ap_block_state39_pp0_stage36_iter0;
wire    ap_block_pp0_stage36_subdone;
wire    ap_block_state40_pp0_stage37_iter0;
wire    ap_block_pp0_stage37_subdone;
wire    ap_block_pp0_stage38_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 48'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_soft_max_fu_328_ap_start_reg = 1'b0;
end

dense_out_dense_omb6 #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dense_out_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_address0),
    .ce0(dense_out_weights_ce0),
    .q0(dense_out_weights_q0)
);

dense_out_dense_oncg #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_bias_address0),
    .ce0(dense_out_bias_ce0),
    .q0(dense_out_bias_q0)
);

dense_out_dense_aocq #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(grp_fu_335_p2),
    .q0(dense_array_q0)
);

soft_max grp_soft_max_fu_328(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_soft_max_fu_328_ap_start),
    .ap_done(grp_soft_max_fu_328_ap_done),
    .ap_idle(grp_soft_max_fu_328_ap_idle),
    .ap_ready(grp_soft_max_fu_328_ap_ready),
    .dense_array_address0(grp_soft_max_fu_328_dense_array_address0),
    .dense_array_ce0(grp_soft_max_fu_328_dense_array_ce0),
    .dense_array_q0(dense_array_q0),
    .prediction_Addr_A(grp_soft_max_fu_328_prediction_Addr_A),
    .prediction_EN_A(grp_soft_max_fu_328_prediction_EN_A),
    .prediction_WEN_A(grp_soft_max_fu_328_prediction_WEN_A),
    .prediction_Din_A(grp_soft_max_fu_328_prediction_Din_A),
    .prediction_Dout_A(32'd0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U46(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_335_p0),
    .din1(grp_fu_335_p1),
    .ce(1'b1),
    .dout(grp_fu_335_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U47(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_out_weights_q0),
    .din1(grp_fu_342_p1),
    .ce(1'b1),
    .dout(grp_fu_342_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_fu_385_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage39_subdone) & (1'b1 == ap_CS_fsm_pp0_stage39)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_fu_385_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_soft_max_fu_328_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln31_fu_385_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_soft_max_fu_328_ap_start_reg <= 1'b1;
        end else if ((grp_soft_max_fu_328_ap_ready == 1'b1)) begin
            grp_soft_max_fu_328_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        d_0_reg_293 <= d_reg_909;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_0_reg_293 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_938 == 1'd0))) begin
        f_0_0_reg_316 <= add_ln36_8_reg_1155;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_fu_385_p2 == 1'd0))) begin
        f_0_0_reg_316 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
            reg_358 <= dense_2_out_q0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
            reg_358 <= dense_2_out_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0))) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage5) & (1'b0 == ap_block_pp0_stage5_11001))) begin
            reg_369 <= dense_2_out_q0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
            reg_369 <= dense_2_out_q1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln36_reg_938_pp0_iter1_reg == 1'd0))) begin
        w_sum_0_0_reg_304 <= grp_fu_335_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_fu_385_p2 == 1'd0))) begin
        w_sum_0_0_reg_304 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln36_1_reg_988 <= add_ln36_1_fu_559_p2;
        add_ln38_5_reg_978 <= add_ln38_5_fu_554_p2;
        f_0_0_cast1_reg_963[4 : 0] <= f_0_0_cast1_fu_471_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        add_ln36_2_reg_1004 <= add_ln36_2_fu_574_p2;
        add_ln36_3_reg_1015 <= add_ln36_3_fu_584_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        add_ln36_4_reg_1036 <= add_ln36_4_fu_632_p2;
        add_ln36_5_reg_1047 <= add_ln36_5_fu_642_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        add_ln36_6_reg_1073 <= add_ln36_6_fu_690_p2;
        add_ln36_7_reg_1084 <= add_ln36_7_fu_700_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage39_11001) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0))) begin
        add_ln36_8_reg_1155 <= add_ln36_8_fu_899_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln36_reg_938 == 1'd0))) begin
        add_ln38_19_reg_1135 <= add_ln38_19_fu_890_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_reg_909 <= d_fu_391_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        dense_2_out_load_5_reg_1031 <= dense_2_out_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        dense_2_out_load_7_reg_1068 <= dense_2_out_q1;
        tmp_4_2_reg_1058 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        dense_2_out_load_9_reg_1105 <= dense_2_out_q1;
        tmp_4_3_reg_1095 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln36_reg_938 <= icmp_ln36_fu_409_p2;
        icmp_ln36_reg_938_pp0_iter1_reg <= icmp_ln36_reg_938;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_fu_409_p2 == 1'd0))) begin
        or_ln36_reg_952[4 : 1] <= or_ln36_fu_460_p2[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln36_reg_938 == 1'd0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln36_reg_938 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        reg_353 <= dense_2_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln36_reg_938 == 1'd0)))) begin
        reg_364 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (icmp_ln36_reg_938 == 1'd0)))) begin
        reg_375 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b0 == ap_block_pp0_stage38_11001) & (1'b1 == ap_CS_fsm_pp0_stage38) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage34_11001) & (1'b1 == ap_CS_fsm_pp0_stage34) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage30_11001) & (1'b1 == ap_CS_fsm_pp0_stage30) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage26_11001) & (1'b1 == ap_CS_fsm_pp0_stage26) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage22_11001) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage18_11001) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln36_reg_938 == 1'd0)))) begin
        reg_380 <= grp_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln36_reg_938 == 1'd0))) begin
        tmp_4_5_reg_1115 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0))) begin
        tmp_4_6_reg_1125 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0))) begin
        tmp_4_7_reg_1140 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln36_reg_938 == 1'd0))) begin
        tmp_4_9_reg_1150 <= grp_fu_342_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_fu_385_p2 == 1'd0))) begin
        zext_ln36_6_reg_931[3 : 0] <= zext_ln36_6_fu_405_p1[3 : 0];
        zext_ln36_reg_920[3 : 0] <= zext_ln36_fu_401_p1[3 : 0];
        zext_ln38_reg_914[3 : 0] <= zext_ln38_fu_397_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln36_fu_409_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_soft_max_fu_328_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln36_reg_938 == 1'd0))) begin
        ap_phi_mux_f_0_0_phi_fu_320_p4 = add_ln36_8_reg_1155;
    end else begin
        ap_phi_mux_f_0_0_phi_fu_320_p4 = f_0_0_reg_316;
    end
end

always @ (*) begin
    if (((grp_soft_max_fu_328_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_2_out_address0 = zext_ln38_9_fu_695_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_2_out_address0 = zext_ln38_7_fu_637_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_2_out_address0 = zext_ln38_5_fu_579_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_2_out_address0 = zext_ln38_3_fu_519_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_2_out_address0 = zext_ln38_1_fu_415_p1;
        end else begin
            dense_2_out_address0 = 'bx;
        end
    end else begin
        dense_2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_2_out_address1 = zext_ln38_10_fu_705_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_2_out_address1 = zext_ln38_8_fu_647_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_2_out_address1 = zext_ln38_6_fu_589_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_2_out_address1 = zext_ln38_4_fu_565_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_2_out_address1 = zext_ln38_2_fu_466_p1;
        end else begin
            dense_2_out_address1 = 'bx;
        end
    end else begin
        dense_2_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_2_out_ce0 = 1'b1;
    end else begin
        dense_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_2_out_ce1 = 1'b1;
    end else begin
        dense_2_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_array_address0 = zext_ln38_reg_914;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        dense_array_address0 = grp_soft_max_fu_328_dense_array_address0;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state51)) begin
        dense_array_ce0 = grp_soft_max_fu_328_dense_array_ce0;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state46)) begin
        dense_out_bias_ce0 = 1'b1;
    end else begin
        dense_out_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
            dense_out_weights_address0 = zext_ln38_40_fu_895_p1;
        end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
            dense_out_weights_address0 = zext_ln38_37_fu_857_p1;
        end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
            dense_out_weights_address0 = zext_ln38_34_fu_819_p1;
        end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
            dense_out_weights_address0 = zext_ln38_31_fu_781_p1;
        end else if (((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            dense_out_weights_address0 = zext_ln38_28_fu_743_p1;
        end else if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_out_weights_address0 = zext_ln38_25_fu_685_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_out_weights_address0 = zext_ln38_22_fu_627_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_out_weights_address0 = zext_ln38_19_fu_570_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_out_weights_address0 = zext_ln38_16_fu_508_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_out_weights_address0 = zext_ln38_13_fu_455_p1;
        end else begin
            dense_out_weights_address0 = 'bx;
        end
    end else begin
        dense_out_weights_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_out_weights_ce0 = 1'b1;
    end else begin
        dense_out_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_335_p0 = w_sum_0_0_reg_304;
    end else if ((((1'b0 == ap_block_pp0_stage35) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage31) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage27) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage19) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage39) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_335_p0 = reg_380;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p0 = ap_phi_mux_w_sum_0_0_phi_fu_308_p4;
    end else begin
        grp_fu_335_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_335_p1 = dense_out_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage39) & (1'b1 == ap_CS_fsm_pp0_stage39) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p1 = tmp_4_9_reg_1150;
    end else if (((1'b0 == ap_block_pp0_stage31) & (1'b1 == ap_CS_fsm_pp0_stage31) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p1 = tmp_4_7_reg_1140;
    end else if (((1'b0 == ap_block_pp0_stage27) & (1'b1 == ap_CS_fsm_pp0_stage27) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p1 = tmp_4_6_reg_1125;
    end else if (((1'b0 == ap_block_pp0_stage23) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p1 = tmp_4_5_reg_1115;
    end else if (((1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p1 = tmp_4_3_reg_1095;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_335_p1 = tmp_4_2_reg_1058;
    end else if ((((1'b0 == ap_block_pp0_stage35) & (1'b1 == ap_CS_fsm_pp0_stage35) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_335_p1 = reg_375;
    end else if ((((1'b0 == ap_block_pp0_stage19) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_335_p1 = reg_364;
    end else begin
        grp_fu_335_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_342_p1 = dense_2_out_load_9_reg_1105;
    end else if (((1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_342_p1 = dense_2_out_load_7_reg_1068;
    end else if (((1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_342_p1 = dense_2_out_load_5_reg_1031;
    end else if ((((1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_342_p1 = reg_369;
    end else if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_342_p1 = reg_353;
    end else if ((((1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_342_p1 = reg_358;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_342_p1 = dense_2_out_q0;
    end else begin
        grp_fu_342_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln31_fu_385_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln36_fu_409_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln36_fu_409_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state46;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((1'b0 == ap_block_pp0_stage16_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((1'b0 == ap_block_pp0_stage17_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((1'b0 == ap_block_pp0_stage18_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((1'b0 == ap_block_pp0_stage19_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((1'b0 == ap_block_pp0_stage20_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((1'b0 == ap_block_pp0_stage21_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((1'b0 == ap_block_pp0_stage22_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((1'b0 == ap_block_pp0_stage23_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_pp0_stage24 : begin
            if ((1'b0 == ap_block_pp0_stage24_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage24;
            end
        end
        ap_ST_fsm_pp0_stage25 : begin
            if ((1'b0 == ap_block_pp0_stage25_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage25;
            end
        end
        ap_ST_fsm_pp0_stage26 : begin
            if ((1'b0 == ap_block_pp0_stage26_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage26;
            end
        end
        ap_ST_fsm_pp0_stage27 : begin
            if ((1'b0 == ap_block_pp0_stage27_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage27;
            end
        end
        ap_ST_fsm_pp0_stage28 : begin
            if ((1'b0 == ap_block_pp0_stage28_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage28;
            end
        end
        ap_ST_fsm_pp0_stage29 : begin
            if ((1'b0 == ap_block_pp0_stage29_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage29;
            end
        end
        ap_ST_fsm_pp0_stage30 : begin
            if ((1'b0 == ap_block_pp0_stage30_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage30;
            end
        end
        ap_ST_fsm_pp0_stage31 : begin
            if ((1'b0 == ap_block_pp0_stage31_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage31;
            end
        end
        ap_ST_fsm_pp0_stage32 : begin
            if ((1'b0 == ap_block_pp0_stage32_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage32;
            end
        end
        ap_ST_fsm_pp0_stage33 : begin
            if ((1'b0 == ap_block_pp0_stage33_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage33;
            end
        end
        ap_ST_fsm_pp0_stage34 : begin
            if ((1'b0 == ap_block_pp0_stage34_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage34;
            end
        end
        ap_ST_fsm_pp0_stage35 : begin
            if ((1'b0 == ap_block_pp0_stage35_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage35;
            end
        end
        ap_ST_fsm_pp0_stage36 : begin
            if ((1'b0 == ap_block_pp0_stage36_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage36;
            end
        end
        ap_ST_fsm_pp0_stage37 : begin
            if ((1'b0 == ap_block_pp0_stage37_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage37;
            end
        end
        ap_ST_fsm_pp0_stage38 : begin
            if ((1'b0 == ap_block_pp0_stage38_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage38;
            end
        end
        ap_ST_fsm_pp0_stage39 : begin
            if ((1'b0 == ap_block_pp0_stage39_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage39;
            end
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state51 : begin
            if (((grp_soft_max_fu_328_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state51))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln36_1_fu_559_p2 = (f_0_0_cast1_fu_471_p1 + 6'd3);

assign add_ln36_2_fu_574_p2 = (f_0_0_cast1_reg_963 + 6'd4);

assign add_ln36_3_fu_584_p2 = (f_0_0_cast1_reg_963 + 6'd5);

assign add_ln36_4_fu_632_p2 = (f_0_0_cast1_reg_963 + 6'd6);

assign add_ln36_5_fu_642_p2 = (f_0_0_cast1_reg_963 + 6'd7);

assign add_ln36_6_fu_690_p2 = (f_0_0_cast1_reg_963 + 6'd8);

assign add_ln36_7_fu_700_p2 = (f_0_0_cast1_reg_963 + 6'd9);

assign add_ln36_8_fu_899_p2 = (f_0_0_reg_316 + 5'd10);

assign add_ln36_fu_513_p2 = (f_0_0_reg_316 + 5'd2);

assign add_ln38_10_fu_732_p2 = (zext_ln38_27_fu_728_p1 + zext_ln38_26_fu_717_p1);

assign add_ln38_11_fu_738_p2 = (add_ln38_10_fu_732_p2 + zext_ln36_reg_920);

assign add_ln38_12_fu_770_p2 = (zext_ln38_30_fu_766_p1 + zext_ln38_29_fu_755_p1);

assign add_ln38_13_fu_776_p2 = (add_ln38_12_fu_770_p2 + zext_ln36_reg_920);

assign add_ln38_14_fu_808_p2 = (zext_ln38_33_fu_804_p1 + zext_ln38_32_fu_793_p1);

assign add_ln38_15_fu_814_p2 = (add_ln38_14_fu_808_p2 + zext_ln36_reg_920);

assign add_ln38_16_fu_846_p2 = (zext_ln38_36_fu_842_p1 + zext_ln38_35_fu_831_p1);

assign add_ln38_17_fu_852_p2 = (add_ln38_16_fu_846_p2 + zext_ln36_reg_920);

assign add_ln38_18_fu_884_p2 = (zext_ln38_39_fu_880_p1 + zext_ln38_38_fu_869_p1);

assign add_ln38_19_fu_890_p2 = (add_ln38_18_fu_884_p2 + zext_ln36_reg_920);

assign add_ln38_1_fu_450_p2 = (add_ln38_fu_444_p2 + zext_ln36_6_reg_931);

assign add_ln38_2_fu_497_p2 = (zext_ln38_15_fu_493_p1 + zext_ln38_14_fu_482_p1);

assign add_ln38_3_fu_503_p2 = (add_ln38_2_fu_497_p2 + zext_ln36_6_reg_931);

assign add_ln38_4_fu_548_p2 = (zext_ln38_18_fu_544_p1 + zext_ln38_17_fu_532_p1);

assign add_ln38_5_fu_554_p2 = (add_ln38_4_fu_548_p2 + zext_ln36_6_reg_931);

assign add_ln38_6_fu_616_p2 = (zext_ln38_21_fu_612_p1 + zext_ln38_20_fu_601_p1);

assign add_ln38_7_fu_622_p2 = (add_ln38_6_fu_616_p2 + zext_ln36_reg_920);

assign add_ln38_8_fu_674_p2 = (zext_ln38_24_fu_670_p1 + zext_ln38_23_fu_659_p1);

assign add_ln38_9_fu_680_p2 = (add_ln38_8_fu_674_p2 + zext_ln36_reg_920);

assign add_ln38_fu_444_p2 = (zext_ln38_12_fu_440_p1 + zext_ln38_11_fu_428_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage26 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage27 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage30 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_pp0_stage31 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_pp0_stage34 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_pp0_stage35 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_pp0_stage38 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_pp0_stage39 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd47];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage24_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage25_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage26_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage27_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage28_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage29_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage30_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage31_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage32_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage33_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage34_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage35_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage36_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage37_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage38_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage39_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage24_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage25_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage26_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage27_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage28_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage29_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage30_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage31_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage32_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage33_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage34_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage35_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage36_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage37_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage38_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage39_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_0_0_phi_fu_308_p4 = w_sum_0_0_reg_304;

assign d_fu_391_p2 = (d_0_reg_293 + 4'd1);

assign dense_out_bias_address0 = zext_ln38_reg_914;

assign f_0_0_cast1_fu_471_p1 = f_0_0_reg_316;

assign grp_soft_max_fu_328_ap_start = grp_soft_max_fu_328_ap_start_reg;

assign icmp_ln31_fu_385_p2 = ((d_0_reg_293 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_409_p2 = ((ap_phi_mux_f_0_0_phi_fu_320_p4 == 5'd30) ? 1'b1 : 1'b0);

assign or_ln36_fu_460_p2 = (ap_phi_mux_f_0_0_phi_fu_320_p4 | 5'd1);

assign prediction_Addr_A = grp_soft_max_fu_328_prediction_Addr_A;

assign prediction_Din_A = grp_soft_max_fu_328_prediction_Din_A;

assign prediction_EN_A = grp_soft_max_fu_328_prediction_EN_A;

assign prediction_WEN_A = grp_soft_max_fu_328_prediction_WEN_A;

assign tmp_10_fu_594_p3 = {{add_ln36_1_reg_988}, {3'd0}};

assign tmp_11_fu_605_p3 = {{add_ln36_1_reg_988}, {1'd0}};

assign tmp_12_fu_652_p3 = {{add_ln36_2_reg_1004}, {3'd0}};

assign tmp_13_fu_663_p3 = {{add_ln36_2_reg_1004}, {1'd0}};

assign tmp_14_fu_710_p3 = {{add_ln36_3_reg_1015}, {3'd0}};

assign tmp_15_fu_721_p3 = {{add_ln36_3_reg_1015}, {1'd0}};

assign tmp_16_fu_748_p3 = {{add_ln36_4_reg_1036}, {3'd0}};

assign tmp_17_fu_759_p3 = {{add_ln36_4_reg_1036}, {1'd0}};

assign tmp_18_fu_786_p3 = {{add_ln36_5_reg_1047}, {3'd0}};

assign tmp_19_fu_797_p3 = {{add_ln36_5_reg_1047}, {1'd0}};

assign tmp_20_fu_824_p3 = {{add_ln36_6_reg_1073}, {3'd0}};

assign tmp_21_fu_835_p3 = {{add_ln36_6_reg_1073}, {1'd0}};

assign tmp_22_fu_862_p3 = {{add_ln36_7_reg_1084}, {3'd0}};

assign tmp_23_fu_873_p3 = {{add_ln36_7_reg_1084}, {1'd0}};

assign tmp_2_fu_420_p3 = {{ap_phi_mux_f_0_0_phi_fu_320_p4}, {3'd0}};

assign tmp_5_fu_432_p3 = {{ap_phi_mux_f_0_0_phi_fu_320_p4}, {1'd0}};

assign tmp_6_fu_475_p3 = {{or_ln36_reg_952}, {3'd0}};

assign tmp_7_fu_486_p3 = {{or_ln36_reg_952}, {1'd0}};

assign tmp_8_fu_524_p3 = {{add_ln36_fu_513_p2}, {3'd0}};

assign tmp_9_fu_536_p3 = {{add_ln36_fu_513_p2}, {1'd0}};

assign zext_ln36_6_fu_405_p1 = d_0_reg_293;

assign zext_ln36_fu_401_p1 = d_0_reg_293;

assign zext_ln38_10_fu_705_p1 = add_ln36_7_fu_700_p2;

assign zext_ln38_11_fu_428_p1 = tmp_2_fu_420_p3;

assign zext_ln38_12_fu_440_p1 = tmp_5_fu_432_p3;

assign zext_ln38_13_fu_455_p1 = add_ln38_1_fu_450_p2;

assign zext_ln38_14_fu_482_p1 = tmp_6_fu_475_p3;

assign zext_ln38_15_fu_493_p1 = tmp_7_fu_486_p3;

assign zext_ln38_16_fu_508_p1 = add_ln38_3_fu_503_p2;

assign zext_ln38_17_fu_532_p1 = tmp_8_fu_524_p3;

assign zext_ln38_18_fu_544_p1 = tmp_9_fu_536_p3;

assign zext_ln38_19_fu_570_p1 = add_ln38_5_reg_978;

assign zext_ln38_1_fu_415_p1 = ap_phi_mux_f_0_0_phi_fu_320_p4;

assign zext_ln38_20_fu_601_p1 = tmp_10_fu_594_p3;

assign zext_ln38_21_fu_612_p1 = tmp_11_fu_605_p3;

assign zext_ln38_22_fu_627_p1 = add_ln38_7_fu_622_p2;

assign zext_ln38_23_fu_659_p1 = tmp_12_fu_652_p3;

assign zext_ln38_24_fu_670_p1 = tmp_13_fu_663_p3;

assign zext_ln38_25_fu_685_p1 = add_ln38_9_fu_680_p2;

assign zext_ln38_26_fu_717_p1 = tmp_14_fu_710_p3;

assign zext_ln38_27_fu_728_p1 = tmp_15_fu_721_p3;

assign zext_ln38_28_fu_743_p1 = add_ln38_11_fu_738_p2;

assign zext_ln38_29_fu_755_p1 = tmp_16_fu_748_p3;

assign zext_ln38_2_fu_466_p1 = or_ln36_fu_460_p2;

assign zext_ln38_30_fu_766_p1 = tmp_17_fu_759_p3;

assign zext_ln38_31_fu_781_p1 = add_ln38_13_fu_776_p2;

assign zext_ln38_32_fu_793_p1 = tmp_18_fu_786_p3;

assign zext_ln38_33_fu_804_p1 = tmp_19_fu_797_p3;

assign zext_ln38_34_fu_819_p1 = add_ln38_15_fu_814_p2;

assign zext_ln38_35_fu_831_p1 = tmp_20_fu_824_p3;

assign zext_ln38_36_fu_842_p1 = tmp_21_fu_835_p3;

assign zext_ln38_37_fu_857_p1 = add_ln38_17_fu_852_p2;

assign zext_ln38_38_fu_869_p1 = tmp_22_fu_862_p3;

assign zext_ln38_39_fu_880_p1 = tmp_23_fu_873_p3;

assign zext_ln38_3_fu_519_p1 = add_ln36_fu_513_p2;

assign zext_ln38_40_fu_895_p1 = add_ln38_19_reg_1135;

assign zext_ln38_4_fu_565_p1 = add_ln36_1_fu_559_p2;

assign zext_ln38_5_fu_579_p1 = add_ln36_2_fu_574_p2;

assign zext_ln38_6_fu_589_p1 = add_ln36_3_fu_584_p2;

assign zext_ln38_7_fu_637_p1 = add_ln36_4_fu_632_p2;

assign zext_ln38_8_fu_647_p1 = add_ln36_5_fu_642_p2;

assign zext_ln38_9_fu_695_p1 = add_ln36_6_fu_690_p2;

assign zext_ln38_fu_397_p1 = d_0_reg_293;

always @ (posedge ap_clk) begin
    zext_ln38_reg_914[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln36_reg_920[9:4] <= 6'b000000;
    zext_ln36_6_reg_931[8:4] <= 5'b00000;
    or_ln36_reg_952[0] <= 1'b1;
    f_0_0_cast1_reg_963[5] <= 1'b0;
end

endmodule //dense_out
