-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_EN_A : OUT STD_LOGIC;
    prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_2_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_ce0 : OUT STD_LOGIC;
    dense_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_2_out_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_ce1 : OUT STD_LOGIC;
    dense_2_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_pp0_stage16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_pp0_stage17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp0_stage18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_pp0_stage19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_pp0_stage20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_pp0_stage21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp0_stage22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_pp0_stage23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_pp0_stage24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_pp0_stage25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage37 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage38 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage39 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_out_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_ce0 : STD_LOGIC;
    signal dense_out_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_out_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_ce0 : STD_LOGIC;
    signal dense_out_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_0_0_reg_304 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_0_0_reg_316 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state44_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln36_reg_938 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state45_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_state8_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state9_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state10_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_state11_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_state12_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state13_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_358 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_342_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_364 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_369 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_375 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_380 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_state17_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage18 : signal is "none";
    signal ap_block_state21_pp0_stage18_iter0 : BOOLEAN;
    signal ap_block_pp0_stage18_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage22 : signal is "none";
    signal ap_block_state25_pp0_stage22_iter0 : BOOLEAN;
    signal ap_block_pp0_stage22_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage26 : signal is "none";
    signal ap_block_state29_pp0_stage26_iter0 : BOOLEAN;
    signal ap_block_pp0_stage26_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage30 : signal is "none";
    signal ap_block_state33_pp0_stage30_iter0 : BOOLEAN;
    signal ap_block_pp0_stage30_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage34 : signal is "none";
    signal ap_block_state37_pp0_stage34_iter0 : BOOLEAN;
    signal ap_block_pp0_stage34_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage38 : signal is "none";
    signal ap_block_state41_pp0_stage38_iter0 : BOOLEAN;
    signal ap_block_pp0_stage38_11001 : BOOLEAN;
    signal icmp_ln31_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal d_fu_391_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_909 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln38_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_914 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_fu_401_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_reg_920 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln36_6_fu_405_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_6_reg_931 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln36_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln36_reg_938_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_460_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln36_reg_952 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_0_cast1_fu_471_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_0_0_cast1_reg_963 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln38_5_fu_554_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_5_reg_978 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_1_fu_559_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_1_reg_988 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_2_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_2_reg_1004 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_3_fu_584_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_3_reg_1015 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_2_out_load_5_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_4_fu_632_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_4_reg_1036 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_5_fu_642_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_5_reg_1047 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_2_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_out_load_7_reg_1068 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln36_6_fu_690_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_6_reg_1073 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_7_fu_700_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_7_reg_1084 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_3_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_out_load_9_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_5_reg_1115 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_6_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln38_19_fu_890_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_19_reg_1135 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_7_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_9_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state14_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal add_ln36_8_fu_899_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln36_8_reg_1155 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage39 : signal is "none";
    signal ap_block_state42_pp0_stage39_iter0 : BOOLEAN;
    signal ap_block_pp0_stage39_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage39_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_ce0 : STD_LOGIC;
    signal dense_array_we0 : STD_LOGIC;
    signal dense_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_328_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_328_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_328_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_328_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_328_dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_328_dense_array_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_328_prediction_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_328_prediction_EN_A : STD_LOGIC;
    signal grp_soft_max_fu_328_prediction_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_328_prediction_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal d_0_reg_293 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_phi_mux_w_sum_0_0_phi_fu_308_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_f_0_0_phi_fu_320_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_soft_max_fu_328_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal zext_ln38_13_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_fu_415_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_2_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_16_fu_508_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln38_3_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_4_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_19_fu_570_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln38_5_fu_579_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_6_fu_589_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_22_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln38_7_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_8_fu_647_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_25_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln38_9_fu_695_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_10_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_28_fu_743_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal zext_ln38_31_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal zext_ln38_34_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal zext_ln38_37_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal zext_ln38_40_fu_895_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal grp_fu_335_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_335_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage19 : signal is "none";
    signal ap_block_pp0_stage19 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage23 : signal is "none";
    signal ap_block_pp0_stage23 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage27 : signal is "none";
    signal ap_block_pp0_stage27 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage31 : signal is "none";
    signal ap_block_pp0_stage31 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage35 : signal is "none";
    signal ap_block_pp0_stage35 : BOOLEAN;
    signal ap_block_pp0_stage39 : BOOLEAN;
    signal grp_fu_342_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal tmp_2_fu_420_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_432_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_12_fu_440_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_11_fu_428_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_fu_444_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_1_fu_450_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_6_fu_475_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_486_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_15_fu_493_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_14_fu_482_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_2_fu_497_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_3_fu_503_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_fu_513_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_524_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_536_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_18_fu_544_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_17_fu_532_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_4_fu_548_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_594_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_11_fu_605_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_21_fu_612_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_20_fu_601_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_6_fu_616_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_7_fu_622_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_652_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_663_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_24_fu_670_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_23_fu_659_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_8_fu_674_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_9_fu_680_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_710_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_15_fu_721_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_27_fu_728_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_26_fu_717_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_10_fu_732_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_11_fu_738_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_16_fu_748_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_17_fu_759_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_30_fu_766_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_29_fu_755_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_12_fu_770_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_13_fu_776_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_fu_786_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_797_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_33_fu_804_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_32_fu_793_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_14_fu_808_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_15_fu_814_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_824_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_21_fu_835_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_36_fu_842_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_35_fu_831_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_16_fu_846_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_17_fu_852_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_862_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_23_fu_873_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln38_39_fu_880_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln38_38_fu_869_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln38_18_fu_884_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state15_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_state16_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_block_state18_pp0_stage15_iter0 : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal ap_block_state19_pp0_stage16_iter0 : BOOLEAN;
    signal ap_block_pp0_stage16_subdone : BOOLEAN;
    signal ap_block_state20_pp0_stage17_iter0 : BOOLEAN;
    signal ap_block_pp0_stage17_subdone : BOOLEAN;
    signal ap_block_pp0_stage18_subdone : BOOLEAN;
    signal ap_block_state22_pp0_stage19_iter0 : BOOLEAN;
    signal ap_block_pp0_stage19_subdone : BOOLEAN;
    signal ap_block_state23_pp0_stage20_iter0 : BOOLEAN;
    signal ap_block_pp0_stage20_subdone : BOOLEAN;
    signal ap_block_state24_pp0_stage21_iter0 : BOOLEAN;
    signal ap_block_pp0_stage21_subdone : BOOLEAN;
    signal ap_block_pp0_stage22_subdone : BOOLEAN;
    signal ap_block_state26_pp0_stage23_iter0 : BOOLEAN;
    signal ap_block_pp0_stage23_subdone : BOOLEAN;
    signal ap_block_state27_pp0_stage24_iter0 : BOOLEAN;
    signal ap_block_pp0_stage24_subdone : BOOLEAN;
    signal ap_block_state28_pp0_stage25_iter0 : BOOLEAN;
    signal ap_block_pp0_stage25_subdone : BOOLEAN;
    signal ap_block_pp0_stage26_subdone : BOOLEAN;
    signal ap_block_state30_pp0_stage27_iter0 : BOOLEAN;
    signal ap_block_pp0_stage27_subdone : BOOLEAN;
    signal ap_block_state31_pp0_stage28_iter0 : BOOLEAN;
    signal ap_block_pp0_stage28_subdone : BOOLEAN;
    signal ap_block_state32_pp0_stage29_iter0 : BOOLEAN;
    signal ap_block_pp0_stage29_subdone : BOOLEAN;
    signal ap_block_pp0_stage30_subdone : BOOLEAN;
    signal ap_block_state34_pp0_stage31_iter0 : BOOLEAN;
    signal ap_block_pp0_stage31_subdone : BOOLEAN;
    signal ap_block_state35_pp0_stage32_iter0 : BOOLEAN;
    signal ap_block_pp0_stage32_subdone : BOOLEAN;
    signal ap_block_state36_pp0_stage33_iter0 : BOOLEAN;
    signal ap_block_pp0_stage33_subdone : BOOLEAN;
    signal ap_block_pp0_stage34_subdone : BOOLEAN;
    signal ap_block_state38_pp0_stage35_iter0 : BOOLEAN;
    signal ap_block_pp0_stage35_subdone : BOOLEAN;
    signal ap_block_state39_pp0_stage36_iter0 : BOOLEAN;
    signal ap_block_pp0_stage36_subdone : BOOLEAN;
    signal ap_block_state40_pp0_stage37_iter0 : BOOLEAN;
    signal ap_block_pp0_stage37_subdone : BOOLEAN;
    signal ap_block_pp0_stage38_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_ce0 : OUT STD_LOGIC;
        dense_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_EN_A : OUT STD_LOGIC;
        prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_omb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_oncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_aocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_out_weights_U : component dense_out_dense_omb6
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_address0,
        ce0 => dense_out_weights_ce0,
        q0 => dense_out_weights_q0);

    dense_out_bias_U : component dense_out_dense_oncg
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_address0,
        ce0 => dense_out_bias_ce0,
        q0 => dense_out_bias_q0);

    dense_array_U : component dense_out_dense_aocq
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_address0,
        ce0 => dense_array_ce0,
        we0 => dense_array_we0,
        d0 => grp_fu_335_p2,
        q0 => dense_array_q0);

    grp_soft_max_fu_328 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_328_ap_start,
        ap_done => grp_soft_max_fu_328_ap_done,
        ap_idle => grp_soft_max_fu_328_ap_idle,
        ap_ready => grp_soft_max_fu_328_ap_ready,
        dense_array_address0 => grp_soft_max_fu_328_dense_array_address0,
        dense_array_ce0 => grp_soft_max_fu_328_dense_array_ce0,
        dense_array_q0 => dense_array_q0,
        prediction_Addr_A => grp_soft_max_fu_328_prediction_Addr_A,
        prediction_EN_A => grp_soft_max_fu_328_prediction_EN_A,
        prediction_WEN_A => grp_soft_max_fu_328_prediction_WEN_A,
        prediction_Din_A => grp_soft_max_fu_328_prediction_Din_A,
        prediction_Dout_A => ap_const_lv32_0);

    cnn_fadd_32ns_32ncud_U46 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_335_p0,
        din1 => grp_fu_335_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_335_p2);

    cnn_fmul_32ns_32ndEe_U47 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_out_weights_q0,
        din1 => grp_fu_342_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_342_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_fu_385_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage39_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_fu_385_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_328_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln31_fu_385_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_soft_max_fu_328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_328_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_293_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                d_0_reg_293 <= d_reg_909;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_0_reg_293 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then 
                f_0_0_reg_316 <= add_ln36_8_reg_1155;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_fu_385_p2 = ap_const_lv1_0))) then 
                f_0_0_reg_316 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    reg_358_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                    reg_358 <= dense_2_out_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                    reg_358 <= dense_2_out_q1;
                end if;
            end if; 
        end if;
    end process;

    reg_369_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001))) then 
                    reg_369 <= dense_2_out_q0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                    reg_369 <= dense_2_out_q1;
                end if;
            end if; 
        end if;
    end process;

    w_sum_0_0_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln36_reg_938_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_0_0_reg_304 <= grp_fu_335_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_fu_385_p2 = ap_const_lv1_0))) then 
                w_sum_0_0_reg_304 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln36_1_reg_988 <= add_ln36_1_fu_559_p2;
                add_ln38_5_reg_978 <= add_ln38_5_fu_554_p2;
                    f_0_0_cast1_reg_963(4 downto 0) <= f_0_0_cast1_fu_471_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                add_ln36_2_reg_1004 <= add_ln36_2_fu_574_p2;
                add_ln36_3_reg_1015 <= add_ln36_3_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                add_ln36_4_reg_1036 <= add_ln36_4_fu_632_p2;
                add_ln36_5_reg_1047 <= add_ln36_5_fu_642_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                add_ln36_6_reg_1073 <= add_ln36_6_fu_690_p2;
                add_ln36_7_reg_1084 <= add_ln36_7_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage39_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                add_ln36_8_reg_1155 <= add_ln36_8_fu_899_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                add_ln38_19_reg_1135 <= add_ln38_19_fu_890_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                d_reg_909 <= d_fu_391_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                dense_2_out_load_5_reg_1031 <= dense_2_out_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                dense_2_out_load_7_reg_1068 <= dense_2_out_q1;
                tmp_4_2_reg_1058 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                dense_2_out_load_9_reg_1105 <= dense_2_out_q1;
                tmp_4_3_reg_1095 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln36_reg_938 <= icmp_ln36_fu_409_p2;
                icmp_ln36_reg_938_pp0_iter1_reg <= icmp_ln36_reg_938;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_fu_409_p2 = ap_const_lv1_0))) then
                    or_ln36_reg_952(4 downto 1) <= or_ln36_fu_460_p2(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_reg_938 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then
                reg_353 <= dense_2_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0)))) then
                reg_364 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0)))) then
                reg_375 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage38_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage38) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage34_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage34) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage30_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage30) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage26_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage26) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage22_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage22) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage18_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage18) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0)))) then
                reg_380 <= grp_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                tmp_4_5_reg_1115 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                tmp_4_6_reg_1125 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                tmp_4_7_reg_1140 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then
                tmp_4_9_reg_1150 <= grp_fu_342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_fu_385_p2 = ap_const_lv1_0))) then
                    zext_ln36_6_reg_931(3 downto 0) <= zext_ln36_6_fu_405_p1(3 downto 0);
                    zext_ln36_reg_920(3 downto 0) <= zext_ln36_fu_401_p1(3 downto 0);
                    zext_ln38_reg_914(3 downto 0) <= zext_ln38_fu_397_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln38_reg_914(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_920(9 downto 4) <= "000000";
    zext_ln36_6_reg_931(8 downto 4) <= "00000";
    or_ln36_reg_952(0) <= '1';
    f_0_0_cast1_reg_963(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, icmp_ln31_fu_385_p2, ap_CS_fsm_state2, icmp_ln36_fu_409_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage39_subdone, ap_block_pp0_stage2_subdone, grp_soft_max_fu_328_ap_done, ap_CS_fsm_state51, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_block_pp0_stage15_subdone, ap_block_pp0_stage16_subdone, ap_block_pp0_stage17_subdone, ap_block_pp0_stage18_subdone, ap_block_pp0_stage19_subdone, ap_block_pp0_stage20_subdone, ap_block_pp0_stage21_subdone, ap_block_pp0_stage22_subdone, ap_block_pp0_stage23_subdone, ap_block_pp0_stage24_subdone, ap_block_pp0_stage25_subdone, ap_block_pp0_stage26_subdone, ap_block_pp0_stage27_subdone, ap_block_pp0_stage28_subdone, ap_block_pp0_stage29_subdone, ap_block_pp0_stage30_subdone, ap_block_pp0_stage31_subdone, ap_block_pp0_stage32_subdone, ap_block_pp0_stage33_subdone, ap_block_pp0_stage34_subdone, ap_block_pp0_stage35_subdone, ap_block_pp0_stage36_subdone, ap_block_pp0_stage37_subdone, ap_block_pp0_stage38_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln31_fu_385_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln36_fu_409_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln36_fu_409_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when ap_ST_fsm_pp0_stage16 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage16_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage16;
                end if;
            when ap_ST_fsm_pp0_stage17 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage17_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage17;
                end if;
            when ap_ST_fsm_pp0_stage18 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage18_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage18;
                end if;
            when ap_ST_fsm_pp0_stage19 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage19_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage19;
                end if;
            when ap_ST_fsm_pp0_stage20 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage20_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage20;
                end if;
            when ap_ST_fsm_pp0_stage21 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage21_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage21;
                end if;
            when ap_ST_fsm_pp0_stage22 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage22_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage22;
                end if;
            when ap_ST_fsm_pp0_stage23 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage23_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage23;
                end if;
            when ap_ST_fsm_pp0_stage24 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage24_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage24;
                end if;
            when ap_ST_fsm_pp0_stage25 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage25_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage25;
                end if;
            when ap_ST_fsm_pp0_stage26 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage26_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage26;
                end if;
            when ap_ST_fsm_pp0_stage27 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage27_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage27;
                end if;
            when ap_ST_fsm_pp0_stage28 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage28_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage28;
                end if;
            when ap_ST_fsm_pp0_stage29 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage29_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage29;
                end if;
            when ap_ST_fsm_pp0_stage30 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage30_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage30;
                end if;
            when ap_ST_fsm_pp0_stage31 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage31_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage31;
                end if;
            when ap_ST_fsm_pp0_stage32 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage32_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage32;
                end if;
            when ap_ST_fsm_pp0_stage33 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage33_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage33;
                end if;
            when ap_ST_fsm_pp0_stage34 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage34_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage34;
                end if;
            when ap_ST_fsm_pp0_stage35 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage35_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage35;
                end if;
            when ap_ST_fsm_pp0_stage36 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage36_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage36;
                end if;
            when ap_ST_fsm_pp0_stage37 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage37_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage37;
                end if;
            when ap_ST_fsm_pp0_stage38 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage38_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage38;
                end if;
            when ap_ST_fsm_pp0_stage39 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage39_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage39;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state51 => 
                if (((grp_soft_max_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln36_1_fu_559_p2 <= std_logic_vector(unsigned(f_0_0_cast1_fu_471_p1) + unsigned(ap_const_lv6_3));
    add_ln36_2_fu_574_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_963) + unsigned(ap_const_lv6_4));
    add_ln36_3_fu_584_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_963) + unsigned(ap_const_lv6_5));
    add_ln36_4_fu_632_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_963) + unsigned(ap_const_lv6_6));
    add_ln36_5_fu_642_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_963) + unsigned(ap_const_lv6_7));
    add_ln36_6_fu_690_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_963) + unsigned(ap_const_lv6_8));
    add_ln36_7_fu_700_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_963) + unsigned(ap_const_lv6_9));
    add_ln36_8_fu_899_p2 <= std_logic_vector(unsigned(f_0_0_reg_316) + unsigned(ap_const_lv5_A));
    add_ln36_fu_513_p2 <= std_logic_vector(unsigned(f_0_0_reg_316) + unsigned(ap_const_lv5_2));
    add_ln38_10_fu_732_p2 <= std_logic_vector(unsigned(zext_ln38_27_fu_728_p1) + unsigned(zext_ln38_26_fu_717_p1));
    add_ln38_11_fu_738_p2 <= std_logic_vector(unsigned(add_ln38_10_fu_732_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_12_fu_770_p2 <= std_logic_vector(unsigned(zext_ln38_30_fu_766_p1) + unsigned(zext_ln38_29_fu_755_p1));
    add_ln38_13_fu_776_p2 <= std_logic_vector(unsigned(add_ln38_12_fu_770_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_14_fu_808_p2 <= std_logic_vector(unsigned(zext_ln38_33_fu_804_p1) + unsigned(zext_ln38_32_fu_793_p1));
    add_ln38_15_fu_814_p2 <= std_logic_vector(unsigned(add_ln38_14_fu_808_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_16_fu_846_p2 <= std_logic_vector(unsigned(zext_ln38_36_fu_842_p1) + unsigned(zext_ln38_35_fu_831_p1));
    add_ln38_17_fu_852_p2 <= std_logic_vector(unsigned(add_ln38_16_fu_846_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_18_fu_884_p2 <= std_logic_vector(unsigned(zext_ln38_39_fu_880_p1) + unsigned(zext_ln38_38_fu_869_p1));
    add_ln38_19_fu_890_p2 <= std_logic_vector(unsigned(add_ln38_18_fu_884_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_1_fu_450_p2 <= std_logic_vector(unsigned(add_ln38_fu_444_p2) + unsigned(zext_ln36_6_reg_931));
    add_ln38_2_fu_497_p2 <= std_logic_vector(unsigned(zext_ln38_15_fu_493_p1) + unsigned(zext_ln38_14_fu_482_p1));
    add_ln38_3_fu_503_p2 <= std_logic_vector(unsigned(add_ln38_2_fu_497_p2) + unsigned(zext_ln36_6_reg_931));
    add_ln38_4_fu_548_p2 <= std_logic_vector(unsigned(zext_ln38_18_fu_544_p1) + unsigned(zext_ln38_17_fu_532_p1));
    add_ln38_5_fu_554_p2 <= std_logic_vector(unsigned(add_ln38_4_fu_548_p2) + unsigned(zext_ln36_6_reg_931));
    add_ln38_6_fu_616_p2 <= std_logic_vector(unsigned(zext_ln38_21_fu_612_p1) + unsigned(zext_ln38_20_fu_601_p1));
    add_ln38_7_fu_622_p2 <= std_logic_vector(unsigned(add_ln38_6_fu_616_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_8_fu_674_p2 <= std_logic_vector(unsigned(zext_ln38_24_fu_670_p1) + unsigned(zext_ln38_23_fu_659_p1));
    add_ln38_9_fu_680_p2 <= std_logic_vector(unsigned(add_ln38_8_fu_674_p2) + unsigned(zext_ln36_reg_920));
    add_ln38_fu_444_p2 <= std_logic_vector(unsigned(zext_ln38_12_fu_440_p1) + unsigned(zext_ln38_11_fu_428_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(16);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(17);
    ap_CS_fsm_pp0_stage18 <= ap_CS_fsm(20);
    ap_CS_fsm_pp0_stage19 <= ap_CS_fsm(21);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage22 <= ap_CS_fsm(24);
    ap_CS_fsm_pp0_stage23 <= ap_CS_fsm(25);
    ap_CS_fsm_pp0_stage26 <= ap_CS_fsm(28);
    ap_CS_fsm_pp0_stage27 <= ap_CS_fsm(29);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage30 <= ap_CS_fsm(32);
    ap_CS_fsm_pp0_stage31 <= ap_CS_fsm(33);
    ap_CS_fsm_pp0_stage34 <= ap_CS_fsm(36);
    ap_CS_fsm_pp0_stage35 <= ap_CS_fsm(37);
    ap_CS_fsm_pp0_stage38 <= ap_CS_fsm(40);
    ap_CS_fsm_pp0_stage39 <= ap_CS_fsm(41);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(9);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(11);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state46 <= ap_CS_fsm(42);
    ap_CS_fsm_state47 <= ap_CS_fsm(43);
    ap_CS_fsm_state50 <= ap_CS_fsm(46);
    ap_CS_fsm_state51 <= ap_CS_fsm(47);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage12_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage13_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage14_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage15_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage16_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage17_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage18_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage19_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage20_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage21_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage22_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage23_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage24_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage25_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage26_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage27_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage28_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage29_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage30_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage31_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage32_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage33_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage34_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage35_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage36_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage37_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage38_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage38_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage39_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage12_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage13_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage14_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage15_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage16_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage17_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage18_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage19_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage20_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage21_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage22_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage23_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage24_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage25_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage26_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage27_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage28_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage29_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage30_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage31_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage32_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage33_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage34_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage35_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage36_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage37_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage38_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage39_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln36_fu_409_p2)
    begin
        if ((icmp_ln36_fu_409_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_328_ap_done, ap_CS_fsm_state51)
    begin
        if ((((grp_soft_max_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_0_phi_fu_320_p4_assign_proc : process(f_0_0_reg_316, icmp_ln36_reg_938, ap_CS_fsm_pp0_stage0, add_ln36_8_reg_1155, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln36_reg_938 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_0_phi_fu_320_p4 <= add_ln36_8_reg_1155;
        else 
            ap_phi_mux_f_0_0_phi_fu_320_p4 <= f_0_0_reg_316;
        end if; 
    end process;

    ap_phi_mux_w_sum_0_0_phi_fu_308_p4 <= w_sum_0_0_reg_304;

    ap_ready_assign_proc : process(grp_soft_max_fu_328_ap_done, ap_CS_fsm_state51)
    begin
        if (((grp_soft_max_fu_328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state51))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_391_p2 <= std_logic_vector(unsigned(d_0_reg_293) + unsigned(ap_const_lv4_1));

    dense_2_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln38_1_fu_415_p1, ap_block_pp0_stage1, zext_ln38_3_fu_519_p1, ap_block_pp0_stage2, zext_ln38_5_fu_579_p1, ap_block_pp0_stage3, zext_ln38_7_fu_637_p1, ap_block_pp0_stage4, zext_ln38_9_fu_695_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_2_out_address0 <= zext_ln38_9_fu_695_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_2_out_address0 <= zext_ln38_7_fu_637_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_2_out_address0 <= zext_ln38_5_fu_579_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_2_out_address0 <= zext_ln38_3_fu_519_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_2_out_address0 <= zext_ln38_1_fu_415_p1(5 - 1 downto 0);
            else 
                dense_2_out_address0 <= "XXXXX";
            end if;
        else 
            dense_2_out_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln38_2_fu_466_p1, ap_block_pp0_stage1, zext_ln38_4_fu_565_p1, ap_block_pp0_stage2, zext_ln38_6_fu_589_p1, ap_block_pp0_stage3, zext_ln38_8_fu_647_p1, ap_block_pp0_stage4, zext_ln38_10_fu_705_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_2_out_address1 <= zext_ln38_10_fu_705_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_2_out_address1 <= zext_ln38_8_fu_647_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_2_out_address1 <= zext_ln38_6_fu_589_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_2_out_address1 <= zext_ln38_4_fu_565_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_2_out_address1 <= zext_ln38_2_fu_466_p1(5 - 1 downto 0);
            else 
                dense_2_out_address1 <= "XXXXX";
            end if;
        else 
            dense_2_out_address1 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_2_out_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_2_out_ce1 <= ap_const_logic_1;
        else 
            dense_2_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_address0_assign_proc : process(zext_ln38_reg_914, grp_soft_max_fu_328_dense_array_address0, ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_address0 <= zext_ln38_reg_914(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            dense_array_address0 <= grp_soft_max_fu_328_dense_array_address0;
        else 
            dense_array_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_ce0_assign_proc : process(grp_soft_max_fu_328_dense_array_ce0, ap_CS_fsm_state50, ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            dense_array_ce0 <= grp_soft_max_fu_328_dense_array_ce0;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_we0_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_we0 <= ap_const_logic_1;
        else 
            dense_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_address0 <= zext_ln38_reg_914(4 - 1 downto 0);

    dense_out_bias_ce0_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            dense_out_bias_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_out_weights_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln38_13_fu_455_p1, zext_ln38_16_fu_508_p1, ap_block_pp0_stage1, zext_ln38_19_fu_570_p1, ap_block_pp0_stage2, zext_ln38_22_fu_627_p1, ap_block_pp0_stage3, zext_ln38_25_fu_685_p1, ap_block_pp0_stage4, zext_ln38_28_fu_743_p1, ap_block_pp0_stage5, zext_ln38_31_fu_781_p1, ap_block_pp0_stage6, zext_ln38_34_fu_819_p1, ap_block_pp0_stage7, zext_ln38_37_fu_857_p1, ap_block_pp0_stage8, zext_ln38_40_fu_895_p1, ap_block_pp0_stage9)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
                dense_out_weights_address0 <= zext_ln38_40_fu_895_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
                dense_out_weights_address0 <= zext_ln38_37_fu_857_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                dense_out_weights_address0 <= zext_ln38_34_fu_819_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
                dense_out_weights_address0 <= zext_ln38_31_fu_781_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                dense_out_weights_address0 <= zext_ln38_28_fu_743_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_out_weights_address0 <= zext_ln38_25_fu_685_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_out_weights_address0 <= zext_ln38_22_fu_627_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_out_weights_address0 <= zext_ln38_19_fu_570_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_out_weights_address0 <= zext_ln38_16_fu_508_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_out_weights_address0 <= zext_ln38_13_fu_455_p1(9 - 1 downto 0);
            else 
                dense_out_weights_address0 <= "XXXXXXXXX";
            end if;
        else 
            dense_out_weights_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    dense_out_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_11001, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6_11001, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_11001, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_out_weights_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_0_0_cast1_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_0_reg_316),6));

    grp_fu_335_p0_assign_proc : process(w_sum_0_0_reg_304, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, reg_380, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage39, ap_CS_fsm_state47, ap_phi_mux_w_sum_0_0_phi_fu_308_p4, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35, ap_block_pp0_stage39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_335_p0 <= w_sum_0_0_reg_304;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage35) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage27) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage39) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_335_p0 <= reg_380;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p0 <= ap_phi_mux_w_sum_0_0_phi_fu_308_p4;
        else 
            grp_fu_335_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_335_p1_assign_proc : process(dense_out_bias_q0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage7, reg_364, reg_375, tmp_4_2_reg_1058, tmp_4_3_reg_1095, tmp_4_5_reg_1115, tmp_4_6_reg_1125, tmp_4_7_reg_1140, tmp_4_9_reg_1150, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage39, ap_CS_fsm_state47, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15, ap_CS_fsm_pp0_stage19, ap_block_pp0_stage19, ap_CS_fsm_pp0_stage23, ap_block_pp0_stage23, ap_CS_fsm_pp0_stage27, ap_block_pp0_stage27, ap_CS_fsm_pp0_stage31, ap_block_pp0_stage31, ap_CS_fsm_pp0_stage35, ap_block_pp0_stage35, ap_block_pp0_stage39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_335_p1 <= dense_out_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage39) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage39) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p1 <= tmp_4_9_reg_1150;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage31) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage31) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p1 <= tmp_4_7_reg_1140;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage27) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage27) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p1 <= tmp_4_6_reg_1125;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage23) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage23) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p1 <= tmp_4_5_reg_1115;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p1 <= tmp_4_3_reg_1095;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_335_p1 <= tmp_4_2_reg_1058;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage35) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage35) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_335_p1 <= reg_375;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage19) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_335_p1 <= reg_364;
        else 
            grp_fu_335_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_342_p1_assign_proc : process(dense_2_out_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, reg_353, reg_358, reg_369, dense_2_out_load_5_reg_1031, dense_2_out_load_7_reg_1068, dense_2_out_load_9_reg_1105, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4, ap_block_pp0_stage5, ap_block_pp0_stage6, ap_block_pp0_stage7, ap_block_pp0_stage8, ap_block_pp0_stage9, ap_block_pp0_stage10)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_342_p1 <= dense_2_out_load_9_reg_1105;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_342_p1 <= dense_2_out_load_7_reg_1068;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_342_p1 <= dense_2_out_load_5_reg_1031;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_342_p1 <= reg_369;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_342_p1 <= reg_353;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_342_p1 <= reg_358;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_342_p1 <= dense_2_out_q0;
        else 
            grp_fu_342_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_soft_max_fu_328_ap_start <= grp_soft_max_fu_328_ap_start_reg;
    icmp_ln31_fu_385_p2 <= "1" when (d_0_reg_293 = ap_const_lv4_A) else "0";
    icmp_ln36_fu_409_p2 <= "1" when (ap_phi_mux_f_0_0_phi_fu_320_p4 = ap_const_lv5_1E) else "0";
    or_ln36_fu_460_p2 <= (ap_phi_mux_f_0_0_phi_fu_320_p4 or ap_const_lv5_1);
    prediction_Addr_A <= grp_soft_max_fu_328_prediction_Addr_A;
    prediction_Din_A <= grp_soft_max_fu_328_prediction_Din_A;
    prediction_EN_A <= grp_soft_max_fu_328_prediction_EN_A;
    prediction_WEN_A <= grp_soft_max_fu_328_prediction_WEN_A;
    tmp_10_fu_594_p3 <= (add_ln36_1_reg_988 & ap_const_lv3_0);
    tmp_11_fu_605_p3 <= (add_ln36_1_reg_988 & ap_const_lv1_0);
    tmp_12_fu_652_p3 <= (add_ln36_2_reg_1004 & ap_const_lv3_0);
    tmp_13_fu_663_p3 <= (add_ln36_2_reg_1004 & ap_const_lv1_0);
    tmp_14_fu_710_p3 <= (add_ln36_3_reg_1015 & ap_const_lv3_0);
    tmp_15_fu_721_p3 <= (add_ln36_3_reg_1015 & ap_const_lv1_0);
    tmp_16_fu_748_p3 <= (add_ln36_4_reg_1036 & ap_const_lv3_0);
    tmp_17_fu_759_p3 <= (add_ln36_4_reg_1036 & ap_const_lv1_0);
    tmp_18_fu_786_p3 <= (add_ln36_5_reg_1047 & ap_const_lv3_0);
    tmp_19_fu_797_p3 <= (add_ln36_5_reg_1047 & ap_const_lv1_0);
    tmp_20_fu_824_p3 <= (add_ln36_6_reg_1073 & ap_const_lv3_0);
    tmp_21_fu_835_p3 <= (add_ln36_6_reg_1073 & ap_const_lv1_0);
    tmp_22_fu_862_p3 <= (add_ln36_7_reg_1084 & ap_const_lv3_0);
    tmp_23_fu_873_p3 <= (add_ln36_7_reg_1084 & ap_const_lv1_0);
    tmp_2_fu_420_p3 <= (ap_phi_mux_f_0_0_phi_fu_320_p4 & ap_const_lv3_0);
    tmp_5_fu_432_p3 <= (ap_phi_mux_f_0_0_phi_fu_320_p4 & ap_const_lv1_0);
    tmp_6_fu_475_p3 <= (or_ln36_reg_952 & ap_const_lv3_0);
    tmp_7_fu_486_p3 <= (or_ln36_reg_952 & ap_const_lv1_0);
    tmp_8_fu_524_p3 <= (add_ln36_fu_513_p2 & ap_const_lv3_0);
    tmp_9_fu_536_p3 <= (add_ln36_fu_513_p2 & ap_const_lv1_0);
    zext_ln36_6_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_293),9));
    zext_ln36_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_293),10));
    zext_ln38_10_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_7_fu_700_p2),64));
    zext_ln38_11_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_420_p3),9));
    zext_ln38_12_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_432_p3),9));
    zext_ln38_13_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_fu_450_p2),64));
    zext_ln38_14_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_475_p3),9));
    zext_ln38_15_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_486_p3),9));
    zext_ln38_16_fu_508_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_3_fu_503_p2),64));
    zext_ln38_17_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_524_p3),9));
    zext_ln38_18_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_536_p3),9));
    zext_ln38_19_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_5_reg_978),64));
    zext_ln38_1_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_f_0_0_phi_fu_320_p4),64));
    zext_ln38_20_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_594_p3),10));
    zext_ln38_21_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_605_p3),10));
    zext_ln38_22_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_7_fu_622_p2),64));
    zext_ln38_23_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_652_p3),10));
    zext_ln38_24_fu_670_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_663_p3),10));
    zext_ln38_25_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_9_fu_680_p2),64));
    zext_ln38_26_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_710_p3),10));
    zext_ln38_27_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_721_p3),10));
    zext_ln38_28_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_11_fu_738_p2),64));
    zext_ln38_29_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_748_p3),10));
    zext_ln38_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln36_fu_460_p2),64));
    zext_ln38_30_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_759_p3),10));
    zext_ln38_31_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_13_fu_776_p2),64));
    zext_ln38_32_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_786_p3),10));
    zext_ln38_33_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_797_p3),10));
    zext_ln38_34_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_15_fu_814_p2),64));
    zext_ln38_35_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_824_p3),10));
    zext_ln38_36_fu_842_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_835_p3),10));
    zext_ln38_37_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_17_fu_852_p2),64));
    zext_ln38_38_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_862_p3),10));
    zext_ln38_39_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_23_fu_873_p3),10));
    zext_ln38_3_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_513_p2),64));
    zext_ln38_40_fu_895_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_19_reg_1135),64));
    zext_ln38_4_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_1_fu_559_p2),64));
    zext_ln38_5_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_fu_574_p2),64));
    zext_ln38_6_fu_589_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_3_fu_584_p2),64));
    zext_ln38_7_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_4_fu_632_p2),64));
    zext_ln38_8_fu_647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_5_fu_642_p2),64));
    zext_ln38_9_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_6_fu_690_p2),64));
    zext_ln38_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_293),64));
end behav;
