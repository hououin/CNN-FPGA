-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_0_ce0 : OUT STD_LOGIC;
    max_pool_out_0_we0 : OUT STD_LOGIC;
    max_pool_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_1_ce0 : OUT STD_LOGIC;
    max_pool_out_1_we0 : OUT STD_LOGIC;
    max_pool_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_2_ce0 : OUT STD_LOGIC;
    max_pool_out_2_we0 : OUT STD_LOGIC;
    max_pool_out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_3_ce0 : OUT STD_LOGIC;
    max_pool_out_3_we0 : OUT STD_LOGIC;
    max_pool_out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_4_ce0 : OUT STD_LOGIC;
    max_pool_out_4_we0 : OUT STD_LOGIC;
    max_pool_out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_5_ce0 : OUT STD_LOGIC;
    max_pool_out_5_we0 : OUT STD_LOGIC;
    max_pool_out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_228 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_239 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_250 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_261 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_273 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_874 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_874_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_874_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_874_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_874_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_874_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_312_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_883 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_9_fu_330_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_9_reg_890 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_9_reg_890_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_9_reg_890_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_9_reg_890_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_9_reg_890_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_9_reg_890_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_fu_344_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_fu_390_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_901 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_901_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_901_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_901_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_reg_901_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_fu_398_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_906 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal select_ln36_1_reg_906_pp0_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_906_pp0_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_906_pp0_iter4_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_906_pp0_iter5_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln29_12_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_12_reg_912 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_12_reg_912_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln29_10_fu_513_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_10_reg_922 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_fu_519_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_927 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_1_out_0_load_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln29_15_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_15_reg_939 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_15_reg_939_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln29_fu_570_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_0_load_1_reg_961 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal select_ln29_4_fu_660_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_4_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_1_load_reg_980 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal select_ln29_5_fu_749_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_5_reg_987 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_1_load_1_reg_994 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_243_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_265_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_277_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_6_fu_856_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln29_6_fu_841_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_301_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_318_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln13_fu_338_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_8_fu_352_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln29_13_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_379_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_410_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_416_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_10_fu_424_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln29_fu_410_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln29_fu_428_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_442_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_434_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_11_fu_450_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln36_fu_359_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln29_fu_454_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_8_fu_460_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln27_fu_471_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_13_fu_477_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln29_9_fu_481_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_1_fu_495_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_cast_fu_487_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_14_fu_503_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln29_1_fu_507_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln29_fu_529_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_532_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_542_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_14_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_7_fu_578_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_8_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_fu_581_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_7_fu_591_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_16_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_15_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_fu_598_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_8_fu_608_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_18_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_17_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_7_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_8_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_7_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_291_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_8_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_9_fu_667_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_10_fu_684_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_670_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_9_fu_680_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_20_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_19_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_687_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_10_fu_697_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_22_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_21_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_9_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_10_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_9_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_10_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_11_fu_759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_12_fu_776_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_762_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_11_fu_772_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_24_fu_799_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_23_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_779_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_12_fu_789_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_26_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_25_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_11_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_12_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_11_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_12_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_865_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_865_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_865_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_865_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_865_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_865_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_fu_410_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U24 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_0_q0,
        din1 => ap_const_lv32_800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_285_p2);

    cnn_fcmp_32ns_32neOg_U25 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_0_q1,
        din1 => grp_fu_291_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_291_p2);

    cnn_fcmp_32ns_32neOg_U26 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_1_q0,
        din1 => grp_fu_296_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_296_p2);

    cnn_fcmp_32ns_32neOg_U27 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_1_q1,
        din1 => grp_fu_301_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_301_p2);

    cnn_mac_muladd_5ng8j_U28 : component cnn_mac_muladd_5ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_865_p0,
        din1 => grp_fu_865_p1,
        din2 => grp_fu_865_p2,
        dout => grp_fu_865_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                c_0_reg_273 <= c_reg_927;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_273 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_239_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                f_0_reg_239 <= select_ln29_9_reg_890;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_239 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten13_reg_228 <= add_ln10_fu_312_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_228 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_250 <= select_ln13_fu_344_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_250 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                r_0_reg_261 <= select_ln36_1_reg_906;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_261 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln29_10_reg_922 <= add_ln29_10_fu_513_p2;
                select_ln36_reg_901 <= select_ln36_fu_390_p3;
                    zext_ln29_12_reg_912(11 downto 0) <= zext_ln29_12_fu_466_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                c_reg_927 <= c_fu_519_p2;
                select_ln36_1_reg_906 <= select_ln36_1_fu_398_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_1_out_0_load_1_reg_961 <= conv_1_out_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_1_out_0_load_reg_932 <= conv_1_out_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_1_out_1_load_1_reg_994 <= conv_1_out_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                conv_1_out_1_load_reg_980 <= conv_1_out_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln10_reg_874 <= icmp_ln10_fu_306_p2;
                icmp_ln10_reg_874_pp0_iter1_reg <= icmp_ln10_reg_874;
                select_ln29_9_reg_890_pp0_iter1_reg <= select_ln29_9_reg_890;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln10_reg_874_pp0_iter2_reg <= icmp_ln10_reg_874_pp0_iter1_reg;
                icmp_ln10_reg_874_pp0_iter3_reg <= icmp_ln10_reg_874_pp0_iter2_reg;
                icmp_ln10_reg_874_pp0_iter4_reg <= icmp_ln10_reg_874_pp0_iter3_reg;
                icmp_ln10_reg_874_pp0_iter5_reg <= icmp_ln10_reg_874_pp0_iter4_reg;
                select_ln29_9_reg_890_pp0_iter2_reg <= select_ln29_9_reg_890_pp0_iter1_reg;
                select_ln29_9_reg_890_pp0_iter3_reg <= select_ln29_9_reg_890_pp0_iter2_reg;
                select_ln29_9_reg_890_pp0_iter4_reg <= select_ln29_9_reg_890_pp0_iter3_reg;
                select_ln29_9_reg_890_pp0_iter5_reg <= select_ln29_9_reg_890_pp0_iter4_reg;
                select_ln36_1_reg_906_pp0_iter2_reg <= select_ln36_1_reg_906;
                select_ln36_1_reg_906_pp0_iter3_reg <= select_ln36_1_reg_906_pp0_iter2_reg;
                select_ln36_1_reg_906_pp0_iter4_reg <= select_ln36_1_reg_906_pp0_iter3_reg;
                select_ln36_1_reg_906_pp0_iter5_reg <= select_ln36_1_reg_906_pp0_iter4_reg;
                select_ln36_reg_901_pp0_iter2_reg <= select_ln36_reg_901;
                select_ln36_reg_901_pp0_iter3_reg <= select_ln36_reg_901_pp0_iter2_reg;
                select_ln36_reg_901_pp0_iter4_reg <= select_ln36_reg_901_pp0_iter3_reg;
                select_ln36_reg_901_pp0_iter5_reg <= select_ln36_reg_901_pp0_iter4_reg;
                    zext_ln29_12_reg_912_pp0_iter2_reg(11 downto 0) <= zext_ln29_12_reg_912(11 downto 0);
                    zext_ln29_15_reg_939_pp0_iter3_reg(11 downto 0) <= zext_ln29_15_reg_939(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln13_reg_883 <= icmp_ln13_fu_324_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_4_reg_973 <= select_ln29_4_fu_660_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_5_reg_987 <= select_ln29_5_fu_749_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_306_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_9_reg_890 <= select_ln29_9_fu_330_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_reg_954 <= select_ln29_fu_570_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_874_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln29_15_reg_939(11 downto 0) <= zext_ln29_15_fu_525_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_12_reg_912(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_12_reg_912_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_15_reg_939(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_15_reg_939_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_306_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_306_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1)) or ((icmp_ln10_fu_306_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_312_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_228) + unsigned(ap_const_lv10_1));
    add_ln13_fu_338_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_250) + unsigned(ap_const_lv8_1));
    add_ln29_10_fu_513_p2 <= std_logic_vector(unsigned(zext_ln36_fu_359_p1) + unsigned(sub_ln29_1_fu_507_p2));
    add_ln29_8_fu_460_p2 <= std_logic_vector(unsigned(zext_ln36_fu_359_p1) + unsigned(sub_ln29_fu_454_p2));
    add_ln29_9_fu_481_p2 <= std_logic_vector(unsigned(zext_ln29_13_fu_477_p1) + unsigned(mul_ln29_fu_410_p2));
    add_ln29_fu_428_p2 <= std_logic_vector(unsigned(zext_ln29_10_fu_424_p1) + unsigned(mul_ln29_fu_410_p2));
    and_ln29_10_fu_743_p2 <= (grp_fu_296_p2 and and_ln29_9_fu_737_p2);
    and_ln29_11_fu_829_p2 <= (or_ln29_12_fu_823_p2 and or_ln29_11_fu_805_p2);
    and_ln29_12_fu_835_p2 <= (grp_fu_301_p2 and and_ln29_11_fu_829_p2);
    and_ln29_13_fu_373_p2 <= (xor_ln29_fu_362_p2 and icmp_ln16_fu_367_p2);
    and_ln29_7_fu_648_p2 <= (or_ln29_8_fu_642_p2 and or_ln29_7_fu_624_p2);
    and_ln29_8_fu_654_p2 <= (grp_fu_291_p2 and and_ln29_7_fu_648_p2);
    and_ln29_9_fu_737_p2 <= (or_ln29_9_fu_713_p2 and or_ln29_10_fu_731_p2);
    and_ln29_fu_564_p2 <= (or_ln29_fu_558_p2 and grp_fu_285_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_306_p2)
    begin
        if ((icmp_ln10_fu_306_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_277_p4_assign_proc : process(c_0_reg_273, icmp_ln10_reg_874_pp0_iter1_reg, c_reg_927, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_277_p4 <= c_reg_927;
        else 
            ap_phi_mux_c_0_phi_fu_277_p4 <= c_0_reg_273;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_243_p4_assign_proc : process(f_0_reg_239, icmp_ln10_reg_874, ap_CS_fsm_pp0_stage0, select_ln29_9_reg_890, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_874 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_f_0_phi_fu_243_p4 <= select_ln29_9_reg_890;
        else 
            ap_phi_mux_f_0_phi_fu_243_p4 <= f_0_reg_239;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_265_p4_assign_proc : process(r_0_reg_261, icmp_ln10_reg_874_pp0_iter1_reg, select_ln36_1_reg_906, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln10_reg_874_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_265_p4 <= select_ln36_1_reg_906;
        else 
            ap_phi_mux_r_0_phi_fu_265_p4 <= r_0_reg_261;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_10_fu_684_p1 <= select_ln29_4_reg_973;
    bitcast_ln29_11_fu_759_p1 <= conv_1_out_1_load_1_reg_994;
    bitcast_ln29_12_fu_776_p1 <= select_ln29_5_reg_987;
    bitcast_ln29_7_fu_578_p1 <= conv_1_out_0_load_1_reg_961;
    bitcast_ln29_8_fu_595_p1 <= select_ln29_reg_954;
    bitcast_ln29_9_fu_667_p1 <= conv_1_out_1_load_reg_980;
    bitcast_ln29_fu_529_p1 <= conv_1_out_0_load_reg_932;
    c_fu_519_p2 <= std_logic_vector(unsigned(select_ln36_fu_390_p3) + unsigned(ap_const_lv4_1));
    conv_1_out_0_address0 <= zext_ln29_12_fu_466_p1(11 - 1 downto 0);
    conv_1_out_0_address1 <= zext_ln29_15_fu_525_p1(11 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln29_12_reg_912_pp0_iter2_reg(11 - 1 downto 0);
    conv_1_out_1_address1 <= zext_ln29_15_reg_939_pp0_iter3_reg(11 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_318_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_f_0_phi_fu_243_p4));
    grp_fu_291_p1 <= 
        conv_1_out_0_load_reg_932 when (and_ln29_fu_564_p2(0) = '1') else 
        ap_const_lv32_800000;
    grp_fu_296_p1 <= 
        conv_1_out_0_load_1_reg_961 when (and_ln29_8_fu_654_p2(0) = '1') else 
        select_ln29_reg_954;
    grp_fu_301_p1 <= 
        conv_1_out_1_load_reg_980 when (and_ln29_10_fu_743_p2(0) = '1') else 
        select_ln29_4_reg_973;
    grp_fu_865_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_865_p1 <= grp_fu_865_p10(4 - 1 downto 0);
    grp_fu_865_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_reg_906_pp0_iter5_reg),8));
    grp_fu_865_p2 <= grp_fu_865_p20(4 - 1 downto 0);
    grp_fu_865_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_901_pp0_iter5_reg),8));
    icmp_ln10_fu_306_p2 <= "1" when (indvar_flatten13_reg_228 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_324_p2 <= "1" when (indvar_flatten_reg_250 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_367_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_277_p4 = ap_const_lv4_D) else "0";
    icmp_ln29_14_fu_552_p2 <= "1" when (trunc_ln29_fu_542_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_15_fu_612_p2 <= "0" when (tmp_13_fu_581_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_16_fu_618_p2 <= "1" when (trunc_ln29_7_fu_591_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_17_fu_630_p2 <= "0" when (tmp_14_fu_598_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_18_fu_636_p2 <= "1" when (trunc_ln29_8_fu_608_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_19_fu_701_p2 <= "0" when (tmp_16_fu_670_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_20_fu_707_p2 <= "1" when (trunc_ln29_9_fu_680_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_21_fu_719_p2 <= "0" when (tmp_17_fu_687_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_22_fu_725_p2 <= "1" when (trunc_ln29_10_fu_697_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_23_fu_793_p2 <= "0" when (tmp_19_fu_762_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_24_fu_799_p2 <= "1" when (trunc_ln29_11_fu_772_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_25_fu_811_p2 <= "0" when (tmp_20_fu_779_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_26_fu_817_p2 <= "1" when (trunc_ln29_12_fu_789_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_546_p2 <= "0" when (tmp_s_fu_532_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_0_address0 <= zext_ln36_6_fu_856_p1(8 - 1 downto 0);

    max_pool_out_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_d0 <= select_ln29_6_fu_841_p3;

    max_pool_out_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln29_9_reg_890_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_0_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_address0 <= zext_ln36_6_fu_856_p1(8 - 1 downto 0);

    max_pool_out_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_d0 <= select_ln29_6_fu_841_p3;

    max_pool_out_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln29_9_reg_890_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_1_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_address0 <= zext_ln36_6_fu_856_p1(8 - 1 downto 0);

    max_pool_out_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_2_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_d0 <= select_ln29_6_fu_841_p3;

    max_pool_out_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln29_9_reg_890_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_2_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_address0 <= zext_ln36_6_fu_856_p1(8 - 1 downto 0);

    max_pool_out_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_3_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_d0 <= select_ln29_6_fu_841_p3;

    max_pool_out_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln29_9_reg_890_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_3_we0 <= ap_const_logic_1;
        else 
            max_pool_out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_address0 <= zext_ln36_6_fu_856_p1(8 - 1 downto 0);

    max_pool_out_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_4_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_d0 <= select_ln29_6_fu_841_p3;

    max_pool_out_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln29_9_reg_890_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_4_we0 <= ap_const_logic_1;
        else 
            max_pool_out_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_address0 <= zext_ln36_6_fu_856_p1(8 - 1 downto 0);

    max_pool_out_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_out_5_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_d0 <= select_ln29_6_fu_841_p3;

    max_pool_out_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, select_ln29_9_reg_890_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and ((select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_5) or ((select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_6) or (select_ln29_9_reg_890_pp0_iter5_reg = ap_const_lv3_7))))) then 
            max_pool_out_5_we0 <= ap_const_logic_1;
        else 
            max_pool_out_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_fu_410_p1 <= mul_ln29_fu_410_p10(4 - 1 downto 0);
    mul_ln29_fu_410_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_398_p3),9));
    mul_ln29_fu_410_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv9_1A) * unsigned(mul_ln29_fu_410_p1), 9));
    or_ln27_fu_471_p2 <= (shl_ln_fu_416_p3 or ap_const_lv5_1);
    or_ln29_10_fu_731_p2 <= (icmp_ln29_22_fu_725_p2 or icmp_ln29_21_fu_719_p2);
    or_ln29_11_fu_805_p2 <= (icmp_ln29_24_fu_799_p2 or icmp_ln29_23_fu_793_p2);
    or_ln29_12_fu_823_p2 <= (icmp_ln29_26_fu_817_p2 or icmp_ln29_25_fu_811_p2);
    or_ln29_7_fu_624_p2 <= (icmp_ln29_16_fu_618_p2 or icmp_ln29_15_fu_612_p2);
    or_ln29_8_fu_642_p2 <= (icmp_ln29_18_fu_636_p2 or icmp_ln29_17_fu_630_p2);
    or_ln29_9_fu_713_p2 <= (icmp_ln29_20_fu_707_p2 or icmp_ln29_19_fu_701_p2);
    or_ln29_fu_558_p2 <= (icmp_ln29_fu_546_p2 or icmp_ln29_14_fu_552_p2);
    or_ln36_fu_385_p2 <= (icmp_ln13_reg_883 or and_ln29_13_fu_373_p2);
    p_shl2_cast_fu_434_p3 <= (add_ln29_fu_428_p2 & ap_const_lv3_0);
    p_shl_cast_fu_487_p3 <= (add_ln29_9_fu_481_p2 & ap_const_lv3_0);
    r_fu_379_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_8_fu_352_p3));
    select_ln13_fu_344_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_fu_324_p2(0) = '1') else 
        add_ln13_fu_338_p2;
    select_ln29_4_fu_660_p3 <= 
        conv_1_out_0_load_1_reg_961 when (and_ln29_8_fu_654_p2(0) = '1') else 
        select_ln29_reg_954;
    select_ln29_5_fu_749_p3 <= 
        conv_1_out_1_load_reg_980 when (and_ln29_10_fu_743_p2(0) = '1') else 
        select_ln29_4_reg_973;
    select_ln29_6_fu_841_p3 <= 
        conv_1_out_1_load_1_reg_994 when (and_ln29_12_fu_835_p2(0) = '1') else 
        select_ln29_5_reg_987;
    select_ln29_8_fu_352_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_reg_883(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_265_p4;
    select_ln29_9_fu_330_p3 <= 
        f_fu_318_p2 when (icmp_ln13_fu_324_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_243_p4;
    select_ln29_fu_570_p3 <= 
        conv_1_out_0_load_reg_932 when (and_ln29_fu_564_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln36_1_fu_398_p3 <= 
        r_fu_379_p2 when (and_ln29_13_fu_373_p2(0) = '1') else 
        select_ln29_8_fu_352_p3;
    select_ln36_fu_390_p3 <= 
        ap_const_lv4_0 when (or_ln36_fu_385_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_277_p4;
    shl_ln_fu_416_p3 <= (select_ln36_fu_390_p3 & ap_const_lv1_0);
    sub_ln29_1_fu_507_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_487_p3) - unsigned(zext_ln29_14_fu_503_p1));
    sub_ln29_fu_454_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_434_p3) - unsigned(zext_ln29_11_fu_450_p1));
    tmp_13_fu_581_p4 <= bitcast_ln29_7_fu_578_p1(30 downto 23);
    tmp_14_fu_598_p4 <= bitcast_ln29_8_fu_595_p1(30 downto 23);
    tmp_16_fu_670_p4 <= bitcast_ln29_9_fu_667_p1(30 downto 23);
    tmp_17_fu_687_p4 <= bitcast_ln29_10_fu_684_p1(30 downto 23);
    tmp_19_fu_762_p4 <= bitcast_ln29_11_fu_759_p1(30 downto 23);
    tmp_1_fu_495_p3 <= (add_ln29_9_fu_481_p2 & ap_const_lv1_0);
    tmp_20_fu_779_p4 <= bitcast_ln29_12_fu_776_p1(30 downto 23);
    tmp_fu_442_p3 <= (add_ln29_fu_428_p2 & ap_const_lv1_0);
    tmp_s_fu_532_p4 <= bitcast_ln29_fu_529_p1(30 downto 23);
    trunc_ln29_10_fu_697_p1 <= bitcast_ln29_10_fu_684_p1(23 - 1 downto 0);
    trunc_ln29_11_fu_772_p1 <= bitcast_ln29_11_fu_759_p1(23 - 1 downto 0);
    trunc_ln29_12_fu_789_p1 <= bitcast_ln29_12_fu_776_p1(23 - 1 downto 0);
    trunc_ln29_7_fu_591_p1 <= bitcast_ln29_7_fu_578_p1(23 - 1 downto 0);
    trunc_ln29_8_fu_608_p1 <= bitcast_ln29_8_fu_595_p1(23 - 1 downto 0);
    trunc_ln29_9_fu_680_p1 <= bitcast_ln29_9_fu_667_p1(23 - 1 downto 0);
    trunc_ln29_fu_542_p1 <= bitcast_ln29_fu_529_p1(23 - 1 downto 0);
    xor_ln29_fu_362_p2 <= (icmp_ln13_reg_883 xor ap_const_lv1_1);
    zext_ln29_10_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_416_p3),9));
    zext_ln29_11_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_442_p3),12));
    zext_ln29_12_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_8_fu_460_p2),64));
    zext_ln29_13_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_471_p2),9));
    zext_ln29_14_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_495_p3),12));
    zext_ln29_15_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_10_reg_922),64));
    zext_ln36_6_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_865_p3),64));
    zext_ln36_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_9_reg_890),12));
end behav;
