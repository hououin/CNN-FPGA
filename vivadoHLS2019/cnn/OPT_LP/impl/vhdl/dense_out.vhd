-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_EN_A : OUT STD_LOGIC;
    prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_2_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_ce0 : OUT STD_LOGIC;
    dense_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_out_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_ce0 : STD_LOGIC;
    signal dense_out_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_out_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_ce0 : STD_LOGIC;
    signal dense_out_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_125 : STD_LOGIC_VECTOR (8 downto 0);
    signal d_0_reg_136 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_sum_0_reg_147 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_0_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln31_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln31_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln31_reg_301_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_fu_195_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln31_reg_305 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln36_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_310 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_1_fu_213_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln38_1_reg_315 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln38_2_fu_221_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln38_2_reg_320 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln38_2_reg_320_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_346 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal f_fu_279_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_351 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln38_fu_284_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln36_1_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_362 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_362_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_1_reg_362_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln38_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_366 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_366_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_reg_371 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_ce0 : STD_LOGIC;
    signal dense_array_we0 : STD_LOGIC;
    signal dense_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_170_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_170_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_170_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_170_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_170_dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_170_dense_array_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_170_prediction_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_170_prediction_EN_A : STD_LOGIC;
    signal grp_soft_max_fu_170_prediction_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_170_prediction_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_129_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_d_0_phi_fu_140_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_w_sum_0_phi_fu_151_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_f_0_phi_fu_163_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_soft_max_fu_170_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln38_4_fu_274_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_177_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_177_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_201_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_238_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_250_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_3_fu_258_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_2_fu_246_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_fu_262_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln37_fu_229_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_1_fu_268_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_ce0 : OUT STD_LOGIC;
        dense_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_EN_A : OUT STD_LOGIC;
        prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_obdk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_obek IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_abfk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_out_bias_U : component dense_out_dense_obdk
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_address0,
        ce0 => dense_out_bias_ce0,
        q0 => dense_out_bias_q0);

    dense_out_weights_U : component dense_out_dense_obek
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_address0,
        ce0 => dense_out_weights_ce0,
        q0 => dense_out_weights_q0);

    dense_array_U : component dense_out_dense_abfk
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_address0,
        ce0 => dense_array_ce0,
        we0 => dense_array_we0,
        d0 => grp_fu_177_p2,
        q0 => dense_array_q0);

    grp_soft_max_fu_170 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_170_ap_start,
        ap_done => grp_soft_max_fu_170_ap_done,
        ap_idle => grp_soft_max_fu_170_ap_idle,
        ap_ready => grp_soft_max_fu_170_ap_ready,
        dense_array_address0 => grp_soft_max_fu_170_dense_array_address0,
        dense_array_ce0 => grp_soft_max_fu_170_dense_array_ce0,
        dense_array_q0 => dense_array_q0,
        prediction_Addr_A => grp_soft_max_fu_170_prediction_Addr_A,
        prediction_EN_A => grp_soft_max_fu_170_prediction_EN_A,
        prediction_WEN_A => grp_soft_max_fu_170_prediction_WEN_A,
        prediction_Din_A => grp_soft_max_fu_170_prediction_Din_A,
        prediction_Dout_A => ap_const_lv32_0);

    cnn_fadd_32ns_32ncud_U146 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_177_p0,
        din1 => grp_fu_177_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_177_p2);

    cnn_fmul_32ns_32ndEe_U147 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_out_weights_q0,
        din1 => dense_2_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_183_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_170_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_170_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                    grp_soft_max_fu_170_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_170_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_170_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                d_0_reg_136 <= select_ln38_2_reg_320;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_0_reg_136 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_159 <= f_reg_351;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_159 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_125_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_125 <= add_ln31_reg_305;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_125 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_301_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                w_sum_0_reg_147 <= grp_fu_177_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_0_reg_147 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln31_reg_305 <= add_ln31_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                f_reg_351 <= f_fu_279_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln31_reg_301 <= icmp_ln31_fu_189_p2;
                icmp_ln31_reg_301_pp0_iter1_reg <= icmp_ln31_reg_301;
                icmp_ln36_1_reg_362_pp0_iter2_reg <= icmp_ln36_1_reg_362;
                icmp_ln36_1_reg_362_pp0_iter3_reg <= icmp_ln36_1_reg_362_pp0_iter2_reg;
                select_ln38_2_reg_320_pp0_iter1_reg <= select_ln38_2_reg_320;
                    zext_ln38_reg_366_pp0_iter3_reg(3 downto 0) <= zext_ln38_reg_366(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln36_1_reg_362 <= icmp_ln36_1_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_fu_189_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln36_reg_310 <= icmp_ln36_fu_207_p2;
                select_ln38_1_reg_315 <= select_ln38_1_fu_213_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln31_fu_189_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln38_2_reg_320 <= select_ln38_2_fu_221_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_4_reg_346 <= grp_fu_183_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_301_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                w_sum_reg_371 <= grp_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_reg_301_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln38_reg_366(3 downto 0) <= zext_ln38_fu_297_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln38_reg_366(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln38_reg_366_pp0_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln31_fu_189_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter3, grp_soft_max_fu_170_ap_done, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln31_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln31_fu_189_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((grp_soft_max_fu_170_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln31_fu_195_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_129_p4) + unsigned(ap_const_lv9_1));
    add_ln38_1_fu_268_p2 <= std_logic_vector(unsigned(add_ln38_fu_262_p2) + unsigned(zext_ln37_fu_229_p1));
    add_ln38_fu_262_p2 <= std_logic_vector(unsigned(zext_ln38_3_fu_258_p1) + unsigned(zext_ln38_2_fu_246_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(4);
    ap_CS_fsm_state14 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln31_fu_189_p2)
    begin
        if ((icmp_ln31_fu_189_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_170_ap_done, ap_CS_fsm_state14)
    begin
        if ((((grp_soft_max_fu_170_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_d_0_phi_fu_140_p4_assign_proc : process(d_0_reg_136, icmp_ln31_reg_301, ap_CS_fsm_pp0_stage0, select_ln38_2_reg_320, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_d_0_phi_fu_140_p4 <= select_ln38_2_reg_320;
        else 
            ap_phi_mux_d_0_phi_fu_140_p4 <= d_0_reg_136;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_163_p4_assign_proc : process(f_0_reg_159, icmp_ln31_reg_301, ap_CS_fsm_pp0_stage0, f_reg_351, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_f_0_phi_fu_163_p4 <= f_reg_351;
        else 
            ap_phi_mux_f_0_phi_fu_163_p4 <= f_0_reg_159;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_129_p4_assign_proc : process(indvar_flatten_reg_125, icmp_ln31_reg_301, ap_CS_fsm_pp0_stage0, add_ln31_reg_305, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_301 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_129_p4 <= add_ln31_reg_305;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_129_p4 <= indvar_flatten_reg_125;
        end if; 
    end process;


    ap_phi_mux_w_sum_0_phi_fu_151_p4_assign_proc : process(w_sum_0_reg_147, ap_CS_fsm_pp0_stage0, icmp_ln31_reg_301_pp0_iter1_reg, grp_fu_177_p2, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln31_reg_301_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            ap_phi_mux_w_sum_0_phi_fu_151_p4 <= grp_fu_177_p2;
        else 
            ap_phi_mux_w_sum_0_phi_fu_151_p4 <= w_sum_0_reg_147;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_soft_max_fu_170_ap_done, ap_CS_fsm_state14)
    begin
        if (((grp_soft_max_fu_170_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_201_p2 <= std_logic_vector(unsigned(ap_phi_mux_d_0_phi_fu_140_p4) + unsigned(ap_const_lv4_1));
    dense_2_out_address0 <= zext_ln38_1_fu_233_p1(5 - 1 downto 0);

    dense_2_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_2_out_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, zext_ln38_reg_366_pp0_iter3_reg, ap_enable_reg_pp0_iter3, grp_soft_max_fu_170_dense_array_address0, ap_CS_fsm_state14, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dense_array_address0 <= zext_ln38_reg_366_pp0_iter3_reg(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_array_address0 <= grp_soft_max_fu_170_dense_array_address0;
        else 
            dense_array_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter3, grp_soft_max_fu_170_dense_array_ce0, ap_CS_fsm_state14)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dense_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_array_ce0 <= grp_soft_max_fu_170_dense_array_ce0;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln36_1_reg_362_pp0_iter3_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln36_1_reg_362_pp0_iter3_reg = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            dense_array_we0 <= ap_const_logic_1;
        else 
            dense_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_address0 <= zext_ln38_fu_297_p1(4 - 1 downto 0);

    dense_out_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            dense_out_bias_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_address0 <= zext_ln38_4_fu_274_p1(9 - 1 downto 0);

    dense_out_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_out_weights_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_279_p2 <= std_logic_vector(unsigned(select_ln38_1_reg_315) + unsigned(ap_const_lv5_1));

    grp_fu_177_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, select_ln38_fu_284_p3, w_sum_reg_371, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_177_p0 <= w_sum_reg_371;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_177_p0 <= select_ln38_fu_284_p3;
        else 
            grp_fu_177_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_177_p1_assign_proc : process(dense_out_bias_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_4_reg_346, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_177_p1 <= dense_out_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_177_p1 <= tmp_4_reg_346;
        else 
            grp_fu_177_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_soft_max_fu_170_ap_start <= grp_soft_max_fu_170_ap_start_reg;
    icmp_ln31_fu_189_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_129_p4 = ap_const_lv9_12C) else "0";
    icmp_ln36_1_fu_292_p2 <= "1" when (f_reg_351 = ap_const_lv5_1E) else "0";
    icmp_ln36_fu_207_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_163_p4 = ap_const_lv5_1E) else "0";
    prediction_Addr_A <= grp_soft_max_fu_170_prediction_Addr_A;
    prediction_Din_A <= grp_soft_max_fu_170_prediction_Din_A;
    prediction_EN_A <= grp_soft_max_fu_170_prediction_EN_A;
    prediction_WEN_A <= grp_soft_max_fu_170_prediction_WEN_A;
    select_ln38_1_fu_213_p3 <= 
        ap_const_lv5_0 when (icmp_ln36_fu_207_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_163_p4;
    select_ln38_2_fu_221_p3 <= 
        d_fu_201_p2 when (icmp_ln36_fu_207_p2(0) = '1') else 
        ap_phi_mux_d_0_phi_fu_140_p4;
    select_ln38_fu_284_p3 <= 
        ap_const_lv32_0 when (icmp_ln36_reg_310(0) = '1') else 
        ap_phi_mux_w_sum_0_phi_fu_151_p4;
    tmp_22_fu_250_p3 <= (select_ln38_1_fu_213_p3 & ap_const_lv1_0);
    tmp_s_fu_238_p3 <= (select_ln38_1_fu_213_p3 & ap_const_lv3_0);
    zext_ln37_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_2_fu_221_p3),9));
    zext_ln38_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_1_fu_213_p3),64));
    zext_ln38_2_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_238_p3),9));
    zext_ln38_3_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_250_p3),9));
    zext_ln38_4_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_fu_268_p2),64));
    zext_ln38_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_2_reg_320_pp0_iter1_reg),64));
end behav;
