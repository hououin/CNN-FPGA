-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_0_ce0 : OUT STD_LOGIC;
    max_pool_out_0_we0 : OUT STD_LOGIC;
    max_pool_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_1_ce0 : OUT STD_LOGIC;
    max_pool_out_1_we0 : OUT STD_LOGIC;
    max_pool_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_2_ce0 : OUT STD_LOGIC;
    max_pool_out_2_we0 : OUT STD_LOGIC;
    max_pool_out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_3_ce0 : OUT STD_LOGIC;
    max_pool_out_3_we0 : OUT STD_LOGIC;
    max_pool_out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_4_ce0 : OUT STD_LOGIC;
    max_pool_out_4_we0 : OUT STD_LOGIC;
    max_pool_out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_5_ce0 : OUT STD_LOGIC;
    max_pool_out_5_we0 : OUT STD_LOGIC;
    max_pool_out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_1_out_ce0 : OUT STD_LOGIC;
    conv_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_1_out_ce1 : OUT STD_LOGIC;
    conv_1_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal max_0_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_287 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln10_fu_310_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_reg_790 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln13_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_6_fu_336_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_6_reg_800 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln26_fu_344_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_reg_805 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln13_fu_394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_reg_811 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_6_fu_410_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_6_reg_817 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_7_fu_418_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_7_reg_822 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln36_fu_430_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln36_reg_827 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln27_fu_444_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln27_reg_832 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln20_1_fu_454_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln20_1_reg_837 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln20_fu_458_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_842 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_842_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_464_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_846 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal conv_1_out_load_reg_861 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_1_out_load_1_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_fu_654_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_875 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_fu_744_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal c_fu_768_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal select_ln13_8_fu_779_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten17_reg_213 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_224 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_235 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_247 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_258 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_max_0_phi_fu_279_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_mpr_0_phi_fu_291_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln29_4_fu_525_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_6_fu_566_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_5_fu_758_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_298_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_298_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_316_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_348_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_5_fu_328_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln29_7_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_382_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln26_mid1_fu_402_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_7_fu_356_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln36_fu_430_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_436_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_470_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_474_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_483_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_483_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_489_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_502_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_494_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_3_fu_510_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_514_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_4_fu_520_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_5_fu_530_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_543_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_535_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_5_fu_551_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_1_fu_555_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_6_fu_561_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_571_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_4_fu_588_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_574_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_584_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_8_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_592_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_fu_602_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_10_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_9_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_4_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_5_fu_662_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_6_fu_679_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_665_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_5_fu_675_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_12_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_11_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_682_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_6_fu_692_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_14_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_13_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_5_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_6_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_5_fu_732_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_6_fu_738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_4_fu_750_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_753_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_2_fu_773_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_fu_483_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln36_fu_430_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fcmp_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32ndEe_U49 : component cnn_fcmp_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_298_p0,
        din1 => grp_fu_298_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_298_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                c_0_reg_258 <= c_fu_768_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_258 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                f_0_reg_224 <= select_ln29_6_reg_800;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_224 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten17_reg_213 <= add_ln10_reg_790;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten17_reg_213 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                indvar_flatten_reg_235 <= select_ln13_8_fu_779_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_235 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    max_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_842_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                max_0_reg_269 <= select_ln29_2_fu_744_p3;
            elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_0_reg_269 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_287_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_842 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                mpr_0_reg_287 <= mpr_reg_846;
            elsif (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_287 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                r_0_reg_247 <= select_ln13_7_reg_822;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_247 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln10_reg_790 <= add_ln10_fu_310_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_out_load_1_reg_868 <= conv_1_out_q1;
                conv_1_out_load_reg_861 <= conv_1_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_304_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                icmp_ln13_reg_795 <= icmp_ln13_fu_322_p2;
                mul_ln36_reg_827 <= mul_ln36_fu_430_p2;
                    select_ln13_6_reg_817(4 downto 1) <= select_ln13_6_fu_410_p3(4 downto 1);
                select_ln13_7_reg_822 <= select_ln13_7_fu_418_p3;
                select_ln13_reg_811 <= select_ln13_fu_394_p3;
                select_ln29_6_reg_800 <= select_ln29_6_fu_336_p3;
                    zext_ln20_1_reg_837(4 downto 1) <= zext_ln20_1_fu_454_p1(4 downto 1);
                    zext_ln26_reg_805(2 downto 0) <= zext_ln26_fu_344_p1(2 downto 0);
                    zext_ln27_reg_832(4 downto 1) <= zext_ln27_fu_444_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln20_reg_842 <= icmp_ln20_fu_458_p2;
                icmp_ln20_reg_842_pp0_iter1_reg <= icmp_ln20_reg_842;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mpr_reg_846 <= mpr_fu_464_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_842 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_reg_875 <= select_ln29_fu_654_p3;
            end if;
        end if;
    end process;
    zext_ln26_reg_805(12 downto 3) <= "0000000000";
    select_ln13_6_reg_817(0) <= '0';
    zext_ln27_reg_832(0) <= '0';
    zext_ln27_reg_832(9 downto 5) <= "00000";
    zext_ln20_1_reg_837(0) <= '1';
    zext_ln20_1_reg_837(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_304_p2, ap_CS_fsm_state2, icmp_ln20_fu_458_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln20_fu_458_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln20_fu_458_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln10_fu_310_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_213) + unsigned(ap_const_lv10_1));
    add_ln13_2_fu_773_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_235) + unsigned(ap_const_lv8_1));
    add_ln29_4_fu_520_p2 <= std_logic_vector(unsigned(sub_ln29_fu_514_p2) + unsigned(zext_ln26_reg_805));
    add_ln29_5_fu_530_p2 <= std_logic_vector(unsigned(mul_ln29_fu_483_p2) + unsigned(zext_ln20_1_reg_837));
    add_ln29_6_fu_561_p2 <= std_logic_vector(unsigned(sub_ln29_1_fu_555_p2) + unsigned(zext_ln26_reg_805));
    add_ln29_fu_489_p2 <= std_logic_vector(unsigned(mul_ln29_fu_483_p2) + unsigned(zext_ln27_reg_832));
    add_ln36_fu_753_p2 <= std_logic_vector(unsigned(mul_ln36_reg_827) + unsigned(zext_ln36_4_fu_750_p1));
    and_ln29_4_fu_648_p2 <= (grp_fu_298_p2 and and_ln29_fu_642_p2);
    and_ln29_5_fu_732_p2 <= (or_ln29_6_fu_726_p2 and or_ln29_5_fu_708_p2);
    and_ln29_6_fu_738_p2 <= (grp_fu_298_p2 and and_ln29_5_fu_732_p2);
    and_ln29_7_fu_376_p2 <= (xor_ln29_fu_364_p2 and icmp_ln16_fu_370_p2);
    and_ln29_fu_642_p2 <= (or_ln29_fu_618_p2 and or_ln29_4_fu_636_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln20_fu_458_p2)
    begin
        if ((icmp_ln20_fu_458_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln10_fu_304_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln10_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_max_0_phi_fu_279_p4_assign_proc : process(max_0_reg_269, icmp_ln20_reg_842_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln29_2_fu_744_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln20_reg_842_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            ap_phi_mux_max_0_phi_fu_279_p4 <= select_ln29_2_fu_744_p3;
        else 
            ap_phi_mux_max_0_phi_fu_279_p4 <= max_0_reg_269;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_291_p4_assign_proc : process(mpr_0_reg_287, icmp_ln20_reg_842, ap_CS_fsm_pp0_stage0, mpr_reg_846, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln20_reg_842 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_291_p4 <= mpr_reg_846;
        else 
            ap_phi_mux_mpr_0_phi_fu_291_p4 <= mpr_0_reg_287;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln10_fu_304_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln10_fu_304_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_4_fu_588_p1 <= max_0_reg_269;
    bitcast_ln29_5_fu_662_p1 <= conv_1_out_load_1_reg_868;
    bitcast_ln29_6_fu_679_p1 <= select_ln29_reg_875;
    bitcast_ln29_fu_571_p1 <= conv_1_out_load_reg_861;
    c_fu_768_p2 <= std_logic_vector(unsigned(select_ln13_reg_811) + unsigned(ap_const_lv4_1));
    conv_1_out_address0 <= zext_ln29_4_fu_525_p1(12 - 1 downto 0);
    conv_1_out_address1 <= zext_ln29_6_fu_566_p1(12 - 1 downto 0);

    conv_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_out_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_316_p2 <= std_logic_vector(unsigned(f_0_reg_224) + unsigned(ap_const_lv3_1));

    grp_fu_298_p0_assign_proc : process(conv_1_out_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, conv_1_out_load_1_reg_868, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_298_p0 <= conv_1_out_load_1_reg_868;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_298_p0 <= conv_1_out_q0;
        else 
            grp_fu_298_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_298_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln29_fu_654_p3, ap_enable_reg_pp0_iter1, ap_phi_mux_max_0_phi_fu_279_p4, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_298_p1 <= select_ln29_fu_654_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_298_p1 <= ap_phi_mux_max_0_phi_fu_279_p4;
        else 
            grp_fu_298_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_474_p2 <= std_logic_vector(unsigned(zext_ln20_fu_470_p1) + unsigned(select_ln13_6_reg_817));
    icmp_ln10_fu_304_p2 <= "1" when (indvar_flatten17_reg_213 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_322_p2 <= "1" when (indvar_flatten_reg_235 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_370_p2 <= "1" when (c_0_reg_258 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_458_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_291_p4 = ap_const_lv2_2) else "0";
    icmp_ln29_10_fu_630_p2 <= "1" when (trunc_ln29_4_fu_602_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_11_fu_696_p2 <= "0" when (tmp_3_fu_665_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_12_fu_702_p2 <= "1" when (trunc_ln29_5_fu_675_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_13_fu_714_p2 <= "0" when (tmp_4_fu_682_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_14_fu_720_p2 <= "1" when (trunc_ln29_6_fu_692_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_8_fu_612_p2 <= "1" when (trunc_ln29_fu_584_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_9_fu_624_p2 <= "0" when (tmp_1_fu_592_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_fu_606_p2 <= "0" when (tmp_s_fu_574_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_0_address0 <= zext_ln36_5_fu_758_p1(8 - 1 downto 0);

    max_pool_out_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_d0 <= max_0_reg_269;

    max_pool_out_0_we0_assign_proc : process(select_ln29_6_reg_800, ap_CS_fsm_state7)
    begin
        if (((select_ln29_6_reg_800 = ap_const_lv3_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_out_0_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_address0 <= zext_ln36_5_fu_758_p1(8 - 1 downto 0);

    max_pool_out_1_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_d0 <= max_0_reg_269;

    max_pool_out_1_we0_assign_proc : process(select_ln29_6_reg_800, ap_CS_fsm_state7)
    begin
        if (((select_ln29_6_reg_800 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_out_1_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_address0 <= zext_ln36_5_fu_758_p1(8 - 1 downto 0);

    max_pool_out_2_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_2_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_d0 <= max_0_reg_269;

    max_pool_out_2_we0_assign_proc : process(select_ln29_6_reg_800, ap_CS_fsm_state7)
    begin
        if (((select_ln29_6_reg_800 = ap_const_lv3_2) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_out_2_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_address0 <= zext_ln36_5_fu_758_p1(8 - 1 downto 0);

    max_pool_out_3_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_3_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_d0 <= max_0_reg_269;

    max_pool_out_3_we0_assign_proc : process(select_ln29_6_reg_800, ap_CS_fsm_state7)
    begin
        if (((select_ln29_6_reg_800 = ap_const_lv3_3) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_out_3_we0 <= ap_const_logic_1;
        else 
            max_pool_out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_address0 <= zext_ln36_5_fu_758_p1(8 - 1 downto 0);

    max_pool_out_4_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_4_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_d0 <= max_0_reg_269;

    max_pool_out_4_we0_assign_proc : process(select_ln29_6_reg_800, ap_CS_fsm_state7)
    begin
        if (((select_ln29_6_reg_800 = ap_const_lv3_4) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            max_pool_out_4_we0 <= ap_const_logic_1;
        else 
            max_pool_out_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_address0 <= zext_ln36_5_fu_758_p1(8 - 1 downto 0);

    max_pool_out_5_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_out_5_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_d0 <= max_0_reg_269;

    max_pool_out_5_we0_assign_proc : process(select_ln29_6_reg_800, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((select_ln29_6_reg_800 = ap_const_lv3_5) or ((select_ln29_6_reg_800 = ap_const_lv3_6) or (select_ln29_6_reg_800 = ap_const_lv3_7))))) then 
            max_pool_out_5_we0 <= ap_const_logic_1;
        else 
            max_pool_out_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_464_p2 <= std_logic_vector(unsigned(ap_phi_mux_mpr_0_phi_fu_291_p4) + unsigned(ap_const_lv2_1));
    mul_ln29_fu_483_p1 <= mul_ln29_fu_483_p10(5 - 1 downto 0);
    mul_ln29_fu_483_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_474_p2),10));
    mul_ln29_fu_483_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln29_fu_483_p1), 10));
    mul_ln36_fu_430_p0 <= mul_ln36_fu_430_p00(4 - 1 downto 0);
    mul_ln36_fu_430_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_7_fu_418_p3),8));
    mul_ln36_fu_430_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln36_fu_430_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln13_fu_388_p2 <= (icmp_ln13_fu_322_p2 or and_ln29_7_fu_376_p2);
    or_ln27_fu_448_p2 <= (shl_ln2_fu_436_p3 or ap_const_lv5_1);
    or_ln29_4_fu_636_p2 <= (icmp_ln29_9_fu_624_p2 or icmp_ln29_10_fu_630_p2);
    or_ln29_5_fu_708_p2 <= (icmp_ln29_12_fu_702_p2 or icmp_ln29_11_fu_696_p2);
    or_ln29_6_fu_726_p2 <= (icmp_ln29_14_fu_720_p2 or icmp_ln29_13_fu_714_p2);
    or_ln29_fu_618_p2 <= (icmp_ln29_fu_606_p2 or icmp_ln29_8_fu_612_p2);
    p_shl2_cast_fu_494_p3 <= (add_ln29_fu_489_p2 & ap_const_lv3_0);
    p_shl_cast_fu_535_p3 <= (add_ln29_5_fu_530_p2 & ap_const_lv3_0);
    r_fu_382_p2 <= std_logic_vector(unsigned(select_ln29_5_fu_328_p3) + unsigned(ap_const_lv4_1));
    select_ln13_6_fu_410_p3 <= 
        shl_ln26_mid1_fu_402_p3 when (and_ln29_7_fu_376_p2(0) = '1') else 
        select_ln29_7_fu_356_p3;
    select_ln13_7_fu_418_p3 <= 
        r_fu_382_p2 when (and_ln29_7_fu_376_p2(0) = '1') else 
        select_ln29_5_fu_328_p3;
    select_ln13_8_fu_779_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_reg_795(0) = '1') else 
        add_ln13_2_fu_773_p2;
    select_ln13_fu_394_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_388_p2(0) = '1') else 
        c_0_reg_258;
    select_ln29_2_fu_744_p3 <= 
        conv_1_out_load_1_reg_868 when (and_ln29_6_fu_738_p2(0) = '1') else 
        select_ln29_reg_875;
    select_ln29_5_fu_328_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_322_p2(0) = '1') else 
        r_0_reg_247;
    select_ln29_6_fu_336_p3 <= 
        f_fu_316_p2 when (icmp_ln13_fu_322_p2(0) = '1') else 
        f_0_reg_224;
    select_ln29_7_fu_356_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_fu_322_p2(0) = '1') else 
        shl_ln_fu_348_p3;
    select_ln29_fu_654_p3 <= 
        conv_1_out_load_reg_861 when (and_ln29_4_fu_648_p2(0) = '1') else 
        max_0_reg_269;
    shl_ln26_mid1_fu_402_p3 <= (r_fu_382_p2 & ap_const_lv1_0);
    shl_ln2_fu_436_p3 <= (select_ln13_fu_394_p3 & ap_const_lv1_0);
    shl_ln_fu_348_p3 <= (r_0_reg_247 & ap_const_lv1_0);
    sub_ln29_1_fu_555_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_535_p3) - unsigned(zext_ln29_5_fu_551_p1));
    sub_ln29_fu_514_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_494_p3) - unsigned(zext_ln29_3_fu_510_p1));
    tmp_1_fu_592_p4 <= bitcast_ln29_4_fu_588_p1(30 downto 23);
    tmp_3_fu_665_p4 <= bitcast_ln29_5_fu_662_p1(30 downto 23);
    tmp_4_fu_682_p4 <= bitcast_ln29_6_fu_679_p1(30 downto 23);
    tmp_6_fu_543_p3 <= (add_ln29_5_fu_530_p2 & ap_const_lv1_0);
    tmp_fu_502_p3 <= (add_ln29_fu_489_p2 & ap_const_lv1_0);
    tmp_s_fu_574_p4 <= bitcast_ln29_fu_571_p1(30 downto 23);
    trunc_ln29_4_fu_602_p1 <= bitcast_ln29_4_fu_588_p1(23 - 1 downto 0);
    trunc_ln29_5_fu_675_p1 <= bitcast_ln29_5_fu_662_p1(23 - 1 downto 0);
    trunc_ln29_6_fu_692_p1 <= bitcast_ln29_6_fu_679_p1(23 - 1 downto 0);
    trunc_ln29_fu_584_p1 <= bitcast_ln29_fu_571_p1(23 - 1 downto 0);
    xor_ln29_fu_364_p2 <= (icmp_ln13_fu_322_p2 xor ap_const_lv1_1);
    zext_ln20_1_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_448_p2),10));
    zext_ln20_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_mpr_0_phi_fu_291_p4),5));
    zext_ln26_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_6_fu_336_p3),13));
    zext_ln27_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_436_p3),10));
    zext_ln29_3_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_502_p3),13));
    zext_ln29_4_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_4_fu_520_p2),64));
    zext_ln29_5_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_543_p3),13));
    zext_ln29_6_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_6_fu_561_p2),64));
    zext_ln36_4_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_811),8));
    zext_ln36_5_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_753_p2),64));
end behav;
