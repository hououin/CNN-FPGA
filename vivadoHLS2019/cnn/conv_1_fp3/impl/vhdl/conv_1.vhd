-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv12_FD8 : STD_LOGIC_VECTOR (11 downto 0) := "111111011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_0_1_ce0 : STD_LOGIC;
    signal conv_1_weights_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_0_2_ce0 : STD_LOGIC;
    signal conv_1_weights_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_1_1_ce0 : STD_LOGIC;
    signal conv_1_weights_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_1_2_ce0 : STD_LOGIC;
    signal conv_1_weights_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_2_1_ce0 : STD_LOGIC;
    signal conv_1_weights_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_2_2_ce0 : STD_LOGIC;
    signal conv_1_weights_2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten30_reg_330 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_0_reg_341 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_353 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_365 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_376 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state28_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state38_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state43_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_923 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state24_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state29_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state34_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state39_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state44_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_state25_pp0_stage3_iter4 : BOOLEAN;
    signal ap_block_state30_pp0_stage3_iter5 : BOOLEAN;
    signal ap_block_state35_pp0_stage3_iter6 : BOOLEAN;
    signal ap_block_state40_pp0_stage3_iter7 : BOOLEAN;
    signal ap_block_state45_pp0_stage3_iter8 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_state26_pp0_stage4_iter4 : BOOLEAN;
    signal ap_block_state31_pp0_stage4_iter5 : BOOLEAN;
    signal ap_block_state36_pp0_stage4_iter6 : BOOLEAN;
    signal ap_block_state41_pp0_stage4_iter7 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_392_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_424 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal icmp_ln8_reg_923_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal icmp_ln8_reg_923_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_918 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln8_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_923_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_923_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_923_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_923_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_923_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_923_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_454_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln8_reg_927 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_932 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_474_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_939_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln23_fu_506_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_reg_945 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_6_fu_558_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_6_reg_950_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_fu_566_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter5_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter6_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter7_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_reg_956_pp0_iter8_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_2_fu_574_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_2_reg_962 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_4_fu_603_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_4_reg_973 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_9_fu_624_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_9_reg_984 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_989_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sub_ln23_1_fu_681_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_1_reg_1039 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln30_fu_694_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_reg_1045 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_5_fu_710_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_5_reg_1056 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_1_weights_0_2_l_reg_1077 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_l_reg_1082 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_l_reg_1087 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_l_reg_1092 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_l_reg_1097 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_l_reg_1102 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_l_reg_1107 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_fu_723_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_reg_1112 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln23_6_fu_757_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_6_reg_1117 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_10_fu_771_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_10_reg_1127 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_14_fu_785_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_14_reg_1137 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_396_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1142 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_1_reg_1147 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_2_reg_1162 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_2_reg_1162_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1167 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1167_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1167_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1177 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1177_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1177_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1182 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1182_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1182_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1182_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_802_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_1187 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_fu_807_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_reg_1192 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1197_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1197_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1197_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1197_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1202 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1202_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1202_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1202_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1202_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1202_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_reg_1207 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1212 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1212_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1212_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1212_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1212_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1212_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_0_1_reg_1217 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal w_sum_4_0_2_reg_1222 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_1_reg_1227 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal w_sum_4_1_1_reg_1232 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal w_sum_4_1_2_reg_1237 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal w_sum_4_2_reg_1242 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal w_sum_4_2_1_reg_1247 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_load_reg_1257 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten30_phi_fu_334_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_345_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_357_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_c_0_phi_fu_369_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_f_0_phi_fu_380_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln23_7_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_9_fu_613_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_8_fu_705_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln23_11_fu_718_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_10_fu_766_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln23_12_fu_780_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal sext_ln23_1_fu_794_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_13_fu_798_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln30_7_fu_852_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_387_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_387_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_392_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_396_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_402_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_11_fu_482_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_494_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_1_fu_490_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_2_fu_502_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_436_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_1_fu_442_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_534_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_466_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln30_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_3_fu_546_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_4_fu_578_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_7_fu_589_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_4_fu_512_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_8_fu_595_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_8_fu_607_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_11_fu_618_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_5_fu_520_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_645_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_2_fu_651_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_657_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_669_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_3_fu_665_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_4_fu_677_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln30_3_fu_687_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_5_fu_700_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_12_fu_713_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_9_fu_729_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_740_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_5_fu_736_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_6_fu_747_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_2_fu_751_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_9_fu_762_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_13_fu_776_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_908_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_826_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_819_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_3_fu_833_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln30_fu_837_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_6_fu_843_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln30_2_fu_846_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_857_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_861_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_871_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_881_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_875_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_908_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_908_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_908_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage2_00001 : BOOLEAN;
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_908_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_908_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fadd_32ns_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_6nncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_address0,
        ce0 => conv_1_weights_0_0_ce0,
        q0 => conv_1_weights_0_0_q0);

    conv_1_weights_0_1_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_1_address0,
        ce0 => conv_1_weights_0_1_ce0,
        q0 => conv_1_weights_0_1_q0);

    conv_1_weights_0_2_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_2_address0,
        ce0 => conv_1_weights_0_2_ce0,
        q0 => conv_1_weights_0_2_q0);

    conv_1_weights_1_0_U : component conv_1_conv_1_weieOg
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_address0,
        ce0 => conv_1_weights_1_0_ce0,
        q0 => conv_1_weights_1_0_q0);

    conv_1_weights_1_1_U : component conv_1_conv_1_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_1_address0,
        ce0 => conv_1_weights_1_1_ce0,
        q0 => conv_1_weights_1_1_q0);

    conv_1_weights_1_2_U : component conv_1_conv_1_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_2_address0,
        ce0 => conv_1_weights_1_2_ce0,
        q0 => conv_1_weights_1_2_q0);

    conv_1_weights_2_0_U : component conv_1_conv_1_weihbi
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_address0,
        ce0 => conv_1_weights_2_0_ce0,
        q0 => conv_1_weights_2_0_q0);

    conv_1_weights_2_1_U : component conv_1_conv_1_weiibs
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_1_address0,
        ce0 => conv_1_weights_2_1_ce0,
        q0 => conv_1_weights_2_1_q0);

    conv_1_weights_2_2_U : component conv_1_conv_1_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_2_address0,
        ce0 => conv_1_weights_2_2_ce0,
        q0 => conv_1_weights_2_2_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    cnn_fadd_32ns_32nkbM_U1 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_387_p0,
        din1 => grp_fu_387_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_387_p2);

    cnn_fadd_32ns_32nkbM_U2 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p0,
        din1 => grp_fu_392_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_392_p2);

    cnn_fmul_32ns_32nlbW_U3 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_396_p0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_396_p2);

    cnn_fmul_32ns_32nlbW_U4 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_402_p0,
        din1 => input_r_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_402_p2);

    cnn_fcmp_32ns_32nmb6_U5 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_392_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_408_p2);

    cnn_mac_muladd_6nncg_U6 : component cnn_mac_muladd_6nncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_908_p0,
        din1 => grp_fu_908_p1,
        din2 => grp_fu_908_p2,
        dout => grp_fu_908_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
                c_0_reg_365 <= select_ln30_7_reg_956;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_365 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_376_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
                f_0_reg_376 <= f_reg_1187;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_376 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten30_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
                indvar_flatten30_reg_330 <= add_ln8_reg_927;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten30_reg_330 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_353_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
                indvar_flatten_reg_353 <= select_ln11_reg_1192;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_353 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_341_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
                r_0_reg_341 <= select_ln30_1_reg_939;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_341 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln11_reg_932 = ap_const_lv1_0) and (icmp_ln8_reg_923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln11_reg_1112 <= add_ln11_fu_723_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then
                add_ln23_10_reg_1127 <= add_ln23_10_fu_771_p2;
                add_ln23_14_reg_1137 <= add_ln23_14_fu_785_p2;
                add_ln23_6_reg_1117 <= add_ln23_6_fu_757_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_923 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln30_reg_1045 <= add_ln30_fu_694_p2;
                conv_1_weights_0_2_l_reg_1077 <= conv_1_weights_0_2_q0;
                conv_1_weights_1_0_l_reg_1082 <= conv_1_weights_1_0_q0;
                conv_1_weights_1_1_l_reg_1087 <= conv_1_weights_1_1_q0;
                conv_1_weights_1_2_l_reg_1092 <= conv_1_weights_1_2_q0;
                conv_1_weights_2_0_l_reg_1097 <= conv_1_weights_2_0_q0;
                conv_1_weights_2_1_l_reg_1102 <= conv_1_weights_2_1_q0;
                conv_1_weights_2_2_l_reg_1107 <= conv_1_weights_2_2_q0;
                    sub_ln23_1_reg_1039(10 downto 2) <= sub_ln23_1_fu_681_p2(10 downto 2);
                    zext_ln30_5_reg_1056(4 downto 0) <= zext_ln30_5_fu_710_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln8_reg_927 <= add_ln8_fu_454_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_923_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_bias_load_reg_1257 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then
                f_reg_1187 <= f_fu_802_p2;
                select_ln11_reg_1192 <= select_ln11_fu_807_p3;
                tmp_1_1_reg_1177 <= grp_fu_396_p2;
                tmp_1_2_reg_1182 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_fu_448_p2 = ap_const_lv1_0))) then
                icmp_ln11_reg_932 <= icmp_ln11_fu_460_p2;
                select_ln30_6_reg_950 <= select_ln30_6_fu_558_p3;
                select_ln30_9_reg_984 <= select_ln30_9_fu_624_p3;
                    sub_ln23_reg_945(10 downto 2) <= sub_ln23_fu_506_p2(10 downto 2);
                    zext_ln23_reg_989(2 downto 0) <= zext_ln23_fu_632_p1(2 downto 0);
                    zext_ln30_2_reg_962(4 downto 0) <= zext_ln30_2_fu_574_p1(4 downto 0);
                    zext_ln30_4_reg_973(4 downto 0) <= zext_ln30_4_fu_603_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln8_reg_923 <= icmp_ln8_fu_448_p2;
                icmp_ln8_reg_923_pp0_iter1_reg <= icmp_ln8_reg_923;
                icmp_ln8_reg_923_pp0_iter2_reg <= icmp_ln8_reg_923_pp0_iter1_reg;
                icmp_ln8_reg_923_pp0_iter3_reg <= icmp_ln8_reg_923_pp0_iter2_reg;
                icmp_ln8_reg_923_pp0_iter4_reg <= icmp_ln8_reg_923_pp0_iter3_reg;
                icmp_ln8_reg_923_pp0_iter5_reg <= icmp_ln8_reg_923_pp0_iter4_reg;
                icmp_ln8_reg_923_pp0_iter6_reg <= icmp_ln8_reg_923_pp0_iter5_reg;
                icmp_ln8_reg_923_pp0_iter7_reg <= icmp_ln8_reg_923_pp0_iter6_reg;
                icmp_ln8_reg_923_pp0_iter8_reg <= icmp_ln8_reg_923_pp0_iter7_reg;
                r_reg_918 <= r_fu_430_p2;
                select_ln30_1_reg_939_pp0_iter1_reg <= select_ln30_1_reg_939;
                select_ln30_1_reg_939_pp0_iter2_reg <= select_ln30_1_reg_939_pp0_iter1_reg;
                select_ln30_1_reg_939_pp0_iter3_reg <= select_ln30_1_reg_939_pp0_iter2_reg;
                select_ln30_1_reg_939_pp0_iter4_reg <= select_ln30_1_reg_939_pp0_iter3_reg;
                select_ln30_1_reg_939_pp0_iter5_reg <= select_ln30_1_reg_939_pp0_iter4_reg;
                select_ln30_1_reg_939_pp0_iter6_reg <= select_ln30_1_reg_939_pp0_iter5_reg;
                select_ln30_1_reg_939_pp0_iter7_reg <= select_ln30_1_reg_939_pp0_iter6_reg;
                select_ln30_1_reg_939_pp0_iter8_reg <= select_ln30_1_reg_939_pp0_iter7_reg;
                select_ln30_6_reg_950_pp0_iter1_reg <= select_ln30_6_reg_950;
                select_ln30_6_reg_950_pp0_iter2_reg <= select_ln30_6_reg_950_pp0_iter1_reg;
                select_ln30_6_reg_950_pp0_iter3_reg <= select_ln30_6_reg_950_pp0_iter2_reg;
                select_ln30_6_reg_950_pp0_iter4_reg <= select_ln30_6_reg_950_pp0_iter3_reg;
                select_ln30_6_reg_950_pp0_iter5_reg <= select_ln30_6_reg_950_pp0_iter4_reg;
                select_ln30_6_reg_950_pp0_iter6_reg <= select_ln30_6_reg_950_pp0_iter5_reg;
                select_ln30_6_reg_950_pp0_iter7_reg <= select_ln30_6_reg_950_pp0_iter6_reg;
                select_ln30_6_reg_950_pp0_iter8_reg <= select_ln30_6_reg_950_pp0_iter7_reg;
                select_ln30_7_reg_956_pp0_iter1_reg <= select_ln30_7_reg_956;
                select_ln30_7_reg_956_pp0_iter2_reg <= select_ln30_7_reg_956_pp0_iter1_reg;
                select_ln30_7_reg_956_pp0_iter3_reg <= select_ln30_7_reg_956_pp0_iter2_reg;
                select_ln30_7_reg_956_pp0_iter4_reg <= select_ln30_7_reg_956_pp0_iter3_reg;
                select_ln30_7_reg_956_pp0_iter5_reg <= select_ln30_7_reg_956_pp0_iter4_reg;
                select_ln30_7_reg_956_pp0_iter6_reg <= select_ln30_7_reg_956_pp0_iter5_reg;
                select_ln30_7_reg_956_pp0_iter7_reg <= select_ln30_7_reg_956_pp0_iter6_reg;
                select_ln30_7_reg_956_pp0_iter8_reg <= select_ln30_7_reg_956_pp0_iter7_reg;
                tmp_2_1_reg_1202_pp0_iter2_reg <= tmp_2_1_reg_1202;
                tmp_2_1_reg_1202_pp0_iter3_reg <= tmp_2_1_reg_1202_pp0_iter2_reg;
                tmp_2_1_reg_1202_pp0_iter4_reg <= tmp_2_1_reg_1202_pp0_iter3_reg;
                tmp_2_1_reg_1202_pp0_iter5_reg <= tmp_2_1_reg_1202_pp0_iter4_reg;
                tmp_2_1_reg_1202_pp0_iter6_reg <= tmp_2_1_reg_1202_pp0_iter5_reg;
                tmp_2_reg_1197_pp0_iter2_reg <= tmp_2_reg_1197;
                tmp_2_reg_1197_pp0_iter3_reg <= tmp_2_reg_1197_pp0_iter2_reg;
                tmp_2_reg_1197_pp0_iter4_reg <= tmp_2_reg_1197_pp0_iter3_reg;
                tmp_2_reg_1197_pp0_iter5_reg <= tmp_2_reg_1197_pp0_iter4_reg;
                    zext_ln23_reg_989_pp0_iter1_reg(2 downto 0) <= zext_ln23_reg_989(2 downto 0);
                    zext_ln23_reg_989_pp0_iter2_reg(2 downto 0) <= zext_ln23_reg_989_pp0_iter1_reg(2 downto 0);
                    zext_ln23_reg_989_pp0_iter3_reg(2 downto 0) <= zext_ln23_reg_989_pp0_iter2_reg(2 downto 0);
                    zext_ln23_reg_989_pp0_iter4_reg(2 downto 0) <= zext_ln23_reg_989_pp0_iter3_reg(2 downto 0);
                    zext_ln23_reg_989_pp0_iter5_reg(2 downto 0) <= zext_ln23_reg_989_pp0_iter4_reg(2 downto 0);
                    zext_ln23_reg_989_pp0_iter6_reg(2 downto 0) <= zext_ln23_reg_989_pp0_iter5_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_923_pp0_iter7_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_923_pp0_iter8_reg = ap_const_lv1_0)))) then
                reg_424 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_448_p2 = ap_const_lv1_0))) then
                select_ln30_1_reg_939 <= select_ln30_1_fu_474_p3;
                select_ln30_7_reg_956 <= select_ln30_7_fu_566_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then
                tmp_0_1_reg_1147 <= grp_fu_402_p2;
                tmp_8_reg_1142 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then
                tmp_0_2_reg_1162 <= grp_fu_396_p2;
                tmp_1_reg_1167 <= grp_fu_402_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_0_2_reg_1162_pp0_iter1_reg <= tmp_0_2_reg_1162;
                tmp_1_reg_1167_pp0_iter1_reg <= tmp_1_reg_1167;
                tmp_1_reg_1167_pp0_iter2_reg <= tmp_1_reg_1167_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                tmp_1_1_reg_1177_pp0_iter1_reg <= tmp_1_1_reg_1177;
                tmp_1_1_reg_1177_pp0_iter2_reg <= tmp_1_1_reg_1177_pp0_iter1_reg;
                tmp_1_2_reg_1182_pp0_iter1_reg <= tmp_1_2_reg_1182;
                tmp_1_2_reg_1182_pp0_iter2_reg <= tmp_1_2_reg_1182_pp0_iter1_reg;
                tmp_1_2_reg_1182_pp0_iter3_reg <= tmp_1_2_reg_1182_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then
                tmp_2_1_reg_1202 <= grp_fu_402_p2;
                tmp_2_reg_1197 <= grp_fu_396_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_923_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_2_2_reg_1212 <= grp_fu_396_p2;
                w_sum_4_reg_1207 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_2_2_reg_1212_pp0_iter2_reg <= tmp_2_2_reg_1212;
                tmp_2_2_reg_1212_pp0_iter3_reg <= tmp_2_2_reg_1212_pp0_iter2_reg;
                tmp_2_2_reg_1212_pp0_iter4_reg <= tmp_2_2_reg_1212_pp0_iter3_reg;
                tmp_2_2_reg_1212_pp0_iter5_reg <= tmp_2_2_reg_1212_pp0_iter4_reg;
                tmp_2_2_reg_1212_pp0_iter6_reg <= tmp_2_2_reg_1212_pp0_iter5_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923_pp0_iter1_reg = ap_const_lv1_0))) then
                w_sum_4_0_1_reg_1217 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_923_pp0_iter2_reg = ap_const_lv1_0))) then
                w_sum_4_0_2_reg_1222 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_923_pp0_iter4_reg = ap_const_lv1_0))) then
                w_sum_4_1_1_reg_1232 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_923_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                w_sum_4_1_2_reg_1237 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_923_pp0_iter3_reg = ap_const_lv1_0))) then
                w_sum_4_1_reg_1227 <= grp_fu_387_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (icmp_ln8_reg_923_pp0_iter6_reg = ap_const_lv1_0))) then
                w_sum_4_2_1_reg_1247 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923_pp0_iter5_reg = ap_const_lv1_0))) then
                w_sum_4_2_reg_1242 <= grp_fu_392_p2;
            end if;
        end if;
    end process;
    sub_ln23_reg_945(1 downto 0) <= "00";
    zext_ln30_2_reg_962(10 downto 5) <= "000000";
    zext_ln30_4_reg_973(10 downto 5) <= "000000";
    zext_ln23_reg_989(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_989_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_989_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_989_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_989_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_989_pp0_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_989_pp0_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    sub_ln23_1_reg_1039(1 downto 0) <= "00";
    zext_ln30_5_reg_1056(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, icmp_ln8_fu_448_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_448_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state46;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_fu_723_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_353));
    add_ln23_10_fu_771_p2 <= std_logic_vector(unsigned(sub_ln23_2_fu_751_p2) + unsigned(zext_ln30_4_reg_973));
    add_ln23_11_fu_618_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(select_ln30_fu_466_p3));
    add_ln23_12_fu_713_p2 <= std_logic_vector(unsigned(sub_ln23_reg_945) + unsigned(zext_ln30_5_fu_710_p1));
    add_ln23_13_fu_776_p2 <= std_logic_vector(unsigned(sub_ln23_1_reg_1039) + unsigned(zext_ln30_5_reg_1056));
    add_ln23_14_fu_785_p2 <= std_logic_vector(unsigned(sub_ln23_2_fu_751_p2) + unsigned(zext_ln30_5_reg_1056));
    add_ln23_1_fu_442_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_369_p4) + unsigned(ap_const_lv5_2));
    add_ln23_3_fu_546_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln30_fu_466_p3));
    add_ln23_4_fu_578_p2 <= std_logic_vector(unsigned(sub_ln23_fu_506_p2) + unsigned(zext_ln30_2_fu_574_p1));
    add_ln23_5_fu_700_p2 <= std_logic_vector(unsigned(sub_ln23_1_fu_681_p2) + unsigned(zext_ln30_2_reg_962));
    add_ln23_6_fu_757_p2 <= std_logic_vector(unsigned(sub_ln23_2_fu_751_p2) + unsigned(zext_ln30_2_reg_962));
    add_ln23_7_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln30_fu_466_p3));
    add_ln23_8_fu_607_p2 <= std_logic_vector(unsigned(sub_ln23_fu_506_p2) + unsigned(zext_ln30_4_fu_603_p1));
    add_ln23_9_fu_762_p2 <= std_logic_vector(unsigned(sub_ln23_1_reg_1039) + unsigned(zext_ln30_4_reg_973));
    add_ln23_fu_645_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(r_0_reg_341));
    add_ln30_2_fu_846_p2 <= std_logic_vector(unsigned(sub_ln30_fu_837_p2) + unsigned(zext_ln30_6_fu_843_p1));
    add_ln30_fu_694_p2 <= std_logic_vector(unsigned(r_0_reg_341) + unsigned(select_ln30_3_fu_687_p3));
    add_ln8_fu_454_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten30_phi_fu_334_p4) + unsigned(ap_const_lv12_1));
    and_ln29_fu_893_p2 <= (or_ln29_fu_887_p2 and grp_fu_408_p2);
    and_ln30_fu_540_p2 <= (xor_ln30_fu_528_p2 and icmp_ln14_fu_534_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state46 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage3_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage4_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage3_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage4_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage3_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage4_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage3_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage4_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage3_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_448_p2)
    begin
        if ((icmp_ln8_fu_448_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_369_p4_assign_proc : process(c_0_reg_365, icmp_ln8_reg_923, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln30_7_reg_956, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_369_p4 <= select_ln30_7_reg_956;
        else 
            ap_phi_mux_c_0_phi_fu_369_p4 <= c_0_reg_365;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_380_p4_assign_proc : process(f_0_reg_376, icmp_ln8_reg_923, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, f_reg_1187, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_380_p4 <= f_reg_1187;
        else 
            ap_phi_mux_f_0_phi_fu_380_p4 <= f_0_reg_376;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten30_phi_fu_334_p4_assign_proc : process(indvar_flatten30_reg_330, icmp_ln8_reg_923, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln8_reg_927, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten30_phi_fu_334_p4 <= add_ln8_reg_927;
        else 
            ap_phi_mux_indvar_flatten30_phi_fu_334_p4 <= indvar_flatten30_reg_330;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_357_p4_assign_proc : process(indvar_flatten_reg_353, icmp_ln8_reg_923, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln11_reg_1192, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_357_p4 <= select_ln11_reg_1192;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_357_p4 <= indvar_flatten_reg_353;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_345_p4_assign_proc : process(r_0_reg_341, icmp_ln8_reg_923, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln30_1_reg_939, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_923 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_345_p4 <= select_ln30_1_reg_939;
        else 
            ap_phi_mux_r_0_phi_fu_345_p4 <= r_0_reg_341;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_fu_857_p1 <= reg_424;
    c_fu_436_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_369_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln23_reg_989_pp0_iter6_reg(3 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_1_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_2_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_1_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_2_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_1_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_2_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_2_address0 <= zext_ln23_fu_632_p1(3 - 1 downto 0);

    conv_1_weights_2_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= zext_ln30_7_fu_852_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter8)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        reg_424 when (and_ln29_fu_893_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_enable_reg_pp0_iter8, icmp_ln8_reg_923_pp0_iter8_reg)
    begin
        if (((ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_923_pp0_iter8_reg = ap_const_lv1_0))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_802_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln30_6_reg_950));

    grp_fu_387_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_8_reg_1142, w_sum_4_reg_1207, w_sum_4_0_1_reg_1217, ap_enable_reg_pp0_iter2, w_sum_4_0_2_reg_1222, w_sum_4_1_reg_1227, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_387_p0 <= w_sum_4_1_reg_1227;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_387_p0 <= w_sum_4_0_2_reg_1222;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_387_p0 <= w_sum_4_0_1_reg_1217;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_387_p0 <= w_sum_4_reg_1207;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_387_p0 <= tmp_8_reg_1142;
        else 
            grp_fu_387_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_387_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, tmp_0_1_reg_1147, tmp_0_2_reg_1162_pp0_iter1_reg, tmp_1_reg_1167_pp0_iter2_reg, tmp_1_1_reg_1177_pp0_iter2_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_387_p1 <= tmp_1_1_reg_1177_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_387_p1 <= tmp_1_reg_1167_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_387_p1 <= tmp_0_2_reg_1162_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_387_p1 <= tmp_0_1_reg_1147;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_387_p1 <= ap_const_lv32_0;
        else 
            grp_fu_387_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, reg_424, ap_enable_reg_pp0_iter7, w_sum_4_1_1_reg_1232, ap_enable_reg_pp0_iter4, w_sum_4_1_2_reg_1237, ap_enable_reg_pp0_iter5, w_sum_4_2_reg_1242, ap_enable_reg_pp0_iter6, w_sum_4_2_1_reg_1247, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_392_p0 <= reg_424;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_392_p0 <= w_sum_4_2_1_reg_1247;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_392_p0 <= w_sum_4_2_reg_1242;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_392_p0 <= w_sum_4_1_2_reg_1237;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_392_p0 <= w_sum_4_1_1_reg_1232;
        else 
            grp_fu_392_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_392_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter7, tmp_1_2_reg_1182_pp0_iter3_reg, tmp_2_reg_1197_pp0_iter5_reg, tmp_2_1_reg_1202_pp0_iter6_reg, tmp_2_2_reg_1212_pp0_iter6_reg, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, conv_1_bias_load_reg_1257, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_392_p1 <= conv_1_bias_load_reg_1257;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_392_p1 <= tmp_2_2_reg_1212_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_392_p1 <= tmp_2_1_reg_1202_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_392_p1 <= tmp_2_reg_1197_pp0_iter5_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_392_p1 <= tmp_1_2_reg_1182_pp0_iter3_reg;
        else 
            grp_fu_392_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_396_p0_assign_proc : process(conv_1_weights_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv_1_weights_0_2_l_reg_1077, conv_1_weights_1_1_l_reg_1087, conv_1_weights_2_0_l_reg_1097, conv_1_weights_2_2_l_reg_1107, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_396_p0 <= conv_1_weights_2_2_l_reg_1107;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= conv_1_weights_2_0_l_reg_1097;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= conv_1_weights_1_1_l_reg_1087;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_396_p0 <= conv_1_weights_0_2_l_reg_1077;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_396_p0 <= conv_1_weights_0_0_q0;
        else 
            grp_fu_396_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_402_p0_assign_proc : process(conv_1_weights_0_1_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, conv_1_weights_1_0_l_reg_1082, conv_1_weights_1_2_l_reg_1092, conv_1_weights_2_1_l_reg_1102, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_402_p0 <= conv_1_weights_2_1_l_reg_1102;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_402_p0 <= conv_1_weights_1_2_l_reg_1092;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_402_p0 <= conv_1_weights_1_0_l_reg_1082;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_402_p0 <= conv_1_weights_0_1_q0;
            else 
                grp_fu_402_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_402_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_908_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_908_p1 <= grp_fu_908_p10(5 - 1 downto 0);
    grp_fu_908_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_1_reg_939_pp0_iter8_reg),10));
    grp_fu_908_p2 <= grp_fu_908_p20(5 - 1 downto 0);
    grp_fu_908_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_7_reg_956_pp0_iter8_reg),10));
    icmp_ln11_fu_460_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_357_p4 = ap_const_lv8_9C) else "0";
    icmp_ln14_fu_534_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_380_p4 = ap_const_lv3_6) else "0";
    icmp_ln29_7_fu_881_p2 <= "1" when (trunc_ln29_fu_871_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_875_p2 <= "0" when (tmp_fu_861_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_448_p2 <= "1" when (ap_phi_mux_indvar_flatten30_phi_fu_334_p4 = ap_const_lv12_FD8) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln23_7_fu_584_p1, ap_block_pp0_stage1, zext_ln23_11_fu_718_p1, zext_ln23_10_fu_766_p1, ap_block_pp0_stage2, sext_ln23_fu_790_p1, ap_block_pp0_stage3, zext_ln23_13_fu_798_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_r_address0 <= zext_ln23_13_fu_798_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address0 <= sext_ln23_fu_790_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address0 <= zext_ln23_10_fu_766_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln23_11_fu_718_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= zext_ln23_7_fu_584_p1(10 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln23_9_fu_613_p1, zext_ln23_8_fu_705_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln23_12_fu_780_p1, ap_block_pp0_stage3, sext_ln23_1_fu_794_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_r_address1 <= sext_ln23_1_fu_794_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_r_address1 <= zext_ln23_12_fu_780_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address1 <= zext_ln23_8_fu_705_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address1 <= zext_ln23_9_fu_613_p1(10 - 1 downto 0);
            else 
                input_r_address1 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln29_fu_887_p2 <= (icmp_ln29_fu_875_p2 or icmp_ln29_7_fu_881_p2);
    or_ln30_fu_552_p2 <= (icmp_ln11_fu_460_p2 or and_ln30_fu_540_p2);
    p_shl_cast_fu_819_p3 <= (grp_fu_908_p3 & ap_const_lv3_0);
    r_fu_430_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_345_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_807_p3 <= 
        ap_const_lv8_1 when (icmp_ln11_reg_932(0) = '1') else 
        add_ln11_reg_1112;
    select_ln30_1_fu_474_p3 <= 
        r_fu_430_p2 when (icmp_ln11_fu_460_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_345_p4;
    select_ln30_2_fu_651_p3 <= 
        add_ln23_fu_645_p2 when (icmp_ln11_reg_932(0) = '1') else 
        r_reg_918;
    select_ln30_3_fu_687_p3 <= 
        ap_const_lv5_3 when (icmp_ln11_reg_932(0) = '1') else 
        ap_const_lv5_2;
    select_ln30_4_fu_512_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_460_p2(0) = '1') else 
        c_fu_436_p2;
    select_ln30_5_fu_520_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_460_p2(0) = '1') else 
        add_ln23_1_fu_442_p2;
    select_ln30_6_fu_558_p3 <= 
        ap_const_lv3_0 when (or_ln30_fu_552_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_380_p4;
    select_ln30_7_fu_566_p3 <= 
        add_ln23_3_fu_546_p2 when (and_ln30_fu_540_p2(0) = '1') else 
        select_ln30_fu_466_p3;
    select_ln30_8_fu_595_p3 <= 
        add_ln23_7_fu_589_p2 when (and_ln30_fu_540_p2(0) = '1') else 
        select_ln30_4_fu_512_p3;
    select_ln30_9_fu_624_p3 <= 
        add_ln23_11_fu_618_p2 when (and_ln30_fu_540_p2(0) = '1') else 
        select_ln30_5_fu_520_p3;
    select_ln30_fu_466_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_460_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_369_p4;
        sext_ln23_1_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_10_reg_1127),64));

        sext_ln23_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_6_reg_1117),64));

    sub_ln23_1_fu_681_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_665_p1) - unsigned(zext_ln23_4_fu_677_p1));
    sub_ln23_2_fu_751_p2 <= std_logic_vector(unsigned(zext_ln23_5_fu_736_p1) - unsigned(zext_ln23_6_fu_747_p1));
    sub_ln23_fu_506_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_490_p1) - unsigned(zext_ln23_2_fu_502_p1));
    sub_ln30_fu_837_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_819_p3) - unsigned(zext_ln30_3_fu_833_p1));
    tmp_10_fu_740_p3 <= (add_ln30_reg_1045 & ap_const_lv2_0);
    tmp_11_fu_482_p3 <= (select_ln30_1_fu_474_p3 & ap_const_lv5_0);
    tmp_12_fu_494_p3 <= (select_ln30_1_fu_474_p3 & ap_const_lv2_0);
    tmp_13_fu_657_p3 <= (select_ln30_2_fu_651_p3 & ap_const_lv5_0);
    tmp_14_fu_669_p3 <= (select_ln30_2_fu_651_p3 & ap_const_lv2_0);
    tmp_15_fu_826_p3 <= (grp_fu_908_p3 & ap_const_lv1_0);
    tmp_9_fu_729_p3 <= (add_ln30_reg_1045 & ap_const_lv5_0);
    tmp_fu_861_p4 <= bitcast_ln29_fu_857_p1(30 downto 23);
    trunc_ln29_fu_871_p1 <= bitcast_ln29_fu_857_p1(23 - 1 downto 0);
    xor_ln30_fu_528_p2 <= (icmp_ln11_fu_460_p2 xor ap_const_lv1_1);
    zext_ln23_10_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_9_fu_762_p2),64));
    zext_ln23_11_fu_718_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_12_fu_713_p2),64));
    zext_ln23_12_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_13_fu_776_p2),64));
    zext_ln23_13_fu_798_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_14_reg_1137),64));
    zext_ln23_1_fu_490_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_482_p3),11));
    zext_ln23_2_fu_502_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_494_p3),11));
    zext_ln23_3_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_657_p3),11));
    zext_ln23_4_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_669_p3),11));
    zext_ln23_5_fu_736_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_729_p3),11));
    zext_ln23_6_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_740_p3),11));
    zext_ln23_7_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_fu_578_p2),64));
    zext_ln23_8_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_5_fu_700_p2),64));
    zext_ln23_9_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_8_fu_607_p2),64));
    zext_ln23_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_6_fu_558_p3),64));
    zext_ln30_2_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_7_fu_566_p3),11));
    zext_ln30_3_fu_833_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_826_p3),13));
    zext_ln30_4_fu_603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_8_fu_595_p3),11));
    zext_ln30_5_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_9_reg_984),11));
    zext_ln30_6_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_6_reg_950_pp0_iter8_reg),13));
    zext_ln30_7_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_fu_846_p2),64));
end behav;
