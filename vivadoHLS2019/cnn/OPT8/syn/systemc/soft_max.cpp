// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "soft_max.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic soft_max::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic soft_max::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<26> soft_max::ap_ST_fsm_state1 = "1";
const sc_lv<26> soft_max::ap_ST_fsm_state2 = "10";
const sc_lv<26> soft_max::ap_ST_fsm_state3 = "100";
const sc_lv<26> soft_max::ap_ST_fsm_state4 = "1000";
const sc_lv<26> soft_max::ap_ST_fsm_state5 = "10000";
const sc_lv<26> soft_max::ap_ST_fsm_state6 = "100000";
const sc_lv<26> soft_max::ap_ST_fsm_state7 = "1000000";
const sc_lv<26> soft_max::ap_ST_fsm_state8 = "10000000";
const sc_lv<26> soft_max::ap_ST_fsm_state9 = "100000000";
const sc_lv<26> soft_max::ap_ST_fsm_state10 = "1000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state11 = "10000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state12 = "100000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<26> soft_max::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<32> soft_max::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> soft_max::ap_const_lv32_2 = "10";
const sc_lv<32> soft_max::ap_const_lv32_C = "1100";
const sc_lv<32> soft_max::ap_const_lv32_6 = "110";
const sc_lv<32> soft_max::ap_const_lv32_10 = "10000";
const sc_lv<32> soft_max::ap_const_lv32_1 = "1";
const sc_lv<1> soft_max::ap_const_lv1_0 = "0";
const sc_lv<32> soft_max::ap_const_lv32_A = "1010";
const sc_lv<32> soft_max::ap_const_lv32_B = "1011";
const sc_lv<32> soft_max::ap_const_lv32_18 = "11000";
const sc_lv<4> soft_max::ap_const_lv4_0 = "0000";
const sc_lv<32> soft_max::ap_const_lv32_19 = "11001";
const sc_lv<1> soft_max::ap_const_lv1_1 = "1";
const sc_lv<4> soft_max::ap_const_lv4_F = "1111";
const sc_lv<32> soft_max::ap_const_lv32_7 = "111";
const sc_lv<32> soft_max::ap_const_lv32_11 = "10001";
const sc_lv<4> soft_max::ap_const_lv4_A = "1010";
const sc_lv<4> soft_max::ap_const_lv4_1 = "1";
const bool soft_max::ap_const_boolean_1 = true;

soft_max::soft_max(sc_module_name name) : sc_module(name), mVcdFile(0) {
    cnn_fadd_32ns_32nbkb_U186 = new cnn_fadd_32ns_32nbkb<1,4,32,32,32>("cnn_fadd_32ns_32nbkb_U186");
    cnn_fadd_32ns_32nbkb_U186->clk(ap_clk);
    cnn_fadd_32ns_32nbkb_U186->reset(ap_rst);
    cnn_fadd_32ns_32nbkb_U186->din0(sum_0_reg_68);
    cnn_fadd_32ns_32nbkb_U186->din1(reg_123);
    cnn_fadd_32ns_32nbkb_U186->ce(ap_var_for_const0);
    cnn_fadd_32ns_32nbkb_U186->dout(grp_fu_102_p2);
    cnn_fdiv_32ns_32n7jG_U187 = new cnn_fdiv_32ns_32n7jG<1,8,32,32,32>("cnn_fdiv_32ns_32n7jG_U187");
    cnn_fdiv_32ns_32n7jG_U187->clk(ap_clk);
    cnn_fdiv_32ns_32n7jG_U187->reset(ap_rst);
    cnn_fdiv_32ns_32n7jG_U187->din0(reg_123);
    cnn_fdiv_32ns_32n7jG_U187->din1(sum_0_reg_68);
    cnn_fdiv_32ns_32n7jG_U187->ce(ap_var_for_const0);
    cnn_fdiv_32ns_32n7jG_U187->dout(grp_fu_107_p2);
    cnn_fexp_32ns_32n8jQ_U188 = new cnn_fexp_32ns_32n8jQ<1,5,32,32,32>("cnn_fexp_32ns_32n8jQ_U188");
    cnn_fexp_32ns_32n8jQ_U188->clk(ap_clk);
    cnn_fexp_32ns_32n8jQ_U188->reset(ap_rst);
    cnn_fexp_32ns_32n8jQ_U188->din0(ap_var_for_const1);
    cnn_fexp_32ns_32n8jQ_U188->din1(dense_array_q0);
    cnn_fexp_32ns_32n8jQ_U188->ce(ap_var_for_const0);
    cnn_fexp_32ns_32n8jQ_U188->dout(grp_fu_112_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln17_fu_146_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln17_fu_146_p2 );

    SC_METHOD(thread_dense_array_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( zext_ln19_fu_158_p1 );
    sensitive << ( zext_ln13_fu_141_p1 );

    SC_METHOD(thread_dense_array_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_i_fu_135_p2);
    sensitive << ( i_0_reg_80 );

    SC_METHOD(thread_icmp_ln11_fu_129_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_80 );

    SC_METHOD(thread_icmp_ln17_fu_146_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( j_0_reg_91 );

    SC_METHOD(thread_j_fu_152_p2);
    sensitive << ( j_0_reg_91 );

    SC_METHOD(thread_prediction_Addr_A);
    sensitive << ( prediction_Addr_A_orig );

    SC_METHOD(thread_prediction_Addr_A_orig);
    sensitive << ( zext_ln19_reg_189 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_prediction_Din_A);
    sensitive << ( tmp_3_reg_199 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_prediction_EN_A);
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_prediction_WEN_A);
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_zext_ln13_fu_141_p1);
    sensitive << ( i_0_reg_80 );

    SC_METHOD(thread_zext_ln19_fu_158_p1);
    sensitive << ( j_0_reg_91 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln11_fu_129_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( icmp_ln17_fu_146_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "soft_max_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_array_address0, "(port)dense_array_address0");
    sc_trace(mVcdFile, dense_array_ce0, "(port)dense_array_ce0");
    sc_trace(mVcdFile, dense_array_q0, "(port)dense_array_q0");
    sc_trace(mVcdFile, prediction_Addr_A, "(port)prediction_Addr_A");
    sc_trace(mVcdFile, prediction_EN_A, "(port)prediction_EN_A");
    sc_trace(mVcdFile, prediction_WEN_A, "(port)prediction_WEN_A");
    sc_trace(mVcdFile, prediction_Din_A, "(port)prediction_Din_A");
    sc_trace(mVcdFile, prediction_Dout_A, "(port)prediction_Dout_A");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, grp_fu_112_p2, "grp_fu_112_p2");
    sc_trace(mVcdFile, reg_123, "reg_123");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, i_fu_135_p2, "i_fu_135_p2");
    sc_trace(mVcdFile, i_reg_166, "i_reg_166");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, icmp_ln11_fu_129_p2, "icmp_ln11_fu_129_p2");
    sc_trace(mVcdFile, grp_fu_102_p2, "grp_fu_102_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, j_fu_152_p2, "j_fu_152_p2");
    sc_trace(mVcdFile, j_reg_184, "j_reg_184");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, zext_ln19_fu_158_p1, "zext_ln19_fu_158_p1");
    sc_trace(mVcdFile, zext_ln19_reg_189, "zext_ln19_reg_189");
    sc_trace(mVcdFile, icmp_ln17_fu_146_p2, "icmp_ln17_fu_146_p2");
    sc_trace(mVcdFile, grp_fu_107_p2, "grp_fu_107_p2");
    sc_trace(mVcdFile, tmp_3_reg_199, "tmp_3_reg_199");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, sum_0_reg_68, "sum_0_reg_68");
    sc_trace(mVcdFile, i_0_reg_80, "i_0_reg_80");
    sc_trace(mVcdFile, j_0_reg_91, "j_0_reg_91");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, zext_ln13_fu_141_p1, "zext_ln13_fu_141_p1");
    sc_trace(mVcdFile, prediction_Addr_A_orig, "prediction_Addr_A_orig");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

soft_max::~soft_max() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete cnn_fadd_32ns_32nbkb_U186;
    delete cnn_fdiv_32ns_32n7jG_U187;
    delete cnn_fexp_32ns_32n8jQ_U188;
}

void soft_max::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void soft_max::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void soft_max::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        i_0_reg_80 = i_reg_166.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_80 = ap_const_lv4_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln11_fu_129_p2.read(), ap_const_lv1_1))) {
        j_0_reg_91 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        j_0_reg_91 = j_reg_184.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sum_0_reg_68 = grp_fu_102_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        sum_0_reg_68 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_166 = i_fu_135_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        j_reg_184 = j_fu_152_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        reg_123 = grp_fu_112_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read())) {
        tmp_3_reg_199 = grp_fu_107_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln17_fu_146_p2.read()))) {
        zext_ln19_reg_189 = zext_ln19_fu_158_p1.read();
    }
}

void soft_max::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void soft_max::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void soft_max::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void soft_max::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void soft_max::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void soft_max::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void soft_max::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void soft_max::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void soft_max::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void soft_max::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void soft_max::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void soft_max::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void soft_max::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
          esl_seteq<1,1,1>(icmp_ln17_fu_146_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void soft_max::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void soft_max::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(icmp_ln17_fu_146_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void soft_max::thread_dense_array_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        dense_array_address0 =  (sc_lv<4>) (zext_ln19_fu_158_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        dense_array_address0 =  (sc_lv<4>) (zext_ln13_fu_141_p1.read());
    } else {
        dense_array_address0 = "XXXX";
    }
}

void soft_max::thread_dense_array_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        dense_array_ce0 = ap_const_logic_1;
    } else {
        dense_array_ce0 = ap_const_logic_0;
    }
}

void soft_max::thread_i_fu_135_p2() {
    i_fu_135_p2 = (!i_0_reg_80.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_80.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void soft_max::thread_icmp_ln11_fu_129_p2() {
    icmp_ln11_fu_129_p2 = (!i_0_reg_80.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_80.read() == ap_const_lv4_A);
}

void soft_max::thread_icmp_ln17_fu_146_p2() {
    icmp_ln17_fu_146_p2 = (!j_0_reg_91.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_91.read() == ap_const_lv4_A);
}

void soft_max::thread_j_fu_152_p2() {
    j_fu_152_p2 = (!j_0_reg_91.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_91.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void soft_max::thread_prediction_Addr_A() {
    prediction_Addr_A = (!ap_const_lv32_2.is_01())? sc_lv<32>(): prediction_Addr_A_orig.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void soft_max::thread_prediction_Addr_A_orig() {
    prediction_Addr_A_orig =  (sc_lv<32>) (zext_ln19_reg_189.read());
}

void soft_max::thread_prediction_Din_A() {
    prediction_Din_A = tmp_3_reg_199.read();
}

void soft_max::thread_prediction_EN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        prediction_EN_A = ap_const_logic_1;
    } else {
        prediction_EN_A = ap_const_logic_0;
    }
}

void soft_max::thread_prediction_WEN_A() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        prediction_WEN_A = ap_const_lv4_F;
    } else {
        prediction_WEN_A = ap_const_lv4_0;
    }
}

void soft_max::thread_zext_ln13_fu_141_p1() {
    zext_ln13_fu_141_p1 = esl_zext<64,4>(i_0_reg_80.read());
}

void soft_max::thread_zext_ln19_fu_158_p1() {
    zext_ln19_fu_158_p1 = esl_zext<64,4>(j_0_reg_91.read());
}

void soft_max::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln11_fu_129_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(icmp_ln17_fu_146_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<26>) ("XXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

}

