// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _soft_max_HH_
#define _soft_max_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cnn_fadd_32ns_32ncud.h"
#include "cnn_fdiv_32ns_32njbC.h"
#include "cnn_fexp_32ns_32nkbM.h"

namespace ap_rtl {

struct soft_max : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > dense_array_address0;
    sc_out< sc_logic > dense_array_ce0;
    sc_in< sc_lv<32> > dense_array_q0;
    sc_out< sc_lv<32> > prediction_Addr_A;
    sc_out< sc_logic > prediction_EN_A;
    sc_out< sc_lv<4> > prediction_WEN_A;
    sc_out< sc_lv<32> > prediction_Din_A;
    sc_in< sc_lv<32> > prediction_Dout_A;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    soft_max(sc_module_name name);
    SC_HAS_PROCESS(soft_max);

    ~soft_max();

    sc_trace_file* mVcdFile;

    cnn_fadd_32ns_32ncud<1,2,32,32,32>* cnn_fadd_32ns_32ncud_U33;
    cnn_fdiv_32ns_32njbC<1,6,32,32,32>* cnn_fdiv_32ns_32njbC_U34;
    cnn_fexp_32ns_32nkbM<1,4,32,32,32>* cnn_fexp_32ns_32nkbM_U35;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > sum_0_reg_84;
    sc_signal< sc_lv<4> > i_0_reg_96;
    sc_signal< sc_lv<4> > j_0_reg_107;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter2;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_180;
    sc_signal< bool > ap_block_state10_pp1_stage0_iter0;
    sc_signal< bool > ap_block_state11_pp1_stage0_iter1;
    sc_signal< bool > ap_block_state12_pp1_stage0_iter2;
    sc_signal< bool > ap_block_state13_pp1_stage0_iter3;
    sc_signal< bool > ap_block_state14_pp1_stage0_iter4;
    sc_signal< bool > ap_block_state15_pp1_stage0_iter5;
    sc_signal< bool > ap_block_state16_pp1_stage0_iter6;
    sc_signal< bool > ap_block_state17_pp1_stage0_iter7;
    sc_signal< bool > ap_block_state18_pp1_stage0_iter8;
    sc_signal< bool > ap_block_state19_pp1_stage0_iter9;
    sc_signal< bool > ap_block_state20_pp1_stage0_iter10;
    sc_signal< bool > ap_block_pp1_stage0_11001;
    sc_signal< sc_logic > ap_CS_fsm_pp1_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter1;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199;
    sc_signal< sc_lv<32> > grp_fu_129_p2;
    sc_signal< sc_lv<32> > reg_140;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter2;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter3;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_180_pp0_iter1_reg;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter4;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter3_reg;
    sc_signal< sc_lv<1> > icmp_ln10_fu_146_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_180_pp0_iter2_reg;
    sc_signal< sc_lv<4> > i_fu_152_p2;
    sc_signal< sc_lv<4> > i_reg_184;
    sc_signal< sc_lv<32> > grp_fu_118_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter3;
    sc_signal< sc_lv<1> > icmp_ln16_fu_163_p2;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter1_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter2_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter4_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter5_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter6_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter7_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter8_reg;
    sc_signal< sc_lv<1> > icmp_ln16_reg_199_pp1_iter9_reg;
    sc_signal< sc_lv<4> > j_fu_169_p2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter0;
    sc_signal< sc_lv<64> > zext_ln18_fu_175_p1;
    sc_signal< sc_lv<64> > zext_ln18_reg_208;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter1_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter2_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter3_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter4_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter5_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter6_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter7_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter8_reg;
    sc_signal< sc_lv<64> > zext_ln18_reg_208_pp1_iter9_reg;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< bool > ap_block_pp1_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp1_exit_iter0_state10;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter2;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter3;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter5;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter6;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter7;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter8;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter9;
    sc_signal< sc_logic > ap_enable_reg_pp1_iter10;
    sc_signal< sc_lv<4> > ap_phi_mux_i_0_phi_fu_100_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<64> > zext_ln12_fu_158_p1;
    sc_signal< bool > ap_block_pp1_stage0;
    sc_signal< sc_lv<32> > grp_fu_123_p2;
    sc_signal< sc_lv<32> > prediction_Addr_A_orig;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_logic > ap_idle_pp1;
    sc_signal< sc_logic > ap_enable_pp1;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_pp0_stage0;
    static const sc_lv<6> ap_ST_fsm_pp0_stage1;
    static const sc_lv<6> ap_ST_fsm_state9;
    static const sc_lv<6> ap_ST_fsm_pp1_stage0;
    static const sc_lv<6> ap_ST_fsm_state21;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_5;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp1_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_pp1_stage0();
    void thread_ap_block_pp1_stage0_11001();
    void thread_ap_block_pp1_stage0_subdone();
    void thread_ap_block_state10_pp1_stage0_iter0();
    void thread_ap_block_state11_pp1_stage0_iter1();
    void thread_ap_block_state12_pp1_stage0_iter2();
    void thread_ap_block_state13_pp1_stage0_iter3();
    void thread_ap_block_state14_pp1_stage0_iter4();
    void thread_ap_block_state15_pp1_stage0_iter5();
    void thread_ap_block_state16_pp1_stage0_iter6();
    void thread_ap_block_state17_pp1_stage0_iter7();
    void thread_ap_block_state18_pp1_stage0_iter8();
    void thread_ap_block_state19_pp1_stage0_iter9();
    void thread_ap_block_state20_pp1_stage0_iter10();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_block_state6_pp0_stage0_iter2();
    void thread_ap_block_state7_pp0_stage1_iter2();
    void thread_ap_block_state8_pp0_stage0_iter3();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_condition_pp1_exit_iter0_state10();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_pp1();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp1();
    void thread_ap_phi_mux_i_0_phi_fu_100_p4();
    void thread_ap_ready();
    void thread_dense_array_address0();
    void thread_dense_array_ce0();
    void thread_i_fu_152_p2();
    void thread_icmp_ln10_fu_146_p2();
    void thread_icmp_ln16_fu_163_p2();
    void thread_j_fu_169_p2();
    void thread_prediction_Addr_A();
    void thread_prediction_Addr_A_orig();
    void thread_prediction_Din_A();
    void thread_prediction_EN_A();
    void thread_prediction_WEN_A();
    void thread_zext_ln12_fu_158_p1();
    void thread_zext_ln18_fu_175_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
