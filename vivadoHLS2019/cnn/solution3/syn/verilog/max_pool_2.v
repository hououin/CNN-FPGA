// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_2_out_address0,
        conv_2_out_ce0,
        conv_2_out_q0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [12:0] conv_2_out_address0;
output   conv_2_out_ce0;
input  [31:0] conv_2_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg conv_2_out_ce0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_178;
reg   [1:0] mpr_0_reg_189;
reg   [31:0] max_1_reg_200;
reg   [1:0] mpc_0_reg_213;
wire   [0:0] icmp_ln9_fu_230_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] add_ln9_fu_236_p2;
reg   [10:0] add_ln9_reg_624;
wire   [0:0] icmp_ln12_fu_248_p2;
reg   [0:0] icmp_ln12_reg_629;
wire   [6:0] select_ln28_1_fu_262_p3;
reg   [6:0] select_ln28_1_reg_634;
wire   [13:0] zext_ln25_fu_270_p1;
reg   [13:0] zext_ln25_reg_639;
wire   [11:0] zext_ln25_1_fu_274_p1;
reg   [11:0] zext_ln25_1_reg_644;
wire   [2:0] select_ln12_fu_324_p3;
reg   [2:0] select_ln12_reg_649;
wire   [3:0] select_ln12_1_fu_340_p3;
reg   [3:0] select_ln12_1_reg_655;
wire   [2:0] select_ln12_2_fu_348_p3;
reg   [2:0] select_ln12_2_reg_660;
wire   [5:0] add_ln35_fu_372_p2;
reg   [5:0] add_ln35_reg_665;
wire   [3:0] shl_ln1_fu_378_p3;
reg   [3:0] shl_ln1_reg_670;
wire   [0:0] icmp_ln19_fu_386_p2;
reg   [0:0] icmp_ln19_reg_675;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] add_ln19_1_fu_392_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln19_1_fu_418_p3;
reg   [1:0] select_ln19_1_reg_684;
wire   [1:0] mpc_fu_469_p2;
wire   [31:0] max_2_fu_559_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [2:0] c_fu_593_p2;
wire    ap_CS_fsm_state5;
wire   [5:0] select_ln12_3_fu_604_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [10:0] indvar_flatten25_reg_122;
reg   [6:0] f_0_reg_133;
reg   [5:0] indvar_flatten7_reg_144;
reg   [2:0] r_0_reg_156;
reg   [2:0] c_0_reg_167;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_193_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln28_2_fu_464_p1;
wire   [63:0] zext_ln35_3_fu_588_p1;
wire   [6:0] f_fu_242_p2;
wire   [3:0] shl_ln_fu_278_p3;
wire   [0:0] icmp_ln15_fu_300_p2;
wire   [0:0] xor_ln28_fu_294_p2;
wire   [2:0] select_ln28_fu_254_p3;
wire   [0:0] and_ln28_2_fu_306_p2;
wire   [0:0] or_ln12_fu_318_p2;
wire   [2:0] r_fu_312_p2;
wire   [3:0] shl_ln25_mid1_fu_332_p3;
wire   [3:0] select_ln28_2_fu_286_p3;
wire   [4:0] tmp_3_fu_360_p3;
wire   [5:0] zext_ln35_2_fu_368_p1;
wire   [5:0] zext_ln35_fu_356_p1;
wire   [0:0] icmp_ln22_fu_404_p2;
wire   [1:0] mpr_fu_398_p2;
wire   [3:0] zext_ln19_fu_426_p1;
wire   [3:0] add_ln19_fu_430_p2;
wire   [1:0] select_ln19_fu_410_p3;
wire   [3:0] zext_ln22_fu_439_p1;
wire   [3:0] j_fu_443_p2;
wire   [7:0] grp_fu_611_p3;
wire   [13:0] tmp_8_cast_fu_452_p3;
wire   [13:0] add_ln28_1_fu_459_p2;
wire   [31:0] bitcast_ln28_fu_475_p1;
wire   [31:0] bitcast_ln28_1_fu_493_p1;
wire   [7:0] tmp_fu_479_p4;
wire   [22:0] trunc_ln28_fu_489_p1;
wire   [0:0] icmp_ln28_1_fu_517_p2;
wire   [0:0] icmp_ln28_fu_511_p2;
wire   [7:0] tmp_1_fu_497_p4;
wire   [22:0] trunc_ln28_1_fu_507_p1;
wire   [0:0] icmp_ln28_3_fu_535_p2;
wire   [0:0] icmp_ln28_2_fu_529_p2;
wire   [0:0] or_ln28_fu_523_p2;
wire   [0:0] or_ln28_1_fu_541_p2;
wire   [0:0] and_ln28_fu_547_p2;
wire   [0:0] tmp_2_fu_224_p2;
wire   [0:0] and_ln28_1_fu_553_p2;
wire   [5:0] zext_ln35_1_fu_567_p1;
wire   [5:0] add_ln35_1_fu_570_p2;
wire   [11:0] tmp_5_cast_fu_575_p3;
wire   [11:0] add_ln35_2_fu_583_p2;
wire   [5:0] add_ln12_1_fu_598_p2;
wire   [4:0] grp_fu_611_p0;
wire   [3:0] grp_fu_611_p1;
wire   [3:0] grp_fu_611_p2;
wire    ap_block_pp0_stage0_00001;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_611_p10;
wire   [7:0] grp_fu_611_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U26(
    .din0(conv_2_out_q0),
    .din1(max_1_reg_200),
    .opcode(5'd2),
    .dout(tmp_2_fu_224_p2)
);

cnn_mac_muladd_5nibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_5nibs_U27(
    .din0(grp_fu_611_p0),
    .din1(grp_fu_611_p1),
    .din2(grp_fu_611_p2),
    .dout(grp_fu_611_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        c_0_reg_167 <= c_fu_593_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_167 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_133 <= select_ln28_1_reg_634;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_133 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten25_reg_122 <= add_ln9_reg_624;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten25_reg_122 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        indvar_flatten7_reg_144 <= select_ln12_3_fu_604_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_144 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_178 <= add_ln19_1_fu_392_p2;
    end else if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_178 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_675 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_1_reg_200 <= max_2_fu_559_p3;
    end else if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_1_reg_200 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpc_0_reg_213 <= mpc_fu_469_p2;
    end else if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpc_0_reg_213 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_reg_675 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_189 <= select_ln19_1_reg_684;
    end else if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpr_0_reg_189 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        r_0_reg_156 <= select_ln12_2_reg_660;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_156 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_230_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln35_reg_665 <= add_ln35_fu_372_p2;
        icmp_ln12_reg_629 <= icmp_ln12_fu_248_p2;
        select_ln12_1_reg_655[3 : 1] <= select_ln12_1_fu_340_p3[3 : 1];
        select_ln12_2_reg_660 <= select_ln12_2_fu_348_p3;
        select_ln12_reg_649 <= select_ln12_fu_324_p3;
        select_ln28_1_reg_634 <= select_ln28_1_fu_262_p3;
        shl_ln1_reg_670[3 : 1] <= shl_ln1_fu_378_p3[3 : 1];
        zext_ln25_1_reg_644[6 : 0] <= zext_ln25_1_fu_274_p1[6 : 0];
        zext_ln25_reg_639[6 : 0] <= zext_ln25_fu_270_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln9_reg_624 <= add_ln9_fu_236_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln19_reg_675 <= icmp_ln19_fu_386_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln19_fu_386_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln19_1_reg_684 <= select_ln19_1_fu_418_p3;
    end
end

always @ (*) begin
    if ((icmp_ln19_fu_386_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_reg_675 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_193_p4 = select_ln19_1_reg_684;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_193_p4 = mpr_0_reg_189;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_2_out_ce0 = 1'b1;
    end else begin
        conv_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_230_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln19_fu_386_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln19_fu_386_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_598_p2 = (indvar_flatten7_reg_144 + 6'd1);

assign add_ln19_1_fu_392_p2 = (indvar_flatten_reg_178 + 3'd1);

assign add_ln19_fu_430_p2 = (zext_ln19_fu_426_p1 + select_ln12_1_reg_655);

assign add_ln28_1_fu_459_p2 = (tmp_8_cast_fu_452_p3 + zext_ln25_reg_639);

assign add_ln35_1_fu_570_p2 = (add_ln35_reg_665 + zext_ln35_1_fu_567_p1);

assign add_ln35_2_fu_583_p2 = (tmp_5_cast_fu_575_p3 + zext_ln25_1_reg_644);

assign add_ln35_fu_372_p2 = (zext_ln35_2_fu_368_p1 + zext_ln35_fu_356_p1);

assign add_ln9_fu_236_p2 = (indvar_flatten25_reg_122 + 11'd1);

assign and_ln28_1_fu_553_p2 = (tmp_2_fu_224_p2 & and_ln28_fu_547_p2);

assign and_ln28_2_fu_306_p2 = (xor_ln28_fu_294_p2 & icmp_ln15_fu_300_p2);

assign and_ln28_fu_547_p2 = (or_ln28_fu_523_p2 & or_ln28_1_fu_541_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_493_p1 = max_1_reg_200;

assign bitcast_ln28_fu_475_p1 = conv_2_out_q0;

assign c_fu_593_p2 = (select_ln12_reg_649 + 3'd1);

assign conv_2_out_address0 = zext_ln28_2_fu_464_p1;

assign f_fu_242_p2 = (f_0_reg_133 + 7'd1);

assign grp_fu_611_p0 = 8'd11;

assign grp_fu_611_p1 = grp_fu_611_p10;

assign grp_fu_611_p10 = add_ln19_fu_430_p2;

assign grp_fu_611_p2 = grp_fu_611_p20;

assign grp_fu_611_p20 = j_fu_443_p2;

assign icmp_ln12_fu_248_p2 = ((indvar_flatten7_reg_144 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_300_p2 = ((c_0_reg_167 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_386_p2 = ((indvar_flatten_reg_178 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_404_p2 = ((mpc_0_reg_213 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_517_p2 = ((trunc_ln28_fu_489_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_529_p2 = ((tmp_1_fu_497_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_535_p2 = ((trunc_ln28_1_fu_507_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_511_p2 = ((tmp_fu_479_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_230_p2 = ((indvar_flatten25_reg_122 == 11'd1600) ? 1'b1 : 1'b0);

assign j_fu_443_p2 = (zext_ln22_fu_439_p1 + shl_ln1_reg_670);

assign max_2_fu_559_p3 = ((and_ln28_1_fu_553_p2[0:0] === 1'b1) ? conv_2_out_q0 : max_1_reg_200);

assign max_pool_out_address0 = zext_ln35_3_fu_588_p1;

assign max_pool_out_d0 = max_1_reg_200;

assign mpc_fu_469_p2 = (2'd1 + select_ln19_fu_410_p3);

assign mpr_fu_398_p2 = (2'd1 + ap_phi_mux_mpr_0_phi_fu_193_p4);

assign or_ln12_fu_318_p2 = (icmp_ln12_fu_248_p2 | and_ln28_2_fu_306_p2);

assign or_ln28_1_fu_541_p2 = (icmp_ln28_3_fu_535_p2 | icmp_ln28_2_fu_529_p2);

assign or_ln28_fu_523_p2 = (icmp_ln28_fu_511_p2 | icmp_ln28_1_fu_517_p2);

assign r_fu_312_p2 = (select_ln28_fu_254_p3 + 3'd1);

assign select_ln12_1_fu_340_p3 = ((and_ln28_2_fu_306_p2[0:0] === 1'b1) ? shl_ln25_mid1_fu_332_p3 : select_ln28_2_fu_286_p3);

assign select_ln12_2_fu_348_p3 = ((and_ln28_2_fu_306_p2[0:0] === 1'b1) ? r_fu_312_p2 : select_ln28_fu_254_p3);

assign select_ln12_3_fu_604_p3 = ((icmp_ln12_reg_629[0:0] === 1'b1) ? 6'd1 : add_ln12_1_fu_598_p2);

assign select_ln12_fu_324_p3 = ((or_ln12_fu_318_p2[0:0] === 1'b1) ? 3'd0 : c_0_reg_167);

assign select_ln19_1_fu_418_p3 = ((icmp_ln22_fu_404_p2[0:0] === 1'b1) ? mpr_fu_398_p2 : ap_phi_mux_mpr_0_phi_fu_193_p4);

assign select_ln19_fu_410_p3 = ((icmp_ln22_fu_404_p2[0:0] === 1'b1) ? 2'd0 : mpc_0_reg_213);

assign select_ln28_1_fu_262_p3 = ((icmp_ln12_fu_248_p2[0:0] === 1'b1) ? f_fu_242_p2 : f_0_reg_133);

assign select_ln28_2_fu_286_p3 = ((icmp_ln12_fu_248_p2[0:0] === 1'b1) ? 4'd0 : shl_ln_fu_278_p3);

assign select_ln28_fu_254_p3 = ((icmp_ln12_fu_248_p2[0:0] === 1'b1) ? 3'd0 : r_0_reg_156);

assign shl_ln1_fu_378_p3 = {{select_ln12_fu_324_p3}, {1'd0}};

assign shl_ln25_mid1_fu_332_p3 = {{r_fu_312_p2}, {1'd0}};

assign shl_ln_fu_278_p3 = {{r_0_reg_156}, {1'd0}};

assign tmp_1_fu_497_p4 = {{bitcast_ln28_1_fu_493_p1[30:23]}};

assign tmp_3_fu_360_p3 = {{select_ln12_2_fu_348_p3}, {2'd0}};

assign tmp_5_cast_fu_575_p3 = {{add_ln35_1_fu_570_p2}, {6'd0}};

assign tmp_8_cast_fu_452_p3 = {{grp_fu_611_p3}, {6'd0}};

assign tmp_fu_479_p4 = {{bitcast_ln28_fu_475_p1[30:23]}};

assign trunc_ln28_1_fu_507_p1 = bitcast_ln28_1_fu_493_p1[22:0];

assign trunc_ln28_fu_489_p1 = bitcast_ln28_fu_475_p1[22:0];

assign xor_ln28_fu_294_p2 = (icmp_ln12_fu_248_p2 ^ 1'd1);

assign zext_ln19_fu_426_p1 = select_ln19_1_fu_418_p3;

assign zext_ln22_fu_439_p1 = select_ln19_fu_410_p3;

assign zext_ln25_1_fu_274_p1 = select_ln28_1_fu_262_p3;

assign zext_ln25_fu_270_p1 = select_ln28_1_fu_262_p3;

assign zext_ln28_2_fu_464_p1 = add_ln28_1_fu_459_p2;

assign zext_ln35_1_fu_567_p1 = select_ln12_reg_649;

assign zext_ln35_2_fu_368_p1 = tmp_3_fu_360_p3;

assign zext_ln35_3_fu_588_p1 = add_ln35_2_fu_583_p2;

assign zext_ln35_fu_356_p1 = select_ln12_2_fu_348_p3;

always @ (posedge ap_clk) begin
    zext_ln25_reg_639[13:7] <= 7'b0000000;
    zext_ln25_1_reg_644[11:7] <= 5'b00000;
    select_ln12_1_reg_655[0] <= 1'b0;
    shl_ln1_reg_670[0] <= 1'b0;
end

endmodule //max_pool_2
