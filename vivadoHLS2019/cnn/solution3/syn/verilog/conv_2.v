// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_q0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_state8 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
input  [31:0] max_pool_1_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg conv_out_we0;
reg max_pool_1_out_ce0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] conv_2_weights_address0;
reg    conv_2_weights_ce0;
wire   [31:0] conv_2_weights_q0;
wire   [5:0] conv_2_bias_address0;
reg    conv_2_bias_ce0;
wire   [31:0] conv_2_bias_q0;
reg   [8:0] indvar_flatten21_reg_225;
reg   [1:0] wr_0_reg_236;
reg   [7:0] indvar_flatten_reg_247;
reg   [1:0] wc_0_reg_258;
reg   [31:0] w_sum_2_reg_269;
reg   [5:0] ch_0_reg_281;
wire   [0:0] icmp_ln8_fu_311_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln8_fu_317_p2;
reg   [12:0] add_ln8_reg_783;
wire   [0:0] icmp_ln11_fu_329_p2;
reg   [0:0] icmp_ln11_reg_788;
wire   [3:0] select_ln35_3_fu_343_p3;
reg   [3:0] select_ln35_3_reg_793;
wire   [6:0] select_ln35_4_fu_385_p3;
reg   [6:0] select_ln35_4_reg_799;
wire   [3:0] select_ln35_5_fu_393_p3;
reg   [3:0] select_ln35_5_reg_804;
wire   [63:0] zext_ln26_fu_412_p1;
reg   [63:0] zext_ln26_reg_812;
wire   [15:0] zext_ln35_11_fu_416_p1;
reg   [15:0] zext_ln35_11_reg_817;
reg   [12:0] conv_out_addr_reg_822;
wire   [0:0] icmp_ln18_fu_444_p2;
reg   [0:0] icmp_ln18_reg_827;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_827_pp0_iter1_reg;
wire   [8:0] add_ln18_1_fu_450_p2;
reg   [8:0] add_ln18_1_reg_831;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln18_1_fu_476_p3;
reg   [1:0] select_ln18_1_reg_836;
wire   [5:0] select_ln21_fu_553_p3;
reg   [5:0] select_ln21_reg_841;
wire   [1:0] select_ln21_1_fu_565_p3;
reg   [1:0] select_ln21_1_reg_846;
wire   [7:0] select_ln21_3_fu_679_p3;
reg   [7:0] select_ln21_3_reg_861;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [5:0] ch_fu_687_p2;
reg   [5:0] ch_reg_876;
wire   [31:0] grp_fu_298_p2;
wire   [31:0] grp_fu_292_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state7;
wire   [6:0] f_fu_692_p2;
reg   [6:0] f_reg_896;
wire   [10:0] select_ln11_fu_703_p3;
reg   [10:0] select_ln11_reg_901;
wire    ap_CS_fsm_state8;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [12:0] indvar_flatten43_reg_169;
wire    ap_CS_fsm_state9;
reg   [3:0] r_0_reg_180;
reg   [10:0] indvar_flatten29_reg_191;
reg   [3:0] c_0_reg_203;
reg   [6:0] f_0_reg_214;
reg   [8:0] ap_phi_mux_indvar_flatten21_phi_fu_229_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_240_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_251_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_262_p4;
wire   [31:0] ap_phi_mux_w_sum_2_phi_fu_273_p4;
reg   [5:0] ap_phi_mux_ch_0_phi_fu_285_p4;
wire   [63:0] zext_ln35_13_fu_430_p1;
wire   [63:0] zext_ln26_7_fu_657_p1;
wire   [63:0] zext_ln26_8_fu_668_p1;
reg   [31:0] grp_fu_292_p0;
reg   [31:0] grp_fu_292_p1;
wire    ap_block_pp0_stage1;
wire   [3:0] r_fu_323_p2;
wire   [0:0] icmp_ln14_fu_361_p2;
wire   [0:0] xor_ln35_fu_355_p2;
wire   [3:0] select_ln35_fu_335_p3;
wire   [0:0] and_ln35_fu_367_p2;
wire   [0:0] or_ln35_fu_379_p2;
wire   [3:0] c_fu_373_p2;
wire   [7:0] grp_fu_761_p3;
wire   [13:0] zext_ln35_12_fu_420_p1;
wire   [13:0] tmp_18_cast_fu_405_p3;
wire   [13:0] add_ln35_5_fu_424_p2;
wire   [3:0] zext_ln21_fu_435_p1;
wire   [0:0] icmp_ln21_fu_462_p2;
wire   [1:0] wr_fu_456_p2;
wire   [3:0] tmp_3_fu_488_p3;
wire   [4:0] zext_ln26_2_fu_496_p1;
wire   [4:0] zext_ln26_1_fu_484_p1;
wire   [4:0] sub_ln26_fu_500_p2;
wire   [3:0] zext_ln18_fu_510_p1;
wire   [3:0] add_ln18_fu_514_p2;
wire   [0:0] icmp_ln24_fu_529_p2;
wire   [0:0] xor_ln18_fu_523_p2;
wire   [1:0] select_ln18_fu_468_p3;
wire   [0:0] and_ln18_fu_535_p2;
wire   [0:0] or_ln21_fu_547_p2;
wire   [1:0] wc_fu_541_p2;
wire   [5:0] zext_ln21_2_fu_573_p1;
wire  signed [5:0] sext_ln26_fu_506_p1;
wire   [5:0] add_ln26_1_fu_577_p2;
wire   [4:0] trunc_ln26_fu_583_p1;
wire   [3:0] zext_ln21_1_fu_561_p1;
wire   [3:0] add_ln26_fu_439_p2;
wire   [3:0] add_ln26_2_fu_595_p2;
wire   [3:0] select_ln18_2_fu_600_p3;
wire   [3:0] select_ln21_2_fu_607_p3;
wire   [7:0] grp_fu_770_p3;
wire   [12:0] tmp_9_fu_619_p3;
wire   [9:0] zext_ln26_4_fu_630_p1;
wire   [9:0] tmp_4_fu_587_p3;
wire   [9:0] add_ln26_4_fu_638_p2;
wire   [15:0] tmp_25_cast_fu_644_p3;
wire   [15:0] add_ln26_5_fu_652_p2;
wire   [13:0] zext_ln26_6_fu_634_p1;
wire   [13:0] zext_ln21_3_fu_626_p1;
wire   [13:0] add_ln26_6_fu_662_p2;
wire   [7:0] add_ln21_fu_673_p2;
wire   [10:0] add_ln11_1_fu_697_p2;
wire   [31:0] bitcast_ln34_fu_710_p1;
wire   [7:0] tmp_fu_714_p4;
wire   [22:0] trunc_ln34_fu_724_p1;
wire   [0:0] icmp_ln34_1_fu_734_p2;
wire   [0:0] icmp_ln34_fu_728_p2;
wire   [0:0] or_ln34_fu_740_p2;
wire   [0:0] tmp_s_fu_305_p2;
wire   [0:0] and_ln34_fu_746_p2;
wire   [3:0] grp_fu_761_p0;
wire   [4:0] grp_fu_761_p1;
wire   [3:0] grp_fu_761_p2;
wire   [3:0] grp_fu_770_p0;
wire   [4:0] grp_fu_770_p1;
wire   [3:0] grp_fu_770_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_761_p00;
wire   [7:0] grp_fu_761_p20;
wire   [7:0] grp_fu_770_p00;
wire   [7:0] grp_fu_770_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_2_conv_2_weig8j #(
    .DataWidth( 32 ),
    .AddressRange( 18432 ),
    .AddressWidth( 15 ))
conv_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_weights_address0),
    .ce0(conv_2_weights_ce0),
    .q0(conv_2_weights_q0)
);

conv_2_conv_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
conv_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_bias_address0),
    .ce0(conv_2_bias_ce0),
    .q0(conv_2_bias_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_292_p0),
    .din1(grp_fu_292_p1),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_weights_q0),
    .din1(max_pool_1_out_q0),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U18(
    .din0(grp_fu_292_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_s_fu_305_p2)
);

cnn_mac_muladd_4nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_4nhbi_U19(
    .din0(grp_fu_761_p0),
    .din1(grp_fu_761_p1),
    .din2(grp_fu_761_p2),
    .dout(grp_fu_761_p3)
);

cnn_mac_muladd_4nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_4nhbi_U20(
    .din0(grp_fu_770_p0),
    .din1(grp_fu_770_p1),
    .din2(grp_fu_770_p2),
    .dout(grp_fu_770_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_0_reg_203 <= select_ln35_5_reg_804;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_203 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ch_0_reg_281 <= ch_reg_876;
    end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ch_0_reg_281 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        f_0_reg_214 <= f_reg_896;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_214 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten21_reg_225 <= add_ln18_1_reg_831;
    end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten21_reg_225 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten29_reg_191 <= select_ln11_reg_901;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten29_reg_191 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten43_reg_169 <= add_ln8_reg_783;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten43_reg_169 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_247 <= select_ln21_3_reg_861;
    end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_247 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_180 <= select_ln35_3_reg_793;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_180 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_2_reg_269 <= grp_fu_292_p2;
    end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_2_reg_269 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_258 <= select_ln21_1_reg_846;
    end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_258 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_236 <= select_ln18_1_reg_836;
    end else if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_236 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln18_1_reg_831 <= add_ln18_1_fu_450_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_783 <= add_ln8_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ch_reg_876 <= ch_fu_687_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_311_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_822 <= zext_ln35_13_fu_430_p1;
        icmp_ln11_reg_788 <= icmp_ln11_fu_329_p2;
        select_ln35_3_reg_793 <= select_ln35_3_fu_343_p3;
        select_ln35_4_reg_799 <= select_ln35_4_fu_385_p3;
        select_ln35_5_reg_804 <= select_ln35_5_fu_393_p3;
        zext_ln26_reg_812[6 : 0] <= zext_ln26_fu_412_p1[6 : 0];
        zext_ln35_11_reg_817[6 : 0] <= zext_ln35_11_fu_416_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        f_reg_896 <= f_fu_692_p2;
        select_ln11_reg_901 <= select_ln11_fu_703_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_827 <= icmp_ln18_fu_444_p2;
        icmp_ln18_reg_827_pp0_iter1_reg <= icmp_ln18_reg_827;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_1_reg_836 <= select_ln18_1_fu_476_p3;
        select_ln21_1_reg_846 <= select_ln21_1_fu_565_p3;
        select_ln21_3_reg_861 <= select_ln21_3_fu_679_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_444_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln21_reg_841 <= select_ln21_fu_553_p3;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_444_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln8_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ch_0_phi_fu_285_p4 = ch_reg_876;
    end else begin
        ap_phi_mux_ch_0_phi_fu_285_p4 = ch_0_reg_281;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_229_p4 = add_ln18_1_reg_831;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_229_p4 = indvar_flatten21_reg_225;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_251_p4 = select_ln21_3_reg_861;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_251_p4 = indvar_flatten_reg_247;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wc_0_phi_fu_262_p4 = select_ln21_1_reg_846;
    end else begin
        ap_phi_mux_wc_0_phi_fu_262_p4 = wc_0_reg_258;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_827 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wr_0_phi_fu_240_p4 = select_ln18_1_reg_836;
    end else begin
        ap_phi_mux_wr_0_phi_fu_240_p4 = wr_0_reg_236;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_2_bias_ce0 = 1'b1;
    end else begin
        conv_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_2_weights_ce0 = 1'b1;
    end else begin
        conv_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_292_p0 = w_sum_2_reg_269;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_292_p0 = ap_phi_mux_w_sum_2_phi_fu_273_p4;
    end else begin
        grp_fu_292_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_292_p1 = conv_2_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_292_p1 = grp_fu_298_p2;
    end else begin
        grp_fu_292_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_311_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln18_fu_444_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln18_fu_444_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_697_p2 = (11'd1 + indvar_flatten29_reg_191);

assign add_ln18_1_fu_450_p2 = (ap_phi_mux_indvar_flatten21_phi_fu_229_p4 + 9'd1);

assign add_ln18_fu_514_p2 = (select_ln35_3_reg_793 + zext_ln18_fu_510_p1);

assign add_ln21_fu_673_p2 = (ap_phi_mux_indvar_flatten_phi_fu_251_p4 + 8'd1);

assign add_ln26_1_fu_577_p2 = ($signed(zext_ln21_2_fu_573_p1) + $signed(sext_ln26_fu_506_p1));

assign add_ln26_2_fu_595_p2 = (select_ln35_5_reg_804 + zext_ln21_1_fu_561_p1);

assign add_ln26_4_fu_638_p2 = (zext_ln26_4_fu_630_p1 + tmp_4_fu_587_p3);

assign add_ln26_5_fu_652_p2 = (zext_ln35_11_reg_817 + tmp_25_cast_fu_644_p3);

assign add_ln26_6_fu_662_p2 = (zext_ln26_6_fu_634_p1 + zext_ln21_3_fu_626_p1);

assign add_ln26_fu_439_p2 = (select_ln35_5_reg_804 + zext_ln21_fu_435_p1);

assign add_ln35_5_fu_424_p2 = (zext_ln35_12_fu_420_p1 + tmp_18_cast_fu_405_p3);

assign add_ln8_fu_317_p2 = (indvar_flatten43_reg_169 + 13'd1);

assign and_ln18_fu_535_p2 = (xor_ln18_fu_523_p2 & icmp_ln24_fu_529_p2);

assign and_ln34_fu_746_p2 = (tmp_s_fu_305_p2 & or_ln34_fu_740_p2);

assign and_ln35_fu_367_p2 = (xor_ln35_fu_355_p2 & icmp_ln14_fu_361_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_2_phi_fu_273_p4 = w_sum_2_reg_269;

assign bitcast_ln34_fu_710_p1 = grp_fu_292_p2;

assign c_fu_373_p2 = (select_ln35_fu_335_p3 + 4'd1);

assign ch_fu_687_p2 = (select_ln21_reg_841 + 6'd1);

assign conv_2_bias_address0 = zext_ln26_reg_812;

assign conv_2_weights_address0 = zext_ln26_7_fu_657_p1;

assign conv_out_address0 = conv_out_addr_reg_822;

assign conv_out_d0 = ((and_ln34_fu_746_p2[0:0] === 1'b1) ? grp_fu_292_p2 : 32'd0);

assign f_fu_692_p2 = (7'd1 + select_ln35_4_reg_799);

assign grp_fu_761_p0 = grp_fu_761_p00;

assign grp_fu_761_p00 = select_ln35_3_fu_343_p3;

assign grp_fu_761_p1 = 8'd11;

assign grp_fu_761_p2 = grp_fu_761_p20;

assign grp_fu_761_p20 = select_ln35_5_fu_393_p3;

assign grp_fu_770_p0 = grp_fu_770_p00;

assign grp_fu_770_p00 = add_ln18_fu_514_p2;

assign grp_fu_770_p1 = 8'd13;

assign grp_fu_770_p2 = grp_fu_770_p20;

assign grp_fu_770_p20 = select_ln21_2_fu_607_p3;

assign icmp_ln11_fu_329_p2 = ((indvar_flatten29_reg_191 == 11'd704) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_361_p2 = ((f_0_reg_214 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_444_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_229_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_462_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_251_p4 == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_529_p2 = ((ap_phi_mux_ch_0_phi_fu_285_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln34_1_fu_734_p2 = ((trunc_ln34_fu_724_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln34_fu_728_p2 = ((tmp_fu_714_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_311_p2 = ((indvar_flatten43_reg_169 == 13'd7744) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln26_8_fu_668_p1;

assign or_ln21_fu_547_p2 = (icmp_ln21_fu_462_p2 | and_ln18_fu_535_p2);

assign or_ln34_fu_740_p2 = (icmp_ln34_fu_728_p2 | icmp_ln34_1_fu_734_p2);

assign or_ln35_fu_379_p2 = (icmp_ln11_fu_329_p2 | and_ln35_fu_367_p2);

assign r_fu_323_p2 = (r_0_reg_180 + 4'd1);

assign select_ln11_fu_703_p3 = ((icmp_ln11_reg_788[0:0] === 1'b1) ? 11'd1 : add_ln11_1_fu_697_p2);

assign select_ln18_1_fu_476_p3 = ((icmp_ln21_fu_462_p2[0:0] === 1'b1) ? wr_fu_456_p2 : ap_phi_mux_wr_0_phi_fu_240_p4);

assign select_ln18_2_fu_600_p3 = ((icmp_ln21_fu_462_p2[0:0] === 1'b1) ? select_ln35_5_reg_804 : add_ln26_fu_439_p2);

assign select_ln18_fu_468_p3 = ((icmp_ln21_fu_462_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_262_p4);

assign select_ln21_1_fu_565_p3 = ((and_ln18_fu_535_p2[0:0] === 1'b1) ? wc_fu_541_p2 : select_ln18_fu_468_p3);

assign select_ln21_2_fu_607_p3 = ((and_ln18_fu_535_p2[0:0] === 1'b1) ? add_ln26_2_fu_595_p2 : select_ln18_2_fu_600_p3);

assign select_ln21_3_fu_679_p3 = ((icmp_ln21_fu_462_p2[0:0] === 1'b1) ? 8'd1 : add_ln21_fu_673_p2);

assign select_ln21_fu_553_p3 = ((or_ln21_fu_547_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_ch_0_phi_fu_285_p4);

assign select_ln35_3_fu_343_p3 = ((icmp_ln11_fu_329_p2[0:0] === 1'b1) ? r_fu_323_p2 : r_0_reg_180);

assign select_ln35_4_fu_385_p3 = ((or_ln35_fu_379_p2[0:0] === 1'b1) ? 7'd0 : f_0_reg_214);

assign select_ln35_5_fu_393_p3 = ((and_ln35_fu_367_p2[0:0] === 1'b1) ? c_fu_373_p2 : select_ln35_fu_335_p3);

assign select_ln35_fu_335_p3 = ((icmp_ln11_fu_329_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_203);

assign sext_ln26_fu_506_p1 = $signed(sub_ln26_fu_500_p2);

assign sub_ln26_fu_500_p2 = (zext_ln26_2_fu_496_p1 - zext_ln26_1_fu_484_p1);

assign tmp_18_cast_fu_405_p3 = {{grp_fu_761_p3}, {6'd0}};

assign tmp_25_cast_fu_644_p3 = {{add_ln26_4_fu_638_p2}, {6'd0}};

assign tmp_3_fu_488_p3 = {{select_ln18_1_fu_476_p3}, {2'd0}};

assign tmp_4_fu_587_p3 = {{trunc_ln26_fu_583_p1}, {5'd0}};

assign tmp_9_fu_619_p3 = {{grp_fu_770_p3}, {5'd0}};

assign tmp_fu_714_p4 = {{bitcast_ln34_fu_710_p1[30:23]}};

assign trunc_ln26_fu_583_p1 = add_ln26_1_fu_577_p2[4:0];

assign trunc_ln34_fu_724_p1 = bitcast_ln34_fu_710_p1[22:0];

assign wc_fu_541_p2 = (select_ln18_fu_468_p3 + 2'd1);

assign wr_fu_456_p2 = (ap_phi_mux_wr_0_phi_fu_240_p4 + 2'd1);

assign xor_ln18_fu_523_p2 = (icmp_ln21_fu_462_p2 ^ 1'd1);

assign xor_ln35_fu_355_p2 = (icmp_ln11_fu_329_p2 ^ 1'd1);

assign zext_ln18_fu_510_p1 = select_ln18_1_fu_476_p3;

assign zext_ln21_1_fu_561_p1 = wc_fu_541_p2;

assign zext_ln21_2_fu_573_p1 = select_ln21_1_fu_565_p3;

assign zext_ln21_3_fu_626_p1 = tmp_9_fu_619_p3;

assign zext_ln21_fu_435_p1 = ap_phi_mux_wc_0_phi_fu_262_p4;

assign zext_ln26_1_fu_484_p1 = select_ln18_1_fu_476_p3;

assign zext_ln26_2_fu_496_p1 = tmp_3_fu_488_p3;

assign zext_ln26_4_fu_630_p1 = select_ln21_fu_553_p3;

assign zext_ln26_6_fu_634_p1 = select_ln21_fu_553_p3;

assign zext_ln26_7_fu_657_p1 = add_ln26_5_fu_652_p2;

assign zext_ln26_8_fu_668_p1 = add_ln26_6_fu_662_p2;

assign zext_ln26_fu_412_p1 = select_ln35_4_fu_385_p3;

assign zext_ln35_11_fu_416_p1 = select_ln35_4_fu_385_p3;

assign zext_ln35_12_fu_420_p1 = select_ln35_4_fu_385_p3;

assign zext_ln35_13_fu_430_p1 = add_ln35_5_fu_424_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_812[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln35_11_reg_817[15:7] <= 9'b000000000;
end

endmodule //conv_2
