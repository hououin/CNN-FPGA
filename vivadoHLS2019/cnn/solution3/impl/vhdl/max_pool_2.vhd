-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_2_out_ce0 : OUT STD_LOGIC;
    conv_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten_reg_178 : STD_LOGIC_VECTOR (2 downto 0);
    signal mpr_0_reg_189 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_200 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_213 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln9_fu_230_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln9_fu_236_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln9_reg_624 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln12_fu_248_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_629 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_1_fu_262_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_1_reg_634 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln25_fu_270_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln25_reg_639 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln25_1_fu_274_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln25_1_reg_644 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln12_fu_324_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_649 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_1_fu_340_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_1_reg_655 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_2_fu_348_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_2_reg_660 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln35_fu_372_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln35_reg_665 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_fu_378_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_reg_670 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln19_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_reg_675 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln19_1_fu_392_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln19_1_fu_418_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_1_reg_684 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_fu_469_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_2_fu_559_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal c_fu_593_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal select_ln12_3_fu_604_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal indvar_flatten25_reg_122 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_0_reg_133 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten7_reg_144 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_156 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_167 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_193_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln28_2_fu_464_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_588_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_242_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_fu_278_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln15_fu_300_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_fu_254_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln28_2_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_312_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln25_mid1_fu_332_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_2_fu_286_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_360_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_2_fu_368_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_fu_356_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_398_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln19_fu_426_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln19_fu_430_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_fu_410_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln22_fu_439_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_443_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_611_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_fu_452_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_fu_459_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln28_fu_475_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_1_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_479_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_489_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_517_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_497_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_507_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_567_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln35_1_fu_570_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_cast_fu_575_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_2_fu_583_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln12_1_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_611_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_611_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_611_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_611_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_611_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5nibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U26 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_2_out_q0,
        din1 => max_1_reg_200,
        opcode => ap_const_lv5_2,
        dout => tmp_2_fu_224_p2);

    cnn_mac_muladd_5nibs_U27 : component cnn_mac_muladd_5nibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_611_p0,
        din1 => grp_fu_611_p1,
        din2 => grp_fu_611_p2,
        dout => grp_fu_611_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                c_0_reg_167 <= c_fu_593_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_167 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_133 <= select_ln28_1_reg_634;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_133 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten25_reg_122 <= add_ln9_reg_624;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten25_reg_122 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                indvar_flatten7_reg_144 <= select_ln12_3_fu_604_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten7_reg_144 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_178 <= add_ln19_1_fu_392_p2;
            elsif (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_178 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_1_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_675 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                max_1_reg_200 <= max_2_fu_559_p3;
            elsif (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                max_1_reg_200 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpc_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpc_0_reg_213 <= mpc_fu_469_p2;
            elsif (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpc_0_reg_213 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_reg_675 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_189 <= select_ln19_1_reg_684;
            elsif (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                mpr_0_reg_189 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                r_0_reg_156 <= select_ln12_2_reg_660;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_156 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_230_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln35_reg_665 <= add_ln35_fu_372_p2;
                icmp_ln12_reg_629 <= icmp_ln12_fu_248_p2;
                    select_ln12_1_reg_655(3 downto 1) <= select_ln12_1_fu_340_p3(3 downto 1);
                select_ln12_2_reg_660 <= select_ln12_2_fu_348_p3;
                select_ln12_reg_649 <= select_ln12_fu_324_p3;
                select_ln28_1_reg_634 <= select_ln28_1_fu_262_p3;
                    shl_ln1_reg_670(3 downto 1) <= shl_ln1_fu_378_p3(3 downto 1);
                    zext_ln25_1_reg_644(6 downto 0) <= zext_ln25_1_fu_274_p1(6 downto 0);
                    zext_ln25_reg_639(6 downto 0) <= zext_ln25_fu_270_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln9_reg_624 <= add_ln9_fu_236_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln19_reg_675 <= icmp_ln19_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln19_fu_386_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln19_1_reg_684 <= select_ln19_1_fu_418_p3;
            end if;
        end if;
    end process;
    zext_ln25_reg_639(13 downto 7) <= "0000000";
    zext_ln25_1_reg_644(11 downto 7) <= "00000";
    select_ln12_1_reg_655(0) <= '0';
    shl_ln1_reg_670(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_230_p2, ap_CS_fsm_state2, icmp_ln19_fu_386_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln19_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln19_fu_386_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln12_1_fu_598_p2 <= std_logic_vector(unsigned(indvar_flatten7_reg_144) + unsigned(ap_const_lv6_1));
    add_ln19_1_fu_392_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_178) + unsigned(ap_const_lv3_1));
    add_ln19_fu_430_p2 <= std_logic_vector(unsigned(zext_ln19_fu_426_p1) + unsigned(select_ln12_1_reg_655));
    add_ln28_1_fu_459_p2 <= std_logic_vector(unsigned(tmp_8_cast_fu_452_p3) + unsigned(zext_ln25_reg_639));
    add_ln35_1_fu_570_p2 <= std_logic_vector(unsigned(add_ln35_reg_665) + unsigned(zext_ln35_1_fu_567_p1));
    add_ln35_2_fu_583_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_575_p3) + unsigned(zext_ln25_1_reg_644));
    add_ln35_fu_372_p2 <= std_logic_vector(unsigned(zext_ln35_2_fu_368_p1) + unsigned(zext_ln35_fu_356_p1));
    add_ln9_fu_236_p2 <= std_logic_vector(unsigned(indvar_flatten25_reg_122) + unsigned(ap_const_lv11_1));
    and_ln28_1_fu_553_p2 <= (tmp_2_fu_224_p2 and and_ln28_fu_547_p2);
    and_ln28_2_fu_306_p2 <= (xor_ln28_fu_294_p2 and icmp_ln15_fu_300_p2);
    and_ln28_fu_547_p2 <= (or_ln28_fu_523_p2 and or_ln28_1_fu_541_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln19_fu_386_p2)
    begin
        if ((icmp_ln19_fu_386_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln9_fu_230_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln9_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_193_p4_assign_proc : process(mpr_0_reg_189, icmp_ln19_reg_675, ap_CS_fsm_pp0_stage0, select_ln19_1_reg_684, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln19_reg_675 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_193_p4 <= select_ln19_1_reg_684;
        else 
            ap_phi_mux_mpr_0_phi_fu_193_p4 <= mpr_0_reg_189;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln9_fu_230_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln9_fu_230_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_493_p1 <= max_1_reg_200;
    bitcast_ln28_fu_475_p1 <= conv_2_out_q0;
    c_fu_593_p2 <= std_logic_vector(unsigned(select_ln12_reg_649) + unsigned(ap_const_lv3_1));
    conv_2_out_address0 <= zext_ln28_2_fu_464_p1(13 - 1 downto 0);

    conv_2_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_2_out_ce0 <= ap_const_logic_1;
        else 
            conv_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_242_p2 <= std_logic_vector(unsigned(f_0_reg_133) + unsigned(ap_const_lv7_1));
    grp_fu_611_p0 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_611_p1 <= grp_fu_611_p10(4 - 1 downto 0);
    grp_fu_611_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln19_fu_430_p2),8));
    grp_fu_611_p2 <= grp_fu_611_p20(4 - 1 downto 0);
    grp_fu_611_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_443_p2),8));
    icmp_ln12_fu_248_p2 <= "1" when (indvar_flatten7_reg_144 = ap_const_lv6_19) else "0";
    icmp_ln15_fu_300_p2 <= "1" when (c_0_reg_167 = ap_const_lv3_5) else "0";
    icmp_ln19_fu_386_p2 <= "1" when (indvar_flatten_reg_178 = ap_const_lv3_4) else "0";
    icmp_ln22_fu_404_p2 <= "1" when (mpc_0_reg_213 = ap_const_lv2_2) else "0";
    icmp_ln28_1_fu_517_p2 <= "1" when (trunc_ln28_fu_489_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_529_p2 <= "0" when (tmp_1_fu_497_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_535_p2 <= "1" when (trunc_ln28_1_fu_507_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_511_p2 <= "0" when (tmp_fu_479_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_230_p2 <= "1" when (indvar_flatten25_reg_122 = ap_const_lv11_640) else "0";
    j_fu_443_p2 <= std_logic_vector(unsigned(zext_ln22_fu_439_p1) + unsigned(shl_ln1_reg_670));
    max_2_fu_559_p3 <= 
        conv_2_out_q0 when (and_ln28_1_fu_553_p2(0) = '1') else 
        max_1_reg_200;
    max_pool_out_address0 <= zext_ln35_3_fu_588_p1(11 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= max_1_reg_200;

    max_pool_out_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_469_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln19_fu_410_p3));
    mpr_fu_398_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_mpr_0_phi_fu_193_p4));
    or_ln12_fu_318_p2 <= (icmp_ln12_fu_248_p2 or and_ln28_2_fu_306_p2);
    or_ln28_1_fu_541_p2 <= (icmp_ln28_3_fu_535_p2 or icmp_ln28_2_fu_529_p2);
    or_ln28_fu_523_p2 <= (icmp_ln28_fu_511_p2 or icmp_ln28_1_fu_517_p2);
    r_fu_312_p2 <= std_logic_vector(unsigned(select_ln28_fu_254_p3) + unsigned(ap_const_lv3_1));
    select_ln12_1_fu_340_p3 <= 
        shl_ln25_mid1_fu_332_p3 when (and_ln28_2_fu_306_p2(0) = '1') else 
        select_ln28_2_fu_286_p3;
    select_ln12_2_fu_348_p3 <= 
        r_fu_312_p2 when (and_ln28_2_fu_306_p2(0) = '1') else 
        select_ln28_fu_254_p3;
    select_ln12_3_fu_604_p3 <= 
        ap_const_lv6_1 when (icmp_ln12_reg_629(0) = '1') else 
        add_ln12_1_fu_598_p2;
    select_ln12_fu_324_p3 <= 
        ap_const_lv3_0 when (or_ln12_fu_318_p2(0) = '1') else 
        c_0_reg_167;
    select_ln19_1_fu_418_p3 <= 
        mpr_fu_398_p2 when (icmp_ln22_fu_404_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_193_p4;
    select_ln19_fu_410_p3 <= 
        ap_const_lv2_0 when (icmp_ln22_fu_404_p2(0) = '1') else 
        mpc_0_reg_213;
    select_ln28_1_fu_262_p3 <= 
        f_fu_242_p2 when (icmp_ln12_fu_248_p2(0) = '1') else 
        f_0_reg_133;
    select_ln28_2_fu_286_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_248_p2(0) = '1') else 
        shl_ln_fu_278_p3;
    select_ln28_fu_254_p3 <= 
        ap_const_lv3_0 when (icmp_ln12_fu_248_p2(0) = '1') else 
        r_0_reg_156;
    shl_ln1_fu_378_p3 <= (select_ln12_fu_324_p3 & ap_const_lv1_0);
    shl_ln25_mid1_fu_332_p3 <= (r_fu_312_p2 & ap_const_lv1_0);
    shl_ln_fu_278_p3 <= (r_0_reg_156 & ap_const_lv1_0);
    tmp_1_fu_497_p4 <= bitcast_ln28_1_fu_493_p1(30 downto 23);
    tmp_3_fu_360_p3 <= (select_ln12_2_fu_348_p3 & ap_const_lv2_0);
    tmp_5_cast_fu_575_p3 <= (add_ln35_1_fu_570_p2 & ap_const_lv6_0);
    tmp_8_cast_fu_452_p3 <= (grp_fu_611_p3 & ap_const_lv6_0);
    tmp_fu_479_p4 <= bitcast_ln28_fu_475_p1(30 downto 23);
    trunc_ln28_1_fu_507_p1 <= bitcast_ln28_1_fu_493_p1(23 - 1 downto 0);
    trunc_ln28_fu_489_p1 <= bitcast_ln28_fu_475_p1(23 - 1 downto 0);
    xor_ln28_fu_294_p2 <= (icmp_ln12_fu_248_p2 xor ap_const_lv1_1);
    zext_ln19_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_1_fu_418_p3),4));
    zext_ln22_fu_439_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_410_p3),4));
    zext_ln25_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_262_p3),12));
    zext_ln25_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_1_fu_262_p3),14));
    zext_ln28_2_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_459_p2),64));
    zext_ln35_1_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_reg_649),6));
    zext_ln35_2_fu_368_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_360_p3),6));
    zext_ln35_3_fu_588_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_583_p2),64));
    zext_ln35_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_2_fu_348_p3),6));
end behav;
