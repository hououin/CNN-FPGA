-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_1E40 : STD_LOGIC_VECTOR (12 downto 0) := "1111001000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_2C0 : STD_LOGIC_VECTOR (10 downto 0) := "01011000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv_2_weights_ce0 : STD_LOGIC;
    signal conv_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_2_bias_ce0 : STD_LOGIC;
    signal conv_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_225 : STD_LOGIC_VECTOR (8 downto 0);
    signal wr_0_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_247 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_0_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_281 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln8_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_317_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln8_reg_783 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln11_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_788 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_3_fu_343_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_3_reg_793 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_4_fu_385_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln35_4_reg_799 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln35_5_fu_393_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_5_reg_804 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_812 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_11_fu_416_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_11_reg_817 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_out_addr_reg_822 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln18_fu_444_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_827 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_827_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_450_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln18_1_reg_831 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln18_1_fu_476_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_836 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_fu_553_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln21_reg_841 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln21_1_fu_565_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_reg_846 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_3_fu_679_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln21_3_reg_861 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ch_fu_687_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_reg_876 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal f_fu_692_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_reg_896 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln11_fu_703_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_901 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal indvar_flatten43_reg_169 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal r_0_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_191 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_214 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_229_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_240_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_251_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_262_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_phi_fu_273_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_285_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_13_fu_430_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_7_fu_657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_668_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_fu_323_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_361_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_335_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_373_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_761_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_12_fu_420_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_18_cast_fu_405_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_5_fu_424_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln21_fu_435_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln21_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_456_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_488_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_496_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_484_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_500_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_510_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_514_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln24_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_523_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_468_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln18_fu_535_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_541_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln21_2_fu_573_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_506_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_577_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_583_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_1_fu_561_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_439_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_2_fu_595_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_fu_600_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_fu_607_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_770_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_619_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_4_fu_630_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_587_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_4_fu_638_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_25_cast_fu_644_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_5_fu_652_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_6_fu_634_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln21_3_fu_626_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln26_6_fu_662_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln21_fu_673_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_1_fu_697_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_710_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_714_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_724_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_734_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_728_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_746_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_761_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_761_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_761_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_770_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_770_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_770_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_761_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_761_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_770_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_770_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_4nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_2_conv_2_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_conv_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_2_weights_U : component conv_2_conv_2_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 18432,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_address0,
        ce0 => conv_2_weights_ce0,
        q0 => conv_2_weights_q0);

    conv_2_bias_U : component conv_2_conv_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_address0,
        ce0 => conv_2_bias_ce0,
        q0 => conv_2_bias_q0);

    cnn_fadd_32ns_32ncud_U16 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    cnn_fmul_32ns_32ndEe_U17 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_weights_q0,
        din1 => max_pool_1_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);

    cnn_fcmp_32ns_32neOg_U18 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_292_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_305_p2);

    cnn_mac_muladd_4nhbi_U19 : component cnn_mac_muladd_4nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_761_p0,
        din1 => grp_fu_761_p1,
        din2 => grp_fu_761_p2,
        dout => grp_fu_761_p3);

    cnn_mac_muladd_4nhbi_U20 : component cnn_mac_muladd_4nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_770_p0,
        din1 => grp_fu_770_p1,
        din2 => grp_fu_770_p2,
        dout => grp_fu_770_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                c_0_reg_203 <= select_ln35_5_reg_804;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_203 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_281 <= ch_reg_876;
            elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_281 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    f_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                f_0_reg_214 <= f_reg_896;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_214 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_225 <= add_ln18_1_reg_831;
            elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_225 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten29_reg_191 <= select_ln11_reg_901;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten29_reg_191 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvar_flatten43_reg_169 <= add_ln8_reg_783;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten43_reg_169 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_247 <= select_ln21_3_reg_861;
            elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_247 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                r_0_reg_180 <= select_ln35_3_reg_793;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_sum_2_reg_269 <= grp_fu_292_p2;
            elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_269 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_258 <= select_ln21_1_reg_846;
            elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_258 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_236 <= select_ln18_1_reg_836;
            elsif (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_236 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_831 <= add_ln18_1_fu_450_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_783 <= add_ln8_fu_317_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                ch_reg_876 <= ch_fu_687_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_311_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_822 <= zext_ln35_13_fu_430_p1(13 - 1 downto 0);
                icmp_ln11_reg_788 <= icmp_ln11_fu_329_p2;
                select_ln35_3_reg_793 <= select_ln35_3_fu_343_p3;
                select_ln35_4_reg_799 <= select_ln35_4_fu_385_p3;
                select_ln35_5_reg_804 <= select_ln35_5_fu_393_p3;
                    zext_ln26_reg_812(6 downto 0) <= zext_ln26_fu_412_p1(6 downto 0);
                    zext_ln35_11_reg_817(6 downto 0) <= zext_ln35_11_fu_416_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                f_reg_896 <= f_fu_692_p2;
                select_ln11_reg_901 <= select_ln11_fu_703_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_827 <= icmp_ln18_fu_444_p2;
                icmp_ln18_reg_827_pp0_iter1_reg <= icmp_ln18_reg_827;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_836 <= select_ln18_1_fu_476_p3;
                select_ln21_1_reg_846 <= select_ln21_1_fu_565_p3;
                select_ln21_3_reg_861 <= select_ln21_3_fu_679_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_444_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln21_reg_841 <= select_ln21_fu_553_p3;
            end if;
        end if;
    end process;
    zext_ln26_reg_812(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln35_11_reg_817(15 downto 7) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_311_p2, ap_CS_fsm_state2, icmp_ln18_fu_444_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_311_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_444_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_444_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_697_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(indvar_flatten29_reg_191));
    add_ln18_1_fu_450_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_229_p4) + unsigned(ap_const_lv9_1));
    add_ln18_fu_514_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_793) + unsigned(zext_ln18_fu_510_p1));
    add_ln21_fu_673_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_251_p4) + unsigned(ap_const_lv8_1));
    add_ln26_1_fu_577_p2 <= std_logic_vector(unsigned(zext_ln21_2_fu_573_p1) + unsigned(sext_ln26_fu_506_p1));
    add_ln26_2_fu_595_p2 <= std_logic_vector(unsigned(select_ln35_5_reg_804) + unsigned(zext_ln21_1_fu_561_p1));
    add_ln26_4_fu_638_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_630_p1) + unsigned(tmp_4_fu_587_p3));
    add_ln26_5_fu_652_p2 <= std_logic_vector(unsigned(zext_ln35_11_reg_817) + unsigned(tmp_25_cast_fu_644_p3));
    add_ln26_6_fu_662_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_634_p1) + unsigned(zext_ln21_3_fu_626_p1));
    add_ln26_fu_439_p2 <= std_logic_vector(unsigned(select_ln35_5_reg_804) + unsigned(zext_ln21_fu_435_p1));
    add_ln35_5_fu_424_p2 <= std_logic_vector(unsigned(zext_ln35_12_fu_420_p1) + unsigned(tmp_18_cast_fu_405_p3));
    add_ln8_fu_317_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_169) + unsigned(ap_const_lv13_1));
    and_ln18_fu_535_p2 <= (xor_ln18_fu_523_p2 and icmp_ln24_fu_529_p2);
    and_ln34_fu_746_p2 <= (tmp_s_fu_305_p2 and or_ln34_fu_740_p2);
    and_ln35_fu_367_p2 <= (xor_ln35_fu_355_p2 and icmp_ln14_fu_361_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_444_p2)
    begin
        if ((icmp_ln18_fu_444_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln8_fu_311_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln8_fu_311_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_285_p4_assign_proc : process(ch_0_reg_281, icmp_ln18_reg_827, ap_CS_fsm_pp0_stage0, ch_reg_876, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ch_0_phi_fu_285_p4 <= ch_reg_876;
        else 
            ap_phi_mux_ch_0_phi_fu_285_p4 <= ch_0_reg_281;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_229_p4_assign_proc : process(indvar_flatten21_reg_225, icmp_ln18_reg_827, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_831, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_229_p4 <= add_ln18_1_reg_831;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_229_p4 <= indvar_flatten21_reg_225;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_251_p4_assign_proc : process(indvar_flatten_reg_247, icmp_ln18_reg_827, ap_CS_fsm_pp0_stage0, select_ln21_3_reg_861, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_251_p4 <= select_ln21_3_reg_861;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_251_p4 <= indvar_flatten_reg_247;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_phi_fu_273_p4 <= w_sum_2_reg_269;

    ap_phi_mux_wc_0_phi_fu_262_p4_assign_proc : process(wc_0_reg_258, icmp_ln18_reg_827, ap_CS_fsm_pp0_stage0, select_ln21_1_reg_846, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wc_0_phi_fu_262_p4 <= select_ln21_1_reg_846;
        else 
            ap_phi_mux_wc_0_phi_fu_262_p4 <= wc_0_reg_258;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_240_p4_assign_proc : process(wr_0_reg_236, icmp_ln18_reg_827, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_836, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_827 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wr_0_phi_fu_240_p4 <= select_ln18_1_reg_836;
        else 
            ap_phi_mux_wr_0_phi_fu_240_p4 <= wr_0_reg_236;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_311_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_311_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_710_p1 <= grp_fu_292_p2;
    c_fu_373_p2 <= std_logic_vector(unsigned(select_ln35_fu_335_p3) + unsigned(ap_const_lv4_1));
    ch_fu_687_p2 <= std_logic_vector(unsigned(select_ln21_reg_841) + unsigned(ap_const_lv6_1));
    conv_2_bias_address0 <= zext_ln26_reg_812(6 - 1 downto 0);

    conv_2_bias_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_address0 <= zext_ln26_7_fu_657_p1(15 - 1 downto 0);

    conv_2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_822;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_292_p2 when (and_ln34_fu_746_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_692_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln35_4_reg_799));

    grp_fu_292_p0_assign_proc : process(w_sum_2_reg_269, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0, ap_phi_mux_w_sum_2_phi_fu_273_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_292_p0 <= w_sum_2_reg_269;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_292_p0 <= ap_phi_mux_w_sum_2_phi_fu_273_p4;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(conv_2_bias_q0, ap_CS_fsm_pp0_stage0, grp_fu_298_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_292_p1 <= conv_2_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_292_p1 <= grp_fu_298_p2;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_761_p0 <= grp_fu_761_p00(4 - 1 downto 0);
    grp_fu_761_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_343_p3),8));
    grp_fu_761_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_761_p2 <= grp_fu_761_p20(4 - 1 downto 0);
    grp_fu_761_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_5_fu_393_p3),8));
    grp_fu_770_p0 <= grp_fu_770_p00(4 - 1 downto 0);
    grp_fu_770_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_514_p2),8));
    grp_fu_770_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_770_p2 <= grp_fu_770_p20(4 - 1 downto 0);
    grp_fu_770_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_fu_607_p3),8));
    icmp_ln11_fu_329_p2 <= "1" when (indvar_flatten29_reg_191 = ap_const_lv11_2C0) else "0";
    icmp_ln14_fu_361_p2 <= "1" when (f_0_reg_214 = ap_const_lv7_40) else "0";
    icmp_ln18_fu_444_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_229_p4 = ap_const_lv9_120) else "0";
    icmp_ln21_fu_462_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_251_p4 = ap_const_lv8_60) else "0";
    icmp_ln24_fu_529_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_285_p4 = ap_const_lv6_20) else "0";
    icmp_ln34_1_fu_734_p2 <= "1" when (trunc_ln34_fu_724_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_728_p2 <= "0" when (tmp_fu_714_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_311_p2 <= "1" when (indvar_flatten43_reg_169 = ap_const_lv13_1E40) else "0";
    max_pool_1_out_address0 <= zext_ln26_8_fu_668_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_547_p2 <= (icmp_ln21_fu_462_p2 or and_ln18_fu_535_p2);
    or_ln34_fu_740_p2 <= (icmp_ln34_fu_728_p2 or icmp_ln34_1_fu_734_p2);
    or_ln35_fu_379_p2 <= (icmp_ln11_fu_329_p2 or and_ln35_fu_367_p2);
    r_fu_323_p2 <= std_logic_vector(unsigned(r_0_reg_180) + unsigned(ap_const_lv4_1));
    select_ln11_fu_703_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_reg_788(0) = '1') else 
        add_ln11_1_fu_697_p2;
    select_ln18_1_fu_476_p3 <= 
        wr_fu_456_p2 when (icmp_ln21_fu_462_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_240_p4;
    select_ln18_2_fu_600_p3 <= 
        select_ln35_5_reg_804 when (icmp_ln21_fu_462_p2(0) = '1') else 
        add_ln26_fu_439_p2;
    select_ln18_fu_468_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_462_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_262_p4;
    select_ln21_1_fu_565_p3 <= 
        wc_fu_541_p2 when (and_ln18_fu_535_p2(0) = '1') else 
        select_ln18_fu_468_p3;
    select_ln21_2_fu_607_p3 <= 
        add_ln26_2_fu_595_p2 when (and_ln18_fu_535_p2(0) = '1') else 
        select_ln18_2_fu_600_p3;
    select_ln21_3_fu_679_p3 <= 
        ap_const_lv8_1 when (icmp_ln21_fu_462_p2(0) = '1') else 
        add_ln21_fu_673_p2;
    select_ln21_fu_553_p3 <= 
        ap_const_lv6_0 when (or_ln21_fu_547_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_285_p4;
    select_ln35_3_fu_343_p3 <= 
        r_fu_323_p2 when (icmp_ln11_fu_329_p2(0) = '1') else 
        r_0_reg_180;
    select_ln35_4_fu_385_p3 <= 
        ap_const_lv7_0 when (or_ln35_fu_379_p2(0) = '1') else 
        f_0_reg_214;
    select_ln35_5_fu_393_p3 <= 
        c_fu_373_p2 when (and_ln35_fu_367_p2(0) = '1') else 
        select_ln35_fu_335_p3;
    select_ln35_fu_335_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_329_p2(0) = '1') else 
        c_0_reg_203;
        sext_ln26_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_500_p2),6));

    sub_ln26_fu_500_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_496_p1) - unsigned(zext_ln26_1_fu_484_p1));
    tmp_18_cast_fu_405_p3 <= (grp_fu_761_p3 & ap_const_lv6_0);
    tmp_25_cast_fu_644_p3 <= (add_ln26_4_fu_638_p2 & ap_const_lv6_0);
    tmp_3_fu_488_p3 <= (select_ln18_1_fu_476_p3 & ap_const_lv2_0);
    tmp_4_fu_587_p3 <= (trunc_ln26_fu_583_p1 & ap_const_lv5_0);
    tmp_9_fu_619_p3 <= (grp_fu_770_p3 & ap_const_lv5_0);
    tmp_fu_714_p4 <= bitcast_ln34_fu_710_p1(30 downto 23);
    trunc_ln26_fu_583_p1 <= add_ln26_1_fu_577_p2(5 - 1 downto 0);
    trunc_ln34_fu_724_p1 <= bitcast_ln34_fu_710_p1(23 - 1 downto 0);
    wc_fu_541_p2 <= std_logic_vector(unsigned(select_ln18_fu_468_p3) + unsigned(ap_const_lv2_1));
    wr_fu_456_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_240_p4) + unsigned(ap_const_lv2_1));
    xor_ln18_fu_523_p2 <= (icmp_ln21_fu_462_p2 xor ap_const_lv1_1);
    xor_ln35_fu_355_p2 <= (icmp_ln11_fu_329_p2 xor ap_const_lv1_1);
    zext_ln18_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_476_p3),4));
    zext_ln21_1_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_541_p2),4));
    zext_ln21_2_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_565_p3),6));
    zext_ln21_3_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_619_p3),14));
    zext_ln21_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_262_p4),4));
    zext_ln26_1_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_476_p3),5));
    zext_ln26_2_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_488_p3),5));
    zext_ln26_4_fu_630_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_553_p3),10));
    zext_ln26_6_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_553_p3),14));
    zext_ln26_7_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_652_p2),64));
    zext_ln26_8_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_662_p2),64));
    zext_ln26_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_385_p3),64));
    zext_ln35_11_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_385_p3),16));
    zext_ln35_12_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_4_fu_385_p3),14));
    zext_ln35_13_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_5_fu_424_p2),64));
end behav;
