// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        conv_out_address1,
        conv_out_ce1,
        conv_out_q1,
        max_pool_out_0_address0,
        max_pool_out_0_ce0,
        max_pool_out_0_we0,
        max_pool_out_0_d0,
        max_pool_out_1_address0,
        max_pool_out_1_ce0,
        max_pool_out_1_we0,
        max_pool_out_1_d0,
        max_pool_out_2_address0,
        max_pool_out_2_ce0,
        max_pool_out_2_we0,
        max_pool_out_2_d0,
        max_pool_out_3_address0,
        max_pool_out_3_ce0,
        max_pool_out_3_we0,
        max_pool_out_3_d0,
        max_pool_out_4_address0,
        max_pool_out_4_ce0,
        max_pool_out_4_we0,
        max_pool_out_4_d0,
        max_pool_out_5_address0,
        max_pool_out_5_ce0,
        max_pool_out_5_we0,
        max_pool_out_5_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_pp0_stage0 = 5'd4;
parameter    ap_ST_fsm_pp0_stage1 = 5'd8;
parameter    ap_ST_fsm_state7 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [11:0] conv_out_address1;
output   conv_out_ce1;
input  [31:0] conv_out_q1;
output  [7:0] max_pool_out_0_address0;
output   max_pool_out_0_ce0;
output   max_pool_out_0_we0;
output  [31:0] max_pool_out_0_d0;
output  [7:0] max_pool_out_1_address0;
output   max_pool_out_1_ce0;
output   max_pool_out_1_we0;
output  [31:0] max_pool_out_1_d0;
output  [7:0] max_pool_out_2_address0;
output   max_pool_out_2_ce0;
output   max_pool_out_2_we0;
output  [31:0] max_pool_out_2_d0;
output  [7:0] max_pool_out_3_address0;
output   max_pool_out_3_ce0;
output   max_pool_out_3_we0;
output  [31:0] max_pool_out_3_d0;
output  [7:0] max_pool_out_4_address0;
output   max_pool_out_4_ce0;
output   max_pool_out_4_we0;
output  [31:0] max_pool_out_4_d0;
output  [7:0] max_pool_out_5_address0;
output   max_pool_out_5_ce0;
output   max_pool_out_5_we0;
output  [31:0] max_pool_out_5_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg conv_out_ce1;
reg max_pool_out_0_ce0;
reg max_pool_out_0_we0;
reg max_pool_out_1_ce0;
reg max_pool_out_1_we0;
reg max_pool_out_2_ce0;
reg max_pool_out_2_we0;
reg max_pool_out_3_ce0;
reg max_pool_out_3_we0;
reg max_pool_out_4_ce0;
reg max_pool_out_4_we0;
reg max_pool_out_5_ce0;
reg max_pool_out_5_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] max_0_reg_269;
reg   [1:0] mpr_0_reg_287;
wire   [0:0] icmp_ln10_fu_304_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln10_fu_310_p2;
reg   [9:0] add_ln10_reg_790;
wire   [0:0] icmp_ln13_fu_322_p2;
reg   [0:0] icmp_ln13_reg_795;
wire   [2:0] select_ln29_6_fu_336_p3;
reg   [2:0] select_ln29_6_reg_800;
wire   [12:0] zext_ln26_fu_344_p1;
reg   [12:0] zext_ln26_reg_805;
wire   [3:0] select_ln13_fu_394_p3;
reg   [3:0] select_ln13_reg_811;
wire   [4:0] select_ln13_6_fu_410_p3;
reg   [4:0] select_ln13_6_reg_817;
wire   [3:0] select_ln13_7_fu_418_p3;
reg   [3:0] select_ln13_7_reg_822;
wire   [7:0] mul_ln36_fu_430_p2;
reg   [7:0] mul_ln36_reg_827;
wire   [9:0] zext_ln27_fu_444_p1;
reg   [9:0] zext_ln27_reg_832;
wire   [9:0] zext_ln20_1_fu_454_p1;
reg   [9:0] zext_ln20_1_reg_837;
wire   [0:0] icmp_ln20_fu_458_p2;
reg   [0:0] icmp_ln20_reg_842;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_842_pp0_iter1_reg;
wire   [1:0] mpr_fu_464_p2;
reg   [1:0] mpr_reg_846;
reg    ap_enable_reg_pp0_iter0;
reg   [31:0] conv_out_load_reg_861;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [31:0] conv_out_load_1_reg_868;
wire   [31:0] select_ln29_fu_654_p3;
reg   [31:0] select_ln29_reg_875;
wire   [31:0] select_ln29_2_fu_744_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [3:0] c_fu_768_p2;
wire    ap_CS_fsm_state7;
wire   [7:0] select_ln13_8_fu_779_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [9:0] indvar_flatten17_reg_213;
reg   [2:0] f_0_reg_224;
reg   [7:0] indvar_flatten_reg_235;
reg   [3:0] r_0_reg_247;
reg   [3:0] c_0_reg_258;
reg   [31:0] ap_phi_mux_max_0_phi_fu_279_p4;
wire    ap_block_pp0_stage1;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_291_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln29_4_fu_525_p1;
wire   [63:0] zext_ln29_6_fu_566_p1;
wire   [63:0] zext_ln36_5_fu_758_p1;
reg   [31:0] grp_fu_298_p0;
reg   [31:0] grp_fu_298_p1;
wire   [2:0] f_fu_316_p2;
wire   [4:0] shl_ln_fu_348_p3;
wire   [0:0] icmp_ln16_fu_370_p2;
wire   [0:0] xor_ln29_fu_364_p2;
wire   [3:0] select_ln29_5_fu_328_p3;
wire   [0:0] and_ln29_7_fu_376_p2;
wire   [0:0] or_ln13_fu_388_p2;
wire   [3:0] r_fu_382_p2;
wire   [4:0] shl_ln26_mid1_fu_402_p3;
wire   [4:0] select_ln29_7_fu_356_p3;
wire   [3:0] mul_ln36_fu_430_p0;
wire   [4:0] shl_ln2_fu_436_p3;
wire   [4:0] or_ln27_fu_448_p2;
wire   [4:0] zext_ln20_fu_470_p1;
wire   [4:0] i_fu_474_p2;
wire   [4:0] mul_ln29_fu_483_p1;
wire   [9:0] mul_ln29_fu_483_p2;
wire   [9:0] add_ln29_fu_489_p2;
wire   [10:0] tmp_fu_502_p3;
wire   [12:0] p_shl2_cast_fu_494_p3;
wire   [12:0] zext_ln29_3_fu_510_p1;
wire   [12:0] sub_ln29_fu_514_p2;
wire   [12:0] add_ln29_4_fu_520_p2;
wire   [9:0] add_ln29_5_fu_530_p2;
wire   [10:0] tmp_6_fu_543_p3;
wire   [12:0] p_shl_cast_fu_535_p3;
wire   [12:0] zext_ln29_5_fu_551_p1;
wire   [12:0] sub_ln29_1_fu_555_p2;
wire   [12:0] add_ln29_6_fu_561_p2;
wire   [31:0] bitcast_ln29_fu_571_p1;
wire   [31:0] bitcast_ln29_4_fu_588_p1;
wire   [7:0] tmp_s_fu_574_p4;
wire   [22:0] trunc_ln29_fu_584_p1;
wire   [0:0] icmp_ln29_8_fu_612_p2;
wire   [0:0] icmp_ln29_fu_606_p2;
wire   [7:0] tmp_1_fu_592_p4;
wire   [22:0] trunc_ln29_4_fu_602_p1;
wire   [0:0] icmp_ln29_10_fu_630_p2;
wire   [0:0] icmp_ln29_9_fu_624_p2;
wire   [0:0] or_ln29_fu_618_p2;
wire   [0:0] or_ln29_4_fu_636_p2;
wire   [0:0] and_ln29_fu_642_p2;
wire   [0:0] grp_fu_298_p2;
wire   [0:0] and_ln29_4_fu_648_p2;
wire   [31:0] bitcast_ln29_5_fu_662_p1;
wire   [31:0] bitcast_ln29_6_fu_679_p1;
wire   [7:0] tmp_3_fu_665_p4;
wire   [22:0] trunc_ln29_5_fu_675_p1;
wire   [0:0] icmp_ln29_12_fu_702_p2;
wire   [0:0] icmp_ln29_11_fu_696_p2;
wire   [7:0] tmp_4_fu_682_p4;
wire   [22:0] trunc_ln29_6_fu_692_p1;
wire   [0:0] icmp_ln29_14_fu_720_p2;
wire   [0:0] icmp_ln29_13_fu_714_p2;
wire   [0:0] or_ln29_5_fu_708_p2;
wire   [0:0] or_ln29_6_fu_726_p2;
wire   [0:0] and_ln29_5_fu_732_p2;
wire   [0:0] and_ln29_6_fu_738_p2;
wire   [7:0] zext_ln36_4_fu_750_p1;
wire   [7:0] add_ln36_fu_753_p2;
wire   [7:0] add_ln13_2_fu_773_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
reg   [4:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln29_fu_483_p10;
wire   [7:0] mul_ln36_fu_430_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ndEe_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_298_p0),
    .din1(grp_fu_298_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_298_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_0_reg_258 <= c_fu_768_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_258 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        f_0_reg_224 <= select_ln29_6_reg_800;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_224 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten17_reg_213 <= add_ln10_reg_790;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten17_reg_213 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        indvar_flatten_reg_235 <= select_ln13_8_fu_779_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_235 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_842_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        max_0_reg_269 <= select_ln29_2_fu_744_p3;
    end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_0_reg_269 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_842 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpr_0_reg_287 <= mpr_reg_846;
    end else if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpr_0_reg_287 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        r_0_reg_247 <= select_ln13_7_reg_822;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_247 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_790 <= add_ln10_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_load_1_reg_868 <= conv_out_q1;
        conv_out_load_reg_861 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_304_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln13_reg_795 <= icmp_ln13_fu_322_p2;
        mul_ln36_reg_827 <= mul_ln36_fu_430_p2;
        select_ln13_6_reg_817[4 : 1] <= select_ln13_6_fu_410_p3[4 : 1];
        select_ln13_7_reg_822 <= select_ln13_7_fu_418_p3;
        select_ln13_reg_811 <= select_ln13_fu_394_p3;
        select_ln29_6_reg_800 <= select_ln29_6_fu_336_p3;
        zext_ln20_1_reg_837[4 : 1] <= zext_ln20_1_fu_454_p1[4 : 1];
        zext_ln26_reg_805[2 : 0] <= zext_ln26_fu_344_p1[2 : 0];
        zext_ln27_reg_832[4 : 1] <= zext_ln27_fu_444_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln20_reg_842 <= icmp_ln20_fu_458_p2;
        icmp_ln20_reg_842_pp0_iter1_reg <= icmp_ln20_reg_842;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        mpr_reg_846 <= mpr_fu_464_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_reg_842 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_875 <= select_ln29_fu_654_p3;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_458_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_842_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        ap_phi_mux_max_0_phi_fu_279_p4 = select_ln29_2_fu_744_p3;
    end else begin
        ap_phi_mux_max_0_phi_fu_279_p4 = max_0_reg_269;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_842 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_291_p4 = mpr_reg_846;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_291_p4 = mpr_0_reg_287;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_ce1 = 1'b1;
    end else begin
        conv_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_298_p0 = conv_out_load_1_reg_868;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_298_p0 = conv_out_q0;
    end else begin
        grp_fu_298_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_298_p1 = select_ln29_fu_654_p3;
    end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_298_p1 = ap_phi_mux_max_0_phi_fu_279_p4;
    end else begin
        grp_fu_298_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_0_ce0 = 1'b1;
    end else begin
        max_pool_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln29_6_reg_800 == 3'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_out_0_we0 = 1'b1;
    end else begin
        max_pool_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_1_ce0 = 1'b1;
    end else begin
        max_pool_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln29_6_reg_800 == 3'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_out_1_we0 = 1'b1;
    end else begin
        max_pool_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_2_ce0 = 1'b1;
    end else begin
        max_pool_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln29_6_reg_800 == 3'd2) & (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_out_2_we0 = 1'b1;
    end else begin
        max_pool_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_3_ce0 = 1'b1;
    end else begin
        max_pool_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln29_6_reg_800 == 3'd3) & (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_out_3_we0 = 1'b1;
    end else begin
        max_pool_out_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_4_ce0 = 1'b1;
    end else begin
        max_pool_out_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((select_ln29_6_reg_800 == 3'd4) & (1'b1 == ap_CS_fsm_state7))) begin
        max_pool_out_4_we0 = 1'b1;
    end else begin
        max_pool_out_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_pool_out_5_ce0 = 1'b1;
    end else begin
        max_pool_out_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & ((select_ln29_6_reg_800 == 3'd5) | ((select_ln29_6_reg_800 == 3'd6) | (select_ln29_6_reg_800 == 3'd7))))) begin
        max_pool_out_5_we0 = 1'b1;
    end else begin
        max_pool_out_5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_304_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln20_fu_458_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (icmp_ln20_fu_458_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_310_p2 = (indvar_flatten17_reg_213 + 10'd1);

assign add_ln13_2_fu_773_p2 = (indvar_flatten_reg_235 + 8'd1);

assign add_ln29_4_fu_520_p2 = (sub_ln29_fu_514_p2 + zext_ln26_reg_805);

assign add_ln29_5_fu_530_p2 = (mul_ln29_fu_483_p2 + zext_ln20_1_reg_837);

assign add_ln29_6_fu_561_p2 = (sub_ln29_1_fu_555_p2 + zext_ln26_reg_805);

assign add_ln29_fu_489_p2 = (mul_ln29_fu_483_p2 + zext_ln27_reg_832);

assign add_ln36_fu_753_p2 = (mul_ln36_reg_827 + zext_ln36_4_fu_750_p1);

assign and_ln29_4_fu_648_p2 = (grp_fu_298_p2 & and_ln29_fu_642_p2);

assign and_ln29_5_fu_732_p2 = (or_ln29_6_fu_726_p2 & or_ln29_5_fu_708_p2);

assign and_ln29_6_fu_738_p2 = (grp_fu_298_p2 & and_ln29_5_fu_732_p2);

assign and_ln29_7_fu_376_p2 = (xor_ln29_fu_364_p2 & icmp_ln16_fu_370_p2);

assign and_ln29_fu_642_p2 = (or_ln29_fu_618_p2 & or_ln29_4_fu_636_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_4_fu_588_p1 = max_0_reg_269;

assign bitcast_ln29_5_fu_662_p1 = conv_out_load_1_reg_868;

assign bitcast_ln29_6_fu_679_p1 = select_ln29_reg_875;

assign bitcast_ln29_fu_571_p1 = conv_out_load_reg_861;

assign c_fu_768_p2 = (select_ln13_reg_811 + 4'd1);

assign conv_out_address0 = zext_ln29_4_fu_525_p1;

assign conv_out_address1 = zext_ln29_6_fu_566_p1;

assign f_fu_316_p2 = (f_0_reg_224 + 3'd1);

assign i_fu_474_p2 = (zext_ln20_fu_470_p1 + select_ln13_6_reg_817);

assign icmp_ln10_fu_304_p2 = ((indvar_flatten17_reg_213 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_322_p2 = ((indvar_flatten_reg_235 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_370_p2 = ((c_0_reg_258 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_458_p2 = ((ap_phi_mux_mpr_0_phi_fu_291_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_630_p2 = ((trunc_ln29_4_fu_602_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_696_p2 = ((tmp_3_fu_665_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_702_p2 = ((trunc_ln29_5_fu_675_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_714_p2 = ((tmp_4_fu_682_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_14_fu_720_p2 = ((trunc_ln29_6_fu_692_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_612_p2 = ((trunc_ln29_fu_584_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_624_p2 = ((tmp_1_fu_592_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_606_p2 = ((tmp_s_fu_574_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_0_address0 = zext_ln36_5_fu_758_p1;

assign max_pool_out_0_d0 = max_0_reg_269;

assign max_pool_out_1_address0 = zext_ln36_5_fu_758_p1;

assign max_pool_out_1_d0 = max_0_reg_269;

assign max_pool_out_2_address0 = zext_ln36_5_fu_758_p1;

assign max_pool_out_2_d0 = max_0_reg_269;

assign max_pool_out_3_address0 = zext_ln36_5_fu_758_p1;

assign max_pool_out_3_d0 = max_0_reg_269;

assign max_pool_out_4_address0 = zext_ln36_5_fu_758_p1;

assign max_pool_out_4_d0 = max_0_reg_269;

assign max_pool_out_5_address0 = zext_ln36_5_fu_758_p1;

assign max_pool_out_5_d0 = max_0_reg_269;

assign mpr_fu_464_p2 = (ap_phi_mux_mpr_0_phi_fu_291_p4 + 2'd1);

assign mul_ln29_fu_483_p1 = mul_ln29_fu_483_p10;

assign mul_ln29_fu_483_p10 = i_fu_474_p2;

assign mul_ln29_fu_483_p2 = (10'd26 * mul_ln29_fu_483_p1);

assign mul_ln36_fu_430_p0 = mul_ln36_fu_430_p00;

assign mul_ln36_fu_430_p00 = select_ln13_7_fu_418_p3;

assign mul_ln36_fu_430_p2 = (mul_ln36_fu_430_p0 * $signed('hD));

assign or_ln13_fu_388_p2 = (icmp_ln13_fu_322_p2 | and_ln29_7_fu_376_p2);

assign or_ln27_fu_448_p2 = (shl_ln2_fu_436_p3 | 5'd1);

assign or_ln29_4_fu_636_p2 = (icmp_ln29_9_fu_624_p2 | icmp_ln29_10_fu_630_p2);

assign or_ln29_5_fu_708_p2 = (icmp_ln29_12_fu_702_p2 | icmp_ln29_11_fu_696_p2);

assign or_ln29_6_fu_726_p2 = (icmp_ln29_14_fu_720_p2 | icmp_ln29_13_fu_714_p2);

assign or_ln29_fu_618_p2 = (icmp_ln29_fu_606_p2 | icmp_ln29_8_fu_612_p2);

assign p_shl2_cast_fu_494_p3 = {{add_ln29_fu_489_p2}, {3'd0}};

assign p_shl_cast_fu_535_p3 = {{add_ln29_5_fu_530_p2}, {3'd0}};

assign r_fu_382_p2 = (select_ln29_5_fu_328_p3 + 4'd1);

assign select_ln13_6_fu_410_p3 = ((and_ln29_7_fu_376_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_402_p3 : select_ln29_7_fu_356_p3);

assign select_ln13_7_fu_418_p3 = ((and_ln29_7_fu_376_p2[0:0] === 1'b1) ? r_fu_382_p2 : select_ln29_5_fu_328_p3);

assign select_ln13_8_fu_779_p3 = ((icmp_ln13_reg_795[0:0] === 1'b1) ? 8'd1 : add_ln13_2_fu_773_p2);

assign select_ln13_fu_394_p3 = ((or_ln13_fu_388_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_258);

assign select_ln29_2_fu_744_p3 = ((and_ln29_6_fu_738_p2[0:0] === 1'b1) ? conv_out_load_1_reg_868 : select_ln29_reg_875);

assign select_ln29_5_fu_328_p3 = ((icmp_ln13_fu_322_p2[0:0] === 1'b1) ? 4'd0 : r_0_reg_247);

assign select_ln29_6_fu_336_p3 = ((icmp_ln13_fu_322_p2[0:0] === 1'b1) ? f_fu_316_p2 : f_0_reg_224);

assign select_ln29_7_fu_356_p3 = ((icmp_ln13_fu_322_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_348_p3);

assign select_ln29_fu_654_p3 = ((and_ln29_4_fu_648_p2[0:0] === 1'b1) ? conv_out_load_reg_861 : max_0_reg_269);

assign shl_ln26_mid1_fu_402_p3 = {{r_fu_382_p2}, {1'd0}};

assign shl_ln2_fu_436_p3 = {{select_ln13_fu_394_p3}, {1'd0}};

assign shl_ln_fu_348_p3 = {{r_0_reg_247}, {1'd0}};

assign sub_ln29_1_fu_555_p2 = (p_shl_cast_fu_535_p3 - zext_ln29_5_fu_551_p1);

assign sub_ln29_fu_514_p2 = (p_shl2_cast_fu_494_p3 - zext_ln29_3_fu_510_p1);

assign tmp_1_fu_592_p4 = {{bitcast_ln29_4_fu_588_p1[30:23]}};

assign tmp_3_fu_665_p4 = {{bitcast_ln29_5_fu_662_p1[30:23]}};

assign tmp_4_fu_682_p4 = {{bitcast_ln29_6_fu_679_p1[30:23]}};

assign tmp_6_fu_543_p3 = {{add_ln29_5_fu_530_p2}, {1'd0}};

assign tmp_fu_502_p3 = {{add_ln29_fu_489_p2}, {1'd0}};

assign tmp_s_fu_574_p4 = {{bitcast_ln29_fu_571_p1[30:23]}};

assign trunc_ln29_4_fu_602_p1 = bitcast_ln29_4_fu_588_p1[22:0];

assign trunc_ln29_5_fu_675_p1 = bitcast_ln29_5_fu_662_p1[22:0];

assign trunc_ln29_6_fu_692_p1 = bitcast_ln29_6_fu_679_p1[22:0];

assign trunc_ln29_fu_584_p1 = bitcast_ln29_fu_571_p1[22:0];

assign xor_ln29_fu_364_p2 = (icmp_ln13_fu_322_p2 ^ 1'd1);

assign zext_ln20_1_fu_454_p1 = or_ln27_fu_448_p2;

assign zext_ln20_fu_470_p1 = ap_phi_mux_mpr_0_phi_fu_291_p4;

assign zext_ln26_fu_344_p1 = select_ln29_6_fu_336_p3;

assign zext_ln27_fu_444_p1 = shl_ln2_fu_436_p3;

assign zext_ln29_3_fu_510_p1 = tmp_fu_502_p3;

assign zext_ln29_4_fu_525_p1 = add_ln29_4_fu_520_p2;

assign zext_ln29_5_fu_551_p1 = tmp_6_fu_543_p3;

assign zext_ln29_6_fu_566_p1 = add_ln29_6_fu_561_p2;

assign zext_ln36_4_fu_750_p1 = select_ln13_reg_811;

assign zext_ln36_5_fu_758_p1 = add_ln36_fu_753_p2;

always @ (posedge ap_clk) begin
    zext_ln26_reg_805[12:3] <= 10'b0000000000;
    select_ln13_6_reg_817[0] <= 1'b0;
    zext_ln27_reg_832[0] <= 1'b0;
    zext_ln27_reg_832[9:5] <= 5'b00000;
    zext_ln20_1_reg_837[0] <= 1'b1;
    zext_ln20_1_reg_837[9:5] <= 5'b00000;
end

endmodule //max_pool_1
