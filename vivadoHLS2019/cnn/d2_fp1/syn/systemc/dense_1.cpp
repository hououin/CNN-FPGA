// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dense_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dense_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dense_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> dense_1::ap_ST_fsm_state1 = "1";
const sc_lv<14> dense_1::ap_ST_fsm_state2 = "10";
const sc_lv<14> dense_1::ap_ST_fsm_state3 = "100";
const sc_lv<14> dense_1::ap_ST_fsm_state4 = "1000";
const sc_lv<14> dense_1::ap_ST_fsm_state5 = "10000";
const sc_lv<14> dense_1::ap_ST_fsm_state6 = "100000";
const sc_lv<14> dense_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> dense_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> dense_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> dense_1::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> dense_1::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> dense_1::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> dense_1::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> dense_1::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> dense_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dense_1::ap_const_lv32_1 = "1";
const sc_lv<1> dense_1::ap_const_lv1_0 = "0";
const sc_lv<32> dense_1::ap_const_lv32_2 = "10";
const sc_lv<1> dense_1::ap_const_lv1_1 = "1";
const sc_lv<32> dense_1::ap_const_lv32_3 = "11";
const sc_lv<32> dense_1::ap_const_lv32_4 = "100";
const sc_lv<32> dense_1::ap_const_lv32_8 = "1000";
const sc_lv<32> dense_1::ap_const_lv32_9 = "1001";
const sc_lv<32> dense_1::ap_const_lv32_C = "1100";
const sc_lv<6> dense_1::ap_const_lv6_0 = "000000";
const sc_lv<32> dense_1::ap_const_lv32_D = "1101";
const sc_lv<9> dense_1::ap_const_lv9_0 = "000000000";
const sc_lv<15> dense_1::ap_const_lv15_0 = "000000000000000";
const sc_lv<32> dense_1::ap_const_lv32_5 = "101";
const sc_lv<6> dense_1::ap_const_lv6_32 = "110010";
const sc_lv<6> dense_1::ap_const_lv6_1 = "1";
const sc_lv<9> dense_1::ap_const_lv9_190 = "110010000";
const sc_lv<9> dense_1::ap_const_lv9_1 = "1";
const sc_lv<15> dense_1::ap_const_lv15_32 = "110010";
const sc_lv<32> dense_1::ap_const_lv32_17 = "10111";
const sc_lv<32> dense_1::ap_const_lv32_1E = "11110";
const sc_lv<8> dense_1::ap_const_lv8_FF = "11111111";
const sc_lv<23> dense_1::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> dense_1::ap_const_lv5_4 = "100";
const bool dense_1::ap_const_boolean_1 = true;

dense_1::dense_1(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dense_1_weights_U = new dense_1_dense_1_wg8j("dense_1_weights_U");
    dense_1_weights_U->clk(ap_clk);
    dense_1_weights_U->reset(ap_rst);
    dense_1_weights_U->address0(dense_1_weights_address0);
    dense_1_weights_U->ce0(dense_1_weights_ce0);
    dense_1_weights_U->q0(dense_1_weights_q0);
    dense_1_bias_U = new dense_1_dense_1_bhbi("dense_1_bias_U");
    dense_1_bias_U->clk(ap_clk);
    dense_1_bias_U->reset(ap_rst);
    dense_1_bias_U->address0(dense_1_bias_address0);
    dense_1_bias_U->ce0(dense_1_bias_ce0);
    dense_1_bias_U->q0(dense_1_bias_q0);
    cnn_fadd_32ns_32ncud_U26 = new cnn_fadd_32ns_32ncud<1,4,32,32,32>("cnn_fadd_32ns_32ncud_U26");
    cnn_fadd_32ns_32ncud_U26->clk(ap_clk);
    cnn_fadd_32ns_32ncud_U26->reset(ap_rst);
    cnn_fadd_32ns_32ncud_U26->din0(sum_0_reg_117);
    cnn_fadd_32ns_32ncud_U26->din1(grp_fu_151_p1);
    cnn_fadd_32ns_32ncud_U26->ce(ap_var_for_const0);
    cnn_fadd_32ns_32ncud_U26->dout(grp_fu_151_p2);
    cnn_fmul_32ns_32ndEe_U27 = new cnn_fmul_32ns_32ndEe<1,2,32,32,32>("cnn_fmul_32ns_32ndEe_U27");
    cnn_fmul_32ns_32ndEe_U27->clk(ap_clk);
    cnn_fmul_32ns_32ndEe_U27->reset(ap_rst);
    cnn_fmul_32ns_32ndEe_U27->din0(flat_array_q0);
    cnn_fmul_32ns_32ndEe_U27->din1(dense_1_weights_q0);
    cnn_fmul_32ns_32ndEe_U27->ce(ap_var_for_const0);
    cnn_fmul_32ns_32ndEe_U27->dout(grp_fu_157_p2);
    cnn_fcmp_32ns_32neOg_U28 = new cnn_fcmp_32ns_32neOg<1,2,32,32,1>("cnn_fcmp_32ns_32neOg_U28");
    cnn_fcmp_32ns_32neOg_U28->clk(ap_clk);
    cnn_fcmp_32ns_32neOg_U28->reset(ap_rst);
    cnn_fcmp_32ns_32neOg_U28->din0(grp_fu_151_p2);
    cnn_fcmp_32ns_32neOg_U28->din1(ap_var_for_const1);
    cnn_fcmp_32ns_32neOg_U28->ce(ap_var_for_const0);
    cnn_fcmp_32ns_32neOg_U28->opcode(ap_var_for_const2);
    cnn_fcmp_32ns_32neOg_U28->dout(grp_fu_163_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_3_fu_206_p2);
    sensitive << ( phi_mul_reg_140 );

    SC_METHOD(thread_add_ln14_fu_212_p2);
    sensitive << ( zext_ln13_reg_285 );
    sensitive << ( phi_mul_reg_140 );

    SC_METHOD(thread_and_ln19_fu_257_p2);
    sensitive << ( or_ln19_fu_251_p2 );
    sensitive << ( grp_fu_163_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_169_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_169_p2 );

    SC_METHOD(thread_bitcast_ln19_fu_222_p1);
    sensitive << ( tmp_reg_343 );

    SC_METHOD(thread_dense_1_bias_address0);
    sensitive << ( zext_ln14_reg_279 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_1_bias_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_1_out_address0);
    sensitive << ( zext_ln14_reg_279 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dense_1_out_ce0);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dense_1_out_d0);
    sensitive << ( tmp_reg_343 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( and_ln19_fu_257_p2 );

    SC_METHOD(thread_dense_1_out_we0);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dense_1_weights_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln14_6_fu_217_p1 );

    SC_METHOD(thread_dense_1_weights_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_flat_array_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln14_4_fu_201_p1 );

    SC_METHOD(thread_flat_array_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_151_p1);
    sensitive << ( dense_1_bias_q0 );
    sensitive << ( tmp_s_reg_328 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_fu_175_p2);
    sensitive << ( i_0_reg_106 );

    SC_METHOD(thread_icmp_ln13_fu_189_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_129 );

    SC_METHOD(thread_icmp_ln19_2_fu_245_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln19_fu_235_p1 );

    SC_METHOD(thread_icmp_ln19_fu_239_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_3_fu_225_p4 );

    SC_METHOD(thread_icmp_ln9_fu_169_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_106 );

    SC_METHOD(thread_j_fu_195_p2);
    sensitive << ( j_0_reg_129 );

    SC_METHOD(thread_or_ln19_fu_251_p2);
    sensitive << ( icmp_ln19_2_fu_245_p2 );
    sensitive << ( icmp_ln19_fu_239_p2 );

    SC_METHOD(thread_tmp_3_fu_225_p4);
    sensitive << ( bitcast_ln19_fu_222_p1 );

    SC_METHOD(thread_trunc_ln19_fu_235_p1);
    sensitive << ( bitcast_ln19_fu_222_p1 );

    SC_METHOD(thread_zext_ln13_fu_185_p1);
    sensitive << ( i_0_reg_106 );

    SC_METHOD(thread_zext_ln14_4_fu_201_p1);
    sensitive << ( j_0_reg_129 );

    SC_METHOD(thread_zext_ln14_6_fu_217_p1);
    sensitive << ( add_ln14_fu_212_p2 );

    SC_METHOD(thread_zext_ln14_fu_181_p1);
    sensitive << ( i_0_reg_106 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_169_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln13_fu_189_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "00000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dense_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_1_out_address0, "(port)dense_1_out_address0");
    sc_trace(mVcdFile, dense_1_out_ce0, "(port)dense_1_out_ce0");
    sc_trace(mVcdFile, dense_1_out_we0, "(port)dense_1_out_we0");
    sc_trace(mVcdFile, dense_1_out_d0, "(port)dense_1_out_d0");
    sc_trace(mVcdFile, flat_array_address0, "(port)flat_array_address0");
    sc_trace(mVcdFile, flat_array_ce0, "(port)flat_array_ce0");
    sc_trace(mVcdFile, flat_array_q0, "(port)flat_array_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dense_1_weights_address0, "dense_1_weights_address0");
    sc_trace(mVcdFile, dense_1_weights_ce0, "dense_1_weights_ce0");
    sc_trace(mVcdFile, dense_1_weights_q0, "dense_1_weights_q0");
    sc_trace(mVcdFile, dense_1_bias_address0, "dense_1_bias_address0");
    sc_trace(mVcdFile, dense_1_bias_ce0, "dense_1_bias_ce0");
    sc_trace(mVcdFile, dense_1_bias_q0, "dense_1_bias_q0");
    sc_trace(mVcdFile, i_fu_175_p2, "i_fu_175_p2");
    sc_trace(mVcdFile, i_reg_274, "i_reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln14_fu_181_p1, "zext_ln14_fu_181_p1");
    sc_trace(mVcdFile, zext_ln14_reg_279, "zext_ln14_reg_279");
    sc_trace(mVcdFile, icmp_ln9_fu_169_p2, "icmp_ln9_fu_169_p2");
    sc_trace(mVcdFile, zext_ln13_fu_185_p1, "zext_ln13_fu_185_p1");
    sc_trace(mVcdFile, zext_ln13_reg_285, "zext_ln13_reg_285");
    sc_trace(mVcdFile, j_fu_195_p2, "j_fu_195_p2");
    sc_trace(mVcdFile, j_reg_293, "j_reg_293");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, add_ln14_3_fu_206_p2, "add_ln14_3_fu_206_p2");
    sc_trace(mVcdFile, add_ln14_3_reg_298, "add_ln14_3_reg_298");
    sc_trace(mVcdFile, icmp_ln13_fu_189_p2, "icmp_ln13_fu_189_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_157_p2, "grp_fu_157_p2");
    sc_trace(mVcdFile, tmp_s_reg_328, "tmp_s_reg_328");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_151_p2, "grp_fu_151_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_reg_343, "tmp_reg_343");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i_0_reg_106, "i_0_reg_106");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, sum_0_reg_117, "sum_0_reg_117");
    sc_trace(mVcdFile, j_0_reg_129, "j_0_reg_129");
    sc_trace(mVcdFile, phi_mul_reg_140, "phi_mul_reg_140");
    sc_trace(mVcdFile, zext_ln14_6_fu_217_p1, "zext_ln14_6_fu_217_p1");
    sc_trace(mVcdFile, zext_ln14_4_fu_201_p1, "zext_ln14_4_fu_201_p1");
    sc_trace(mVcdFile, grp_fu_151_p1, "grp_fu_151_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, add_ln14_fu_212_p2, "add_ln14_fu_212_p2");
    sc_trace(mVcdFile, bitcast_ln19_fu_222_p1, "bitcast_ln19_fu_222_p1");
    sc_trace(mVcdFile, tmp_3_fu_225_p4, "tmp_3_fu_225_p4");
    sc_trace(mVcdFile, trunc_ln19_fu_235_p1, "trunc_ln19_fu_235_p1");
    sc_trace(mVcdFile, icmp_ln19_2_fu_245_p2, "icmp_ln19_2_fu_245_p2");
    sc_trace(mVcdFile, icmp_ln19_fu_239_p2, "icmp_ln19_fu_239_p2");
    sc_trace(mVcdFile, or_ln19_fu_251_p2, "or_ln19_fu_251_p2");
    sc_trace(mVcdFile, grp_fu_163_p2, "grp_fu_163_p2");
    sc_trace(mVcdFile, and_ln19_fu_257_p2, "and_ln19_fu_257_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dense_1::~dense_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete dense_1_weights_U;
    delete dense_1_bias_U;
    delete cnn_fadd_32ns_32ncud_U26;
    delete cnn_fmul_32ns_32ndEe_U27;
    delete cnn_fcmp_32ns_32neOg_U28;
}

void dense_1::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dense_1::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void dense_1::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_4;
}

void dense_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_0_reg_106 = i_reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_106 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_0_reg_129 = j_reg_293.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_0))) {
        j_0_reg_129 = ap_const_lv9_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        phi_mul_reg_140 = add_ln14_3_reg_298.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_0))) {
        phi_mul_reg_140 = ap_const_lv15_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sum_0_reg_117 = grp_fu_151_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_0))) {
        sum_0_reg_117 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln13_fu_189_p2.read()))) {
        add_ln14_3_reg_298 = add_ln14_3_fu_206_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_274 = i_fu_175_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_293 = j_fu_195_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_reg_343 = grp_fu_151_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_s_reg_328 = grp_fu_157_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_0))) {
        zext_ln13_reg_285 = zext_ln13_fu_185_p1.read();
        zext_ln14_reg_279 = zext_ln14_fu_181_p1.read();
    }
}

void dense_1::thread_add_ln14_3_fu_206_p2() {
    add_ln14_3_fu_206_p2 = (!phi_mul_reg_140.read().is_01() || !ap_const_lv15_32.is_01())? sc_lv<15>(): (sc_biguint<15>(phi_mul_reg_140.read()) + sc_biguint<15>(ap_const_lv15_32));
}

void dense_1::thread_add_ln14_fu_212_p2() {
    add_ln14_fu_212_p2 = (!zext_ln13_reg_285.read().is_01() || !phi_mul_reg_140.read().is_01())? sc_lv<15>(): (sc_biguint<15>(zext_ln13_reg_285.read()) + sc_biguint<15>(phi_mul_reg_140.read()));
}

void dense_1::thread_and_ln19_fu_257_p2() {
    and_ln19_fu_257_p2 = (or_ln19_fu_251_p2.read() & grp_fu_163_p2.read());
}

void dense_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dense_1::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void dense_1::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void dense_1::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void dense_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dense_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dense_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dense_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void dense_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void dense_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void dense_1::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dense_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dense_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dense_1::thread_bitcast_ln19_fu_222_p1() {
    bitcast_ln19_fu_222_p1 = tmp_reg_343.read();
}

void dense_1::thread_dense_1_bias_address0() {
    dense_1_bias_address0 =  (sc_lv<6>) (zext_ln14_reg_279.read());
}

void dense_1::thread_dense_1_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_1_bias_ce0 = ap_const_logic_1;
    } else {
        dense_1_bias_ce0 = ap_const_logic_0;
    }
}

void dense_1::thread_dense_1_out_address0() {
    dense_1_out_address0 =  (sc_lv<6>) (zext_ln14_reg_279.read());
}

void dense_1::thread_dense_1_out_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dense_1_out_ce0 = ap_const_logic_1;
    } else {
        dense_1_out_ce0 = ap_const_logic_0;
    }
}

void dense_1::thread_dense_1_out_d0() {
    dense_1_out_d0 = (!and_ln19_fu_257_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln19_fu_257_p2.read()[0].to_bool())? ap_const_lv32_0: tmp_reg_343.read());
}

void dense_1::thread_dense_1_out_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dense_1_out_we0 = ap_const_logic_1;
    } else {
        dense_1_out_we0 = ap_const_logic_0;
    }
}

void dense_1::thread_dense_1_weights_address0() {
    dense_1_weights_address0 =  (sc_lv<15>) (zext_ln14_6_fu_217_p1.read());
}

void dense_1::thread_dense_1_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_1_weights_ce0 = ap_const_logic_1;
    } else {
        dense_1_weights_ce0 = ap_const_logic_0;
    }
}

void dense_1::thread_flat_array_address0() {
    flat_array_address0 =  (sc_lv<9>) (zext_ln14_4_fu_201_p1.read());
}

void dense_1::thread_flat_array_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        flat_array_ce0 = ap_const_logic_1;
    } else {
        flat_array_ce0 = ap_const_logic_0;
    }
}

void dense_1::thread_grp_fu_151_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_151_p1 = dense_1_bias_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_151_p1 = tmp_s_reg_328.read();
    } else {
        grp_fu_151_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dense_1::thread_i_fu_175_p2() {
    i_fu_175_p2 = (!i_0_reg_106.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_0_reg_106.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void dense_1::thread_icmp_ln13_fu_189_p2() {
    icmp_ln13_fu_189_p2 = (!j_0_reg_129.read().is_01() || !ap_const_lv9_190.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_129.read() == ap_const_lv9_190);
}

void dense_1::thread_icmp_ln19_2_fu_245_p2() {
    icmp_ln19_2_fu_245_p2 = (!trunc_ln19_fu_235_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln19_fu_235_p1.read() == ap_const_lv23_0);
}

void dense_1::thread_icmp_ln19_fu_239_p2() {
    icmp_ln19_fu_239_p2 = (!tmp_3_fu_225_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_3_fu_225_p4.read() != ap_const_lv8_FF);
}

void dense_1::thread_icmp_ln9_fu_169_p2() {
    icmp_ln9_fu_169_p2 = (!i_0_reg_106.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_106.read() == ap_const_lv6_32);
}

void dense_1::thread_j_fu_195_p2() {
    j_fu_195_p2 = (!j_0_reg_129.read().is_01() || !ap_const_lv9_1.is_01())? sc_lv<9>(): (sc_biguint<9>(j_0_reg_129.read()) + sc_biguint<9>(ap_const_lv9_1));
}

void dense_1::thread_or_ln19_fu_251_p2() {
    or_ln19_fu_251_p2 = (icmp_ln19_2_fu_245_p2.read() | icmp_ln19_fu_239_p2.read());
}

void dense_1::thread_tmp_3_fu_225_p4() {
    tmp_3_fu_225_p4 = bitcast_ln19_fu_222_p1.read().range(30, 23);
}

void dense_1::thread_trunc_ln19_fu_235_p1() {
    trunc_ln19_fu_235_p1 = bitcast_ln19_fu_222_p1.read().range(23-1, 0);
}

void dense_1::thread_zext_ln13_fu_185_p1() {
    zext_ln13_fu_185_p1 = esl_zext<15,6>(i_0_reg_106.read());
}

void dense_1::thread_zext_ln14_4_fu_201_p1() {
    zext_ln14_4_fu_201_p1 = esl_zext<64,9>(j_0_reg_129.read());
}

void dense_1::thread_zext_ln14_6_fu_217_p1() {
    zext_ln14_6_fu_217_p1 = esl_zext<64,15>(add_ln14_fu_212_p2.read());
}

void dense_1::thread_zext_ln14_fu_181_p1() {
    zext_ln14_fu_181_p1 = esl_zext<64,6>(i_0_reg_106.read());
}

void dense_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_169_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln13_fu_189_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

}

