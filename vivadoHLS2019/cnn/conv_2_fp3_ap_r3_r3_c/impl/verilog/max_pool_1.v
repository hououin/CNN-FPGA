// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_0_0_address0,
        max_pool_out_0_0_ce0,
        max_pool_out_0_0_we0,
        max_pool_out_0_0_d0,
        max_pool_out_0_1_address0,
        max_pool_out_0_1_ce0,
        max_pool_out_0_1_we0,
        max_pool_out_0_1_d0,
        max_pool_out_0_2_address0,
        max_pool_out_0_2_ce0,
        max_pool_out_0_2_we0,
        max_pool_out_0_2_d0,
        max_pool_out_1_0_address0,
        max_pool_out_1_0_ce0,
        max_pool_out_1_0_we0,
        max_pool_out_1_0_d0,
        max_pool_out_1_1_address0,
        max_pool_out_1_1_ce0,
        max_pool_out_1_1_we0,
        max_pool_out_1_1_d0,
        max_pool_out_1_2_address0,
        max_pool_out_1_2_ce0,
        max_pool_out_1_2_we0,
        max_pool_out_1_2_d0,
        max_pool_out_2_0_address0,
        max_pool_out_2_0_ce0,
        max_pool_out_2_0_we0,
        max_pool_out_2_0_d0,
        max_pool_out_2_1_address0,
        max_pool_out_2_1_ce0,
        max_pool_out_2_1_we0,
        max_pool_out_2_1_d0,
        max_pool_out_2_2_address0,
        max_pool_out_2_2_ce0,
        max_pool_out_2_2_we0,
        max_pool_out_2_2_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [7:0] max_pool_out_0_0_address0;
output   max_pool_out_0_0_ce0;
output   max_pool_out_0_0_we0;
output  [31:0] max_pool_out_0_0_d0;
output  [6:0] max_pool_out_0_1_address0;
output   max_pool_out_0_1_ce0;
output   max_pool_out_0_1_we0;
output  [31:0] max_pool_out_0_1_d0;
output  [6:0] max_pool_out_0_2_address0;
output   max_pool_out_0_2_ce0;
output   max_pool_out_0_2_we0;
output  [31:0] max_pool_out_0_2_d0;
output  [6:0] max_pool_out_1_0_address0;
output   max_pool_out_1_0_ce0;
output   max_pool_out_1_0_we0;
output  [31:0] max_pool_out_1_0_d0;
output  [6:0] max_pool_out_1_1_address0;
output   max_pool_out_1_1_ce0;
output   max_pool_out_1_1_we0;
output  [31:0] max_pool_out_1_1_d0;
output  [6:0] max_pool_out_1_2_address0;
output   max_pool_out_1_2_ce0;
output   max_pool_out_1_2_we0;
output  [31:0] max_pool_out_1_2_d0;
output  [6:0] max_pool_out_2_0_address0;
output   max_pool_out_2_0_ce0;
output   max_pool_out_2_0_we0;
output  [31:0] max_pool_out_2_0_d0;
output  [6:0] max_pool_out_2_1_address0;
output   max_pool_out_2_1_ce0;
output   max_pool_out_2_1_we0;
output  [31:0] max_pool_out_2_1_d0;
output  [6:0] max_pool_out_2_2_address0;
output   max_pool_out_2_2_ce0;
output   max_pool_out_2_2_we0;
output  [31:0] max_pool_out_2_2_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg max_pool_out_0_0_ce0;
reg max_pool_out_0_0_we0;
reg max_pool_out_0_1_ce0;
reg max_pool_out_0_1_we0;
reg max_pool_out_0_2_ce0;
reg max_pool_out_0_2_we0;
reg max_pool_out_1_0_ce0;
reg max_pool_out_1_0_we0;
reg max_pool_out_1_1_ce0;
reg max_pool_out_1_1_we0;
reg max_pool_out_1_2_ce0;
reg max_pool_out_1_2_we0;
reg max_pool_out_2_0_ce0;
reg max_pool_out_2_0_we0;
reg max_pool_out_2_1_ce0;
reg max_pool_out_2_1_we0;
reg max_pool_out_2_2_ce0;
reg max_pool_out_2_2_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] f_fu_383_p2;
reg   [2:0] f_reg_830;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln13_fu_389_p1;
reg   [12:0] zext_ln13_reg_835;
wire   [0:0] icmp_ln10_fu_377_p2;
wire   [7:0] zext_ln13_2_fu_393_p1;
reg   [7:0] zext_ln13_2_reg_840;
wire   [8:0] zext_ln13_3_fu_397_p1;
reg   [8:0] zext_ln13_3_reg_845;
wire   [8:0] add_ln13_fu_401_p2;
reg   [8:0] add_ln13_reg_850;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_413_p2;
reg   [3:0] r_reg_858;
wire   [4:0] shl_ln_fu_419_p3;
reg   [4:0] shl_ln_reg_863;
wire   [0:0] icmp_ln13_fu_407_p2;
wire   [2:0] trunc_ln36_fu_427_p1;
reg   [2:0] trunc_ln36_reg_868;
wire   [6:0] zext_ln36_4_fu_453_p1;
reg   [6:0] zext_ln36_4_reg_872;
wire   [6:0] add_ln36_fu_457_p2;
reg   [6:0] add_ln36_reg_877;
wire   [8:0] add_ln16_fu_463_p2;
reg   [8:0] add_ln16_reg_882;
wire    ap_CS_fsm_state4;
wire   [3:0] c_fu_475_p2;
reg   [3:0] c_reg_890;
wire   [4:0] shl_ln2_fu_481_p3;
reg   [4:0] shl_ln2_reg_895;
wire   [0:0] icmp_ln16_fu_469_p2;
wire   [3:0] select_ln38_fu_501_p3;
wire   [1:0] mpr_fu_519_p2;
reg   [1:0] mpr_reg_908;
wire    ap_CS_fsm_state5;
wire   [9:0] mul_ln29_fu_534_p2;
reg   [9:0] mul_ln29_reg_913;
wire   [0:0] icmp_ln20_fu_513_p2;
wire   [3:0] select_ln37_fu_663_p3;
wire   [1:0] mpc_fu_681_p2;
reg   [1:0] mpc_reg_929;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_675_p2;
reg   [31:0] max_reg_939;
wire    ap_CS_fsm_state7;
wire   [31:0] max_3_fu_820_p3;
wire    ap_CS_fsm_state8;
reg   [2:0] f_0_reg_236;
reg   [3:0] r_0_reg_247;
reg   [8:0] phi_mul9_reg_258;
reg   [3:0] phi_urem11_reg_269;
reg   [3:0] c_0_reg_281;
reg   [8:0] phi_mul_reg_292;
reg   [3:0] phi_urem_reg_304;
reg   [31:0] max_0_reg_316;
reg   [1:0] mpr_0_reg_337;
reg   [31:0] max_1_reg_348;
reg   [1:0] mpc_0_reg_360;
wire   [63:0] zext_ln36_7_fu_598_p1;
wire   [63:0] zext_ln36_8_fu_641_p1;
wire   [63:0] zext_ln29_5_fu_732_p1;
wire   [2:0] trunc_ln36_1_fu_540_p1;
wire   [2:0] tmp_1_fu_431_p4;
wire   [4:0] tmp_2_fu_445_p3;
wire   [6:0] zext_ln36_fu_441_p1;
wire   [3:0] add_ln38_fu_489_p2;
wire   [0:0] icmp_ln38_fu_495_p2;
wire   [4:0] zext_ln20_fu_509_p1;
wire   [4:0] i_fu_525_p2;
wire   [4:0] mul_ln29_fu_534_p0;
wire   [2:0] tmp_3_fu_544_p4;
wire   [6:0] zext_ln36_5_fu_554_p1;
wire   [6:0] add_ln36_3_fu_558_p2;
wire   [5:0] trunc_ln36_2_fu_563_p1;
wire   [7:0] tmp_4_fu_575_p3;
wire   [8:0] p_shl5_cast_fu_567_p3;
wire   [8:0] zext_ln36_6_fu_583_p1;
wire   [8:0] sub_ln36_fu_587_p2;
wire   [8:0] add_ln36_4_fu_593_p2;
wire   [6:0] add_ln36_5_fu_605_p2;
wire   [4:0] trunc_ln36_3_fu_610_p1;
wire   [7:0] p_shl3_cast_fu_614_p3;
wire   [7:0] p_shl4_cast_fu_622_p3;
wire   [7:0] sub_ln36_1_fu_630_p2;
wire   [7:0] add_ln36_6_fu_636_p2;
wire   [3:0] add_ln37_fu_651_p2;
wire   [0:0] icmp_ln37_fu_657_p2;
wire   [4:0] zext_ln23_fu_671_p1;
wire   [4:0] j_fu_687_p2;
wire   [9:0] zext_ln29_3_fu_692_p1;
wire   [9:0] add_ln29_fu_696_p2;
wire   [10:0] tmp_10_fu_709_p3;
wire   [12:0] p_shl1_cast_fu_701_p3;
wire   [12:0] zext_ln29_4_fu_717_p1;
wire   [12:0] sub_ln29_fu_721_p2;
wire   [12:0] add_ln29_2_fu_727_p2;
wire   [31:0] bitcast_ln29_fu_737_p1;
wire   [31:0] bitcast_ln29_2_fu_754_p1;
wire   [7:0] tmp_fu_740_p4;
wire   [22:0] trunc_ln29_fu_750_p1;
wire   [0:0] icmp_ln29_4_fu_778_p2;
wire   [0:0] icmp_ln29_fu_772_p2;
wire   [7:0] tmp_9_fu_758_p4;
wire   [22:0] trunc_ln29_2_fu_768_p1;
wire   [0:0] icmp_ln29_6_fu_796_p2;
wire   [0:0] icmp_ln29_5_fu_790_p2;
wire   [0:0] or_ln29_fu_784_p2;
wire   [0:0] or_ln29_2_fu_802_p2;
wire   [0:0] and_ln29_fu_808_p2;
wire   [0:0] grp_fu_371_p2;
wire   [0:0] and_ln29_2_fu_814_p2;
reg   [7:0] ap_NS_fsm;
wire   [9:0] mul_ln29_fu_534_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_q0),
    .din1(max_1_reg_348),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_371_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
        c_0_reg_281 <= c_reg_890;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_407_p2 == 1'd0))) begin
        c_0_reg_281 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_407_p2 == 1'd1))) begin
        f_0_reg_236 <= f_reg_830;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_236 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_675_p2 == 1'd1))) begin
        max_0_reg_316 <= max_1_reg_348;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd0))) begin
        max_0_reg_316 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_1_reg_348 <= max_3_fu_820_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd0))) begin
        max_1_reg_348 <= max_0_reg_316;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpc_0_reg_360 <= mpc_reg_929;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd0))) begin
        mpc_0_reg_360 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_675_p2 == 1'd1))) begin
        mpr_0_reg_337 <= mpr_reg_908;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd0))) begin
        mpr_0_reg_337 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd1))) begin
        phi_mul9_reg_258 <= add_ln13_reg_850;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd0))) begin
        phi_mul9_reg_258 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
        phi_mul_reg_292 <= add_ln16_reg_882;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_407_p2 == 1'd0))) begin
        phi_mul_reg_292 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd1))) begin
        phi_urem11_reg_269 <= select_ln38_fu_501_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd0))) begin
        phi_urem11_reg_269 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
        phi_urem_reg_304 <= select_ln37_fu_663_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_407_p2 == 1'd0))) begin
        phi_urem_reg_304 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd1))) begin
        r_0_reg_247 <= r_reg_858;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd0))) begin
        r_0_reg_247 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_850 <= add_ln13_fu_401_p2;
        r_reg_858 <= r_fu_413_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln16_reg_882 <= add_ln16_fu_463_p2;
        c_reg_890 <= c_fu_475_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_407_p2 == 1'd0))) begin
        add_ln36_reg_877 <= add_ln36_fu_457_p2;
        shl_ln_reg_863[4 : 1] <= shl_ln_fu_419_p3[4 : 1];
        trunc_ln36_reg_868 <= trunc_ln36_fu_427_p1;
        zext_ln36_4_reg_872[4 : 2] <= zext_ln36_4_fu_453_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_830 <= f_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_reg_939 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_929 <= mpc_fu_681_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_908 <= mpr_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd0))) begin
        mul_ln29_reg_913[9 : 1] <= mul_ln29_fu_534_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd0))) begin
        shl_ln2_reg_895[4 : 1] <= shl_ln2_fu_481_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd0))) begin
        zext_ln13_2_reg_840[2 : 0] <= zext_ln13_2_fu_393_p1[2 : 0];
        zext_ln13_3_reg_845[2 : 0] <= zext_ln13_3_fu_397_p1[2 : 0];
        zext_ln13_reg_835[2 : 0] <= zext_ln13_fu_389_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_0_ce0 = 1'b1;
    end else begin
        max_pool_out_0_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln36_1_fu_540_p1 == 3'd0) & (icmp_ln20_fu_513_p2 == 1'd1) & (trunc_ln36_reg_868 == 3'd0))) begin
        max_pool_out_0_0_we0 = 1'b1;
    end else begin
        max_pool_out_0_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_1_ce0 = 1'b1;
    end else begin
        max_pool_out_0_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln36_1_fu_540_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1) & (trunc_ln36_reg_868 == 3'd0))) begin
        max_pool_out_0_1_we0 = 1'b1;
    end else begin
        max_pool_out_0_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_2_ce0 = 1'b1;
    end else begin
        max_pool_out_0_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln36_1_fu_540_p1 == 3'd0) & ~(trunc_ln36_1_fu_540_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1) & (trunc_ln36_reg_868 == 3'd0))) begin
        max_pool_out_0_2_we0 = 1'b1;
    end else begin
        max_pool_out_0_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_0_ce0 = 1'b1;
    end else begin
        max_pool_out_1_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln36_1_fu_540_p1 == 3'd0) & (icmp_ln20_fu_513_p2 == 1'd1) & (trunc_ln36_reg_868 == 3'd1))) begin
        max_pool_out_1_0_we0 = 1'b1;
    end else begin
        max_pool_out_1_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_1_ce0 = 1'b1;
    end else begin
        max_pool_out_1_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln36_1_fu_540_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1) & (trunc_ln36_reg_868 == 3'd1))) begin
        max_pool_out_1_1_we0 = 1'b1;
    end else begin
        max_pool_out_1_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_2_ce0 = 1'b1;
    end else begin
        max_pool_out_1_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln36_1_fu_540_p1 == 3'd0) & ~(trunc_ln36_1_fu_540_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1) & (trunc_ln36_reg_868 == 3'd1))) begin
        max_pool_out_1_2_we0 = 1'b1;
    end else begin
        max_pool_out_1_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_2_0_ce0 = 1'b1;
    end else begin
        max_pool_out_2_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln36_reg_868 == 3'd0) & ~(trunc_ln36_reg_868 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (trunc_ln36_1_fu_540_p1 == 3'd0) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
        max_pool_out_2_0_we0 = 1'b1;
    end else begin
        max_pool_out_2_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_2_1_ce0 = 1'b1;
    end else begin
        max_pool_out_2_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln36_reg_868 == 3'd0) & ~(trunc_ln36_reg_868 == 3'd1) & (trunc_ln36_1_fu_540_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
        max_pool_out_2_1_we0 = 1'b1;
    end else begin
        max_pool_out_2_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_2_2_ce0 = 1'b1;
    end else begin
        max_pool_out_2_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln36_reg_868 == 3'd0) & ~(trunc_ln36_1_fu_540_p1 == 3'd0) & ~(trunc_ln36_1_fu_540_p1 == 3'd1) & ~(trunc_ln36_reg_868 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
        max_pool_out_2_2_we0 = 1'b1;
    end else begin
        max_pool_out_2_2_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_377_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_407_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_469_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_513_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_675_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_401_p2 = (phi_mul9_reg_258 + 9'd22);

assign add_ln16_fu_463_p2 = (phi_mul_reg_292 + 9'd22);

assign add_ln29_2_fu_727_p2 = (sub_ln29_fu_721_p2 + zext_ln13_reg_835);

assign add_ln29_fu_696_p2 = (mul_ln29_reg_913 + zext_ln29_3_fu_692_p1);

assign add_ln36_3_fu_558_p2 = (zext_ln36_5_fu_554_p1 + add_ln36_reg_877);

assign add_ln36_4_fu_593_p2 = (zext_ln13_3_reg_845 + sub_ln36_fu_587_p2);

assign add_ln36_5_fu_605_p2 = (zext_ln36_5_fu_554_p1 + zext_ln36_4_reg_872);

assign add_ln36_6_fu_636_p2 = (zext_ln13_2_reg_840 + sub_ln36_1_fu_630_p2);

assign add_ln36_fu_457_p2 = (zext_ln36_4_fu_453_p1 + zext_ln36_fu_441_p1);

assign add_ln37_fu_651_p2 = (phi_urem_reg_304 + 4'd1);

assign add_ln38_fu_489_p2 = (phi_urem11_reg_269 + 4'd1);

assign and_ln29_2_fu_814_p2 = (grp_fu_371_p2 & and_ln29_fu_808_p2);

assign and_ln29_fu_808_p2 = (or_ln29_fu_784_p2 & or_ln29_2_fu_802_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln29_2_fu_754_p1 = max_1_reg_348;

assign bitcast_ln29_fu_737_p1 = max_reg_939;

assign c_fu_475_p2 = (c_0_reg_281 + 4'd1);

assign conv_out_address0 = zext_ln29_5_fu_732_p1;

assign f_fu_383_p2 = (f_0_reg_236 + 3'd1);

assign i_fu_525_p2 = (zext_ln20_fu_509_p1 + shl_ln_reg_863);

assign icmp_ln10_fu_377_p2 = ((f_0_reg_236 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_407_p2 = ((r_0_reg_247 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_469_p2 = ((c_0_reg_281 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_513_p2 = ((mpr_0_reg_337 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_675_p2 = ((mpc_0_reg_360 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_778_p2 = ((trunc_ln29_fu_750_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_790_p2 = ((tmp_9_fu_758_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_796_p2 = ((trunc_ln29_2_fu_768_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_772_p2 = ((tmp_fu_740_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_657_p2 = ((add_ln37_fu_651_p2 < 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_495_p2 = ((add_ln38_fu_489_p2 < 4'd3) ? 1'b1 : 1'b0);

assign j_fu_687_p2 = (zext_ln23_fu_671_p1 + shl_ln2_reg_895);

assign max_3_fu_820_p3 = ((and_ln29_2_fu_814_p2[0:0] === 1'b1) ? max_reg_939 : max_1_reg_348);

assign max_pool_out_0_0_address0 = zext_ln36_7_fu_598_p1;

assign max_pool_out_0_0_d0 = max_0_reg_316;

assign max_pool_out_0_1_address0 = zext_ln36_8_fu_641_p1;

assign max_pool_out_0_1_d0 = max_0_reg_316;

assign max_pool_out_0_2_address0 = zext_ln36_8_fu_641_p1;

assign max_pool_out_0_2_d0 = max_0_reg_316;

assign max_pool_out_1_0_address0 = zext_ln36_7_fu_598_p1;

assign max_pool_out_1_0_d0 = max_0_reg_316;

assign max_pool_out_1_1_address0 = zext_ln36_8_fu_641_p1;

assign max_pool_out_1_1_d0 = max_0_reg_316;

assign max_pool_out_1_2_address0 = zext_ln36_8_fu_641_p1;

assign max_pool_out_1_2_d0 = max_0_reg_316;

assign max_pool_out_2_0_address0 = zext_ln36_7_fu_598_p1;

assign max_pool_out_2_0_d0 = max_0_reg_316;

assign max_pool_out_2_1_address0 = zext_ln36_8_fu_641_p1;

assign max_pool_out_2_1_d0 = max_0_reg_316;

assign max_pool_out_2_2_address0 = zext_ln36_8_fu_641_p1;

assign max_pool_out_2_2_d0 = max_0_reg_316;

assign mpc_fu_681_p2 = (mpc_0_reg_360 + 2'd1);

assign mpr_fu_519_p2 = (mpr_0_reg_337 + 2'd1);

assign mul_ln29_fu_534_p0 = mul_ln29_fu_534_p00;

assign mul_ln29_fu_534_p00 = i_fu_525_p2;

assign mul_ln29_fu_534_p2 = (mul_ln29_fu_534_p0 * $signed('h1A));

assign or_ln29_2_fu_802_p2 = (icmp_ln29_6_fu_796_p2 | icmp_ln29_5_fu_790_p2);

assign or_ln29_fu_784_p2 = (icmp_ln29_fu_772_p2 | icmp_ln29_4_fu_778_p2);

assign p_shl1_cast_fu_701_p3 = {{add_ln29_fu_696_p2}, {3'd0}};

assign p_shl3_cast_fu_614_p3 = {{trunc_ln36_3_fu_610_p1}, {3'd0}};

assign p_shl4_cast_fu_622_p3 = {{add_ln36_5_fu_605_p2}, {1'd0}};

assign p_shl5_cast_fu_567_p3 = {{trunc_ln36_2_fu_563_p1}, {3'd0}};

assign r_fu_413_p2 = (r_0_reg_247 + 4'd1);

assign select_ln37_fu_663_p3 = ((icmp_ln37_fu_657_p2[0:0] === 1'b1) ? add_ln37_fu_651_p2 : 4'd0);

assign select_ln38_fu_501_p3 = ((icmp_ln38_fu_495_p2[0:0] === 1'b1) ? add_ln38_fu_489_p2 : 4'd0);

assign shl_ln2_fu_481_p3 = {{c_0_reg_281}, {1'd0}};

assign shl_ln_fu_419_p3 = {{r_0_reg_247}, {1'd0}};

assign sub_ln29_fu_721_p2 = (p_shl1_cast_fu_701_p3 - zext_ln29_4_fu_717_p1);

assign sub_ln36_1_fu_630_p2 = (p_shl3_cast_fu_614_p3 - p_shl4_cast_fu_622_p3);

assign sub_ln36_fu_587_p2 = (p_shl5_cast_fu_567_p3 - zext_ln36_6_fu_583_p1);

assign tmp_10_fu_709_p3 = {{add_ln29_fu_696_p2}, {1'd0}};

assign tmp_1_fu_431_p4 = {{phi_mul9_reg_258[8:6]}};

assign tmp_2_fu_445_p3 = {{tmp_1_fu_431_p4}, {2'd0}};

assign tmp_3_fu_544_p4 = {{phi_mul_reg_292[8:6]}};

assign tmp_4_fu_575_p3 = {{add_ln36_3_fu_558_p2}, {1'd0}};

assign tmp_9_fu_758_p4 = {{bitcast_ln29_2_fu_754_p1[30:23]}};

assign tmp_fu_740_p4 = {{bitcast_ln29_fu_737_p1[30:23]}};

assign trunc_ln29_2_fu_768_p1 = bitcast_ln29_2_fu_754_p1[22:0];

assign trunc_ln29_fu_750_p1 = bitcast_ln29_fu_737_p1[22:0];

assign trunc_ln36_1_fu_540_p1 = phi_urem_reg_304[2:0];

assign trunc_ln36_2_fu_563_p1 = add_ln36_3_fu_558_p2[5:0];

assign trunc_ln36_3_fu_610_p1 = add_ln36_5_fu_605_p2[4:0];

assign trunc_ln36_fu_427_p1 = phi_urem11_reg_269[2:0];

assign zext_ln13_2_fu_393_p1 = f_0_reg_236;

assign zext_ln13_3_fu_397_p1 = f_0_reg_236;

assign zext_ln13_fu_389_p1 = f_0_reg_236;

assign zext_ln20_fu_509_p1 = mpr_0_reg_337;

assign zext_ln23_fu_671_p1 = mpc_0_reg_360;

assign zext_ln29_3_fu_692_p1 = j_fu_687_p2;

assign zext_ln29_4_fu_717_p1 = tmp_10_fu_709_p3;

assign zext_ln29_5_fu_732_p1 = add_ln29_2_fu_727_p2;

assign zext_ln36_4_fu_453_p1 = tmp_2_fu_445_p3;

assign zext_ln36_5_fu_554_p1 = tmp_3_fu_544_p4;

assign zext_ln36_6_fu_583_p1 = tmp_4_fu_575_p3;

assign zext_ln36_7_fu_598_p1 = add_ln36_4_fu_593_p2;

assign zext_ln36_8_fu_641_p1 = add_ln36_6_fu_636_p2;

assign zext_ln36_fu_441_p1 = tmp_1_fu_431_p4;

always @ (posedge ap_clk) begin
    zext_ln13_reg_835[12:3] <= 10'b0000000000;
    zext_ln13_2_reg_840[7:3] <= 5'b00000;
    zext_ln13_3_reg_845[8:3] <= 6'b000000;
    shl_ln_reg_863[0] <= 1'b0;
    zext_ln36_4_reg_872[1:0] <= 2'b00;
    zext_ln36_4_reg_872[6:5] <= 2'b00;
    shl_ln2_reg_895[0] <= 1'b0;
    mul_ln29_reg_913[0] <= 1'b0;
end

endmodule //max_pool_1
