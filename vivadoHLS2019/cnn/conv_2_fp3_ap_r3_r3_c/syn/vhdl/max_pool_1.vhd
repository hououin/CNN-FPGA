-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_0_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_0_0_ce0 : OUT STD_LOGIC;
    max_pool_out_0_0_we0 : OUT STD_LOGIC;
    max_pool_out_0_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_0_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_0_1_ce0 : OUT STD_LOGIC;
    max_pool_out_0_1_we0 : OUT STD_LOGIC;
    max_pool_out_0_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_0_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_0_2_ce0 : OUT STD_LOGIC;
    max_pool_out_0_2_we0 : OUT STD_LOGIC;
    max_pool_out_0_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_1_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_1_0_ce0 : OUT STD_LOGIC;
    max_pool_out_1_0_we0 : OUT STD_LOGIC;
    max_pool_out_1_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_1_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_1_1_ce0 : OUT STD_LOGIC;
    max_pool_out_1_1_we0 : OUT STD_LOGIC;
    max_pool_out_1_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_1_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_1_2_ce0 : OUT STD_LOGIC;
    max_pool_out_1_2_we0 : OUT STD_LOGIC;
    max_pool_out_1_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_2_0_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_2_0_ce0 : OUT STD_LOGIC;
    max_pool_out_2_0_we0 : OUT STD_LOGIC;
    max_pool_out_2_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_2_1_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_2_1_ce0 : OUT STD_LOGIC;
    max_pool_out_2_1_we0 : OUT STD_LOGIC;
    max_pool_out_2_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_2_2_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_2_2_ce0 : OUT STD_LOGIC;
    max_pool_out_2_2_we0 : OUT STD_LOGIC;
    max_pool_out_2_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv9_16 : STD_LOGIC_VECTOR (8 downto 0) := "000010110";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_383_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_830 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_389_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_reg_835 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln10_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_2_fu_393_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln13_2_reg_840 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln13_3_fu_397_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln13_3_reg_845 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_fu_401_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln13_reg_850 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_413_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_858 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_419_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_863 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_407_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln36_fu_427_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln36_reg_868 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln36_4_fu_453_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln36_4_reg_872 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_fu_457_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_reg_877 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln16_fu_463_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln16_reg_882 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal c_fu_475_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_890 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln2_fu_481_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_reg_895 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_501_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpr_fu_519_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_908 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mul_ln29_fu_534_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_913 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln20_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_fu_663_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpc_fu_681_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_reg_929 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln23_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_reg_939 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_3_fu_820_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal f_0_reg_236 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_247 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul9_reg_258 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_urem11_reg_269 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_281 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_292 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_urem_reg_304 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_316 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_337 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_348 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_360 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln36_7_fu_598_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_8_fu_641_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_5_fu_732_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln36_1_fu_540_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_431_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_445_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_fu_441_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln38_fu_489_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln38_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln20_fu_509_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_525_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_534_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_544_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln36_5_fu_554_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln36_3_fu_558_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln36_2_fu_563_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_575_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl5_cast_fu_567_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_6_fu_583_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln36_fu_587_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_4_fu_593_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln36_5_fu_605_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln36_3_fu_610_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl3_cast_fu_614_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl4_cast_fu_622_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln36_1_fu_630_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_6_fu_636_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln37_fu_651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln37_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln23_fu_671_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_687_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_3_fu_692_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_696_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_709_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl1_cast_fu_701_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_4_fu_717_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_721_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_2_fu_727_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_2_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_740_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_750_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_4_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_758_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_768_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_6_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_5_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_802_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_808_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_371_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_814_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_fu_534_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U11 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_out_q0,
        din1 => max_1_reg_348,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_371_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then 
                c_0_reg_281 <= c_reg_890;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_407_p2 = ap_const_lv1_0))) then 
                c_0_reg_281 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_407_p2 = ap_const_lv1_1))) then 
                f_0_reg_236 <= f_reg_830;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_236 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_0_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_675_p2 = ap_const_lv1_1))) then 
                max_0_reg_316 <= max_1_reg_348;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_0))) then 
                max_0_reg_316 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_1_reg_348 <= max_3_fu_820_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_0))) then 
                max_1_reg_348 <= max_0_reg_316;
            end if; 
        end if;
    end process;

    mpc_0_reg_360_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                mpc_0_reg_360 <= mpc_reg_929;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_0))) then 
                mpc_0_reg_360 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_675_p2 = ap_const_lv1_1))) then 
                mpr_0_reg_337 <= mpr_reg_908;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_0))) then 
                mpr_0_reg_337 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul9_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_1))) then 
                phi_mul9_reg_258 <= add_ln13_reg_850;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_0))) then 
                phi_mul9_reg_258 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_292 <= add_ln16_reg_882;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_407_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_292 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    phi_urem11_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_1))) then 
                phi_urem11_reg_269 <= select_ln38_fu_501_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_0))) then 
                phi_urem11_reg_269 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_304_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then 
                phi_urem_reg_304 <= select_ln37_fu_663_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_407_p2 = ap_const_lv1_0))) then 
                phi_urem_reg_304 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_1))) then 
                r_0_reg_247 <= r_reg_858;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_0))) then 
                r_0_reg_247 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_850 <= add_ln13_fu_401_p2;
                r_reg_858 <= r_fu_413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                add_ln16_reg_882 <= add_ln16_fu_463_p2;
                c_reg_890 <= c_fu_475_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_407_p2 = ap_const_lv1_0))) then
                add_ln36_reg_877 <= add_ln36_fu_457_p2;
                    shl_ln_reg_863(4 downto 1) <= shl_ln_fu_419_p3(4 downto 1);
                trunc_ln36_reg_868 <= trunc_ln36_fu_427_p1;
                    zext_ln36_4_reg_872(4 downto 2) <= zext_ln36_4_fu_453_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_830 <= f_fu_383_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                max_reg_939 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mpc_reg_929 <= mpc_fu_681_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mpr_reg_908 <= mpr_fu_519_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_0))) then
                    mul_ln29_reg_913(9 downto 1) <= mul_ln29_fu_534_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_0))) then
                    shl_ln2_reg_895(4 downto 1) <= shl_ln2_fu_481_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_0))) then
                    zext_ln13_2_reg_840(2 downto 0) <= zext_ln13_2_fu_393_p1(2 downto 0);
                    zext_ln13_3_reg_845(2 downto 0) <= zext_ln13_3_fu_397_p1(2 downto 0);
                    zext_ln13_reg_835(2 downto 0) <= zext_ln13_fu_389_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_835(12 downto 3) <= "0000000000";
    zext_ln13_2_reg_840(7 downto 3) <= "00000";
    zext_ln13_3_reg_845(8 downto 3) <= "000000";
    shl_ln_reg_863(0) <= '0';
    zext_ln36_4_reg_872(1 downto 0) <= "00";
    zext_ln36_4_reg_872(6 downto 5) <= "00";
    shl_ln2_reg_895(0) <= '0';
    mul_ln29_reg_913(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_377_p2, ap_CS_fsm_state3, icmp_ln13_fu_407_p2, ap_CS_fsm_state4, icmp_ln16_fu_469_p2, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, ap_CS_fsm_state6, icmp_ln23_fu_675_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_407_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_469_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_675_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln13_fu_401_p2 <= std_logic_vector(unsigned(phi_mul9_reg_258) + unsigned(ap_const_lv9_16));
    add_ln16_fu_463_p2 <= std_logic_vector(unsigned(phi_mul_reg_292) + unsigned(ap_const_lv9_16));
    add_ln29_2_fu_727_p2 <= std_logic_vector(unsigned(sub_ln29_fu_721_p2) + unsigned(zext_ln13_reg_835));
    add_ln29_fu_696_p2 <= std_logic_vector(unsigned(mul_ln29_reg_913) + unsigned(zext_ln29_3_fu_692_p1));
    add_ln36_3_fu_558_p2 <= std_logic_vector(unsigned(zext_ln36_5_fu_554_p1) + unsigned(add_ln36_reg_877));
    add_ln36_4_fu_593_p2 <= std_logic_vector(unsigned(zext_ln13_3_reg_845) + unsigned(sub_ln36_fu_587_p2));
    add_ln36_5_fu_605_p2 <= std_logic_vector(unsigned(zext_ln36_5_fu_554_p1) + unsigned(zext_ln36_4_reg_872));
    add_ln36_6_fu_636_p2 <= std_logic_vector(unsigned(zext_ln13_2_reg_840) + unsigned(sub_ln36_1_fu_630_p2));
    add_ln36_fu_457_p2 <= std_logic_vector(unsigned(zext_ln36_4_fu_453_p1) + unsigned(zext_ln36_fu_441_p1));
    add_ln37_fu_651_p2 <= std_logic_vector(unsigned(phi_urem_reg_304) + unsigned(ap_const_lv4_1));
    add_ln38_fu_489_p2 <= std_logic_vector(unsigned(phi_urem11_reg_269) + unsigned(ap_const_lv4_1));
    and_ln29_2_fu_814_p2 <= (grp_fu_371_p2 and and_ln29_fu_808_p2);
    and_ln29_fu_808_p2 <= (or_ln29_fu_784_p2 and or_ln29_2_fu_802_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_377_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_377_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln10_fu_377_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_2_fu_754_p1 <= max_1_reg_348;
    bitcast_ln29_fu_737_p1 <= max_reg_939;
    c_fu_475_p2 <= std_logic_vector(unsigned(c_0_reg_281) + unsigned(ap_const_lv4_1));
    conv_out_address0 <= zext_ln29_5_fu_732_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_383_p2 <= std_logic_vector(unsigned(f_0_reg_236) + unsigned(ap_const_lv3_1));
    i_fu_525_p2 <= std_logic_vector(unsigned(zext_ln20_fu_509_p1) + unsigned(shl_ln_reg_863));
    icmp_ln10_fu_377_p2 <= "1" when (f_0_reg_236 = ap_const_lv3_6) else "0";
    icmp_ln13_fu_407_p2 <= "1" when (r_0_reg_247 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_469_p2 <= "1" when (c_0_reg_281 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_513_p2 <= "1" when (mpr_0_reg_337 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_675_p2 <= "1" when (mpc_0_reg_360 = ap_const_lv2_2) else "0";
    icmp_ln29_4_fu_778_p2 <= "1" when (trunc_ln29_fu_750_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_5_fu_790_p2 <= "0" when (tmp_9_fu_758_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_6_fu_796_p2 <= "1" when (trunc_ln29_2_fu_768_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_772_p2 <= "0" when (tmp_fu_740_p4 = ap_const_lv8_FF) else "1";
    icmp_ln37_fu_657_p2 <= "1" when (unsigned(add_ln37_fu_651_p2) < unsigned(ap_const_lv4_3)) else "0";
    icmp_ln38_fu_495_p2 <= "1" when (unsigned(add_ln38_fu_489_p2) < unsigned(ap_const_lv4_3)) else "0";
    j_fu_687_p2 <= std_logic_vector(unsigned(zext_ln23_fu_671_p1) + unsigned(shl_ln2_reg_895));
    max_3_fu_820_p3 <= 
        max_reg_939 when (and_ln29_2_fu_814_p2(0) = '1') else 
        max_1_reg_348;
    max_pool_out_0_0_address0 <= zext_ln36_7_fu_598_p1(8 - 1 downto 0);

    max_pool_out_0_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_0_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_0_d0 <= max_0_reg_316;

    max_pool_out_0_0_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln36_1_fu_540_p1 = ap_const_lv3_0) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1) and (trunc_ln36_reg_868 = ap_const_lv3_0))) then 
            max_pool_out_0_0_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_1_address0 <= zext_ln36_8_fu_641_p1(7 - 1 downto 0);

    max_pool_out_0_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_0_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_1_d0 <= max_0_reg_316;

    max_pool_out_0_1_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if (((trunc_ln36_1_fu_540_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1) and (trunc_ln36_reg_868 = ap_const_lv3_0))) then 
            max_pool_out_0_1_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_2_address0 <= zext_ln36_8_fu_641_p1(7 - 1 downto 0);

    max_pool_out_0_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_0_2_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_2_d0 <= max_0_reg_316;

    max_pool_out_0_2_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if ((not((trunc_ln36_1_fu_540_p1 = ap_const_lv3_0)) and not((trunc_ln36_1_fu_540_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1) and (trunc_ln36_reg_868 = ap_const_lv3_0))) then 
            max_pool_out_0_2_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_0_address0 <= zext_ln36_7_fu_598_p1(7 - 1 downto 0);

    max_pool_out_1_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_1_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_0_d0 <= max_0_reg_316;

    max_pool_out_1_0_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln36_1_fu_540_p1 = ap_const_lv3_0) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1) and (trunc_ln36_reg_868 = ap_const_lv3_1))) then 
            max_pool_out_1_0_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_1_address0 <= zext_ln36_8_fu_641_p1(7 - 1 downto 0);

    max_pool_out_1_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_1_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_1_d0 <= max_0_reg_316;

    max_pool_out_1_1_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if (((trunc_ln36_1_fu_540_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1) and (trunc_ln36_reg_868 = ap_const_lv3_1))) then 
            max_pool_out_1_1_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_2_address0 <= zext_ln36_8_fu_641_p1(7 - 1 downto 0);

    max_pool_out_1_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_1_2_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_2_d0 <= max_0_reg_316;

    max_pool_out_1_2_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if ((not((trunc_ln36_1_fu_540_p1 = ap_const_lv3_0)) and not((trunc_ln36_1_fu_540_p1 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1) and (trunc_ln36_reg_868 = ap_const_lv3_1))) then 
            max_pool_out_1_2_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_0_address0 <= zext_ln36_7_fu_598_p1(7 - 1 downto 0);

    max_pool_out_2_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_2_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_0_d0 <= max_0_reg_316;

    max_pool_out_2_0_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if ((not((trunc_ln36_reg_868 = ap_const_lv3_0)) and not((trunc_ln36_reg_868 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln36_1_fu_540_p1 = ap_const_lv3_0) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then 
            max_pool_out_2_0_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_1_address0 <= zext_ln36_8_fu_641_p1(7 - 1 downto 0);

    max_pool_out_2_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_2_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_1_d0 <= max_0_reg_316;

    max_pool_out_2_1_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if ((not((trunc_ln36_reg_868 = ap_const_lv3_0)) and not((trunc_ln36_reg_868 = ap_const_lv3_1)) and (trunc_ln36_1_fu_540_p1 = ap_const_lv3_1) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then 
            max_pool_out_2_1_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_2_address0 <= zext_ln36_8_fu_641_p1(7 - 1 downto 0);

    max_pool_out_2_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_2_2_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_2_d0 <= max_0_reg_316;

    max_pool_out_2_2_we0_assign_proc : process(trunc_ln36_reg_868, ap_CS_fsm_state5, icmp_ln20_fu_513_p2, trunc_ln36_1_fu_540_p1)
    begin
        if ((not((trunc_ln36_reg_868 = ap_const_lv3_0)) and not((trunc_ln36_1_fu_540_p1 = ap_const_lv3_0)) and not((trunc_ln36_1_fu_540_p1 = ap_const_lv3_1)) and not((trunc_ln36_reg_868 = ap_const_lv3_1)) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_513_p2 = ap_const_lv1_1))) then 
            max_pool_out_2_2_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_681_p2 <= std_logic_vector(unsigned(mpc_0_reg_360) + unsigned(ap_const_lv2_1));
    mpr_fu_519_p2 <= std_logic_vector(unsigned(mpr_0_reg_337) + unsigned(ap_const_lv2_1));
    mul_ln29_fu_534_p0 <= mul_ln29_fu_534_p00(5 - 1 downto 0);
    mul_ln29_fu_534_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_525_p2),10));
    mul_ln29_fu_534_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_fu_534_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln29_2_fu_802_p2 <= (icmp_ln29_6_fu_796_p2 or icmp_ln29_5_fu_790_p2);
    or_ln29_fu_784_p2 <= (icmp_ln29_fu_772_p2 or icmp_ln29_4_fu_778_p2);
    p_shl1_cast_fu_701_p3 <= (add_ln29_fu_696_p2 & ap_const_lv3_0);
    p_shl3_cast_fu_614_p3 <= (trunc_ln36_3_fu_610_p1 & ap_const_lv3_0);
    p_shl4_cast_fu_622_p3 <= (add_ln36_5_fu_605_p2 & ap_const_lv1_0);
    p_shl5_cast_fu_567_p3 <= (trunc_ln36_2_fu_563_p1 & ap_const_lv3_0);
    r_fu_413_p2 <= std_logic_vector(unsigned(r_0_reg_247) + unsigned(ap_const_lv4_1));
    select_ln37_fu_663_p3 <= 
        add_ln37_fu_651_p2 when (icmp_ln37_fu_657_p2(0) = '1') else 
        ap_const_lv4_0;
    select_ln38_fu_501_p3 <= 
        add_ln38_fu_489_p2 when (icmp_ln38_fu_495_p2(0) = '1') else 
        ap_const_lv4_0;
    shl_ln2_fu_481_p3 <= (c_0_reg_281 & ap_const_lv1_0);
    shl_ln_fu_419_p3 <= (r_0_reg_247 & ap_const_lv1_0);
    sub_ln29_fu_721_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_701_p3) - unsigned(zext_ln29_4_fu_717_p1));
    sub_ln36_1_fu_630_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_614_p3) - unsigned(p_shl4_cast_fu_622_p3));
    sub_ln36_fu_587_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_567_p3) - unsigned(zext_ln36_6_fu_583_p1));
    tmp_10_fu_709_p3 <= (add_ln29_fu_696_p2 & ap_const_lv1_0);
    tmp_1_fu_431_p4 <= phi_mul9_reg_258(8 downto 6);
    tmp_2_fu_445_p3 <= (tmp_1_fu_431_p4 & ap_const_lv2_0);
    tmp_3_fu_544_p4 <= phi_mul_reg_292(8 downto 6);
    tmp_4_fu_575_p3 <= (add_ln36_3_fu_558_p2 & ap_const_lv1_0);
    tmp_9_fu_758_p4 <= bitcast_ln29_2_fu_754_p1(30 downto 23);
    tmp_fu_740_p4 <= bitcast_ln29_fu_737_p1(30 downto 23);
    trunc_ln29_2_fu_768_p1 <= bitcast_ln29_2_fu_754_p1(23 - 1 downto 0);
    trunc_ln29_fu_750_p1 <= bitcast_ln29_fu_737_p1(23 - 1 downto 0);
    trunc_ln36_1_fu_540_p1 <= phi_urem_reg_304(3 - 1 downto 0);
    trunc_ln36_2_fu_563_p1 <= add_ln36_3_fu_558_p2(6 - 1 downto 0);
    trunc_ln36_3_fu_610_p1 <= add_ln36_5_fu_605_p2(5 - 1 downto 0);
    trunc_ln36_fu_427_p1 <= phi_urem11_reg_269(3 - 1 downto 0);
    zext_ln13_2_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_236),8));
    zext_ln13_3_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_236),9));
    zext_ln13_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_236),13));
    zext_ln20_fu_509_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_0_reg_337),5));
    zext_ln23_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_reg_360),5));
    zext_ln29_3_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_687_p2),10));
    zext_ln29_4_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_709_p3),13));
    zext_ln29_5_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_2_fu_727_p2),64));
    zext_ln36_4_fu_453_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_445_p3),7));
    zext_ln36_5_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_544_p4),7));
    zext_ln36_6_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_575_p3),9));
    zext_ln36_7_fu_598_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_4_fu_593_p2),64));
    zext_ln36_8_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_6_fu_636_p2),64));
    zext_ln36_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_431_p4),7));
end behav;
