-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_0_ce0 : OUT STD_LOGIC;
    max_pool_out_0_we0 : OUT STD_LOGIC;
    max_pool_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_1_ce0 : OUT STD_LOGIC;
    max_pool_out_1_we0 : OUT STD_LOGIC;
    max_pool_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_2_ce0 : OUT STD_LOGIC;
    max_pool_out_2_we0 : OUT STD_LOGIC;
    max_pool_out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_3_ce0 : OUT STD_LOGIC;
    max_pool_out_3_we0 : OUT STD_LOGIC;
    max_pool_out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_4_ce0 : OUT STD_LOGIC;
    max_pool_out_4_we0 : OUT STD_LOGIC;
    max_pool_out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_5_ce0 : OUT STD_LOGIC;
    max_pool_out_5_we0 : OUT STD_LOGIC;
    max_pool_out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal f_fu_292_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_558 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln13_fu_298_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln13_reg_563 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln10_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln13_fu_302_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_reg_568 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal r_fu_314_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_576 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_581 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln13_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_589 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal shl_ln1_fu_340_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln1_reg_594 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpr_fu_358_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_602 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mul_ln29_fu_373_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln29_reg_607 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln20_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mpc_fu_409_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpc_reg_615 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln23_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal max_reg_625 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal max_2_fu_548_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal f_0_reg_181 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_0_reg_193 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_204 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_216 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_228 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_246 : STD_LOGIC_VECTOR (1 downto 0);
    signal max_1_reg_257 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpc_0_reg_269 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln36_4_fu_389_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_4_fu_460_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln20_fu_348_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_364_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln29_fu_373_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_fu_379_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln36_fu_383_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln23_fu_399_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_fu_415_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_2_fu_420_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln29_fu_424_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_437_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_429_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln29_3_fu_445_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln29_fu_449_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln29_1_fu_455_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_465_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_35_fu_482_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_468_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_478_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_70_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_486_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_35_fu_496_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_72_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_71_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_35_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_536_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_35_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_fu_373_p00 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U11 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_out_q0,
        din1 => max_1_reg_257,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_280_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_216_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
                c_0_reg_216 <= c_reg_589;
            elsif (((icmp_ln13_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                c_0_reg_216 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_308_p2 = ap_const_lv1_1))) then 
                f_0_reg_181 <= f_reg_558;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_181 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    max_0_reg_228_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_403_p2 = ap_const_lv1_1))) then 
                max_0_reg_228 <= max_1_reg_257;
            elsif (((icmp_ln16_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                max_0_reg_228 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    max_1_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                max_1_reg_257 <= max_2_fu_548_p3;
            elsif (((icmp_ln20_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                max_1_reg_257 <= max_0_reg_228;
            end if; 
        end if;
    end process;

    mpc_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                mpc_0_reg_269 <= mpc_reg_615;
            elsif (((icmp_ln20_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                mpc_0_reg_269 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_403_p2 = ap_const_lv1_1))) then 
                mpr_0_reg_246 <= mpr_reg_602;
            elsif (((icmp_ln16_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                mpr_0_reg_246 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_328_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_204 <= add_ln13_reg_568;
            elsif (((icmp_ln10_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_204 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_328_p2 = ap_const_lv1_1))) then 
                r_0_reg_193 <= r_reg_576;
            elsif (((icmp_ln10_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                r_0_reg_193 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln13_reg_568 <= add_ln13_fu_302_p2;
                r_reg_576 <= r_fu_314_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                c_reg_589 <= c_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                f_reg_558 <= f_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                max_reg_625 <= conv_out_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                mpc_reg_615 <= mpc_fu_409_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                mpr_reg_602 <= mpr_fu_358_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_352_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    mul_ln29_reg_607(9 downto 1) <= mul_ln29_fu_373_p2(9 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln16_fu_328_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln1_reg_594(4 downto 1) <= shl_ln1_fu_340_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_308_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    shl_ln_reg_581(4 downto 1) <= shl_ln_fu_320_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_reg_563(2 downto 0) <= zext_ln13_fu_298_p1(2 downto 0);
            end if;
        end if;
    end process;
    zext_ln13_reg_563(12 downto 3) <= "0000000000";
    shl_ln_reg_581(0) <= '0';
    shl_ln1_reg_594(0) <= '0';
    mul_ln29_reg_607(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_286_p2, ap_CS_fsm_state3, icmp_ln13_fu_308_p2, ap_CS_fsm_state4, icmp_ln16_fu_328_p2, ap_CS_fsm_state5, icmp_ln20_fu_352_p2, ap_CS_fsm_state6, icmp_ln23_fu_403_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln10_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_308_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln16_fu_328_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln23_fu_403_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    add_ln13_fu_302_p2 <= std_logic_vector(unsigned(phi_mul_reg_204) + unsigned(ap_const_lv8_D));
    add_ln29_1_fu_455_p2 <= std_logic_vector(unsigned(sub_ln29_fu_449_p2) + unsigned(zext_ln13_reg_563));
    add_ln29_fu_424_p2 <= std_logic_vector(unsigned(mul_ln29_reg_607) + unsigned(zext_ln29_2_fu_420_p1));
    add_ln36_fu_383_p2 <= std_logic_vector(unsigned(phi_mul_reg_204) + unsigned(zext_ln36_fu_379_p1));
    and_ln29_35_fu_542_p2 <= (grp_fu_280_p2 and and_ln29_fu_536_p2);
    and_ln29_fu_536_p2 <= (or_ln29_fu_512_p2 and or_ln29_35_fu_530_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln10_fu_286_p2)
    begin
        if ((((icmp_ln10_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln10_fu_286_p2)
    begin
        if (((icmp_ln10_fu_286_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_35_fu_482_p1 <= max_1_reg_257;
    bitcast_ln29_fu_465_p1 <= max_reg_625;
    c_fu_334_p2 <= std_logic_vector(unsigned(c_0_reg_216) + unsigned(ap_const_lv4_1));
    conv_out_address0 <= zext_ln29_4_fu_460_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_292_p2 <= std_logic_vector(unsigned(f_0_reg_181) + unsigned(ap_const_lv3_1));
    i_fu_364_p2 <= std_logic_vector(unsigned(zext_ln20_fu_348_p1) + unsigned(shl_ln_reg_581));
    icmp_ln10_fu_286_p2 <= "1" when (f_0_reg_181 = ap_const_lv3_6) else "0";
    icmp_ln13_fu_308_p2 <= "1" when (r_0_reg_193 = ap_const_lv4_D) else "0";
    icmp_ln16_fu_328_p2 <= "1" when (c_0_reg_216 = ap_const_lv4_D) else "0";
    icmp_ln20_fu_352_p2 <= "1" when (mpr_0_reg_246 = ap_const_lv2_2) else "0";
    icmp_ln23_fu_403_p2 <= "1" when (mpc_0_reg_269 = ap_const_lv2_2) else "0";
    icmp_ln29_70_fu_506_p2 <= "1" when (trunc_ln29_fu_478_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_71_fu_518_p2 <= "0" when (tmp_s_fu_486_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_72_fu_524_p2 <= "1" when (trunc_ln29_35_fu_496_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_500_p2 <= "0" when (tmp_fu_468_p4 = ap_const_lv8_FF) else "1";
    j_fu_415_p2 <= std_logic_vector(unsigned(zext_ln23_fu_399_p1) + unsigned(shl_ln1_reg_594));
    max_2_fu_548_p3 <= 
        max_reg_625 when (and_ln29_35_fu_542_p2(0) = '1') else 
        max_1_reg_257;
    max_pool_out_0_address0 <= zext_ln36_4_fu_389_p1(8 - 1 downto 0);

    max_pool_out_0_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_0_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_d0 <= max_0_reg_228;

    max_pool_out_0_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_352_p2, f_0_reg_181)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (f_0_reg_181 = ap_const_lv3_0) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
            max_pool_out_0_we0 <= ap_const_logic_1;
        else 
            max_pool_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_address0 <= zext_ln36_4_fu_389_p1(8 - 1 downto 0);

    max_pool_out_1_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_1_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_d0 <= max_0_reg_228;

    max_pool_out_1_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_352_p2, f_0_reg_181)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (f_0_reg_181 = ap_const_lv3_1) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
            max_pool_out_1_we0 <= ap_const_logic_1;
        else 
            max_pool_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_address0 <= zext_ln36_4_fu_389_p1(8 - 1 downto 0);

    max_pool_out_2_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_2_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_d0 <= max_0_reg_228;

    max_pool_out_2_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_352_p2, f_0_reg_181)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (f_0_reg_181 = ap_const_lv3_2) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
            max_pool_out_2_we0 <= ap_const_logic_1;
        else 
            max_pool_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_address0 <= zext_ln36_4_fu_389_p1(8 - 1 downto 0);

    max_pool_out_3_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_3_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_d0 <= max_0_reg_228;

    max_pool_out_3_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_352_p2, f_0_reg_181)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (f_0_reg_181 = ap_const_lv3_3) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
            max_pool_out_3_we0 <= ap_const_logic_1;
        else 
            max_pool_out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_address0 <= zext_ln36_4_fu_389_p1(8 - 1 downto 0);

    max_pool_out_4_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_4_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_d0 <= max_0_reg_228;

    max_pool_out_4_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_352_p2, f_0_reg_181)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (f_0_reg_181 = ap_const_lv3_4) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
            max_pool_out_4_we0 <= ap_const_logic_1;
        else 
            max_pool_out_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_address0 <= zext_ln36_4_fu_389_p1(8 - 1 downto 0);

    max_pool_out_5_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            max_pool_out_5_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_5_d0 <= max_0_reg_228;

    max_pool_out_5_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln20_fu_352_p2, f_0_reg_181)
    begin
        if ((not((f_0_reg_181 = ap_const_lv3_0)) and not((f_0_reg_181 = ap_const_lv3_1)) and not((f_0_reg_181 = ap_const_lv3_2)) and not((f_0_reg_181 = ap_const_lv3_3)) and not((f_0_reg_181 = ap_const_lv3_4)) and (ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln20_fu_352_p2 = ap_const_lv1_1))) then 
            max_pool_out_5_we0 <= ap_const_logic_1;
        else 
            max_pool_out_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpc_fu_409_p2 <= std_logic_vector(unsigned(mpc_0_reg_269) + unsigned(ap_const_lv2_1));
    mpr_fu_358_p2 <= std_logic_vector(unsigned(mpr_0_reg_246) + unsigned(ap_const_lv2_1));
    mul_ln29_fu_373_p0 <= mul_ln29_fu_373_p00(5 - 1 downto 0);
    mul_ln29_fu_373_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_364_p2),10));
    mul_ln29_fu_373_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln29_fu_373_p0) * unsigned(ap_const_lv10_1A), 10));
    or_ln29_35_fu_530_p2 <= (icmp_ln29_72_fu_524_p2 or icmp_ln29_71_fu_518_p2);
    or_ln29_fu_512_p2 <= (icmp_ln29_fu_500_p2 or icmp_ln29_70_fu_506_p2);
    p_shl_cast_fu_429_p3 <= (add_ln29_fu_424_p2 & ap_const_lv3_0);
    r_fu_314_p2 <= std_logic_vector(unsigned(r_0_reg_193) + unsigned(ap_const_lv4_1));
    shl_ln1_fu_340_p3 <= (c_0_reg_216 & ap_const_lv1_0);
    shl_ln_fu_320_p3 <= (r_0_reg_193 & ap_const_lv1_0);
    sub_ln29_fu_449_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_429_p3) - unsigned(zext_ln29_3_fu_445_p1));
    tmp_1_fu_437_p3 <= (add_ln29_fu_424_p2 & ap_const_lv1_0);
    tmp_fu_468_p4 <= bitcast_ln29_fu_465_p1(30 downto 23);
    tmp_s_fu_486_p4 <= bitcast_ln29_35_fu_482_p1(30 downto 23);
    trunc_ln29_35_fu_496_p1 <= bitcast_ln29_35_fu_482_p1(23 - 1 downto 0);
    trunc_ln29_fu_478_p1 <= bitcast_ln29_fu_465_p1(23 - 1 downto 0);
    zext_ln13_fu_298_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_181),13));
    zext_ln20_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpr_0_reg_246),5));
    zext_ln23_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mpc_0_reg_269),5));
    zext_ln29_2_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_fu_415_p2),10));
    zext_ln29_3_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_437_p3),13));
    zext_ln29_4_fu_460_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_455_p2),64));
    zext_ln36_4_fu_389_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_fu_383_p2),64));
    zext_ln36_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_216),8));
end behav;
