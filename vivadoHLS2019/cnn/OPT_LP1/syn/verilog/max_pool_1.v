// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_0_address0,
        max_pool_out_0_ce0,
        max_pool_out_0_we0,
        max_pool_out_0_d0,
        max_pool_out_1_address0,
        max_pool_out_1_ce0,
        max_pool_out_1_we0,
        max_pool_out_1_d0,
        max_pool_out_2_address0,
        max_pool_out_2_ce0,
        max_pool_out_2_we0,
        max_pool_out_2_d0,
        max_pool_out_3_address0,
        max_pool_out_3_ce0,
        max_pool_out_3_we0,
        max_pool_out_3_d0,
        max_pool_out_4_address0,
        max_pool_out_4_ce0,
        max_pool_out_4_we0,
        max_pool_out_4_d0,
        max_pool_out_5_address0,
        max_pool_out_5_ce0,
        max_pool_out_5_we0,
        max_pool_out_5_d0,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] max_pool_out_0_address0;
output   max_pool_out_0_ce0;
output   max_pool_out_0_we0;
output  [31:0] max_pool_out_0_d0;
output  [7:0] max_pool_out_1_address0;
output   max_pool_out_1_ce0;
output   max_pool_out_1_we0;
output  [31:0] max_pool_out_1_d0;
output  [7:0] max_pool_out_2_address0;
output   max_pool_out_2_ce0;
output   max_pool_out_2_we0;
output  [31:0] max_pool_out_2_d0;
output  [7:0] max_pool_out_3_address0;
output   max_pool_out_3_ce0;
output   max_pool_out_3_we0;
output  [31:0] max_pool_out_3_d0;
output  [7:0] max_pool_out_4_address0;
output   max_pool_out_4_ce0;
output   max_pool_out_4_we0;
output  [31:0] max_pool_out_4_d0;
output  [7:0] max_pool_out_5_address0;
output   max_pool_out_5_ce0;
output   max_pool_out_5_we0;
output  [31:0] max_pool_out_5_d0;
output  [10:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [10:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [10:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [10:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_0_ce0;
reg max_pool_out_0_we0;
reg max_pool_out_1_ce0;
reg max_pool_out_1_we0;
reg max_pool_out_2_ce0;
reg max_pool_out_2_we0;
reg max_pool_out_3_ce0;
reg max_pool_out_3_we0;
reg max_pool_out_4_ce0;
reg max_pool_out_4_we0;
reg max_pool_out_5_ce0;
reg max_pool_out_5_we0;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten13_reg_228;
reg   [2:0] f_0_reg_239;
reg   [7:0] indvar_flatten_reg_250;
reg   [3:0] r_0_reg_261;
reg   [3:0] c_0_reg_273;
wire   [0:0] icmp_ln10_fu_306_p2;
reg   [0:0] icmp_ln10_reg_874;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_874_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_874_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_874_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_874_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_874_pp0_iter5_reg;
wire   [9:0] add_ln10_fu_312_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_324_p2;
reg   [0:0] icmp_ln13_reg_883;
wire   [2:0] select_ln29_8_fu_330_p3;
reg   [2:0] select_ln29_8_reg_890;
reg   [2:0] select_ln29_8_reg_890_pp0_iter1_reg;
reg   [2:0] select_ln29_8_reg_890_pp0_iter2_reg;
reg   [2:0] select_ln29_8_reg_890_pp0_iter3_reg;
reg   [2:0] select_ln29_8_reg_890_pp0_iter4_reg;
reg   [2:0] select_ln29_8_reg_890_pp0_iter5_reg;
wire   [7:0] select_ln13_fu_344_p3;
wire   [3:0] select_ln36_fu_390_p3;
reg   [3:0] select_ln36_reg_901;
reg   [3:0] select_ln36_reg_901_pp0_iter2_reg;
reg   [3:0] select_ln36_reg_901_pp0_iter3_reg;
reg   [3:0] select_ln36_reg_901_pp0_iter4_reg;
reg   [3:0] select_ln36_reg_901_pp0_iter5_reg;
wire   [3:0] select_ln36_2_fu_398_p3;
reg   [3:0] select_ln36_2_reg_906;
reg    ap_enable_reg_pp0_iter1;
reg   [3:0] select_ln36_2_reg_906_pp0_iter2_reg;
reg   [3:0] select_ln36_2_reg_906_pp0_iter3_reg;
reg   [3:0] select_ln36_2_reg_906_pp0_iter4_reg;
reg   [3:0] select_ln36_2_reg_906_pp0_iter5_reg;
wire   [63:0] zext_ln29_9_fu_466_p1;
reg   [63:0] zext_ln29_9_reg_912;
reg   [63:0] zext_ln29_9_reg_912_pp0_iter2_reg;
wire   [11:0] add_ln29_6_fu_513_p2;
reg   [11:0] add_ln29_6_reg_922;
wire   [3:0] c_fu_519_p2;
reg   [3:0] c_reg_927;
reg   [31:0] conv_1_out_0_load_reg_932;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln29_12_fu_525_p1;
reg   [63:0] zext_ln29_12_reg_939;
reg   [63:0] zext_ln29_12_reg_939_pp0_iter3_reg;
wire   [31:0] select_ln29_fu_570_p3;
reg   [31:0] select_ln29_reg_954;
reg   [31:0] conv_1_out_0_load_1_reg_961;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] select_ln29_4_fu_660_p3;
reg   [31:0] select_ln29_4_reg_973;
reg   [31:0] conv_1_out_1_load_reg_980;
reg    ap_enable_reg_pp0_iter4;
wire   [31:0] select_ln29_5_fu_749_p3;
reg   [31:0] select_ln29_5_reg_987;
reg   [31:0] conv_1_out_1_load_1_reg_994;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter6;
reg   [2:0] ap_phi_mux_f_0_phi_fu_243_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_265_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_277_p4;
wire   [63:0] zext_ln36_8_fu_856_p1;
wire   [31:0] select_ln29_6_fu_841_p3;
wire   [31:0] grp_fu_291_p1;
wire   [31:0] grp_fu_296_p1;
wire   [31:0] grp_fu_301_p1;
wire   [2:0] f_fu_318_p2;
wire   [7:0] add_ln13_fu_338_p2;
wire   [0:0] icmp_ln16_fu_367_p2;
wire   [0:0] xor_ln29_fu_362_p2;
wire   [3:0] select_ln29_7_fu_352_p3;
wire   [0:0] and_ln29_13_fu_373_p2;
wire   [0:0] or_ln36_fu_385_p2;
wire   [3:0] r_fu_379_p2;
wire   [3:0] mul_ln29_fu_410_p1;
wire   [4:0] shl_ln_fu_416_p3;
wire   [8:0] zext_ln29_7_fu_424_p1;
wire   [8:0] mul_ln29_fu_410_p2;
wire   [8:0] add_ln29_fu_428_p2;
wire   [9:0] tmp_fu_442_p3;
wire   [11:0] p_shl2_cast_fu_434_p3;
wire   [11:0] zext_ln29_8_fu_450_p1;
wire   [11:0] zext_ln36_fu_359_p1;
wire   [11:0] sub_ln29_fu_454_p2;
wire   [11:0] add_ln29_4_fu_460_p2;
wire   [4:0] or_ln27_fu_471_p2;
wire   [8:0] zext_ln29_10_fu_477_p1;
wire   [8:0] add_ln29_5_fu_481_p2;
wire   [9:0] tmp_23_fu_495_p3;
wire   [11:0] p_shl_cast_fu_487_p3;
wire   [11:0] zext_ln29_11_fu_503_p1;
wire   [11:0] sub_ln29_1_fu_507_p2;
wire   [31:0] bitcast_ln29_fu_529_p1;
wire   [7:0] tmp_s_fu_532_p4;
wire   [22:0] trunc_ln29_fu_542_p1;
wire   [0:0] icmp_ln29_14_fu_552_p2;
wire   [0:0] icmp_ln29_fu_546_p2;
wire   [0:0] or_ln29_fu_558_p2;
wire   [0:0] grp_fu_285_p2;
wire   [0:0] and_ln29_fu_564_p2;
wire   [31:0] bitcast_ln29_7_fu_578_p1;
wire   [31:0] bitcast_ln29_8_fu_595_p1;
wire   [7:0] tmp_14_fu_581_p4;
wire   [22:0] trunc_ln29_7_fu_591_p1;
wire   [0:0] icmp_ln29_16_fu_618_p2;
wire   [0:0] icmp_ln29_15_fu_612_p2;
wire   [7:0] tmp_15_fu_598_p4;
wire   [22:0] trunc_ln29_8_fu_608_p1;
wire   [0:0] icmp_ln29_18_fu_636_p2;
wire   [0:0] icmp_ln29_17_fu_630_p2;
wire   [0:0] or_ln29_7_fu_624_p2;
wire   [0:0] or_ln29_8_fu_642_p2;
wire   [0:0] and_ln29_7_fu_648_p2;
wire   [0:0] grp_fu_291_p2;
wire   [0:0] and_ln29_8_fu_654_p2;
wire   [31:0] bitcast_ln29_9_fu_667_p1;
wire   [31:0] bitcast_ln29_10_fu_684_p1;
wire   [7:0] tmp_17_fu_670_p4;
wire   [22:0] trunc_ln29_9_fu_680_p1;
wire   [0:0] icmp_ln29_20_fu_707_p2;
wire   [0:0] icmp_ln29_19_fu_701_p2;
wire   [7:0] tmp_18_fu_687_p4;
wire   [22:0] trunc_ln29_10_fu_697_p1;
wire   [0:0] icmp_ln29_22_fu_725_p2;
wire   [0:0] icmp_ln29_21_fu_719_p2;
wire   [0:0] or_ln29_9_fu_713_p2;
wire   [0:0] or_ln29_10_fu_731_p2;
wire   [0:0] and_ln29_9_fu_737_p2;
wire   [0:0] grp_fu_296_p2;
wire   [0:0] and_ln29_10_fu_743_p2;
wire   [31:0] bitcast_ln29_11_fu_759_p1;
wire   [31:0] bitcast_ln29_12_fu_776_p1;
wire   [7:0] tmp_20_fu_762_p4;
wire   [22:0] trunc_ln29_11_fu_772_p1;
wire   [0:0] icmp_ln29_24_fu_799_p2;
wire   [0:0] icmp_ln29_23_fu_793_p2;
wire   [7:0] tmp_21_fu_779_p4;
wire   [22:0] trunc_ln29_12_fu_789_p1;
wire   [0:0] icmp_ln29_26_fu_817_p2;
wire   [0:0] icmp_ln29_25_fu_811_p2;
wire   [0:0] or_ln29_11_fu_805_p2;
wire   [0:0] or_ln29_12_fu_823_p2;
wire   [0:0] and_ln29_11_fu_829_p2;
wire   [0:0] grp_fu_301_p2;
wire   [0:0] and_ln29_12_fu_835_p2;
wire   [7:0] grp_fu_865_p3;
wire   [4:0] grp_fu_865_p0;
wire   [3:0] grp_fu_865_p1;
wire   [3:0] grp_fu_865_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_865_p10;
wire   [7:0] grp_fu_865_p20;
wire   [8:0] mul_ln29_fu_410_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_0_q0),
    .din1(32'd8388608),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_285_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_0_q1),
    .din1(grp_fu_291_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_291_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_1_q0),
    .din1(grp_fu_296_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_296_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U23(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_1_q1),
    .din1(grp_fu_301_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_301_p2)
);

cnn_mac_muladd_5ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_5ng8j_U24(
    .din0(grp_fu_865_p0),
    .din1(grp_fu_865_p1),
    .din2(grp_fu_865_p2),
    .dout(grp_fu_865_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_874_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_0_reg_273 <= c_reg_927;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_273 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_0_reg_239 <= select_ln29_8_reg_890;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_239 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten13_reg_228 <= add_ln10_fu_312_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_228 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_250 <= select_ln13_fu_344_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_250 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_874_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_0_reg_261 <= select_ln36_2_reg_906;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_261 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln29_6_reg_922 <= add_ln29_6_fu_513_p2;
        select_ln36_reg_901 <= select_ln36_fu_390_p3;
        zext_ln29_9_reg_912[11 : 0] <= zext_ln29_9_fu_466_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_reg_927 <= c_fu_519_p2;
        select_ln36_2_reg_906 <= select_ln36_2_fu_398_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln10_reg_874_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_load_1_reg_961 <= conv_1_out_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_874_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_load_reg_932 <= conv_1_out_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln10_reg_874_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_load_1_reg_994 <= conv_1_out_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln10_reg_874_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_load_reg_980 <= conv_1_out_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_874 <= icmp_ln10_fu_306_p2;
        icmp_ln10_reg_874_pp0_iter1_reg <= icmp_ln10_reg_874;
        select_ln29_8_reg_890_pp0_iter1_reg <= select_ln29_8_reg_890;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        icmp_ln10_reg_874_pp0_iter2_reg <= icmp_ln10_reg_874_pp0_iter1_reg;
        icmp_ln10_reg_874_pp0_iter3_reg <= icmp_ln10_reg_874_pp0_iter2_reg;
        icmp_ln10_reg_874_pp0_iter4_reg <= icmp_ln10_reg_874_pp0_iter3_reg;
        icmp_ln10_reg_874_pp0_iter5_reg <= icmp_ln10_reg_874_pp0_iter4_reg;
        select_ln29_8_reg_890_pp0_iter2_reg <= select_ln29_8_reg_890_pp0_iter1_reg;
        select_ln29_8_reg_890_pp0_iter3_reg <= select_ln29_8_reg_890_pp0_iter2_reg;
        select_ln29_8_reg_890_pp0_iter4_reg <= select_ln29_8_reg_890_pp0_iter3_reg;
        select_ln29_8_reg_890_pp0_iter5_reg <= select_ln29_8_reg_890_pp0_iter4_reg;
        select_ln36_2_reg_906_pp0_iter2_reg <= select_ln36_2_reg_906;
        select_ln36_2_reg_906_pp0_iter3_reg <= select_ln36_2_reg_906_pp0_iter2_reg;
        select_ln36_2_reg_906_pp0_iter4_reg <= select_ln36_2_reg_906_pp0_iter3_reg;
        select_ln36_2_reg_906_pp0_iter5_reg <= select_ln36_2_reg_906_pp0_iter4_reg;
        select_ln36_reg_901_pp0_iter2_reg <= select_ln36_reg_901;
        select_ln36_reg_901_pp0_iter3_reg <= select_ln36_reg_901_pp0_iter2_reg;
        select_ln36_reg_901_pp0_iter4_reg <= select_ln36_reg_901_pp0_iter3_reg;
        select_ln36_reg_901_pp0_iter5_reg <= select_ln36_reg_901_pp0_iter4_reg;
        zext_ln29_12_reg_939_pp0_iter3_reg[11 : 0] <= zext_ln29_12_reg_939[11 : 0];
        zext_ln29_9_reg_912_pp0_iter2_reg[11 : 0] <= zext_ln29_9_reg_912[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln13_reg_883 <= icmp_ln13_fu_324_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_4_reg_973 <= select_ln29_4_fu_660_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_5_reg_987 <= select_ln29_5_fu_749_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_306_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_8_reg_890 <= select_ln29_8_fu_330_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_954 <= select_ln29_fu_570_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_874_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln29_12_reg_939[11 : 0] <= zext_ln29_12_fu_525_p1[11 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_306_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_874_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_c_0_phi_fu_277_p4 = c_reg_927;
    end else begin
        ap_phi_mux_c_0_phi_fu_277_p4 = c_0_reg_273;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_874 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_f_0_phi_fu_243_p4 = select_ln29_8_reg_890;
    end else begin
        ap_phi_mux_f_0_phi_fu_243_p4 = f_0_reg_239;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_874_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_r_0_phi_fu_265_p4 = select_ln36_2_reg_906;
    end else begin
        ap_phi_mux_r_0_phi_fu_265_p4 = r_0_reg_261;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_ce0 = 1'b1;
    end else begin
        max_pool_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_8_reg_890_pp0_iter5_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_we0 = 1'b1;
    end else begin
        max_pool_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_ce0 = 1'b1;
    end else begin
        max_pool_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_8_reg_890_pp0_iter5_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_we0 = 1'b1;
    end else begin
        max_pool_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_2_ce0 = 1'b1;
    end else begin
        max_pool_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_8_reg_890_pp0_iter5_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_2_we0 = 1'b1;
    end else begin
        max_pool_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_3_ce0 = 1'b1;
    end else begin
        max_pool_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_8_reg_890_pp0_iter5_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_3_we0 = 1'b1;
    end else begin
        max_pool_out_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_4_ce0 = 1'b1;
    end else begin
        max_pool_out_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_8_reg_890_pp0_iter5_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_4_we0 = 1'b1;
    end else begin
        max_pool_out_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_5_ce0 = 1'b1;
    end else begin
        max_pool_out_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((select_ln29_8_reg_890_pp0_iter5_reg == 3'd5) | ((select_ln29_8_reg_890_pp0_iter5_reg == 3'd6) | (select_ln29_8_reg_890_pp0_iter5_reg == 3'd7))))) begin
        max_pool_out_5_we0 = 1'b1;
    end else begin
        max_pool_out_5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_306_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((icmp_ln10_fu_306_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_312_p2 = (indvar_flatten13_reg_228 + 10'd1);

assign add_ln13_fu_338_p2 = (indvar_flatten_reg_250 + 8'd1);

assign add_ln29_4_fu_460_p2 = (zext_ln36_fu_359_p1 + sub_ln29_fu_454_p2);

assign add_ln29_5_fu_481_p2 = (zext_ln29_10_fu_477_p1 + mul_ln29_fu_410_p2);

assign add_ln29_6_fu_513_p2 = (zext_ln36_fu_359_p1 + sub_ln29_1_fu_507_p2);

assign add_ln29_fu_428_p2 = (zext_ln29_7_fu_424_p1 + mul_ln29_fu_410_p2);

assign and_ln29_10_fu_743_p2 = (grp_fu_296_p2 & and_ln29_9_fu_737_p2);

assign and_ln29_11_fu_829_p2 = (or_ln29_12_fu_823_p2 & or_ln29_11_fu_805_p2);

assign and_ln29_12_fu_835_p2 = (grp_fu_301_p2 & and_ln29_11_fu_829_p2);

assign and_ln29_13_fu_373_p2 = (xor_ln29_fu_362_p2 & icmp_ln16_fu_367_p2);

assign and_ln29_7_fu_648_p2 = (or_ln29_8_fu_642_p2 & or_ln29_7_fu_624_p2);

assign and_ln29_8_fu_654_p2 = (grp_fu_291_p2 & and_ln29_7_fu_648_p2);

assign and_ln29_9_fu_737_p2 = (or_ln29_9_fu_713_p2 & or_ln29_10_fu_731_p2);

assign and_ln29_fu_564_p2 = (or_ln29_fu_558_p2 & grp_fu_285_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_10_fu_684_p1 = select_ln29_4_reg_973;

assign bitcast_ln29_11_fu_759_p1 = conv_1_out_1_load_1_reg_994;

assign bitcast_ln29_12_fu_776_p1 = select_ln29_5_reg_987;

assign bitcast_ln29_7_fu_578_p1 = conv_1_out_0_load_1_reg_961;

assign bitcast_ln29_8_fu_595_p1 = select_ln29_reg_954;

assign bitcast_ln29_9_fu_667_p1 = conv_1_out_1_load_reg_980;

assign bitcast_ln29_fu_529_p1 = conv_1_out_0_load_reg_932;

assign c_fu_519_p2 = (select_ln36_fu_390_p3 + 4'd1);

assign conv_1_out_0_address0 = zext_ln29_9_fu_466_p1;

assign conv_1_out_0_address1 = zext_ln29_12_fu_525_p1;

assign conv_1_out_1_address0 = zext_ln29_9_reg_912_pp0_iter2_reg;

assign conv_1_out_1_address1 = zext_ln29_12_reg_939_pp0_iter3_reg;

assign f_fu_318_p2 = (3'd1 + ap_phi_mux_f_0_phi_fu_243_p4);

assign grp_fu_291_p1 = ((and_ln29_fu_564_p2[0:0] === 1'b1) ? conv_1_out_0_load_reg_932 : 32'd8388608);

assign grp_fu_296_p1 = ((and_ln29_8_fu_654_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_961 : select_ln29_reg_954);

assign grp_fu_301_p1 = ((and_ln29_10_fu_743_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_980 : select_ln29_4_reg_973);

assign grp_fu_865_p0 = 8'd13;

assign grp_fu_865_p1 = grp_fu_865_p10;

assign grp_fu_865_p10 = select_ln36_2_reg_906_pp0_iter5_reg;

assign grp_fu_865_p2 = grp_fu_865_p20;

assign grp_fu_865_p20 = select_ln36_reg_901_pp0_iter5_reg;

assign icmp_ln10_fu_306_p2 = ((indvar_flatten13_reg_228 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_324_p2 = ((indvar_flatten_reg_250 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_367_p2 = ((ap_phi_mux_c_0_phi_fu_277_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln29_14_fu_552_p2 = ((trunc_ln29_fu_542_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_15_fu_612_p2 = ((tmp_14_fu_581_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_16_fu_618_p2 = ((trunc_ln29_7_fu_591_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_17_fu_630_p2 = ((tmp_15_fu_598_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_18_fu_636_p2 = ((trunc_ln29_8_fu_608_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_19_fu_701_p2 = ((tmp_17_fu_670_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_20_fu_707_p2 = ((trunc_ln29_9_fu_680_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_21_fu_719_p2 = ((tmp_18_fu_687_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_22_fu_725_p2 = ((trunc_ln29_10_fu_697_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_23_fu_793_p2 = ((tmp_20_fu_762_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_24_fu_799_p2 = ((trunc_ln29_11_fu_772_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_25_fu_811_p2 = ((tmp_21_fu_779_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_26_fu_817_p2 = ((trunc_ln29_12_fu_789_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_546_p2 = ((tmp_s_fu_532_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_0_address0 = zext_ln36_8_fu_856_p1;

assign max_pool_out_0_d0 = select_ln29_6_fu_841_p3;

assign max_pool_out_1_address0 = zext_ln36_8_fu_856_p1;

assign max_pool_out_1_d0 = select_ln29_6_fu_841_p3;

assign max_pool_out_2_address0 = zext_ln36_8_fu_856_p1;

assign max_pool_out_2_d0 = select_ln29_6_fu_841_p3;

assign max_pool_out_3_address0 = zext_ln36_8_fu_856_p1;

assign max_pool_out_3_d0 = select_ln29_6_fu_841_p3;

assign max_pool_out_4_address0 = zext_ln36_8_fu_856_p1;

assign max_pool_out_4_d0 = select_ln29_6_fu_841_p3;

assign max_pool_out_5_address0 = zext_ln36_8_fu_856_p1;

assign max_pool_out_5_d0 = select_ln29_6_fu_841_p3;

assign mul_ln29_fu_410_p1 = mul_ln29_fu_410_p10;

assign mul_ln29_fu_410_p10 = select_ln36_2_fu_398_p3;

assign mul_ln29_fu_410_p2 = (9'd26 * mul_ln29_fu_410_p1);

assign or_ln27_fu_471_p2 = (shl_ln_fu_416_p3 | 5'd1);

assign or_ln29_10_fu_731_p2 = (icmp_ln29_22_fu_725_p2 | icmp_ln29_21_fu_719_p2);

assign or_ln29_11_fu_805_p2 = (icmp_ln29_24_fu_799_p2 | icmp_ln29_23_fu_793_p2);

assign or_ln29_12_fu_823_p2 = (icmp_ln29_26_fu_817_p2 | icmp_ln29_25_fu_811_p2);

assign or_ln29_7_fu_624_p2 = (icmp_ln29_16_fu_618_p2 | icmp_ln29_15_fu_612_p2);

assign or_ln29_8_fu_642_p2 = (icmp_ln29_18_fu_636_p2 | icmp_ln29_17_fu_630_p2);

assign or_ln29_9_fu_713_p2 = (icmp_ln29_20_fu_707_p2 | icmp_ln29_19_fu_701_p2);

assign or_ln29_fu_558_p2 = (icmp_ln29_fu_546_p2 | icmp_ln29_14_fu_552_p2);

assign or_ln36_fu_385_p2 = (icmp_ln13_reg_883 | and_ln29_13_fu_373_p2);

assign p_shl2_cast_fu_434_p3 = {{add_ln29_fu_428_p2}, {3'd0}};

assign p_shl_cast_fu_487_p3 = {{add_ln29_5_fu_481_p2}, {3'd0}};

assign r_fu_379_p2 = (4'd1 + select_ln29_7_fu_352_p3);

assign select_ln13_fu_344_p3 = ((icmp_ln13_fu_324_p2[0:0] === 1'b1) ? 8'd1 : add_ln13_fu_338_p2);

assign select_ln29_4_fu_660_p3 = ((and_ln29_8_fu_654_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_961 : select_ln29_reg_954);

assign select_ln29_5_fu_749_p3 = ((and_ln29_10_fu_743_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_980 : select_ln29_4_reg_973);

assign select_ln29_6_fu_841_p3 = ((and_ln29_12_fu_835_p2[0:0] === 1'b1) ? conv_1_out_1_load_1_reg_994 : select_ln29_5_reg_987);

assign select_ln29_7_fu_352_p3 = ((icmp_ln13_reg_883[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_265_p4);

assign select_ln29_8_fu_330_p3 = ((icmp_ln13_fu_324_p2[0:0] === 1'b1) ? f_fu_318_p2 : ap_phi_mux_f_0_phi_fu_243_p4);

assign select_ln29_fu_570_p3 = ((and_ln29_fu_564_p2[0:0] === 1'b1) ? conv_1_out_0_load_reg_932 : 32'd8388608);

assign select_ln36_2_fu_398_p3 = ((and_ln29_13_fu_373_p2[0:0] === 1'b1) ? r_fu_379_p2 : select_ln29_7_fu_352_p3);

assign select_ln36_fu_390_p3 = ((or_ln36_fu_385_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_277_p4);

assign shl_ln_fu_416_p3 = {{select_ln36_fu_390_p3}, {1'd0}};

assign sub_ln29_1_fu_507_p2 = (p_shl_cast_fu_487_p3 - zext_ln29_11_fu_503_p1);

assign sub_ln29_fu_454_p2 = (p_shl2_cast_fu_434_p3 - zext_ln29_8_fu_450_p1);

assign tmp_14_fu_581_p4 = {{bitcast_ln29_7_fu_578_p1[30:23]}};

assign tmp_15_fu_598_p4 = {{bitcast_ln29_8_fu_595_p1[30:23]}};

assign tmp_17_fu_670_p4 = {{bitcast_ln29_9_fu_667_p1[30:23]}};

assign tmp_18_fu_687_p4 = {{bitcast_ln29_10_fu_684_p1[30:23]}};

assign tmp_20_fu_762_p4 = {{bitcast_ln29_11_fu_759_p1[30:23]}};

assign tmp_21_fu_779_p4 = {{bitcast_ln29_12_fu_776_p1[30:23]}};

assign tmp_23_fu_495_p3 = {{add_ln29_5_fu_481_p2}, {1'd0}};

assign tmp_fu_442_p3 = {{add_ln29_fu_428_p2}, {1'd0}};

assign tmp_s_fu_532_p4 = {{bitcast_ln29_fu_529_p1[30:23]}};

assign trunc_ln29_10_fu_697_p1 = bitcast_ln29_10_fu_684_p1[22:0];

assign trunc_ln29_11_fu_772_p1 = bitcast_ln29_11_fu_759_p1[22:0];

assign trunc_ln29_12_fu_789_p1 = bitcast_ln29_12_fu_776_p1[22:0];

assign trunc_ln29_7_fu_591_p1 = bitcast_ln29_7_fu_578_p1[22:0];

assign trunc_ln29_8_fu_608_p1 = bitcast_ln29_8_fu_595_p1[22:0];

assign trunc_ln29_9_fu_680_p1 = bitcast_ln29_9_fu_667_p1[22:0];

assign trunc_ln29_fu_542_p1 = bitcast_ln29_fu_529_p1[22:0];

assign xor_ln29_fu_362_p2 = (icmp_ln13_reg_883 ^ 1'd1);

assign zext_ln29_10_fu_477_p1 = or_ln27_fu_471_p2;

assign zext_ln29_11_fu_503_p1 = tmp_23_fu_495_p3;

assign zext_ln29_12_fu_525_p1 = add_ln29_6_reg_922;

assign zext_ln29_7_fu_424_p1 = shl_ln_fu_416_p3;

assign zext_ln29_8_fu_450_p1 = tmp_fu_442_p3;

assign zext_ln29_9_fu_466_p1 = add_ln29_4_fu_460_p2;

assign zext_ln36_8_fu_856_p1 = grp_fu_865_p3;

assign zext_ln36_fu_359_p1 = select_ln29_8_reg_890;

always @ (posedge ap_clk) begin
    zext_ln29_9_reg_912[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_9_reg_912_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_12_reg_939[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_12_reg_939_pp0_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
