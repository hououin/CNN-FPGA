-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_2_out_0_ce0 : OUT STD_LOGIC;
    conv_2_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_2_out_0_ce1 : OUT STD_LOGIC;
    conv_2_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_2_out_1_ce0 : OUT STD_LOGIC;
    conv_2_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_2_out_1_ce1 : OUT STD_LOGIC;
    conv_2_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_151 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_162 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_173 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_195 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_fu_227_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_792 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_792_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_792_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_792_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_792_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_233_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln29_5_fu_259_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_5_reg_801 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln36_fu_301_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln36_reg_807 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln36_1_fu_309_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln36_1_reg_812 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln29_3_fu_363_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_3_reg_819 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_3_reg_819_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln29_3_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_3_reg_829 : STD_LOGIC_VECTOR (11 downto 0);
    signal c_fu_402_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_fu_414_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_2_out_0_load_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln29_6_fu_445_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_6_reg_851 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_6_reg_851_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln36_2_fu_466_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_2_reg_861 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_2_reg_861_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_2_reg_861_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_2_reg_861_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln29_fu_513_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_871 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_0_load_1_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal select_ln29_1_fu_603_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_1_load_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal select_ln29_2_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_1_load_1_reg_911 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_166_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_188_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln36_5_fu_788_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_212_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_222_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln13_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_239_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln16_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_4_fu_251_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_7_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_289_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln29_fu_321_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_327_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln29_1_fu_335_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln29_fu_321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln29_fu_339_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_345_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_2_fu_267_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_2_fu_353_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_1_fu_357_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln27_fu_368_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln29_4_fu_374_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln29_2_fu_378_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_13_fu_384_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln29_5_fu_392_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_428_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_4_fu_435_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_3_fu_425_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_1_fu_449_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_fu_439_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_1_fu_452_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_fu_422_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_18_cast_fu_458_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln29_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_475_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_485_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_1_fu_521_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_2_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_524_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_534_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_555_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_541_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_551_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_3_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_4_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_623_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_630_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_fu_640_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_9_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_8_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_4_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_5_fu_699_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_6_fu_716_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_fu_702_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_5_fu_712_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_11_fu_739_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_10_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_719_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_6_fu_729_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_13_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_12_fu_751_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_5_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_6_fu_763_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_5_fu_769_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_6_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_fu_321_p10 : STD_LOGIC_VECTOR (6 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U122 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_out_0_q0,
        din1 => ap_const_lv32_800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_206_p2);

    cnn_fcmp_32ns_32neOg_U123 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_out_0_q1,
        din1 => grp_fu_212_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_212_p2);

    cnn_fcmp_32ns_32neOg_U124 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_out_1_q0,
        din1 => grp_fu_217_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_217_p2);

    cnn_fcmp_32ns_32neOg_U125 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_out_1_q1,
        din1 => grp_fu_222_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_222_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_195 <= c_fu_402_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_195 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_162 <= select_ln29_5_reg_801;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_162 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_151 <= add_ln10_fu_233_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_151 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_173 <= select_ln13_fu_414_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_173 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_184 <= select_ln36_1_reg_812;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_184 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_227_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln29_3_reg_829 <= add_ln29_3_fu_396_p2;
                select_ln36_reg_807 <= select_ln36_fu_301_p3;
                    zext_ln29_3_reg_819(11 downto 0) <= zext_ln29_3_fu_363_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln36_2_reg_861 <= add_ln36_2_fu_466_p2;
                    zext_ln29_6_reg_851(11 downto 0) <= zext_ln29_6_fu_445_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln36_2_reg_861_pp0_iter2_reg <= add_ln36_2_reg_861;
                add_ln36_2_reg_861_pp0_iter3_reg <= add_ln36_2_reg_861_pp0_iter2_reg;
                add_ln36_2_reg_861_pp0_iter4_reg <= add_ln36_2_reg_861_pp0_iter3_reg;
                icmp_ln10_reg_792_pp0_iter2_reg <= icmp_ln10_reg_792_pp0_iter1_reg;
                icmp_ln10_reg_792_pp0_iter3_reg <= icmp_ln10_reg_792_pp0_iter2_reg;
                icmp_ln10_reg_792_pp0_iter4_reg <= icmp_ln10_reg_792_pp0_iter3_reg;
                    zext_ln29_6_reg_851_pp0_iter2_reg(11 downto 0) <= zext_ln29_6_reg_851(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                conv_2_out_0_load_1_reg_878 <= conv_2_out_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                conv_2_out_0_load_reg_844 <= conv_2_out_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_792_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                conv_2_out_1_load_1_reg_911 <= conv_2_out_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_792_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                conv_2_out_1_load_reg_897 <= conv_2_out_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_792 <= icmp_ln10_fu_227_p2;
                icmp_ln10_reg_792_pp0_iter1_reg <= icmp_ln10_reg_792;
                    zext_ln29_3_reg_819_pp0_iter1_reg(11 downto 0) <= zext_ln29_3_reg_819(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_792_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_1_reg_890 <= select_ln29_1_fu_603_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_792_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_2_reg_904 <= select_ln29_2_fu_692_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_227_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_5_reg_801 <= select_ln29_5_fu_259_p3;
                select_ln36_1_reg_812 <= select_ln36_1_fu_309_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_792_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_reg_871 <= select_ln29_fu_513_p3;
            end if;
        end if;
    end process;
    zext_ln29_3_reg_819(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_3_reg_819_pp0_iter1_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_6_reg_851(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_6_reg_851_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_227_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_227_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln10_fu_227_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_233_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_151) + unsigned(ap_const_lv9_1));
    add_ln13_fu_408_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(indvar_flatten_reg_173));
    add_ln29_1_fu_357_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_267_p1) + unsigned(zext_ln29_2_fu_353_p1));
    add_ln29_2_fu_378_p2 <= std_logic_vector(unsigned(zext_ln29_4_fu_374_p1) + unsigned(mul_ln29_fu_321_p2));
    add_ln29_3_fu_396_p2 <= std_logic_vector(unsigned(zext_ln36_2_fu_267_p1) + unsigned(zext_ln29_5_fu_392_p1));
    add_ln29_fu_339_p2 <= std_logic_vector(unsigned(zext_ln29_1_fu_335_p1) + unsigned(mul_ln29_fu_321_p2));
    add_ln36_1_fu_452_p2 <= std_logic_vector(unsigned(zext_ln36_1_fu_449_p1) + unsigned(add_ln36_fu_439_p2));
    add_ln36_2_fu_466_p2 <= std_logic_vector(unsigned(zext_ln36_fu_422_p1) + unsigned(tmp_18_cast_fu_458_p3));
    add_ln36_fu_439_p2 <= std_logic_vector(unsigned(zext_ln36_4_fu_435_p1) + unsigned(zext_ln36_3_fu_425_p1));
    and_ln29_1_fu_591_p2 <= (or_ln29_2_fu_585_p2 and or_ln29_1_fu_567_p2);
    and_ln29_2_fu_597_p2 <= (grp_fu_212_p2 and and_ln29_1_fu_591_p2);
    and_ln29_3_fu_680_p2 <= (or_ln29_4_fu_674_p2 and or_ln29_3_fu_656_p2);
    and_ln29_4_fu_686_p2 <= (grp_fu_217_p2 and and_ln29_3_fu_680_p2);
    and_ln29_5_fu_769_p2 <= (or_ln29_6_fu_763_p2 and or_ln29_5_fu_745_p2);
    and_ln29_6_fu_775_p2 <= (grp_fu_222_p2 and and_ln29_5_fu_769_p2);
    and_ln29_7_fu_283_p2 <= (xor_ln29_fu_271_p2 and icmp_ln16_fu_277_p2);
    and_ln29_fu_507_p2 <= (or_ln29_fu_501_p2 and grp_fu_206_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_227_p2)
    begin
        if ((icmp_ln10_fu_227_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_166_p4_assign_proc : process(f_0_reg_162, icmp_ln10_reg_792, ap_CS_fsm_pp0_stage0, select_ln29_5_reg_801, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_166_p4 <= select_ln29_5_reg_801;
        else 
            ap_phi_mux_f_0_phi_fu_166_p4 <= f_0_reg_162;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_188_p4_assign_proc : process(r_0_reg_184, icmp_ln10_reg_792, ap_CS_fsm_pp0_stage0, select_ln36_1_reg_812, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_792 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_188_p4 <= select_ln36_1_reg_812;
        else 
            ap_phi_mux_r_0_phi_fu_188_p4 <= r_0_reg_184;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_521_p1 <= conv_2_out_0_load_1_reg_878;
    bitcast_ln29_2_fu_538_p1 <= select_ln29_reg_871;
    bitcast_ln29_3_fu_610_p1 <= conv_2_out_1_load_reg_897;
    bitcast_ln29_4_fu_627_p1 <= select_ln29_1_reg_890;
    bitcast_ln29_5_fu_699_p1 <= conv_2_out_1_load_1_reg_911;
    bitcast_ln29_6_fu_716_p1 <= select_ln29_2_reg_904;
    bitcast_ln29_fu_472_p1 <= conv_2_out_0_load_reg_844;
    c_fu_402_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln36_fu_301_p3));
    conv_2_out_0_address0 <= zext_ln29_3_fu_363_p1(11 - 1 downto 0);
    conv_2_out_0_address1 <= zext_ln29_6_fu_445_p1(11 - 1 downto 0);

    conv_2_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_2_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_2_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_2_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_2_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_out_1_address0 <= zext_ln29_3_reg_819_pp0_iter1_reg(10 - 1 downto 0);
    conv_2_out_1_address1 <= zext_ln29_6_reg_851_pp0_iter2_reg(10 - 1 downto 0);

    conv_2_out_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_2_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_2_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv_2_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_2_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_239_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_f_0_phi_fu_166_p4));
    grp_fu_212_p1 <= 
        conv_2_out_0_load_reg_844 when (and_ln29_fu_507_p2(0) = '1') else 
        ap_const_lv32_800000;
    grp_fu_217_p1 <= 
        conv_2_out_0_load_1_reg_878 when (and_ln29_2_fu_597_p2(0) = '1') else 
        select_ln29_reg_871;
    grp_fu_222_p1 <= 
        conv_2_out_1_load_reg_897 when (and_ln29_4_fu_686_p2(0) = '1') else 
        select_ln29_1_reg_890;
    icmp_ln10_fu_227_p2 <= "1" when (indvar_flatten13_reg_151 = ap_const_lv9_190) else "0";
    icmp_ln13_fu_245_p2 <= "1" when (indvar_flatten_reg_173 = ap_const_lv6_19) else "0";
    icmp_ln16_fu_277_p2 <= "1" when (c_0_reg_195 = ap_const_lv3_5) else "0";
    icmp_ln29_10_fu_733_p2 <= "0" when (tmp_10_fu_702_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_11_fu_739_p2 <= "1" when (trunc_ln29_5_fu_712_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_12_fu_751_p2 <= "0" when (tmp_11_fu_719_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_13_fu_757_p2 <= "1" when (trunc_ln29_6_fu_729_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_1_fu_495_p2 <= "1" when (trunc_ln29_fu_485_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_555_p2 <= "0" when (tmp_3_fu_524_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_561_p2 <= "1" when (trunc_ln29_1_fu_534_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_573_p2 <= "0" when (tmp_4_fu_541_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_579_p2 <= "1" when (trunc_ln29_2_fu_551_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_644_p2 <= "0" when (tmp_8_fu_613_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_650_p2 <= "1" when (trunc_ln29_3_fu_623_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_8_fu_662_p2 <= "0" when (tmp_9_fu_630_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_9_fu_668_p2 <= "1" when (trunc_ln29_4_fu_640_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_489_p2 <= "0" when (tmp_1_fu_475_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_5_fu_788_p1(9 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        conv_2_out_1_load_1_reg_911 when (and_ln29_6_fu_775_p2(0) = '1') else 
        select_ln29_2_reg_904;

    max_pool_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_792_pp0_iter4_reg, ap_enable_reg_pp0_iter5)
    begin
        if (((icmp_ln10_reg_792_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_fu_321_p1 <= mul_ln29_fu_321_p10(3 - 1 downto 0);
    mul_ln29_fu_321_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_309_p3),7));
    mul_ln29_fu_321_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv7_B) * unsigned(mul_ln29_fu_321_p1), 7));
    or_ln27_fu_368_p2 <= (shl_ln_fu_327_p3 or ap_const_lv4_1);
    or_ln29_1_fu_567_p2 <= (icmp_ln29_3_fu_561_p2 or icmp_ln29_2_fu_555_p2);
    or_ln29_2_fu_585_p2 <= (icmp_ln29_5_fu_579_p2 or icmp_ln29_4_fu_573_p2);
    or_ln29_3_fu_656_p2 <= (icmp_ln29_7_fu_650_p2 or icmp_ln29_6_fu_644_p2);
    or_ln29_4_fu_674_p2 <= (icmp_ln29_9_fu_668_p2 or icmp_ln29_8_fu_662_p2);
    or_ln29_5_fu_745_p2 <= (icmp_ln29_11_fu_739_p2 or icmp_ln29_10_fu_733_p2);
    or_ln29_6_fu_763_p2 <= (icmp_ln29_13_fu_757_p2 or icmp_ln29_12_fu_751_p2);
    or_ln29_fu_501_p2 <= (icmp_ln29_fu_489_p2 or icmp_ln29_1_fu_495_p2);
    or_ln36_fu_295_p2 <= (icmp_ln13_fu_245_p2 or and_ln29_7_fu_283_p2);
    r_fu_289_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln29_4_fu_251_p3));
    select_ln13_fu_414_p3 <= 
        ap_const_lv6_1 when (icmp_ln13_fu_245_p2(0) = '1') else 
        add_ln13_fu_408_p2;
    select_ln29_1_fu_603_p3 <= 
        conv_2_out_0_load_1_reg_878 when (and_ln29_2_fu_597_p2(0) = '1') else 
        select_ln29_reg_871;
    select_ln29_2_fu_692_p3 <= 
        conv_2_out_1_load_reg_897 when (and_ln29_4_fu_686_p2(0) = '1') else 
        select_ln29_1_reg_890;
    select_ln29_4_fu_251_p3 <= 
        ap_const_lv3_0 when (icmp_ln13_fu_245_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_188_p4;
    select_ln29_5_fu_259_p3 <= 
        f_fu_239_p2 when (icmp_ln13_fu_245_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_166_p4;
    select_ln29_fu_513_p3 <= 
        conv_2_out_0_load_reg_844 when (and_ln29_fu_507_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln36_1_fu_309_p3 <= 
        r_fu_289_p2 when (and_ln29_7_fu_283_p2(0) = '1') else 
        select_ln29_4_fu_251_p3;
    select_ln36_fu_301_p3 <= 
        ap_const_lv3_0 when (or_ln36_fu_295_p2(0) = '1') else 
        c_0_reg_195;
    shl_ln_fu_327_p3 <= (select_ln36_fu_301_p3 & ap_const_lv1_0);
    tmp_10_fu_702_p4 <= bitcast_ln29_5_fu_699_p1(30 downto 23);
    tmp_11_fu_719_p4 <= bitcast_ln29_6_fu_716_p1(30 downto 23);
    tmp_13_fu_384_p3 <= (add_ln29_2_fu_378_p2 & ap_const_lv4_0);
    tmp_18_cast_fu_458_p3 <= (add_ln36_1_fu_452_p2 & ap_const_lv4_0);
    tmp_1_fu_475_p4 <= bitcast_ln29_fu_472_p1(30 downto 23);
    tmp_3_fu_524_p4 <= bitcast_ln29_1_fu_521_p1(30 downto 23);
    tmp_4_fu_541_p4 <= bitcast_ln29_2_fu_538_p1(30 downto 23);
    tmp_5_fu_345_p3 <= (add_ln29_fu_339_p2 & ap_const_lv4_0);
    tmp_8_fu_613_p4 <= bitcast_ln29_3_fu_610_p1(30 downto 23);
    tmp_9_fu_630_p4 <= bitcast_ln29_4_fu_627_p1(30 downto 23);
    tmp_fu_428_p3 <= (select_ln36_1_reg_812 & ap_const_lv2_0);
    trunc_ln29_1_fu_534_p1 <= bitcast_ln29_1_fu_521_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_551_p1 <= bitcast_ln29_2_fu_538_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_623_p1 <= bitcast_ln29_3_fu_610_p1(23 - 1 downto 0);
    trunc_ln29_4_fu_640_p1 <= bitcast_ln29_4_fu_627_p1(23 - 1 downto 0);
    trunc_ln29_5_fu_712_p1 <= bitcast_ln29_5_fu_699_p1(23 - 1 downto 0);
    trunc_ln29_6_fu_729_p1 <= bitcast_ln29_6_fu_716_p1(23 - 1 downto 0);
    trunc_ln29_fu_485_p1 <= bitcast_ln29_fu_472_p1(23 - 1 downto 0);
    xor_ln29_fu_271_p2 <= (icmp_ln13_fu_245_p2 xor ap_const_lv1_1);
    zext_ln29_1_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_327_p3),7));
    zext_ln29_2_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_345_p3),12));
    zext_ln29_3_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_357_p2),64));
    zext_ln29_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_368_p2),7));
    zext_ln29_5_fu_392_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_384_p3),12));
    zext_ln29_6_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_reg_829),64));
    zext_ln36_1_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_reg_807),6));
    zext_ln36_2_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_fu_259_p3),12));
    zext_ln36_3_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_reg_812),6));
    zext_ln36_4_fu_435_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_428_p3),6));
    zext_ln36_5_fu_788_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_reg_861_pp0_iter4_reg),64));
    zext_ln36_fu_422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_801),10));
end behav;
