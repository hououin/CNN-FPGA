-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_0_ce0 : OUT STD_LOGIC;
    conv_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_0_ce1 : OUT STD_LOGIC;
    conv_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_1_ce0 : OUT STD_LOGIC;
    conv_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_1_out_1_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_1_out_1_ce1 : OUT STD_LOGIC;
    conv_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_1A : STD_LOGIC_VECTOR (8 downto 0) := "000011010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten13_reg_151 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_162 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_196 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln10_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_823 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_823_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_823_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_823_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_823_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_823_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_235_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_832 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_5_fu_253_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_5_reg_839 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_fu_267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln36_1_fu_324_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_1_reg_851 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal zext_ln29_5_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_5_reg_856 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_5_reg_856_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln29_4_fu_443_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_4_reg_866 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln36_3_fu_477_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_3_reg_871 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_3_reg_871_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_3_reg_871_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_3_reg_871_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln36_3_reg_871_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal c_fu_483_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_876 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_1_out_0_load_reg_881 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal zext_ln29_8_fu_489_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_8_reg_888 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_8_reg_888_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln29_fu_534_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_0_load_1_reg_910 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal select_ln29_1_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_1_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_1_load_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal select_ln29_2_fu_713_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_2_reg_936 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_out_1_load_1_reg_943 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_phi_mux_f_0_phi_fu_166_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_188_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_200_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_8_fu_809_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_219_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_224_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_241_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln13_fu_261_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln16_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_4_fu_275_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln29_8_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln36_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_340_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_fu_316_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_346_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_3_fu_354_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln29_fu_340_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln29_fu_358_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_372_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl4_cast_fu_364_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_4_fu_380_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln36_4_fu_285_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln29_fu_384_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_2_fu_390_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln27_fu_401_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_6_fu_407_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln29_3_fu_411_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_425_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_417_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_7_fu_433_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln29_1_fu_437_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_813_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_460_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_453_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_7_fu_467_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln36_fu_282_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln36_fu_471_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln29_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_496_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_506_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_4_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_208_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_2_fu_542_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_3_fu_559_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_545_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_555_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_6_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_5_fu_576_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_572_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_8_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_7_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_588_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_4_fu_631_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_5_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_fu_634_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_4_fu_644_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_10_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_9_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_651_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_5_fu_661_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_12_fu_689_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_11_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_4_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_5_fu_695_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_701_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_5_fu_707_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln29_6_fu_720_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_7_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_723_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_6_fu_733_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_14_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_13_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_740_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_7_fu_750_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_16_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_15_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_6_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_7_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_6_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_7_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_813_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_813_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_813_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_813_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_813_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln29_fu_340_p10 : STD_LOGIC_VECTOR (8 downto 0);

    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32neOg_U12 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_0_q0,
        din1 => ap_const_lv32_800000,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_208_p2);

    cnn_fcmp_32ns_32neOg_U13 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_0_q1,
        din1 => grp_fu_214_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_214_p2);

    cnn_fcmp_32ns_32neOg_U14 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_1_q0,
        din1 => grp_fu_219_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_219_p2);

    cnn_fcmp_32ns_32neOg_U15 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_out_1_q1,
        din1 => grp_fu_224_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_224_p2);

    cnn_mac_muladd_5nfYi_U16 : component cnn_mac_muladd_5nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_813_p0,
        din1 => grp_fu_813_p1,
        din2 => grp_fu_813_p2,
        dout => grp_fu_813_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                c_0_reg_196 <= c_reg_876;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_196 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_162 <= select_ln29_5_reg_839;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_162 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten13_reg_151 <= add_ln10_fu_235_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten13_reg_151 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_173 <= select_ln13_fu_267_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_173 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                r_0_reg_184 <= select_ln36_1_reg_851;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_184 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln29_4_reg_866 <= add_ln29_4_fu_443_p2;
                add_ln36_3_reg_871 <= add_ln36_3_fu_477_p2;
                    zext_ln29_5_reg_856(11 downto 0) <= zext_ln29_5_fu_396_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln36_3_reg_871_pp0_iter2_reg <= add_ln36_3_reg_871;
                add_ln36_3_reg_871_pp0_iter3_reg <= add_ln36_3_reg_871_pp0_iter2_reg;
                add_ln36_3_reg_871_pp0_iter4_reg <= add_ln36_3_reg_871_pp0_iter3_reg;
                add_ln36_3_reg_871_pp0_iter5_reg <= add_ln36_3_reg_871_pp0_iter4_reg;
                icmp_ln10_reg_823_pp0_iter2_reg <= icmp_ln10_reg_823_pp0_iter1_reg;
                icmp_ln10_reg_823_pp0_iter3_reg <= icmp_ln10_reg_823_pp0_iter2_reg;
                icmp_ln10_reg_823_pp0_iter4_reg <= icmp_ln10_reg_823_pp0_iter3_reg;
                icmp_ln10_reg_823_pp0_iter5_reg <= icmp_ln10_reg_823_pp0_iter4_reg;
                    zext_ln29_5_reg_856_pp0_iter2_reg(11 downto 0) <= zext_ln29_5_reg_856(11 downto 0);
                    zext_ln29_8_reg_888_pp0_iter3_reg(11 downto 0) <= zext_ln29_8_reg_888(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                c_reg_876 <= c_fu_483_p2;
                select_ln36_1_reg_851 <= select_ln36_1_fu_324_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                conv_1_out_0_load_1_reg_910 <= conv_1_out_0_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                conv_1_out_0_load_reg_881 <= conv_1_out_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                conv_1_out_1_load_1_reg_943 <= conv_1_out_1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then
                conv_1_out_1_load_reg_929 <= conv_1_out_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_823 <= icmp_ln10_fu_229_p2;
                icmp_ln10_reg_823_pp0_iter1_reg <= icmp_ln10_reg_823;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln13_reg_832 <= icmp_ln13_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_1_reg_922 <= select_ln29_1_fu_624_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_2_reg_936 <= select_ln29_2_fu_713_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln29_5_reg_839 <= select_ln29_5_fu_253_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln29_reg_903 <= select_ln29_fu_534_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    zext_ln29_8_reg_888(11 downto 0) <= zext_ln29_8_fu_489_p1(11 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_5_reg_856(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_5_reg_856_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_8_reg_888(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln29_8_reg_888_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_229_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_229_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln10_fu_229_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_235_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_151) + unsigned(ap_const_lv10_1));
    add_ln13_fu_261_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten_reg_173));
    add_ln29_2_fu_390_p2 <= std_logic_vector(unsigned(zext_ln36_4_fu_285_p1) + unsigned(sub_ln29_fu_384_p2));
    add_ln29_3_fu_411_p2 <= std_logic_vector(unsigned(zext_ln29_6_fu_407_p1) + unsigned(mul_ln29_fu_340_p2));
    add_ln29_4_fu_443_p2 <= std_logic_vector(unsigned(zext_ln36_4_fu_285_p1) + unsigned(sub_ln29_1_fu_437_p2));
    add_ln29_fu_358_p2 <= std_logic_vector(unsigned(zext_ln29_3_fu_354_p1) + unsigned(mul_ln29_fu_340_p2));
    add_ln36_3_fu_477_p2 <= std_logic_vector(unsigned(zext_ln36_fu_282_p1) + unsigned(sub_ln36_fu_471_p2));
    and_ln29_2_fu_612_p2 <= (or_ln29_3_fu_606_p2 and or_ln29_2_fu_588_p2);
    and_ln29_3_fu_618_p2 <= (grp_fu_214_p2 and and_ln29_2_fu_612_p2);
    and_ln29_4_fu_701_p2 <= (or_ln29_5_fu_695_p2 and or_ln29_4_fu_677_p2);
    and_ln29_5_fu_707_p2 <= (grp_fu_219_p2 and and_ln29_4_fu_701_p2);
    and_ln29_6_fu_790_p2 <= (or_ln29_7_fu_784_p2 and or_ln29_6_fu_766_p2);
    and_ln29_7_fu_796_p2 <= (grp_fu_224_p2 and and_ln29_6_fu_790_p2);
    and_ln29_8_fu_299_p2 <= (xor_ln29_fu_288_p2 and icmp_ln16_fu_293_p2);
    and_ln29_fu_528_p2 <= (or_ln29_fu_522_p2 and grp_fu_208_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state9 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_229_p2)
    begin
        if ((icmp_ln10_fu_229_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_200_p4_assign_proc : process(c_0_reg_196, icmp_ln10_reg_823_pp0_iter1_reg, c_reg_876, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_200_p4 <= c_reg_876;
        else 
            ap_phi_mux_c_0_phi_fu_200_p4 <= c_0_reg_196;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_166_p4_assign_proc : process(f_0_reg_162, icmp_ln10_reg_823, ap_CS_fsm_pp0_stage0, select_ln29_5_reg_839, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_823 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_166_p4 <= select_ln29_5_reg_839;
        else 
            ap_phi_mux_f_0_phi_fu_166_p4 <= f_0_reg_162;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_188_p4_assign_proc : process(r_0_reg_184, icmp_ln10_reg_823_pp0_iter1_reg, select_ln36_1_reg_851, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_823_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_188_p4 <= select_ln36_1_reg_851;
        else 
            ap_phi_mux_r_0_phi_fu_188_p4 <= r_0_reg_184;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_2_fu_542_p1 <= conv_1_out_0_load_1_reg_910;
    bitcast_ln29_3_fu_559_p1 <= select_ln29_reg_903;
    bitcast_ln29_4_fu_631_p1 <= conv_1_out_1_load_reg_929;
    bitcast_ln29_5_fu_648_p1 <= select_ln29_1_reg_922;
    bitcast_ln29_6_fu_720_p1 <= conv_1_out_1_load_1_reg_943;
    bitcast_ln29_7_fu_737_p1 <= select_ln29_2_reg_936;
    bitcast_ln29_fu_493_p1 <= conv_1_out_0_load_reg_881;
    c_fu_483_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln36_fu_316_p3));
    conv_1_out_0_address0 <= zext_ln29_5_fu_396_p1(11 - 1 downto 0);
    conv_1_out_0_address1 <= zext_ln29_8_fu_489_p1(11 - 1 downto 0);

    conv_1_out_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_1_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_0_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            conv_1_out_0_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_out_1_address0 <= zext_ln29_5_reg_856_pp0_iter2_reg(11 - 1 downto 0);
    conv_1_out_1_address1 <= zext_ln29_8_reg_888_pp0_iter3_reg(11 - 1 downto 0);

    conv_1_out_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            conv_1_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_1_ce1_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            conv_1_out_1_ce1 <= ap_const_logic_1;
        else 
            conv_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_241_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_f_0_phi_fu_166_p4));
    grp_fu_214_p1 <= 
        conv_1_out_0_load_reg_881 when (and_ln29_fu_528_p2(0) = '1') else 
        ap_const_lv32_800000;
    grp_fu_219_p1 <= 
        conv_1_out_0_load_1_reg_910 when (and_ln29_3_fu_618_p2(0) = '1') else 
        select_ln29_reg_903;
    grp_fu_224_p1 <= 
        conv_1_out_1_load_reg_929 when (and_ln29_5_fu_707_p2(0) = '1') else 
        select_ln29_1_reg_922;
    grp_fu_813_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_813_p1 <= grp_fu_813_p10(4 - 1 downto 0);
    grp_fu_813_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_324_p3),8));
    grp_fu_813_p2 <= grp_fu_813_p20(4 - 1 downto 0);
    grp_fu_813_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_fu_316_p3),8));
    icmp_ln10_fu_229_p2 <= "1" when (indvar_flatten13_reg_151 = ap_const_lv10_3F6) else "0";
    icmp_ln13_fu_247_p2 <= "1" when (indvar_flatten_reg_173 = ap_const_lv8_A9) else "0";
    icmp_ln16_fu_293_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_200_p4 = ap_const_lv4_D) else "0";
    icmp_ln29_10_fu_671_p2 <= "1" when (trunc_ln29_4_fu_644_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_11_fu_683_p2 <= "0" when (tmp_3_fu_651_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_12_fu_689_p2 <= "1" when (trunc_ln29_5_fu_661_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_13_fu_754_p2 <= "0" when (tmp_5_fu_723_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_14_fu_760_p2 <= "1" when (trunc_ln29_6_fu_733_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_15_fu_772_p2 <= "0" when (tmp_10_fu_740_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_16_fu_778_p2 <= "1" when (trunc_ln29_7_fu_750_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_516_p2 <= "1" when (trunc_ln29_fu_506_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_5_fu_576_p2 <= "0" when (tmp_9_fu_545_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_6_fu_582_p2 <= "1" when (trunc_ln29_2_fu_555_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_7_fu_594_p2 <= "0" when (tmp_s_fu_562_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_8_fu_600_p2 <= "1" when (trunc_ln29_3_fu_572_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_9_fu_665_p2 <= "0" when (tmp_2_fu_634_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_fu_510_p2 <= "0" when (tmp_7_fu_496_p4 = ap_const_lv8_FF) else "1";
    max_pool_out_address0 <= zext_ln36_8_fu_809_p1(10 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter6)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        conv_1_out_1_load_1_reg_943 when (and_ln29_7_fu_796_p2(0) = '1') else 
        select_ln29_2_reg_936;

    max_pool_out_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln10_reg_823_pp0_iter5_reg, ap_enable_reg_pp0_iter6)
    begin
        if (((icmp_ln10_reg_823_pp0_iter5_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln29_fu_340_p1 <= mul_ln29_fu_340_p10(4 - 1 downto 0);
    mul_ln29_fu_340_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln36_1_fu_324_p3),9));
    mul_ln29_fu_340_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv9_1A) * unsigned(mul_ln29_fu_340_p1), 9));
    or_ln27_fu_401_p2 <= (shl_ln_fu_346_p3 or ap_const_lv5_1);
    or_ln29_2_fu_588_p2 <= (icmp_ln29_6_fu_582_p2 or icmp_ln29_5_fu_576_p2);
    or_ln29_3_fu_606_p2 <= (icmp_ln29_8_fu_600_p2 or icmp_ln29_7_fu_594_p2);
    or_ln29_4_fu_677_p2 <= (icmp_ln29_9_fu_665_p2 or icmp_ln29_10_fu_671_p2);
    or_ln29_5_fu_695_p2 <= (icmp_ln29_12_fu_689_p2 or icmp_ln29_11_fu_683_p2);
    or_ln29_6_fu_766_p2 <= (icmp_ln29_14_fu_760_p2 or icmp_ln29_13_fu_754_p2);
    or_ln29_7_fu_784_p2 <= (icmp_ln29_16_fu_778_p2 or icmp_ln29_15_fu_772_p2);
    or_ln29_fu_522_p2 <= (icmp_ln29_fu_510_p2 or icmp_ln29_4_fu_516_p2);
    or_ln36_fu_311_p2 <= (icmp_ln13_reg_832 or and_ln29_8_fu_299_p2);
    p_shl2_cast_fu_417_p3 <= (add_ln29_3_fu_411_p2 & ap_const_lv3_0);
    p_shl4_cast_fu_364_p3 <= (add_ln29_fu_358_p2 & ap_const_lv3_0);
    p_shl_cast_fu_453_p3 <= (grp_fu_813_p3 & ap_const_lv3_0);
    r_fu_305_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln29_4_fu_275_p3));
    select_ln13_fu_267_p3 <= 
        ap_const_lv8_1 when (icmp_ln13_fu_247_p2(0) = '1') else 
        add_ln13_fu_261_p2;
    select_ln29_1_fu_624_p3 <= 
        conv_1_out_0_load_1_reg_910 when (and_ln29_3_fu_618_p2(0) = '1') else 
        select_ln29_reg_903;
    select_ln29_2_fu_713_p3 <= 
        conv_1_out_1_load_reg_929 when (and_ln29_5_fu_707_p2(0) = '1') else 
        select_ln29_1_reg_922;
    select_ln29_4_fu_275_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_reg_832(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_188_p4;
    select_ln29_5_fu_253_p3 <= 
        f_fu_241_p2 when (icmp_ln13_fu_247_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_166_p4;
    select_ln29_fu_534_p3 <= 
        conv_1_out_0_load_reg_881 when (and_ln29_fu_528_p2(0) = '1') else 
        ap_const_lv32_800000;
    select_ln36_1_fu_324_p3 <= 
        r_fu_305_p2 when (and_ln29_8_fu_299_p2(0) = '1') else 
        select_ln29_4_fu_275_p3;
    select_ln36_fu_316_p3 <= 
        ap_const_lv4_0 when (or_ln36_fu_311_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_200_p4;
    shl_ln_fu_346_p3 <= (select_ln36_fu_316_p3 & ap_const_lv1_0);
    sub_ln29_1_fu_437_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_417_p3) - unsigned(zext_ln29_7_fu_433_p1));
    sub_ln29_fu_384_p2 <= std_logic_vector(unsigned(p_shl4_cast_fu_364_p3) - unsigned(zext_ln29_4_fu_380_p1));
    sub_ln36_fu_471_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_453_p3) - unsigned(zext_ln36_7_fu_467_p1));
    tmp_10_fu_740_p4 <= bitcast_ln29_7_fu_737_p1(30 downto 23);
    tmp_12_fu_425_p3 <= (add_ln29_3_fu_411_p2 & ap_const_lv1_0);
    tmp_13_fu_460_p3 <= (grp_fu_813_p3 & ap_const_lv1_0);
    tmp_2_fu_634_p4 <= bitcast_ln29_4_fu_631_p1(30 downto 23);
    tmp_3_fu_651_p4 <= bitcast_ln29_5_fu_648_p1(30 downto 23);
    tmp_5_fu_723_p4 <= bitcast_ln29_6_fu_720_p1(30 downto 23);
    tmp_7_fu_496_p4 <= bitcast_ln29_fu_493_p1(30 downto 23);
    tmp_9_fu_545_p4 <= bitcast_ln29_2_fu_542_p1(30 downto 23);
    tmp_fu_372_p3 <= (add_ln29_fu_358_p2 & ap_const_lv1_0);
    tmp_s_fu_562_p4 <= bitcast_ln29_3_fu_559_p1(30 downto 23);
    trunc_ln29_2_fu_555_p1 <= bitcast_ln29_2_fu_542_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_572_p1 <= bitcast_ln29_3_fu_559_p1(23 - 1 downto 0);
    trunc_ln29_4_fu_644_p1 <= bitcast_ln29_4_fu_631_p1(23 - 1 downto 0);
    trunc_ln29_5_fu_661_p1 <= bitcast_ln29_5_fu_648_p1(23 - 1 downto 0);
    trunc_ln29_6_fu_733_p1 <= bitcast_ln29_6_fu_720_p1(23 - 1 downto 0);
    trunc_ln29_7_fu_750_p1 <= bitcast_ln29_7_fu_737_p1(23 - 1 downto 0);
    trunc_ln29_fu_506_p1 <= bitcast_ln29_fu_493_p1(23 - 1 downto 0);
    xor_ln29_fu_288_p2 <= (icmp_ln13_reg_832 xor ap_const_lv1_1);
    zext_ln29_3_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_346_p3),9));
    zext_ln29_4_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_372_p3),12));
    zext_ln29_5_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_2_fu_390_p2),64));
    zext_ln29_6_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_401_p2),9));
    zext_ln29_7_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_425_p3),12));
    zext_ln29_8_fu_489_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_4_reg_866),64));
    zext_ln36_4_fu_285_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_839),12));
    zext_ln36_7_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_460_p3),11));
    zext_ln36_8_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_3_reg_871_pp0_iter5_reg),64));
    zext_ln36_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_839),11));
end behav;
