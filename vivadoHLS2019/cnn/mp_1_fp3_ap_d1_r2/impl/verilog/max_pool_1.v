// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [10:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [10:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [10:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [10:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten13_reg_151;
reg   [2:0] f_0_reg_162;
reg   [7:0] indvar_flatten_reg_173;
reg   [3:0] r_0_reg_184;
reg   [3:0] c_0_reg_196;
wire   [0:0] icmp_ln10_fu_229_p2;
reg   [0:0] icmp_ln10_reg_823;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_823_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_823_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_823_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_823_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_823_pp0_iter5_reg;
wire   [9:0] add_ln10_fu_235_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_247_p2;
reg   [0:0] icmp_ln13_reg_832;
wire   [2:0] select_ln29_5_fu_253_p3;
reg   [2:0] select_ln29_5_reg_839;
wire   [7:0] select_ln13_fu_267_p3;
wire   [3:0] select_ln36_1_fu_324_p3;
reg   [3:0] select_ln36_1_reg_851;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln29_5_fu_396_p1;
reg   [63:0] zext_ln29_5_reg_856;
reg   [63:0] zext_ln29_5_reg_856_pp0_iter2_reg;
wire   [11:0] add_ln29_4_fu_443_p2;
reg   [11:0] add_ln29_4_reg_866;
wire   [10:0] add_ln36_3_fu_477_p2;
reg   [10:0] add_ln36_3_reg_871;
reg   [10:0] add_ln36_3_reg_871_pp0_iter2_reg;
reg   [10:0] add_ln36_3_reg_871_pp0_iter3_reg;
reg   [10:0] add_ln36_3_reg_871_pp0_iter4_reg;
reg   [10:0] add_ln36_3_reg_871_pp0_iter5_reg;
wire   [3:0] c_fu_483_p2;
reg   [3:0] c_reg_876;
reg   [31:0] conv_1_out_0_load_reg_881;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln29_8_fu_489_p1;
reg   [63:0] zext_ln29_8_reg_888;
reg   [63:0] zext_ln29_8_reg_888_pp0_iter3_reg;
wire   [31:0] select_ln29_fu_534_p3;
reg   [31:0] select_ln29_reg_903;
reg   [31:0] conv_1_out_0_load_1_reg_910;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] select_ln29_1_fu_624_p3;
reg   [31:0] select_ln29_1_reg_922;
reg   [31:0] conv_1_out_1_load_reg_929;
reg    ap_enable_reg_pp0_iter4;
wire   [31:0] select_ln29_2_fu_713_p3;
reg   [31:0] select_ln29_2_reg_936;
reg   [31:0] conv_1_out_1_load_1_reg_943;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter6;
reg   [2:0] ap_phi_mux_f_0_phi_fu_166_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_188_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_200_p4;
wire   [63:0] zext_ln36_8_fu_809_p1;
wire   [31:0] grp_fu_214_p1;
wire   [31:0] grp_fu_219_p1;
wire   [31:0] grp_fu_224_p1;
wire   [2:0] f_fu_241_p2;
wire   [7:0] add_ln13_fu_261_p2;
wire   [0:0] icmp_ln16_fu_293_p2;
wire   [0:0] xor_ln29_fu_288_p2;
wire   [3:0] select_ln29_4_fu_275_p3;
wire   [0:0] and_ln29_8_fu_299_p2;
wire   [0:0] or_ln36_fu_311_p2;
wire   [3:0] r_fu_305_p2;
wire   [3:0] mul_ln29_fu_340_p1;
wire   [3:0] select_ln36_fu_316_p3;
wire   [4:0] shl_ln_fu_346_p3;
wire   [8:0] zext_ln29_3_fu_354_p1;
wire   [8:0] mul_ln29_fu_340_p2;
wire   [8:0] add_ln29_fu_358_p2;
wire   [9:0] tmp_fu_372_p3;
wire   [11:0] p_shl4_cast_fu_364_p3;
wire   [11:0] zext_ln29_4_fu_380_p1;
wire   [11:0] zext_ln36_4_fu_285_p1;
wire   [11:0] sub_ln29_fu_384_p2;
wire   [11:0] add_ln29_2_fu_390_p2;
wire   [4:0] or_ln27_fu_401_p2;
wire   [8:0] zext_ln29_6_fu_407_p1;
wire   [8:0] add_ln29_3_fu_411_p2;
wire   [9:0] tmp_12_fu_425_p3;
wire   [11:0] p_shl2_cast_fu_417_p3;
wire   [11:0] zext_ln29_7_fu_433_p1;
wire   [11:0] sub_ln29_1_fu_437_p2;
wire   [7:0] grp_fu_813_p3;
wire   [8:0] tmp_13_fu_460_p3;
wire   [10:0] p_shl_cast_fu_453_p3;
wire   [10:0] zext_ln36_7_fu_467_p1;
wire   [10:0] zext_ln36_fu_282_p1;
wire   [10:0] sub_ln36_fu_471_p2;
wire   [31:0] bitcast_ln29_fu_493_p1;
wire   [7:0] tmp_7_fu_496_p4;
wire   [22:0] trunc_ln29_fu_506_p1;
wire   [0:0] icmp_ln29_4_fu_516_p2;
wire   [0:0] icmp_ln29_fu_510_p2;
wire   [0:0] or_ln29_fu_522_p2;
wire   [0:0] grp_fu_208_p2;
wire   [0:0] and_ln29_fu_528_p2;
wire   [31:0] bitcast_ln29_2_fu_542_p1;
wire   [31:0] bitcast_ln29_3_fu_559_p1;
wire   [7:0] tmp_9_fu_545_p4;
wire   [22:0] trunc_ln29_2_fu_555_p1;
wire   [0:0] icmp_ln29_6_fu_582_p2;
wire   [0:0] icmp_ln29_5_fu_576_p2;
wire   [7:0] tmp_s_fu_562_p4;
wire   [22:0] trunc_ln29_3_fu_572_p1;
wire   [0:0] icmp_ln29_8_fu_600_p2;
wire   [0:0] icmp_ln29_7_fu_594_p2;
wire   [0:0] or_ln29_2_fu_588_p2;
wire   [0:0] or_ln29_3_fu_606_p2;
wire   [0:0] and_ln29_2_fu_612_p2;
wire   [0:0] grp_fu_214_p2;
wire   [0:0] and_ln29_3_fu_618_p2;
wire   [31:0] bitcast_ln29_4_fu_631_p1;
wire   [31:0] bitcast_ln29_5_fu_648_p1;
wire   [7:0] tmp_2_fu_634_p4;
wire   [22:0] trunc_ln29_4_fu_644_p1;
wire   [0:0] icmp_ln29_10_fu_671_p2;
wire   [0:0] icmp_ln29_9_fu_665_p2;
wire   [7:0] tmp_3_fu_651_p4;
wire   [22:0] trunc_ln29_5_fu_661_p1;
wire   [0:0] icmp_ln29_12_fu_689_p2;
wire   [0:0] icmp_ln29_11_fu_683_p2;
wire   [0:0] or_ln29_4_fu_677_p2;
wire   [0:0] or_ln29_5_fu_695_p2;
wire   [0:0] and_ln29_4_fu_701_p2;
wire   [0:0] grp_fu_219_p2;
wire   [0:0] and_ln29_5_fu_707_p2;
wire   [31:0] bitcast_ln29_6_fu_720_p1;
wire   [31:0] bitcast_ln29_7_fu_737_p1;
wire   [7:0] tmp_5_fu_723_p4;
wire   [22:0] trunc_ln29_6_fu_733_p1;
wire   [0:0] icmp_ln29_14_fu_760_p2;
wire   [0:0] icmp_ln29_13_fu_754_p2;
wire   [7:0] tmp_10_fu_740_p4;
wire   [22:0] trunc_ln29_7_fu_750_p1;
wire   [0:0] icmp_ln29_16_fu_778_p2;
wire   [0:0] icmp_ln29_15_fu_772_p2;
wire   [0:0] or_ln29_6_fu_766_p2;
wire   [0:0] or_ln29_7_fu_784_p2;
wire   [0:0] and_ln29_6_fu_790_p2;
wire   [0:0] grp_fu_224_p2;
wire   [0:0] and_ln29_7_fu_796_p2;
wire   [4:0] grp_fu_813_p0;
wire   [3:0] grp_fu_813_p1;
wire   [3:0] grp_fu_813_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_813_p10;
wire   [7:0] grp_fu_813_p20;
wire   [8:0] mul_ln29_fu_340_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_0_q0),
    .din1(32'd8388608),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_208_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_0_q1),
    .din1(grp_fu_214_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_214_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_1_q0),
    .din1(grp_fu_219_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_219_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_1_q1),
    .din1(grp_fu_224_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_224_p2)
);

cnn_mac_muladd_5nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_5nfYi_U16(
    .din0(grp_fu_813_p0),
    .din1(grp_fu_813_p1),
    .din2(grp_fu_813_p2),
    .dout(grp_fu_813_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        c_0_reg_196 <= c_reg_876;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_196 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_823 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_162 <= select_ln29_5_reg_839;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_162 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_151 <= add_ln10_fu_235_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_151 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_173 <= select_ln13_fu_267_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_173 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_0_reg_184 <= select_ln36_1_reg_851;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_823 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln29_4_reg_866 <= add_ln29_4_fu_443_p2;
        add_ln36_3_reg_871 <= add_ln36_3_fu_477_p2;
        zext_ln29_5_reg_856[11 : 0] <= zext_ln29_5_fu_396_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln36_3_reg_871_pp0_iter2_reg <= add_ln36_3_reg_871;
        add_ln36_3_reg_871_pp0_iter3_reg <= add_ln36_3_reg_871_pp0_iter2_reg;
        add_ln36_3_reg_871_pp0_iter4_reg <= add_ln36_3_reg_871_pp0_iter3_reg;
        add_ln36_3_reg_871_pp0_iter5_reg <= add_ln36_3_reg_871_pp0_iter4_reg;
        icmp_ln10_reg_823_pp0_iter2_reg <= icmp_ln10_reg_823_pp0_iter1_reg;
        icmp_ln10_reg_823_pp0_iter3_reg <= icmp_ln10_reg_823_pp0_iter2_reg;
        icmp_ln10_reg_823_pp0_iter4_reg <= icmp_ln10_reg_823_pp0_iter3_reg;
        icmp_ln10_reg_823_pp0_iter5_reg <= icmp_ln10_reg_823_pp0_iter4_reg;
        zext_ln29_5_reg_856_pp0_iter2_reg[11 : 0] <= zext_ln29_5_reg_856[11 : 0];
        zext_ln29_8_reg_888_pp0_iter3_reg[11 : 0] <= zext_ln29_8_reg_888[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_823 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_reg_876 <= c_fu_483_p2;
        select_ln36_1_reg_851 <= select_ln36_1_fu_324_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        conv_1_out_0_load_1_reg_910 <= conv_1_out_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_1_out_0_load_reg_881 <= conv_1_out_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        conv_1_out_1_load_1_reg_943 <= conv_1_out_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        conv_1_out_1_load_reg_929 <= conv_1_out_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_823 <= icmp_ln10_fu_229_p2;
        icmp_ln10_reg_823_pp0_iter1_reg <= icmp_ln10_reg_823;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_832 <= icmp_ln13_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_1_reg_922 <= select_ln29_1_fu_624_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_2_reg_936 <= select_ln29_2_fu_713_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_5_reg_839 <= select_ln29_5_fu_253_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_903 <= select_ln29_fu_534_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_823_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        zext_ln29_8_reg_888[11 : 0] <= zext_ln29_8_fu_489_p1[11 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_229_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_823_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_200_p4 = c_reg_876;
    end else begin
        ap_phi_mux_c_0_phi_fu_200_p4 = c_0_reg_196;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_823 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_166_p4 = select_ln29_5_reg_839;
    end else begin
        ap_phi_mux_f_0_phi_fu_166_p4 = f_0_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_823_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_188_p4 = select_ln36_1_reg_851;
    end else begin
        ap_phi_mux_r_0_phi_fu_188_p4 = r_0_reg_184;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_823_pp0_iter5_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_229_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_229_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_235_p2 = (indvar_flatten13_reg_151 + 10'd1);

assign add_ln13_fu_261_p2 = (8'd1 + indvar_flatten_reg_173);

assign add_ln29_2_fu_390_p2 = (zext_ln36_4_fu_285_p1 + sub_ln29_fu_384_p2);

assign add_ln29_3_fu_411_p2 = (zext_ln29_6_fu_407_p1 + mul_ln29_fu_340_p2);

assign add_ln29_4_fu_443_p2 = (zext_ln36_4_fu_285_p1 + sub_ln29_1_fu_437_p2);

assign add_ln29_fu_358_p2 = (zext_ln29_3_fu_354_p1 + mul_ln29_fu_340_p2);

assign add_ln36_3_fu_477_p2 = (zext_ln36_fu_282_p1 + sub_ln36_fu_471_p2);

assign and_ln29_2_fu_612_p2 = (or_ln29_3_fu_606_p2 & or_ln29_2_fu_588_p2);

assign and_ln29_3_fu_618_p2 = (grp_fu_214_p2 & and_ln29_2_fu_612_p2);

assign and_ln29_4_fu_701_p2 = (or_ln29_5_fu_695_p2 & or_ln29_4_fu_677_p2);

assign and_ln29_5_fu_707_p2 = (grp_fu_219_p2 & and_ln29_4_fu_701_p2);

assign and_ln29_6_fu_790_p2 = (or_ln29_7_fu_784_p2 & or_ln29_6_fu_766_p2);

assign and_ln29_7_fu_796_p2 = (grp_fu_224_p2 & and_ln29_6_fu_790_p2);

assign and_ln29_8_fu_299_p2 = (xor_ln29_fu_288_p2 & icmp_ln16_fu_293_p2);

assign and_ln29_fu_528_p2 = (or_ln29_fu_522_p2 & grp_fu_208_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_2_fu_542_p1 = conv_1_out_0_load_1_reg_910;

assign bitcast_ln29_3_fu_559_p1 = select_ln29_reg_903;

assign bitcast_ln29_4_fu_631_p1 = conv_1_out_1_load_reg_929;

assign bitcast_ln29_5_fu_648_p1 = select_ln29_1_reg_922;

assign bitcast_ln29_6_fu_720_p1 = conv_1_out_1_load_1_reg_943;

assign bitcast_ln29_7_fu_737_p1 = select_ln29_2_reg_936;

assign bitcast_ln29_fu_493_p1 = conv_1_out_0_load_reg_881;

assign c_fu_483_p2 = (4'd1 + select_ln36_fu_316_p3);

assign conv_1_out_0_address0 = zext_ln29_5_fu_396_p1;

assign conv_1_out_0_address1 = zext_ln29_8_fu_489_p1;

assign conv_1_out_1_address0 = zext_ln29_5_reg_856_pp0_iter2_reg;

assign conv_1_out_1_address1 = zext_ln29_8_reg_888_pp0_iter3_reg;

assign f_fu_241_p2 = (3'd1 + ap_phi_mux_f_0_phi_fu_166_p4);

assign grp_fu_214_p1 = ((and_ln29_fu_528_p2[0:0] === 1'b1) ? conv_1_out_0_load_reg_881 : 32'd8388608);

assign grp_fu_219_p1 = ((and_ln29_3_fu_618_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_910 : select_ln29_reg_903);

assign grp_fu_224_p1 = ((and_ln29_5_fu_707_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_929 : select_ln29_1_reg_922);

assign grp_fu_813_p0 = 8'd13;

assign grp_fu_813_p1 = grp_fu_813_p10;

assign grp_fu_813_p10 = select_ln36_1_fu_324_p3;

assign grp_fu_813_p2 = grp_fu_813_p20;

assign grp_fu_813_p20 = select_ln36_fu_316_p3;

assign icmp_ln10_fu_229_p2 = ((indvar_flatten13_reg_151 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_247_p2 = ((indvar_flatten_reg_173 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_293_p2 = ((ap_phi_mux_c_0_phi_fu_200_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_671_p2 = ((trunc_ln29_4_fu_644_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_683_p2 = ((tmp_3_fu_651_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_689_p2 = ((trunc_ln29_5_fu_661_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_754_p2 = ((tmp_5_fu_723_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_14_fu_760_p2 = ((trunc_ln29_6_fu_733_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_15_fu_772_p2 = ((tmp_10_fu_740_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_16_fu_778_p2 = ((trunc_ln29_7_fu_750_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_516_p2 = ((trunc_ln29_fu_506_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_576_p2 = ((tmp_9_fu_545_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_582_p2 = ((trunc_ln29_2_fu_555_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_594_p2 = ((tmp_s_fu_562_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_600_p2 = ((trunc_ln29_3_fu_572_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_665_p2 = ((tmp_2_fu_634_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_510_p2 = ((tmp_7_fu_496_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_8_fu_809_p1;

assign max_pool_out_d0 = ((and_ln29_7_fu_796_p2[0:0] === 1'b1) ? conv_1_out_1_load_1_reg_943 : select_ln29_2_reg_936);

assign mul_ln29_fu_340_p1 = mul_ln29_fu_340_p10;

assign mul_ln29_fu_340_p10 = select_ln36_1_fu_324_p3;

assign mul_ln29_fu_340_p2 = (9'd26 * mul_ln29_fu_340_p1);

assign or_ln27_fu_401_p2 = (shl_ln_fu_346_p3 | 5'd1);

assign or_ln29_2_fu_588_p2 = (icmp_ln29_6_fu_582_p2 | icmp_ln29_5_fu_576_p2);

assign or_ln29_3_fu_606_p2 = (icmp_ln29_8_fu_600_p2 | icmp_ln29_7_fu_594_p2);

assign or_ln29_4_fu_677_p2 = (icmp_ln29_9_fu_665_p2 | icmp_ln29_10_fu_671_p2);

assign or_ln29_5_fu_695_p2 = (icmp_ln29_12_fu_689_p2 | icmp_ln29_11_fu_683_p2);

assign or_ln29_6_fu_766_p2 = (icmp_ln29_14_fu_760_p2 | icmp_ln29_13_fu_754_p2);

assign or_ln29_7_fu_784_p2 = (icmp_ln29_16_fu_778_p2 | icmp_ln29_15_fu_772_p2);

assign or_ln29_fu_522_p2 = (icmp_ln29_fu_510_p2 | icmp_ln29_4_fu_516_p2);

assign or_ln36_fu_311_p2 = (icmp_ln13_reg_832 | and_ln29_8_fu_299_p2);

assign p_shl2_cast_fu_417_p3 = {{add_ln29_3_fu_411_p2}, {3'd0}};

assign p_shl4_cast_fu_364_p3 = {{add_ln29_fu_358_p2}, {3'd0}};

assign p_shl_cast_fu_453_p3 = {{grp_fu_813_p3}, {3'd0}};

assign r_fu_305_p2 = (4'd1 + select_ln29_4_fu_275_p3);

assign select_ln13_fu_267_p3 = ((icmp_ln13_fu_247_p2[0:0] === 1'b1) ? 8'd1 : add_ln13_fu_261_p2);

assign select_ln29_1_fu_624_p3 = ((and_ln29_3_fu_618_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_910 : select_ln29_reg_903);

assign select_ln29_2_fu_713_p3 = ((and_ln29_5_fu_707_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_929 : select_ln29_1_reg_922);

assign select_ln29_4_fu_275_p3 = ((icmp_ln13_reg_832[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_188_p4);

assign select_ln29_5_fu_253_p3 = ((icmp_ln13_fu_247_p2[0:0] === 1'b1) ? f_fu_241_p2 : ap_phi_mux_f_0_phi_fu_166_p4);

assign select_ln29_fu_534_p3 = ((and_ln29_fu_528_p2[0:0] === 1'b1) ? conv_1_out_0_load_reg_881 : 32'd8388608);

assign select_ln36_1_fu_324_p3 = ((and_ln29_8_fu_299_p2[0:0] === 1'b1) ? r_fu_305_p2 : select_ln29_4_fu_275_p3);

assign select_ln36_fu_316_p3 = ((or_ln36_fu_311_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_200_p4);

assign shl_ln_fu_346_p3 = {{select_ln36_fu_316_p3}, {1'd0}};

assign sub_ln29_1_fu_437_p2 = (p_shl2_cast_fu_417_p3 - zext_ln29_7_fu_433_p1);

assign sub_ln29_fu_384_p2 = (p_shl4_cast_fu_364_p3 - zext_ln29_4_fu_380_p1);

assign sub_ln36_fu_471_p2 = (p_shl_cast_fu_453_p3 - zext_ln36_7_fu_467_p1);

assign tmp_10_fu_740_p4 = {{bitcast_ln29_7_fu_737_p1[30:23]}};

assign tmp_12_fu_425_p3 = {{add_ln29_3_fu_411_p2}, {1'd0}};

assign tmp_13_fu_460_p3 = {{grp_fu_813_p3}, {1'd0}};

assign tmp_2_fu_634_p4 = {{bitcast_ln29_4_fu_631_p1[30:23]}};

assign tmp_3_fu_651_p4 = {{bitcast_ln29_5_fu_648_p1[30:23]}};

assign tmp_5_fu_723_p4 = {{bitcast_ln29_6_fu_720_p1[30:23]}};

assign tmp_7_fu_496_p4 = {{bitcast_ln29_fu_493_p1[30:23]}};

assign tmp_9_fu_545_p4 = {{bitcast_ln29_2_fu_542_p1[30:23]}};

assign tmp_fu_372_p3 = {{add_ln29_fu_358_p2}, {1'd0}};

assign tmp_s_fu_562_p4 = {{bitcast_ln29_3_fu_559_p1[30:23]}};

assign trunc_ln29_2_fu_555_p1 = bitcast_ln29_2_fu_542_p1[22:0];

assign trunc_ln29_3_fu_572_p1 = bitcast_ln29_3_fu_559_p1[22:0];

assign trunc_ln29_4_fu_644_p1 = bitcast_ln29_4_fu_631_p1[22:0];

assign trunc_ln29_5_fu_661_p1 = bitcast_ln29_5_fu_648_p1[22:0];

assign trunc_ln29_6_fu_733_p1 = bitcast_ln29_6_fu_720_p1[22:0];

assign trunc_ln29_7_fu_750_p1 = bitcast_ln29_7_fu_737_p1[22:0];

assign trunc_ln29_fu_506_p1 = bitcast_ln29_fu_493_p1[22:0];

assign xor_ln29_fu_288_p2 = (icmp_ln13_reg_832 ^ 1'd1);

assign zext_ln29_3_fu_354_p1 = shl_ln_fu_346_p3;

assign zext_ln29_4_fu_380_p1 = tmp_fu_372_p3;

assign zext_ln29_5_fu_396_p1 = add_ln29_2_fu_390_p2;

assign zext_ln29_6_fu_407_p1 = or_ln27_fu_401_p2;

assign zext_ln29_7_fu_433_p1 = tmp_12_fu_425_p3;

assign zext_ln29_8_fu_489_p1 = add_ln29_4_reg_866;

assign zext_ln36_4_fu_285_p1 = select_ln29_5_reg_839;

assign zext_ln36_7_fu_467_p1 = tmp_13_fu_460_p3;

assign zext_ln36_8_fu_809_p1 = add_ln36_3_reg_871_pp0_iter5_reg;

assign zext_ln36_fu_282_p1 = select_ln29_5_reg_839;

always @ (posedge ap_clk) begin
    zext_ln29_5_reg_856[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_5_reg_856_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_8_reg_888[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_8_reg_888_pp0_iter3_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
