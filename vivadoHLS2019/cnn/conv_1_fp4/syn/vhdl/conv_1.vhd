-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv14_2F88 : STD_LOGIC_VECTOR (13 downto 0) := "10111110001000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv10_1D4 : STD_LOGIC_VECTOR (9 downto 0) := "0111010100";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_ce0 : STD_LOGIC;
    signal conv_1_weights_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_ce0 : STD_LOGIC;
    signal conv_1_weights_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten47_reg_201 : STD_LOGIC_VECTOR (13 downto 0);
    signal r_0_reg_212 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten14_reg_223 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_235 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_246 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_258 : STD_LOGIC_VECTOR (2 downto 0);
    signal w_sum_0_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_0_reg_281 : STD_LOGIC_VECTOR (1 downto 0);
    signal reg_308 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_804 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_313 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_state8_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_state20_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_state12_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal icmp_ln8_fu_330_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln8_reg_804_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_336_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln8_reg_808 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln11_fu_348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_813 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_362_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_818 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln30_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_reg_824 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_5_fu_436_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_5_reg_829 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln23_1_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_1_reg_835 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln23_1_fu_520_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_1_reg_840 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln23_2_fu_528_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln23_2_reg_845 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln23_9_fu_645_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_9_reg_877 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_1_weights_1_loa_reg_892 : STD_LOGIC_VECTOR (31 downto 0);
    signal input_load_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_loa_reg_902 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln14_fu_655_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln14_reg_912 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln23_fu_661_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state17_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_1_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln11_fu_669_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln11_reg_927 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_932 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state18_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal wr_fu_675_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_937 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_state13_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal select_ln14_fu_680_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln14_reg_943 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_686_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln11_reg_948 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_addr_reg_953 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln18_1_fu_740_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_1_reg_958 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_1_bias_load_reg_967 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_2_reg_972 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal w_sum_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_state9_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_state21_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_state10_pp0_stage8_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_phi_mux_indvar_flatten47_phi_fu_205_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_216_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten14_phi_fu_227_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_c_0_phi_fu_239_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_250_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_f_0_phi_fu_262_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_w_sum_0_phi_fu_273_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal sext_ln23_fu_580_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_1_fu_629_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_2_fu_640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_7_fu_651_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln30_6_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_2_fu_725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal r_fu_342_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_318_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_2_fu_324_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln18_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_354_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln30_1_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_3_fu_416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_4_fu_448_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_2_fu_370_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_6_fu_454_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_5_fu_466_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_3_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_7_fu_472_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal xor_ln30_1_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_4_fu_428_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln30_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln23_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_502_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_544_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_fu_556_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln23_3_fu_552_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_4_fu_564_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_fu_536_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln23_fu_568_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_6_fu_574_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln18_fu_540_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_587_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_593_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_605_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_5_fu_601_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_6_fu_613_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_1_fu_444_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_1_fu_617_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_7_fu_623_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_4_fu_462_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_8_fu_634_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_5_fu_480_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_794_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_705_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_698_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_3_fu_712_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln23_1_fu_722_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln30_fu_716_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln30_1_fu_729_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_745_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_748_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_758_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_768_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_762_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_780_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_794_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_794_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_794_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage7_00001 : BOOLEAN;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_state7_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_state19_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_state11_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_794_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_794_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fadd_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5nhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_weights_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_address0,
        ce0 => conv_1_weights_0_ce0,
        q0 => conv_1_weights_0_q0);

    conv_1_weights_1_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_address0,
        ce0 => conv_1_weights_1_ce0,
        q0 => conv_1_weights_1_q0);

    conv_1_weights_2_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 18,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_address0,
        ce0 => conv_1_weights_2_ce0,
        q0 => conv_1_weights_2_q0);

    cnn_fadd_32ns_32neOg_U1 : component cnn_fadd_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    cnn_fmul_32ns_32nfYi_U2 : component cnn_fmul_32ns_32nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_296_p2);

    cnn_fcmp_32ns_32ng8j_U3 : component cnn_fcmp_32ns_32ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_302_p2);

    cnn_mac_muladd_5nhbi_U4 : component cnn_mac_muladd_5nhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_794_p0,
        din1 => grp_fu_794_p1,
        din2 => grp_fu_794_p2,
        dout => grp_fu_794_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_235_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                c_0_reg_235 <= select_ln30_5_reg_829;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_235 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                f_0_reg_258 <= select_ln23_2_reg_845;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_258 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten14_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                indvar_flatten14_reg_223 <= select_ln11_reg_948;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten14_reg_223 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten47_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                indvar_flatten47_reg_201 <= add_ln8_reg_808;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten47_reg_201 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                indvar_flatten_reg_246 <= select_ln14_reg_943;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_246 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_0_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                r_0_reg_212 <= select_ln30_1_reg_818;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_212 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln8_reg_804_pp0_iter1_reg = ap_const_lv1_0))) then 
                w_sum_0_reg_269 <= w_sum_4_2_reg_972;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_0_reg_269 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wr_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
                wr_0_reg_281 <= wr_reg_937;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wr_0_reg_281 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln11_reg_813 = ap_const_lv1_0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                add_ln11_reg_927 <= add_ln11_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (or_ln30_reg_824 = ap_const_lv1_0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                add_ln14_reg_912 <= add_ln14_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_330_p2 = ap_const_lv1_0))) then
                add_ln23_9_reg_877 <= add_ln23_9_fu_645_p2;
                icmp_ln11_reg_813 <= icmp_ln11_fu_348_p2;
                or_ln23_1_reg_835 <= or_ln23_1_fu_514_p2;
                or_ln30_reg_824 <= or_ln30_fu_422_p2;
                select_ln23_1_reg_840 <= select_ln23_1_fu_520_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln8_reg_808 <= add_ln8_fu_336_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_1_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_bias_load_reg_967 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_804 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_1_loa_reg_892 <= conv_1_weights_1_q0;
                conv_1_weights_2_loa_reg_902 <= conv_1_weights_2_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                conv_out_addr_reg_953 <= zext_ln30_6_fu_735_p1(12 - 1 downto 0);
                icmp_ln18_1_reg_958 <= icmp_ln18_1_fu_740_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln8_reg_804 <= icmp_ln8_fu_330_p2;
                icmp_ln8_reg_804_pp0_iter1_reg <= icmp_ln8_reg_804;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_804 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                input_load_1_reg_897 <= input_r_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_804 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0)))) then
                reg_308 <= input_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage10) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0)))) then
                reg_313 <= grp_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                select_ln11_reg_948 <= select_ln11_fu_686_p3;
                select_ln14_reg_943 <= select_ln14_fu_680_p3;
                wr_reg_937 <= wr_fu_675_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_330_p2 = ap_const_lv1_0))) then
                select_ln23_2_reg_845 <= select_ln23_2_fu_528_p3;
                select_ln30_1_reg_818 <= select_ln30_1_fu_362_p3;
                select_ln30_5_reg_829 <= select_ln30_5_fu_436_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                tmp_1_reg_922 <= grp_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                tmp_2_reg_932 <= grp_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then
                tmp_s_reg_907 <= grp_fu_296_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_804_pp0_iter1_reg = ap_const_lv1_0))) then
                w_sum_4_2_reg_972 <= grp_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (icmp_ln18_1_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                w_sum_reg_978 <= grp_fu_292_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter0, icmp_ln8_fu_330_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage8_subdone, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_330_p2 = ap_const_lv1_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_330_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage8_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage8_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_fu_669_p2 <= std_logic_vector(unsigned(indvar_flatten14_reg_223) + unsigned(ap_const_lv10_1));
    add_ln14_fu_655_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_246) + unsigned(ap_const_lv5_1));
    add_ln23_2_fu_324_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_239_p4) + unsigned(ap_const_lv5_2));
    add_ln23_3_fu_416_p2 <= std_logic_vector(unsigned(select_ln30_fu_354_p3) + unsigned(ap_const_lv5_1));
    add_ln23_4_fu_448_p2 <= std_logic_vector(unsigned(select_ln30_fu_354_p3) + unsigned(ap_const_lv5_2));
    add_ln23_5_fu_466_p2 <= std_logic_vector(unsigned(select_ln30_fu_354_p3) + unsigned(ap_const_lv5_3));
    add_ln23_6_fu_574_p2 <= std_logic_vector(unsigned(zext_ln23_fu_536_p1) + unsigned(sub_ln23_fu_568_p2));
    add_ln23_7_fu_623_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_444_p1) + unsigned(sub_ln23_1_fu_617_p2));
    add_ln23_8_fu_634_p2 <= std_logic_vector(unsigned(zext_ln30_4_fu_462_p1) + unsigned(sub_ln23_1_fu_617_p2));
    add_ln23_9_fu_645_p2 <= std_logic_vector(unsigned(zext_ln30_5_fu_480_p1) + unsigned(sub_ln23_1_fu_617_p2));
    add_ln23_fu_587_p2 <= std_logic_vector(unsigned(select_ln30_1_fu_362_p3) + unsigned(zext_ln18_fu_540_p1));
    add_ln30_1_fu_729_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_722_p1) + unsigned(sub_ln30_fu_716_p2));
    add_ln8_fu_336_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten47_phi_fu_205_p4) + unsigned(ap_const_lv14_1));
    and_ln29_fu_780_p2 <= (or_ln29_fu_774_p2 and grp_fu_302_p2);
    and_ln30_1_fu_410_p2 <= (xor_ln30_fu_386_p2 and icmp_ln14_fu_404_p2);
    and_ln30_2_fu_496_p2 <= (or_ln30_1_fu_490_p2 and and_ln30_fu_398_p2);
    and_ln30_fu_398_p2 <= (xor_ln30_fu_386_p2 and icmp_ln18_fu_392_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state23 <= ap_CS_fsm(13);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage11_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage5_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage8_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage9_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage8_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage9_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage10_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage11_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage5_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage6_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage7_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage8_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage5_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage6_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage7_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_330_p2)
    begin
        if ((icmp_ln8_fu_330_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_239_p4_assign_proc : process(c_0_reg_235, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, select_ln30_5_reg_829, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_239_p4 <= select_ln30_5_reg_829;
        else 
            ap_phi_mux_c_0_phi_fu_239_p4 <= c_0_reg_235;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_262_p4_assign_proc : process(f_0_reg_258, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, select_ln23_2_reg_845, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_262_p4 <= select_ln23_2_reg_845;
        else 
            ap_phi_mux_f_0_phi_fu_262_p4 <= f_0_reg_258;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten14_phi_fu_227_p4_assign_proc : process(indvar_flatten14_reg_223, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, select_ln11_reg_948, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten14_phi_fu_227_p4 <= select_ln11_reg_948;
        else 
            ap_phi_mux_indvar_flatten14_phi_fu_227_p4 <= indvar_flatten14_reg_223;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten47_phi_fu_205_p4_assign_proc : process(indvar_flatten47_reg_201, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, add_ln8_reg_808, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten47_phi_fu_205_p4 <= add_ln8_reg_808;
        else 
            ap_phi_mux_indvar_flatten47_phi_fu_205_p4 <= indvar_flatten47_reg_201;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_250_p4_assign_proc : process(indvar_flatten_reg_246, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, select_ln14_reg_943, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_250_p4 <= select_ln14_reg_943;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_250_p4 <= indvar_flatten_reg_246;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_216_p4_assign_proc : process(r_0_reg_212, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, select_ln30_1_reg_818, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_216_p4 <= select_ln30_1_reg_818;
        else 
            ap_phi_mux_r_0_phi_fu_216_p4 <= r_0_reg_212;
        end if; 
    end process;


    ap_phi_mux_w_sum_0_phi_fu_273_p4_assign_proc : process(w_sum_0_reg_269, icmp_ln8_reg_804_pp0_iter1_reg, ap_CS_fsm_pp0_stage3, w_sum_4_2_reg_972, ap_enable_reg_pp0_iter1, ap_block_pp0_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (icmp_ln8_reg_804_pp0_iter1_reg = ap_const_lv1_0))) then 
            ap_phi_mux_w_sum_0_phi_fu_273_p4 <= w_sum_4_2_reg_972;
        else 
            ap_phi_mux_w_sum_0_phi_fu_273_p4 <= w_sum_0_reg_269;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_285_p4_assign_proc : process(wr_0_reg_281, icmp_ln8_reg_804, ap_CS_fsm_pp0_stage0, wr_reg_937, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_804 = ap_const_lv1_0))) then 
            ap_phi_mux_wr_0_phi_fu_285_p4 <= wr_reg_937;
        else 
            ap_phi_mux_wr_0_phi_fu_285_p4 <= wr_0_reg_281;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_fu_745_p1 <= w_sum_reg_978;
    c_fu_318_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_239_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln23_2_fu_725_p1(3 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_address0 <= sext_ln23_fu_580_p1(5 - 1 downto 0);

    conv_1_weights_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_address0 <= sext_ln23_fu_580_p1(5 - 1 downto 0);

    conv_1_weights_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_address0 <= sext_ln23_fu_580_p1(5 - 1 downto 0);

    conv_1_weights_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_953;

    conv_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_978 when (and_ln29_fu_780_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(icmp_ln18_1_reg_958, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (icmp_ln18_1_reg_958 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_502_p2 <= std_logic_vector(unsigned(select_ln30_4_fu_428_p3) + unsigned(ap_const_lv3_1));

    grp_fu_292_p0_assign_proc : process(ap_enable_reg_pp0_iter0, reg_313, select_ln23_fu_661_p3, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage11, w_sum_4_2_reg_972, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage11, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_292_p0 <= w_sum_4_2_reg_972;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
            grp_fu_292_p0 <= reg_313;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_292_p0 <= select_ln23_fu_661_p3;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(ap_enable_reg_pp0_iter0, tmp_s_reg_907, ap_CS_fsm_pp0_stage3, tmp_1_reg_922, tmp_2_reg_932, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage11, conv_1_bias_load_reg_967, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage3, ap_block_pp0_stage7, ap_block_pp0_stage11, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_292_p1 <= conv_1_bias_load_reg_967;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_292_p1 <= tmp_2_reg_932;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_292_p1 <= tmp_1_reg_922;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_292_p1 <= tmp_s_reg_907;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p0_assign_proc : process(conv_1_weights_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, conv_1_weights_1_loa_reg_892, conv_1_weights_2_loa_reg_902, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_296_p0 <= conv_1_weights_2_loa_reg_902;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_296_p0 <= conv_1_weights_1_loa_reg_892;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_296_p0 <= conv_1_weights_0_q0;
            else 
                grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p1_assign_proc : process(input_r_q0, reg_308, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, input_load_1_reg_897, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_296_p1 <= reg_308;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_296_p1 <= input_load_1_reg_897;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_296_p1 <= input_r_q0;
            else 
                grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_794_p0 <= grp_fu_794_p00(5 - 1 downto 0);
    grp_fu_794_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_1_reg_818),10));
    grp_fu_794_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_794_p2 <= grp_fu_794_p20(5 - 1 downto 0);
    grp_fu_794_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_5_reg_829),10));
    icmp_ln11_fu_348_p2 <= "1" when (ap_phi_mux_indvar_flatten14_phi_fu_227_p4 = ap_const_lv10_1D4) else "0";
    icmp_ln14_fu_404_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_250_p4 = ap_const_lv5_12) else "0";
    icmp_ln18_1_fu_740_p2 <= "1" when (wr_reg_937 = ap_const_lv2_3) else "0";
    icmp_ln18_fu_392_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_285_p4 = ap_const_lv2_3) else "0";
    icmp_ln29_7_fu_768_p2 <= "1" when (trunc_ln29_fu_758_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_762_p2 <= "0" when (tmp_fu_748_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_330_p2 <= "1" when (ap_phi_mux_indvar_flatten47_phi_fu_205_p4 = ap_const_lv14_2F88) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, sext_ln23_1_fu_629_p1, zext_ln23_7_fu_651_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_r_address0 <= zext_ln23_7_fu_651_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_r_address0 <= sext_ln23_1_fu_629_p1(10 - 1 downto 0);
            else 
                input_r_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= sext_ln23_2_fu_640_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln23_1_fu_514_p2 <= (or_ln23_fu_508_p2 or icmp_ln11_fu_348_p2);
    or_ln23_fu_508_p2 <= (and_ln30_2_fu_496_p2 or and_ln30_1_fu_410_p2);
    or_ln29_fu_774_p2 <= (icmp_ln29_fu_762_p2 or icmp_ln29_7_fu_768_p2);
    or_ln30_1_fu_490_p2 <= (xor_ln30_1_fu_484_p2 or icmp_ln11_fu_348_p2);
    or_ln30_fu_422_p2 <= (icmp_ln11_fu_348_p2 or and_ln30_1_fu_410_p2);
    p_shl5_cast_fu_698_p3 <= (grp_fu_794_p3 & ap_const_lv3_0);
    r_fu_342_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_216_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_686_p3 <= 
        ap_const_lv10_1 when (icmp_ln11_reg_813(0) = '1') else 
        add_ln11_reg_927;
    select_ln14_fu_680_p3 <= 
        ap_const_lv5_1 when (or_ln30_reg_824(0) = '1') else 
        add_ln14_reg_912;
    select_ln23_1_fu_520_p3 <= 
        ap_const_lv2_0 when (or_ln23_1_fu_514_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_285_p4;
    select_ln23_2_fu_528_p3 <= 
        f_fu_502_p2 when (and_ln30_2_fu_496_p2(0) = '1') else 
        select_ln30_4_fu_428_p3;
    select_ln23_fu_661_p3 <= 
        ap_const_lv32_0 when (or_ln23_1_reg_835(0) = '1') else 
        ap_phi_mux_w_sum_0_phi_fu_273_p4;
    select_ln30_1_fu_362_p3 <= 
        r_fu_342_p2 when (icmp_ln11_fu_348_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_216_p4;
    select_ln30_2_fu_370_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_348_p2(0) = '1') else 
        c_fu_318_p2;
    select_ln30_3_fu_378_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_348_p2(0) = '1') else 
        add_ln23_2_fu_324_p2;
    select_ln30_4_fu_428_p3 <= 
        ap_const_lv3_0 when (or_ln30_fu_422_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_262_p4;
    select_ln30_5_fu_436_p3 <= 
        add_ln23_3_fu_416_p2 when (and_ln30_1_fu_410_p2(0) = '1') else 
        select_ln30_fu_354_p3;
    select_ln30_6_fu_454_p3 <= 
        add_ln23_4_fu_448_p2 when (and_ln30_1_fu_410_p2(0) = '1') else 
        select_ln30_2_fu_370_p3;
    select_ln30_7_fu_472_p3 <= 
        add_ln23_5_fu_466_p2 when (and_ln30_1_fu_410_p2(0) = '1') else 
        select_ln30_3_fu_378_p3;
    select_ln30_fu_354_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_348_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_239_p4;
        sext_ln23_1_fu_629_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_7_fu_623_p2),64));

        sext_ln23_2_fu_640_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_8_fu_634_p2),64));

        sext_ln23_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_6_fu_574_p2),64));

    sub_ln23_1_fu_617_p2 <= std_logic_vector(unsigned(zext_ln23_5_fu_601_p1) - unsigned(zext_ln23_6_fu_613_p1));
    sub_ln23_fu_568_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_552_p1) - unsigned(zext_ln23_4_fu_564_p1));
    sub_ln30_fu_716_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_698_p3) - unsigned(zext_ln30_3_fu_712_p1));
    tmp_10_fu_544_p3 <= (select_ln23_1_fu_520_p3 & ap_const_lv3_0);
    tmp_11_fu_705_p3 <= (grp_fu_794_p3 & ap_const_lv1_0);
    tmp_12_fu_556_p3 <= (select_ln23_1_fu_520_p3 & ap_const_lv1_0);
    tmp_13_fu_593_p3 <= (add_ln23_fu_587_p2 & ap_const_lv5_0);
    tmp_14_fu_605_p3 <= (add_ln23_fu_587_p2 & ap_const_lv2_0);
    tmp_fu_748_p4 <= bitcast_ln29_fu_745_p1(30 downto 23);
    trunc_ln29_fu_758_p1 <= bitcast_ln29_fu_745_p1(23 - 1 downto 0);
    wr_fu_675_p2 <= std_logic_vector(unsigned(select_ln23_1_reg_840) + unsigned(ap_const_lv2_1));
    xor_ln30_1_fu_484_p2 <= (icmp_ln14_fu_404_p2 xor ap_const_lv1_1);
    xor_ln30_fu_386_p2 <= (icmp_ln11_fu_348_p2 xor ap_const_lv1_1);
    zext_ln18_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_1_fu_520_p3),5));
    zext_ln23_1_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_2_reg_845),13));
    zext_ln23_2_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_2_reg_845),64));
    zext_ln23_3_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_544_p3),6));
    zext_ln23_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_556_p3),6));
    zext_ln23_5_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_593_p3),11));
    zext_ln23_6_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_605_p3),11));
    zext_ln23_7_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_9_reg_877),64));
    zext_ln23_fu_536_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln23_2_fu_528_p3),6));
    zext_ln30_1_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_5_fu_436_p3),11));
    zext_ln30_3_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_705_p3),13));
    zext_ln30_4_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_6_fu_454_p3),11));
    zext_ln30_5_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_7_fu_472_p3),11));
    zext_ln30_6_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_729_p2),64));
end behav;
