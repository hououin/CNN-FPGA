// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        input_r_address1,
        input_r_ce1,
        input_r_q1,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_pp0_stage0 = 14'd2;
parameter    ap_ST_fsm_pp0_stage1 = 14'd4;
parameter    ap_ST_fsm_pp0_stage2 = 14'd8;
parameter    ap_ST_fsm_pp0_stage3 = 14'd16;
parameter    ap_ST_fsm_pp0_stage4 = 14'd32;
parameter    ap_ST_fsm_pp0_stage5 = 14'd64;
parameter    ap_ST_fsm_pp0_stage6 = 14'd128;
parameter    ap_ST_fsm_pp0_stage7 = 14'd256;
parameter    ap_ST_fsm_pp0_stage8 = 14'd512;
parameter    ap_ST_fsm_pp0_stage9 = 14'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 14'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 14'd4096;
parameter    ap_ST_fsm_state23 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [9:0] input_r_address1;
output   input_r_ce1;
input  [31:0] input_r_q1;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[9:0] input_r_address0;
reg input_r_ce0;
reg input_r_ce1;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [4:0] conv_1_weights_0_address0;
reg    conv_1_weights_0_ce0;
wire   [31:0] conv_1_weights_0_q0;
wire   [4:0] conv_1_weights_1_address0;
reg    conv_1_weights_1_ce0;
wire   [31:0] conv_1_weights_1_q0;
wire   [4:0] conv_1_weights_2_address0;
reg    conv_1_weights_2_ce0;
wire   [31:0] conv_1_weights_2_q0;
reg   [13:0] indvar_flatten47_reg_201;
reg   [4:0] r_0_reg_212;
reg   [9:0] indvar_flatten14_reg_223;
reg   [4:0] c_0_reg_235;
reg   [4:0] indvar_flatten_reg_246;
reg   [2:0] f_0_reg_258;
reg   [31:0] w_sum_0_reg_269;
reg   [1:0] wr_0_reg_281;
reg   [31:0] reg_308;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln8_reg_804;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] grp_fu_292_p2;
reg   [31:0] reg_313;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state8_pp0_stage6_iter0;
wire    ap_block_state20_pp0_stage6_iter1;
wire    ap_block_pp0_stage6_11001;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state12_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_11001;
wire   [0:0] icmp_ln8_fu_330_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln8_reg_804_pp0_iter1_reg;
wire   [13:0] add_ln8_fu_336_p2;
reg   [13:0] add_ln8_reg_808;
wire   [0:0] icmp_ln11_fu_348_p2;
reg   [0:0] icmp_ln11_reg_813;
wire   [4:0] select_ln30_1_fu_362_p3;
reg   [4:0] select_ln30_1_reg_818;
wire   [0:0] or_ln30_fu_422_p2;
reg   [0:0] or_ln30_reg_824;
wire   [4:0] select_ln30_5_fu_436_p3;
reg   [4:0] select_ln30_5_reg_829;
wire   [0:0] or_ln23_1_fu_514_p2;
reg   [0:0] or_ln23_1_reg_835;
wire   [1:0] select_ln23_1_fu_520_p3;
reg   [1:0] select_ln23_1_reg_840;
wire   [2:0] select_ln23_2_fu_528_p3;
reg   [2:0] select_ln23_2_reg_845;
wire   [10:0] add_ln23_9_fu_645_p2;
reg   [10:0] add_ln23_9_reg_877;
reg   [31:0] conv_1_weights_1_loa_reg_892;
reg   [31:0] input_load_1_reg_897;
reg   [31:0] conv_1_weights_2_loa_reg_902;
wire   [31:0] grp_fu_296_p2;
reg   [31:0] tmp_s_reg_907;
wire   [4:0] add_ln14_fu_655_p2;
reg   [4:0] add_ln14_reg_912;
wire   [31:0] select_ln23_fu_661_p3;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_state17_pp0_stage3_iter1;
wire    ap_block_pp0_stage3_11001;
reg   [31:0] tmp_1_reg_922;
wire   [9:0] add_ln11_fu_669_p2;
reg   [9:0] add_ln11_reg_927;
reg   [31:0] tmp_2_reg_932;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state6_pp0_stage4_iter0;
wire    ap_block_state18_pp0_stage4_iter1;
wire    ap_block_pp0_stage4_11001;
wire   [1:0] wr_fu_675_p2;
reg   [1:0] wr_reg_937;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state13_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_11001;
wire   [4:0] select_ln14_fu_680_p3;
reg   [4:0] select_ln14_reg_943;
wire   [9:0] select_ln11_fu_686_p3;
reg   [9:0] select_ln11_reg_948;
reg   [11:0] conv_out_addr_reg_953;
wire   [0:0] icmp_ln18_1_fu_740_p2;
reg   [0:0] icmp_ln18_1_reg_958;
reg   [31:0] conv_1_bias_load_reg_967;
reg   [31:0] w_sum_4_2_reg_972;
reg    ap_enable_reg_pp0_iter1;
reg   [31:0] w_sum_reg_978;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state9_pp0_stage7_iter0;
wire    ap_block_state21_pp0_stage7_iter1;
wire    ap_block_pp0_stage7_11001;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage11_subdone;
wire    ap_block_state10_pp0_stage8_iter0;
wire    ap_block_state22_pp0_stage8_iter1;
wire    ap_block_pp0_stage8_subdone;
wire    ap_CS_fsm_pp0_stage8;
reg   [13:0] ap_phi_mux_indvar_flatten47_phi_fu_205_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_r_0_phi_fu_216_p4;
reg   [9:0] ap_phi_mux_indvar_flatten14_phi_fu_227_p4;
reg   [4:0] ap_phi_mux_c_0_phi_fu_239_p4;
reg   [4:0] ap_phi_mux_indvar_flatten_phi_fu_250_p4;
reg   [2:0] ap_phi_mux_f_0_phi_fu_262_p4;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_273_p4;
wire    ap_block_pp0_stage3;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_285_p4;
wire  signed [63:0] sext_ln23_fu_580_p1;
wire  signed [63:0] sext_ln23_1_fu_629_p1;
wire  signed [63:0] sext_ln23_2_fu_640_p1;
wire   [63:0] zext_ln23_7_fu_651_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln30_6_fu_735_p1;
wire   [63:0] zext_ln23_2_fu_725_p1;
wire    ap_block_pp0_stage8_11001;
wire    ap_block_pp0_stage8;
reg   [31:0] grp_fu_292_p0;
reg   [31:0] grp_fu_292_p1;
wire    ap_block_pp0_stage7;
wire    ap_block_pp0_stage11;
wire    ap_block_pp0_stage4;
reg   [31:0] grp_fu_296_p0;
reg   [31:0] grp_fu_296_p1;
wire    ap_block_pp0_stage2;
wire   [4:0] r_fu_342_p2;
wire   [4:0] c_fu_318_p2;
wire   [4:0] add_ln23_2_fu_324_p2;
wire   [0:0] icmp_ln18_fu_392_p2;
wire   [0:0] xor_ln30_fu_386_p2;
wire   [0:0] icmp_ln14_fu_404_p2;
wire   [4:0] select_ln30_fu_354_p3;
wire   [0:0] and_ln30_1_fu_410_p2;
wire   [4:0] add_ln23_3_fu_416_p2;
wire   [4:0] add_ln23_4_fu_448_p2;
wire   [4:0] select_ln30_2_fu_370_p3;
wire   [4:0] select_ln30_6_fu_454_p3;
wire   [4:0] add_ln23_5_fu_466_p2;
wire   [4:0] select_ln30_3_fu_378_p3;
wire   [4:0] select_ln30_7_fu_472_p3;
wire   [0:0] xor_ln30_1_fu_484_p2;
wire   [0:0] and_ln30_fu_398_p2;
wire   [0:0] or_ln30_1_fu_490_p2;
wire   [2:0] select_ln30_4_fu_428_p3;
wire   [0:0] and_ln30_2_fu_496_p2;
wire   [0:0] or_ln23_fu_508_p2;
wire   [2:0] f_fu_502_p2;
wire   [4:0] tmp_10_fu_544_p3;
wire   [2:0] tmp_12_fu_556_p3;
wire   [5:0] zext_ln23_3_fu_552_p1;
wire   [5:0] zext_ln23_4_fu_564_p1;
wire   [5:0] zext_ln23_fu_536_p1;
wire   [5:0] sub_ln23_fu_568_p2;
wire   [5:0] add_ln23_6_fu_574_p2;
wire   [4:0] zext_ln18_fu_540_p1;
wire   [4:0] add_ln23_fu_587_p2;
wire   [9:0] tmp_13_fu_593_p3;
wire   [6:0] tmp_14_fu_605_p3;
wire   [10:0] zext_ln23_5_fu_601_p1;
wire   [10:0] zext_ln23_6_fu_613_p1;
wire   [10:0] zext_ln30_1_fu_444_p1;
wire   [10:0] sub_ln23_1_fu_617_p2;
wire   [10:0] add_ln23_7_fu_623_p2;
wire   [10:0] zext_ln30_4_fu_462_p1;
wire   [10:0] add_ln23_8_fu_634_p2;
wire   [10:0] zext_ln30_5_fu_480_p1;
wire   [9:0] grp_fu_794_p3;
wire   [10:0] tmp_11_fu_705_p3;
wire   [12:0] p_shl5_cast_fu_698_p3;
wire   [12:0] zext_ln30_3_fu_712_p1;
wire   [12:0] zext_ln23_1_fu_722_p1;
wire   [12:0] sub_ln30_fu_716_p2;
wire   [12:0] add_ln30_1_fu_729_p2;
wire   [31:0] bitcast_ln29_fu_745_p1;
wire   [7:0] tmp_fu_748_p4;
wire   [22:0] trunc_ln29_fu_758_p1;
wire   [0:0] icmp_ln29_7_fu_768_p2;
wire   [0:0] icmp_ln29_fu_762_p2;
wire   [0:0] or_ln29_fu_774_p2;
wire   [0:0] grp_fu_302_p2;
wire   [0:0] and_ln29_fu_780_p2;
wire   [4:0] grp_fu_794_p0;
wire   [5:0] grp_fu_794_p1;
wire   [4:0] grp_fu_794_p2;
wire    ap_block_pp0_stage7_00001;
wire    ap_CS_fsm_state23;
reg   [13:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage4_subdone;
wire    ap_block_state7_pp0_stage5_iter0;
wire    ap_block_state19_pp0_stage5_iter1;
wire    ap_block_pp0_stage5_subdone;
wire    ap_block_pp0_stage6_subdone;
wire    ap_block_pp0_stage7_subdone;
wire    ap_block_state11_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_subdone;
wire    ap_block_pp0_stage10_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_794_p00;
wire   [9:0] grp_fu_794_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_1_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_0_address0),
    .ce0(conv_1_weights_0_ce0),
    .q0(conv_1_weights_0_q0)
);

conv_1_conv_1_weicud #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_1_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_1_address0),
    .ce0(conv_1_weights_1_ce0),
    .q0(conv_1_weights_1_q0)
);

conv_1_conv_1_weidEe #(
    .DataWidth( 32 ),
    .AddressRange( 18 ),
    .AddressWidth( 5 ))
conv_1_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_2_address0),
    .ce0(conv_1_weights_2_ce0),
    .q0(conv_1_weights_2_q0)
);

cnn_fadd_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32neOg_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_292_p0),
    .din1(grp_fu_292_p1),
    .ce(1'b1),
    .dout(grp_fu_292_p2)
);

cnn_fmul_32ns_32nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32nfYi_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_296_p0),
    .din1(grp_fu_296_p1),
    .ce(1'b1),
    .dout(grp_fu_296_p2)
);

cnn_fcmp_32ns_32ng8j #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ng8j_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_292_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_302_p2)
);

cnn_mac_muladd_5nhbi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
cnn_mac_muladd_5nhbi_U4(
    .din0(grp_fu_794_p0),
    .din1(grp_fu_794_p1),
    .din2(grp_fu_794_p2),
    .dout(grp_fu_794_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage11_subdone) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        c_0_reg_235 <= select_ln30_5_reg_829;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_235 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        f_0_reg_258 <= select_ln23_2_reg_845;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_258 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        indvar_flatten14_reg_223 <= select_ln11_reg_948;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten14_reg_223 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        indvar_flatten47_reg_201 <= add_ln8_reg_808;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten47_reg_201 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        indvar_flatten_reg_246 <= select_ln14_reg_943;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_246 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        r_0_reg_212 <= select_ln30_1_reg_818;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_212 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln8_reg_804_pp0_iter1_reg == 1'd0))) begin
        w_sum_0_reg_269 <= w_sum_4_2_reg_972;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_sum_0_reg_269 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        wr_0_reg_281 <= wr_reg_937;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        wr_0_reg_281 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln11_reg_813 == 1'd0) & (icmp_ln8_reg_804 == 1'd0))) begin
        add_ln11_reg_927 <= add_ln11_fu_669_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (or_ln30_reg_824 == 1'd0) & (icmp_ln8_reg_804 == 1'd0))) begin
        add_ln14_reg_912 <= add_ln14_fu_655_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_330_p2 == 1'd0))) begin
        add_ln23_9_reg_877 <= add_ln23_9_fu_645_p2;
        icmp_ln11_reg_813 <= icmp_ln11_fu_348_p2;
        or_ln23_1_reg_835 <= or_ln23_1_fu_514_p2;
        or_ln30_reg_824 <= or_ln30_fu_422_p2;
        select_ln23_1_reg_840 <= select_ln23_1_fu_520_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln8_reg_808 <= add_ln8_fu_336_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_1_reg_958 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_bias_load_reg_967 <= conv_1_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln8_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_1_weights_1_loa_reg_892 <= conv_1_weights_1_q0;
        conv_1_weights_2_loa_reg_902 <= conv_1_weights_2_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        conv_out_addr_reg_953 <= zext_ln30_6_fu_735_p1;
        icmp_ln18_1_reg_958 <= icmp_ln18_1_fu_740_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln8_reg_804 <= icmp_ln8_fu_330_p2;
        icmp_ln8_reg_804_pp0_iter1_reg <= icmp_ln8_reg_804;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        input_load_1_reg_897 <= input_r_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_reg_804 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln8_reg_804 == 1'd0)))) begin
        reg_308 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (icmp_ln8_reg_804 == 1'd0)) | ((1'b1 == ap_CS_fsm_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (icmp_ln8_reg_804 == 1'd0)))) begin
        reg_313 <= grp_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_reg_804 == 1'd0))) begin
        select_ln11_reg_948 <= select_ln11_fu_686_p3;
        select_ln14_reg_943 <= select_ln14_fu_680_p3;
        wr_reg_937 <= wr_fu_675_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln8_fu_330_p2 == 1'd0))) begin
        select_ln23_2_reg_845 <= select_ln23_2_fu_528_p3;
        select_ln30_1_reg_818 <= select_ln30_1_fu_362_p3;
        select_ln30_5_reg_829 <= select_ln30_5_fu_436_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_reg_804 == 1'd0))) begin
        tmp_1_reg_922 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_reg_804 == 1'd0))) begin
        tmp_2_reg_932 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln8_reg_804 == 1'd0))) begin
        tmp_s_reg_907 <= grp_fu_296_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (icmp_ln8_reg_804_pp0_iter1_reg == 1'd0))) begin
        w_sum_4_2_reg_972 <= grp_fu_292_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (icmp_ln18_1_reg_958 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        w_sum_reg_978 <= grp_fu_292_p2;
    end
end

always @ (*) begin
    if ((icmp_ln8_fu_330_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_c_0_phi_fu_239_p4 = select_ln30_5_reg_829;
    end else begin
        ap_phi_mux_c_0_phi_fu_239_p4 = c_0_reg_235;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_262_p4 = select_ln23_2_reg_845;
    end else begin
        ap_phi_mux_f_0_phi_fu_262_p4 = f_0_reg_258;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_indvar_flatten14_phi_fu_227_p4 = select_ln11_reg_948;
    end else begin
        ap_phi_mux_indvar_flatten14_phi_fu_227_p4 = indvar_flatten14_reg_223;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_indvar_flatten47_phi_fu_205_p4 = add_ln8_reg_808;
    end else begin
        ap_phi_mux_indvar_flatten47_phi_fu_205_p4 = indvar_flatten47_reg_201;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_250_p4 = select_ln14_reg_943;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_250_p4 = indvar_flatten_reg_246;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_r_0_phi_fu_216_p4 = select_ln30_1_reg_818;
    end else begin
        ap_phi_mux_r_0_phi_fu_216_p4 = r_0_reg_212;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln8_reg_804_pp0_iter1_reg == 1'd0))) begin
        ap_phi_mux_w_sum_0_phi_fu_273_p4 = w_sum_4_2_reg_972;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_273_p4 = w_sum_0_reg_269;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln8_reg_804 == 1'd0))) begin
        ap_phi_mux_wr_0_phi_fu_285_p4 = wr_reg_937;
    end else begin
        ap_phi_mux_wr_0_phi_fu_285_p4 = wr_0_reg_281;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_0_ce0 = 1'b1;
    end else begin
        conv_1_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_1_ce0 = 1'b1;
    end else begin
        conv_1_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_2_ce0 = 1'b1;
    end else begin
        conv_1_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (icmp_ln18_1_reg_958 == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_292_p0 = w_sum_4_2_reg_972;
    end else if ((((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        grp_fu_292_p0 = reg_313;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_292_p0 = select_ln23_fu_661_p3;
    end else begin
        grp_fu_292_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_292_p1 = conv_1_bias_load_reg_967;
    end else if (((1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_292_p1 = tmp_2_reg_932;
    end else if (((1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_292_p1 = tmp_1_reg_922;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_292_p1 = tmp_s_reg_907;
    end else begin
        grp_fu_292_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_296_p0 = conv_1_weights_2_loa_reg_902;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_296_p0 = conv_1_weights_1_loa_reg_892;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_296_p0 = conv_1_weights_0_q0;
        end else begin
            grp_fu_296_p0 = 'bx;
        end
    end else begin
        grp_fu_296_p0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            grp_fu_296_p1 = reg_308;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            grp_fu_296_p1 = input_load_1_reg_897;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            grp_fu_296_p1 = input_r_q0;
        end else begin
            grp_fu_296_p1 = 'bx;
        end
    end else begin
        grp_fu_296_p1 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            input_r_address0 = zext_ln23_7_fu_651_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            input_r_address0 = sext_ln23_1_fu_629_p1;
        end else begin
            input_r_address0 = 'bx;
        end
    end else begin
        input_r_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce1 = 1'b1;
    end else begin
        input_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_330_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln8_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((~((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage8_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else if (((1'b0 == ap_block_pp0_stage8_subdone) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_enable_reg_pp0_iter1 == 1'b1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_fu_669_p2 = (indvar_flatten14_reg_223 + 10'd1);

assign add_ln14_fu_655_p2 = (indvar_flatten_reg_246 + 5'd1);

assign add_ln23_2_fu_324_p2 = (ap_phi_mux_c_0_phi_fu_239_p4 + 5'd2);

assign add_ln23_3_fu_416_p2 = (select_ln30_fu_354_p3 + 5'd1);

assign add_ln23_4_fu_448_p2 = (select_ln30_fu_354_p3 + 5'd2);

assign add_ln23_5_fu_466_p2 = (select_ln30_fu_354_p3 + 5'd3);

assign add_ln23_6_fu_574_p2 = (zext_ln23_fu_536_p1 + sub_ln23_fu_568_p2);

assign add_ln23_7_fu_623_p2 = (zext_ln30_1_fu_444_p1 + sub_ln23_1_fu_617_p2);

assign add_ln23_8_fu_634_p2 = (zext_ln30_4_fu_462_p1 + sub_ln23_1_fu_617_p2);

assign add_ln23_9_fu_645_p2 = (zext_ln30_5_fu_480_p1 + sub_ln23_1_fu_617_p2);

assign add_ln23_fu_587_p2 = (select_ln30_1_fu_362_p3 + zext_ln18_fu_540_p1);

assign add_ln30_1_fu_729_p2 = (zext_ln23_1_fu_722_p1 + sub_ln30_fu_716_p2);

assign add_ln8_fu_336_p2 = (ap_phi_mux_indvar_flatten47_phi_fu_205_p4 + 14'd1);

assign and_ln29_fu_780_p2 = (or_ln29_fu_774_p2 & grp_fu_302_p2);

assign and_ln30_1_fu_410_p2 = (xor_ln30_fu_386_p2 & icmp_ln14_fu_404_p2);

assign and_ln30_2_fu_496_p2 = (or_ln30_1_fu_490_p2 & and_ln30_fu_398_p2);

assign and_ln30_fu_398_p2 = (xor_ln30_fu_386_p2 & icmp_ln18_fu_392_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd13];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage4_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage5_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage6_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage7_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage8_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_fu_745_p1 = w_sum_reg_978;

assign c_fu_318_p2 = (ap_phi_mux_c_0_phi_fu_239_p4 + 5'd1);

assign conv_1_bias_address0 = zext_ln23_2_fu_725_p1;

assign conv_1_weights_0_address0 = sext_ln23_fu_580_p1;

assign conv_1_weights_1_address0 = sext_ln23_fu_580_p1;

assign conv_1_weights_2_address0 = sext_ln23_fu_580_p1;

assign conv_out_address0 = conv_out_addr_reg_953;

assign conv_out_d0 = ((and_ln29_fu_780_p2[0:0] === 1'b1) ? w_sum_reg_978 : 32'd0);

assign f_fu_502_p2 = (select_ln30_4_fu_428_p3 + 3'd1);

assign grp_fu_794_p0 = grp_fu_794_p00;

assign grp_fu_794_p00 = select_ln30_1_reg_818;

assign grp_fu_794_p1 = 10'd26;

assign grp_fu_794_p2 = grp_fu_794_p20;

assign grp_fu_794_p20 = select_ln30_5_reg_829;

assign icmp_ln11_fu_348_p2 = ((ap_phi_mux_indvar_flatten14_phi_fu_227_p4 == 10'd468) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_404_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_250_p4 == 5'd18) ? 1'b1 : 1'b0);

assign icmp_ln18_1_fu_740_p2 = ((wr_reg_937 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_392_p2 = ((ap_phi_mux_wr_0_phi_fu_285_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_768_p2 = ((trunc_ln29_fu_758_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_762_p2 = ((tmp_fu_748_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_330_p2 = ((ap_phi_mux_indvar_flatten47_phi_fu_205_p4 == 14'd12168) ? 1'b1 : 1'b0);

assign input_r_address1 = sext_ln23_2_fu_640_p1;

assign or_ln23_1_fu_514_p2 = (or_ln23_fu_508_p2 | icmp_ln11_fu_348_p2);

assign or_ln23_fu_508_p2 = (and_ln30_2_fu_496_p2 | and_ln30_1_fu_410_p2);

assign or_ln29_fu_774_p2 = (icmp_ln29_fu_762_p2 | icmp_ln29_7_fu_768_p2);

assign or_ln30_1_fu_490_p2 = (xor_ln30_1_fu_484_p2 | icmp_ln11_fu_348_p2);

assign or_ln30_fu_422_p2 = (icmp_ln11_fu_348_p2 | and_ln30_1_fu_410_p2);

assign p_shl5_cast_fu_698_p3 = {{grp_fu_794_p3}, {3'd0}};

assign r_fu_342_p2 = (ap_phi_mux_r_0_phi_fu_216_p4 + 5'd1);

assign select_ln11_fu_686_p3 = ((icmp_ln11_reg_813[0:0] === 1'b1) ? 10'd1 : add_ln11_reg_927);

assign select_ln14_fu_680_p3 = ((or_ln30_reg_824[0:0] === 1'b1) ? 5'd1 : add_ln14_reg_912);

assign select_ln23_1_fu_520_p3 = ((or_ln23_1_fu_514_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wr_0_phi_fu_285_p4);

assign select_ln23_2_fu_528_p3 = ((and_ln30_2_fu_496_p2[0:0] === 1'b1) ? f_fu_502_p2 : select_ln30_4_fu_428_p3);

assign select_ln23_fu_661_p3 = ((or_ln23_1_reg_835[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_w_sum_0_phi_fu_273_p4);

assign select_ln30_1_fu_362_p3 = ((icmp_ln11_fu_348_p2[0:0] === 1'b1) ? r_fu_342_p2 : ap_phi_mux_r_0_phi_fu_216_p4);

assign select_ln30_2_fu_370_p3 = ((icmp_ln11_fu_348_p2[0:0] === 1'b1) ? 5'd1 : c_fu_318_p2);

assign select_ln30_3_fu_378_p3 = ((icmp_ln11_fu_348_p2[0:0] === 1'b1) ? 5'd2 : add_ln23_2_fu_324_p2);

assign select_ln30_4_fu_428_p3 = ((or_ln30_fu_422_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_f_0_phi_fu_262_p4);

assign select_ln30_5_fu_436_p3 = ((and_ln30_1_fu_410_p2[0:0] === 1'b1) ? add_ln23_3_fu_416_p2 : select_ln30_fu_354_p3);

assign select_ln30_6_fu_454_p3 = ((and_ln30_1_fu_410_p2[0:0] === 1'b1) ? add_ln23_4_fu_448_p2 : select_ln30_2_fu_370_p3);

assign select_ln30_7_fu_472_p3 = ((and_ln30_1_fu_410_p2[0:0] === 1'b1) ? add_ln23_5_fu_466_p2 : select_ln30_3_fu_378_p3);

assign select_ln30_fu_354_p3 = ((icmp_ln11_fu_348_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_c_0_phi_fu_239_p4);

assign sext_ln23_1_fu_629_p1 = $signed(add_ln23_7_fu_623_p2);

assign sext_ln23_2_fu_640_p1 = $signed(add_ln23_8_fu_634_p2);

assign sext_ln23_fu_580_p1 = $signed(add_ln23_6_fu_574_p2);

assign sub_ln23_1_fu_617_p2 = (zext_ln23_5_fu_601_p1 - zext_ln23_6_fu_613_p1);

assign sub_ln23_fu_568_p2 = (zext_ln23_3_fu_552_p1 - zext_ln23_4_fu_564_p1);

assign sub_ln30_fu_716_p2 = (p_shl5_cast_fu_698_p3 - zext_ln30_3_fu_712_p1);

assign tmp_10_fu_544_p3 = {{select_ln23_1_fu_520_p3}, {3'd0}};

assign tmp_11_fu_705_p3 = {{grp_fu_794_p3}, {1'd0}};

assign tmp_12_fu_556_p3 = {{select_ln23_1_fu_520_p3}, {1'd0}};

assign tmp_13_fu_593_p3 = {{add_ln23_fu_587_p2}, {5'd0}};

assign tmp_14_fu_605_p3 = {{add_ln23_fu_587_p2}, {2'd0}};

assign tmp_fu_748_p4 = {{bitcast_ln29_fu_745_p1[30:23]}};

assign trunc_ln29_fu_758_p1 = bitcast_ln29_fu_745_p1[22:0];

assign wr_fu_675_p2 = (select_ln23_1_reg_840 + 2'd1);

assign xor_ln30_1_fu_484_p2 = (icmp_ln14_fu_404_p2 ^ 1'd1);

assign xor_ln30_fu_386_p2 = (icmp_ln11_fu_348_p2 ^ 1'd1);

assign zext_ln18_fu_540_p1 = select_ln23_1_fu_520_p3;

assign zext_ln23_1_fu_722_p1 = select_ln23_2_reg_845;

assign zext_ln23_2_fu_725_p1 = select_ln23_2_reg_845;

assign zext_ln23_3_fu_552_p1 = tmp_10_fu_544_p3;

assign zext_ln23_4_fu_564_p1 = tmp_12_fu_556_p3;

assign zext_ln23_5_fu_601_p1 = tmp_13_fu_593_p3;

assign zext_ln23_6_fu_613_p1 = tmp_14_fu_605_p3;

assign zext_ln23_7_fu_651_p1 = add_ln23_9_reg_877;

assign zext_ln23_fu_536_p1 = select_ln23_2_fu_528_p3;

assign zext_ln30_1_fu_444_p1 = select_ln30_5_fu_436_p3;

assign zext_ln30_3_fu_712_p1 = tmp_11_fu_705_p3;

assign zext_ln30_4_fu_462_p1 = select_ln30_6_fu_454_p3;

assign zext_ln30_5_fu_480_p1 = select_ln30_7_fu_472_p3;

assign zext_ln30_6_fu_735_p1 = add_ln30_1_fu_729_p2;

endmodule //conv_1
