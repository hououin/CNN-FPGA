// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _flat_HH_
#define _flat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct flat : public sc_module {
    // Port declarations 13
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > flat_array_address0;
    sc_out< sc_logic > flat_array_ce0;
    sc_out< sc_logic > flat_array_we0;
    sc_out< sc_lv<32> > flat_array_d0;
    sc_out< sc_lv<9> > max_pool_2_out_address0;
    sc_out< sc_logic > max_pool_2_out_ce0;
    sc_in< sc_lv<32> > max_pool_2_out_q0;


    // Module declarations
    flat(sc_module_name name);
    SC_HAS_PROCESS(flat);

    ~flat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > indvar_flatten17_reg_95;
    sc_signal< sc_lv<3> > r_0_reg_106;
    sc_signal< sc_lv<9> > i_0_reg_117;
    sc_signal< sc_lv<8> > indvar_flatten_reg_128;
    sc_signal< sc_lv<9> > i_1_reg_139;
    sc_signal< sc_lv<3> > c_0_reg_150;
    sc_signal< sc_lv<9> > i_2_reg_161;
    sc_signal< sc_lv<5> > f_0_reg_172;
    sc_signal< sc_lv<1> > icmp_ln6_fu_183_p2;
    sc_signal< sc_lv<1> > icmp_ln6_reg_406;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<9> > add_ln6_fu_189_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<3> > select_ln15_3_fu_237_p3;
    sc_signal< sc_lv<3> > select_ln15_3_reg_415;
    sc_signal< sc_lv<9> > select_ln6_fu_285_p3;
    sc_signal< sc_lv<9> > select_ln15_4_fu_305_p3;
    sc_signal< sc_lv<9> > select_ln15_4_reg_425;
    sc_signal< sc_lv<3> > select_ln15_6_fu_327_p3;
    sc_signal< sc_lv<3> > select_ln15_6_reg_430;
    sc_signal< sc_lv<9> > select_ln9_fu_353_p3;
    sc_signal< sc_lv<9> > add_ln15_1_fu_376_p2;
    sc_signal< sc_lv<5> > f_fu_382_p2;
    sc_signal< sc_lv<8> > select_ln9_1_fu_394_p3;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<3> > ap_phi_mux_r_0_phi_fu_110_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_c_0_phi_fu_154_p4;
    sc_signal< sc_lv<64> > zext_ln14_4_fu_371_p1;
    sc_signal< sc_lv<64> > zext_ln14_3_fu_402_p1;
    sc_signal< sc_lv<1> > icmp_ln9_fu_207_p2;
    sc_signal< sc_lv<9> > add_ln15_fu_201_p2;
    sc_signal< sc_lv<3> > r_fu_195_p2;
    sc_signal< sc_lv<5> > tmp_fu_249_p3;
    sc_signal< sc_lv<6> > zext_ln14_fu_245_p1;
    sc_signal< sc_lv<6> > zext_ln14_1_fu_257_p1;
    sc_signal< sc_lv<1> > icmp_ln12_fu_273_p2;
    sc_signal< sc_lv<1> > xor_ln15_fu_267_p2;
    sc_signal< sc_lv<3> > select_ln15_1_fu_221_p3;
    sc_signal< sc_lv<9> > select_ln15_fu_213_p3;
    sc_signal< sc_lv<1> > and_ln15_fu_279_p2;
    sc_signal< sc_lv<9> > add_ln15_2_fu_299_p2;
    sc_signal< sc_lv<9> > select_ln15_2_fu_229_p3;
    sc_signal< sc_lv<1> > or_ln15_fu_313_p2;
    sc_signal< sc_lv<3> > c_fu_293_p2;
    sc_signal< sc_lv<6> > add_ln14_fu_261_p2;
    sc_signal< sc_lv<6> > zext_ln15_fu_335_p1;
    sc_signal< sc_lv<6> > add_ln14_1_fu_339_p2;
    sc_signal< sc_lv<5> > select_ln15_5_fu_319_p3;
    sc_signal< sc_lv<10> > tmp_162_cast_fu_345_p3;
    sc_signal< sc_lv<10> > zext_ln14_2_fu_361_p1;
    sc_signal< sc_lv<10> > add_ln14_2_fu_365_p2;
    sc_signal< sc_lv<8> > add_ln9_fu_388_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<8> ap_const_lv8_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<9> ap_const_lv9_190;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<9> ap_const_lv9_50;
    static const sc_lv<8> ap_const_lv8_50;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<9> ap_const_lv9_10;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln14_1_fu_339_p2();
    void thread_add_ln14_2_fu_365_p2();
    void thread_add_ln14_fu_261_p2();
    void thread_add_ln15_1_fu_376_p2();
    void thread_add_ln15_2_fu_299_p2();
    void thread_add_ln15_fu_201_p2();
    void thread_add_ln6_fu_189_p2();
    void thread_add_ln9_fu_388_p2();
    void thread_and_ln15_fu_279_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c_0_phi_fu_154_p4();
    void thread_ap_phi_mux_r_0_phi_fu_110_p4();
    void thread_ap_ready();
    void thread_c_fu_293_p2();
    void thread_f_fu_382_p2();
    void thread_flat_array_address0();
    void thread_flat_array_ce0();
    void thread_flat_array_d0();
    void thread_flat_array_we0();
    void thread_icmp_ln12_fu_273_p2();
    void thread_icmp_ln6_fu_183_p2();
    void thread_icmp_ln9_fu_207_p2();
    void thread_max_pool_2_out_address0();
    void thread_max_pool_2_out_ce0();
    void thread_or_ln15_fu_313_p2();
    void thread_r_fu_195_p2();
    void thread_select_ln15_1_fu_221_p3();
    void thread_select_ln15_2_fu_229_p3();
    void thread_select_ln15_3_fu_237_p3();
    void thread_select_ln15_4_fu_305_p3();
    void thread_select_ln15_5_fu_319_p3();
    void thread_select_ln15_6_fu_327_p3();
    void thread_select_ln15_fu_213_p3();
    void thread_select_ln6_fu_285_p3();
    void thread_select_ln9_1_fu_394_p3();
    void thread_select_ln9_fu_353_p3();
    void thread_tmp_162_cast_fu_345_p3();
    void thread_tmp_fu_249_p3();
    void thread_xor_ln15_fu_267_p2();
    void thread_zext_ln14_1_fu_257_p1();
    void thread_zext_ln14_2_fu_361_p1();
    void thread_zext_ln14_3_fu_402_p1();
    void thread_zext_ln14_4_fu_371_p1();
    void thread_zext_ln14_fu_245_p1();
    void thread_zext_ln15_fu_335_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
