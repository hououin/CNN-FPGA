-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_1_ce0 : OUT STD_LOGIC;
    input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_1_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    input_1_ce1 : OUT STD_LOGIC;
    input_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv12_FD8 : STD_LOGIC_VECTOR (11 downto 0) := "111111011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_0_1_ce0 : STD_LOGIC;
    signal conv_1_weights_0_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_0_2_ce0 : STD_LOGIC;
    signal conv_1_weights_0_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_1_1_ce0 : STD_LOGIC;
    signal conv_1_weights_1_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_1_2_ce0 : STD_LOGIC;
    signal conv_1_weights_1_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_2_1_ce0 : STD_LOGIC;
    signal conv_1_weights_2_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_weights_2_2_ce0 : STD_LOGIC;
    signal conv_1_weights_2_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten39_reg_417 : STD_LOGIC_VECTOR (11 downto 0);
    signal r_0_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_439 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_450 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_461 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_511_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state10_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state13_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_state16_pp0_stage2_iter4 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter5 : BOOLEAN;
    signal ap_block_state22_pp0_stage2_iter6 : BOOLEAN;
    signal ap_block_state25_pp0_stage2_iter7 : BOOLEAN;
    signal ap_block_state28_pp0_stage2_iter8 : BOOLEAN;
    signal ap_block_state31_pp0_stage2_iter9 : BOOLEAN;
    signal ap_block_state34_pp0_stage2_iter10 : BOOLEAN;
    signal ap_block_state37_pp0_stage2_iter11 : BOOLEAN;
    signal ap_block_state40_pp0_stage2_iter12 : BOOLEAN;
    signal ap_block_state43_pp0_stage2_iter13 : BOOLEAN;
    signal ap_block_state46_pp0_stage2_iter14 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal icmp_ln8_reg_1102 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state9_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state12_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state15_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter5 : BOOLEAN;
    signal ap_block_state21_pp0_stage1_iter6 : BOOLEAN;
    signal ap_block_state24_pp0_stage1_iter7 : BOOLEAN;
    signal ap_block_state27_pp0_stage1_iter8 : BOOLEAN;
    signal ap_block_state30_pp0_stage1_iter9 : BOOLEAN;
    signal ap_block_state33_pp0_stage1_iter10 : BOOLEAN;
    signal ap_block_state36_pp0_stage1_iter11 : BOOLEAN;
    signal ap_block_state39_pp0_stage1_iter12 : BOOLEAN;
    signal ap_block_state42_pp0_stage1_iter13 : BOOLEAN;
    signal ap_block_state45_pp0_stage1_iter14 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_1102_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_520_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_543 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_529_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_1102_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_598_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln8_reg_1106 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_1111 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_618_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_1116 : STD_LOGIC_VECTOR (4 downto 0);
    signal trunc_ln30_fu_626_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_reg_1122 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln30_reg_1122_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_2_fu_630_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_2_reg_1130 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_3_fu_654_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_3_reg_1136 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln23_5_mid2_v_reg_1142 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_7_fu_732_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter2_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter3_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter4_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter5_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter6_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter7_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter8_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter9_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter10_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter11_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter12_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter13_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_7_reg_1148_pp0_iter14_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_8_fu_740_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_8_reg_1154 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_9_fu_754_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_9_reg_1160 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_10_fu_768_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_10_reg_1165 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_1170_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln11_fu_786_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln11_reg_1208 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln23_fu_814_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln23_reg_1213 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln23_1_fu_842_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln23_1_reg_1218 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln30_1_fu_848_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln30_1_reg_1223 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln30_3_fu_875_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln30_3_reg_1249 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_weights_0_0_l_reg_1274 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_l_reg_1279 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_l_reg_1284 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_l_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_l_reg_1294 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_l_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln23_10_fu_941_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_10_reg_1314 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_14_fu_971_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_14_reg_1329 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln23_4_fu_977_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln23_4_reg_1344 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_984_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_1349 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_fu_989_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_reg_1354 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1095_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter11_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter12_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter13_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_1_reg_1359_pp0_iter14_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_490_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_1385 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_1_reg_1390 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_1_reg_1390_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_498_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1395 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1395_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1395_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1395_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_reg_1395_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_2_reg_1415 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_2_reg_1415_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_0_2_reg_1415_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1420 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1420_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1420_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1420_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1420_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_1_reg_1420_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_2_reg_1425_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1450_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_1_reg_1455_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter5_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter6_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter7_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter8_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter9_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter10_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_2_reg_1460_pp0_iter11_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_reg_1465 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal w_sum_4_0_1_reg_1470 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal w_sum_4_0_2_reg_1475 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal grp_fu_477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_1_reg_1480 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal w_sum_4_1_1_reg_1485 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal w_sum_4_1_2_reg_1490 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal grp_fu_481_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_2_reg_1495 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal w_sum_4_2_1_reg_1500 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal w_sum_4_2_2_reg_1505 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal grp_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten39_phi_fu_421_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_432_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_443_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_c_0_phi_fu_454_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_f_0_phi_fu_465_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln23_7_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln23_8_fu_869_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_9_fu_884_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_10_fu_896_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_fu_935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln23_11_fu_954_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_12_fu_965_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_1_fu_998_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_13_fu_1003_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_6_fu_1041_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_477_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_477_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_481_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_481_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_490_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_490_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_498_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_498_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_511_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_520_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_564_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln23_1_fu_570_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal lshr_ln_fu_554_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln23_fu_638_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal lshr_ln23_1_mid1_fu_644_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_4_fu_662_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln30_fu_670_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_580_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_1_fu_586_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_708_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_610_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln30_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln23_3_fu_720_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_7_fu_748_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_5_fu_686_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_11_fu_762_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_6_fu_694_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_11_fu_792_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_12_fu_803_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_1_fu_799_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_2_fu_810_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_820_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_fu_831_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_3_fu_827_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_4_fu_838_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_4_fu_851_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_5_fu_863_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_8_fu_878_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_9_fu_890_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_902_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_913_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln23_5_fu_909_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln23_6_fu_920_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln23_2_fu_924_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_6_fu_930_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln30_4_fu_946_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_12_fu_949_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln23_13_fu_960_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_fu_1015_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_1008_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_2_fu_1022_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln30_fu_1026_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_5_fu_1032_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln30_2_fu_1035_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal bitcast_ln29_fu_1046_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_1049_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_1059_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_1069_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_1063_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_1075_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_1081_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1095_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_1095_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1095_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1095_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fadd_32ns_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_6nncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_address0,
        ce0 => conv_1_weights_0_0_ce0,
        q0 => conv_1_weights_0_0_q0);

    conv_1_weights_0_1_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_1_address0,
        ce0 => conv_1_weights_0_1_ce0,
        q0 => conv_1_weights_0_1_q0);

    conv_1_weights_0_2_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_2_address0,
        ce0 => conv_1_weights_0_2_ce0,
        q0 => conv_1_weights_0_2_q0);

    conv_1_weights_1_0_U : component conv_1_conv_1_weieOg
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_address0,
        ce0 => conv_1_weights_1_0_ce0,
        q0 => conv_1_weights_1_0_q0);

    conv_1_weights_1_1_U : component conv_1_conv_1_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_1_address0,
        ce0 => conv_1_weights_1_1_ce0,
        q0 => conv_1_weights_1_1_q0);

    conv_1_weights_1_2_U : component conv_1_conv_1_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_2_address0,
        ce0 => conv_1_weights_1_2_ce0,
        q0 => conv_1_weights_1_2_q0);

    conv_1_weights_2_0_U : component conv_1_conv_1_weihbi
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_address0,
        ce0 => conv_1_weights_2_0_ce0,
        q0 => conv_1_weights_2_0_q0);

    conv_1_weights_2_1_U : component conv_1_conv_1_weiibs
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_1_address0,
        ce0 => conv_1_weights_2_1_ce0,
        q0 => conv_1_weights_2_1_q0);

    conv_1_weights_2_2_U : component conv_1_conv_1_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_2_address0,
        ce0 => conv_1_weights_2_2_ce0,
        q0 => conv_1_weights_2_2_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    cnn_fadd_32ns_32nkbM_U1 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_472_p0,
        din1 => grp_fu_472_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_472_p2);

    cnn_fadd_32ns_32nkbM_U2 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_477_p0,
        din1 => grp_fu_477_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_477_p2);

    cnn_fadd_32ns_32nkbM_U3 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_481_p0,
        din1 => grp_fu_481_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_481_p2);

    cnn_fadd_32ns_32nkbM_U4 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_sum_4_2_2_reg_1505,
        din1 => conv_1_bias_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_485_p2);

    cnn_fmul_32ns_32nlbW_U5 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_490_p0,
        din1 => grp_fu_490_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_490_p2);

    cnn_fmul_32ns_32nlbW_U6 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_494_p0,
        din1 => grp_fu_494_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_494_p2);

    cnn_fmul_32ns_32nlbW_U7 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_498_p0,
        din1 => grp_fu_498_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_498_p2);

    cnn_fcmp_32ns_32nmb6_U8 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_485_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_505_p2);

    cnn_mac_muladd_6nncg_U9 : component cnn_mac_muladd_6nncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_1095_p0,
        din1 => grp_fu_1095_p1,
        din2 => grp_fu_1095_p2,
        dout => grp_fu_1095_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
                c_0_reg_450 <= select_ln30_8_reg_1154;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_450 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
                f_0_reg_461 <= f_reg_1349;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_461 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten39_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
                indvar_flatten39_reg_417 <= add_ln8_reg_1106;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten39_reg_417 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
                indvar_flatten_reg_439 <= select_ln11_reg_1354;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_439 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
                r_0_reg_428 <= select_ln30_1_reg_1116;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_428 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_592_p2 = ap_const_lv1_0))) then
                add_ln11_reg_1208 <= add_ln11_fu_786_p2;
                icmp_ln11_reg_1111 <= icmp_ln11_fu_604_p2;
                select_ln30_10_reg_1165 <= select_ln30_10_fu_768_p3;
                select_ln30_2_reg_1130 <= select_ln30_2_fu_630_p3;
                select_ln30_3_reg_1136 <= select_ln30_3_fu_654_p3;
                select_ln30_7_reg_1148 <= select_ln30_7_fu_732_p3;
                select_ln30_9_reg_1160 <= select_ln30_9_fu_754_p3;
                trunc_ln30_reg_1122 <= trunc_ln30_fu_626_p1;
                zext_ln23_5_mid2_v_reg_1142 <= add_ln30_fu_670_p2(4 downto 1);
                    zext_ln23_reg_1170(2 downto 0) <= zext_ln23_fu_776_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                add_ln23_10_reg_1314 <= add_ln23_10_fu_941_p2;
                add_ln23_14_reg_1329 <= add_ln23_14_fu_971_p2;
                select_ln23_4_reg_1344 <= select_ln23_4_fu_977_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then
                add_ln30_1_reg_1359 <= grp_fu_1095_p3;
                tmp_0_1_reg_1390 <= grp_fu_494_p2;
                tmp_1_reg_1395 <= grp_fu_498_p2;
                tmp_8_reg_1385 <= grp_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln30_1_reg_1359_pp0_iter10_reg <= add_ln30_1_reg_1359_pp0_iter9_reg;
                add_ln30_1_reg_1359_pp0_iter11_reg <= add_ln30_1_reg_1359_pp0_iter10_reg;
                add_ln30_1_reg_1359_pp0_iter12_reg <= add_ln30_1_reg_1359_pp0_iter11_reg;
                add_ln30_1_reg_1359_pp0_iter13_reg <= add_ln30_1_reg_1359_pp0_iter12_reg;
                add_ln30_1_reg_1359_pp0_iter14_reg <= add_ln30_1_reg_1359_pp0_iter13_reg;
                add_ln30_1_reg_1359_pp0_iter2_reg <= add_ln30_1_reg_1359;
                add_ln30_1_reg_1359_pp0_iter3_reg <= add_ln30_1_reg_1359_pp0_iter2_reg;
                add_ln30_1_reg_1359_pp0_iter4_reg <= add_ln30_1_reg_1359_pp0_iter3_reg;
                add_ln30_1_reg_1359_pp0_iter5_reg <= add_ln30_1_reg_1359_pp0_iter4_reg;
                add_ln30_1_reg_1359_pp0_iter6_reg <= add_ln30_1_reg_1359_pp0_iter5_reg;
                add_ln30_1_reg_1359_pp0_iter7_reg <= add_ln30_1_reg_1359_pp0_iter6_reg;
                add_ln30_1_reg_1359_pp0_iter8_reg <= add_ln30_1_reg_1359_pp0_iter7_reg;
                add_ln30_1_reg_1359_pp0_iter9_reg <= add_ln30_1_reg_1359_pp0_iter8_reg;
                icmp_ln8_reg_1102 <= icmp_ln8_fu_592_p2;
                icmp_ln8_reg_1102_pp0_iter10_reg <= icmp_ln8_reg_1102_pp0_iter9_reg;
                icmp_ln8_reg_1102_pp0_iter11_reg <= icmp_ln8_reg_1102_pp0_iter10_reg;
                icmp_ln8_reg_1102_pp0_iter12_reg <= icmp_ln8_reg_1102_pp0_iter11_reg;
                icmp_ln8_reg_1102_pp0_iter13_reg <= icmp_ln8_reg_1102_pp0_iter12_reg;
                icmp_ln8_reg_1102_pp0_iter14_reg <= icmp_ln8_reg_1102_pp0_iter13_reg;
                icmp_ln8_reg_1102_pp0_iter1_reg <= icmp_ln8_reg_1102;
                icmp_ln8_reg_1102_pp0_iter2_reg <= icmp_ln8_reg_1102_pp0_iter1_reg;
                icmp_ln8_reg_1102_pp0_iter3_reg <= icmp_ln8_reg_1102_pp0_iter2_reg;
                icmp_ln8_reg_1102_pp0_iter4_reg <= icmp_ln8_reg_1102_pp0_iter3_reg;
                icmp_ln8_reg_1102_pp0_iter5_reg <= icmp_ln8_reg_1102_pp0_iter4_reg;
                icmp_ln8_reg_1102_pp0_iter6_reg <= icmp_ln8_reg_1102_pp0_iter5_reg;
                icmp_ln8_reg_1102_pp0_iter7_reg <= icmp_ln8_reg_1102_pp0_iter6_reg;
                icmp_ln8_reg_1102_pp0_iter8_reg <= icmp_ln8_reg_1102_pp0_iter7_reg;
                icmp_ln8_reg_1102_pp0_iter9_reg <= icmp_ln8_reg_1102_pp0_iter8_reg;
                select_ln30_7_reg_1148_pp0_iter10_reg <= select_ln30_7_reg_1148_pp0_iter9_reg;
                select_ln30_7_reg_1148_pp0_iter11_reg <= select_ln30_7_reg_1148_pp0_iter10_reg;
                select_ln30_7_reg_1148_pp0_iter12_reg <= select_ln30_7_reg_1148_pp0_iter11_reg;
                select_ln30_7_reg_1148_pp0_iter13_reg <= select_ln30_7_reg_1148_pp0_iter12_reg;
                select_ln30_7_reg_1148_pp0_iter14_reg <= select_ln30_7_reg_1148_pp0_iter13_reg;
                select_ln30_7_reg_1148_pp0_iter1_reg <= select_ln30_7_reg_1148;
                select_ln30_7_reg_1148_pp0_iter2_reg <= select_ln30_7_reg_1148_pp0_iter1_reg;
                select_ln30_7_reg_1148_pp0_iter3_reg <= select_ln30_7_reg_1148_pp0_iter2_reg;
                select_ln30_7_reg_1148_pp0_iter4_reg <= select_ln30_7_reg_1148_pp0_iter3_reg;
                select_ln30_7_reg_1148_pp0_iter5_reg <= select_ln30_7_reg_1148_pp0_iter4_reg;
                select_ln30_7_reg_1148_pp0_iter6_reg <= select_ln30_7_reg_1148_pp0_iter5_reg;
                select_ln30_7_reg_1148_pp0_iter7_reg <= select_ln30_7_reg_1148_pp0_iter6_reg;
                select_ln30_7_reg_1148_pp0_iter8_reg <= select_ln30_7_reg_1148_pp0_iter7_reg;
                select_ln30_7_reg_1148_pp0_iter9_reg <= select_ln30_7_reg_1148_pp0_iter8_reg;
                tmp_0_1_reg_1390_pp0_iter2_reg <= tmp_0_1_reg_1390;
                tmp_1_reg_1395_pp0_iter2_reg <= tmp_1_reg_1395;
                tmp_1_reg_1395_pp0_iter3_reg <= tmp_1_reg_1395_pp0_iter2_reg;
                tmp_1_reg_1395_pp0_iter4_reg <= tmp_1_reg_1395_pp0_iter3_reg;
                tmp_1_reg_1395_pp0_iter5_reg <= tmp_1_reg_1395_pp0_iter4_reg;
                trunc_ln30_reg_1122_pp0_iter1_reg <= trunc_ln30_reg_1122;
                    zext_ln23_reg_1170_pp0_iter10_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter9_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter11_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter10_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter12_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter11_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter1_reg(2 downto 0) <= zext_ln23_reg_1170(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter2_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter1_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter3_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter2_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter4_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter3_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter5_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter4_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter6_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter5_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter7_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter6_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter8_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter7_reg(2 downto 0);
                    zext_ln23_reg_1170_pp0_iter9_reg(2 downto 0) <= zext_ln23_reg_1170_pp0_iter8_reg(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln8_reg_1106 <= add_ln8_fu_598_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then
                conv_1_weights_0_0_l_reg_1274 <= conv_1_weights_0_0_q0;
                conv_1_weights_0_1_l_reg_1279 <= conv_1_weights_0_1_q0;
                conv_1_weights_0_2_l_reg_1284 <= conv_1_weights_0_2_q0;
                conv_1_weights_1_0_l_reg_1289 <= conv_1_weights_1_0_q0;
                conv_1_weights_1_1_l_reg_1294 <= conv_1_weights_1_1_q0;
                conv_1_weights_1_2_l_reg_1299 <= conv_1_weights_1_2_q0;
                    sub_ln23_1_reg_1218(9 downto 2) <= sub_ln23_1_fu_842_p2(9 downto 2);
                    sub_ln23_reg_1213(9 downto 2) <= sub_ln23_fu_814_p2(9 downto 2);
                    zext_ln30_1_reg_1223(4 downto 0) <= zext_ln30_1_fu_848_p1(4 downto 0);
                    zext_ln30_3_reg_1249(4 downto 0) <= zext_ln30_3_fu_875_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                f_reg_1349 <= f_fu_984_p2;
                select_ln11_reg_1354 <= select_ln11_fu_989_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then
                reg_543 <= grp_fu_520_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_fu_592_p2 = ap_const_lv1_0))) then
                select_ln30_1_reg_1116 <= select_ln30_1_fu_618_p3;
                select_ln30_8_reg_1154 <= select_ln30_8_fu_740_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln8_reg_1102_pp0_iter1_reg = ap_const_lv1_0))) then
                tmp_0_2_reg_1415 <= grp_fu_490_p2;
                tmp_1_1_reg_1420 <= grp_fu_494_p2;
                tmp_1_2_reg_1425 <= grp_fu_498_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_0_2_reg_1415_pp0_iter2_reg <= tmp_0_2_reg_1415;
                tmp_0_2_reg_1415_pp0_iter3_reg <= tmp_0_2_reg_1415_pp0_iter2_reg;
                tmp_1_1_reg_1420_pp0_iter2_reg <= tmp_1_1_reg_1420;
                tmp_1_1_reg_1420_pp0_iter3_reg <= tmp_1_1_reg_1420_pp0_iter2_reg;
                tmp_1_1_reg_1420_pp0_iter4_reg <= tmp_1_1_reg_1420_pp0_iter3_reg;
                tmp_1_1_reg_1420_pp0_iter5_reg <= tmp_1_1_reg_1420_pp0_iter4_reg;
                tmp_1_1_reg_1420_pp0_iter6_reg <= tmp_1_1_reg_1420_pp0_iter5_reg;
                tmp_1_2_reg_1425_pp0_iter2_reg <= tmp_1_2_reg_1425;
                tmp_1_2_reg_1425_pp0_iter3_reg <= tmp_1_2_reg_1425_pp0_iter2_reg;
                tmp_1_2_reg_1425_pp0_iter4_reg <= tmp_1_2_reg_1425_pp0_iter3_reg;
                tmp_1_2_reg_1425_pp0_iter5_reg <= tmp_1_2_reg_1425_pp0_iter4_reg;
                tmp_1_2_reg_1425_pp0_iter6_reg <= tmp_1_2_reg_1425_pp0_iter5_reg;
                tmp_1_2_reg_1425_pp0_iter7_reg <= tmp_1_2_reg_1425_pp0_iter6_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_2_1_reg_1455 <= grp_fu_494_p2;
                tmp_2_2_reg_1460 <= grp_fu_498_p2;
                tmp_2_reg_1450 <= grp_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_2_1_reg_1455_pp0_iter2_reg <= tmp_2_1_reg_1455;
                tmp_2_1_reg_1455_pp0_iter3_reg <= tmp_2_1_reg_1455_pp0_iter2_reg;
                tmp_2_1_reg_1455_pp0_iter4_reg <= tmp_2_1_reg_1455_pp0_iter3_reg;
                tmp_2_1_reg_1455_pp0_iter5_reg <= tmp_2_1_reg_1455_pp0_iter4_reg;
                tmp_2_1_reg_1455_pp0_iter6_reg <= tmp_2_1_reg_1455_pp0_iter5_reg;
                tmp_2_1_reg_1455_pp0_iter7_reg <= tmp_2_1_reg_1455_pp0_iter6_reg;
                tmp_2_1_reg_1455_pp0_iter8_reg <= tmp_2_1_reg_1455_pp0_iter7_reg;
                tmp_2_1_reg_1455_pp0_iter9_reg <= tmp_2_1_reg_1455_pp0_iter8_reg;
                tmp_2_2_reg_1460_pp0_iter10_reg <= tmp_2_2_reg_1460_pp0_iter9_reg;
                tmp_2_2_reg_1460_pp0_iter11_reg <= tmp_2_2_reg_1460_pp0_iter10_reg;
                tmp_2_2_reg_1460_pp0_iter2_reg <= tmp_2_2_reg_1460;
                tmp_2_2_reg_1460_pp0_iter3_reg <= tmp_2_2_reg_1460_pp0_iter2_reg;
                tmp_2_2_reg_1460_pp0_iter4_reg <= tmp_2_2_reg_1460_pp0_iter3_reg;
                tmp_2_2_reg_1460_pp0_iter5_reg <= tmp_2_2_reg_1460_pp0_iter4_reg;
                tmp_2_2_reg_1460_pp0_iter6_reg <= tmp_2_2_reg_1460_pp0_iter5_reg;
                tmp_2_2_reg_1460_pp0_iter7_reg <= tmp_2_2_reg_1460_pp0_iter6_reg;
                tmp_2_2_reg_1460_pp0_iter8_reg <= tmp_2_2_reg_1460_pp0_iter7_reg;
                tmp_2_2_reg_1460_pp0_iter9_reg <= tmp_2_2_reg_1460_pp0_iter8_reg;
                tmp_2_reg_1450_pp0_iter2_reg <= tmp_2_reg_1450;
                tmp_2_reg_1450_pp0_iter3_reg <= tmp_2_reg_1450_pp0_iter2_reg;
                tmp_2_reg_1450_pp0_iter4_reg <= tmp_2_reg_1450_pp0_iter3_reg;
                tmp_2_reg_1450_pp0_iter5_reg <= tmp_2_reg_1450_pp0_iter4_reg;
                tmp_2_reg_1450_pp0_iter6_reg <= tmp_2_reg_1450_pp0_iter5_reg;
                tmp_2_reg_1450_pp0_iter7_reg <= tmp_2_reg_1450_pp0_iter6_reg;
                tmp_2_reg_1450_pp0_iter8_reg <= tmp_2_reg_1450_pp0_iter7_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                w_sum_4_0_1_reg_1470 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102_pp0_iter4_reg = ap_const_lv1_0))) then
                w_sum_4_0_2_reg_1475 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter7 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102_pp0_iter7_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                w_sum_4_1_1_reg_1485 <= grp_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102_pp0_iter8_reg = ap_const_lv1_0))) then
                w_sum_4_1_2_reg_1490 <= grp_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1102_pp0_iter6_reg = ap_const_lv1_0))) then
                w_sum_4_1_reg_1480 <= grp_fu_477_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102_pp0_iter11_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                w_sum_4_2_1_reg_1500 <= grp_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln8_reg_1102_pp0_iter12_reg = ap_const_lv1_0))) then
                w_sum_4_2_2_reg_1505 <= grp_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1102_pp0_iter10_reg = ap_const_lv1_0))) then
                w_sum_4_2_reg_1495 <= grp_fu_481_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1102_pp0_iter2_reg = ap_const_lv1_0))) then
                w_sum_4_reg_1465 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_1102_pp0_iter14_reg = ap_const_lv1_0))) then
                w_sum_reg_1520 <= grp_fu_485_p2;
            end if;
        end if;
    end process;
    zext_ln23_reg_1170(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter2_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter3_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter4_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter5_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter6_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter7_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter8_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter9_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter10_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter11_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln23_reg_1170_pp0_iter12_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    sub_ln23_reg_1213(1 downto 0) <= "00";
    sub_ln23_1_reg_1218(1 downto 0) <= "00";
    zext_ln30_1_reg_1223(9 downto 5) <= "00000";
    zext_ln30_3_reg_1249(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, icmp_ln8_fu_592_p2, ap_enable_reg_pp0_iter13, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone, ap_enable_reg_pp0_iter14, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_592_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_592_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln11_fu_786_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_443_p4));
    add_ln23_10_fu_941_p2 <= std_logic_vector(unsigned(sub_ln23_2_fu_924_p2) + unsigned(zext_ln30_3_reg_1249));
    add_ln23_11_fu_762_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(select_ln30_fu_610_p3));
    add_ln23_12_fu_949_p2 <= std_logic_vector(unsigned(sub_ln23_reg_1213) + unsigned(zext_ln30_4_fu_946_p1));
    add_ln23_13_fu_960_p2 <= std_logic_vector(unsigned(sub_ln23_1_reg_1218) + unsigned(zext_ln30_4_fu_946_p1));
    add_ln23_14_fu_971_p2 <= std_logic_vector(unsigned(sub_ln23_2_fu_924_p2) + unsigned(zext_ln30_4_fu_946_p1));
    add_ln23_1_fu_586_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_454_p4) + unsigned(ap_const_lv5_2));
    add_ln23_3_fu_720_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln30_fu_610_p3));
    add_ln23_4_fu_851_p2 <= std_logic_vector(unsigned(sub_ln23_fu_814_p2) + unsigned(zext_ln30_1_fu_848_p1));
    add_ln23_5_fu_863_p2 <= std_logic_vector(unsigned(sub_ln23_1_fu_842_p2) + unsigned(zext_ln30_1_fu_848_p1));
    add_ln23_6_fu_930_p2 <= std_logic_vector(unsigned(sub_ln23_2_fu_924_p2) + unsigned(zext_ln30_1_reg_1223));
    add_ln23_7_fu_748_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln30_fu_610_p3));
    add_ln23_8_fu_878_p2 <= std_logic_vector(unsigned(sub_ln23_fu_814_p2) + unsigned(zext_ln30_3_fu_875_p1));
    add_ln23_9_fu_890_p2 <= std_logic_vector(unsigned(sub_ln23_1_fu_842_p2) + unsigned(zext_ln30_3_fu_875_p1));
    add_ln23_fu_638_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(ap_phi_mux_r_0_phi_fu_432_p4));
    add_ln30_2_fu_1035_p2 <= std_logic_vector(unsigned(sub_ln30_fu_1026_p2) + unsigned(zext_ln30_5_fu_1032_p1));
    add_ln30_fu_670_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_432_p4) + unsigned(select_ln30_4_fu_662_p3));
    add_ln8_fu_598_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten39_phi_fu_421_p4) + unsigned(ap_const_lv12_1));
    and_ln29_fu_1081_p2 <= (or_ln29_fu_1075_p2 and grp_fu_505_p2);
    and_ln30_fu_714_p2 <= (xor_ln30_fu_702_p2 and icmp_ln14_fu_708_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state47 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage1_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage2_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage1_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage2_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage1_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage2_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage1_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage2_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage1_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage2_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage1_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage2_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage1_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage2_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage1_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage2_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state45_pp0_stage1_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state46_pp0_stage2_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_592_p2)
    begin
        if ((icmp_ln8_fu_592_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state47)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_454_p4_assign_proc : process(c_0_reg_450, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln30_8_reg_1154, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_454_p4 <= select_ln30_8_reg_1154;
        else 
            ap_phi_mux_c_0_phi_fu_454_p4 <= c_0_reg_450;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_465_p4_assign_proc : process(f_0_reg_461, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, f_reg_1349, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_465_p4 <= f_reg_1349;
        else 
            ap_phi_mux_f_0_phi_fu_465_p4 <= f_0_reg_461;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten39_phi_fu_421_p4_assign_proc : process(indvar_flatten39_reg_417, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln8_reg_1106, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten39_phi_fu_421_p4 <= add_ln8_reg_1106;
        else 
            ap_phi_mux_indvar_flatten39_phi_fu_421_p4 <= indvar_flatten39_reg_417;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_443_p4_assign_proc : process(indvar_flatten_reg_439, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln11_reg_1354, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_443_p4 <= select_ln11_reg_1354;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_443_p4 <= indvar_flatten_reg_439;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_432_p4_assign_proc : process(r_0_reg_428, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln30_1_reg_1116, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_432_p4 <= select_ln30_1_reg_1116;
        else 
            ap_phi_mux_r_0_phi_fu_432_p4 <= r_0_reg_428;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_fu_1046_p1 <= w_sum_reg_1520;
    c_fu_580_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_454_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln23_reg_1170_pp0_iter12_reg(3 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter13)
    begin
        if (((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_address0 <= zext_ln23_fu_776_p1(3 - 1 downto 0);

    conv_1_weights_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_1_address0 <= zext_ln23_fu_776_p1(3 - 1 downto 0);

    conv_1_weights_0_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_2_address0 <= zext_ln23_fu_776_p1(3 - 1 downto 0);

    conv_1_weights_0_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_0_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_address0 <= zext_ln23_fu_776_p1(3 - 1 downto 0);

    conv_1_weights_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_1_address0 <= zext_ln23_fu_776_p1(3 - 1 downto 0);

    conv_1_weights_1_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_2_address0 <= zext_ln23_fu_776_p1(3 - 1 downto 0);

    conv_1_weights_1_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_1_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_address0 <= zext_ln23_reg_1170(3 - 1 downto 0);

    conv_1_weights_2_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_1_address0 <= zext_ln23_reg_1170(3 - 1 downto 0);

    conv_1_weights_2_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_1_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_2_address0 <= zext_ln23_reg_1170(3 - 1 downto 0);

    conv_1_weights_2_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_2_2_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= zext_ln30_6_fu_1041_p1(12 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_1520 when (and_ln29_fu_1081_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, icmp_ln8_reg_1102_pp0_iter14_reg, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_984_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln30_7_reg_1148));
    grp_fu_1095_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_1095_p1 <= grp_fu_1095_p10(5 - 1 downto 0);
    grp_fu_1095_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_1_reg_1116),10));
    grp_fu_1095_p2 <= zext_ln30_1_reg_1223(5 - 1 downto 0);

    grp_fu_472_p0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp_8_reg_1385, w_sum_4_reg_1465, ap_enable_reg_pp0_iter2, w_sum_4_0_1_reg_1470, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_472_p0 <= w_sum_4_0_1_reg_1470;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_472_p0 <= w_sum_4_reg_1465;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_472_p0 <= tmp_8_reg_1385;
        else 
            grp_fu_472_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_472_p1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, tmp_0_1_reg_1390_pp0_iter2_reg, tmp_0_2_reg_1415_pp0_iter3_reg, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_472_p1 <= tmp_0_2_reg_1415_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_472_p1 <= tmp_0_1_reg_1390_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_472_p1 <= ap_const_lv32_0;
        else 
            grp_fu_472_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_477_p0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, w_sum_4_0_2_reg_1475, ap_enable_reg_pp0_iter5, w_sum_4_1_reg_1480, ap_enable_reg_pp0_iter6, w_sum_4_1_1_reg_1485, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_477_p0 <= w_sum_4_1_1_reg_1485;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_477_p0 <= w_sum_4_1_reg_1480;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_477_p0 <= w_sum_4_0_2_reg_1475;
        else 
            grp_fu_477_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_477_p1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_1_reg_1395_pp0_iter5_reg, tmp_1_1_reg_1420_pp0_iter6_reg, tmp_1_2_reg_1425_pp0_iter7_reg, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter8, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_477_p1 <= tmp_1_2_reg_1425_pp0_iter7_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter6 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_477_p1 <= tmp_1_1_reg_1420_pp0_iter6_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_477_p1 <= tmp_1_reg_1395_pp0_iter5_reg;
        else 
            grp_fu_477_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_481_p0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, w_sum_4_1_2_reg_1490, ap_enable_reg_pp0_iter9, w_sum_4_2_reg_1495, ap_enable_reg_pp0_iter10, w_sum_4_2_1_reg_1500, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_481_p0 <= w_sum_4_2_1_reg_1500;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_481_p0 <= w_sum_4_2_reg_1495;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_481_p0 <= w_sum_4_1_2_reg_1490;
        else 
            grp_fu_481_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_481_p1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, tmp_2_reg_1450_pp0_iter8_reg, tmp_2_1_reg_1455_pp0_iter9_reg, tmp_2_2_reg_1460_pp0_iter11_reg, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter12, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_481_p1 <= tmp_2_2_reg_1460_pp0_iter11_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_481_p1 <= tmp_2_1_reg_1455_pp0_iter9_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_481_p1 <= tmp_2_reg_1450_pp0_iter8_reg;
        else 
            grp_fu_481_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_490_p0_assign_proc : process(conv_1_weights_2_0_q0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, conv_1_weights_0_0_l_reg_1274, conv_1_weights_0_2_l_reg_1284, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_490_p0 <= conv_1_weights_2_0_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_490_p0 <= conv_1_weights_0_2_l_reg_1284;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_490_p0 <= conv_1_weights_0_0_l_reg_1274;
        else 
            grp_fu_490_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_490_p1_assign_proc : process(grp_fu_511_p3, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, reg_543, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_490_p1 <= reg_543;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_490_p1 <= grp_fu_511_p3;
        else 
            grp_fu_490_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_494_p0_assign_proc : process(conv_1_weights_2_1_q0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, conv_1_weights_0_1_l_reg_1279, conv_1_weights_1_1_l_reg_1294, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_494_p0 <= conv_1_weights_2_1_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_494_p0 <= conv_1_weights_1_1_l_reg_1294;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_494_p0 <= conv_1_weights_0_1_l_reg_1279;
        else 
            grp_fu_494_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_494_p1_assign_proc : process(grp_fu_511_p3, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, grp_fu_520_p3, select_ln23_4_reg_1344, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_494_p1 <= grp_fu_511_p3;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_494_p1 <= select_ln23_4_reg_1344;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_494_p1 <= grp_fu_520_p3;
        else 
            grp_fu_494_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_498_p0_assign_proc : process(conv_1_weights_2_2_q0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, conv_1_weights_1_0_l_reg_1289, conv_1_weights_1_2_l_reg_1299, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_498_p0 <= conv_1_weights_2_2_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_498_p0 <= conv_1_weights_1_2_l_reg_1299;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_498_p0 <= conv_1_weights_1_0_l_reg_1289;
        else 
            grp_fu_498_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_498_p1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, grp_fu_520_p3, grp_fu_529_p3, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_498_p1 <= grp_fu_520_p3;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_498_p1 <= grp_fu_529_p3;
        else 
            grp_fu_498_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_511_p0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln30_reg_1122, trunc_ln30_reg_1122_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_511_p0 <= trunc_ln30_reg_1122_pp0_iter1_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_511_p0 <= trunc_ln30_reg_1122;
        else 
            grp_fu_511_p0 <= "X";
        end if; 
    end process;

    grp_fu_511_p3 <= 
        input_1_q0 when (grp_fu_511_p0(0) = '1') else 
        input_0_q0;

    grp_fu_520_p0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln30_reg_1122, trunc_ln30_reg_1122_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_520_p0 <= trunc_ln30_reg_1122_pp0_iter1_reg;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            grp_fu_520_p0 <= trunc_ln30_reg_1122;
        else 
            grp_fu_520_p0 <= "X";
        end if; 
    end process;

    grp_fu_520_p3 <= 
        input_1_q1 when (grp_fu_520_p0(0) = '1') else 
        input_0_q1;
    grp_fu_529_p3 <= 
        input_0_q0 when (trunc_ln30_reg_1122(0) = '1') else 
        input_1_q0;
    icmp_ln11_fu_604_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_443_p4 = ap_const_lv8_9C) else "0";
    icmp_ln14_fu_708_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_465_p4 = ap_const_lv3_6) else "0";
    icmp_ln29_7_fu_1069_p2 <= "1" when (trunc_ln29_fu_1059_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_1063_p2 <= "0" when (tmp_fu_1049_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_592_p2 <= "1" when (ap_phi_mux_indvar_flatten39_phi_fu_421_p4 = ap_const_lv12_FD8) else "0";

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln30_reg_1122, ap_block_pp0_stage0, zext_ln23_7_fu_857_p1, ap_block_pp0_stage1, zext_ln23_8_fu_869_p1, ap_block_pp0_stage2, zext_ln23_11_fu_954_p1, zext_ln23_12_fu_965_p1, sext_ln23_1_fu_998_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_address0 <= sext_ln23_1_fu_998_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_0_address0 <= zext_ln23_12_fu_965_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_0_address0 <= zext_ln23_11_fu_954_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_0_address0 <= zext_ln23_8_fu_869_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_0_address0 <= zext_ln23_7_fu_857_p1(9 - 1 downto 0);
        else 
            input_0_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln30_reg_1122, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln23_9_fu_884_p1, zext_ln23_10_fu_896_p1, sext_ln23_fu_935_p1, ap_block_pp0_stage2, zext_ln23_13_fu_1003_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_0_address1 <= zext_ln23_13_fu_1003_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_0_address1 <= sext_ln23_fu_935_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_0_address1 <= zext_ln23_10_fu_896_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_0_address1 <= zext_ln23_9_fu_884_p1(9 - 1 downto 0);
        else 
            input_0_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln30_reg_1122)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln30_reg_1122)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln30_reg_1122, ap_block_pp0_stage0, zext_ln23_7_fu_857_p1, ap_block_pp0_stage1, zext_ln23_8_fu_869_p1, ap_block_pp0_stage2, zext_ln23_11_fu_954_p1, zext_ln23_12_fu_965_p1, sext_ln23_1_fu_998_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_address0 <= sext_ln23_1_fu_998_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_1_address0 <= zext_ln23_12_fu_965_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_1_address0 <= zext_ln23_11_fu_954_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_1_address0 <= zext_ln23_8_fu_869_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_1_address0 <= zext_ln23_7_fu_857_p1(9 - 1 downto 0);
        else 
            input_1_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    input_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, trunc_ln30_reg_1122, ap_block_pp0_stage0, ap_block_pp0_stage1, zext_ln23_9_fu_884_p1, zext_ln23_10_fu_896_p1, sext_ln23_fu_935_p1, ap_block_pp0_stage2, zext_ln23_13_fu_1003_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_1_address1 <= zext_ln23_13_fu_1003_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            input_1_address1 <= sext_ln23_fu_935_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_1_address1 <= zext_ln23_10_fu_896_p1(9 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0))) then 
            input_1_address1 <= zext_ln23_9_fu_884_p1(9 - 1 downto 0);
        else 
            input_1_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln30_reg_1122)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_1_ce0 <= ap_const_logic_1;
        else 
            input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage2_11001, icmp_ln8_reg_1102, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, trunc_ln30_reg_1122)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)) or ((trunc_ln30_reg_1122 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (trunc_ln30_reg_1122 = ap_const_lv1_0) and (icmp_ln8_reg_1102 = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)))) then 
            input_1_ce1 <= ap_const_logic_1;
        else 
            input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    lshr_ln23_1_fu_570_p4 <= r_fu_564_p2(4 downto 1);
    lshr_ln23_1_mid1_fu_644_p4 <= add_ln23_fu_638_p2(4 downto 1);
    lshr_ln_fu_554_p4 <= ap_phi_mux_r_0_phi_fu_432_p4(4 downto 1);
    or_ln29_fu_1075_p2 <= (icmp_ln29_fu_1063_p2 or icmp_ln29_7_fu_1069_p2);
    or_ln30_fu_726_p2 <= (icmp_ln11_fu_604_p2 or and_ln30_fu_714_p2);
    p_shl_cast_fu_1008_p3 <= (add_ln30_1_reg_1359_pp0_iter14_reg & ap_const_lv3_0);
    r_fu_564_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_432_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_989_p3 <= 
        ap_const_lv8_1 when (icmp_ln11_reg_1111(0) = '1') else 
        add_ln11_reg_1208;
    select_ln23_4_fu_977_p3 <= 
        input_0_q1 when (trunc_ln30_reg_1122(0) = '1') else 
        input_1_q1;
    select_ln30_10_fu_768_p3 <= 
        add_ln23_11_fu_762_p2 when (and_ln30_fu_714_p2(0) = '1') else 
        select_ln30_6_fu_694_p3;
    select_ln30_1_fu_618_p3 <= 
        r_fu_564_p2 when (icmp_ln11_fu_604_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_432_p4;
    select_ln30_2_fu_630_p3 <= 
        lshr_ln23_1_fu_570_p4 when (icmp_ln11_fu_604_p2(0) = '1') else 
        lshr_ln_fu_554_p4;
    select_ln30_3_fu_654_p3 <= 
        lshr_ln23_1_mid1_fu_644_p4 when (icmp_ln11_fu_604_p2(0) = '1') else 
        lshr_ln23_1_fu_570_p4;
    select_ln30_4_fu_662_p3 <= 
        ap_const_lv5_3 when (icmp_ln11_fu_604_p2(0) = '1') else 
        ap_const_lv5_2;
    select_ln30_5_fu_686_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_604_p2(0) = '1') else 
        c_fu_580_p2;
    select_ln30_6_fu_694_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_604_p2(0) = '1') else 
        add_ln23_1_fu_586_p2;
    select_ln30_7_fu_732_p3 <= 
        ap_const_lv3_0 when (or_ln30_fu_726_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_465_p4;
    select_ln30_8_fu_740_p3 <= 
        add_ln23_3_fu_720_p2 when (and_ln30_fu_714_p2(0) = '1') else 
        select_ln30_fu_610_p3;
    select_ln30_9_fu_754_p3 <= 
        add_ln23_7_fu_748_p2 when (and_ln30_fu_714_p2(0) = '1') else 
        select_ln30_5_fu_686_p3;
    select_ln30_fu_610_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_604_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_454_p4;
        sext_ln23_1_fu_998_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_10_reg_1314),64));

        sext_ln23_fu_935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_6_fu_930_p2),64));

    sub_ln23_1_fu_842_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_827_p1) - unsigned(zext_ln23_4_fu_838_p1));
    sub_ln23_2_fu_924_p2 <= std_logic_vector(unsigned(zext_ln23_5_fu_909_p1) - unsigned(zext_ln23_6_fu_920_p1));
    sub_ln23_fu_814_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_799_p1) - unsigned(zext_ln23_2_fu_810_p1));
    sub_ln30_fu_1026_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1008_p3) - unsigned(zext_ln30_2_fu_1022_p1));
    tmp_10_fu_913_p3 <= (zext_ln23_5_mid2_v_reg_1142 & ap_const_lv2_0);
    tmp_11_fu_792_p3 <= (select_ln30_2_reg_1130 & ap_const_lv5_0);
    tmp_12_fu_803_p3 <= (select_ln30_2_reg_1130 & ap_const_lv2_0);
    tmp_13_fu_820_p3 <= (select_ln30_3_reg_1136 & ap_const_lv5_0);
    tmp_14_fu_831_p3 <= (select_ln30_3_reg_1136 & ap_const_lv2_0);
    tmp_15_fu_1015_p3 <= (add_ln30_1_reg_1359_pp0_iter14_reg & ap_const_lv1_0);
    tmp_9_fu_902_p3 <= (zext_ln23_5_mid2_v_reg_1142 & ap_const_lv5_0);
    tmp_fu_1049_p4 <= bitcast_ln29_fu_1046_p1(30 downto 23);
    trunc_ln29_fu_1059_p1 <= bitcast_ln29_fu_1046_p1(23 - 1 downto 0);
    trunc_ln30_fu_626_p1 <= select_ln30_1_fu_618_p3(1 - 1 downto 0);
    xor_ln30_fu_702_p2 <= (icmp_ln11_fu_604_p2 xor ap_const_lv1_1);
    zext_ln23_10_fu_896_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_9_fu_890_p2),64));
    zext_ln23_11_fu_954_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_12_fu_949_p2),64));
    zext_ln23_12_fu_965_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_13_fu_960_p2),64));
    zext_ln23_13_fu_1003_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_14_reg_1329),64));
    zext_ln23_1_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_792_p3),10));
    zext_ln23_2_fu_810_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_803_p3),10));
    zext_ln23_3_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_820_p3),10));
    zext_ln23_4_fu_838_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_831_p3),10));
    zext_ln23_5_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_902_p3),10));
    zext_ln23_6_fu_920_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_913_p3),10));
    zext_ln23_7_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_4_fu_851_p2),64));
    zext_ln23_8_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_5_fu_863_p2),64));
    zext_ln23_9_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_8_fu_878_p2),64));
    zext_ln23_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_7_fu_732_p3),64));
    zext_ln30_1_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_8_reg_1154),10));
    zext_ln30_2_fu_1022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_1015_p3),13));
    zext_ln30_3_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_9_reg_1160),10));
    zext_ln30_4_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_10_reg_1165),10));
    zext_ln30_5_fu_1032_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_7_reg_1148_pp0_iter14_reg),13));
    zext_ln30_6_fu_1041_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_fu_1035_p2),64));
end behav;
