// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_2_out_address0,
        dense_2_out_ce0,
        dense_2_out_we0,
        dense_2_out_d0,
        dense_1_out_address0,
        dense_1_out_ce0,
        dense_1_out_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_pp0_stage0 = 5'd2;
parameter    ap_ST_fsm_pp0_stage1 = 5'd4;
parameter    ap_ST_fsm_pp0_stage2 = 5'd8;
parameter    ap_ST_fsm_state14 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] dense_2_out_address0;
output   dense_2_out_ce0;
output   dense_2_out_we0;
output  [31:0] dense_2_out_d0;
output  [5:0] dense_1_out_address0;
output   dense_1_out_ce0;
input  [31:0] dense_1_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dense_2_out_ce0;
reg dense_2_out_we0;
reg dense_1_out_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [4:0] dense_2_bias_address0;
reg    dense_2_bias_ce0;
wire   [31:0] dense_2_bias_q0;
wire   [10:0] dense_2_weights_address0;
reg    dense_2_weights_ce0;
wire   [31:0] dense_2_weights_q0;
reg   [10:0] indvar_flatten_reg_120;
reg   [4:0] i_0_reg_131;
reg   [31:0] sum_0_reg_142;
reg   [5:0] j_0_reg_154;
wire   [0:0] icmp_ln9_fu_182_p2;
reg   [0:0] icmp_ln9_reg_343;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln9_reg_343_pp0_iter1_reg;
wire   [10:0] add_ln9_fu_188_p2;
reg   [10:0] add_ln9_reg_347;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_200_p2;
reg   [0:0] icmp_ln13_reg_352;
wire   [5:0] select_ln14_1_fu_206_p3;
reg   [5:0] select_ln14_1_reg_357;
wire   [4:0] select_ln14_2_fu_214_p3;
reg   [4:0] select_ln14_2_reg_362;
reg   [4:0] select_ln14_2_reg_362_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_170_p2;
reg   [31:0] tmp_7_reg_388;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_state13_pp0_stage2_iter3;
wire    ap_block_pp0_stage2_11001;
wire   [5:0] j_fu_272_p2;
reg   [5:0] j_reg_393;
wire   [31:0] select_ln14_fu_277_p3;
wire   [0:0] icmp_ln13_1_fu_285_p2;
reg   [0:0] icmp_ln13_1_reg_404;
reg   [0:0] icmp_ln13_1_reg_404_pp0_iter2_reg;
reg   [0:0] icmp_ln13_1_reg_404_pp0_iter3_reg;
wire   [63:0] zext_ln14_fu_290_p1;
reg   [63:0] zext_ln14_reg_408;
reg   [63:0] zext_ln14_reg_408_pp0_iter3_reg;
wire   [31:0] grp_fu_165_p2;
reg   [31:0] sum_reg_413;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] tmp_reg_429;
reg    ap_enable_reg_pp0_iter3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten_phi_fu_124_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_i_0_phi_fu_135_p4;
reg   [31:0] ap_phi_mux_sum_0_phi_fu_146_p4;
reg   [5:0] ap_phi_mux_j_0_phi_fu_158_p4;
wire  signed [63:0] sext_ln14_fu_267_p1;
wire   [63:0] zext_ln14_4_fu_226_p1;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_165_p0;
reg   [31:0] grp_fu_165_p1;
wire    ap_block_pp0_stage1;
wire   [4:0] i_fu_194_p2;
wire   [10:0] tmp_3_fu_231_p3;
wire   [6:0] tmp_4_fu_243_p3;
wire   [11:0] zext_ln14_6_fu_239_p1;
wire   [11:0] zext_ln14_7_fu_251_p1;
wire   [11:0] sub_ln14_fu_255_p2;
wire   [11:0] zext_ln13_fu_222_p1;
wire   [11:0] add_ln14_fu_261_p2;
wire   [31:0] bitcast_ln19_fu_294_p1;
wire   [7:0] tmp_s_fu_297_p4;
wire   [22:0] trunc_ln19_fu_307_p1;
wire   [0:0] icmp_ln19_1_fu_317_p2;
wire   [0:0] icmp_ln19_fu_311_p2;
wire   [0:0] or_ln19_fu_323_p2;
wire   [0:0] grp_fu_176_p2;
wire   [0:0] and_ln19_fu_329_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state14;
reg   [4:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

dense_2_dense_2_bibs #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
dense_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_bias_address0),
    .ce0(dense_2_bias_ce0),
    .q0(dense_2_bias_q0)
);

dense_2_dense_2_wjbC #(
    .DataWidth( 32 ),
    .AddressRange( 1500 ),
    .AddressWidth( 11 ))
dense_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_weights_address0),
    .ce0(dense_2_weights_ce0),
    .q0(dense_2_weights_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U33(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_165_p0),
    .din1(grp_fu_165_p1),
    .ce(1'b1),
    .dout(grp_fu_165_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_1_out_q0),
    .din1(dense_2_weights_q0),
    .ce(1'b1),
    .dout(grp_fu_170_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_165_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_176_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        i_0_reg_131 <= select_ln14_2_reg_362;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_131 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_120 <= add_ln9_reg_347;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_120 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        j_0_reg_154 <= j_reg_393;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_0_reg_154 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_343_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_0_reg_142 <= grp_fu_165_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum_0_reg_142 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln9_reg_347 <= add_ln9_fu_188_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_1_reg_404 <= icmp_ln13_1_fu_285_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_1_reg_404_pp0_iter2_reg <= icmp_ln13_1_reg_404;
        icmp_ln13_1_reg_404_pp0_iter3_reg <= icmp_ln13_1_reg_404_pp0_iter2_reg;
        icmp_ln9_reg_343 <= icmp_ln9_fu_182_p2;
        icmp_ln9_reg_343_pp0_iter1_reg <= icmp_ln9_reg_343;
        select_ln14_2_reg_362_pp0_iter1_reg <= select_ln14_2_reg_362;
        zext_ln14_reg_408_pp0_iter3_reg[4 : 0] <= zext_ln14_reg_408[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_182_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln13_reg_352 <= icmp_ln13_fu_200_p2;
        select_ln14_1_reg_357 <= select_ln14_1_fu_206_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_343 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        j_reg_393 <= j_fu_272_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_182_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln14_2_reg_362 <= select_ln14_2_fu_214_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_343_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sum_reg_413 <= grp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_343 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_7_reg_388 <= grp_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln13_1_reg_404_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        tmp_reg_429 <= grp_fu_165_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_343_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln14_reg_408[4 : 0] <= zext_ln14_fu_290_p1[4 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_182_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_343 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_135_p4 = select_ln14_2_reg_362;
    end else begin
        ap_phi_mux_i_0_phi_fu_135_p4 = i_0_reg_131;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_343 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_124_p4 = add_ln9_reg_347;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_124_p4 = indvar_flatten_reg_120;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_343 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_j_0_phi_fu_158_p4 = j_reg_393;
    end else begin
        ap_phi_mux_j_0_phi_fu_158_p4 = j_0_reg_154;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_343_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_phi_mux_sum_0_phi_fu_146_p4 = grp_fu_165_p2;
    end else begin
        ap_phi_mux_sum_0_phi_fu_146_p4 = sum_0_reg_142;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_1_out_ce0 = 1'b1;
    end else begin
        dense_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        dense_2_bias_ce0 = 1'b1;
    end else begin
        dense_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dense_2_out_ce0 = 1'b1;
    end else begin
        dense_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln13_1_reg_404_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        dense_2_out_we0 = 1'b1;
    end else begin
        dense_2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_2_weights_ce0 = 1'b1;
    end else begin
        dense_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_165_p0 = sum_reg_413;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_165_p0 = select_ln14_fu_277_p3;
    end else begin
        grp_fu_165_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_165_p1 = dense_2_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_165_p1 = tmp_7_reg_388;
    end else begin
        grp_fu_165_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln9_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln9_fu_182_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_261_p2 = (sub_ln14_fu_255_p2 + zext_ln13_fu_222_p1);

assign add_ln9_fu_188_p2 = (ap_phi_mux_indvar_flatten_phi_fu_124_p4 + 11'd1);

assign and_ln19_fu_329_p2 = (or_ln19_fu_323_p2 & grp_fu_176_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd4];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln19_fu_294_p1 = tmp_reg_429;

assign dense_1_out_address0 = zext_ln14_4_fu_226_p1;

assign dense_2_bias_address0 = zext_ln14_fu_290_p1;

assign dense_2_out_address0 = zext_ln14_reg_408_pp0_iter3_reg;

assign dense_2_out_d0 = ((and_ln19_fu_329_p2[0:0] === 1'b1) ? 32'd0 : tmp_reg_429);

assign dense_2_weights_address0 = sext_ln14_fu_267_p1;

assign i_fu_194_p2 = (ap_phi_mux_i_0_phi_fu_135_p4 + 5'd1);

assign icmp_ln13_1_fu_285_p2 = ((j_reg_393 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_200_p2 = ((ap_phi_mux_j_0_phi_fu_158_p4 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_317_p2 = ((trunc_ln19_fu_307_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_311_p2 = ((tmp_s_fu_297_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_182_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_124_p4 == 11'd1500) ? 1'b1 : 1'b0);

assign j_fu_272_p2 = (select_ln14_1_reg_357 + 6'd1);

assign or_ln19_fu_323_p2 = (icmp_ln19_fu_311_p2 | icmp_ln19_1_fu_317_p2);

assign select_ln14_1_fu_206_p3 = ((icmp_ln13_fu_200_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_j_0_phi_fu_158_p4);

assign select_ln14_2_fu_214_p3 = ((icmp_ln13_fu_200_p2[0:0] === 1'b1) ? i_fu_194_p2 : ap_phi_mux_i_0_phi_fu_135_p4);

assign select_ln14_fu_277_p3 = ((icmp_ln13_reg_352[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_sum_0_phi_fu_146_p4);

assign sext_ln14_fu_267_p1 = $signed(add_ln14_fu_261_p2);

assign sub_ln14_fu_255_p2 = (zext_ln14_6_fu_239_p1 - zext_ln14_7_fu_251_p1);

assign tmp_3_fu_231_p3 = {{select_ln14_1_fu_206_p3}, {5'd0}};

assign tmp_4_fu_243_p3 = {{select_ln14_1_fu_206_p3}, {1'd0}};

assign tmp_s_fu_297_p4 = {{bitcast_ln19_fu_294_p1[30:23]}};

assign trunc_ln19_fu_307_p1 = bitcast_ln19_fu_294_p1[22:0];

assign zext_ln13_fu_222_p1 = select_ln14_2_fu_214_p3;

assign zext_ln14_4_fu_226_p1 = select_ln14_1_fu_206_p3;

assign zext_ln14_6_fu_239_p1 = tmp_3_fu_231_p3;

assign zext_ln14_7_fu_251_p1 = tmp_4_fu_243_p3;

assign zext_ln14_fu_290_p1 = select_ln14_2_reg_362_pp0_iter1_reg;

always @ (posedge ap_clk) begin
    zext_ln14_reg_408[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln14_reg_408_pp0_iter3_reg[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_2
