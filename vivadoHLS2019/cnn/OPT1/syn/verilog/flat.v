// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_we0,
        flat_array_d0,
        max_pool_2_out_address0,
        max_pool_2_out_ce0,
        max_pool_2_out_q0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
output   flat_array_we0;
output  [31:0] flat_array_d0;
output  [8:0] max_pool_2_out_address0;
output   max_pool_2_out_ce0;
input  [31:0] max_pool_2_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg flat_array_we0;
reg max_pool_2_out_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten17_reg_95;
reg   [2:0] r_0_reg_106;
reg   [8:0] i_0_reg_117;
reg   [7:0] indvar_flatten_reg_128;
reg   [8:0] i_1_reg_139;
reg   [2:0] c_0_reg_150;
reg   [8:0] i_2_reg_161;
reg   [4:0] f_0_reg_172;
wire   [0:0] icmp_ln6_fu_183_p2;
reg   [0:0] icmp_ln6_reg_406;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [8:0] add_ln6_fu_189_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln15_3_fu_237_p3;
reg   [2:0] select_ln15_3_reg_415;
wire   [8:0] select_ln6_fu_285_p3;
wire   [8:0] select_ln15_4_fu_305_p3;
reg   [8:0] select_ln15_4_reg_425;
wire   [2:0] select_ln15_6_fu_327_p3;
reg   [2:0] select_ln15_6_reg_430;
wire   [8:0] select_ln9_fu_353_p3;
wire   [8:0] add_ln15_1_fu_376_p2;
wire   [4:0] f_fu_382_p2;
wire   [7:0] select_ln9_1_fu_394_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg   [2:0] ap_phi_mux_r_0_phi_fu_110_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_c_0_phi_fu_154_p4;
wire   [63:0] zext_ln14_4_fu_371_p1;
wire   [63:0] zext_ln14_3_fu_402_p1;
wire   [0:0] icmp_ln9_fu_207_p2;
wire   [8:0] add_ln15_fu_201_p2;
wire   [2:0] r_fu_195_p2;
wire   [4:0] tmp_fu_249_p3;
wire   [5:0] zext_ln14_fu_245_p1;
wire   [5:0] zext_ln14_1_fu_257_p1;
wire   [0:0] icmp_ln12_fu_273_p2;
wire   [0:0] xor_ln15_fu_267_p2;
wire   [2:0] select_ln15_1_fu_221_p3;
wire   [8:0] select_ln15_fu_213_p3;
wire   [0:0] and_ln15_fu_279_p2;
wire   [8:0] add_ln15_2_fu_299_p2;
wire   [8:0] select_ln15_2_fu_229_p3;
wire   [0:0] or_ln15_fu_313_p2;
wire   [2:0] c_fu_293_p2;
wire   [5:0] add_ln14_fu_261_p2;
wire   [5:0] zext_ln15_fu_335_p1;
wire   [5:0] add_ln14_1_fu_339_p2;
wire   [4:0] select_ln15_5_fu_319_p3;
wire   [9:0] tmp_17_cast_fu_345_p3;
wire   [9:0] zext_ln14_2_fu_361_p1;
wire   [9:0] add_ln14_2_fu_365_p2;
wire   [7:0] add_ln9_fu_388_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_150 <= select_ln15_6_reg_430;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_150 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_172 <= f_fu_382_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_172 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_0_reg_117 <= select_ln6_fu_285_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_117 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_1_reg_139 <= select_ln9_fu_353_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_1_reg_139 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_161 <= add_ln15_1_fu_376_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_2_reg_161 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten17_reg_95 <= add_ln6_fu_189_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten17_reg_95 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_128 <= select_ln9_1_fu_394_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_128 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_106 <= select_ln15_3_reg_415;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_106 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln6_reg_406 <= icmp_ln6_fu_183_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln15_3_reg_415 <= select_ln15_3_fu_237_p3;
        select_ln15_6_reg_430 <= select_ln15_6_fu_327_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_fu_183_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln15_4_reg_425 <= select_ln15_4_fu_305_p3;
    end
end

always @ (*) begin
    if ((icmp_ln6_fu_183_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_154_p4 = select_ln15_6_reg_430;
    end else begin
        ap_phi_mux_c_0_phi_fu_154_p4 = c_0_reg_150;
    end
end

always @ (*) begin
    if (((icmp_ln6_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_110_p4 = select_ln15_3_reg_415;
    end else begin
        ap_phi_mux_r_0_phi_fu_110_p4 = r_0_reg_106;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln6_reg_406 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        flat_array_we0 = 1'b1;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_2_out_ce0 = 1'b1;
    end else begin
        max_pool_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln6_fu_183_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln6_fu_183_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_339_p2 = (add_ln14_fu_261_p2 + zext_ln15_fu_335_p1);

assign add_ln14_2_fu_365_p2 = (tmp_17_cast_fu_345_p3 + zext_ln14_2_fu_361_p1);

assign add_ln14_fu_261_p2 = (zext_ln14_fu_245_p1 + zext_ln14_1_fu_257_p1);

assign add_ln15_1_fu_376_p2 = (select_ln15_4_fu_305_p3 + 9'd1);

assign add_ln15_2_fu_299_p2 = (select_ln15_fu_213_p3 + 9'd16);

assign add_ln15_fu_201_p2 = (i_0_reg_117 + 9'd80);

assign add_ln6_fu_189_p2 = (indvar_flatten17_reg_95 + 9'd1);

assign add_ln9_fu_388_p2 = (indvar_flatten_reg_128 + 8'd1);

assign and_ln15_fu_279_p2 = (xor_ln15_fu_267_p2 & icmp_ln12_fu_273_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_293_p2 = (select_ln15_1_fu_221_p3 + 3'd1);

assign f_fu_382_p2 = (select_ln15_5_fu_319_p3 + 5'd1);

assign flat_array_address0 = zext_ln14_3_fu_402_p1;

assign flat_array_d0 = max_pool_2_out_q0;

assign icmp_ln12_fu_273_p2 = ((f_0_reg_172 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_183_p2 = ((indvar_flatten17_reg_95 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_207_p2 = ((indvar_flatten_reg_128 == 8'd80) ? 1'b1 : 1'b0);

assign max_pool_2_out_address0 = zext_ln14_4_fu_371_p1;

assign or_ln15_fu_313_p2 = (icmp_ln9_fu_207_p2 | and_ln15_fu_279_p2);

assign r_fu_195_p2 = (ap_phi_mux_r_0_phi_fu_110_p4 + 3'd1);

assign select_ln15_1_fu_221_p3 = ((icmp_ln9_fu_207_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_c_0_phi_fu_154_p4);

assign select_ln15_2_fu_229_p3 = ((icmp_ln9_fu_207_p2[0:0] === 1'b1) ? add_ln15_fu_201_p2 : i_2_reg_161);

assign select_ln15_3_fu_237_p3 = ((icmp_ln9_fu_207_p2[0:0] === 1'b1) ? r_fu_195_p2 : ap_phi_mux_r_0_phi_fu_110_p4);

assign select_ln15_4_fu_305_p3 = ((and_ln15_fu_279_p2[0:0] === 1'b1) ? add_ln15_2_fu_299_p2 : select_ln15_2_fu_229_p3);

assign select_ln15_5_fu_319_p3 = ((or_ln15_fu_313_p2[0:0] === 1'b1) ? 5'd0 : f_0_reg_172);

assign select_ln15_6_fu_327_p3 = ((and_ln15_fu_279_p2[0:0] === 1'b1) ? c_fu_293_p2 : select_ln15_1_fu_221_p3);

assign select_ln15_fu_213_p3 = ((icmp_ln9_fu_207_p2[0:0] === 1'b1) ? add_ln15_fu_201_p2 : i_1_reg_139);

assign select_ln6_fu_285_p3 = ((icmp_ln9_fu_207_p2[0:0] === 1'b1) ? add_ln15_fu_201_p2 : i_0_reg_117);

assign select_ln9_1_fu_394_p3 = ((icmp_ln9_fu_207_p2[0:0] === 1'b1) ? 8'd1 : add_ln9_fu_388_p2);

assign select_ln9_fu_353_p3 = ((and_ln15_fu_279_p2[0:0] === 1'b1) ? add_ln15_2_fu_299_p2 : select_ln15_fu_213_p3);

assign tmp_17_cast_fu_345_p3 = {{add_ln14_1_fu_339_p2}, {4'd0}};

assign tmp_fu_249_p3 = {{select_ln15_3_fu_237_p3}, {2'd0}};

assign xor_ln15_fu_267_p2 = (icmp_ln9_fu_207_p2 ^ 1'd1);

assign zext_ln14_1_fu_257_p1 = tmp_fu_249_p3;

assign zext_ln14_2_fu_361_p1 = select_ln15_5_fu_319_p3;

assign zext_ln14_3_fu_402_p1 = select_ln15_4_reg_425;

assign zext_ln14_4_fu_371_p1 = add_ln14_2_fu_365_p2;

assign zext_ln14_fu_245_p1 = select_ln15_3_fu_237_p3;

assign zext_ln15_fu_335_p1 = select_ln15_6_fu_327_p3;

endmodule //flat
