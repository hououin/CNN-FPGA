// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 27'd1;
parameter    ap_ST_fsm_state2 = 27'd2;
parameter    ap_ST_fsm_state3 = 27'd4;
parameter    ap_ST_fsm_state4 = 27'd8;
parameter    ap_ST_fsm_state5 = 27'd16;
parameter    ap_ST_fsm_state6 = 27'd32;
parameter    ap_ST_fsm_state7 = 27'd64;
parameter    ap_ST_fsm_state8 = 27'd128;
parameter    ap_ST_fsm_state9 = 27'd256;
parameter    ap_ST_fsm_state10 = 27'd512;
parameter    ap_ST_fsm_state11 = 27'd1024;
parameter    ap_ST_fsm_state12 = 27'd2048;
parameter    ap_ST_fsm_state13 = 27'd4096;
parameter    ap_ST_fsm_state14 = 27'd8192;
parameter    ap_ST_fsm_state15 = 27'd16384;
parameter    ap_ST_fsm_state16 = 27'd32768;
parameter    ap_ST_fsm_state17 = 27'd65536;
parameter    ap_ST_fsm_state18 = 27'd131072;
parameter    ap_ST_fsm_state19 = 27'd262144;
parameter    ap_ST_fsm_state20 = 27'd524288;
parameter    ap_ST_fsm_state21 = 27'd1048576;
parameter    ap_ST_fsm_state22 = 27'd2097152;
parameter    ap_ST_fsm_state23 = 27'd4194304;
parameter    ap_ST_fsm_state24 = 27'd8388608;
parameter    ap_ST_fsm_state25 = 27'd16777216;
parameter    ap_ST_fsm_state26 = 27'd33554432;
parameter    ap_ST_fsm_state27 = 27'd67108864;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [12:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [26:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] conv_2_weights_address0;
reg    conv_2_weights_ce0;
wire   [31:0] conv_2_weights_q0;
wire   [5:0] conv_2_bias_address0;
reg    conv_2_bias_ce0;
wire   [31:0] conv_2_bias_q0;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire   [31:0] grp_fu_227_p2;
reg   [31:0] reg_249;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state24;
wire   [6:0] add_ln9_fu_264_p2;
reg   [6:0] add_ln9_reg_582;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_276_p2;
reg   [3:0] r_reg_590;
wire   [3:0] c_fu_288_p2;
reg   [3:0] c_reg_598;
wire    ap_CS_fsm_state3;
wire   [13:0] zext_ln15_fu_312_p1;
reg   [13:0] zext_ln15_reg_603;
wire   [0:0] icmp_ln12_fu_282_p2;
wire   [6:0] f_fu_322_p2;
reg   [6:0] f_reg_611;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln27_fu_328_p1;
reg   [63:0] zext_ln27_reg_616;
wire   [0:0] icmp_ln15_fu_316_p2;
wire   [15:0] zext_ln36_1_fu_332_p1;
reg   [15:0] zext_ln36_1_reg_621;
reg   [12:0] conv_out_addr_reg_626;
wire   [1:0] wr_fu_360_p2;
reg   [1:0] wr_reg_634;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln27_fu_388_p1;
reg  signed [5:0] sext_ln27_reg_639;
wire   [0:0] icmp_ln19_fu_354_p2;
wire   [7:0] mul_ln27_fu_402_p2;
reg   [7:0] mul_ln27_reg_644;
wire   [1:0] wc_fu_418_p2;
reg   [1:0] wc_reg_657;
wire    ap_CS_fsm_state6;
wire   [9:0] tmp_9_fu_437_p3;
reg   [9:0] tmp_9_reg_662;
wire   [0:0] icmp_ln22_fu_412_p2;
wire   [13:0] zext_ln25_fu_468_p1;
reg   [13:0] zext_ln25_reg_667;
wire   [5:0] ch_fu_478_p2;
reg   [5:0] ch_reg_675;
wire    ap_CS_fsm_state7;
wire   [0:0] icmp_ln25_fu_472_p2;
reg   [31:0] conv_2_weights_load_reg_690;
wire    ap_CS_fsm_state8;
reg   [31:0] input_load_reg_695;
wire   [31:0] grp_fu_231_p2;
reg   [31:0] tmp_5_reg_700;
wire    ap_CS_fsm_state12;
reg   [31:0] conv_2_bias_load_reg_705;
wire    ap_CS_fsm_state19;
wire   [31:0] w_sum_3_fu_567_p3;
reg   [31:0] w_sum_3_reg_710;
wire    ap_CS_fsm_state26;
reg   [3:0] r_0_reg_147;
reg   [6:0] phi_mul_reg_159;
reg   [3:0] c_0_reg_171;
wire   [0:0] icmp_ln9_fu_270_p2;
reg   [6:0] f_0_reg_183;
wire    ap_CS_fsm_state27;
reg   [1:0] wr_0_reg_194;
reg   [1:0] wc_0_reg_205;
reg   [5:0] ch_0_reg_216;
wire    ap_CS_fsm_state18;
wire   [63:0] zext_ln36_3_fu_345_p1;
wire   [63:0] zext_ln27_8_fu_510_p1;
wire   [63:0] zext_ln27_9_fu_520_p1;
reg   [31:0] w_sum_2_fu_92;
wire    ap_CS_fsm_state25;
reg   [31:0] grp_fu_227_p1;
wire    ap_CS_fsm_state9;
wire   [6:0] zext_ln36_fu_294_p1;
wire   [6:0] add_ln36_fu_298_p2;
wire   [12:0] tmp_7_fu_304_p3;
wire   [13:0] zext_ln36_2_fu_336_p1;
wire   [13:0] add_ln36_1_fu_340_p2;
wire   [3:0] tmp_8_fu_370_p3;
wire   [4:0] zext_ln27_2_fu_378_p1;
wire   [4:0] zext_ln27_1_fu_366_p1;
wire   [4:0] sub_ln27_fu_382_p2;
wire   [3:0] zext_ln19_fu_350_p1;
wire   [3:0] add_ln27_fu_392_p2;
wire   [3:0] mul_ln27_fu_402_p0;
wire   [5:0] zext_ln27_4_fu_424_p1;
wire   [5:0] add_ln27_2_fu_428_p2;
wire   [4:0] trunc_ln27_fu_433_p1;
wire   [3:0] zext_ln22_fu_408_p1;
wire   [3:0] add_ln27_1_fu_445_p2;
wire   [7:0] zext_ln27_6_fu_451_p1;
wire   [7:0] add_ln27_3_fu_455_p2;
wire   [12:0] tmp_10_fu_460_p3;
wire   [9:0] zext_ln27_5_fu_484_p1;
wire   [9:0] add_ln27_4_fu_492_p2;
wire   [15:0] tmp_29_cast_fu_497_p3;
wire   [15:0] add_ln27_5_fu_505_p2;
wire   [13:0] zext_ln27_7_fu_488_p1;
wire   [13:0] add_ln27_6_fu_515_p2;
wire   [31:0] bitcast_ln35_fu_525_p1;
wire   [7:0] tmp_fu_529_p4;
wire   [22:0] trunc_ln35_fu_539_p1;
wire   [0:0] icmp_ln35_1_fu_549_p2;
wire   [0:0] icmp_ln35_fu_543_p2;
wire   [0:0] or_ln35_fu_555_p2;
wire   [0:0] grp_fu_235_p2;
wire   [0:0] and_ln35_fu_561_p2;
reg   [26:0] ap_NS_fsm;
wire   [7:0] mul_ln27_fu_402_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 27'd1;
end

conv_2_conv_2_weifYi #(
    .DataWidth( 32 ),
    .AddressRange( 18432 ),
    .AddressWidth( 15 ))
conv_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_weights_address0),
    .ce0(conv_2_weights_ce0),
    .q0(conv_2_weights_q0)
);

conv_2_conv_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
conv_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_bias_address0),
    .ce0(conv_2_bias_ce0),
    .q0(conv_2_bias_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(w_sum_2_fu_92),
    .din1(grp_fu_227_p1),
    .ce(1'b1),
    .dout(grp_fu_227_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_weights_load_reg_690),
    .din1(input_load_reg_695),
    .ce(1'b1),
    .dout(grp_fu_231_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_249),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_235_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_316_p2 == 1'd1))) begin
        c_0_reg_171 <= c_reg_598;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_270_p2 == 1'd0))) begin
        c_0_reg_171 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ch_0_reg_216 <= ch_reg_675;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_412_p2 == 1'd0))) begin
        ch_0_reg_216 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        f_0_reg_183 <= f_reg_611;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_282_p2 == 1'd0))) begin
        f_0_reg_183 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_282_p2 == 1'd1))) begin
        phi_mul_reg_159 <= add_ln9_reg_582;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        phi_mul_reg_159 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_282_p2 == 1'd1))) begin
        r_0_reg_147 <= r_reg_590;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_147 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state18))) begin
        w_sum_2_fu_92 <= reg_249;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        w_sum_2_fu_92 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln25_fu_472_p2 == 1'd1))) begin
        wc_0_reg_205 <= wc_reg_657;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_354_p2 == 1'd0))) begin
        wc_0_reg_205 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_412_p2 == 1'd1))) begin
        wr_0_reg_194 <= wr_reg_634;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_316_p2 == 1'd0))) begin
        wr_0_reg_194 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln9_reg_582 <= add_ln9_fu_264_p2;
        r_reg_590 <= r_fu_276_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_598 <= c_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ch_reg_675 <= ch_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        conv_2_bias_load_reg_705 <= conv_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_2_weights_load_reg_690 <= conv_2_weights_q0;
        input_load_reg_695 <= input_r_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_316_p2 == 1'd0))) begin
        conv_out_addr_reg_626 <= zext_ln36_3_fu_345_p1;
        zext_ln27_reg_616[6 : 0] <= zext_ln27_fu_328_p1[6 : 0];
        zext_ln36_1_reg_621[6 : 0] <= zext_ln36_1_fu_332_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_611 <= f_fu_322_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_354_p2 == 1'd0))) begin
        mul_ln27_reg_644 <= mul_ln27_fu_402_p2;
        sext_ln27_reg_639 <= sext_ln27_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_249 <= grp_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        tmp_5_reg_700 <= grp_fu_231_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_412_p2 == 1'd0))) begin
        tmp_9_reg_662[9 : 5] <= tmp_9_fu_437_p3[9 : 5];
        zext_ln25_reg_667[12 : 5] <= zext_ln25_fu_468_p1[12 : 5];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        w_sum_3_reg_710 <= w_sum_3_fu_567_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_657 <= wc_fu_418_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_634 <= wr_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_282_p2 == 1'd0))) begin
        zext_ln15_reg_603[12 : 6] <= zext_ln15_fu_312_p1[12 : 6];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_270_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_270_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_2_bias_ce0 = 1'b1;
    end else begin
        conv_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_2_weights_ce0 = 1'b1;
    end else begin
        conv_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_227_p1 = conv_2_bias_load_reg_705;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_227_p1 = tmp_5_reg_700;
    end else begin
        grp_fu_227_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_270_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln12_fu_282_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln15_fu_316_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln19_fu_354_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_412_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln25_fu_472_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln27_1_fu_445_p2 = (zext_ln22_fu_408_p1 + c_0_reg_171);

assign add_ln27_2_fu_428_p2 = ($signed(sext_ln27_reg_639) + $signed(zext_ln27_4_fu_424_p1));

assign add_ln27_3_fu_455_p2 = (mul_ln27_reg_644 + zext_ln27_6_fu_451_p1);

assign add_ln27_4_fu_492_p2 = (zext_ln27_5_fu_484_p1 + tmp_9_reg_662);

assign add_ln27_5_fu_505_p2 = (zext_ln36_1_reg_621 + tmp_29_cast_fu_497_p3);

assign add_ln27_6_fu_515_p2 = (zext_ln27_7_fu_488_p1 + zext_ln25_reg_667);

assign add_ln27_fu_392_p2 = (zext_ln19_fu_350_p1 + r_0_reg_147);

assign add_ln36_1_fu_340_p2 = (zext_ln15_reg_603 + zext_ln36_2_fu_336_p1);

assign add_ln36_fu_298_p2 = (phi_mul_reg_159 + zext_ln36_fu_294_p1);

assign add_ln9_fu_264_p2 = (phi_mul_reg_159 + 7'd11);

assign and_ln35_fu_561_p2 = (or_ln35_fu_555_p2 & grp_fu_235_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln35_fu_525_p1 = reg_249;

assign c_fu_288_p2 = (c_0_reg_171 + 4'd1);

assign ch_fu_478_p2 = (ch_0_reg_216 + 6'd1);

assign conv_2_bias_address0 = zext_ln27_reg_616;

assign conv_2_weights_address0 = zext_ln27_8_fu_510_p1;

assign conv_out_address0 = conv_out_addr_reg_626;

assign conv_out_d0 = w_sum_3_reg_710;

assign f_fu_322_p2 = (f_0_reg_183 + 7'd1);

assign icmp_ln12_fu_282_p2 = ((c_0_reg_171 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_316_p2 = ((f_0_reg_183 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_354_p2 = ((wr_0_reg_194 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_412_p2 = ((wc_0_reg_205 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_472_p2 = ((ch_0_reg_216 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln35_1_fu_549_p2 = ((trunc_ln35_fu_539_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_543_p2 = ((tmp_fu_529_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_270_p2 = ((r_0_reg_147 == 4'd11) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln27_9_fu_520_p1;

assign mul_ln27_fu_402_p0 = mul_ln27_fu_402_p00;

assign mul_ln27_fu_402_p00 = add_ln27_fu_392_p2;

assign mul_ln27_fu_402_p2 = (mul_ln27_fu_402_p0 * $signed('hD));

assign or_ln35_fu_555_p2 = (icmp_ln35_fu_543_p2 | icmp_ln35_1_fu_549_p2);

assign r_fu_276_p2 = (r_0_reg_147 + 4'd1);

assign sext_ln27_fu_388_p1 = $signed(sub_ln27_fu_382_p2);

assign sub_ln27_fu_382_p2 = (zext_ln27_2_fu_378_p1 - zext_ln27_1_fu_366_p1);

assign tmp_10_fu_460_p3 = {{add_ln27_3_fu_455_p2}, {5'd0}};

assign tmp_29_cast_fu_497_p3 = {{add_ln27_4_fu_492_p2}, {6'd0}};

assign tmp_7_fu_304_p3 = {{add_ln36_fu_298_p2}, {6'd0}};

assign tmp_8_fu_370_p3 = {{wr_0_reg_194}, {2'd0}};

assign tmp_9_fu_437_p3 = {{trunc_ln27_fu_433_p1}, {5'd0}};

assign tmp_fu_529_p4 = {{bitcast_ln35_fu_525_p1[30:23]}};

assign trunc_ln27_fu_433_p1 = add_ln27_2_fu_428_p2[4:0];

assign trunc_ln35_fu_539_p1 = bitcast_ln35_fu_525_p1[22:0];

assign w_sum_3_fu_567_p3 = ((and_ln35_fu_561_p2[0:0] === 1'b1) ? reg_249 : 32'd0);

assign wc_fu_418_p2 = (wc_0_reg_205 + 2'd1);

assign wr_fu_360_p2 = (wr_0_reg_194 + 2'd1);

assign zext_ln15_fu_312_p1 = tmp_7_fu_304_p3;

assign zext_ln19_fu_350_p1 = wr_0_reg_194;

assign zext_ln22_fu_408_p1 = wc_0_reg_205;

assign zext_ln25_fu_468_p1 = tmp_10_fu_460_p3;

assign zext_ln27_1_fu_366_p1 = wr_0_reg_194;

assign zext_ln27_2_fu_378_p1 = tmp_8_fu_370_p3;

assign zext_ln27_4_fu_424_p1 = wc_0_reg_205;

assign zext_ln27_5_fu_484_p1 = ch_0_reg_216;

assign zext_ln27_6_fu_451_p1 = add_ln27_1_fu_445_p2;

assign zext_ln27_7_fu_488_p1 = ch_0_reg_216;

assign zext_ln27_8_fu_510_p1 = add_ln27_5_fu_505_p2;

assign zext_ln27_9_fu_520_p1 = add_ln27_6_fu_515_p2;

assign zext_ln27_fu_328_p1 = f_0_reg_183;

assign zext_ln36_1_fu_332_p1 = f_0_reg_183;

assign zext_ln36_2_fu_336_p1 = f_0_reg_183;

assign zext_ln36_3_fu_345_p1 = add_ln36_1_fu_340_p2;

assign zext_ln36_fu_294_p1 = c_0_reg_171;

always @ (posedge ap_clk) begin
    zext_ln15_reg_603[5:0] <= 6'b000000;
    zext_ln15_reg_603[13] <= 1'b0;
    zext_ln27_reg_616[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln36_1_reg_621[15:7] <= 9'b000000000;
    tmp_9_reg_662[4:0] <= 5'b00000;
    zext_ln25_reg_667[4:0] <= 5'b00000;
    zext_ln25_reg_667[13] <= 1'b0;
end

endmodule //conv_2
