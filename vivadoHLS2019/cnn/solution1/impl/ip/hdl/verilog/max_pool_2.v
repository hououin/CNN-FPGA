// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_2_out_address0,
        conv_2_out_ce0,
        conv_2_out_q0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [12:0] conv_2_out_address0;
output   conv_2_out_ce0;
input  [31:0] conv_2_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg conv_2_out_ce0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [6:0] f_fu_178_p2;
reg   [6:0] f_reg_503;
wire    ap_CS_fsm_state2;
wire   [13:0] zext_ln12_fu_184_p1;
reg   [13:0] zext_ln12_reg_508;
wire   [0:0] icmp_ln9_fu_172_p2;
wire   [11:0] zext_ln12_1_fu_188_p1;
reg   [11:0] zext_ln12_1_reg_513;
wire   [2:0] r_fu_198_p2;
reg   [2:0] r_reg_521;
wire    ap_CS_fsm_state3;
wire   [3:0] shl_ln_fu_204_p3;
reg   [3:0] shl_ln_reg_526;
wire   [0:0] icmp_ln12_fu_192_p2;
wire   [5:0] add_ln39_fu_228_p2;
reg   [5:0] add_ln39_reg_531;
wire   [2:0] c_fu_240_p2;
reg   [2:0] c_reg_539;
wire    ap_CS_fsm_state4;
wire   [3:0] shl_ln1_fu_246_p3;
reg   [3:0] shl_ln1_reg_544;
wire   [0:0] icmp_ln15_fu_234_p2;
reg   [10:0] max_pool_out_addr_reg_549;
wire   [0:0] trunc_ln19_fu_281_p1;
reg   [0:0] trunc_ln19_reg_554;
wire    ap_CS_fsm_state5;
wire   [1:0] mpr_fu_295_p2;
reg   [1:0] mpr_reg_562;
wire   [7:0] mul_ln32_fu_310_p2;
reg   [7:0] mul_ln32_reg_567;
wire   [0:0] icmp_ln19_fu_289_p2;
wire   [0:0] icmp_ln37_fu_316_p2;
reg   [0:0] icmp_ln37_reg_572;
wire   [0:0] trunc_ln22_fu_326_p1;
reg   [0:0] trunc_ln22_reg_577;
wire    ap_CS_fsm_state6;
wire   [1:0] mpc_fu_336_p2;
reg   [1:0] mpc_reg_585;
wire   [0:0] icmp_ln22_fu_330_p2;
wire   [0:0] and_ln37_fu_380_p2;
reg   [0:0] and_ln37_reg_595;
wire   [31:0] select_ln24_fu_392_p3;
reg   [31:0] select_ln24_reg_599;
wire    ap_CS_fsm_state7;
reg   [31:0] max_reg_606;
wire   [31:0] max_2_fu_483_p3;
reg   [31:0] max_2_reg_613;
wire    ap_CS_fsm_state8;
reg   [6:0] f_0_reg_107;
reg   [2:0] r_0_reg_118;
reg   [2:0] c_0_reg_129;
reg   [1:0] mpr_0_reg_140;
reg   [1:0] mpc_0_reg_151;
wire    ap_CS_fsm_state9;
wire   [63:0] zext_ln39_3_fu_276_p1;
wire   [63:0] zext_ln32_2_fu_369_p1;
reg   [31:0] max_1_fu_78;
wire   [31:0] grp_fu_162_p1;
wire   [4:0] tmp_7_fu_216_p3;
wire   [5:0] zext_ln39_fu_212_p1;
wire   [5:0] zext_ln39_1_fu_224_p1;
wire   [5:0] zext_ln39_2_fu_254_p1;
wire   [5:0] add_ln39_1_fu_258_p2;
wire   [11:0] tmp_9_cast_fu_263_p3;
wire   [11:0] add_ln39_2_fu_271_p2;
wire   [3:0] zext_ln19_fu_285_p1;
wire   [3:0] i_fu_301_p2;
wire   [3:0] mul_ln32_fu_310_p0;
wire   [3:0] zext_ln22_fu_322_p1;
wire   [3:0] j_fu_342_p2;
wire   [7:0] zext_ln32_1_fu_347_p1;
wire   [7:0] add_ln32_fu_351_p2;
wire   [13:0] tmp_11_cast_fu_356_p3;
wire   [13:0] add_ln32_1_fu_364_p2;
wire   [0:0] icmp_ln37_1_fu_374_p2;
wire   [0:0] or_ln24_fu_388_p2;
wire   [31:0] bitcast_ln32_fu_401_p1;
wire   [31:0] bitcast_ln32_1_fu_418_p1;
wire   [7:0] tmp_fu_404_p4;
wire   [22:0] trunc_ln32_fu_414_p1;
wire   [0:0] icmp_ln32_1_fu_441_p2;
wire   [0:0] icmp_ln32_fu_435_p2;
wire   [7:0] tmp_5_fu_421_p4;
wire   [22:0] trunc_ln32_1_fu_431_p1;
wire   [0:0] icmp_ln32_3_fu_459_p2;
wire   [0:0] icmp_ln32_2_fu_453_p2;
wire   [0:0] or_ln32_fu_447_p2;
wire   [0:0] or_ln32_1_fu_465_p2;
wire   [0:0] and_ln32_fu_471_p2;
wire   [0:0] grp_fu_162_p2;
wire   [0:0] and_ln32_1_fu_477_p2;
reg   [8:0] ap_NS_fsm;
wire   [7:0] mul_ln32_fu_310_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_out_q0),
    .din1(grp_fu_162_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_162_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_129 <= c_reg_539;
    end else if (((icmp_ln12_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_129 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_107 <= f_reg_503;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_107 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_1_fu_78 <= max_2_reg_613;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        max_1_fu_78 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mpc_0_reg_151 <= mpc_reg_585;
    end else if (((icmp_ln19_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_151 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_330_p2 == 1'd1))) begin
        mpr_0_reg_140 <= mpr_reg_562;
    end else if (((icmp_ln15_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_140 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_118 <= r_reg_521;
    end else if (((icmp_ln9_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_118 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_192_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln39_reg_531 <= add_ln39_fu_228_p2;
        shl_ln_reg_526[3 : 1] <= shl_ln_fu_204_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_330_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        and_ln37_reg_595 <= and_ln37_fu_380_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_539 <= c_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_503 <= f_fu_178_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_289_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        icmp_ln37_reg_572 <= icmp_ln37_fu_316_p2;
        mul_ln32_reg_567 <= mul_ln32_fu_310_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_2_reg_613 <= max_2_fu_483_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_pool_out_addr_reg_549 <= zext_ln39_3_fu_276_p1;
        shl_ln1_reg_544[3 : 1] <= shl_ln1_fu_246_p3[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_reg_606 <= conv_2_out_q0;
        select_ln24_reg_599 <= select_ln24_fu_392_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_585 <= mpc_fu_336_p2;
        trunc_ln22_reg_577 <= trunc_ln22_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_562 <= mpr_fu_295_p2;
        trunc_ln19_reg_554 <= trunc_ln19_fu_281_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        r_reg_521 <= r_fu_198_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_172_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln12_1_reg_513[6 : 0] <= zext_ln12_1_fu_188_p1[6 : 0];
        zext_ln12_reg_508[6 : 0] <= zext_ln12_fu_184_p1[6 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_2_out_ce0 = 1'b1;
    end else begin
        conv_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == and_ln37_reg_595))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_172_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_192_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln15_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln19_fu_289_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_330_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln32_1_fu_364_p2 = (tmp_11_cast_fu_356_p3 + zext_ln12_reg_508);

assign add_ln32_fu_351_p2 = (mul_ln32_reg_567 + zext_ln32_1_fu_347_p1);

assign add_ln39_1_fu_258_p2 = (zext_ln39_2_fu_254_p1 + add_ln39_reg_531);

assign add_ln39_2_fu_271_p2 = (zext_ln12_1_reg_513 + tmp_9_cast_fu_263_p3);

assign add_ln39_fu_228_p2 = (zext_ln39_fu_212_p1 + zext_ln39_1_fu_224_p1);

assign and_ln32_1_fu_477_p2 = (grp_fu_162_p2 & and_ln32_fu_471_p2);

assign and_ln32_fu_471_p2 = (or_ln32_fu_447_p2 & or_ln32_1_fu_465_p2);

assign and_ln37_fu_380_p2 = (icmp_ln37_reg_572 & icmp_ln37_1_fu_374_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln32_1_fu_418_p1 = select_ln24_reg_599;

assign bitcast_ln32_fu_401_p1 = max_reg_606;

assign c_fu_240_p2 = (c_0_reg_129 + 3'd1);

assign conv_2_out_address0 = zext_ln32_2_fu_369_p1;

assign f_fu_178_p2 = (f_0_reg_107 + 7'd1);

assign grp_fu_162_p1 = ((or_ln24_fu_388_p2[0:0] === 1'b1) ? max_1_fu_78 : 32'd8388608);

assign i_fu_301_p2 = (zext_ln19_fu_285_p1 + shl_ln_reg_526);

assign icmp_ln12_fu_192_p2 = ((r_0_reg_118 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_234_p2 = ((c_0_reg_129 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_289_p2 = ((mpr_0_reg_140 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_330_p2 = ((mpc_0_reg_151 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln32_1_fu_441_p2 = ((trunc_ln32_fu_414_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_2_fu_453_p2 = ((tmp_5_fu_421_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln32_3_fu_459_p2 = ((trunc_ln32_1_fu_431_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln32_fu_435_p2 = ((tmp_fu_404_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln37_1_fu_374_p2 = ((mpc_0_reg_151 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_316_p2 = ((mpr_0_reg_140 == 2'd1) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_172_p2 = ((f_0_reg_107 == 7'd64) ? 1'b1 : 1'b0);

assign j_fu_342_p2 = (zext_ln22_fu_322_p1 + shl_ln1_reg_544);

assign max_2_fu_483_p3 = ((and_ln32_1_fu_477_p2[0:0] === 1'b1) ? max_reg_606 : select_ln24_reg_599);

assign max_pool_out_address0 = max_pool_out_addr_reg_549;

assign max_pool_out_d0 = max_2_reg_613;

assign mpc_fu_336_p2 = (2'd1 + mpc_0_reg_151);

assign mpr_fu_295_p2 = (2'd1 + mpr_0_reg_140);

assign mul_ln32_fu_310_p0 = mul_ln32_fu_310_p00;

assign mul_ln32_fu_310_p00 = i_fu_301_p2;

assign mul_ln32_fu_310_p2 = (mul_ln32_fu_310_p0 * $signed('hB));

assign or_ln24_fu_388_p2 = (trunc_ln22_reg_577 | trunc_ln19_reg_554);

assign or_ln32_1_fu_465_p2 = (icmp_ln32_3_fu_459_p2 | icmp_ln32_2_fu_453_p2);

assign or_ln32_fu_447_p2 = (icmp_ln32_fu_435_p2 | icmp_ln32_1_fu_441_p2);

assign r_fu_198_p2 = (r_0_reg_118 + 3'd1);

assign select_ln24_fu_392_p3 = ((or_ln24_fu_388_p2[0:0] === 1'b1) ? max_1_fu_78 : 32'd8388608);

assign shl_ln1_fu_246_p3 = {{c_0_reg_129}, {1'd0}};

assign shl_ln_fu_204_p3 = {{r_0_reg_118}, {1'd0}};

assign tmp_11_cast_fu_356_p3 = {{add_ln32_fu_351_p2}, {6'd0}};

assign tmp_5_fu_421_p4 = {{bitcast_ln32_1_fu_418_p1[30:23]}};

assign tmp_7_fu_216_p3 = {{r_0_reg_118}, {2'd0}};

assign tmp_9_cast_fu_263_p3 = {{add_ln39_1_fu_258_p2}, {6'd0}};

assign tmp_fu_404_p4 = {{bitcast_ln32_fu_401_p1[30:23]}};

assign trunc_ln19_fu_281_p1 = mpr_0_reg_140[0:0];

assign trunc_ln22_fu_326_p1 = mpc_0_reg_151[0:0];

assign trunc_ln32_1_fu_431_p1 = bitcast_ln32_1_fu_418_p1[22:0];

assign trunc_ln32_fu_414_p1 = bitcast_ln32_fu_401_p1[22:0];

assign zext_ln12_1_fu_188_p1 = f_0_reg_107;

assign zext_ln12_fu_184_p1 = f_0_reg_107;

assign zext_ln19_fu_285_p1 = mpr_0_reg_140;

assign zext_ln22_fu_322_p1 = mpc_0_reg_151;

assign zext_ln32_1_fu_347_p1 = j_fu_342_p2;

assign zext_ln32_2_fu_369_p1 = add_ln32_1_fu_364_p2;

assign zext_ln39_1_fu_224_p1 = tmp_7_fu_216_p3;

assign zext_ln39_2_fu_254_p1 = c_0_reg_129;

assign zext_ln39_3_fu_276_p1 = add_ln39_2_fu_271_p2;

assign zext_ln39_fu_212_p1 = r_0_reg_118;

always @ (posedge ap_clk) begin
    zext_ln12_reg_508[13:7] <= 7'b0000000;
    zext_ln12_1_reg_513[11:7] <= 5'b00000;
    shl_ln_reg_526[0] <= 1'b0;
    shl_ln1_reg_544[0] <= 1'b0;
end

endmodule //max_pool_2
