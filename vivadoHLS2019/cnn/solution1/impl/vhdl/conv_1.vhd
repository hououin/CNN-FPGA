-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (25 downto 0) := "00000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (25 downto 0) := "00000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (25 downto 0) := "00000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (25 downto 0) := "00000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (25 downto 0) := "00000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (25 downto 0) := "00000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (25 downto 0) := "00000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (25 downto 0) := "00001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (25 downto 0) := "00010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (25 downto 0) := "00100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (25 downto 0) := "01000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (25 downto 0) := "10000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (25 downto 0) := "00000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal conv_1_weights_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_219 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal add_ln9_fu_235_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln9_reg_552 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_247_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_560 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_259_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_568 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln15_fu_283_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln15_reg_573 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln12_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_293_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_581 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal conv_out_addr_reg_586 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln15_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln39_12_fu_318_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln39_12_reg_596 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal conv_1_bias_load_reg_601 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_fu_332_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_609 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln31_fu_350_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln31_reg_614 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln19_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln31_1_fu_386_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln31_1_reg_619 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln33_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_624 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_408_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_632 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln22_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_647 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_reg_652 : STD_LOGIC_VECTOR (0 downto 0);
    signal conv_1_weights_0_loa_reg_656 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal input_0_load_reg_661 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_210_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp1_reg_666 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal select_ln27_fu_487_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal select_ln38_fu_537_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_reg_676 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal r_0_reg_135 : STD_LOGIC_VECTOR (4 downto 0);
    signal phi_mul_reg_147 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_0_reg_159 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln9_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_171 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_183 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_0_reg_195 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal zext_ln39_14_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_299_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_14_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln31_fu_456_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_0_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal grp_fu_206_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_206_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln39_fu_265_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln39_fu_269_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_275_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln39_13_fu_304_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln39_6_fu_308_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_338_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_10_fu_346_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_fu_322_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_fu_356_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_362_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_374_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln31_11_fu_370_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln31_12_fu_382_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln31_13_fu_414_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_7_fu_418_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_36_cast_fu_423_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_8_fu_431_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_fu_398_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln31_2_fu_441_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_15_fu_447_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln31_9_fu_451_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln27_fu_467_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln33_3_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln38_fu_495_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_499_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_509_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_2_fu_519_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_525_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_214_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_531_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (25 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    conv_1_weights_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 288,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_address0,
        ce0 => conv_1_weights_0_ce0,
        q0 => conv_1_weights_0_q0);

    cnn_fadd_32ns_32ncud_U1 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_206_p0,
        din1 => grp_fu_206_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_206_p2);

    cnn_fmul_32ns_32ndEe_U2 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_weights_0_loa_reg_656,
        din1 => input_0_load_reg_661,
        ce => ap_const_logic_1,
        dout => grp_fu_210_p2);

    cnn_fcmp_32ns_32neOg_U3 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => reg_219,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_214_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_287_p2 = ap_const_lv1_1))) then 
                c_0_reg_159 <= c_reg_568;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_241_p2 = ap_const_lv1_0))) then 
                c_0_reg_159 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_171_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_326_p2 = ap_const_lv1_1))) then 
                f_0_reg_171 <= f_reg_581;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_253_p2 = ap_const_lv1_0))) then 
                f_0_reg_171 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_253_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_147 <= add_ln9_reg_552;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_147 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    r_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_253_p2 = ap_const_lv1_1))) then 
                r_0_reg_135 <= r_reg_560;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_135 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_fu_80_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                w_sum_0_fu_80 <= reg_219;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                w_sum_0_fu_80 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                wc_0_reg_195 <= wc_reg_632;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_326_p2 = ap_const_lv1_0))) then 
                wc_0_reg_195 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_183_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln22_fu_402_p2 = ap_const_lv1_1))) then 
                wr_0_reg_183 <= wr_reg_609;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                wr_0_reg_183 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln9_reg_552 <= add_ln9_fu_235_p2;
                r_reg_560 <= r_fu_247_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln22_fu_402_p2 = ap_const_lv1_0))) then
                and_ln33_reg_652 <= and_ln33_fu_479_p2;
                icmp_ln27_reg_647 <= icmp_ln27_fu_473_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_568 <= c_fu_259_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                conv_1_bias_load_reg_601 <= conv_1_bias_q0;
                    zext_ln39_12_reg_596(5 downto 0) <= zext_ln39_12_fu_318_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                conv_1_weights_0_loa_reg_656 <= conv_1_weights_0_q0;
                input_0_load_reg_661 <= input_0_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_287_p2 = ap_const_lv1_0))) then
                conv_out_addr_reg_586 <= zext_ln39_14_fu_313_p1(15 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_581 <= f_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_326_p2 = ap_const_lv1_0))) then
                icmp_ln33_reg_624 <= icmp_ln33_fu_392_p2;
                    sub_ln31_1_reg_619(10 downto 2) <= sub_ln31_1_fu_386_p2(10 downto 2);
                sub_ln31_reg_614 <= sub_ln31_fu_350_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_219 <= grp_fu_206_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state25)) then
                select_ln38_reg_676 <= select_ln38_fu_537_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                tmp1_reg_666 <= grp_fu_210_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                wc_reg_632 <= wc_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wr_reg_609 <= wr_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_253_p2 = ap_const_lv1_0))) then
                    zext_ln15_reg_573(14 downto 5) <= zext_ln15_fu_283_p1(14 downto 5);
            end if;
        end if;
    end process;
    zext_ln15_reg_573(4 downto 0) <= "00000";
    zext_ln15_reg_573(15) <= '0';
    zext_ln39_12_reg_596(9 downto 6) <= "0000";
    sub_ln31_1_reg_619(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state17, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln12_fu_253_p2, ap_CS_fsm_state4, icmp_ln15_fu_287_p2, ap_CS_fsm_state6, icmp_ln19_fu_326_p2, ap_CS_fsm_state7, icmp_ln22_fu_402_p2, and_ln33_reg_652, icmp_ln9_fu_241_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_241_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln12_fu_253_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln15_fu_287_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_326_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln22_fu_402_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (ap_const_lv1_1 = and_ln33_reg_652))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_2_fu_441_p2 <= std_logic_vector(unsigned(c_0_reg_159) + unsigned(zext_ln22_fu_398_p1));
    add_ln31_7_fu_418_p2 <= std_logic_vector(unsigned(zext_ln31_13_fu_414_p1) + unsigned(sub_ln31_reg_614));
    add_ln31_8_fu_431_p2 <= std_logic_vector(unsigned(zext_ln39_12_reg_596) + unsigned(tmp_36_cast_fu_423_p3));
    add_ln31_9_fu_451_p2 <= std_logic_vector(unsigned(zext_ln31_15_fu_447_p1) + unsigned(sub_ln31_1_reg_619));
    add_ln31_fu_356_p2 <= std_logic_vector(unsigned(zext_ln19_fu_322_p1) + unsigned(r_0_reg_135));
    add_ln39_6_fu_308_p2 <= std_logic_vector(unsigned(zext_ln15_reg_573) + unsigned(zext_ln39_13_fu_304_p1));
    add_ln39_fu_269_p2 <= std_logic_vector(unsigned(phi_mul_reg_147) + unsigned(zext_ln39_fu_265_p1));
    add_ln9_fu_235_p2 <= std_logic_vector(unsigned(phi_mul_reg_147) + unsigned(ap_const_lv10_1A));
    and_ln33_fu_479_p2 <= (icmp_ln33_reg_624 and icmp_ln33_3_fu_461_p2);
    and_ln38_fu_531_p2 <= (or_ln38_fu_525_p2 and grp_fu_214_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_241_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_241_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_241_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_241_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln38_fu_495_p1 <= reg_219;
    c_fu_259_p2 <= std_logic_vector(unsigned(c_0_reg_159) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln31_fu_299_p1(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_address0 <= zext_ln31_14_fu_436_p1(9 - 1 downto 0);

    conv_1_weights_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_1_weights_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_586;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= select_ln38_reg_676;

    conv_out_we0_assign_proc : process(and_ln33_reg_652, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_lv1_1 = and_ln33_reg_652))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_293_p2 <= std_logic_vector(unsigned(f_0_reg_171) + unsigned(ap_const_lv6_1));

    grp_fu_206_p0_assign_proc : process(reg_219, select_ln27_fu_487_p3, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_206_p0 <= reg_219;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_206_p0 <= select_ln27_fu_487_p3;
        else 
            grp_fu_206_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_206_p1_assign_proc : process(conv_1_bias_load_reg_601, tmp1_reg_666, ap_CS_fsm_state13, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_fu_206_p1 <= conv_1_bias_load_reg_601;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_206_p1 <= tmp1_reg_666;
        else 
            grp_fu_206_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_fu_253_p2 <= "1" when (c_0_reg_159 = ap_const_lv5_1A) else "0";
    icmp_ln15_fu_287_p2 <= "1" when (f_0_reg_171 = ap_const_lv6_20) else "0";
    icmp_ln19_fu_326_p2 <= "1" when (wr_0_reg_183 = ap_const_lv2_3) else "0";
    icmp_ln22_fu_402_p2 <= "1" when (wc_0_reg_195 = ap_const_lv2_3) else "0";
    icmp_ln27_fu_473_p2 <= "1" when (or_ln27_fu_467_p2 = ap_const_lv2_0) else "0";
    icmp_ln33_3_fu_461_p2 <= "1" when (wc_0_reg_195 = ap_const_lv2_2) else "0";
    icmp_ln33_fu_392_p2 <= "1" when (wr_0_reg_183 = ap_const_lv2_2) else "0";
    icmp_ln38_2_fu_519_p2 <= "1" when (trunc_ln38_fu_509_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_513_p2 <= "0" when (tmp_s_fu_499_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_241_p2 <= "1" when (r_0_reg_135 = ap_const_lv5_1A) else "0";
    input_0_address0 <= sext_ln31_fu_456_p1(10 - 1 downto 0);

    input_0_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln27_fu_467_p2 <= (wr_0_reg_183 or wc_0_reg_195);
    or_ln38_fu_525_p2 <= (icmp_ln38_fu_513_p2 or icmp_ln38_2_fu_519_p2);
    r_fu_247_p2 <= std_logic_vector(unsigned(r_0_reg_135) + unsigned(ap_const_lv5_1));
    select_ln27_fu_487_p3 <= 
        ap_const_lv32_0 when (icmp_ln27_reg_647(0) = '1') else 
        w_sum_0_fu_80;
    select_ln38_fu_537_p3 <= 
        reg_219 when (and_ln38_fu_531_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln31_fu_456_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln31_9_fu_451_p2),64));

    sub_ln31_1_fu_386_p2 <= std_logic_vector(unsigned(zext_ln31_11_fu_370_p1) - unsigned(zext_ln31_12_fu_382_p1));
    sub_ln31_fu_350_p2 <= std_logic_vector(unsigned(zext_ln31_10_fu_346_p1) - unsigned(zext_ln19_fu_322_p1));
    tmp_11_fu_338_p3 <= (wr_0_reg_183 & ap_const_lv2_0);
    tmp_12_fu_275_p3 <= (add_ln39_fu_269_p2 & ap_const_lv5_0);
    tmp_13_fu_362_p3 <= (add_ln31_fu_356_p2 & ap_const_lv5_0);
    tmp_14_fu_374_p3 <= (add_ln31_fu_356_p2 & ap_const_lv2_0);
    tmp_36_cast_fu_423_p3 <= (add_ln31_7_fu_418_p2 & ap_const_lv5_0);
    tmp_s_fu_499_p4 <= bitcast_ln38_fu_495_p1(30 downto 23);
    trunc_ln38_fu_509_p1 <= bitcast_ln38_fu_495_p1(23 - 1 downto 0);
    wc_fu_408_p2 <= std_logic_vector(unsigned(wc_0_reg_195) + unsigned(ap_const_lv2_1));
    wr_fu_332_p2 <= std_logic_vector(unsigned(wr_0_reg_183) + unsigned(ap_const_lv2_1));
    zext_ln15_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_275_p3),16));
    zext_ln19_fu_322_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_183),5));
    zext_ln22_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_195),5));
    zext_ln31_10_fu_346_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_338_p3),5));
    zext_ln31_11_fu_370_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_362_p3),11));
    zext_ln31_12_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_374_p3),11));
    zext_ln31_13_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_195),5));
    zext_ln31_14_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_8_fu_431_p2),64));
    zext_ln31_15_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_2_fu_441_p2),11));
    zext_ln31_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_171),64));
    zext_ln39_12_fu_318_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_171),10));
    zext_ln39_13_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_171),16));
    zext_ln39_14_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_6_fu_308_p2),64));
    zext_ln39_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_159),10));
end behav;
