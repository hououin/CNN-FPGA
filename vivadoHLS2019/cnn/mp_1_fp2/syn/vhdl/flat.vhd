-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_we0 : OUT STD_LOGIC;
    flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_2_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_2_out_ce0 : OUT STD_LOGIC;
    max_pool_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_152_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_261 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_158_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_266 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_180_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_reg_271 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_192_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_279 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln15_fu_198_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_reg_284 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln9_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_180_cast_fu_213_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_180_cast_reg_289 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_fu_227_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_297 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln12_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_1_fu_252_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal r_0_reg_79 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_90 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_102 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_113 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_124 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_135 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_6_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_168_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_fu_164_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_2_fu_176_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_4_fu_204_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln14_1_fu_208_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_5_fu_233_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln14_2_fu_237_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_113_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_113 <= c_reg_279;
            elsif (((icmp_ln6_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_113 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_135 <= f_reg_297;
            elsif (((icmp_ln9_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_135 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_90 <= i_reg_266;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_90 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_102 <= add_ln15_reg_284;
            elsif (((icmp_ln6_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_102 <= i_0_reg_90;
            end if; 
        end if;
    end process;

    i_2_reg_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_124 <= add_ln15_1_fu_252_p2;
            elsif (((icmp_ln9_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_124 <= i_1_reg_102;
            end if; 
        end if;
    end process;

    r_0_reg_79_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_79 <= r_reg_261;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_79 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_146_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln14_reg_271 <= add_ln14_fu_180_p2;
                i_reg_266 <= i_fu_158_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_186_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln15_reg_284 <= add_ln15_fu_198_p2;
                    tmp_180_cast_reg_289(9 downto 4) <= tmp_180_cast_fu_213_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_279 <= c_fu_192_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_297 <= f_fu_227_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_261 <= r_fu_152_p2;
            end if;
        end if;
    end process;
    tmp_180_cast_reg_289(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_146_p2, ap_CS_fsm_state3, icmp_ln9_fu_186_p2, ap_CS_fsm_state4, icmp_ln12_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln9_fu_186_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln12_fu_221_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln14_1_fu_208_p2 <= std_logic_vector(unsigned(zext_ln14_4_fu_204_p1) + unsigned(add_ln14_reg_271));
    add_ln14_2_fu_237_p2 <= std_logic_vector(unsigned(tmp_180_cast_reg_289) + unsigned(zext_ln14_5_fu_233_p1));
    add_ln14_fu_180_p2 <= std_logic_vector(unsigned(zext_ln14_fu_164_p1) + unsigned(zext_ln14_2_fu_176_p1));
    add_ln15_1_fu_252_p2 <= std_logic_vector(unsigned(i_2_reg_124) + unsigned(ap_const_lv9_1));
    add_ln15_fu_198_p2 <= std_logic_vector(unsigned(i_1_reg_102) + unsigned(ap_const_lv9_10));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_146_p2)
    begin
        if ((((icmp_ln6_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_146_p2)
    begin
        if (((icmp_ln6_fu_146_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_192_p2 <= std_logic_vector(unsigned(c_0_reg_113) + unsigned(ap_const_lv3_1));
    f_fu_227_p2 <= std_logic_vector(unsigned(f_0_reg_135) + unsigned(ap_const_lv5_1));
    flat_array_address0 <= zext_ln14_3_fu_247_p1(9 - 1 downto 0);

    flat_array_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_d0 <= max_pool_2_out_q0;

    flat_array_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_we0 <= ap_const_logic_1;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_158_p2 <= std_logic_vector(unsigned(i_0_reg_90) + unsigned(ap_const_lv9_50));
    icmp_ln12_fu_221_p2 <= "1" when (f_0_reg_135 = ap_const_lv5_10) else "0";
    icmp_ln6_fu_146_p2 <= "1" when (r_0_reg_79 = ap_const_lv3_5) else "0";
    icmp_ln9_fu_186_p2 <= "1" when (c_0_reg_113 = ap_const_lv3_5) else "0";
    max_pool_2_out_address0 <= zext_ln14_6_fu_242_p1(9 - 1 downto 0);

    max_pool_2_out_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_2_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_152_p2 <= std_logic_vector(unsigned(r_0_reg_79) + unsigned(ap_const_lv3_1));
    tmp_180_cast_fu_213_p3 <= (add_ln14_1_fu_208_p2 & ap_const_lv4_0);
    tmp_s_fu_168_p3 <= (r_0_reg_79 & ap_const_lv2_0);
    zext_ln14_2_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_168_p3),6));
    zext_ln14_3_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_124),64));
    zext_ln14_4_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_113),6));
    zext_ln14_5_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_135),10));
    zext_ln14_6_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_2_fu_237_p2),64));
    zext_ln14_fu_164_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_79),6));
end behav;
