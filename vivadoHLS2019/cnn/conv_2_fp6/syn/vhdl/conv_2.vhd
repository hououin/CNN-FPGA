-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv6_36 : STD_LOGIC_VECTOR (5 downto 0) := "110110";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_ce0 : STD_LOGIC;
    signal conv_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_ce0 : STD_LOGIC;
    signal conv_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten21_reg_225 : STD_LOGIC_VECTOR (5 downto 0);
    signal wr_0_reg_236 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_247 : STD_LOGIC_VECTOR (4 downto 0);
    signal wc_0_reg_258 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_269 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_281 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln8_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_315_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln8_reg_802 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln11_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_807 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_341_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_1_reg_812 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_fu_383_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_2_reg_818 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_3_fu_391_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_3_reg_823 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_831 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_414_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_reg_836 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_841 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln18_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_846 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_846_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_448_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln18_1_reg_850 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln21_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln21_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_1_fu_474_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_860 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_fu_538_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_reg_866 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_1_fu_550_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_1_reg_872 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln21_2_fu_606_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln21_2_reg_877 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln21_fu_642_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln21_reg_887 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_2_weights_load_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal grp_fu_298_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_907 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ch_fu_701_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_912 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln21_3_fu_706_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln21_3_reg_917 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_292_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal f_fu_712_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_932 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln11_fu_723_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln11_reg_937 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal w_sum_reg_947 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal indvar_flatten43_reg_169 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_0_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten29_reg_191 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_203 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_214 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten21_phi_fu_229_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_240_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_251_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_262_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_2_phi_fu_273_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_285_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_4_fu_428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_637_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_696_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_292_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_292_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal r_fu_321_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln14_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln35_fu_365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_779_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln35_3_fu_418_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_22_cast_fu_403_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_422_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln21_fu_433_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_fu_454_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_4_fu_486_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_494_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_482_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_498_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln24_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln18_fu_466_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln18_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln21_fu_532_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_526_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln21_2_fu_558_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_fu_504_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_1_fu_562_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_568_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_572_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_5_fu_580_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_1_fu_546_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_2_fu_594_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln18_2_fu_599_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_614_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_fu_588_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_618_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_29_cast_fu_624_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_632_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln18_fu_648_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_fu_651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_788_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_670_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_cast_fu_663_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_6_fu_677_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_687_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_681_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_690_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal add_ln11_1_fu_717_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal bitcast_ln34_fu_730_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_733_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_743_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_759_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_779_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_779_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_779_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_788_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_788_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_788_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_779_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_779_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_788_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_788_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_4ng8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_conv_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_2_weights_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_address0,
        ce0 => conv_2_weights_ce0,
        q0 => conv_2_weights_q0);

    conv_2_bias_U : component conv_2_conv_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_address0,
        ce0 => conv_2_bias_ce0,
        q0 => conv_2_bias_q0);

    cnn_fadd_32ns_32ncud_U14 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p0,
        din1 => grp_fu_292_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_292_p2);

    cnn_fmul_32ns_32ndEe_U15 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_weights_load_reg_897,
        din1 => max_pool_1_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_298_p2);

    cnn_fcmp_32ns_32neOg_U16 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_292_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_303_p2);

    cnn_mac_muladd_4ng8j_U17 : component cnn_mac_muladd_4ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_779_p0,
        din1 => grp_fu_779_p1,
        din2 => grp_fu_779_p2,
        dout => grp_fu_779_p3);

    cnn_mac_muladd_4ng8j_U18 : component cnn_mac_muladd_4ng8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_788_p0,
        din1 => grp_fu_788_p1,
        din2 => grp_fu_788_p2,
        dout => grp_fu_788_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                c_0_reg_203 <= select_ln35_3_reg_823;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_203 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ch_0_reg_281 <= ch_reg_912;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ch_0_reg_281 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_214_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                f_0_reg_214 <= f_reg_932;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_214 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten21_reg_225 <= add_ln18_1_reg_850;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten21_reg_225 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten29_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten29_reg_191 <= select_ln11_reg_937;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten29_reg_191 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten43_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                indvar_flatten43_reg_169 <= add_ln8_reg_802;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten43_reg_169 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_247 <= select_ln21_3_reg_917;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_247 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    r_0_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                r_0_reg_180 <= select_ln35_1_reg_812;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_2_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then 
                w_sum_2_reg_269 <= grp_fu_292_p2;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_2_reg_269 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_258 <= select_ln21_1_reg_872;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_258 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_236 <= select_ln18_1_reg_860;
            elsif (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_236 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_850 <= add_ln18_1_fu_448_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_442_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln21_reg_887 <= add_ln21_fu_642_p2;
                icmp_ln21_reg_855 <= icmp_ln21_fu_460_p2;
                select_ln21_2_reg_877 <= select_ln21_2_fu_606_p3;
                select_ln21_reg_866 <= select_ln21_fu_538_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_802 <= add_ln8_fu_315_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                ch_reg_912 <= ch_fu_701_p2;
                select_ln21_3_reg_917 <= select_ln21_3_fu_706_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_2_weights_load_reg_897 <= conv_2_weights_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_309_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_841 <= zext_ln35_4_fu_428_p1(11 - 1 downto 0);
                icmp_ln11_reg_807 <= icmp_ln11_fu_327_p2;
                select_ln35_1_reg_812 <= select_ln35_1_fu_341_p3;
                select_ln35_2_reg_818 <= select_ln35_2_fu_383_p3;
                select_ln35_3_reg_823 <= select_ln35_3_fu_391_p3;
                    zext_ln26_reg_831(4 downto 0) <= zext_ln26_fu_410_p1(4 downto 0);
                    zext_ln35_2_reg_836(4 downto 0) <= zext_ln35_2_fu_414_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                f_reg_932 <= f_fu_712_p2;
                select_ln11_reg_937 <= select_ln11_fu_723_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_846 <= icmp_ln18_fu_442_p2;
                icmp_ln18_reg_846_pp0_iter1_reg <= icmp_ln18_reg_846;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_442_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_860 <= select_ln18_1_fu_474_p3;
                select_ln21_1_reg_872 <= select_ln21_1_fu_550_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_s_reg_907 <= grp_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                w_sum_reg_947 <= grp_fu_292_p2;
            end if;
        end if;
    end process;
    zext_ln26_reg_831(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_2_reg_836(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_309_p2, ap_CS_fsm_state2, icmp_ln18_fu_442_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_442_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_442_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_717_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(indvar_flatten29_reg_191));
    add_ln18_1_fu_448_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten21_phi_fu_229_p4) + unsigned(ap_const_lv6_1));
    add_ln18_fu_651_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_812) + unsigned(zext_ln18_fu_648_p1));
    add_ln21_fu_642_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_251_p4) + unsigned(ap_const_lv5_1));
    add_ln26_1_fu_562_p2 <= std_logic_vector(unsigned(zext_ln21_2_fu_558_p1) + unsigned(sext_ln26_fu_504_p1));
    add_ln26_2_fu_594_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_823) + unsigned(zext_ln21_1_fu_546_p1));
    add_ln26_4_fu_618_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_614_p1) + unsigned(sub_ln26_1_fu_588_p2));
    add_ln26_5_fu_632_p2 <= std_logic_vector(unsigned(zext_ln35_2_reg_836) + unsigned(tmp_29_cast_fu_624_p3));
    add_ln26_6_fu_690_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_687_p1) + unsigned(sub_ln26_2_fu_681_p2));
    add_ln26_fu_437_p2 <= std_logic_vector(unsigned(select_ln35_3_reg_823) + unsigned(zext_ln21_fu_433_p1));
    add_ln35_1_fu_422_p2 <= std_logic_vector(unsigned(zext_ln35_3_fu_418_p1) + unsigned(tmp_22_cast_fu_403_p3));
    add_ln8_fu_315_p2 <= std_logic_vector(unsigned(indvar_flatten43_reg_169) + unsigned(ap_const_lv11_1));
    and_ln18_fu_520_p2 <= (xor_ln18_fu_508_p2 and icmp_ln24_fu_514_p2);
    and_ln34_fu_765_p2 <= (or_ln34_fu_759_p2 and grp_fu_303_p2);
    and_ln35_fu_365_p2 <= (xor_ln35_fu_353_p2 and icmp_ln14_fu_359_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(6);
    ap_CS_fsm_state12 <= ap_CS_fsm(7);
    ap_CS_fsm_state15 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_442_p2)
    begin
        if ((icmp_ln18_fu_442_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln8_fu_309_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln8_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_285_p4_assign_proc : process(ch_0_reg_281, icmp_ln18_reg_846, ap_CS_fsm_pp0_stage0, ch_reg_912, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_ch_0_phi_fu_285_p4 <= ch_reg_912;
        else 
            ap_phi_mux_ch_0_phi_fu_285_p4 <= ch_0_reg_281;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten21_phi_fu_229_p4_assign_proc : process(indvar_flatten21_reg_225, icmp_ln18_reg_846, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_850, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten21_phi_fu_229_p4 <= add_ln18_1_reg_850;
        else 
            ap_phi_mux_indvar_flatten21_phi_fu_229_p4 <= indvar_flatten21_reg_225;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_251_p4_assign_proc : process(indvar_flatten_reg_247, icmp_ln18_reg_846, ap_CS_fsm_pp0_stage0, select_ln21_3_reg_917, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_251_p4 <= select_ln21_3_reg_917;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_251_p4 <= indvar_flatten_reg_247;
        end if; 
    end process;

    ap_phi_mux_w_sum_2_phi_fu_273_p4 <= w_sum_2_reg_269;

    ap_phi_mux_wc_0_phi_fu_262_p4_assign_proc : process(wc_0_reg_258, icmp_ln18_reg_846, ap_CS_fsm_pp0_stage0, select_ln21_1_reg_872, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wc_0_phi_fu_262_p4 <= select_ln21_1_reg_872;
        else 
            ap_phi_mux_wc_0_phi_fu_262_p4 <= wc_0_reg_258;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_240_p4_assign_proc : process(wr_0_reg_236, icmp_ln18_reg_846, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_860, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_846 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_wr_0_phi_fu_240_p4 <= select_ln18_1_reg_860;
        else 
            ap_phi_mux_wr_0_phi_fu_240_p4 <= wr_0_reg_236;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_309_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_309_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_730_p1 <= w_sum_reg_947;
    c_fu_371_p2 <= std_logic_vector(unsigned(select_ln35_fu_333_p3) + unsigned(ap_const_lv4_1));
    ch_fu_701_p2 <= std_logic_vector(unsigned(select_ln21_reg_866) + unsigned(ap_const_lv3_1));
    conv_2_bias_address0 <= zext_ln26_reg_831(4 - 1 downto 0);

    conv_2_bias_ce0_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_address0 <= zext_ln26_8_fu_637_p1(10 - 1 downto 0);

    conv_2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_841;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_947 when (and_ln34_fu_765_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_712_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_2_reg_818));

    grp_fu_292_p0_assign_proc : process(w_sum_2_reg_269, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0, ap_phi_mux_w_sum_2_phi_fu_273_p4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_292_p0 <= w_sum_2_reg_269;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_292_p0 <= ap_phi_mux_w_sum_2_phi_fu_273_p4;
        else 
            grp_fu_292_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_292_p1_assign_proc : process(conv_2_bias_q0, ap_CS_fsm_pp0_stage0, tmp_s_reg_907, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_292_p1 <= conv_2_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_292_p1 <= tmp_s_reg_907;
        else 
            grp_fu_292_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_779_p0 <= grp_fu_779_p00(4 - 1 downto 0);
    grp_fu_779_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_341_p3),8));
    grp_fu_779_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_779_p2 <= grp_fu_779_p20(4 - 1 downto 0);
    grp_fu_779_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_3_fu_391_p3),8));
    grp_fu_788_p0 <= grp_fu_788_p00(4 - 1 downto 0);
    grp_fu_788_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln18_fu_651_p2),8));
    grp_fu_788_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_788_p2 <= grp_fu_788_p20(4 - 1 downto 0);
    grp_fu_788_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_2_reg_877),8));
    icmp_ln11_fu_327_p2 <= "1" when (indvar_flatten29_reg_191 = ap_const_lv9_B0) else "0";
    icmp_ln14_fu_359_p2 <= "1" when (f_0_reg_214 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_442_p2 <= "1" when (ap_phi_mux_indvar_flatten21_phi_fu_229_p4 = ap_const_lv6_36) else "0";
    icmp_ln21_fu_460_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_251_p4 = ap_const_lv5_12) else "0";
    icmp_ln24_fu_514_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_285_p4 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_753_p2 <= "1" when (trunc_ln34_fu_743_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_747_p2 <= "0" when (tmp_fu_733_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_309_p2 <= "1" when (indvar_flatten43_reg_169 = ap_const_lv11_790) else "0";
    max_pool_1_out_address0 <= zext_ln26_9_fu_696_p1(10 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln21_fu_532_p2 <= (icmp_ln21_fu_460_p2 or and_ln18_fu_520_p2);
    or_ln34_fu_759_p2 <= (icmp_ln34_fu_747_p2 or icmp_ln34_1_fu_753_p2);
    or_ln35_fu_377_p2 <= (icmp_ln11_fu_327_p2 or and_ln35_fu_365_p2);
    p_shl_cast_fu_663_p3 <= (grp_fu_788_p3 & ap_const_lv3_0);
    p_shl_fu_572_p3 <= (trunc_ln26_fu_568_p1 & ap_const_lv3_0);
    r_fu_321_p2 <= std_logic_vector(unsigned(r_0_reg_180) + unsigned(ap_const_lv4_1));
    select_ln11_fu_723_p3 <= 
        ap_const_lv9_1 when (icmp_ln11_reg_807(0) = '1') else 
        add_ln11_1_fu_717_p2;
    select_ln18_1_fu_474_p3 <= 
        wr_fu_454_p2 when (icmp_ln21_fu_460_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_240_p4;
    select_ln18_2_fu_599_p3 <= 
        select_ln35_3_reg_823 when (icmp_ln21_fu_460_p2(0) = '1') else 
        add_ln26_fu_437_p2;
    select_ln18_fu_466_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_460_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_262_p4;
    select_ln21_1_fu_550_p3 <= 
        wc_fu_526_p2 when (and_ln18_fu_520_p2(0) = '1') else 
        select_ln18_fu_466_p3;
    select_ln21_2_fu_606_p3 <= 
        add_ln26_2_fu_594_p2 when (and_ln18_fu_520_p2(0) = '1') else 
        select_ln18_2_fu_599_p3;
    select_ln21_3_fu_706_p3 <= 
        ap_const_lv5_1 when (icmp_ln21_reg_855(0) = '1') else 
        add_ln21_reg_887;
    select_ln21_fu_538_p3 <= 
        ap_const_lv3_0 when (or_ln21_fu_532_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_285_p4;
    select_ln35_1_fu_341_p3 <= 
        r_fu_321_p2 when (icmp_ln11_fu_327_p2(0) = '1') else 
        r_0_reg_180;
    select_ln35_2_fu_383_p3 <= 
        ap_const_lv5_0 when (or_ln35_fu_377_p2(0) = '1') else 
        f_0_reg_214;
    select_ln35_3_fu_391_p3 <= 
        c_fu_371_p2 when (and_ln35_fu_365_p2(0) = '1') else 
        select_ln35_fu_333_p3;
    select_ln35_fu_333_p3 <= 
        ap_const_lv4_0 when (icmp_ln11_fu_327_p2(0) = '1') else 
        c_0_reg_203;
        sext_ln26_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_498_p2),6));

    sub_ln26_1_fu_588_p2 <= std_logic_vector(unsigned(p_shl_fu_572_p3) - unsigned(tmp_5_fu_580_p3));
    sub_ln26_2_fu_681_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_663_p3) - unsigned(zext_ln26_6_fu_677_p1));
    sub_ln26_fu_498_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_494_p1) - unsigned(zext_ln26_1_fu_482_p1));
    tmp_22_cast_fu_403_p3 <= (grp_fu_779_p3 & ap_const_lv4_0);
    tmp_29_cast_fu_624_p3 <= (add_ln26_4_fu_618_p2 & ap_const_lv4_0);
    tmp_4_fu_486_p3 <= (select_ln18_1_fu_474_p3 & ap_const_lv2_0);
    tmp_5_fu_580_p3 <= (add_ln26_1_fu_562_p2 & ap_const_lv1_0);
    tmp_7_fu_670_p3 <= (grp_fu_788_p3 & ap_const_lv1_0);
    tmp_fu_733_p4 <= bitcast_ln34_fu_730_p1(30 downto 23);
    trunc_ln26_fu_568_p1 <= add_ln26_1_fu_562_p2(4 - 1 downto 0);
    trunc_ln34_fu_743_p1 <= bitcast_ln34_fu_730_p1(23 - 1 downto 0);
    wc_fu_526_p2 <= std_logic_vector(unsigned(select_ln18_fu_466_p3) + unsigned(ap_const_lv2_1));
    wr_fu_454_p2 <= std_logic_vector(unsigned(ap_phi_mux_wr_0_phi_fu_240_p4) + unsigned(ap_const_lv2_1));
    xor_ln18_fu_508_p2 <= (icmp_ln21_fu_460_p2 xor ap_const_lv1_1);
    xor_ln35_fu_353_p2 <= (icmp_ln11_fu_327_p2 xor ap_const_lv1_1);
    zext_ln18_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_reg_860),4));
    zext_ln21_1_fu_546_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_526_p2),4));
    zext_ln21_2_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_1_fu_550_p3),6));
    zext_ln21_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_262_p4),4));
    zext_ln26_1_fu_482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_474_p3),5));
    zext_ln26_2_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_486_p3),5));
    zext_ln26_4_fu_614_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_fu_538_p3),7));
    zext_ln26_6_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_670_p3),11));
    zext_ln26_7_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln21_reg_866),11));
    zext_ln26_8_fu_637_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_632_p2),64));
    zext_ln26_9_fu_696_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_690_p2),64));
    zext_ln26_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_383_p3),64));
    zext_ln35_2_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_383_p3),11));
    zext_ln35_3_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_383_p3),12));
    zext_ln35_4_fu_428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_422_p2),64));
end behav;
