// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _flat_HH_
#define _flat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct flat : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<9> > flat_array_address0;
    sc_out< sc_logic > flat_array_ce0;
    sc_out< sc_logic > flat_array_we0;
    sc_out< sc_lv<32> > flat_array_d0;
    sc_out< sc_lv<8> > max_pool_2_out_1_address0;
    sc_out< sc_logic > max_pool_2_out_1_ce0;
    sc_in< sc_lv<32> > max_pool_2_out_1_q0;
    sc_out< sc_lv<8> > max_pool_2_out_0_address0;
    sc_out< sc_logic > max_pool_2_out_0_ce0;
    sc_in< sc_lv<32> > max_pool_2_out_0_q0;


    // Module declarations
    flat(sc_module_name name);
    SC_HAS_PROCESS(flat);

    ~flat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > r_fu_176_p2;
    sc_signal< sc_lv<3> > r_reg_342;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > i_fu_182_p2;
    sc_signal< sc_lv<9> > i_reg_347;
    sc_signal< sc_lv<1> > icmp_ln6_fu_170_p2;
    sc_signal< sc_lv<5> > sub_ln14_fu_200_p2;
    sc_signal< sc_lv<5> > sub_ln14_reg_352;
    sc_signal< sc_lv<5> > zext_ln9_fu_214_p1;
    sc_signal< sc_lv<5> > zext_ln9_reg_357;
    sc_signal< sc_lv<3> > c_fu_224_p2;
    sc_signal< sc_lv<3> > c_reg_365;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<9> > add_ln15_fu_230_p2;
    sc_signal< sc_lv<9> > add_ln15_reg_370;
    sc_signal< sc_lv<1> > icmp_ln9_fu_218_p2;
    sc_signal< sc_lv<1> > trunc_ln14_fu_236_p1;
    sc_signal< sc_lv<1> > trunc_ln14_reg_375;
    sc_signal< sc_lv<9> > tmp_79_cast_fu_263_p3;
    sc_signal< sc_lv<9> > tmp_79_cast_reg_380;
    sc_signal< sc_lv<9> > tmp_81_cast_fu_276_p3;
    sc_signal< sc_lv<9> > tmp_81_cast_reg_385;
    sc_signal< sc_lv<5> > f_fu_290_p2;
    sc_signal< sc_lv<5> > f_reg_393;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<1> > icmp_ln12_fu_284_p2;
    sc_signal< sc_lv<9> > add_ln15_1_fu_333_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > r_0_reg_103;
    sc_signal< sc_lv<9> > i_0_reg_114;
    sc_signal< sc_lv<9> > i_1_reg_126;
    sc_signal< sc_lv<3> > c_0_reg_137;
    sc_signal< sc_lv<9> > i_2_reg_148;
    sc_signal< sc_lv<5> > f_0_reg_159;
    sc_signal< sc_lv<64> > zext_ln14_7_fu_305_p1;
    sc_signal< sc_lv<64> > zext_ln14_8_fu_315_p1;
    sc_signal< sc_lv<64> > zext_ln14_3_fu_328_p1;
    sc_signal< sc_lv<5> > tmp_s_fu_192_p3;
    sc_signal< sc_lv<5> > zext_ln14_fu_188_p1;
    sc_signal< sc_lv<4> > tmp_67_fu_206_p3;
    sc_signal< sc_lv<2> > tmp_63_fu_240_p4;
    sc_signal< sc_lv<5> > zext_ln14_5_fu_254_p1;
    sc_signal< sc_lv<5> > add_ln14_fu_258_p2;
    sc_signal< sc_lv<5> > zext_ln14_4_fu_250_p1;
    sc_signal< sc_lv<5> > add_ln14_1_fu_271_p2;
    sc_signal< sc_lv<9> > zext_ln14_6_fu_296_p1;
    sc_signal< sc_lv<9> > add_ln14_2_fu_300_p2;
    sc_signal< sc_lv<9> > add_ln14_3_fu_310_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<9> ap_const_lv9_50;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<9> ap_const_lv9_10;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln14_1_fu_271_p2();
    void thread_add_ln14_2_fu_300_p2();
    void thread_add_ln14_3_fu_310_p2();
    void thread_add_ln14_fu_258_p2();
    void thread_add_ln15_1_fu_333_p2();
    void thread_add_ln15_fu_230_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_fu_224_p2();
    void thread_f_fu_290_p2();
    void thread_flat_array_address0();
    void thread_flat_array_ce0();
    void thread_flat_array_d0();
    void thread_flat_array_we0();
    void thread_i_fu_182_p2();
    void thread_icmp_ln12_fu_284_p2();
    void thread_icmp_ln6_fu_170_p2();
    void thread_icmp_ln9_fu_218_p2();
    void thread_max_pool_2_out_0_address0();
    void thread_max_pool_2_out_0_ce0();
    void thread_max_pool_2_out_1_address0();
    void thread_max_pool_2_out_1_ce0();
    void thread_r_fu_176_p2();
    void thread_sub_ln14_fu_200_p2();
    void thread_tmp_63_fu_240_p4();
    void thread_tmp_67_fu_206_p3();
    void thread_tmp_79_cast_fu_263_p3();
    void thread_tmp_81_cast_fu_276_p3();
    void thread_tmp_s_fu_192_p3();
    void thread_trunc_ln14_fu_236_p1();
    void thread_zext_ln14_3_fu_328_p1();
    void thread_zext_ln14_4_fu_250_p1();
    void thread_zext_ln14_5_fu_254_p1();
    void thread_zext_ln14_6_fu_296_p1();
    void thread_zext_ln14_7_fu_305_p1();
    void thread_zext_ln14_8_fu_315_p1();
    void thread_zext_ln14_fu_188_p1();
    void thread_zext_ln9_fu_214_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
