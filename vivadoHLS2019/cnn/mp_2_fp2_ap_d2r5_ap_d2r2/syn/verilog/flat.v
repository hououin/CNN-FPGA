// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_address0,
        flat_array_ce0,
        flat_array_we0,
        flat_array_d0,
        max_pool_2_out_1_address0,
        max_pool_2_out_1_ce0,
        max_pool_2_out_1_q0,
        max_pool_2_out_0_address0,
        max_pool_2_out_0_ce0,
        max_pool_2_out_0_q0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_address0;
output   flat_array_ce0;
output   flat_array_we0;
output  [31:0] flat_array_d0;
output  [7:0] max_pool_2_out_1_address0;
output   max_pool_2_out_1_ce0;
input  [31:0] max_pool_2_out_1_q0;
output  [7:0] max_pool_2_out_0_address0;
output   max_pool_2_out_0_ce0;
input  [31:0] max_pool_2_out_0_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_ce0;
reg flat_array_we0;
reg max_pool_2_out_1_ce0;
reg max_pool_2_out_0_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_176_p2;
reg   [2:0] r_reg_342;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_182_p2;
reg   [8:0] i_reg_347;
wire   [0:0] icmp_ln6_fu_170_p2;
wire   [4:0] sub_ln14_fu_200_p2;
reg   [4:0] sub_ln14_reg_352;
wire   [4:0] zext_ln9_fu_214_p1;
reg   [4:0] zext_ln9_reg_357;
wire   [2:0] c_fu_224_p2;
reg   [2:0] c_reg_365;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln15_fu_230_p2;
reg   [8:0] add_ln15_reg_370;
wire   [0:0] icmp_ln9_fu_218_p2;
wire   [0:0] trunc_ln14_fu_236_p1;
reg   [0:0] trunc_ln14_reg_375;
wire   [8:0] tmp_79_cast_fu_263_p3;
reg   [8:0] tmp_79_cast_reg_380;
wire   [8:0] tmp_81_cast_fu_276_p3;
reg   [8:0] tmp_81_cast_reg_385;
wire   [4:0] f_fu_290_p2;
reg   [4:0] f_reg_393;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln12_fu_284_p2;
wire   [8:0] add_ln15_1_fu_333_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] r_0_reg_103;
reg   [8:0] i_0_reg_114;
reg   [8:0] i_1_reg_126;
reg   [2:0] c_0_reg_137;
reg   [8:0] i_2_reg_148;
reg   [4:0] f_0_reg_159;
wire   [63:0] zext_ln14_7_fu_305_p1;
wire   [63:0] zext_ln14_8_fu_315_p1;
wire   [63:0] zext_ln14_3_fu_328_p1;
wire   [4:0] tmp_s_fu_192_p3;
wire   [4:0] zext_ln14_fu_188_p1;
wire   [3:0] tmp_67_fu_206_p3;
wire   [1:0] tmp_63_fu_240_p4;
wire   [4:0] zext_ln14_5_fu_254_p1;
wire   [4:0] add_ln14_fu_258_p2;
wire   [4:0] zext_ln14_4_fu_250_p1;
wire   [4:0] add_ln14_1_fu_271_p2;
wire   [8:0] zext_ln14_6_fu_296_p1;
wire   [8:0] add_ln14_2_fu_300_p2;
wire   [8:0] add_ln14_3_fu_310_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_137 <= c_reg_365;
    end else if (((icmp_ln6_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_137 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_159 <= f_reg_393;
    end else if (((icmp_ln9_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_159 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_114 <= i_reg_347;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_114 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_126 <= add_ln15_reg_370;
    end else if (((icmp_ln6_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_126 <= i_0_reg_114;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_148 <= add_ln15_1_fu_333_p2;
    end else if (((icmp_ln9_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_148 <= i_1_reg_126;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_103 <= r_reg_342;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_103 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_reg_370 <= add_ln15_fu_230_p2;
        tmp_79_cast_reg_380[8 : 4] <= tmp_79_cast_fu_263_p3[8 : 4];
        tmp_81_cast_reg_385[8 : 4] <= tmp_81_cast_fu_276_p3[8 : 4];
        trunc_ln14_reg_375 <= trunc_ln14_fu_236_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_365 <= c_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_393 <= f_fu_290_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_170_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_347 <= i_fu_182_p2;
        sub_ln14_reg_352 <= sub_ln14_fu_200_p2;
        zext_ln9_reg_357[3 : 1] <= zext_ln9_fu_214_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_342 <= r_fu_176_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln6_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_ce0 = 1'b1;
    end else begin
        flat_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_we0 = 1'b1;
    end else begin
        flat_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_2_out_0_ce0 = 1'b1;
    end else begin
        max_pool_2_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_2_out_1_ce0 = 1'b1;
    end else begin
        max_pool_2_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_170_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_284_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_1_fu_271_p2 = (zext_ln9_reg_357 + zext_ln14_4_fu_250_p1);

assign add_ln14_2_fu_300_p2 = (tmp_79_cast_reg_380 + zext_ln14_6_fu_296_p1);

assign add_ln14_3_fu_310_p2 = (tmp_81_cast_reg_385 + zext_ln14_6_fu_296_p1);

assign add_ln14_fu_258_p2 = (sub_ln14_reg_352 + zext_ln14_5_fu_254_p1);

assign add_ln15_1_fu_333_p2 = (i_2_reg_148 + 9'd1);

assign add_ln15_fu_230_p2 = (9'd16 + i_1_reg_126);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_224_p2 = (c_0_reg_137 + 3'd1);

assign f_fu_290_p2 = (f_0_reg_159 + 5'd1);

assign flat_array_address0 = zext_ln14_3_fu_328_p1;

assign flat_array_d0 = ((trunc_ln14_reg_375[0:0] === 1'b1) ? max_pool_2_out_1_q0 : max_pool_2_out_0_q0);

assign i_fu_182_p2 = (i_0_reg_114 + 9'd80);

assign icmp_ln12_fu_284_p2 = ((f_0_reg_159 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_170_p2 = ((r_0_reg_103 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_218_p2 = ((c_0_reg_137 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_2_out_0_address0 = zext_ln14_7_fu_305_p1;

assign max_pool_2_out_1_address0 = zext_ln14_8_fu_315_p1;

assign r_fu_176_p2 = (r_0_reg_103 + 3'd1);

assign sub_ln14_fu_200_p2 = (tmp_s_fu_192_p3 - zext_ln14_fu_188_p1);

assign tmp_63_fu_240_p4 = {{c_0_reg_137[2:1]}};

assign tmp_67_fu_206_p3 = {{r_0_reg_103}, {1'd0}};

assign tmp_79_cast_fu_263_p3 = {{add_ln14_fu_258_p2}, {4'd0}};

assign tmp_81_cast_fu_276_p3 = {{add_ln14_1_fu_271_p2}, {4'd0}};

assign tmp_s_fu_192_p3 = {{r_0_reg_103}, {2'd0}};

assign trunc_ln14_fu_236_p1 = c_0_reg_137[0:0];

assign zext_ln14_3_fu_328_p1 = i_2_reg_148;

assign zext_ln14_4_fu_250_p1 = tmp_63_fu_240_p4;

assign zext_ln14_5_fu_254_p1 = tmp_63_fu_240_p4;

assign zext_ln14_6_fu_296_p1 = f_0_reg_159;

assign zext_ln14_7_fu_305_p1 = add_ln14_2_fu_300_p2;

assign zext_ln14_8_fu_315_p1 = add_ln14_3_fu_310_p2;

assign zext_ln14_fu_188_p1 = r_0_reg_103;

assign zext_ln9_fu_214_p1 = tmp_67_fu_206_p3;

always @ (posedge ap_clk) begin
    zext_ln9_reg_357[0] <= 1'b0;
    zext_ln9_reg_357[4] <= 1'b0;
    tmp_79_cast_reg_380[3:0] <= 4'b0000;
    tmp_81_cast_reg_385[3:0] <= 4'b0000;
end

endmodule //flat
