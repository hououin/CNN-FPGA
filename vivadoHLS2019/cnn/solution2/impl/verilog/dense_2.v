// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_2_out_address0,
        dense_2_out_ce0,
        dense_2_out_we0,
        dense_2_out_d0,
        dense_1_out_address0,
        dense_1_out_ce0,
        dense_1_out_q0
);

parameter    ap_ST_fsm_state1 = 14'd1;
parameter    ap_ST_fsm_state2 = 14'd2;
parameter    ap_ST_fsm_state3 = 14'd4;
parameter    ap_ST_fsm_state4 = 14'd8;
parameter    ap_ST_fsm_state5 = 14'd16;
parameter    ap_ST_fsm_state6 = 14'd32;
parameter    ap_ST_fsm_state7 = 14'd64;
parameter    ap_ST_fsm_state8 = 14'd128;
parameter    ap_ST_fsm_state9 = 14'd256;
parameter    ap_ST_fsm_state10 = 14'd512;
parameter    ap_ST_fsm_state11 = 14'd1024;
parameter    ap_ST_fsm_state12 = 14'd2048;
parameter    ap_ST_fsm_state13 = 14'd4096;
parameter    ap_ST_fsm_state14 = 14'd8192;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] dense_2_out_address0;
output   dense_2_out_ce0;
output   dense_2_out_we0;
output  [31:0] dense_2_out_d0;
output  [5:0] dense_1_out_address0;
output   dense_1_out_ce0;
input  [31:0] dense_1_out_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg dense_2_out_ce0;
reg dense_2_out_we0;
reg dense_1_out_ce0;

(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [10:0] dense_2_weights_address0;
reg    dense_2_weights_ce0;
wire   [31:0] dense_2_weights_q0;
wire   [4:0] dense_2_bias_address0;
reg    dense_2_bias_ce0;
wire   [31:0] dense_2_bias_q0;
wire   [4:0] i_fu_166_p2;
reg   [4:0] i_reg_289;
wire    ap_CS_fsm_state2;
wire   [63:0] zext_ln14_fu_172_p1;
reg   [63:0] zext_ln14_reg_294;
wire   [0:0] icmp_ln9_fu_160_p2;
wire   [11:0] zext_ln13_fu_176_p1;
reg   [11:0] zext_ln13_reg_300;
wire   [5:0] j_fu_186_p2;
reg   [5:0] j_reg_308;
wire    ap_CS_fsm_state3;
wire   [0:0] icmp_ln13_fu_180_p2;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_148_p2;
reg   [31:0] tmp_7_reg_338;
wire    ap_CS_fsm_state5;
wire   [31:0] grp_fu_142_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
reg   [31:0] tmp_reg_353;
wire    ap_CS_fsm_state13;
reg   [4:0] i_0_reg_108;
wire    ap_CS_fsm_state14;
reg   [31:0] sum_0_reg_119;
reg   [5:0] j_0_reg_131;
wire  signed [63:0] sext_ln14_fu_232_p1;
wire   [63:0] zext_ln14_4_fu_192_p1;
reg   [31:0] grp_fu_142_p1;
wire    ap_CS_fsm_state6;
wire   [10:0] tmp_3_fu_197_p3;
wire   [6:0] tmp_4_fu_209_p3;
wire   [11:0] zext_ln14_6_fu_205_p1;
wire   [11:0] zext_ln14_7_fu_217_p1;
wire   [11:0] sub_ln14_fu_221_p2;
wire   [11:0] add_ln14_fu_227_p2;
wire   [31:0] bitcast_ln19_fu_237_p1;
wire   [7:0] tmp_1_fu_240_p4;
wire   [22:0] trunc_ln19_fu_250_p1;
wire   [0:0] icmp_ln19_1_fu_260_p2;
wire   [0:0] icmp_ln19_fu_254_p2;
wire   [0:0] or_ln19_fu_266_p2;
wire   [0:0] grp_fu_154_p2;
wire   [0:0] and_ln19_fu_272_p2;
reg   [13:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'd1;
end

dense_2_dense_2_wibs #(
    .DataWidth( 32 ),
    .AddressRange( 1500 ),
    .AddressWidth( 11 ))
dense_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_weights_address0),
    .ce0(dense_2_weights_ce0),
    .q0(dense_2_weights_q0)
);

dense_2_dense_2_bjbC #(
    .DataWidth( 32 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
dense_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_bias_address0),
    .ce0(dense_2_bias_ce0),
    .q0(dense_2_bias_q0)
);

cnn_fadd_32ns_32nbkb #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32nbkb_U55(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(sum_0_reg_119),
    .din1(grp_fu_142_p1),
    .ce(1'b1),
    .dout(grp_fu_142_p2)
);

cnn_fmul_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ncud_U56(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_1_out_q0),
    .din1(dense_2_weights_q0),
    .ce(1'b1),
    .dout(grp_fu_148_p2)
);

cnn_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ndEe_U57(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_142_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd4),
    .dout(grp_fu_154_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        i_0_reg_108 <= i_reg_289;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_108 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        j_0_reg_131 <= j_reg_308;
    end else if (((icmp_ln9_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_131 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        sum_0_reg_119 <= grp_fu_142_p2;
    end else if (((icmp_ln9_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sum_0_reg_119 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_289 <= i_fu_166_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_308 <= j_fu_186_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        tmp_7_reg_338 <= grp_fu_148_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        tmp_reg_353 <= grp_fu_142_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_160_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_300[4 : 0] <= zext_ln13_fu_176_p1[4 : 0];
        zext_ln14_reg_294[4 : 0] <= zext_ln14_fu_172_p1[4 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_1_out_ce0 = 1'b1;
    end else begin
        dense_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_2_bias_ce0 = 1'b1;
    end else begin
        dense_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_2_out_ce0 = 1'b1;
    end else begin
        dense_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_2_out_we0 = 1'b1;
    end else begin
        dense_2_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_2_weights_ce0 = 1'b1;
    end else begin
        dense_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_142_p1 = dense_2_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        grp_fu_142_p1 = tmp_7_reg_338;
    end else begin
        grp_fu_142_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_160_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_180_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_227_p2 = (sub_ln14_fu_221_p2 + zext_ln13_reg_300);

assign and_ln19_fu_272_p2 = (or_ln19_fu_266_p2 & grp_fu_154_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln19_fu_237_p1 = tmp_reg_353;

assign dense_1_out_address0 = zext_ln14_4_fu_192_p1;

assign dense_2_bias_address0 = zext_ln14_reg_294;

assign dense_2_out_address0 = zext_ln14_reg_294;

assign dense_2_out_d0 = ((and_ln19_fu_272_p2[0:0] === 1'b1) ? 32'd0 : tmp_reg_353);

assign dense_2_weights_address0 = sext_ln14_fu_232_p1;

assign i_fu_166_p2 = (i_0_reg_108 + 5'd1);

assign icmp_ln13_fu_180_p2 = ((j_0_reg_131 == 6'd50) ? 1'b1 : 1'b0);

assign icmp_ln19_1_fu_260_p2 = ((trunc_ln19_fu_250_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_254_p2 = ((tmp_1_fu_240_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_160_p2 = ((i_0_reg_108 == 5'd30) ? 1'b1 : 1'b0);

assign j_fu_186_p2 = (j_0_reg_131 + 6'd1);

assign or_ln19_fu_266_p2 = (icmp_ln19_fu_254_p2 | icmp_ln19_1_fu_260_p2);

assign sext_ln14_fu_232_p1 = $signed(add_ln14_fu_227_p2);

assign sub_ln14_fu_221_p2 = (zext_ln14_6_fu_205_p1 - zext_ln14_7_fu_217_p1);

assign tmp_1_fu_240_p4 = {{bitcast_ln19_fu_237_p1[30:23]}};

assign tmp_3_fu_197_p3 = {{j_0_reg_131}, {5'd0}};

assign tmp_4_fu_209_p3 = {{j_0_reg_131}, {1'd0}};

assign trunc_ln19_fu_250_p1 = bitcast_ln19_fu_237_p1[22:0];

assign zext_ln13_fu_176_p1 = i_0_reg_108;

assign zext_ln14_4_fu_192_p1 = j_0_reg_131;

assign zext_ln14_6_fu_205_p1 = tmp_3_fu_197_p3;

assign zext_ln14_7_fu_217_p1 = tmp_4_fu_209_p3;

assign zext_ln14_fu_172_p1 = i_0_reg_108;

always @ (posedge ap_clk) begin
    zext_ln14_reg_294[63:5] <= 59'b00000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_300[11:5] <= 7'b0000000;
end

endmodule //dense_2
