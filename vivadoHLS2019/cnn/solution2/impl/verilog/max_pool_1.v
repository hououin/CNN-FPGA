// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [12:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] f_fu_207_p2;
reg   [5:0] f_reg_477;
wire    ap_CS_fsm_state2;
wire   [15:0] zext_ln12_fu_213_p1;
reg   [15:0] zext_ln12_reg_482;
wire   [0:0] icmp_ln9_fu_201_p2;
wire   [13:0] zext_ln12_2_fu_217_p1;
reg   [13:0] zext_ln12_2_reg_487;
wire   [7:0] add_ln12_fu_221_p2;
reg   [7:0] add_ln12_reg_492;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_233_p2;
reg   [3:0] r_reg_500;
wire   [4:0] shl_ln_fu_239_p3;
reg   [4:0] shl_ln_reg_505;
wire   [0:0] icmp_ln12_fu_227_p2;
wire   [3:0] c_fu_253_p2;
reg   [3:0] c_reg_513;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln2_fu_259_p3;
reg   [4:0] shl_ln2_reg_518;
wire   [0:0] icmp_ln15_fu_247_p2;
wire   [1:0] mpr_fu_277_p2;
reg   [1:0] mpr_reg_526;
wire    ap_CS_fsm_state5;
wire   [9:0] mul_ln28_fu_292_p2;
reg   [9:0] mul_ln28_reg_531;
wire   [0:0] icmp_ln19_fu_271_p2;
wire   [1:0] mpc_fu_340_p2;
reg   [1:0] mpc_reg_539;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln22_fu_334_p2;
wire   [31:0] max_3_fu_466_p3;
wire    ap_CS_fsm_state7;
reg   [5:0] f_0_reg_102;
reg   [3:0] r_0_reg_113;
reg   [7:0] phi_mul_reg_124;
reg   [3:0] c_0_reg_136;
reg   [31:0] max_0_reg_148;
reg   [1:0] mpr_0_reg_161;
reg   [31:0] max_1_reg_172;
reg   [1:0] mpc_0_reg_184;
wire   [63:0] zext_ln35_5_fu_325_p1;
wire   [63:0] zext_ln28_5_fu_377_p1;
wire   [4:0] zext_ln19_fu_267_p1;
wire   [4:0] i_fu_283_p2;
wire   [4:0] mul_ln28_fu_292_p0;
wire   [7:0] zext_ln35_fu_298_p1;
wire   [7:0] add_ln35_fu_302_p2;
wire   [12:0] tmp_1_fu_308_p3;
wire   [13:0] zext_ln35_4_fu_316_p1;
wire   [13:0] add_ln35_3_fu_320_p2;
wire   [4:0] zext_ln22_fu_330_p1;
wire   [4:0] j_fu_346_p2;
wire   [9:0] zext_ln28_3_fu_351_p1;
wire   [9:0] add_ln28_fu_355_p2;
wire   [14:0] tmp_2_fu_360_p3;
wire   [15:0] zext_ln28_4_fu_368_p1;
wire   [15:0] add_ln28_2_fu_372_p2;
wire   [31:0] bitcast_ln28_fu_382_p1;
wire   [31:0] bitcast_ln28_2_fu_400_p1;
wire   [7:0] tmp_fu_386_p4;
wire   [22:0] trunc_ln28_fu_396_p1;
wire   [0:0] icmp_ln28_4_fu_424_p2;
wire   [0:0] icmp_ln28_fu_418_p2;
wire   [7:0] tmp_9_fu_404_p4;
wire   [22:0] trunc_ln28_2_fu_414_p1;
wire   [0:0] icmp_ln28_6_fu_442_p2;
wire   [0:0] icmp_ln28_5_fu_436_p2;
wire   [0:0] or_ln28_fu_430_p2;
wire   [0:0] or_ln28_2_fu_448_p2;
wire   [0:0] and_ln28_fu_454_p2;
wire   [0:0] tmp_s_fu_195_p2;
wire   [0:0] and_ln28_2_fu_460_p2;
reg   [6:0] ap_NS_fsm;
wire   [9:0] mul_ln28_fu_292_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U11(
    .din0(conv_out_q0),
    .din1(max_1_reg_172),
    .opcode(5'd2),
    .dout(tmp_s_fu_195_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        c_0_reg_136 <= c_reg_513;
    end else if (((icmp_ln12_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_136 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_102 <= f_reg_477;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_102 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_334_p2 == 1'd1))) begin
        max_0_reg_148 <= max_1_reg_172;
    end else if (((icmp_ln15_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_148 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_1_reg_172 <= max_3_fu_466_p3;
    end else if (((icmp_ln19_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_172 <= max_0_reg_148;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mpc_0_reg_184 <= mpc_reg_539;
    end else if (((icmp_ln19_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_184 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_334_p2 == 1'd1))) begin
        mpr_0_reg_161 <= mpr_reg_526;
    end else if (((icmp_ln15_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_161 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_124 <= add_ln12_reg_492;
    end else if (((icmp_ln9_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_124 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_113 <= r_reg_500;
    end else if (((icmp_ln9_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_113 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln12_reg_492 <= add_ln12_fu_221_p2;
        r_reg_500 <= r_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_513 <= c_fu_253_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_477 <= f_fu_207_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_539 <= mpc_fu_340_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_526 <= mpr_fu_277_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_271_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln28_reg_531[9 : 1] <= mul_ln28_fu_292_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_247_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln2_reg_518[4 : 1] <= shl_ln2_fu_259_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_505[4 : 1] <= shl_ln_fu_239_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_201_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln12_2_reg_487[5 : 0] <= zext_ln12_2_fu_217_p1[5 : 0];
        zext_ln12_reg_482[5 : 0] <= zext_ln12_fu_213_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln19_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_201_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_227_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln15_fu_247_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln19_fu_271_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln22_fu_334_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_221_p2 = (phi_mul_reg_124 + 8'd13);

assign add_ln28_2_fu_372_p2 = (zext_ln12_reg_482 + zext_ln28_4_fu_368_p1);

assign add_ln28_fu_355_p2 = (zext_ln28_3_fu_351_p1 + mul_ln28_reg_531);

assign add_ln35_3_fu_320_p2 = (zext_ln35_4_fu_316_p1 + zext_ln12_2_reg_487);

assign add_ln35_fu_302_p2 = (phi_mul_reg_124 + zext_ln35_fu_298_p1);

assign and_ln28_2_fu_460_p2 = (tmp_s_fu_195_p2 & and_ln28_fu_454_p2);

assign and_ln28_fu_454_p2 = (or_ln28_fu_430_p2 & or_ln28_2_fu_448_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign bitcast_ln28_2_fu_400_p1 = max_1_reg_172;

assign bitcast_ln28_fu_382_p1 = conv_out_q0;

assign c_fu_253_p2 = (c_0_reg_136 + 4'd1);

assign conv_out_address0 = zext_ln28_5_fu_377_p1;

assign f_fu_207_p2 = (f_0_reg_102 + 6'd1);

assign i_fu_283_p2 = (zext_ln19_fu_267_p1 + shl_ln_reg_505);

assign icmp_ln12_fu_227_p2 = ((r_0_reg_113 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_247_p2 = ((c_0_reg_136 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_271_p2 = ((mpr_0_reg_161 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_334_p2 = ((mpc_0_reg_184 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_424_p2 = ((trunc_ln28_fu_396_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_436_p2 = ((tmp_9_fu_404_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_442_p2 = ((trunc_ln28_2_fu_414_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_418_p2 = ((tmp_fu_386_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_201_p2 = ((f_0_reg_102 == 6'd32) ? 1'b1 : 1'b0);

assign j_fu_346_p2 = (shl_ln2_reg_518 + zext_ln22_fu_330_p1);

assign max_3_fu_466_p3 = ((and_ln28_2_fu_460_p2[0:0] === 1'b1) ? conv_out_q0 : max_1_reg_172);

assign max_pool_out_address0 = zext_ln35_5_fu_325_p1;

assign max_pool_out_d0 = max_0_reg_148;

assign mpc_fu_340_p2 = (mpc_0_reg_184 + 2'd1);

assign mpr_fu_277_p2 = (mpr_0_reg_161 + 2'd1);

assign mul_ln28_fu_292_p0 = mul_ln28_fu_292_p00;

assign mul_ln28_fu_292_p00 = i_fu_283_p2;

assign mul_ln28_fu_292_p2 = (mul_ln28_fu_292_p0 * $signed('h1A));

assign or_ln28_2_fu_448_p2 = (icmp_ln28_6_fu_442_p2 | icmp_ln28_5_fu_436_p2);

assign or_ln28_fu_430_p2 = (icmp_ln28_fu_418_p2 | icmp_ln28_4_fu_424_p2);

assign r_fu_233_p2 = (r_0_reg_113 + 4'd1);

assign shl_ln2_fu_259_p3 = {{c_0_reg_136}, {1'd0}};

assign shl_ln_fu_239_p3 = {{r_0_reg_113}, {1'd0}};

assign tmp_1_fu_308_p3 = {{add_ln35_fu_302_p2}, {5'd0}};

assign tmp_2_fu_360_p3 = {{add_ln28_fu_355_p2}, {5'd0}};

assign tmp_9_fu_404_p4 = {{bitcast_ln28_2_fu_400_p1[30:23]}};

assign tmp_fu_386_p4 = {{bitcast_ln28_fu_382_p1[30:23]}};

assign trunc_ln28_2_fu_414_p1 = bitcast_ln28_2_fu_400_p1[22:0];

assign trunc_ln28_fu_396_p1 = bitcast_ln28_fu_382_p1[22:0];

assign zext_ln12_2_fu_217_p1 = f_0_reg_102;

assign zext_ln12_fu_213_p1 = f_0_reg_102;

assign zext_ln19_fu_267_p1 = mpr_0_reg_161;

assign zext_ln22_fu_330_p1 = mpc_0_reg_184;

assign zext_ln28_3_fu_351_p1 = j_fu_346_p2;

assign zext_ln28_4_fu_368_p1 = tmp_2_fu_360_p3;

assign zext_ln28_5_fu_377_p1 = add_ln28_2_fu_372_p2;

assign zext_ln35_4_fu_316_p1 = tmp_1_fu_308_p3;

assign zext_ln35_5_fu_325_p1 = add_ln35_3_fu_320_p2;

assign zext_ln35_fu_298_p1 = c_0_reg_136;

always @ (posedge ap_clk) begin
    zext_ln12_reg_482[15:6] <= 10'b0000000000;
    zext_ln12_2_reg_487[13:6] <= 8'b00000000;
    shl_ln_reg_505[0] <= 1'b0;
    shl_ln2_reg_518[0] <= 1'b0;
    mul_ln28_reg_531[0] <= 1'b0;
end

endmodule //max_pool_1
