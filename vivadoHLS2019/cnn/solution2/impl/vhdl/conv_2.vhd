-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv_2_weights_ce0 : STD_LOGIC;
    signal conv_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_2_bias_ce0 : STD_LOGIC;
    signal conv_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_277_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_589 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_289_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_597 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_301_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_605 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_325_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln14_reg_610 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln11_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_335_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_reg_618 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_623 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_9_fu_345_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_9_reg_628 : STD_LOGIC_VECTOR (15 downto 0);
    signal conv_out_addr_reg_633 : STD_LOGIC_VECTOR (12 downto 0);
    signal wr_fu_373_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_641 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln26_fu_401_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_reg_646 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_415_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_431_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_664 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_9_fu_450_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_669 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln21_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln24_fu_481_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln24_reg_674 : STD_LOGIC_VECTOR (13 downto 0);
    signal ch_fu_491_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_reg_682 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln24_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_0_reg_141 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_153 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_177 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal wr_0_reg_188 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_199 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_reg_211 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_223 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_234 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_246 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_11_fu_358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_8_fu_523_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_257_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln35_fu_307_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_311_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_7_fu_317_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln35_10_fu_349_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_5_fu_353_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_383_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_391_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_379_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_395_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_363_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_405_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_415_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_437_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_441_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_446_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln21_fu_421_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_458_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_6_fu_464_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_3_fu_468_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_473_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_5_fu_497_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln26_4_fu_505_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_cast_fu_510_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln26_5_fu_518_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln26_7_fu_501_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln26_6_fu_528_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln34_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_542_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_552_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln26_fu_415_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_conv_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_2_weights_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 18432,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_address0,
        ce0 => conv_2_weights_ce0,
        q0 => conv_2_weights_q0);

    conv_2_bias_U : component conv_2_conv_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_address0,
        ce0 => conv_2_bias_ce0,
        q0 => conv_2_bias_q0);

    cnn_fadd_32ns_32ncud_U14 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_257_p0,
        din1 => grp_fu_257_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_257_p2);

    cnn_fmul_32ns_32ndEe_U15 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_weights_q0,
        din1 => max_pool_1_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_264_p2);

    cnn_fcmp_32ns_32neOg_U16 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_257_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_6_fu_271_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_165 <= c_reg_605;
            elsif (((icmp_ln8_fu_283_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_165 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_246_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                ch_0_reg_246 <= ch_reg_682;
            elsif (((icmp_ln21_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_246 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    f_0_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                f_0_reg_177 <= f_reg_618;
            elsif (((icmp_ln11_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_177 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_153 <= add_ln8_reg_589;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_153 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_141 <= r_reg_597;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_141 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_425_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_199 <= w_sum_1_reg_211;
            elsif (((icmp_ln14_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_199 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_485_p2 = ap_const_lv1_1))) then 
                w_sum_1_reg_211 <= w_sum_2_reg_234;
            elsif (((icmp_ln18_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_211 <= w_sum_0_reg_199;
            end if; 
        end if;
    end process;

    w_sum_2_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                w_sum_2_reg_234 <= grp_fu_257_p2;
            elsif (((icmp_ln21_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                w_sum_2_reg_234 <= w_sum_1_reg_211;
            end if; 
        end if;
    end process;

    wc_0_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_485_p2 = ap_const_lv1_1))) then 
                wc_0_reg_223 <= wc_reg_664;
            elsif (((icmp_ln18_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_223 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_188_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_425_p2 = ap_const_lv1_1))) then 
                wr_0_reg_188 <= wr_reg_641;
            elsif (((icmp_ln14_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_188 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_589 <= add_ln8_fu_277_p2;
                r_reg_597 <= r_fu_289_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_605 <= c_fu_301_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ch_reg_682 <= ch_fu_491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_633 <= zext_ln35_11_fu_358_p1(13 - 1 downto 0);
                    zext_ln26_reg_623(6 downto 0) <= zext_ln26_fu_341_p1(6 downto 0);
                    zext_ln35_9_reg_628(6 downto 0) <= zext_ln35_9_fu_345_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_618 <= f_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln26_reg_651 <= mul_ln26_fu_415_p2;
                sext_ln26_reg_646 <= sext_ln26_fu_401_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_425_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_9_reg_669(9 downto 5) <= tmp_9_fu_450_p3(9 downto 5);
                    zext_ln24_reg_674(12 downto 5) <= zext_ln24_fu_481_p1(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_664 <= wc_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_641 <= wr_fu_373_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_295_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_610(12 downto 6) <= zext_ln14_fu_325_p1(12 downto 6);
            end if;
        end if;
    end process;
    zext_ln14_reg_610(5 downto 0) <= "000000";
    zext_ln14_reg_610(13) <= '0';
    zext_ln26_reg_623(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    zext_ln35_9_reg_628(15 downto 7) <= "000000000";
    tmp_9_reg_669(4 downto 0) <= "00000";
    zext_ln24_reg_674(4 downto 0) <= "00000";
    zext_ln24_reg_674(13) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_295_p2, ap_CS_fsm_state4, icmp_ln14_fu_329_p2, ap_CS_fsm_state5, icmp_ln18_fu_367_p2, ap_CS_fsm_state6, icmp_ln21_fu_425_p2, ap_CS_fsm_state7, icmp_ln24_fu_485_p2, icmp_ln8_fu_283_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_283_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_295_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_367_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_425_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_485_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_458_p2 <= std_logic_vector(unsigned(zext_ln21_fu_421_p1) + unsigned(c_0_reg_165));
    add_ln26_2_fu_441_p2 <= std_logic_vector(signed(sext_ln26_reg_646) + signed(zext_ln26_4_fu_437_p1));
    add_ln26_3_fu_468_p2 <= std_logic_vector(unsigned(mul_ln26_reg_651) + unsigned(zext_ln26_6_fu_464_p1));
    add_ln26_4_fu_505_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_497_p1) + unsigned(tmp_9_reg_669));
    add_ln26_5_fu_518_p2 <= std_logic_vector(unsigned(zext_ln35_9_reg_628) + unsigned(tmp_29_cast_fu_510_p3));
    add_ln26_6_fu_528_p2 <= std_logic_vector(unsigned(zext_ln26_7_fu_501_p1) + unsigned(zext_ln24_reg_674));
    add_ln26_fu_405_p2 <= std_logic_vector(unsigned(zext_ln18_fu_363_p1) + unsigned(r_0_reg_141));
    add_ln35_5_fu_353_p2 <= std_logic_vector(unsigned(zext_ln14_reg_610) + unsigned(zext_ln35_10_fu_349_p1));
    add_ln35_fu_311_p2 <= std_logic_vector(unsigned(phi_mul_reg_153) + unsigned(zext_ln35_fu_307_p1));
    add_ln8_fu_277_p2 <= std_logic_vector(unsigned(phi_mul_reg_153) + unsigned(ap_const_lv7_B));
    and_ln34_fu_574_p2 <= (tmp_6_fu_271_p2 and or_ln34_fu_568_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_283_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_283_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_283_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_283_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_538_p1 <= grp_fu_257_p2;
    c_fu_301_p2 <= std_logic_vector(unsigned(c_0_reg_165) + unsigned(ap_const_lv4_1));
    ch_fu_491_p2 <= std_logic_vector(unsigned(ch_0_reg_246) + unsigned(ap_const_lv6_1));
    conv_2_bias_address0 <= zext_ln26_reg_623(6 - 1 downto 0);

    conv_2_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_address0 <= zext_ln26_8_fu_523_p1(15 - 1 downto 0);

    conv_2_weights_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_633;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_257_p2 when (and_ln34_fu_574_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_335_p2 <= std_logic_vector(unsigned(f_0_reg_177) + unsigned(ap_const_lv7_1));

    grp_fu_257_p0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, w_sum_0_reg_199, w_sum_2_reg_234)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_257_p0 <= w_sum_0_reg_199;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_257_p0 <= w_sum_2_reg_234;
        else 
            grp_fu_257_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_257_p1_assign_proc : process(conv_2_bias_q0, grp_fu_264_p2, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_257_p1 <= conv_2_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_257_p1 <= grp_fu_264_p2;
        else 
            grp_fu_257_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_295_p2 <= "1" when (c_0_reg_165 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_329_p2 <= "1" when (f_0_reg_177 = ap_const_lv7_40) else "0";
    icmp_ln18_fu_367_p2 <= "1" when (wr_0_reg_188 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_425_p2 <= "1" when (wc_0_reg_223 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_485_p2 <= "1" when (ch_0_reg_246 = ap_const_lv6_20) else "0";
    icmp_ln34_1_fu_562_p2 <= "1" when (trunc_ln34_fu_552_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_556_p2 <= "0" when (tmp_fu_542_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_283_p2 <= "1" when (r_0_reg_141 = ap_const_lv4_B) else "0";
    max_pool_1_out_address0 <= zext_ln26_9_fu_533_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_415_p0 <= mul_ln26_fu_415_p00(4 - 1 downto 0);
    mul_ln26_fu_415_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_405_p2),8));
    mul_ln26_fu_415_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_415_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln34_fu_568_p2 <= (icmp_ln34_fu_556_p2 or icmp_ln34_1_fu_562_p2);
    r_fu_289_p2 <= std_logic_vector(unsigned(r_0_reg_141) + unsigned(ap_const_lv4_1));
        sext_ln26_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_395_p2),6));

    sub_ln26_fu_395_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_391_p1) - unsigned(zext_ln26_1_fu_379_p1));
    tmp_10_fu_473_p3 <= (add_ln26_3_fu_468_p2 & ap_const_lv5_0);
    tmp_29_cast_fu_510_p3 <= (add_ln26_4_fu_505_p2 & ap_const_lv6_0);
    tmp_7_fu_317_p3 <= (add_ln35_fu_311_p2 & ap_const_lv6_0);
    tmp_8_fu_383_p3 <= (wr_0_reg_188 & ap_const_lv2_0);
    tmp_9_fu_450_p3 <= (trunc_ln26_fu_446_p1 & ap_const_lv5_0);
    tmp_fu_542_p4 <= bitcast_ln34_fu_538_p1(30 downto 23);
    trunc_ln26_fu_446_p1 <= add_ln26_2_fu_441_p2(5 - 1 downto 0);
    trunc_ln34_fu_552_p1 <= bitcast_ln34_fu_538_p1(23 - 1 downto 0);
    wc_fu_431_p2 <= std_logic_vector(unsigned(wc_0_reg_223) + unsigned(ap_const_lv2_1));
    wr_fu_373_p2 <= std_logic_vector(unsigned(wr_0_reg_188) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_317_p3),14));
    zext_ln18_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_188),4));
    zext_ln21_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_223),4));
    zext_ln24_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_473_p3),14));
    zext_ln26_1_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_188),5));
    zext_ln26_2_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_383_p3),5));
    zext_ln26_4_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_223),6));
    zext_ln26_5_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_246),10));
    zext_ln26_6_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_458_p2),8));
    zext_ln26_7_fu_501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_246),14));
    zext_ln26_8_fu_523_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_518_p2),64));
    zext_ln26_9_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_528_p2),64));
    zext_ln26_fu_341_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_177),64));
    zext_ln35_10_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_177),14));
    zext_ln35_11_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_5_fu_353_p2),64));
    zext_ln35_9_fu_345_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_177),16));
    zext_ln35_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_165),7));
end behav;
