-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (17 downto 0) := "000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (17 downto 0) := "000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (17 downto 0) := "000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (17 downto 0) := "000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (17 downto 0) := "000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (17 downto 0) := "000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (17 downto 0) := "000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (17 downto 0) := "000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (17 downto 0) := "000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (17 downto 0) := "001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (17 downto 0) := "010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_ce0 : STD_LOGIC;
    signal conv_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_ce0 : STD_LOGIC;
    signal conv_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln8_fu_280_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_618 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_292_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_626 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_304_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_634 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_328_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_639 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_338_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_647 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_652 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln35_1_fu_348_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_1_reg_657 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_addr_reg_662 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_376_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_670 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln26_fu_404_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln26_reg_675 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln26_fu_418_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln26_reg_680 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_434_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_693 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln26_1_fu_469_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln26_1_reg_698 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln26_2_fu_510_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_reg_703 : STD_LOGIC_VECTOR (10 downto 0);
    signal ch_fu_522_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_711 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln24_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_736 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal w_sum_reg_751 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal r_0_reg_145 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_157 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_181 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal wr_0_reg_192 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_0_reg_203 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_1_reg_215 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_227 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_2_reg_238 : STD_LOGIC_VECTOR (31 downto 0);
    signal ch_0_reg_250 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln35_3_fu_361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_9_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_10_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal zext_ln35_fu_310_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln35_fu_314_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_8_fu_320_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_2_fu_352_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_1_fu_356_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_9_fu_386_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_2_fu_394_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_1_fu_382_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_398_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_366_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_408_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln26_fu_418_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_4_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln26_2_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln26_fu_449_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_453_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_461_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_424_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_475_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln26_6_fu_481_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln26_3_fu_485_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_498_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_490_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_7_fu_506_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_5_fu_528_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln26_4_fu_536_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_31_cast_fu_541_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_5_fu_549_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_8_fu_532_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_6_fu_559_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln34_fu_569_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_572_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_582_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_1_fu_592_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_586_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln26_fu_418_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fadd_32ns_32nbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_conv_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_2_weights_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_address0,
        ce0 => conv_2_weights_ce0,
        q0 => conv_2_weights_q0);

    conv_2_bias_U : component conv_2_conv_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_address0,
        ce0 => conv_2_bias_ce0,
        q0 => conv_2_bias_q0);

    cnn_fadd_32ns_32nbkb_U36 : component cnn_fadd_32ns_32nbkb
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p0,
        din1 => grp_fu_261_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_261_p2);

    cnn_fmul_32ns_32ncud_U37 : component cnn_fmul_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_weights_q0,
        din1 => max_pool_1_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_268_p2);

    cnn_fcmp_32ns_32ndEe_U38 : component cnn_fcmp_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_261_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_274_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_169 <= c_reg_634;
            elsif (((icmp_ln8_fu_286_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_169 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_250_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_reg_250 <= ch_reg_711;
            elsif (((icmp_ln21_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_250 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                f_0_reg_181 <= f_reg_647;
            elsif (((icmp_ln11_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_181 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_298_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_157 <= add_ln8_reg_618;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_157 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_145_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_298_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_145 <= r_reg_626;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_145 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_428_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_203 <= w_sum_1_reg_215;
            elsif (((icmp_ln14_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_203 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_516_p2 = ap_const_lv1_1))) then 
                w_sum_1_reg_215 <= w_sum_2_reg_238;
            elsif (((icmp_ln18_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_215 <= w_sum_0_reg_203;
            end if; 
        end if;
    end process;

    w_sum_2_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                w_sum_2_reg_238 <= grp_fu_261_p2;
            elsif (((icmp_ln21_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                w_sum_2_reg_238 <= w_sum_1_reg_215;
            end if; 
        end if;
    end process;

    wc_0_reg_227_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_516_p2 = ap_const_lv1_1))) then 
                wc_0_reg_227 <= wc_reg_693;
            elsif (((icmp_ln18_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_227 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_192_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_428_p2 = ap_const_lv1_1))) then 
                wr_0_reg_192 <= wr_reg_670;
            elsif (((icmp_ln14_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_192 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_618 <= add_ln8_fu_280_p2;
                r_reg_626 <= r_fu_292_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_634 <= c_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ch_reg_711 <= ch_fu_522_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_662 <= zext_ln35_3_fu_361_p1(11 - 1 downto 0);
                    zext_ln26_reg_652(4 downto 0) <= zext_ln26_fu_344_p1(4 downto 0);
                    zext_ln35_1_reg_657(4 downto 0) <= zext_ln35_1_fu_348_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_647 <= f_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln26_reg_680 <= mul_ln26_fu_418_p2;
                sext_ln26_reg_675 <= sext_ln26_fu_404_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_428_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln26_1_reg_698(6 downto 1) <= sub_ln26_1_fu_469_p2(6 downto 1);
                    sub_ln26_2_reg_703(10 downto 1) <= sub_ln26_2_fu_510_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_s_reg_736 <= grp_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                w_sum_reg_751 <= grp_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_693 <= wc_fu_434_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_670 <= wr_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_298_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_639(10 downto 4) <= zext_ln14_fu_328_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_639(3 downto 0) <= "0000";
    zext_ln14_reg_639(11) <= '0';
    zext_ln26_reg_652(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln35_1_reg_657(10 downto 5) <= "000000";
    sub_ln26_1_reg_698(0) <= '0';
    sub_ln26_2_reg_703(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_298_p2, ap_CS_fsm_state4, icmp_ln14_fu_332_p2, ap_CS_fsm_state5, icmp_ln18_fu_370_p2, ap_CS_fsm_state6, icmp_ln21_fu_428_p2, ap_CS_fsm_state7, icmp_ln24_fu_516_p2, icmp_ln8_fu_286_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_286_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_298_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln14_fu_332_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_428_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_516_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln26_1_fu_475_p2 <= std_logic_vector(unsigned(c_0_reg_169) + unsigned(zext_ln21_fu_424_p1));
    add_ln26_2_fu_444_p2 <= std_logic_vector(unsigned(zext_ln26_4_fu_440_p1) + unsigned(sext_ln26_reg_675));
    add_ln26_3_fu_485_p2 <= std_logic_vector(unsigned(zext_ln26_6_fu_481_p1) + unsigned(mul_ln26_reg_680));
    add_ln26_4_fu_536_p2 <= std_logic_vector(unsigned(zext_ln26_5_fu_528_p1) + unsigned(sub_ln26_1_reg_698));
    add_ln26_5_fu_549_p2 <= std_logic_vector(unsigned(zext_ln35_1_reg_657) + unsigned(tmp_31_cast_fu_541_p3));
    add_ln26_6_fu_559_p2 <= std_logic_vector(unsigned(zext_ln26_8_fu_532_p1) + unsigned(sub_ln26_2_reg_703));
    add_ln26_fu_408_p2 <= std_logic_vector(unsigned(zext_ln18_fu_366_p1) + unsigned(r_0_reg_145));
    add_ln35_1_fu_356_p2 <= std_logic_vector(unsigned(zext_ln14_reg_639) + unsigned(zext_ln35_2_fu_352_p1));
    add_ln35_fu_314_p2 <= std_logic_vector(unsigned(phi_mul_reg_157) + unsigned(zext_ln35_fu_310_p1));
    add_ln8_fu_280_p2 <= std_logic_vector(unsigned(phi_mul_reg_157) + unsigned(ap_const_lv7_B));
    and_ln34_fu_604_p2 <= (or_ln34_fu_598_p2 and grp_fu_274_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_286_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_286_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_286_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_286_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_569_p1 <= w_sum_reg_751;
    c_fu_304_p2 <= std_logic_vector(unsigned(c_0_reg_169) + unsigned(ap_const_lv4_1));
    ch_fu_522_p2 <= std_logic_vector(unsigned(ch_0_reg_250) + unsigned(ap_const_lv3_1));
    conv_2_bias_address0 <= zext_ln26_reg_652(4 - 1 downto 0);

    conv_2_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_address0 <= zext_ln26_9_fu_554_p1(10 - 1 downto 0);

    conv_2_weights_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_662;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_751 when (and_ln34_fu_604_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_338_p2 <= std_logic_vector(unsigned(f_0_reg_181) + unsigned(ap_const_lv5_1));

    grp_fu_261_p0_assign_proc : process(ap_CS_fsm_state14, w_sum_0_reg_203, w_sum_2_reg_238, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_261_p0 <= w_sum_0_reg_203;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_261_p0 <= w_sum_2_reg_238;
        else 
            grp_fu_261_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_261_p1_assign_proc : process(conv_2_bias_q0, tmp_s_reg_736, ap_CS_fsm_state14, ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_fu_261_p1 <= conv_2_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_261_p1 <= tmp_s_reg_736;
        else 
            grp_fu_261_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_298_p2 <= "1" when (c_0_reg_169 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_332_p2 <= "1" when (f_0_reg_181 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_370_p2 <= "1" when (wr_0_reg_192 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_428_p2 <= "1" when (wc_0_reg_227 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_516_p2 <= "1" when (ch_0_reg_250 = ap_const_lv3_6) else "0";
    icmp_ln34_1_fu_592_p2 <= "1" when (trunc_ln34_fu_582_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_586_p2 <= "0" when (tmp_fu_572_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_286_p2 <= "1" when (r_0_reg_145 = ap_const_lv4_B) else "0";
    max_pool_1_out_address0 <= zext_ln26_10_fu_564_p1(10 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln26_fu_418_p0 <= mul_ln26_fu_418_p00(4 - 1 downto 0);
    mul_ln26_fu_418_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_408_p2),8));
    mul_ln26_fu_418_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln26_fu_418_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln34_fu_598_p2 <= (icmp_ln34_fu_586_p2 or icmp_ln34_1_fu_592_p2);
    p_shl1_cast_fu_490_p3 <= (add_ln26_3_fu_485_p2 & ap_const_lv3_0);
    p_shl_fu_453_p3 <= (trunc_ln26_fu_449_p1 & ap_const_lv3_0);
    r_fu_292_p2 <= std_logic_vector(unsigned(r_0_reg_145) + unsigned(ap_const_lv4_1));
        sext_ln26_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln26_fu_398_p2),6));

    sub_ln26_1_fu_469_p2 <= std_logic_vector(unsigned(p_shl_fu_453_p3) - unsigned(tmp_10_fu_461_p3));
    sub_ln26_2_fu_510_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_490_p3) - unsigned(zext_ln26_7_fu_506_p1));
    sub_ln26_fu_398_p2 <= std_logic_vector(unsigned(zext_ln26_2_fu_394_p1) - unsigned(zext_ln26_1_fu_382_p1));
    tmp_10_fu_461_p3 <= (add_ln26_2_fu_444_p2 & ap_const_lv1_0);
    tmp_11_fu_498_p3 <= (add_ln26_3_fu_485_p2 & ap_const_lv1_0);
    tmp_31_cast_fu_541_p3 <= (add_ln26_4_fu_536_p2 & ap_const_lv4_0);
    tmp_8_fu_320_p3 <= (add_ln35_fu_314_p2 & ap_const_lv4_0);
    tmp_9_fu_386_p3 <= (wr_0_reg_192 & ap_const_lv2_0);
    tmp_fu_572_p4 <= bitcast_ln34_fu_569_p1(30 downto 23);
    trunc_ln26_fu_449_p1 <= add_ln26_2_fu_444_p2(4 - 1 downto 0);
    trunc_ln34_fu_582_p1 <= bitcast_ln34_fu_569_p1(23 - 1 downto 0);
    wc_fu_434_p2 <= std_logic_vector(unsigned(wc_0_reg_227) + unsigned(ap_const_lv2_1));
    wr_fu_376_p2 <= std_logic_vector(unsigned(wr_0_reg_192) + unsigned(ap_const_lv2_1));
    zext_ln14_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_320_p3),12));
    zext_ln18_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_192),4));
    zext_ln21_fu_424_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_227),4));
    zext_ln26_10_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_6_fu_559_p2),64));
    zext_ln26_1_fu_382_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_192),5));
    zext_ln26_2_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_386_p3),5));
    zext_ln26_4_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_227),6));
    zext_ln26_5_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_250),7));
    zext_ln26_6_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_475_p2),8));
    zext_ln26_7_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_498_p3),11));
    zext_ln26_8_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_250),11));
    zext_ln26_9_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_5_fu_549_p2),64));
    zext_ln26_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_181),64));
    zext_ln35_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_181),11));
    zext_ln35_2_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_181),12));
    zext_ln35_3_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_1_fu_356_p2),64));
    zext_ln35_fu_310_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_169),7));
end behav;
