// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_0_address0,
        conv_out_0_ce0,
        conv_out_0_we0,
        conv_out_0_d0,
        conv_out_1_address0,
        conv_out_1_ce0,
        conv_out_1_we0,
        conv_out_1_d0,
        conv_out_2_address0,
        conv_out_2_ce0,
        conv_out_2_we0,
        conv_out_2_d0,
        conv_out_3_address0,
        conv_out_3_ce0,
        conv_out_3_we0,
        conv_out_3_d0
);

parameter    ap_ST_fsm_state1 = 17'd1;
parameter    ap_ST_fsm_state2 = 17'd2;
parameter    ap_ST_fsm_state3 = 17'd4;
parameter    ap_ST_fsm_state4 = 17'd8;
parameter    ap_ST_fsm_state5 = 17'd16;
parameter    ap_ST_fsm_state6 = 17'd32;
parameter    ap_ST_fsm_state7 = 17'd64;
parameter    ap_ST_fsm_state8 = 17'd128;
parameter    ap_ST_fsm_state9 = 17'd256;
parameter    ap_ST_fsm_state10 = 17'd512;
parameter    ap_ST_fsm_state11 = 17'd1024;
parameter    ap_ST_fsm_state12 = 17'd2048;
parameter    ap_ST_fsm_state13 = 17'd4096;
parameter    ap_ST_fsm_state14 = 17'd8192;
parameter    ap_ST_fsm_state15 = 17'd16384;
parameter    ap_ST_fsm_state16 = 17'd32768;
parameter    ap_ST_fsm_state17 = 17'd65536;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [10:0] conv_out_0_address0;
output   conv_out_0_ce0;
output   conv_out_0_we0;
output  [31:0] conv_out_0_d0;
output  [10:0] conv_out_1_address0;
output   conv_out_1_ce0;
output   conv_out_1_we0;
output  [31:0] conv_out_1_d0;
output  [9:0] conv_out_2_address0;
output   conv_out_2_ce0;
output   conv_out_2_we0;
output  [31:0] conv_out_2_d0;
output  [9:0] conv_out_3_address0;
output   conv_out_3_ce0;
output   conv_out_3_we0;
output  [31:0] conv_out_3_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_0_ce0;
reg conv_out_0_we0;
reg conv_out_1_ce0;
reg conv_out_1_we0;
reg conv_out_2_ce0;
reg conv_out_2_we0;
reg conv_out_3_ce0;
reg conv_out_3_we0;

(* fsm_encoding = "none" *) reg   [16:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_1_weights_address0;
reg    conv_1_weights_ce0;
wire   [31:0] conv_1_weights_q0;
wire   [2:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
wire   [4:0] r_fu_293_p2;
reg   [4:0] r_reg_703;
wire    ap_CS_fsm_state2;
wire  signed [9:0] sext_ln30_fu_321_p1;
reg  signed [9:0] sext_ln30_reg_708;
wire   [0:0] icmp_ln8_fu_287_p2;
wire  signed [9:0] sext_ln30_1_fu_343_p1;
reg  signed [9:0] sext_ln30_1_reg_713;
wire   [4:0] c_fu_353_p2;
reg   [4:0] c_reg_721;
wire    ap_CS_fsm_state3;
wire   [1:0] trunc_ln30_fu_359_p1;
reg   [1:0] trunc_ln30_reg_726;
wire   [0:0] icmp_ln11_fu_347_p2;
wire   [11:0] sub_ln30_2_fu_406_p2;
reg   [11:0] sub_ln30_2_reg_730;
wire   [10:0] sub_ln30_3_fu_437_p2;
reg   [10:0] sub_ln30_3_reg_735;
wire   [2:0] f_fu_449_p2;
reg   [2:0] f_reg_743;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln23_fu_455_p1;
reg   [63:0] zext_ln23_reg_748;
wire   [0:0] icmp_ln14_fu_443_p2;
wire   [6:0] zext_ln30_4_fu_459_p1;
reg   [6:0] zext_ln30_4_reg_753;
reg   [10:0] conv_out_0_addr_reg_758;
reg   [10:0] conv_out_1_addr_reg_763;
reg   [9:0] conv_out_2_addr_reg_768;
reg   [9:0] conv_out_3_addr_reg_773;
wire   [1:0] wr_fu_503_p2;
reg   [1:0] wr_reg_781;
wire    ap_CS_fsm_state5;
wire  signed [5:0] sext_ln23_fu_527_p1;
reg  signed [5:0] sext_ln23_reg_786;
wire   [0:0] icmp_ln18_fu_497_p2;
wire   [10:0] sub_ln23_1_fu_561_p2;
reg   [10:0] sub_ln23_1_reg_791;
wire   [1:0] wc_fu_577_p2;
reg   [1:0] wc_reg_804;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln21_fu_571_p2;
wire    ap_CS_fsm_state7;
wire   [31:0] grp_fu_275_p2;
reg   [31:0] tmp_s_reg_829;
wire    ap_CS_fsm_state8;
wire   [31:0] grp_fu_268_p2;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
reg   [31:0] w_sum_reg_844;
wire    ap_CS_fsm_state16;
reg   [4:0] r_0_reg_187;
reg   [4:0] c_0_reg_199;
reg   [2:0] f_0_reg_211;
wire    ap_CS_fsm_state17;
reg   [31:0] w_sum_0_reg_222;
reg   [1:0] wr_0_reg_234;
reg   [31:0] w_sum_1_reg_245;
reg   [1:0] wc_0_reg_257;
wire   [63:0] zext_ln30_7_fu_476_p1;
wire   [63:0] zext_ln30_8_fu_487_p1;
wire   [63:0] zext_ln23_5_fu_623_p1;
wire  signed [63:0] sext_ln23_1_fu_643_p1;
wire   [31:0] w_sum_5_fu_689_p3;
reg   [31:0] grp_fu_268_p0;
reg   [31:0] grp_fu_268_p1;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_159_fu_303_p3;
wire   [8:0] zext_ln30_1_fu_311_p1;
wire   [8:0] zext_ln30_fu_299_p1;
wire   [8:0] sub_ln30_fu_315_p2;
wire   [5:0] tmp_160_fu_325_p3;
wire   [8:0] zext_ln30_2_fu_333_p1;
wire   [8:0] sub_ln30_1_fu_337_p2;
wire   [2:0] tmp_156_fu_363_p4;
wire   [9:0] zext_ln30_3_fu_373_p1;
wire   [9:0] add_ln30_fu_377_p2;
wire   [8:0] trunc_ln30_1_fu_382_p1;
wire   [10:0] tmp_157_fu_394_p3;
wire   [11:0] p_shl5_cast_fu_386_p3;
wire  signed [11:0] sext_ln30_2_fu_402_p1;
wire   [9:0] add_ln30_1_fu_412_p2;
wire   [7:0] trunc_ln30_2_fu_417_p1;
wire   [10:0] p_shl3_cast_fu_421_p3;
wire   [10:0] p_shl4_cast_fu_429_p3;
wire   [11:0] zext_ln30_6_fu_467_p1;
wire   [11:0] add_ln30_2_fu_471_p2;
wire   [10:0] zext_ln30_5_fu_463_p1;
wire   [10:0] add_ln30_3_fu_482_p2;
wire   [3:0] tmp_161_fu_509_p3;
wire   [4:0] zext_ln23_1_fu_517_p1;
wire   [4:0] zext_ln18_fu_493_p1;
wire   [4:0] sub_ln23_fu_521_p2;
wire   [4:0] add_ln23_fu_531_p2;
wire   [9:0] tmp_162_fu_537_p3;
wire   [6:0] tmp_163_fu_549_p3;
wire   [10:0] zext_ln23_2_fu_545_p1;
wire   [10:0] zext_ln23_3_fu_557_p1;
wire   [5:0] zext_ln23_4_fu_583_p1;
wire   [5:0] add_ln23_2_fu_587_p2;
wire   [3:0] trunc_ln23_fu_592_p1;
wire   [6:0] p_shl10_cast_fu_596_p3;
wire   [6:0] p_shl11_cast_fu_604_p3;
wire   [6:0] sub_ln23_2_fu_612_p2;
wire   [6:0] add_ln23_3_fu_618_p2;
wire   [4:0] zext_ln21_fu_567_p1;
wire   [4:0] add_ln23_1_fu_628_p2;
wire   [10:0] zext_ln23_6_fu_634_p1;
wire   [10:0] add_ln23_4_fu_638_p2;
wire   [31:0] bitcast_ln29_fu_648_p1;
wire   [7:0] tmp_fu_651_p4;
wire   [22:0] trunc_ln29_fu_661_p1;
wire   [0:0] icmp_ln29_185_fu_671_p2;
wire   [0:0] icmp_ln29_fu_665_p2;
wire   [0:0] or_ln29_fu_677_p2;
wire   [0:0] grp_fu_281_p2;
wire   [0:0] and_ln29_fu_683_p2;
reg   [16:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 17'd1;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_address0),
    .ce0(conv_1_weights_ce0),
    .q0(conv_1_weights_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_268_p0),
    .din1(grp_fu_268_p1),
    .ce(1'b1),
    .dout(grp_fu_268_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_275_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_268_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_281_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_443_p2 == 1'd1))) begin
        c_0_reg_199 <= c_reg_721;
    end else if (((icmp_ln8_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_199 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        f_0_reg_211 <= f_reg_743;
    end else if (((icmp_ln11_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_211 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_347_p2 == 1'd1))) begin
        r_0_reg_187 <= r_reg_703;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_187 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_571_p2 == 1'd1))) begin
        w_sum_0_reg_222 <= w_sum_1_reg_245;
    end else if (((icmp_ln14_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        w_sum_0_reg_222 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        w_sum_1_reg_245 <= grp_fu_268_p2;
    end else if (((icmp_ln18_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        w_sum_1_reg_245 <= w_sum_0_reg_222;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        wc_0_reg_257 <= wc_reg_804;
    end else if (((icmp_ln18_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        wc_0_reg_257 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_571_p2 == 1'd1))) begin
        wr_0_reg_234 <= wr_reg_781;
    end else if (((icmp_ln14_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        wr_0_reg_234 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_721 <= c_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln14_fu_443_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_0_addr_reg_758 <= zext_ln30_7_fu_476_p1;
        conv_out_1_addr_reg_763 <= zext_ln30_7_fu_476_p1;
        conv_out_2_addr_reg_768 <= zext_ln30_8_fu_487_p1;
        conv_out_3_addr_reg_773 <= zext_ln30_8_fu_487_p1;
        zext_ln23_reg_748[2 : 0] <= zext_ln23_fu_455_p1[2 : 0];
        zext_ln30_4_reg_753[2 : 0] <= zext_ln30_4_fu_459_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_743 <= f_fu_449_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_703 <= r_fu_293_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        sext_ln23_reg_786 <= sext_ln23_fu_527_p1;
        sub_ln23_1_reg_791[10 : 2] <= sub_ln23_1_fu_561_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_287_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        sext_ln30_1_reg_713[9 : 1] <= sext_ln30_1_fu_343_p1[9 : 1];
        sext_ln30_reg_708 <= sext_ln30_fu_321_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln11_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln30_2_reg_730[11 : 1] <= sub_ln30_2_fu_406_p2[11 : 1];
        sub_ln30_3_reg_735[10 : 1] <= sub_ln30_3_fu_437_p2[10 : 1];
        trunc_ln30_reg_726 <= trunc_ln30_fu_359_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        tmp_s_reg_829 <= grp_fu_275_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        w_sum_reg_844 <= grp_fu_268_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wc_reg_804 <= wc_fu_577_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_reg_781 <= wr_fu_503_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln8_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_1_weights_ce0 = 1'b1;
    end else begin
        conv_1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_out_0_ce0 = 1'b1;
    end else begin
        conv_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (trunc_ln30_reg_726 == 2'd0))) begin
        conv_out_0_we0 = 1'b1;
    end else begin
        conv_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_out_1_ce0 = 1'b1;
    end else begin
        conv_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (trunc_ln30_reg_726 == 2'd1))) begin
        conv_out_1_we0 = 1'b1;
    end else begin
        conv_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_out_2_ce0 = 1'b1;
    end else begin
        conv_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (trunc_ln30_reg_726 == 2'd2))) begin
        conv_out_2_we0 = 1'b1;
    end else begin
        conv_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        conv_out_3_ce0 = 1'b1;
    end else begin
        conv_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) & (trunc_ln30_reg_726 == 2'd3))) begin
        conv_out_3_we0 = 1'b1;
    end else begin
        conv_out_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_268_p0 = w_sum_0_reg_222;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_268_p0 = w_sum_1_reg_245;
    end else begin
        grp_fu_268_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_268_p1 = conv_1_bias_q0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        grp_fu_268_p1 = tmp_s_reg_829;
    end else begin
        grp_fu_268_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_287_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln11_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln14_fu_443_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln18_fu_497_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln21_fu_571_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_628_p2 = (c_0_reg_199 + zext_ln21_fu_567_p1);

assign add_ln23_2_fu_587_p2 = ($signed(zext_ln23_4_fu_583_p1) + $signed(sext_ln23_reg_786));

assign add_ln23_3_fu_618_p2 = (zext_ln30_4_reg_753 + sub_ln23_2_fu_612_p2);

assign add_ln23_4_fu_638_p2 = (zext_ln23_6_fu_634_p1 + sub_ln23_1_reg_791);

assign add_ln23_fu_531_p2 = (zext_ln18_fu_493_p1 + r_0_reg_187);

assign add_ln30_1_fu_412_p2 = ($signed(zext_ln30_3_fu_373_p1) + $signed(sext_ln30_1_reg_713));

assign add_ln30_2_fu_471_p2 = (sub_ln30_2_reg_730 + zext_ln30_6_fu_467_p1);

assign add_ln30_3_fu_482_p2 = (sub_ln30_3_reg_735 + zext_ln30_5_fu_463_p1);

assign add_ln30_fu_377_p2 = ($signed(zext_ln30_3_fu_373_p1) + $signed(sext_ln30_reg_708));

assign and_ln29_fu_683_p2 = (or_ln29_fu_677_p2 & grp_fu_281_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln29_fu_648_p1 = w_sum_reg_844;

assign c_fu_353_p2 = (c_0_reg_199 + 5'd1);

assign conv_1_bias_address0 = zext_ln23_reg_748;

assign conv_1_weights_address0 = zext_ln23_5_fu_623_p1;

assign conv_out_0_address0 = conv_out_0_addr_reg_758;

assign conv_out_0_d0 = w_sum_5_fu_689_p3;

assign conv_out_1_address0 = conv_out_1_addr_reg_763;

assign conv_out_1_d0 = w_sum_5_fu_689_p3;

assign conv_out_2_address0 = conv_out_2_addr_reg_768;

assign conv_out_2_d0 = w_sum_5_fu_689_p3;

assign conv_out_3_address0 = conv_out_3_addr_reg_773;

assign conv_out_3_d0 = w_sum_5_fu_689_p3;

assign f_fu_449_p2 = (f_0_reg_211 + 3'd1);

assign icmp_ln11_fu_347_p2 = ((c_0_reg_199 == 5'd26) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_443_p2 = ((f_0_reg_211 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_497_p2 = ((wr_0_reg_234 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_571_p2 = ((wc_0_reg_257 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln29_185_fu_671_p2 = ((trunc_ln29_fu_661_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_665_p2 = ((tmp_fu_651_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_287_p2 = ((r_0_reg_187 == 5'd26) ? 1'b1 : 1'b0);

assign input_r_address0 = sext_ln23_1_fu_643_p1;

assign or_ln29_fu_677_p2 = (icmp_ln29_fu_665_p2 | icmp_ln29_185_fu_671_p2);

assign p_shl10_cast_fu_596_p3 = {{trunc_ln23_fu_592_p1}, {3'd0}};

assign p_shl11_cast_fu_604_p3 = {{add_ln23_2_fu_587_p2}, {1'd0}};

assign p_shl3_cast_fu_421_p3 = {{trunc_ln30_2_fu_417_p1}, {3'd0}};

assign p_shl4_cast_fu_429_p3 = {{add_ln30_1_fu_412_p2}, {1'd0}};

assign p_shl5_cast_fu_386_p3 = {{trunc_ln30_1_fu_382_p1}, {3'd0}};

assign r_fu_293_p2 = (r_0_reg_187 + 5'd1);

assign sext_ln23_1_fu_643_p1 = $signed(add_ln23_4_fu_638_p2);

assign sext_ln23_fu_527_p1 = $signed(sub_ln23_fu_521_p2);

assign sext_ln30_1_fu_343_p1 = $signed(sub_ln30_1_fu_337_p2);

assign sext_ln30_2_fu_402_p1 = $signed(tmp_157_fu_394_p3);

assign sext_ln30_fu_321_p1 = $signed(sub_ln30_fu_315_p2);

assign sub_ln23_1_fu_561_p2 = (zext_ln23_2_fu_545_p1 - zext_ln23_3_fu_557_p1);

assign sub_ln23_2_fu_612_p2 = (p_shl10_cast_fu_596_p3 - p_shl11_cast_fu_604_p3);

assign sub_ln23_fu_521_p2 = (zext_ln23_1_fu_517_p1 - zext_ln18_fu_493_p1);

assign sub_ln30_1_fu_337_p2 = (zext_ln30_1_fu_311_p1 - zext_ln30_2_fu_333_p1);

assign sub_ln30_2_fu_406_p2 = ($signed(p_shl5_cast_fu_386_p3) - $signed(sext_ln30_2_fu_402_p1));

assign sub_ln30_3_fu_437_p2 = (p_shl3_cast_fu_421_p3 - p_shl4_cast_fu_429_p3);

assign sub_ln30_fu_315_p2 = (zext_ln30_1_fu_311_p1 - zext_ln30_fu_299_p1);

assign tmp_156_fu_363_p4 = {{c_0_reg_199[4:2]}};

assign tmp_157_fu_394_p3 = {{add_ln30_fu_377_p2}, {1'd0}};

assign tmp_159_fu_303_p3 = {{r_0_reg_187}, {3'd0}};

assign tmp_160_fu_325_p3 = {{r_0_reg_187}, {1'd0}};

assign tmp_161_fu_509_p3 = {{wr_0_reg_234}, {2'd0}};

assign tmp_162_fu_537_p3 = {{add_ln23_fu_531_p2}, {5'd0}};

assign tmp_163_fu_549_p3 = {{add_ln23_fu_531_p2}, {2'd0}};

assign tmp_fu_651_p4 = {{bitcast_ln29_fu_648_p1[30:23]}};

assign trunc_ln23_fu_592_p1 = add_ln23_2_fu_587_p2[3:0];

assign trunc_ln29_fu_661_p1 = bitcast_ln29_fu_648_p1[22:0];

assign trunc_ln30_1_fu_382_p1 = add_ln30_fu_377_p2[8:0];

assign trunc_ln30_2_fu_417_p1 = add_ln30_1_fu_412_p2[7:0];

assign trunc_ln30_fu_359_p1 = c_0_reg_199[1:0];

assign w_sum_5_fu_689_p3 = ((and_ln29_fu_683_p2[0:0] === 1'b1) ? w_sum_reg_844 : 32'd0);

assign wc_fu_577_p2 = (wc_0_reg_257 + 2'd1);

assign wr_fu_503_p2 = (wr_0_reg_234 + 2'd1);

assign zext_ln18_fu_493_p1 = wr_0_reg_234;

assign zext_ln21_fu_567_p1 = wc_0_reg_257;

assign zext_ln23_1_fu_517_p1 = tmp_161_fu_509_p3;

assign zext_ln23_2_fu_545_p1 = tmp_162_fu_537_p3;

assign zext_ln23_3_fu_557_p1 = tmp_163_fu_549_p3;

assign zext_ln23_4_fu_583_p1 = wc_0_reg_257;

assign zext_ln23_5_fu_623_p1 = add_ln23_3_fu_618_p2;

assign zext_ln23_6_fu_634_p1 = add_ln23_1_fu_628_p2;

assign zext_ln23_fu_455_p1 = f_0_reg_211;

assign zext_ln30_1_fu_311_p1 = tmp_159_fu_303_p3;

assign zext_ln30_2_fu_333_p1 = tmp_160_fu_325_p3;

assign zext_ln30_3_fu_373_p1 = tmp_156_fu_363_p4;

assign zext_ln30_4_fu_459_p1 = f_0_reg_211;

assign zext_ln30_5_fu_463_p1 = f_0_reg_211;

assign zext_ln30_6_fu_467_p1 = f_0_reg_211;

assign zext_ln30_7_fu_476_p1 = add_ln30_2_fu_471_p2;

assign zext_ln30_8_fu_487_p1 = add_ln30_3_fu_482_p2;

assign zext_ln30_fu_299_p1 = r_0_reg_187;

always @ (posedge ap_clk) begin
    sext_ln30_1_reg_713[0] <= 1'b0;
    sub_ln30_2_reg_730[0] <= 1'b0;
    sub_ln30_3_reg_735[0] <= 1'b0;
    zext_ln23_reg_748[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln30_4_reg_753[6:3] <= 4'b0000;
    sub_ln23_1_reg_791[1:0] <= 2'b00;
end

endmodule //conv_1
