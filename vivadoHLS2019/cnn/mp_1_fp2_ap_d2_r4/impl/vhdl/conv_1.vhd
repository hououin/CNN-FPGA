-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_0_ce0 : OUT STD_LOGIC;
    conv_out_0_we0 : OUT STD_LOGIC;
    conv_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_1_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_1_ce0 : OUT STD_LOGIC;
    conv_out_1_we0 : OUT STD_LOGIC;
    conv_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_out_2_ce0 : OUT STD_LOGIC;
    conv_out_2_we0 : OUT STD_LOGIC;
    conv_out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_out_3_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_out_3_ce0 : OUT STD_LOGIC;
    conv_out_3_we0 : OUT STD_LOGIC;
    conv_out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (16 downto 0) := "00000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (16 downto 0) := "00000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (16 downto 0) := "00000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (16 downto 0) := "00000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (16 downto 0) := "00000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (16 downto 0) := "00001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (16 downto 0) := "00010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (16 downto 0) := "00100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (16 downto 0) := "01000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (16 downto 0) := "10000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv5_1A : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_1_weights_ce0 : STD_LOGIC;
    signal conv_1_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_293_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal r_reg_703 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal sext_ln30_fu_321_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln30_reg_708 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln8_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln30_1_fu_343_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln30_1_reg_713 : STD_LOGIC_VECTOR (9 downto 0);
    signal c_fu_353_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_reg_721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln30_fu_359_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln30_reg_726 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln11_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln30_2_fu_406_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln30_2_reg_730 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln30_3_fu_437_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln30_3_reg_735 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_fu_449_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_743 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln23_fu_455_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_748 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln30_4_fu_459_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_4_reg_753 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_out_0_addr_reg_758 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_1_addr_reg_763 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_2_addr_reg_768 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_out_3_addr_reg_773 : STD_LOGIC_VECTOR (9 downto 0);
    signal wr_fu_503_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_781 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln23_fu_527_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln23_reg_786 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln23_1_fu_561_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_1_reg_791 : STD_LOGIC_VECTOR (10 downto 0);
    signal wc_fu_577_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_804 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln21_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal w_sum_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal r_0_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_199 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal w_sum_0_reg_222 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_0_reg_234 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_245 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_257 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln30_7_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_8_fu_487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_5_fu_623_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_1_fu_643_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_5_fu_689_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_159_fu_303_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_1_fu_311_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln30_fu_299_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln30_fu_315_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_160_fu_325_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_2_fu_333_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln30_1_fu_337_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_156_fu_363_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln30_3_fu_373_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln30_fu_377_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln30_1_fu_382_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_157_fu_394_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_386_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal sext_ln30_2_fu_402_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_1_fu_412_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln30_2_fu_417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl3_cast_fu_421_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_429_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln30_6_fu_467_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln30_2_fu_471_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln30_5_fu_463_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln30_3_fu_482_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_161_fu_509_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln23_1_fu_517_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_493_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln23_fu_521_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_fu_531_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_162_fu_537_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_163_fu_549_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_2_fu_545_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_3_fu_557_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_4_fu_583_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_2_fu_587_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln23_fu_592_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl10_cast_fu_596_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl11_cast_fu_604_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln23_2_fu_612_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_3_fu_618_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_567_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_1_fu_628_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_6_fu_634_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_4_fu_638_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln29_fu_648_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_651_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_661_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_185_fu_671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (16 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_address0,
        ce0 => conv_1_weights_ce0,
        q0 => conv_1_weights_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    cnn_fadd_32ns_32ncud_U1 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p0,
        din1 => grp_fu_268_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_268_p2);

    cnn_fmul_32ns_32ndEe_U2 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_275_p2);

    cnn_fcmp_32ns_32neOg_U3 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_268_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_281_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_443_p2 = ap_const_lv1_1))) then 
                c_0_reg_199 <= c_reg_721;
            elsif (((icmp_ln8_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_199 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                f_0_reg_211 <= f_reg_743;
            elsif (((icmp_ln11_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_211 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    r_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_347_p2 = ap_const_lv1_1))) then 
                r_0_reg_187 <= r_reg_703;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_187 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_571_p2 = ap_const_lv1_1))) then 
                w_sum_0_reg_222 <= w_sum_1_reg_245;
            elsif (((icmp_ln14_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                w_sum_0_reg_222 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                w_sum_1_reg_245 <= grp_fu_268_p2;
            elsif (((icmp_ln18_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_245 <= w_sum_0_reg_222;
            end if; 
        end if;
    end process;

    wc_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                wc_0_reg_257 <= wc_reg_804;
            elsif (((icmp_ln18_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_257 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_571_p2 = ap_const_lv1_1))) then 
                wr_0_reg_234 <= wr_reg_781;
            elsif (((icmp_ln14_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_234 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_721 <= c_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_443_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_0_addr_reg_758 <= zext_ln30_7_fu_476_p1(11 - 1 downto 0);
                conv_out_1_addr_reg_763 <= zext_ln30_7_fu_476_p1(11 - 1 downto 0);
                conv_out_2_addr_reg_768 <= zext_ln30_8_fu_487_p1(10 - 1 downto 0);
                conv_out_3_addr_reg_773 <= zext_ln30_8_fu_487_p1(10 - 1 downto 0);
                    zext_ln23_reg_748(2 downto 0) <= zext_ln23_fu_455_p1(2 downto 0);
                    zext_ln30_4_reg_753(2 downto 0) <= zext_ln30_4_fu_459_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_743 <= f_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_703 <= r_fu_293_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                sext_ln23_reg_786 <= sext_ln23_fu_527_p1;
                    sub_ln23_1_reg_791(10 downto 2) <= sub_ln23_1_fu_561_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_287_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    sext_ln30_1_reg_713(9 downto 1) <= sext_ln30_1_fu_343_p1(9 downto 1);
                sext_ln30_reg_708 <= sext_ln30_fu_321_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln30_2_reg_730(11 downto 1) <= sub_ln30_2_fu_406_p2(11 downto 1);
                    sub_ln30_3_reg_735(10 downto 1) <= sub_ln30_3_fu_437_p2(10 downto 1);
                trunc_ln30_reg_726 <= trunc_ln30_fu_359_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_s_reg_829 <= grp_fu_275_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                w_sum_reg_844 <= grp_fu_268_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_804 <= wc_fu_577_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_781 <= wr_fu_503_p2;
            end if;
        end if;
    end process;
    sext_ln30_1_reg_713(0) <= '0';
    sub_ln30_2_reg_730(0) <= '0';
    sub_ln30_3_reg_735(0) <= '0';
    zext_ln23_reg_748(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln30_4_reg_753(6 downto 3) <= "0000";
    sub_ln23_1_reg_791(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_287_p2, ap_CS_fsm_state3, icmp_ln11_fu_347_p2, ap_CS_fsm_state4, icmp_ln14_fu_443_p2, ap_CS_fsm_state5, icmp_ln18_fu_497_p2, ap_CS_fsm_state6, icmp_ln21_fu_571_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_497_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_571_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln23_1_fu_628_p2 <= std_logic_vector(unsigned(c_0_reg_199) + unsigned(zext_ln21_fu_567_p1));
    add_ln23_2_fu_587_p2 <= std_logic_vector(unsigned(zext_ln23_4_fu_583_p1) + unsigned(sext_ln23_reg_786));
    add_ln23_3_fu_618_p2 <= std_logic_vector(unsigned(zext_ln30_4_reg_753) + unsigned(sub_ln23_2_fu_612_p2));
    add_ln23_4_fu_638_p2 <= std_logic_vector(unsigned(zext_ln23_6_fu_634_p1) + unsigned(sub_ln23_1_reg_791));
    add_ln23_fu_531_p2 <= std_logic_vector(unsigned(zext_ln18_fu_493_p1) + unsigned(r_0_reg_187));
    add_ln30_1_fu_412_p2 <= std_logic_vector(unsigned(zext_ln30_3_fu_373_p1) + unsigned(sext_ln30_1_reg_713));
    add_ln30_2_fu_471_p2 <= std_logic_vector(unsigned(sub_ln30_2_reg_730) + unsigned(zext_ln30_6_fu_467_p1));
    add_ln30_3_fu_482_p2 <= std_logic_vector(unsigned(sub_ln30_3_reg_735) + unsigned(zext_ln30_5_fu_463_p1));
    add_ln30_fu_377_p2 <= std_logic_vector(unsigned(zext_ln30_3_fu_373_p1) + unsigned(sext_ln30_reg_708));
    and_ln29_fu_683_p2 <= (or_ln29_fu_677_p2 and grp_fu_281_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_287_p2)
    begin
        if ((((icmp_ln8_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_287_p2)
    begin
        if (((icmp_ln8_fu_287_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_fu_648_p1 <= w_sum_reg_844;
    c_fu_353_p2 <= std_logic_vector(unsigned(c_0_reg_199) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln23_reg_748(3 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_address0 <= zext_ln23_5_fu_623_p1(6 - 1 downto 0);

    conv_1_weights_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_weights_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_address0 <= conv_out_0_addr_reg_758;

    conv_out_0_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv_out_0_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_d0 <= w_sum_5_fu_689_p3;

    conv_out_0_we0_assign_proc : process(trunc_ln30_reg_726, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln30_reg_726 = ap_const_lv2_0))) then 
            conv_out_0_we0 <= ap_const_logic_1;
        else 
            conv_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_address0 <= conv_out_1_addr_reg_763;

    conv_out_1_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv_out_1_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_d0 <= w_sum_5_fu_689_p3;

    conv_out_1_we0_assign_proc : process(trunc_ln30_reg_726, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln30_reg_726 = ap_const_lv2_1))) then 
            conv_out_1_we0 <= ap_const_logic_1;
        else 
            conv_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_2_address0 <= conv_out_2_addr_reg_768;

    conv_out_2_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv_out_2_ce0 <= ap_const_logic_1;
        else 
            conv_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_2_d0 <= w_sum_5_fu_689_p3;

    conv_out_2_we0_assign_proc : process(trunc_ln30_reg_726, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln30_reg_726 = ap_const_lv2_2))) then 
            conv_out_2_we0 <= ap_const_logic_1;
        else 
            conv_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_3_address0 <= conv_out_3_addr_reg_773;

    conv_out_3_ce0_assign_proc : process(ap_CS_fsm_state17)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            conv_out_3_ce0 <= ap_const_logic_1;
        else 
            conv_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_3_d0 <= w_sum_5_fu_689_p3;

    conv_out_3_we0_assign_proc : process(trunc_ln30_reg_726, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) and (trunc_ln30_reg_726 = ap_const_lv2_3))) then 
            conv_out_3_we0 <= ap_const_logic_1;
        else 
            conv_out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_449_p2 <= std_logic_vector(unsigned(f_0_reg_211) + unsigned(ap_const_lv3_1));

    grp_fu_268_p0_assign_proc : process(ap_CS_fsm_state13, w_sum_0_reg_222, w_sum_1_reg_245, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_268_p0 <= w_sum_0_reg_222;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_268_p0 <= w_sum_1_reg_245;
        else 
            grp_fu_268_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_268_p1_assign_proc : process(conv_1_bias_q0, tmp_s_reg_829, ap_CS_fsm_state13, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_268_p1 <= conv_1_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            grp_fu_268_p1 <= tmp_s_reg_829;
        else 
            grp_fu_268_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln11_fu_347_p2 <= "1" when (c_0_reg_199 = ap_const_lv5_1A) else "0";
    icmp_ln14_fu_443_p2 <= "1" when (f_0_reg_211 = ap_const_lv3_6) else "0";
    icmp_ln18_fu_497_p2 <= "1" when (wr_0_reg_234 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_571_p2 <= "1" when (wc_0_reg_257 = ap_const_lv2_3) else "0";
    icmp_ln29_185_fu_671_p2 <= "1" when (trunc_ln29_fu_661_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_665_p2 <= "0" when (tmp_fu_651_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_287_p2 <= "1" when (r_0_reg_187 = ap_const_lv5_1A) else "0";
    input_r_address0 <= sext_ln23_1_fu_643_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln29_fu_677_p2 <= (icmp_ln29_fu_665_p2 or icmp_ln29_185_fu_671_p2);
    p_shl10_cast_fu_596_p3 <= (trunc_ln23_fu_592_p1 & ap_const_lv3_0);
    p_shl11_cast_fu_604_p3 <= (add_ln23_2_fu_587_p2 & ap_const_lv1_0);
    p_shl3_cast_fu_421_p3 <= (trunc_ln30_2_fu_417_p1 & ap_const_lv3_0);
    p_shl4_cast_fu_429_p3 <= (add_ln30_1_fu_412_p2 & ap_const_lv1_0);
    p_shl5_cast_fu_386_p3 <= (trunc_ln30_1_fu_382_p1 & ap_const_lv3_0);
    r_fu_293_p2 <= std_logic_vector(unsigned(r_0_reg_187) + unsigned(ap_const_lv5_1));
        sext_ln23_1_fu_643_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_4_fu_638_p2),64));

        sext_ln23_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln23_fu_521_p2),6));

        sext_ln30_1_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln30_1_fu_337_p2),10));

        sext_ln30_2_fu_402_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_157_fu_394_p3),12));

        sext_ln30_fu_321_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln30_fu_315_p2),10));

    sub_ln23_1_fu_561_p2 <= std_logic_vector(unsigned(zext_ln23_2_fu_545_p1) - unsigned(zext_ln23_3_fu_557_p1));
    sub_ln23_2_fu_612_p2 <= std_logic_vector(unsigned(p_shl10_cast_fu_596_p3) - unsigned(p_shl11_cast_fu_604_p3));
    sub_ln23_fu_521_p2 <= std_logic_vector(unsigned(zext_ln23_1_fu_517_p1) - unsigned(zext_ln18_fu_493_p1));
    sub_ln30_1_fu_337_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_311_p1) - unsigned(zext_ln30_2_fu_333_p1));
    sub_ln30_2_fu_406_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_386_p3) - unsigned(sext_ln30_2_fu_402_p1));
    sub_ln30_3_fu_437_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_421_p3) - unsigned(p_shl4_cast_fu_429_p3));
    sub_ln30_fu_315_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_311_p1) - unsigned(zext_ln30_fu_299_p1));
    tmp_156_fu_363_p4 <= c_0_reg_199(4 downto 2);
    tmp_157_fu_394_p3 <= (add_ln30_fu_377_p2 & ap_const_lv1_0);
    tmp_159_fu_303_p3 <= (r_0_reg_187 & ap_const_lv3_0);
    tmp_160_fu_325_p3 <= (r_0_reg_187 & ap_const_lv1_0);
    tmp_161_fu_509_p3 <= (wr_0_reg_234 & ap_const_lv2_0);
    tmp_162_fu_537_p3 <= (add_ln23_fu_531_p2 & ap_const_lv5_0);
    tmp_163_fu_549_p3 <= (add_ln23_fu_531_p2 & ap_const_lv2_0);
    tmp_fu_651_p4 <= bitcast_ln29_fu_648_p1(30 downto 23);
    trunc_ln23_fu_592_p1 <= add_ln23_2_fu_587_p2(4 - 1 downto 0);
    trunc_ln29_fu_661_p1 <= bitcast_ln29_fu_648_p1(23 - 1 downto 0);
    trunc_ln30_1_fu_382_p1 <= add_ln30_fu_377_p2(9 - 1 downto 0);
    trunc_ln30_2_fu_417_p1 <= add_ln30_1_fu_412_p2(8 - 1 downto 0);
    trunc_ln30_fu_359_p1 <= c_0_reg_199(2 - 1 downto 0);
    w_sum_5_fu_689_p3 <= 
        w_sum_reg_844 when (and_ln29_fu_683_p2(0) = '1') else 
        ap_const_lv32_0;
    wc_fu_577_p2 <= std_logic_vector(unsigned(wc_0_reg_257) + unsigned(ap_const_lv2_1));
    wr_fu_503_p2 <= std_logic_vector(unsigned(wr_0_reg_234) + unsigned(ap_const_lv2_1));
    zext_ln18_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_234),5));
    zext_ln21_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_257),5));
    zext_ln23_1_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_161_fu_509_p3),5));
    zext_ln23_2_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_162_fu_537_p3),11));
    zext_ln23_3_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_163_fu_549_p3),11));
    zext_ln23_4_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_257),6));
    zext_ln23_5_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_3_fu_618_p2),64));
    zext_ln23_6_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_628_p2),11));
    zext_ln23_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_211),64));
    zext_ln30_1_fu_311_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_159_fu_303_p3),9));
    zext_ln30_2_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_160_fu_325_p3),9));
    zext_ln30_3_fu_373_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_156_fu_363_p4),10));
    zext_ln30_4_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_211),7));
    zext_ln30_5_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_211),11));
    zext_ln30_6_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_211),12));
    zext_ln30_7_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_2_fu_471_p2),64));
    zext_ln30_8_fu_487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_3_fu_482_p2),64));
    zext_ln30_fu_299_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_187),9));
end behav;
