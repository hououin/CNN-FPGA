-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv12_FD8 : STD_LOGIC_VECTOR (11 downto 0) := "111111011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_1_weights_ce0 : STD_LOGIC;
    signal conv_1_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_215 : STD_LOGIC_VECTOR (3 downto 0);
    signal wr_0_reg_226 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal wc_0_reg_249 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln8_fu_278_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln8_fu_284_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln8_reg_676 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln11_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_1_fu_310_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_1_reg_686 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_2_fu_352_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_2_reg_692 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln30_3_fu_360_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln30_3_reg_697 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_reg_703 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_3_fu_400_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln30_3_reg_708 : STD_LOGIC_VECTOR (6 downto 0);
    signal conv_out_addr_reg_713 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln18_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln18_reg_718 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln18_reg_718_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln18_1_fu_425_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln18_1_reg_722 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln18_fu_443_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_reg_727 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_fu_451_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln18_1_reg_732 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_757 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal wc_fu_590_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_762 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal f_fu_595_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal f_reg_777 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln11_fu_606_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln11_reg_782 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal w_sum_reg_792 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal indvar_flatten21_reg_159 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal r_0_reg_170 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten7_reg_181 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_0_reg_193 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_204 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_219_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_wr_0_phi_fu_230_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_w_sum_1_phi_fu_241_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_253_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln30_5_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln23_6_fu_565_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln23_1_fu_585_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_260_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal r_fu_290_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln30_fu_302_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln30_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln30_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_340_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_662_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_379_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_372_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_2_fu_386_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln30_4_fu_404_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln30_fu_390_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln30_1_fu_408_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln21_fu_437_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_431_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_463_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln23_2_fu_471_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_1_fu_459_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln23_fu_475_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln18_fu_485_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_490_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_502_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln23_3_fu_498_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_4_fu_510_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln23_5_fu_524_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln23_fu_481_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln23_fu_528_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln23_fu_534_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl2_cast_fu_538_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln23_2_fu_554_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln23_2_fu_560_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_520_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln23_1_fu_570_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln23_7_fu_575_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln23_1_fu_514_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln23_3_fu_579_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln11_1_fu_600_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal bitcast_ln29_fu_613_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_616_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_626_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_662_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_662_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_662_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_662_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_662_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5nfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 54,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_address0,
        ce0 => conv_1_weights_ce0,
        q0 => conv_1_weights_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    cnn_fadd_32ns_32ncud_U1 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p0,
        din1 => grp_fu_260_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_260_p2);

    cnn_fmul_32ns_32ndEe_U2 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_1_weights_q0,
        din1 => input_r_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_266_p2);

    cnn_fcmp_32ns_32neOg_U3 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_260_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_272_p2);

    cnn_mac_muladd_5nfYi_U4 : component cnn_mac_muladd_5nfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_662_p0,
        din1 => grp_fu_662_p1,
        din2 => grp_fu_662_p2,
        dout => grp_fu_662_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_193_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                c_0_reg_193 <= select_ln30_3_reg_697;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_193 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_204_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                f_0_reg_204 <= f_reg_777;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_204 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten21_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten21_reg_159 <= add_ln8_reg_676;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten21_reg_159 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten7_reg_181_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                indvar_flatten7_reg_181 <= select_ln11_reg_782;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten7_reg_181 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten_reg_215 <= add_ln18_1_reg_722;
            elsif (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvar_flatten_reg_215 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    r_0_reg_170_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                r_0_reg_170 <= select_ln30_1_reg_686;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_170 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_718_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then 
                w_sum_1_reg_237 <= grp_fu_260_p2;
            elsif (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_1_reg_237 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wc_0_reg_249 <= wc_reg_762;
            elsif (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wc_0_reg_249 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                wr_0_reg_226 <= select_ln18_1_reg_732;
            elsif (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                wr_0_reg_226 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln18_1_reg_722 <= add_ln18_1_fu_425_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_676 <= add_ln8_fu_284_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_278_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                conv_out_addr_reg_713 <= zext_ln30_5_fu_414_p1(12 - 1 downto 0);
                icmp_ln11_reg_681 <= icmp_ln11_fu_296_p2;
                select_ln30_1_reg_686 <= select_ln30_1_fu_310_p3;
                select_ln30_2_reg_692 <= select_ln30_2_fu_352_p3;
                select_ln30_3_reg_697 <= select_ln30_3_fu_360_p3;
                    zext_ln23_reg_703(2 downto 0) <= zext_ln23_fu_396_p1(2 downto 0);
                    zext_ln30_3_reg_708(2 downto 0) <= zext_ln30_3_fu_400_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                f_reg_777 <= f_fu_595_p2;
                select_ln11_reg_782 <= select_ln11_fu_606_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                icmp_ln18_reg_718 <= icmp_ln18_fu_419_p2;
                icmp_ln18_reg_718_pp0_iter1_reg <= icmp_ln18_reg_718;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_1_reg_732 <= select_ln18_1_fu_451_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_419_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln18_reg_727 <= select_ln18_fu_443_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_s_reg_757 <= grp_fu_266_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                w_sum_reg_792 <= grp_fu_260_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                wc_reg_762 <= wc_fu_590_p2;
            end if;
        end if;
    end process;
    zext_ln23_reg_703(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln30_3_reg_708(6 downto 3) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln8_fu_278_p2, ap_CS_fsm_state2, icmp_ln18_fu_419_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln18_fu_419_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln18_fu_419_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    add_ln11_1_fu_600_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(indvar_flatten7_reg_181));
    add_ln18_1_fu_425_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_219_p4) + unsigned(ap_const_lv4_1));
    add_ln18_fu_485_p2 <= std_logic_vector(unsigned(select_ln30_1_reg_686) + unsigned(zext_ln23_1_fu_459_p1));
    add_ln23_1_fu_570_p2 <= std_logic_vector(unsigned(select_ln30_3_reg_697) + unsigned(zext_ln21_fu_520_p1));
    add_ln23_2_fu_560_p2 <= std_logic_vector(unsigned(zext_ln30_3_reg_708) + unsigned(sub_ln23_2_fu_554_p2));
    add_ln23_3_fu_579_p2 <= std_logic_vector(unsigned(zext_ln23_7_fu_575_p1) + unsigned(sub_ln23_1_fu_514_p2));
    add_ln23_fu_528_p2 <= std_logic_vector(unsigned(zext_ln23_5_fu_524_p1) + unsigned(sext_ln23_fu_481_p1));
    add_ln30_1_fu_408_p2 <= std_logic_vector(unsigned(zext_ln30_4_fu_404_p1) + unsigned(sub_ln30_fu_390_p2));
    add_ln8_fu_284_p2 <= std_logic_vector(unsigned(indvar_flatten21_reg_159) + unsigned(ap_const_lv12_1));
    and_ln29_fu_648_p2 <= (or_ln29_fu_642_p2 and grp_fu_272_p2);
    and_ln30_fu_334_p2 <= (xor_ln30_fu_322_p2 and icmp_ln14_fu_328_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(6);
    ap_CS_fsm_state11 <= ap_CS_fsm(7);
    ap_CS_fsm_state14 <= ap_CS_fsm(10);
    ap_CS_fsm_state15 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln18_fu_419_p2)
    begin
        if ((icmp_ln18_fu_419_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, icmp_ln8_fu_278_p2, ap_CS_fsm_state2)
    begin
        if ((((icmp_ln8_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_219_p4_assign_proc : process(indvar_flatten_reg_215, icmp_ln18_reg_718, ap_CS_fsm_pp0_stage0, add_ln18_1_reg_722, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_219_p4 <= add_ln18_1_reg_722;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_219_p4 <= indvar_flatten_reg_215;
        end if; 
    end process;

    ap_phi_mux_w_sum_1_phi_fu_241_p4 <= w_sum_1_reg_237;

    ap_phi_mux_wc_0_phi_fu_253_p4_assign_proc : process(wc_0_reg_249, icmp_ln18_reg_718, ap_CS_fsm_pp0_stage0, wc_reg_762, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wc_0_phi_fu_253_p4 <= wc_reg_762;
        else 
            ap_phi_mux_wc_0_phi_fu_253_p4 <= wc_0_reg_249;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_230_p4_assign_proc : process(wr_0_reg_226, icmp_ln18_reg_718, ap_CS_fsm_pp0_stage0, select_ln18_1_reg_732, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln18_reg_718 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wr_0_phi_fu_230_p4 <= select_ln18_1_reg_732;
        else 
            ap_phi_mux_wr_0_phi_fu_230_p4 <= wr_0_reg_226;
        end if; 
    end process;


    ap_ready_assign_proc : process(icmp_ln8_fu_278_p2, ap_CS_fsm_state2)
    begin
        if (((icmp_ln8_fu_278_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_fu_613_p1 <= w_sum_reg_792;
    c_fu_340_p2 <= std_logic_vector(unsigned(select_ln30_fu_302_p3) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln23_reg_703(3 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_address0 <= zext_ln23_6_fu_565_p1(6 - 1 downto 0);

    conv_1_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            conv_1_weights_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_713;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        w_sum_reg_792 when (and_ln29_fu_648_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_595_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln30_2_reg_692));

    grp_fu_260_p0_assign_proc : process(w_sum_1_reg_237, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_CS_fsm_state11, ap_phi_mux_w_sum_1_phi_fu_241_p4, ap_block_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_260_p0 <= w_sum_1_reg_237;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_260_p0 <= ap_phi_mux_w_sum_1_phi_fu_241_p4;
        else 
            grp_fu_260_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_260_p1_assign_proc : process(conv_1_bias_q0, ap_enable_reg_pp0_iter0, tmp_s_reg_757, ap_CS_fsm_pp0_stage3, ap_CS_fsm_state11, ap_block_pp0_stage3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_fu_260_p1 <= conv_1_bias_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_260_p1 <= tmp_s_reg_757;
        else 
            grp_fu_260_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_662_p0 <= grp_fu_662_p00(5 - 1 downto 0);
    grp_fu_662_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_1_fu_310_p3),10));
    grp_fu_662_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_662_p2 <= grp_fu_662_p20(5 - 1 downto 0);
    grp_fu_662_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_3_fu_360_p3),10));
    icmp_ln11_fu_296_p2 <= "1" when (indvar_flatten7_reg_181 = ap_const_lv8_9C) else "0";
    icmp_ln14_fu_328_p2 <= "1" when (f_0_reg_204 = ap_const_lv3_6) else "0";
    icmp_ln18_fu_419_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_219_p4 = ap_const_lv4_9) else "0";
    icmp_ln21_fu_437_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_253_p4 = ap_const_lv2_3) else "0";
    icmp_ln29_7_fu_636_p2 <= "1" when (trunc_ln29_fu_626_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_630_p2 <= "0" when (tmp_fu_616_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_278_p2 <= "1" when (indvar_flatten21_reg_159 = ap_const_lv12_FD8) else "0";
    input_r_address0 <= sext_ln23_1_fu_585_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln29_fu_642_p2 <= (icmp_ln29_fu_630_p2 or icmp_ln29_7_fu_636_p2);
    or_ln30_fu_346_p2 <= (icmp_ln11_fu_296_p2 or and_ln30_fu_334_p2);
    p_shl2_cast_fu_538_p3 <= (trunc_ln23_fu_534_p1 & ap_const_lv3_0);
    p_shl3_cast_fu_546_p3 <= (add_ln23_fu_528_p2 & ap_const_lv1_0);
    p_shl_cast_fu_372_p3 <= (grp_fu_662_p3 & ap_const_lv3_0);
    r_fu_290_p2 <= std_logic_vector(unsigned(r_0_reg_170) + unsigned(ap_const_lv5_1));
    select_ln11_fu_606_p3 <= 
        ap_const_lv8_1 when (icmp_ln11_reg_681(0) = '1') else 
        add_ln11_1_fu_600_p2;
    select_ln18_1_fu_451_p3 <= 
        wr_fu_431_p2 when (icmp_ln21_fu_437_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_230_p4;
    select_ln18_fu_443_p3 <= 
        ap_const_lv2_0 when (icmp_ln21_fu_437_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_253_p4;
    select_ln30_1_fu_310_p3 <= 
        r_fu_290_p2 when (icmp_ln11_fu_296_p2(0) = '1') else 
        r_0_reg_170;
    select_ln30_2_fu_352_p3 <= 
        ap_const_lv3_0 when (or_ln30_fu_346_p2(0) = '1') else 
        f_0_reg_204;
    select_ln30_3_fu_360_p3 <= 
        c_fu_340_p2 when (and_ln30_fu_334_p2(0) = '1') else 
        select_ln30_fu_302_p3;
    select_ln30_fu_302_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_296_p2(0) = '1') else 
        c_0_reg_193;
        sext_ln23_1_fu_585_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln23_3_fu_579_p2),64));

        sext_ln23_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln23_fu_475_p2),6));

    sub_ln23_1_fu_514_p2 <= std_logic_vector(unsigned(zext_ln23_3_fu_498_p1) - unsigned(zext_ln23_4_fu_510_p1));
    sub_ln23_2_fu_554_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_538_p3) - unsigned(p_shl3_cast_fu_546_p3));
    sub_ln23_fu_475_p2 <= std_logic_vector(unsigned(zext_ln23_2_fu_471_p1) - unsigned(zext_ln23_1_fu_459_p1));
    sub_ln30_fu_390_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_372_p3) - unsigned(zext_ln30_2_fu_386_p1));
    tmp_10_fu_490_p3 <= (add_ln18_fu_485_p2 & ap_const_lv5_0);
    tmp_11_fu_379_p3 <= (grp_fu_662_p3 & ap_const_lv1_0);
    tmp_12_fu_502_p3 <= (add_ln18_fu_485_p2 & ap_const_lv2_0);
    tmp_9_fu_463_p3 <= (select_ln18_1_fu_451_p3 & ap_const_lv2_0);
    tmp_fu_616_p4 <= bitcast_ln29_fu_613_p1(30 downto 23);
    trunc_ln23_fu_534_p1 <= add_ln23_fu_528_p2(4 - 1 downto 0);
    trunc_ln29_fu_626_p1 <= bitcast_ln29_fu_613_p1(23 - 1 downto 0);
    wc_fu_590_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln18_reg_727));
    wr_fu_431_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(ap_phi_mux_wr_0_phi_fu_230_p4));
    xor_ln30_fu_322_p2 <= (icmp_ln11_fu_296_p2 xor ap_const_lv1_1);
    zext_ln21_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_443_p3),5));
    zext_ln23_1_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_1_fu_451_p3),5));
    zext_ln23_2_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_463_p3),5));
    zext_ln23_3_fu_498_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_490_p3),11));
    zext_ln23_4_fu_510_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_502_p3),11));
    zext_ln23_5_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln18_fu_443_p3),6));
    zext_ln23_6_fu_565_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_2_fu_560_p2),64));
    zext_ln23_7_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln23_1_fu_570_p2),11));
    zext_ln23_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_2_fu_352_p3),64));
    zext_ln30_2_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_379_p3),13));
    zext_ln30_3_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_2_fu_352_p3),7));
    zext_ln30_4_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln30_2_fu_352_p3),13));
    zext_ln30_5_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_408_p2),64));
end behav;
