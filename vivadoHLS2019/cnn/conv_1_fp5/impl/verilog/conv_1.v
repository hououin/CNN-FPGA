// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module conv_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_pp0_stage0 = 12'd4;
parameter    ap_ST_fsm_pp0_stage1 = 12'd8;
parameter    ap_ST_fsm_pp0_stage2 = 12'd16;
parameter    ap_ST_fsm_pp0_stage3 = 12'd32;
parameter    ap_ST_fsm_state10 = 12'd64;
parameter    ap_ST_fsm_state11 = 12'd128;
parameter    ap_ST_fsm_state12 = 12'd256;
parameter    ap_ST_fsm_state13 = 12'd512;
parameter    ap_ST_fsm_state14 = 12'd1024;
parameter    ap_ST_fsm_state15 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_1_weights_address0;
reg    conv_1_weights_ce0;
wire   [31:0] conv_1_weights_q0;
wire   [2:0] conv_1_bias_address0;
reg    conv_1_bias_ce0;
wire   [31:0] conv_1_bias_q0;
reg   [3:0] indvar_flatten_reg_215;
reg   [1:0] wr_0_reg_226;
reg   [31:0] w_sum_1_reg_237;
reg   [1:0] wc_0_reg_249;
wire   [0:0] icmp_ln8_fu_278_p2;
wire    ap_CS_fsm_state2;
wire   [11:0] add_ln8_fu_284_p2;
reg   [11:0] add_ln8_reg_676;
wire   [0:0] icmp_ln11_fu_296_p2;
reg   [0:0] icmp_ln11_reg_681;
wire   [4:0] select_ln30_1_fu_310_p3;
reg   [4:0] select_ln30_1_reg_686;
wire   [2:0] select_ln30_2_fu_352_p3;
reg   [2:0] select_ln30_2_reg_692;
wire   [4:0] select_ln30_3_fu_360_p3;
reg   [4:0] select_ln30_3_reg_697;
wire   [63:0] zext_ln23_fu_396_p1;
reg   [63:0] zext_ln23_reg_703;
wire   [6:0] zext_ln30_3_fu_400_p1;
reg   [6:0] zext_ln30_3_reg_708;
reg   [11:0] conv_out_addr_reg_713;
wire   [0:0] icmp_ln18_fu_419_p2;
reg   [0:0] icmp_ln18_reg_718;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln18_reg_718_pp0_iter1_reg;
wire   [3:0] add_ln18_1_fu_425_p2;
reg   [3:0] add_ln18_1_reg_722;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln18_fu_443_p3;
reg   [1:0] select_ln18_reg_727;
wire   [1:0] select_ln18_1_fu_451_p3;
reg   [1:0] select_ln18_1_reg_732;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_266_p2;
reg   [31:0] tmp_s_reg_757;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
wire   [1:0] wc_fu_590_p2;
reg   [1:0] wc_reg_762;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [31:0] grp_fu_260_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state10;
wire   [2:0] f_fu_595_p2;
reg   [2:0] f_reg_777;
wire   [7:0] select_ln11_fu_606_p3;
reg   [7:0] select_ln11_reg_782;
wire    ap_CS_fsm_state11;
reg   [31:0] w_sum_reg_792;
wire    ap_CS_fsm_state14;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage3_subdone;
wire    ap_block_pp0_stage2_subdone;
reg   [11:0] indvar_flatten21_reg_159;
wire    ap_CS_fsm_state15;
reg   [4:0] r_0_reg_170;
reg   [7:0] indvar_flatten7_reg_181;
reg   [4:0] c_0_reg_193;
reg   [2:0] f_0_reg_204;
reg   [3:0] ap_phi_mux_indvar_flatten_phi_fu_219_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_230_p4;
wire   [31:0] ap_phi_mux_w_sum_1_phi_fu_241_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_253_p4;
wire   [63:0] zext_ln30_5_fu_414_p1;
wire   [63:0] zext_ln23_6_fu_565_p1;
wire  signed [63:0] sext_ln23_1_fu_585_p1;
reg   [31:0] grp_fu_260_p0;
reg   [31:0] grp_fu_260_p1;
wire    ap_block_pp0_stage3;
wire    ap_block_pp0_stage1;
wire   [4:0] r_fu_290_p2;
wire   [0:0] icmp_ln14_fu_328_p2;
wire   [0:0] xor_ln30_fu_322_p2;
wire   [4:0] select_ln30_fu_302_p3;
wire   [0:0] and_ln30_fu_334_p2;
wire   [0:0] or_ln30_fu_346_p2;
wire   [4:0] c_fu_340_p2;
wire   [9:0] grp_fu_662_p3;
wire   [10:0] tmp_11_fu_379_p3;
wire   [12:0] p_shl_cast_fu_372_p3;
wire   [12:0] zext_ln30_2_fu_386_p1;
wire   [12:0] zext_ln30_4_fu_404_p1;
wire   [12:0] sub_ln30_fu_390_p2;
wire   [12:0] add_ln30_1_fu_408_p2;
wire   [0:0] icmp_ln21_fu_437_p2;
wire   [1:0] wr_fu_431_p2;
wire   [3:0] tmp_9_fu_463_p3;
wire   [4:0] zext_ln23_2_fu_471_p1;
wire   [4:0] zext_ln23_1_fu_459_p1;
wire   [4:0] sub_ln23_fu_475_p2;
wire   [4:0] add_ln18_fu_485_p2;
wire   [9:0] tmp_10_fu_490_p3;
wire   [6:0] tmp_12_fu_502_p3;
wire   [10:0] zext_ln23_3_fu_498_p1;
wire   [10:0] zext_ln23_4_fu_510_p1;
wire   [5:0] zext_ln23_5_fu_524_p1;
wire  signed [5:0] sext_ln23_fu_481_p1;
wire   [5:0] add_ln23_fu_528_p2;
wire   [3:0] trunc_ln23_fu_534_p1;
wire   [6:0] p_shl2_cast_fu_538_p3;
wire   [6:0] p_shl3_cast_fu_546_p3;
wire   [6:0] sub_ln23_2_fu_554_p2;
wire   [6:0] add_ln23_2_fu_560_p2;
wire   [4:0] zext_ln21_fu_520_p1;
wire   [4:0] add_ln23_1_fu_570_p2;
wire   [10:0] zext_ln23_7_fu_575_p1;
wire   [10:0] sub_ln23_1_fu_514_p2;
wire   [10:0] add_ln23_3_fu_579_p2;
wire   [7:0] add_ln11_1_fu_600_p2;
wire   [31:0] bitcast_ln29_fu_613_p1;
wire   [7:0] tmp_fu_616_p4;
wire   [22:0] trunc_ln29_fu_626_p1;
wire   [0:0] icmp_ln29_7_fu_636_p2;
wire   [0:0] icmp_ln29_fu_630_p2;
wire   [0:0] or_ln29_fu_642_p2;
wire   [0:0] grp_fu_272_p2;
wire   [0:0] and_ln29_fu_648_p2;
wire   [4:0] grp_fu_662_p0;
wire   [5:0] grp_fu_662_p1;
wire   [4:0] grp_fu_662_p2;
reg   [11:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_662_p00;
wire   [9:0] grp_fu_662_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_1_conv_1_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 54 ),
    .AddressWidth( 6 ))
conv_1_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_weights_address0),
    .ce0(conv_1_weights_ce0),
    .q0(conv_1_weights_q0)
);

conv_1_conv_1_bias #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
conv_1_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_1_bias_address0),
    .ce0(conv_1_bias_ce0),
    .q0(conv_1_bias_q0)
);

cnn_fadd_32ns_32ncud #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fadd_32ns_32ncud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_260_p0),
    .din1(grp_fu_260_p1),
    .ce(1'b1),
    .dout(grp_fu_260_p2)
);

cnn_fmul_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cnn_fmul_32ns_32ndEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_weights_q0),
    .din1(input_r_q0),
    .ce(1'b1),
    .dout(grp_fu_266_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_260_p2),
    .din1(32'd0),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_272_p2)
);

cnn_mac_muladd_5nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
cnn_mac_muladd_5nfYi_U4(
    .din0(grp_fu_662_p0),
    .din1(grp_fu_662_p1),
    .din2(grp_fu_662_p2),
    .dout(grp_fu_662_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        c_0_reg_193 <= select_ln30_3_reg_697;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_193 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        f_0_reg_204 <= f_reg_777;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_204 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten21_reg_159 <= add_ln8_reg_676;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten21_reg_159 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        indvar_flatten7_reg_181 <= select_ln11_reg_782;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten7_reg_181 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_215 <= add_ln18_1_reg_722;
    end else if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_215 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        r_0_reg_170 <= select_ln30_1_reg_686;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_170 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_718_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_sum_1_reg_237 <= grp_fu_260_p2;
    end else if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_1_reg_237 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_249 <= wc_reg_762;
    end else if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_249 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_226 <= select_ln18_1_reg_732;
    end else if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_226 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln18_1_reg_722 <= add_ln18_1_fu_425_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln8_reg_676 <= add_ln8_fu_284_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln8_fu_278_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_713 <= zext_ln30_5_fu_414_p1;
        icmp_ln11_reg_681 <= icmp_ln11_fu_296_p2;
        select_ln30_1_reg_686 <= select_ln30_1_fu_310_p3;
        select_ln30_2_reg_692 <= select_ln30_2_fu_352_p3;
        select_ln30_3_reg_697 <= select_ln30_3_fu_360_p3;
        zext_ln23_reg_703[2 : 0] <= zext_ln23_fu_396_p1[2 : 0];
        zext_ln30_3_reg_708[2 : 0] <= zext_ln30_3_fu_400_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        f_reg_777 <= f_fu_595_p2;
        select_ln11_reg_782 <= select_ln11_fu_606_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln18_reg_718 <= icmp_ln18_fu_419_p2;
        icmp_ln18_reg_718_pp0_iter1_reg <= icmp_ln18_reg_718;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_1_reg_732 <= select_ln18_1_fu_451_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_fu_419_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln18_reg_727 <= select_ln18_fu_443_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_s_reg_757 <= grp_fu_266_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        w_sum_reg_792 <= grp_fu_260_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        wc_reg_762 <= wc_fu_590_p2;
    end
end

always @ (*) begin
    if ((icmp_ln18_fu_419_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln8_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_219_p4 = add_ln18_1_reg_722;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_219_p4 = indvar_flatten_reg_215;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wc_0_phi_fu_253_p4 = wc_reg_762;
    end else begin
        ap_phi_mux_wc_0_phi_fu_253_p4 = wc_0_reg_249;
    end
end

always @ (*) begin
    if (((icmp_ln18_reg_718 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wr_0_phi_fu_230_p4 = select_ln18_1_reg_732;
    end else begin
        ap_phi_mux_wr_0_phi_fu_230_p4 = wr_0_reg_226;
    end
end

always @ (*) begin
    if (((icmp_ln8_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        conv_1_bias_ce0 = 1'b1;
    end else begin
        conv_1_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_weights_ce0 = 1'b1;
    end else begin
        conv_1_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_260_p0 = w_sum_1_reg_237;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_260_p0 = ap_phi_mux_w_sum_1_phi_fu_241_p4;
    end else begin
        grp_fu_260_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_260_p1 = conv_1_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_260_p1 = tmp_s_reg_757;
    end else begin
        grp_fu_260_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln8_fu_278_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln18_fu_419_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln18_fu_419_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln11_1_fu_600_p2 = (8'd1 + indvar_flatten7_reg_181);

assign add_ln18_1_fu_425_p2 = (ap_phi_mux_indvar_flatten_phi_fu_219_p4 + 4'd1);

assign add_ln18_fu_485_p2 = (select_ln30_1_reg_686 + zext_ln23_1_fu_459_p1);

assign add_ln23_1_fu_570_p2 = (select_ln30_3_reg_697 + zext_ln21_fu_520_p1);

assign add_ln23_2_fu_560_p2 = (zext_ln30_3_reg_708 + sub_ln23_2_fu_554_p2);

assign add_ln23_3_fu_579_p2 = (zext_ln23_7_fu_575_p1 + sub_ln23_1_fu_514_p2);

assign add_ln23_fu_528_p2 = ($signed(zext_ln23_5_fu_524_p1) + $signed(sext_ln23_fu_481_p1));

assign add_ln30_1_fu_408_p2 = (zext_ln30_4_fu_404_p1 + sub_ln30_fu_390_p2);

assign add_ln8_fu_284_p2 = (indvar_flatten21_reg_159 + 12'd1);

assign and_ln29_fu_648_p2 = (or_ln29_fu_642_p2 & grp_fu_272_p2);

assign and_ln30_fu_334_p2 = (xor_ln30_fu_322_p2 & icmp_ln14_fu_328_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_1_phi_fu_241_p4 = w_sum_1_reg_237;

assign bitcast_ln29_fu_613_p1 = w_sum_reg_792;

assign c_fu_340_p2 = (select_ln30_fu_302_p3 + 5'd1);

assign conv_1_bias_address0 = zext_ln23_reg_703;

assign conv_1_weights_address0 = zext_ln23_6_fu_565_p1;

assign conv_out_address0 = conv_out_addr_reg_713;

assign conv_out_d0 = ((and_ln29_fu_648_p2[0:0] === 1'b1) ? w_sum_reg_792 : 32'd0);

assign f_fu_595_p2 = (3'd1 + select_ln30_2_reg_692);

assign grp_fu_662_p0 = grp_fu_662_p00;

assign grp_fu_662_p00 = select_ln30_1_fu_310_p3;

assign grp_fu_662_p1 = 10'd26;

assign grp_fu_662_p2 = grp_fu_662_p20;

assign grp_fu_662_p20 = select_ln30_3_fu_360_p3;

assign icmp_ln11_fu_296_p2 = ((indvar_flatten7_reg_181 == 8'd156) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_328_p2 = ((f_0_reg_204 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln18_fu_419_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_219_p4 == 4'd9) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_437_p2 = ((ap_phi_mux_wc_0_phi_fu_253_p4 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_636_p2 = ((trunc_ln29_fu_626_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_630_p2 = ((tmp_fu_616_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_278_p2 = ((indvar_flatten21_reg_159 == 12'd4056) ? 1'b1 : 1'b0);

assign input_r_address0 = sext_ln23_1_fu_585_p1;

assign or_ln29_fu_642_p2 = (icmp_ln29_fu_630_p2 | icmp_ln29_7_fu_636_p2);

assign or_ln30_fu_346_p2 = (icmp_ln11_fu_296_p2 | and_ln30_fu_334_p2);

assign p_shl2_cast_fu_538_p3 = {{trunc_ln23_fu_534_p1}, {3'd0}};

assign p_shl3_cast_fu_546_p3 = {{add_ln23_fu_528_p2}, {1'd0}};

assign p_shl_cast_fu_372_p3 = {{grp_fu_662_p3}, {3'd0}};

assign r_fu_290_p2 = (r_0_reg_170 + 5'd1);

assign select_ln11_fu_606_p3 = ((icmp_ln11_reg_681[0:0] === 1'b1) ? 8'd1 : add_ln11_1_fu_600_p2);

assign select_ln18_1_fu_451_p3 = ((icmp_ln21_fu_437_p2[0:0] === 1'b1) ? wr_fu_431_p2 : ap_phi_mux_wr_0_phi_fu_230_p4);

assign select_ln18_fu_443_p3 = ((icmp_ln21_fu_437_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_253_p4);

assign select_ln30_1_fu_310_p3 = ((icmp_ln11_fu_296_p2[0:0] === 1'b1) ? r_fu_290_p2 : r_0_reg_170);

assign select_ln30_2_fu_352_p3 = ((or_ln30_fu_346_p2[0:0] === 1'b1) ? 3'd0 : f_0_reg_204);

assign select_ln30_3_fu_360_p3 = ((and_ln30_fu_334_p2[0:0] === 1'b1) ? c_fu_340_p2 : select_ln30_fu_302_p3);

assign select_ln30_fu_302_p3 = ((icmp_ln11_fu_296_p2[0:0] === 1'b1) ? 5'd0 : c_0_reg_193);

assign sext_ln23_1_fu_585_p1 = $signed(add_ln23_3_fu_579_p2);

assign sext_ln23_fu_481_p1 = $signed(sub_ln23_fu_475_p2);

assign sub_ln23_1_fu_514_p2 = (zext_ln23_3_fu_498_p1 - zext_ln23_4_fu_510_p1);

assign sub_ln23_2_fu_554_p2 = (p_shl2_cast_fu_538_p3 - p_shl3_cast_fu_546_p3);

assign sub_ln23_fu_475_p2 = (zext_ln23_2_fu_471_p1 - zext_ln23_1_fu_459_p1);

assign sub_ln30_fu_390_p2 = (p_shl_cast_fu_372_p3 - zext_ln30_2_fu_386_p1);

assign tmp_10_fu_490_p3 = {{add_ln18_fu_485_p2}, {5'd0}};

assign tmp_11_fu_379_p3 = {{grp_fu_662_p3}, {1'd0}};

assign tmp_12_fu_502_p3 = {{add_ln18_fu_485_p2}, {2'd0}};

assign tmp_9_fu_463_p3 = {{select_ln18_1_fu_451_p3}, {2'd0}};

assign tmp_fu_616_p4 = {{bitcast_ln29_fu_613_p1[30:23]}};

assign trunc_ln23_fu_534_p1 = add_ln23_fu_528_p2[3:0];

assign trunc_ln29_fu_626_p1 = bitcast_ln29_fu_613_p1[22:0];

assign wc_fu_590_p2 = (2'd1 + select_ln18_reg_727);

assign wr_fu_431_p2 = (2'd1 + ap_phi_mux_wr_0_phi_fu_230_p4);

assign xor_ln30_fu_322_p2 = (icmp_ln11_fu_296_p2 ^ 1'd1);

assign zext_ln21_fu_520_p1 = select_ln18_fu_443_p3;

assign zext_ln23_1_fu_459_p1 = select_ln18_1_fu_451_p3;

assign zext_ln23_2_fu_471_p1 = tmp_9_fu_463_p3;

assign zext_ln23_3_fu_498_p1 = tmp_10_fu_490_p3;

assign zext_ln23_4_fu_510_p1 = tmp_12_fu_502_p3;

assign zext_ln23_5_fu_524_p1 = select_ln18_fu_443_p3;

assign zext_ln23_6_fu_565_p1 = add_ln23_2_fu_560_p2;

assign zext_ln23_7_fu_575_p1 = add_ln23_1_fu_570_p2;

assign zext_ln23_fu_396_p1 = select_ln30_2_fu_352_p3;

assign zext_ln30_2_fu_386_p1 = tmp_11_fu_379_p3;

assign zext_ln30_3_fu_400_p1 = select_ln30_2_fu_352_p3;

assign zext_ln30_4_fu_404_p1 = select_ln30_2_fu_352_p3;

assign zext_ln30_5_fu_414_p1 = add_ln30_1_fu_408_p2;

always @ (posedge ap_clk) begin
    zext_ln23_reg_703[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln30_3_reg_708[6:3] <= 4'b0000;
end

endmodule //conv_1
