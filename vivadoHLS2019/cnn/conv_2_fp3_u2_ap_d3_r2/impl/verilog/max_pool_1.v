// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        max_pool_out_0_address0,
        max_pool_out_0_ce0,
        max_pool_out_0_we0,
        max_pool_out_0_d0,
        max_pool_out_1_address0,
        max_pool_out_1_ce0,
        max_pool_out_1_we0,
        max_pool_out_1_d0
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [8:0] max_pool_out_0_address0;
output   max_pool_out_0_ce0;
output   max_pool_out_0_we0;
output  [31:0] max_pool_out_0_d0;
output  [8:0] max_pool_out_1_address0;
output   max_pool_out_1_ce0;
output   max_pool_out_1_we0;
output  [31:0] max_pool_out_1_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_ce0;
reg max_pool_out_0_ce0;
reg max_pool_out_0_we0;
reg max_pool_out_1_ce0;
reg max_pool_out_1_we0;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] f_fu_229_p2;
reg   [2:0] f_reg_532;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln36_fu_235_p1;
reg   [12:0] zext_ln36_reg_537;
wire   [0:0] icmp_ln10_fu_223_p2;
wire   [0:0] trunc_ln36_fu_239_p1;
reg   [0:0] trunc_ln36_reg_542;
wire   [9:0] zext_ln13_fu_253_p1;
reg   [9:0] zext_ln13_reg_546;
wire   [7:0] add_ln13_fu_257_p2;
reg   [7:0] add_ln13_reg_551;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_269_p2;
reg   [3:0] r_reg_559;
wire   [4:0] shl_ln_fu_275_p3;
reg   [4:0] shl_ln_reg_564;
wire   [0:0] icmp_ln13_fu_263_p2;
wire   [3:0] c_fu_289_p2;
reg   [3:0] c_reg_572;
wire    ap_CS_fsm_state4;
wire   [4:0] shl_ln2_fu_295_p3;
reg   [4:0] shl_ln2_reg_577;
wire   [0:0] icmp_ln16_fu_283_p2;
wire   [1:0] mpr_fu_313_p2;
reg   [1:0] mpr_reg_585;
wire    ap_CS_fsm_state5;
wire   [9:0] mul_ln29_fu_328_p2;
reg   [9:0] mul_ln29_reg_590;
wire   [0:0] icmp_ln20_fu_307_p2;
wire   [1:0] mpc_fu_383_p2;
reg   [1:0] mpc_reg_598;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_377_p2;
reg   [31:0] max_reg_608;
wire    ap_CS_fsm_state7;
wire   [31:0] max_3_fu_522_p3;
wire    ap_CS_fsm_state8;
reg   [2:0] f_0_reg_123;
reg   [3:0] r_0_reg_134;
reg   [7:0] phi_mul_reg_145;
reg   [3:0] c_0_reg_157;
reg   [31:0] max_0_reg_169;
reg   [1:0] mpr_0_reg_183;
reg   [31:0] max_1_reg_194;
reg   [1:0] mpc_0_reg_206;
wire   [63:0] zext_ln36_6_fu_367_p1;
wire   [63:0] zext_ln29_5_fu_434_p1;
wire   [1:0] tmp_1_fu_243_p4;
wire   [4:0] zext_ln20_fu_303_p1;
wire   [4:0] i_fu_319_p2;
wire   [4:0] mul_ln29_fu_328_p0;
wire   [7:0] zext_ln36_4_fu_334_p1;
wire   [7:0] add_ln36_fu_338_p2;
wire   [9:0] p_shl2_cast_fu_348_p3;
wire   [9:0] zext_ln36_5_fu_344_p1;
wire   [9:0] sub_ln36_fu_356_p2;
wire   [9:0] add_ln36_3_fu_362_p2;
wire   [4:0] zext_ln23_fu_373_p1;
wire   [4:0] j_fu_389_p2;
wire   [9:0] zext_ln29_3_fu_394_p1;
wire   [9:0] add_ln29_fu_398_p2;
wire   [10:0] tmp_2_fu_411_p3;
wire   [12:0] p_shl_cast_fu_403_p3;
wire   [12:0] zext_ln29_4_fu_419_p1;
wire   [12:0] sub_ln29_fu_423_p2;
wire   [12:0] add_ln29_2_fu_429_p2;
wire   [31:0] bitcast_ln29_fu_439_p1;
wire   [31:0] bitcast_ln29_2_fu_456_p1;
wire   [7:0] tmp_fu_442_p4;
wire   [22:0] trunc_ln29_fu_452_p1;
wire   [0:0] icmp_ln29_4_fu_480_p2;
wire   [0:0] icmp_ln29_fu_474_p2;
wire   [7:0] tmp_9_fu_460_p4;
wire   [22:0] trunc_ln29_2_fu_470_p1;
wire   [0:0] icmp_ln29_6_fu_498_p2;
wire   [0:0] icmp_ln29_5_fu_492_p2;
wire   [0:0] or_ln29_fu_486_p2;
wire   [0:0] or_ln29_2_fu_504_p2;
wire   [0:0] and_ln29_fu_510_p2;
wire   [0:0] grp_fu_217_p2;
wire   [0:0] and_ln29_2_fu_516_p2;
reg   [7:0] ap_NS_fsm;
wire   [9:0] mul_ln29_fu_328_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_out_q0),
    .din1(max_1_reg_194),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_217_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_307_p2 == 1'd1))) begin
        c_0_reg_157 <= c_reg_572;
    end else if (((icmp_ln13_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        c_0_reg_157 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_123 <= f_reg_532;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_123 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_377_p2 == 1'd1))) begin
        max_0_reg_169 <= max_1_reg_194;
    end else if (((icmp_ln16_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        max_0_reg_169 <= 32'd8388608;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_1_reg_194 <= max_3_fu_522_p3;
    end else if (((icmp_ln20_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        max_1_reg_194 <= max_0_reg_169;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mpc_0_reg_206 <= mpc_reg_598;
    end else if (((icmp_ln20_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mpc_0_reg_206 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_377_p2 == 1'd1))) begin
        mpr_0_reg_183 <= mpr_reg_585;
    end else if (((icmp_ln16_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        mpr_0_reg_183 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_145 <= add_ln13_reg_551;
    end else if (((icmp_ln10_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_145 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        r_0_reg_134 <= r_reg_559;
    end else if (((icmp_ln10_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        r_0_reg_134 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_551 <= add_ln13_fu_257_p2;
        r_reg_559 <= r_fu_269_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_572 <= c_fu_289_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_532 <= f_fu_229_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_reg_608 <= conv_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_598 <= mpc_fu_383_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_585 <= mpr_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln20_fu_307_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        mul_ln29_reg_590[9 : 1] <= mul_ln29_fu_328_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_283_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln2_reg_577[4 : 1] <= shl_ln2_fu_295_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_263_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        shl_ln_reg_564[4 : 1] <= shl_ln_fu_275_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        trunc_ln36_reg_542 <= trunc_ln36_fu_239_p1;
        zext_ln13_reg_546[1 : 0] <= zext_ln13_fu_253_p1[1 : 0];
        zext_ln36_reg_537[2 : 0] <= zext_ln36_fu_235_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_ce0 = 1'b1;
    end else begin
        max_pool_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln36_reg_542 == 1'd0) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_307_p2 == 1'd1))) begin
        max_pool_out_0_we0 = 1'b1;
    end else begin
        max_pool_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_ce0 = 1'b1;
    end else begin
        max_pool_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln36_reg_542 == 1'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_307_p2 == 1'd1))) begin
        max_pool_out_1_we0 = 1'b1;
    end else begin
        max_pool_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_223_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln13_fu_263_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln16_fu_283_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_307_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_377_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_257_p2 = (phi_mul_reg_145 + 8'd13);

assign add_ln29_2_fu_429_p2 = (sub_ln29_fu_423_p2 + zext_ln36_reg_537);

assign add_ln29_fu_398_p2 = (mul_ln29_reg_590 + zext_ln29_3_fu_394_p1);

assign add_ln36_3_fu_362_p2 = (sub_ln36_fu_356_p2 + zext_ln13_reg_546);

assign add_ln36_fu_338_p2 = (phi_mul_reg_145 + zext_ln36_4_fu_334_p1);

assign and_ln29_2_fu_516_p2 = (grp_fu_217_p2 & and_ln29_fu_510_p2);

assign and_ln29_fu_510_p2 = (or_ln29_fu_486_p2 & or_ln29_2_fu_504_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign bitcast_ln29_2_fu_456_p1 = max_1_reg_194;

assign bitcast_ln29_fu_439_p1 = max_reg_608;

assign c_fu_289_p2 = (c_0_reg_157 + 4'd1);

assign conv_out_address0 = zext_ln29_5_fu_434_p1;

assign f_fu_229_p2 = (f_0_reg_123 + 3'd1);

assign i_fu_319_p2 = (zext_ln20_fu_303_p1 + shl_ln_reg_564);

assign icmp_ln10_fu_223_p2 = ((f_0_reg_123 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_263_p2 = ((r_0_reg_134 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_283_p2 = ((c_0_reg_157 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_307_p2 = ((mpr_0_reg_183 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_377_p2 = ((mpc_0_reg_206 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_480_p2 = ((trunc_ln29_fu_452_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_492_p2 = ((tmp_9_fu_460_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_498_p2 = ((trunc_ln29_2_fu_470_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_474_p2 = ((tmp_fu_442_p4 != 8'd255) ? 1'b1 : 1'b0);

assign j_fu_389_p2 = (zext_ln23_fu_373_p1 + shl_ln2_reg_577);

assign max_3_fu_522_p3 = ((and_ln29_2_fu_516_p2[0:0] === 1'b1) ? max_reg_608 : max_1_reg_194);

assign max_pool_out_0_address0 = zext_ln36_6_fu_367_p1;

assign max_pool_out_0_d0 = max_0_reg_169;

assign max_pool_out_1_address0 = zext_ln36_6_fu_367_p1;

assign max_pool_out_1_d0 = max_0_reg_169;

assign mpc_fu_383_p2 = (mpc_0_reg_206 + 2'd1);

assign mpr_fu_313_p2 = (mpr_0_reg_183 + 2'd1);

assign mul_ln29_fu_328_p0 = mul_ln29_fu_328_p00;

assign mul_ln29_fu_328_p00 = i_fu_319_p2;

assign mul_ln29_fu_328_p2 = (mul_ln29_fu_328_p0 * $signed('h1A));

assign or_ln29_2_fu_504_p2 = (icmp_ln29_6_fu_498_p2 | icmp_ln29_5_fu_492_p2);

assign or_ln29_fu_486_p2 = (icmp_ln29_fu_474_p2 | icmp_ln29_4_fu_480_p2);

assign p_shl2_cast_fu_348_p3 = {{add_ln36_fu_338_p2}, {2'd0}};

assign p_shl_cast_fu_403_p3 = {{add_ln29_fu_398_p2}, {3'd0}};

assign r_fu_269_p2 = (r_0_reg_134 + 4'd1);

assign shl_ln2_fu_295_p3 = {{c_0_reg_157}, {1'd0}};

assign shl_ln_fu_275_p3 = {{r_0_reg_134}, {1'd0}};

assign sub_ln29_fu_423_p2 = (p_shl_cast_fu_403_p3 - zext_ln29_4_fu_419_p1);

assign sub_ln36_fu_356_p2 = (p_shl2_cast_fu_348_p3 - zext_ln36_5_fu_344_p1);

assign tmp_1_fu_243_p4 = {{f_0_reg_123[2:1]}};

assign tmp_2_fu_411_p3 = {{add_ln29_fu_398_p2}, {1'd0}};

assign tmp_9_fu_460_p4 = {{bitcast_ln29_2_fu_456_p1[30:23]}};

assign tmp_fu_442_p4 = {{bitcast_ln29_fu_439_p1[30:23]}};

assign trunc_ln29_2_fu_470_p1 = bitcast_ln29_2_fu_456_p1[22:0];

assign trunc_ln29_fu_452_p1 = bitcast_ln29_fu_439_p1[22:0];

assign trunc_ln36_fu_239_p1 = f_0_reg_123[0:0];

assign zext_ln13_fu_253_p1 = tmp_1_fu_243_p4;

assign zext_ln20_fu_303_p1 = mpr_0_reg_183;

assign zext_ln23_fu_373_p1 = mpc_0_reg_206;

assign zext_ln29_3_fu_394_p1 = j_fu_389_p2;

assign zext_ln29_4_fu_419_p1 = tmp_2_fu_411_p3;

assign zext_ln29_5_fu_434_p1 = add_ln29_2_fu_429_p2;

assign zext_ln36_4_fu_334_p1 = c_0_reg_157;

assign zext_ln36_5_fu_344_p1 = add_ln36_fu_338_p2;

assign zext_ln36_6_fu_367_p1 = add_ln36_3_fu_362_p2;

assign zext_ln36_fu_235_p1 = f_0_reg_123;

always @ (posedge ap_clk) begin
    zext_ln36_reg_537[12:3] <= 10'b0000000000;
    zext_ln13_reg_546[9:2] <= 8'b00000000;
    shl_ln_reg_564[0] <= 1'b0;
    shl_ln2_reg_577[0] <= 1'b0;
    mul_ln29_reg_590[0] <= 1'b0;
end

endmodule //max_pool_1
