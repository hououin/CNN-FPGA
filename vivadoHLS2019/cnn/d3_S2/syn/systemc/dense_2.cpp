// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dense_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dense_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dense_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<14> dense_2::ap_ST_fsm_state1 = "1";
const sc_lv<14> dense_2::ap_ST_fsm_state2 = "10";
const sc_lv<14> dense_2::ap_ST_fsm_state3 = "100";
const sc_lv<14> dense_2::ap_ST_fsm_state4 = "1000";
const sc_lv<14> dense_2::ap_ST_fsm_state5 = "10000";
const sc_lv<14> dense_2::ap_ST_fsm_state6 = "100000";
const sc_lv<14> dense_2::ap_ST_fsm_state7 = "1000000";
const sc_lv<14> dense_2::ap_ST_fsm_state8 = "10000000";
const sc_lv<14> dense_2::ap_ST_fsm_state9 = "100000000";
const sc_lv<14> dense_2::ap_ST_fsm_state10 = "1000000000";
const sc_lv<14> dense_2::ap_ST_fsm_state11 = "10000000000";
const sc_lv<14> dense_2::ap_ST_fsm_state12 = "100000000000";
const sc_lv<14> dense_2::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<14> dense_2::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<32> dense_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dense_2::ap_const_lv32_1 = "1";
const sc_lv<1> dense_2::ap_const_lv1_0 = "0";
const sc_lv<32> dense_2::ap_const_lv32_2 = "10";
const sc_lv<1> dense_2::ap_const_lv1_1 = "1";
const sc_lv<32> dense_2::ap_const_lv32_3 = "11";
const sc_lv<32> dense_2::ap_const_lv32_4 = "100";
const sc_lv<32> dense_2::ap_const_lv32_8 = "1000";
const sc_lv<32> dense_2::ap_const_lv32_9 = "1001";
const sc_lv<32> dense_2::ap_const_lv32_C = "1100";
const sc_lv<5> dense_2::ap_const_lv5_0 = "00000";
const sc_lv<32> dense_2::ap_const_lv32_D = "1101";
const sc_lv<6> dense_2::ap_const_lv6_0 = "000000";
const sc_lv<32> dense_2::ap_const_lv32_5 = "101";
const sc_lv<5> dense_2::ap_const_lv5_1E = "11110";
const sc_lv<5> dense_2::ap_const_lv5_1 = "1";
const sc_lv<6> dense_2::ap_const_lv6_32 = "110010";
const sc_lv<6> dense_2::ap_const_lv6_1 = "1";
const sc_lv<32> dense_2::ap_const_lv32_17 = "10111";
const sc_lv<32> dense_2::ap_const_lv32_1E = "11110";
const sc_lv<8> dense_2::ap_const_lv8_FF = "11111111";
const sc_lv<23> dense_2::ap_const_lv23_0 = "00000000000000000000000";
const sc_lv<5> dense_2::ap_const_lv5_4 = "100";
const bool dense_2::ap_const_boolean_1 = true;

dense_2::dense_2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dense_2_weights_U = new dense_2_dense_2_wibs("dense_2_weights_U");
    dense_2_weights_U->clk(ap_clk);
    dense_2_weights_U->reset(ap_rst);
    dense_2_weights_U->address0(dense_2_weights_address0);
    dense_2_weights_U->ce0(dense_2_weights_ce0);
    dense_2_weights_U->q0(dense_2_weights_q0);
    dense_2_bias_U = new dense_2_dense_2_bjbC("dense_2_bias_U");
    dense_2_bias_U->clk(ap_clk);
    dense_2_bias_U->reset(ap_rst);
    dense_2_bias_U->address0(dense_2_bias_address0);
    dense_2_bias_U->ce0(dense_2_bias_ce0);
    dense_2_bias_U->q0(dense_2_bias_q0);
    cnn_fadd_32ns_32ncud_U33 = new cnn_fadd_32ns_32ncud<1,4,32,32,32>("cnn_fadd_32ns_32ncud_U33");
    cnn_fadd_32ns_32ncud_U33->clk(ap_clk);
    cnn_fadd_32ns_32ncud_U33->reset(ap_rst);
    cnn_fadd_32ns_32ncud_U33->din0(sum_0_reg_119);
    cnn_fadd_32ns_32ncud_U33->din1(grp_fu_142_p1);
    cnn_fadd_32ns_32ncud_U33->ce(ap_var_for_const0);
    cnn_fadd_32ns_32ncud_U33->dout(grp_fu_142_p2);
    cnn_fmul_32ns_32ndEe_U34 = new cnn_fmul_32ns_32ndEe<1,2,32,32,32>("cnn_fmul_32ns_32ndEe_U34");
    cnn_fmul_32ns_32ndEe_U34->clk(ap_clk);
    cnn_fmul_32ns_32ndEe_U34->reset(ap_rst);
    cnn_fmul_32ns_32ndEe_U34->din0(dense_1_out_q0);
    cnn_fmul_32ns_32ndEe_U34->din1(dense_2_weights_q0);
    cnn_fmul_32ns_32ndEe_U34->ce(ap_var_for_const0);
    cnn_fmul_32ns_32ndEe_U34->dout(grp_fu_148_p2);
    cnn_fcmp_32ns_32neOg_U35 = new cnn_fcmp_32ns_32neOg<1,2,32,32,1>("cnn_fcmp_32ns_32neOg_U35");
    cnn_fcmp_32ns_32neOg_U35->clk(ap_clk);
    cnn_fcmp_32ns_32neOg_U35->reset(ap_rst);
    cnn_fcmp_32ns_32neOg_U35->din0(grp_fu_142_p2);
    cnn_fcmp_32ns_32neOg_U35->din1(ap_var_for_const1);
    cnn_fcmp_32ns_32neOg_U35->ce(ap_var_for_const0);
    cnn_fcmp_32ns_32neOg_U35->opcode(ap_var_for_const2);
    cnn_fcmp_32ns_32neOg_U35->dout(grp_fu_154_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln14_fu_227_p2);
    sensitive << ( zext_ln13_reg_300 );
    sensitive << ( sub_ln14_fu_221_p2 );

    SC_METHOD(thread_and_ln19_fu_272_p2);
    sensitive << ( or_ln19_fu_266_p2 );
    sensitive << ( grp_fu_154_p2 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_160_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_160_p2 );

    SC_METHOD(thread_bitcast_ln19_fu_237_p1);
    sensitive << ( tmp_reg_353 );

    SC_METHOD(thread_dense_1_out_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln14_4_fu_192_p1 );

    SC_METHOD(thread_dense_1_out_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_2_bias_address0);
    sensitive << ( zext_ln14_reg_294 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_2_bias_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_2_out_address0);
    sensitive << ( zext_ln14_reg_294 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dense_2_out_ce0);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dense_2_out_d0);
    sensitive << ( tmp_reg_353 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( and_ln19_fu_272_p2 );

    SC_METHOD(thread_dense_2_out_we0);
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_dense_2_weights_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( sext_ln14_fu_232_p1 );

    SC_METHOD(thread_dense_2_weights_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_142_p1);
    sensitive << ( dense_2_bias_q0 );
    sensitive << ( tmp_7_reg_338 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_i_fu_166_p2);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_icmp_ln13_fu_180_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_icmp_ln19_1_fu_260_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( trunc_ln19_fu_250_p1 );

    SC_METHOD(thread_icmp_ln19_fu_254_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_5_fu_240_p4 );

    SC_METHOD(thread_icmp_ln9_fu_160_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_j_fu_186_p2);
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_or_ln19_fu_266_p2);
    sensitive << ( icmp_ln19_1_fu_260_p2 );
    sensitive << ( icmp_ln19_fu_254_p2 );

    SC_METHOD(thread_sext_ln14_fu_232_p1);
    sensitive << ( add_ln14_fu_227_p2 );

    SC_METHOD(thread_sub_ln14_fu_221_p2);
    sensitive << ( zext_ln14_6_fu_205_p1 );
    sensitive << ( zext_ln14_7_fu_217_p1 );

    SC_METHOD(thread_tmp_3_fu_197_p3);
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_tmp_4_fu_209_p3);
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_tmp_5_fu_240_p4);
    sensitive << ( bitcast_ln19_fu_237_p1 );

    SC_METHOD(thread_trunc_ln19_fu_250_p1);
    sensitive << ( bitcast_ln19_fu_237_p1 );

    SC_METHOD(thread_zext_ln13_fu_176_p1);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_zext_ln14_4_fu_192_p1);
    sensitive << ( j_0_reg_131 );

    SC_METHOD(thread_zext_ln14_6_fu_205_p1);
    sensitive << ( tmp_3_fu_197_p3 );

    SC_METHOD(thread_zext_ln14_7_fu_217_p1);
    sensitive << ( tmp_4_fu_209_p3 );

    SC_METHOD(thread_zext_ln14_fu_172_p1);
    sensitive << ( i_0_reg_108 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln9_fu_160_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln13_fu_180_p2 );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    SC_THREAD(thread_ap_var_for_const2);

    ap_CS_fsm = "00000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dense_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, dense_2_out_address0, "(port)dense_2_out_address0");
    sc_trace(mVcdFile, dense_2_out_ce0, "(port)dense_2_out_ce0");
    sc_trace(mVcdFile, dense_2_out_we0, "(port)dense_2_out_we0");
    sc_trace(mVcdFile, dense_2_out_d0, "(port)dense_2_out_d0");
    sc_trace(mVcdFile, dense_1_out_address0, "(port)dense_1_out_address0");
    sc_trace(mVcdFile, dense_1_out_ce0, "(port)dense_1_out_ce0");
    sc_trace(mVcdFile, dense_1_out_q0, "(port)dense_1_out_q0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dense_2_weights_address0, "dense_2_weights_address0");
    sc_trace(mVcdFile, dense_2_weights_ce0, "dense_2_weights_ce0");
    sc_trace(mVcdFile, dense_2_weights_q0, "dense_2_weights_q0");
    sc_trace(mVcdFile, dense_2_bias_address0, "dense_2_bias_address0");
    sc_trace(mVcdFile, dense_2_bias_ce0, "dense_2_bias_ce0");
    sc_trace(mVcdFile, dense_2_bias_q0, "dense_2_bias_q0");
    sc_trace(mVcdFile, i_fu_166_p2, "i_fu_166_p2");
    sc_trace(mVcdFile, i_reg_289, "i_reg_289");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln14_fu_172_p1, "zext_ln14_fu_172_p1");
    sc_trace(mVcdFile, zext_ln14_reg_294, "zext_ln14_reg_294");
    sc_trace(mVcdFile, icmp_ln9_fu_160_p2, "icmp_ln9_fu_160_p2");
    sc_trace(mVcdFile, zext_ln13_fu_176_p1, "zext_ln13_fu_176_p1");
    sc_trace(mVcdFile, zext_ln13_reg_300, "zext_ln13_reg_300");
    sc_trace(mVcdFile, j_fu_186_p2, "j_fu_186_p2");
    sc_trace(mVcdFile, j_reg_308, "j_reg_308");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln13_fu_180_p2, "icmp_ln13_fu_180_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_148_p2, "grp_fu_148_p2");
    sc_trace(mVcdFile, tmp_7_reg_338, "tmp_7_reg_338");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_142_p2, "grp_fu_142_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, tmp_reg_353, "tmp_reg_353");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, i_0_reg_108, "i_0_reg_108");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, sum_0_reg_119, "sum_0_reg_119");
    sc_trace(mVcdFile, j_0_reg_131, "j_0_reg_131");
    sc_trace(mVcdFile, sext_ln14_fu_232_p1, "sext_ln14_fu_232_p1");
    sc_trace(mVcdFile, zext_ln14_4_fu_192_p1, "zext_ln14_4_fu_192_p1");
    sc_trace(mVcdFile, grp_fu_142_p1, "grp_fu_142_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, tmp_3_fu_197_p3, "tmp_3_fu_197_p3");
    sc_trace(mVcdFile, tmp_4_fu_209_p3, "tmp_4_fu_209_p3");
    sc_trace(mVcdFile, zext_ln14_6_fu_205_p1, "zext_ln14_6_fu_205_p1");
    sc_trace(mVcdFile, zext_ln14_7_fu_217_p1, "zext_ln14_7_fu_217_p1");
    sc_trace(mVcdFile, sub_ln14_fu_221_p2, "sub_ln14_fu_221_p2");
    sc_trace(mVcdFile, add_ln14_fu_227_p2, "add_ln14_fu_227_p2");
    sc_trace(mVcdFile, bitcast_ln19_fu_237_p1, "bitcast_ln19_fu_237_p1");
    sc_trace(mVcdFile, tmp_5_fu_240_p4, "tmp_5_fu_240_p4");
    sc_trace(mVcdFile, trunc_ln19_fu_250_p1, "trunc_ln19_fu_250_p1");
    sc_trace(mVcdFile, icmp_ln19_1_fu_260_p2, "icmp_ln19_1_fu_260_p2");
    sc_trace(mVcdFile, icmp_ln19_fu_254_p2, "icmp_ln19_fu_254_p2");
    sc_trace(mVcdFile, or_ln19_fu_266_p2, "or_ln19_fu_266_p2");
    sc_trace(mVcdFile, grp_fu_154_p2, "grp_fu_154_p2");
    sc_trace(mVcdFile, and_ln19_fu_272_p2, "and_ln19_fu_272_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

dense_2::~dense_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete dense_2_weights_U;
    delete dense_2_bias_U;
    delete cnn_fadd_32ns_32ncud_U33;
    delete cnn_fmul_32ns_32ndEe_U34;
    delete cnn_fcmp_32ns_32neOg_U35;
}

void dense_2::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dense_2::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void dense_2::thread_ap_var_for_const2() {
    ap_var_for_const2 = ap_const_lv5_4;
}

void dense_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_0_reg_108 = i_reg_289.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_0_reg_108 = ap_const_lv5_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        j_0_reg_131 = j_reg_308.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln9_fu_160_p2.read(), ap_const_lv1_0))) {
        j_0_reg_131 = ap_const_lv6_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        sum_0_reg_119 = grp_fu_142_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln9_fu_160_p2.read(), ap_const_lv1_0))) {
        sum_0_reg_119 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_reg_289 = i_fu_166_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        j_reg_308 = j_fu_186_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_7_reg_338 = grp_fu_148_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_reg_353 = grp_fu_142_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_160_p2.read(), ap_const_lv1_0))) {
        zext_ln13_reg_300 = zext_ln13_fu_176_p1.read();
        zext_ln14_reg_294 = zext_ln14_fu_172_p1.read();
    }
}

void dense_2::thread_add_ln14_fu_227_p2() {
    add_ln14_fu_227_p2 = (!sub_ln14_fu_221_p2.read().is_01() || !zext_ln13_reg_300.read().is_01())? sc_lv<12>(): (sc_biguint<12>(sub_ln14_fu_221_p2.read()) + sc_biguint<12>(zext_ln13_reg_300.read()));
}

void dense_2::thread_and_ln19_fu_272_p2() {
    and_ln19_fu_272_p2 = (or_ln19_fu_266_p2.read() & grp_fu_154_p2.read());
}

void dense_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dense_2::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void dense_2::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void dense_2::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void dense_2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dense_2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dense_2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dense_2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void dense_2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void dense_2::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void dense_2::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(icmp_ln9_fu_160_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dense_2::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dense_2::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln9_fu_160_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dense_2::thread_bitcast_ln19_fu_237_p1() {
    bitcast_ln19_fu_237_p1 = tmp_reg_353.read();
}

void dense_2::thread_dense_1_out_address0() {
    dense_1_out_address0 =  (sc_lv<6>) (zext_ln14_4_fu_192_p1.read());
}

void dense_2::thread_dense_1_out_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_1_out_ce0 = ap_const_logic_1;
    } else {
        dense_1_out_ce0 = ap_const_logic_0;
    }
}

void dense_2::thread_dense_2_bias_address0() {
    dense_2_bias_address0 =  (sc_lv<5>) (zext_ln14_reg_294.read());
}

void dense_2::thread_dense_2_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_2_bias_ce0 = ap_const_logic_1;
    } else {
        dense_2_bias_ce0 = ap_const_logic_0;
    }
}

void dense_2::thread_dense_2_out_address0() {
    dense_2_out_address0 =  (sc_lv<5>) (zext_ln14_reg_294.read());
}

void dense_2::thread_dense_2_out_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dense_2_out_ce0 = ap_const_logic_1;
    } else {
        dense_2_out_ce0 = ap_const_logic_0;
    }
}

void dense_2::thread_dense_2_out_d0() {
    dense_2_out_d0 = (!and_ln19_fu_272_p2.read()[0].is_01())? sc_lv<32>(): ((and_ln19_fu_272_p2.read()[0].to_bool())? ap_const_lv32_0: tmp_reg_353.read());
}

void dense_2::thread_dense_2_out_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dense_2_out_we0 = ap_const_logic_1;
    } else {
        dense_2_out_we0 = ap_const_logic_0;
    }
}

void dense_2::thread_dense_2_weights_address0() {
    dense_2_weights_address0 =  (sc_lv<11>) (sext_ln14_fu_232_p1.read());
}

void dense_2::thread_dense_2_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_2_weights_ce0 = ap_const_logic_1;
    } else {
        dense_2_weights_ce0 = ap_const_logic_0;
    }
}

void dense_2::thread_grp_fu_142_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_142_p1 = dense_2_bias_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_142_p1 = tmp_7_reg_338.read();
    } else {
        grp_fu_142_p1 = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void dense_2::thread_i_fu_166_p2() {
    i_fu_166_p2 = (!i_0_reg_108.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_108.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void dense_2::thread_icmp_ln13_fu_180_p2() {
    icmp_ln13_fu_180_p2 = (!j_0_reg_131.read().is_01() || !ap_const_lv6_32.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_131.read() == ap_const_lv6_32);
}

void dense_2::thread_icmp_ln19_1_fu_260_p2() {
    icmp_ln19_1_fu_260_p2 = (!trunc_ln19_fu_250_p1.read().is_01() || !ap_const_lv23_0.is_01())? sc_lv<1>(): sc_lv<1>(trunc_ln19_fu_250_p1.read() == ap_const_lv23_0);
}

void dense_2::thread_icmp_ln19_fu_254_p2() {
    icmp_ln19_fu_254_p2 = (!tmp_5_fu_240_p4.read().is_01() || !ap_const_lv8_FF.is_01())? sc_lv<1>(): sc_lv<1>(tmp_5_fu_240_p4.read() != ap_const_lv8_FF);
}

void dense_2::thread_icmp_ln9_fu_160_p2() {
    icmp_ln9_fu_160_p2 = (!i_0_reg_108.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_108.read() == ap_const_lv5_1E);
}

void dense_2::thread_j_fu_186_p2() {
    j_fu_186_p2 = (!j_0_reg_131.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_0_reg_131.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void dense_2::thread_or_ln19_fu_266_p2() {
    or_ln19_fu_266_p2 = (icmp_ln19_1_fu_260_p2.read() | icmp_ln19_fu_254_p2.read());
}

void dense_2::thread_sext_ln14_fu_232_p1() {
    sext_ln14_fu_232_p1 = esl_sext<64,12>(add_ln14_fu_227_p2.read());
}

void dense_2::thread_sub_ln14_fu_221_p2() {
    sub_ln14_fu_221_p2 = (!zext_ln14_6_fu_205_p1.read().is_01() || !zext_ln14_7_fu_217_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(zext_ln14_6_fu_205_p1.read()) - sc_biguint<12>(zext_ln14_7_fu_217_p1.read()));
}

void dense_2::thread_tmp_3_fu_197_p3() {
    tmp_3_fu_197_p3 = esl_concat<6,5>(j_0_reg_131.read(), ap_const_lv5_0);
}

void dense_2::thread_tmp_4_fu_209_p3() {
    tmp_4_fu_209_p3 = esl_concat<6,1>(j_0_reg_131.read(), ap_const_lv1_0);
}

void dense_2::thread_tmp_5_fu_240_p4() {
    tmp_5_fu_240_p4 = bitcast_ln19_fu_237_p1.read().range(30, 23);
}

void dense_2::thread_trunc_ln19_fu_250_p1() {
    trunc_ln19_fu_250_p1 = bitcast_ln19_fu_237_p1.read().range(23-1, 0);
}

void dense_2::thread_zext_ln13_fu_176_p1() {
    zext_ln13_fu_176_p1 = esl_zext<12,5>(i_0_reg_108.read());
}

void dense_2::thread_zext_ln14_4_fu_192_p1() {
    zext_ln14_4_fu_192_p1 = esl_zext<64,6>(j_0_reg_131.read());
}

void dense_2::thread_zext_ln14_6_fu_205_p1() {
    zext_ln14_6_fu_205_p1 = esl_zext<12,11>(tmp_3_fu_197_p3.read());
}

void dense_2::thread_zext_ln14_7_fu_217_p1() {
    zext_ln14_7_fu_217_p1 = esl_zext<12,7>(tmp_4_fu_209_p3.read());
}

void dense_2::thread_zext_ln14_fu_172_p1() {
    zext_ln14_fu_172_p1 = esl_zext<64,5>(i_0_reg_108.read());
}

void dense_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln9_fu_160_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln13_fu_180_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<14>) ("XXXXXXXXXXXXXX");
            break;
    }
}

}

