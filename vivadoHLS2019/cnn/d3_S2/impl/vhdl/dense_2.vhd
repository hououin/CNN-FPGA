-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_2_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_ce0 : OUT STD_LOGIC;
    dense_2_out_we0 : OUT STD_LOGIC;
    dense_2_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    dense_1_out_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    dense_1_out_ce0 : OUT STD_LOGIC;
    dense_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_2_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_ce0 : STD_LOGIC;
    signal dense_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_ce0 : STD_LOGIC;
    signal dense_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_fu_166_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_289 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln14_fu_172_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_294 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_176_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_reg_300 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_fu_186_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_308 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln13_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_148_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_reg_338 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_142_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_reg_353 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_0_reg_108 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal sum_0_reg_119 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_reg_131 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln14_fu_232_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_4_fu_192_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_142_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_3_fu_197_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_fu_209_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln14_6_fu_205_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_7_fu_217_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln14_fu_221_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_fu_227_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln19_fu_237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_240_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_fu_250_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln19_1_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_254_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component dense_2_dense_2_wibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_2_dense_2_bjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_2_weights_U : component dense_2_dense_2_wibs
    generic map (
        DataWidth => 32,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_weights_address0,
        ce0 => dense_2_weights_ce0,
        q0 => dense_2_weights_q0);

    dense_2_bias_U : component dense_2_dense_2_bjbC
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_address0,
        ce0 => dense_2_bias_ce0,
        q0 => dense_2_bias_q0);

    cnn_fadd_32ns_32ncud_U33 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => sum_0_reg_119,
        din1 => grp_fu_142_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_142_p2);

    cnn_fmul_32ns_32ndEe_U34 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_1_out_q0,
        din1 => dense_2_weights_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_148_p2);

    cnn_fcmp_32ns_32neOg_U35 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_142_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_154_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                i_0_reg_108 <= i_reg_289;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_108 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_131 <= j_reg_308;
            elsif (((icmp_ln9_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_131 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    sum_0_reg_119_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                sum_0_reg_119 <= grp_fu_142_p2;
            elsif (((icmp_ln9_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                sum_0_reg_119 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_289 <= i_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_308 <= j_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_7_reg_338 <= grp_fu_148_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_reg_353 <= grp_fu_142_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_160_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_reg_300(4 downto 0) <= zext_ln13_fu_176_p1(4 downto 0);
                    zext_ln14_reg_294(4 downto 0) <= zext_ln14_fu_172_p1(4 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_294(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_300(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_160_p2, ap_CS_fsm_state3, icmp_ln13_fu_180_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln13_fu_180_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln14_fu_227_p2 <= std_logic_vector(unsigned(sub_ln14_fu_221_p2) + unsigned(zext_ln13_reg_300));
    and_ln19_fu_272_p2 <= (or_ln19_fu_266_p2 and grp_fu_154_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_160_p2)
    begin
        if ((((icmp_ln9_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_160_p2)
    begin
        if (((icmp_ln9_fu_160_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln19_fu_237_p1 <= tmp_reg_353;
    dense_1_out_address0 <= zext_ln14_4_fu_192_p1(6 - 1 downto 0);

    dense_1_out_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_1_out_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_address0 <= zext_ln14_reg_294(5 - 1 downto 0);

    dense_2_bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_bias_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_address0 <= zext_ln14_reg_294(5 - 1 downto 0);

    dense_2_out_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_2_out_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_d0 <= 
        ap_const_lv32_0 when (and_ln19_fu_272_p2(0) = '1') else 
        tmp_reg_353;

    dense_2_out_we0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_2_out_we0 <= ap_const_logic_1;
        else 
            dense_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_address0 <= sext_ln14_fu_232_p1(11 - 1 downto 0);

    dense_2_weights_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_weights_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_142_p1_assign_proc : process(dense_2_bias_q0, tmp_7_reg_338, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_142_p1 <= dense_2_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_142_p1 <= tmp_7_reg_338;
        else 
            grp_fu_142_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_166_p2 <= std_logic_vector(unsigned(i_0_reg_108) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_180_p2 <= "1" when (j_0_reg_131 = ap_const_lv6_32) else "0";
    icmp_ln19_1_fu_260_p2 <= "1" when (trunc_ln19_fu_250_p1 = ap_const_lv23_0) else "0";
    icmp_ln19_fu_254_p2 <= "0" when (tmp_5_fu_240_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_160_p2 <= "1" when (i_0_reg_108 = ap_const_lv5_1E) else "0";
    j_fu_186_p2 <= std_logic_vector(unsigned(j_0_reg_131) + unsigned(ap_const_lv6_1));
    or_ln19_fu_266_p2 <= (icmp_ln19_fu_254_p2 or icmp_ln19_1_fu_260_p2);
        sext_ln14_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_fu_227_p2),64));

    sub_ln14_fu_221_p2 <= std_logic_vector(unsigned(zext_ln14_6_fu_205_p1) - unsigned(zext_ln14_7_fu_217_p1));
    tmp_3_fu_197_p3 <= (j_0_reg_131 & ap_const_lv5_0);
    tmp_4_fu_209_p3 <= (j_0_reg_131 & ap_const_lv1_0);
    tmp_5_fu_240_p4 <= bitcast_ln19_fu_237_p1(30 downto 23);
    trunc_ln19_fu_250_p1 <= bitcast_ln19_fu_237_p1(23 - 1 downto 0);
    zext_ln13_fu_176_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_108),12));
    zext_ln14_4_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_131),64));
    zext_ln14_6_fu_205_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_197_p3),12));
    zext_ln14_7_fu_217_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_209_p3),12));
    zext_ln14_fu_172_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_108),64));
end behav;
