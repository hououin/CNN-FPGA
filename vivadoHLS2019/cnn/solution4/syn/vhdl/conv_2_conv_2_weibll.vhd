-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibll_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibll_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100101010100110000010111", 
    1 => "10111101101111111111110011101010", 
    2 => "10111101111110001101101111100110", 
    3 => "00111100011010101011110111111110", 
    4 => "10111101100111010001011000111011", 
    5 => "10111101100101111110011110111111", 
    6 => "10111110010100110111100010001111", 
    7 => "10111110000111110110100001000010", 
    8 => "00111110001011101011110011000101", 
    9 => "00111100110111010110011110110101", 
    10 => "00111101101010101001100010011101", 
    11 => "10111100010000010010010110001100", 
    12 => "10111110000101011100111110010100", 
    13 => "10111110001111010010001010000000", 
    14 => "00111101010011101001111111010110", 
    15 => "00111110010011000001101001100111", 
    16 => "10111110100111001001101100100101", 
    17 => "10111101100000011100011100110010", 
    18 => "00111101010100110100110010101101", 
    19 => "10111011001011101110001011010000", 
    20 => "00111101010000101001110000111111", 
    21 => "10111110010010000111001000001111", 
    22 => "10111110100000101001101010111111", 
    23 => "00111101101001101000111001000000", 
    24 => "10111110010111100010001100010110", 
    25 => "00111110010110001111001111010010", 
    26 => "00111100110001011010001101101000", 
    27 => "00111101010010111011101001100010", 
    28 => "10111110000000111010000110010011", 
    29 => "10111101100111011011110001000110", 
    30 => "00111011100100101110100000001111", 
    31 => "10111110011010110010010000010000", 
    32 => "00111100001100010100100101101011", 
    33 => "10111101110000001000010100100110", 
    34 => "00111101011100000101000101000111", 
    35 => "00111011111001101100111010000100", 
    36 => "10111101100111111100011100101011", 
    37 => "00111101100000010000011110010111", 
    38 => "10111110000110000111001001010000", 
    39 => "00111011100001110000010011101000", 
    40 => "10111101100011101111010010111010", 
    41 => "00111110100011111011100010101000", 
    42 => "10111110001101110011100001101101", 
    43 => "00111101110000000001111110110000", 
    44 => "00111101111010001110011011011100", 
    45 => "00111101010011001010000010001010", 
    46 => "10111110000101010100110100100110", 
    47 => "10111101101100010001110011010011", 
    48 => "10111110000011011100100110010011", 
    49 => "10111110010110111100100110111001", 
    50 => "00111100001111100110110101111100", 
    51 => "10111101100000011001100100010001", 
    52 => "10111101101011000111000101110111", 
    53 => "00111101000001100011111110111110", 
    54 => "10111101100101001000100000110001", 
    55 => "10111101110110011010101100100011", 
    56 => "10111110000100111111101110011001", 
    57 => "00111100011010011010000110000011", 
    58 => "10111011100111011011100011010101", 
    59 => "00111011010101001000011010110100", 
    60 => "00111101000110110100011100110001", 
    61 => "00111110001110010000101111100001", 
    62 => "00111101110100011010000110010010", 
    63 => "00111110010010111001110000010001", 
    64 => "10111110000111001011010111110110", 
    65 => "10111100101010000100111001100000", 
    66 => "10111101011111001010110101101100", 
    67 => "10111101001001110110000010000001", 
    68 => "10111110000101111010001100111011", 
    69 => "10111101101001100010011110010100", 
    70 => "10111101011110100111100101001000", 
    71 => "10111101100101001000010100100010", 
    72 => "00111100100001100000111000111010", 
    73 => "10111011101110111101111011010101", 
    74 => "00111101011110100110000001001010", 
    75 => "00111101001111101000110111001001", 
    76 => "10111101111101110010001100111101", 
    77 => "10111101001001111111010100000011", 
    78 => "00111110001111101001011011110111", 
    79 => "00111101110100111110011100110100", 
    80 => "00111101100110111110111110000000", 
    81 => "10111101001010000001101011100001", 
    82 => "00111110001001100100100000001000", 
    83 => "00111110000000111000000100000100", 
    84 => "00111110001001011110010010010011", 
    85 => "10111110001011100100000110100000", 
    86 => "00111101110101011000000011100010", 
    87 => "10111011101010110001000011110100", 
    88 => "10111101111100101110110010000100", 
    89 => "10111101001110001001101001111001", 
    90 => "00111101000001111101000111111111", 
    91 => "10111110001001111110010101100001", 
    92 => "00111101011111010011011010101100", 
    93 => "00111101110101011000101000011100", 
    94 => "10111101010001110001110100011111", 
    95 => "10111100111010100001001011111010", 
    96 => "00111100100010000011000000011001", 
    97 => "10111100010100111011001101111001", 
    98 => "10111101001100111001111000000010", 
    99 => "00111101010000001111101111110110", 
    100 => "10111110000110101110010110010110", 
    101 => "00111101000100001110111110010011", 
    102 => "10111110000001000011101000111111", 
    103 => "10111110010001001111011010011110", 
    104 => "10111101101001100010011000011110", 
    105 => "10111110010000000101001010110101", 
    106 => "10111101111011011100101110101100", 
    107 => "10111100000111000100110101111101", 
    108 => "00111100110111011001010011010111", 
    109 => "00111110001000010011111111101001", 
    110 => "10111110010001011110100111101101", 
    111 => "00111100011000100110010110000000", 
    112 => "10111101110100111100101101010101", 
    113 => "10111110010101101111101110101011", 
    114 => "00111101011010001000000100011101", 
    115 => "00111101110000100010001110100010", 
    116 => "10111100110100101000110111101111", 
    117 => "10111101111001010101001111111111", 
    118 => "10111110000010010010111000100110", 
    119 => "10111110101011001010000000000111", 
    120 => "00111110100000001111100010001000", 
    121 => "00111101110011111101101100000111", 
    122 => "10111110100001110101010101011111", 
    123 => "00111101001111010110100001011110", 
    124 => "00111100101101010000011000010000", 
    125 => "00111101110101000101110111110101", 
    126 => "10111110000110100010110100110010", 
    127 => "10111101011101111101001110000110", 
    128 => "00111101101111011110101010000110", 
    129 => "00111100001110110101011010100011", 
    130 => "10111101100011010000110001010100", 
    131 => "00111100000101000001000101110111", 
    132 => "10111101111011101101011101010101", 
    133 => "00111101100100001001100110001001", 
    134 => "10111110010101010011001010000101", 
    135 => "00111101100110010110101001110110", 
    136 => "00111100101111111110011110000111", 
    137 => "00111100000111111011111101101100", 
    138 => "10111011011110011111011101101011", 
    139 => "10111101101110000100001011101101", 
    140 => "10111101111010100101111100001101", 
    141 => "10111100010110001110010100101100", 
    142 => "10111110000111001010000000001101", 
    143 => "10111101011101101110001101111111", 
    144 => "00111101101000000000001011100111", 
    145 => "00111110000100110110100011100010", 
    146 => "00111110001000001011100100100000", 
    147 => "00111101011111110101101111001110", 
    148 => "10111110011111100000000010011101", 
    149 => "10111110100110001001110011001010", 
    150 => "00111101111100011001100101000111", 
    151 => "10111110001001100000010101110010", 
    152 => "10111110011001100111110100100100", 
    153 => "00111101000100000110001101100011", 
    154 => "00111110001011110110000000110010", 
    155 => "10111100110000000111111100111001", 
    156 => "10111101101010011011101100000011", 
    157 => "00111101000010010001101001100011", 
    158 => "00111101110101100000011111110101", 
    159 => "10111101001001111001000111010111", 
    160 => "00111101000010010001001100101001", 
    161 => "10111100101111110001100110000111", 
    162 => "00111101100110110111001001110111", 
    163 => "10111110011010000010101110011101", 
    164 => "10111110000001111010111101010001", 
    165 => "10111110100010000101100101001110", 
    166 => "10111110001001110111000111100110", 
    167 => "00111101101011100110000010001111", 
    168 => "10111101101000101101100011101110", 
    169 => "10111100100110001101110001101100", 
    170 => "10111101001110100011110000011100", 
    171 => "10111101110010101000111011010000", 
    172 => "10111110000100110110000101100000", 
    173 => "10111101000100111100111110100110", 
    174 => "10111110000010111101000001101001", 
    175 => "10111101100000111110110001100010", 
    176 => "00111101110101011100101111000000", 
    177 => "00111100001011001011001010101100", 
    178 => "10111110000010010000110011010100", 
    179 => "10111101000110000111010011010111", 
    180 => "10111101100001011011101011111011", 
    181 => "00111101011000101000001110101111", 
    182 => "10111110011011110100011001010111", 
    183 => "00111101110000100011000000100100", 
    184 => "00111101100010001100011110010010", 
    185 => "10111101000101110000001000111111", 
    186 => "10111110100110010000111111001100", 
    187 => "00111101100010011100110111010110", 
    188 => "10111100100110111100011001010011", 
    189 => "10111110000111010000101001011010", 
    190 => "00111110000101110110010011000100", 
    191 => "00111101101111011010110011001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibll is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibll is
    component conv_2_conv_2_weibll_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibll_rom_U :  component conv_2_conv_2_weibll_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


