-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiZio_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiZio_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001101010100000110001000", 
    1 => "10111100100000101001111101011010", 
    2 => "10111110000001010001000101111101", 
    3 => "10111101010010111101011101110010", 
    4 => "00111110000000100101110011101010", 
    5 => "00111101001000101110101111010011", 
    6 => "00111100111101110100010000100111", 
    7 => "10111100100100111010100000101110", 
    8 => "00111100001010110000010101101111", 
    9 => "00111100100100010110111100110000", 
    10 => "00111100011001010001010010111010", 
    11 => "10111101000010000110001110101010", 
    12 => "00111101011001000100011001000011", 
    13 => "10111101100000010010111100010011", 
    14 => "00111101001101101101100010111000", 
    15 => "00111101111000110000101100000001", 
    16 => "10111101001001111010000010011101", 
    17 => "10111101000001100110010101000010", 
    18 => "10111110001001101111111111001001", 
    19 => "10111101110101101101000010111111", 
    20 => "00111101000100110011100000110101", 
    21 => "10111100000101110000011100110100", 
    22 => "10111101111010011011000101110000", 
    23 => "10111100110100101100110111101110", 
    24 => "00111101011100010111101011110001", 
    25 => "00111100100100010010001000001000", 
    26 => "00111100110101001001101011001110", 
    27 => "10111110100001001110110111100010", 
    28 => "10111100111111101110101001110000", 
    29 => "00111100100000110001000100001110", 
    30 => "00111101101001100011001111000111", 
    31 => "10111101101001100110110001100011", 
    32 => "10111101101001100011101110010111", 
    33 => "00111101000011111100110011110111", 
    34 => "10111101100011010100000100001100", 
    35 => "10111100101010110110011011110010", 
    36 => "10111101100101100100110010001110", 
    37 => "00111110000001000001100001100110", 
    38 => "00111101000111101101000100110100", 
    39 => "10111101011010010011111000101100", 
    40 => "10111110010100111101100101001010", 
    41 => "10111100110010010010010011000111", 
    42 => "00111110000010011001100011010111", 
    43 => "00111101110011000011100100011101", 
    44 => "00111101110110111010111111001100", 
    45 => "00111100000010010110000100100111", 
    46 => "00111100011000001000100001110101", 
    47 => "00111100111101100111010101111101", 
    48 => "10111101101111111111001101000110", 
    49 => "10111110001000010110011001001101", 
    50 => "10111101011101111101001101001011", 
    51 => "10111101100101001000100110011001", 
    52 => "10111110001011101101000001111011", 
    53 => "00111100011000101010111110011111", 
    54 => "10111110001001110001100011010100", 
    55 => "10111110000010010010001001010000", 
    56 => "10111011111100100010100001111100", 
    57 => "00111101001110011010011101001011", 
    58 => "10111101110001100000100011100111", 
    59 => "00111101101001011110100100000011", 
    60 => "10111101100010000101100111011101", 
    61 => "10111100001110011010101001011111", 
    62 => "00111100100100101100001000100000", 
    63 => "00111100001001001001011010011011", 
    64 => "00111101000011011010000010000101", 
    65 => "10111101100010000001010010010000", 
    66 => "10111101010011000011011000011000", 
    67 => "10111101001111000100010000001010", 
    68 => "00111110000001110011001010011111", 
    69 => "00111100111011101101011110010011", 
    70 => "10111100111110011110000101101110", 
    71 => "10111101100100000010100110100010", 
    72 => "10111101110000110000110010001010", 
    73 => "10111101101011101000000001110110", 
    74 => "10111101010011110010000010101010", 
    75 => "10111110000101110010000000010111", 
    76 => "00111101010000101101111100110101", 
    77 => "00111100101100101001001010100110", 
    78 => "00111101001101000100010111010011", 
    79 => "10111101001010100101111010001110", 
    80 => "00111100000111100000101000111011", 
    81 => "00111101101100011010011100100010", 
    82 => "10111100101000100000100001111110", 
    83 => "00111100101001111100111011011111", 
    84 => "10111101110101000010001110110110", 
    85 => "10111100101000110001111111001010", 
    86 => "00111100111101100111000001001000", 
    87 => "10111101011101011001100010011001", 
    88 => "00111011000111111010100000101000", 
    89 => "10111101110101110101110111110011", 
    90 => "10111100011101100010110010110110", 
    91 => "00111101000000101110111100101011", 
    92 => "10111101001110111111111100010001", 
    93 => "10111101111010000010000011100011", 
    94 => "10111100100001100100111001111110", 
    95 => "00111101101001011011110110001101", 
    96 => "00111100100110010100101001111101", 
    97 => "10111101100111011101101100010100", 
    98 => "00111101101110100110101010011011", 
    99 => "10111101110011011001000100101111", 
    100 => "10111101101110111011110111111010", 
    101 => "10111110100001111110101100111001", 
    102 => "10111101100110100111001000100011", 
    103 => "10111010110001010000010101110000", 
    104 => "10111011110001101100101101110110", 
    105 => "00111010110101111010011111100101", 
    106 => "00111101110101011001001000101000", 
    107 => "10111101011010110010110010101100", 
    108 => "10111101100100011111011001011000", 
    109 => "10111100101000000001100001011110", 
    110 => "10111101101001100011000000101010", 
    111 => "10111010111001101100101000001011", 
    112 => "00111101001111110100011100010001", 
    113 => "10111011000101010101001100110110", 
    114 => "00111101001101100000011110000111", 
    115 => "10111100001010111101100011010111", 
    116 => "00111100010100111010110000010110", 
    117 => "00111101001100000011101011000100", 
    118 => "10111110001011110110010100001111", 
    119 => "10111100101111001110111100010111", 
    120 => "00111101100001001001111010100100", 
    121 => "00111101000011001111010010100011", 
    122 => "10111101101001100000000101010000", 
    123 => "10111011100001011010000000000010", 
    124 => "00111101001100101100100000100101", 
    125 => "10111101101101110001101110011001", 
    126 => "10111100110101111000010110010001", 
    127 => "00111100000001110101101100100101", 
    128 => "10111101101010100101110101010001", 
    129 => "10111101001000000100111001110000", 
    130 => "10111110001100100010010110101000", 
    131 => "10111101000010110100101010011100", 
    132 => "00111101110111100100111110111001", 
    133 => "10111110000111111001110000101100", 
    134 => "00111101100011101010000010111111", 
    135 => "00111101110011001100010000100010", 
    136 => "00111101001100011011000010110000", 
    137 => "10111110000101011101111000011111", 
    138 => "10111110011101100100011111110110", 
    139 => "10111101111110101101011110100101", 
    140 => "00111011100110100001100010011101", 
    141 => "00111101001011110101001110001001", 
    142 => "10111101010011010101100100001000", 
    143 => "10111100000100010100100010101011", 
    144 => "10111100111110010111011101110101", 
    145 => "10111110010101011101011111001010", 
    146 => "00111100100111101011001101001101", 
    147 => "10111100111100101100010101100001", 
    148 => "10111101000100110101000100110000", 
    149 => "00111101100110111111101101100101", 
    150 => "00111101111010100011010100000001", 
    151 => "10111101101011001111000111000101", 
    152 => "00111101011001111101011000100110", 
    153 => "00111100110000000111000001101110", 
    154 => "10111101011101110001000001010001", 
    155 => "00111101100111011001001110001100", 
    156 => "10111110000100000011001010001001", 
    157 => "10111101111100110001100011101101", 
    158 => "10111101101100000000111001000010", 
    159 => "10111100011010001100100111111011", 
    160 => "10111110100000010010000000000100", 
    161 => "00111101011011001001100101110110", 
    162 => "10111110010111110011001001101000", 
    163 => "10111110000110010100110101001001", 
    164 => "00111101000011001001001100001101", 
    165 => "10111100101111001001010110101011", 
    166 => "10111101010101001111011010110010", 
    167 => "00111101100100101110000001001000", 
    168 => "00111101110110010000000111111010", 
    169 => "10111101100011110101010001000011", 
    170 => "00111101100001110011111101011110", 
    171 => "00111100000010010101011010111100", 
    172 => "10111110000110100100010011001100", 
    173 => "10111110000001001110110001111000", 
    174 => "10111101111111100000100110101001", 
    175 => "10111101010100000010011011111011", 
    176 => "00111101001001100000010111101010", 
    177 => "00111110000011011100011111000001", 
    178 => "00111101100010110000111101010101", 
    179 => "10111101010000111010101111001101", 
    180 => "00111101101101110111101001010111", 
    181 => "00111100100101010010000101110100", 
    182 => "10111110000011101100011001001111", 
    183 => "00111101000111110001010101101010", 
    184 => "10111101011110101101001001000011", 
    185 => "10111101000110000101000110111110", 
    186 => "00111101111011000100001100000100", 
    187 => "10111101111000000001000000101011", 
    188 => "10111011000110101000100101100110", 
    189 => "10111101000101110100110111100110", 
    190 => "00111100001101001001101001111000", 
    191 => "00111101101010001011101110101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiZio is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiZio is
    component conv_2_conv_2_weiZio_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiZio_rom_U :  component conv_2_conv_2_weiZio_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


