-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_2_out_ce0 : OUT STD_LOGIC;
    conv_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_2_out_ce1 : OUT STD_LOGIC;
    conv_2_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_140 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_0_reg_151 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten_reg_162 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_173 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln9_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_890 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln9_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln9_reg_894 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_5_fu_252_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln28_5_reg_899 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln28_1_fu_260_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln28_1_reg_905 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln12_fu_310_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_reg_911 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_1_fu_326_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_1_reg_917 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln12_3_fu_358_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_3_reg_924 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_4_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_4_reg_929 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_7_fu_409_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_7_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_4_fu_444_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln12_4_reg_949 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln28_1_fu_642_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_1_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_650_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_971 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten23_phi_fu_144_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_155_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_166_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_0_phi_fu_177_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_0_phi_fu_188_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln28_5_fu_398_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_8_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_6_fu_479_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_9_fu_553_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_885_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_195_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_526_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_2_fu_761_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_206_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln12_fu_238_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_232_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln25_fu_214_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln15_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_4_fu_244_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln28_7_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_298_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln25_mid1_fu_318_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_6_fu_264_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_2_fu_334_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_fu_346_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln25_1_fu_352_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln28_7_fu_272_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_366_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_fu_346_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_fu_378_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_cast_fu_384_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_1_fu_392_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln26_fu_403_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln28_4_fu_413_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_cast_fu_419_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_5_fu_427_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln12_fu_438_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln28_1_fu_455_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln28_1_fu_455_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_2_fu_461_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_cast_fu_466_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_3_fu_474_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln28_fu_484_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_488_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_fu_498_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_1_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_520_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_6_fu_535_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_cast_fu_540_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln28_7_fu_548_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln28_1_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_2_fu_576_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_562_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_1_fu_572_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_3_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_2_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_580_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_2_fu_590_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_5_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_4_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_1_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_2_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_661_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_fu_658_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_2_fu_668_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln28_3_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_4_fu_696_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_682_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_3_fu_692_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_7_fu_719_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_6_fu_713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_699_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_4_fu_709_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_9_fu_737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_8_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_3_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_4_fu_743_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_3_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_4_fu_755_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_5_fu_769_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_6_fu_787_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_fu_773_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_5_fu_783_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_11_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_10_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_791_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_6_fu_801_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_13_fu_829_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_12_fu_823_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_5_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_6_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_5_fu_841_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_6_fu_847_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln35_fu_672_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln35_1_fu_862_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln35_1_fu_865_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_22_cast_fu_871_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln28_fu_655_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln35_2_fu_879_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln28_1_fu_455_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_fu_346_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fcmp_32ns_32nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32nmb6_U133 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_2_out_q0,
        din1 => grp_fu_195_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_195_p2);

    cnn_fcmp_32ns_32nmb6_U134 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_2_out_q1,
        din1 => grp_fu_201_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_201_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_184 <= c_reg_971;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_184 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_151 <= select_ln28_5_reg_899;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_151 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_140 <= add_ln9_reg_894;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_140 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_162 <= select_ln12_4_reg_949;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_162 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_0_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_173 <= select_ln12_1_reg_917;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_173 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln9_reg_894 <= add_ln9_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_reg_971 <= c_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_890 <= icmp_ln9_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_220_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_1_reg_917 <= select_ln12_1_fu_326_p3;
                select_ln12_4_reg_949 <= select_ln12_4_fu_444_p3;
                select_ln28_5_reg_899 <= select_ln28_5_fu_252_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_220_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    select_ln12_3_reg_924(3 downto 1) <= select_ln12_3_fu_358_p3(3 downto 1);
                select_ln12_reg_911 <= select_ln12_fu_310_p3;
                    zext_ln28_1_reg_905(6 downto 0) <= zext_ln28_1_fu_260_p1(6 downto 0);
                    zext_ln28_4_reg_929(3 downto 1) <= zext_ln28_4_fu_374_p1(3 downto 1);
                    zext_ln28_7_reg_939(3 downto 1) <= zext_ln28_7_fu_409_p1(3 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_1_reg_964 <= select_ln28_1_fu_642_p3;
            end if;
        end if;
    end process;
    zext_ln28_1_reg_905(13 downto 7) <= "0000000";
    select_ln12_3_reg_924(0) <= '1';
    zext_ln28_4_reg_929(0) <= '0';
    zext_ln28_4_reg_929(7 downto 4) <= "0000";
    zext_ln28_7_reg_939(0) <= '1';
    zext_ln28_7_reg_939(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_220_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln9_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln9_fu_220_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln12_fu_438_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_166_p4));
    add_ln28_1_fu_392_p2 <= std_logic_vector(unsigned(tmp_14_cast_fu_384_p3) + unsigned(zext_ln28_1_fu_260_p1));
    add_ln28_2_fu_461_p2 <= std_logic_vector(unsigned(mul_ln28_1_fu_455_p2) + unsigned(zext_ln28_4_reg_929));
    add_ln28_3_fu_474_p2 <= std_logic_vector(unsigned(tmp_16_cast_fu_466_p3) + unsigned(zext_ln28_1_reg_905));
    add_ln28_4_fu_413_p2 <= std_logic_vector(unsigned(mul_ln28_fu_346_p2) + unsigned(zext_ln28_7_fu_409_p1));
    add_ln28_5_fu_427_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_419_p3) + unsigned(zext_ln28_1_fu_260_p1));
    add_ln28_6_fu_535_p2 <= std_logic_vector(unsigned(mul_ln28_1_fu_455_p2) + unsigned(zext_ln28_7_reg_939));
    add_ln28_7_fu_548_p2 <= std_logic_vector(unsigned(tmp_20_cast_fu_540_p3) + unsigned(zext_ln28_1_reg_905));
    add_ln28_fu_378_p2 <= std_logic_vector(unsigned(mul_ln28_fu_346_p2) + unsigned(zext_ln28_4_fu_374_p1));
    add_ln35_1_fu_865_p2 <= std_logic_vector(unsigned(add_ln35_fu_672_p2) + unsigned(zext_ln35_1_fu_862_p1));
    add_ln35_2_fu_879_p2 <= std_logic_vector(unsigned(tmp_22_cast_fu_871_p3) + unsigned(zext_ln28_fu_655_p1));
    add_ln35_fu_672_p2 <= std_logic_vector(unsigned(zext_ln35_fu_658_p1) + unsigned(zext_ln35_2_fu_668_p1));
    add_ln9_fu_226_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_144_p4) + unsigned(ap_const_lv11_1));
    and_ln28_1_fu_630_p2 <= (or_ln28_2_fu_624_p2 and or_ln28_1_fu_606_p2);
    and_ln28_2_fu_636_p2 <= (grp_fu_201_p2 and and_ln28_1_fu_630_p2);
    and_ln28_3_fu_749_p2 <= (or_ln28_4_fu_743_p2 and or_ln28_3_fu_725_p2);
    and_ln28_4_fu_755_p2 <= (grp_fu_195_p2 and and_ln28_3_fu_749_p2);
    and_ln28_5_fu_841_p2 <= (or_ln28_6_fu_835_p2 and or_ln28_5_fu_817_p2);
    and_ln28_6_fu_847_p2 <= (grp_fu_201_p2 and and_ln28_5_fu_841_p2);
    and_ln28_7_fu_292_p2 <= (xor_ln28_fu_280_p2 and icmp_ln15_fu_286_p2);
    and_ln28_fu_520_p2 <= (or_ln28_fu_514_p2 and grp_fu_195_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_220_p2)
    begin
        if ((icmp_ln9_fu_220_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_188_p4_assign_proc : process(c_0_reg_184, icmp_ln9_reg_890, ap_CS_fsm_pp0_stage0, c_reg_971, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_188_p4 <= c_reg_971;
        else 
            ap_phi_mux_c_0_phi_fu_188_p4 <= c_0_reg_184;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_155_p4_assign_proc : process(f_0_reg_151, icmp_ln9_reg_890, ap_CS_fsm_pp0_stage0, select_ln28_5_reg_899, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_155_p4 <= select_ln28_5_reg_899;
        else 
            ap_phi_mux_f_0_phi_fu_155_p4 <= f_0_reg_151;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_144_p4_assign_proc : process(indvar_flatten23_reg_140, icmp_ln9_reg_890, ap_CS_fsm_pp0_stage0, add_ln9_reg_894, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_144_p4 <= add_ln9_reg_894;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_144_p4 <= indvar_flatten23_reg_140;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_166_p4_assign_proc : process(indvar_flatten_reg_162, icmp_ln9_reg_890, ap_CS_fsm_pp0_stage0, select_ln12_4_reg_949, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_166_p4 <= select_ln12_4_reg_949;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_166_p4 <= indvar_flatten_reg_162;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_177_p4_assign_proc : process(r_0_reg_173, icmp_ln9_reg_890, ap_CS_fsm_pp0_stage0, select_ln12_1_reg_917, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_177_p4 <= select_ln12_1_reg_917;
        else 
            ap_phi_mux_r_0_phi_fu_177_p4 <= r_0_reg_173;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_1_fu_558_p1 <= conv_2_out_q1;
    bitcast_ln28_2_fu_576_p1 <= select_ln28_fu_526_p3;
    bitcast_ln28_3_fu_678_p1 <= conv_2_out_q0;
    bitcast_ln28_4_fu_696_p1 <= select_ln28_1_reg_964;
    bitcast_ln28_5_fu_769_p1 <= conv_2_out_q1;
    bitcast_ln28_6_fu_787_p1 <= select_ln28_2_fu_761_p3;
    bitcast_ln28_fu_484_p1 <= conv_2_out_q0;
    c_fu_650_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln12_reg_911));

    conv_2_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_5_fu_398_p1, zext_ln28_6_fu_479_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_2_out_address0 <= zext_ln28_6_fu_479_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_2_out_address0 <= zext_ln28_5_fu_398_p1(13 - 1 downto 0);
            else 
                conv_2_out_address0 <= "XXXXXXXXXXXXX";
            end if;
        else 
            conv_2_out_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_8_fu_433_p1, ap_block_pp0_stage1, zext_ln28_9_fu_553_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_2_out_address1 <= zext_ln28_9_fu_553_p1(13 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_2_out_address1 <= zext_ln28_8_fu_433_p1(13 - 1 downto 0);
            else 
                conv_2_out_address1 <= "XXXXXXXXXXXXX";
            end if;
        else 
            conv_2_out_address1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_2_out_ce0 <= ap_const_logic_1;
        else 
            conv_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_2_out_ce1 <= ap_const_logic_1;
        else 
            conv_2_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_232_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(ap_phi_mux_f_0_phi_fu_155_p4));

    grp_fu_195_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln28_1_reg_964, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_195_p1 <= select_ln28_1_reg_964;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_195_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_195_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_201_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln28_fu_526_p3, select_ln28_2_fu_761_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_201_p1 <= select_ln28_2_fu_761_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_201_p1 <= select_ln28_fu_526_p3;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_fu_238_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_166_p4 = ap_const_lv6_19) else "0";
    icmp_ln15_fu_286_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_188_p4 = ap_const_lv3_5) else "0";
    icmp_ln28_10_fu_805_p2 <= "0" when (tmp_5_fu_773_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_11_fu_811_p2 <= "1" when (trunc_ln28_5_fu_783_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_12_fu_823_p2 <= "0" when (tmp_10_fu_791_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_13_fu_829_p2 <= "1" when (trunc_ln28_6_fu_801_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_1_fu_508_p2 <= "1" when (trunc_ln28_fu_498_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_2_fu_594_p2 <= "0" when (tmp_3_fu_562_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_3_fu_600_p2 <= "1" when (trunc_ln28_1_fu_572_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_4_fu_612_p2 <= "0" when (tmp_4_fu_580_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_5_fu_618_p2 <= "1" when (trunc_ln28_2_fu_590_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_6_fu_713_p2 <= "0" when (tmp_8_fu_682_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_7_fu_719_p2 <= "1" when (trunc_ln28_3_fu_692_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_8_fu_731_p2 <= "0" when (tmp_9_fu_699_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_9_fu_737_p2 <= "1" when (trunc_ln28_4_fu_709_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_502_p2 <= "0" when (tmp_1_fu_488_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_220_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_144_p4 = ap_const_lv11_640) else "0";
    max_pool_out_address0 <= zext_ln35_3_fu_885_p1(11 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        conv_2_out_q1 when (and_ln28_6_fu_847_p2(0) = '1') else 
        select_ln28_2_fu_761_p3;

    max_pool_out_we0_assign_proc : process(icmp_ln9_reg_890, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_890 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_1_fu_455_p1 <= mul_ln28_1_fu_455_p10(4 - 1 downto 0);
    mul_ln28_1_fu_455_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_3_reg_924),8));
    mul_ln28_1_fu_455_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_B) * unsigned(mul_ln28_1_fu_455_p1), 8));
    mul_ln28_fu_346_p1 <= mul_ln28_fu_346_p10(4 - 1 downto 0);
    mul_ln28_fu_346_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_2_fu_334_p3),8));
    mul_ln28_fu_346_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_B) * unsigned(mul_ln28_fu_346_p1), 8));
    or_ln12_fu_304_p2 <= (icmp_ln12_fu_238_p2 or and_ln28_7_fu_292_p2);
    or_ln25_1_fu_352_p2 <= (shl_ln25_mid1_fu_318_p3 or ap_const_lv4_1);
    or_ln25_fu_214_p2 <= (shl_ln_fu_206_p3 or ap_const_lv4_1);
    or_ln26_fu_403_p2 <= (shl_ln1_fu_366_p3 or ap_const_lv4_1);
    or_ln28_1_fu_606_p2 <= (icmp_ln28_3_fu_600_p2 or icmp_ln28_2_fu_594_p2);
    or_ln28_2_fu_624_p2 <= (icmp_ln28_5_fu_618_p2 or icmp_ln28_4_fu_612_p2);
    or_ln28_3_fu_725_p2 <= (icmp_ln28_7_fu_719_p2 or icmp_ln28_6_fu_713_p2);
    or_ln28_4_fu_743_p2 <= (icmp_ln28_9_fu_737_p2 or icmp_ln28_8_fu_731_p2);
    or_ln28_5_fu_817_p2 <= (icmp_ln28_11_fu_811_p2 or icmp_ln28_10_fu_805_p2);
    or_ln28_6_fu_835_p2 <= (icmp_ln28_13_fu_829_p2 or icmp_ln28_12_fu_823_p2);
    or_ln28_fu_514_p2 <= (icmp_ln28_fu_502_p2 or icmp_ln28_1_fu_508_p2);
    r_fu_298_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln28_4_fu_244_p3));
    select_ln12_1_fu_326_p3 <= 
        r_fu_298_p2 when (and_ln28_7_fu_292_p2(0) = '1') else 
        select_ln28_4_fu_244_p3;
    select_ln12_2_fu_334_p3 <= 
        shl_ln25_mid1_fu_318_p3 when (and_ln28_7_fu_292_p2(0) = '1') else 
        select_ln28_6_fu_264_p3;
    select_ln12_3_fu_358_p3 <= 
        or_ln25_1_fu_352_p2 when (and_ln28_7_fu_292_p2(0) = '1') else 
        select_ln28_7_fu_272_p3;
    select_ln12_4_fu_444_p3 <= 
        ap_const_lv6_1 when (icmp_ln12_fu_238_p2(0) = '1') else 
        add_ln12_fu_438_p2;
    select_ln12_fu_310_p3 <= 
        ap_const_lv3_0 when (or_ln12_fu_304_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_188_p4;
    select_ln28_1_fu_642_p3 <= 
        conv_2_out_q1 when (and_ln28_2_fu_636_p2(0) = '1') else 
        select_ln28_fu_526_p3;
    select_ln28_2_fu_761_p3 <= 
        conv_2_out_q0 when (and_ln28_4_fu_755_p2(0) = '1') else 
        select_ln28_1_reg_964;
    select_ln28_4_fu_244_p3 <= 
        ap_const_lv3_0 when (icmp_ln12_fu_238_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_177_p4;
    select_ln28_5_fu_252_p3 <= 
        f_fu_232_p2 when (icmp_ln12_fu_238_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_155_p4;
    select_ln28_6_fu_264_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_238_p2(0) = '1') else 
        shl_ln_fu_206_p3;
    select_ln28_7_fu_272_p3 <= 
        ap_const_lv4_1 when (icmp_ln12_fu_238_p2(0) = '1') else 
        or_ln25_fu_214_p2;
    select_ln28_fu_526_p3 <= 
        conv_2_out_q0 when (and_ln28_fu_520_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln1_fu_366_p3 <= (select_ln12_fu_310_p3 & ap_const_lv1_0);
    shl_ln25_mid1_fu_318_p3 <= (r_fu_298_p2 & ap_const_lv1_0);
    shl_ln_fu_206_p3 <= (ap_phi_mux_r_0_phi_fu_177_p4 & ap_const_lv1_0);
    tmp_10_fu_791_p4 <= bitcast_ln28_6_fu_787_p1(30 downto 23);
    tmp_14_cast_fu_384_p3 <= (add_ln28_fu_378_p2 & ap_const_lv6_0);
    tmp_16_cast_fu_466_p3 <= (add_ln28_2_fu_461_p2 & ap_const_lv6_0);
    tmp_18_cast_fu_419_p3 <= (add_ln28_4_fu_413_p2 & ap_const_lv6_0);
    tmp_1_fu_488_p4 <= bitcast_ln28_fu_484_p1(30 downto 23);
    tmp_20_cast_fu_540_p3 <= (add_ln28_6_fu_535_p2 & ap_const_lv6_0);
    tmp_22_cast_fu_871_p3 <= (add_ln35_1_fu_865_p2 & ap_const_lv6_0);
    tmp_3_fu_562_p4 <= bitcast_ln28_1_fu_558_p1(30 downto 23);
    tmp_4_fu_580_p4 <= bitcast_ln28_2_fu_576_p1(30 downto 23);
    tmp_5_fu_773_p4 <= bitcast_ln28_5_fu_769_p1(30 downto 23);
    tmp_8_fu_682_p4 <= bitcast_ln28_3_fu_678_p1(30 downto 23);
    tmp_9_fu_699_p4 <= bitcast_ln28_4_fu_696_p1(30 downto 23);
    tmp_fu_661_p3 <= (select_ln12_1_reg_917 & ap_const_lv2_0);
    trunc_ln28_1_fu_572_p1 <= bitcast_ln28_1_fu_558_p1(23 - 1 downto 0);
    trunc_ln28_2_fu_590_p1 <= bitcast_ln28_2_fu_576_p1(23 - 1 downto 0);
    trunc_ln28_3_fu_692_p1 <= bitcast_ln28_3_fu_678_p1(23 - 1 downto 0);
    trunc_ln28_4_fu_709_p1 <= bitcast_ln28_4_fu_696_p1(23 - 1 downto 0);
    trunc_ln28_5_fu_783_p1 <= bitcast_ln28_5_fu_769_p1(23 - 1 downto 0);
    trunc_ln28_6_fu_801_p1 <= bitcast_ln28_6_fu_787_p1(23 - 1 downto 0);
    trunc_ln28_fu_498_p1 <= bitcast_ln28_fu_484_p1(23 - 1 downto 0);
    xor_ln28_fu_280_p2 <= (icmp_ln12_fu_238_p2 xor ap_const_lv1_1);
    zext_ln28_1_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_fu_252_p3),14));
    zext_ln28_4_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_366_p3),8));
    zext_ln28_5_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_1_fu_392_p2),64));
    zext_ln28_6_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_3_fu_474_p2),64));
    zext_ln28_7_fu_409_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_403_p2),8));
    zext_ln28_8_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_5_fu_427_p2),64));
    zext_ln28_9_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_7_fu_548_p2),64));
    zext_ln28_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_5_reg_899),12));
    zext_ln35_1_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_reg_911),6));
    zext_ln35_2_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_661_p3),6));
    zext_ln35_3_fu_885_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_2_fu_879_p2),64));
    zext_ln35_fu_658_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_1_reg_917),6));
end behav;
