-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibQq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibQq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100101100111101001011", 
    1 => "10111110001011101010110100000001", 
    2 => "00111100010011110101011100001100", 
    3 => "10111110000101100011011001110100", 
    4 => "00111100011111000101100111000101", 
    5 => "10111101000011010000101000010111", 
    6 => "00111101101011001000001001010101", 
    7 => "10111100100001011011010111000000", 
    8 => "10111100111000001011000110011001", 
    9 => "00111101010101110011110101101110", 
    10 => "10111100110110110101101011011101", 
    11 => "00111101111011010100010111010100", 
    12 => "10111101000101000001000001011000", 
    13 => "10111101000011000001000110111100", 
    14 => "10111101011011011110000010000110", 
    15 => "10111110000011110111010010100000", 
    16 => "00111100100111100001101001100010", 
    17 => "00111101000110101101101001101100", 
    18 => "10111100101110100110001011010110", 
    19 => "00111110000010110110101110000010", 
    20 => "10111110011101101110101111101010", 
    21 => "10111101110000000001000010110011", 
    22 => "00111011010110010100110001111101", 
    23 => "10111101101010000010010001100000", 
    24 => "00111101100111110010010101101011", 
    25 => "10111100110011100001111111000111", 
    26 => "10111101111100011100110001111111", 
    27 => "10111110000101100111110011010100", 
    28 => "10111110001010011011010000100100", 
    29 => "00111101111100111001101000110110", 
    30 => "10111100001100010110100101000011", 
    31 => "10111110011101111101001001000011", 
    32 => "00111100110010111111010011001100", 
    33 => "10111110011100110010110001100111", 
    34 => "10111101101101011111010100111110", 
    35 => "10111101101100011101110111111101", 
    36 => "10111110101011010001100001101111", 
    37 => "10111110011001101011010111110011", 
    38 => "10111100110001100111101000010011", 
    39 => "10111100101001011011100101010100", 
    40 => "00111110000001111111010101101000", 
    41 => "10111011000001111011010100111000", 
    42 => "00111110000010001001111100101110", 
    43 => "10111010111011110010100010001111", 
    44 => "00111110000011100110110110111000", 
    45 => "10111110000000100001000010010101", 
    46 => "10111100101100101100101111010001", 
    47 => "10111101011111101010110000001100", 
    48 => "00111100000000011000001111110000", 
    49 => "10111110100011110100111110000010", 
    50 => "00111100111001110000111000110110", 
    51 => "00111101010001100110110000000100", 
    52 => "10111110010011011010001111110000", 
    53 => "10111100100111011010010100000101", 
    54 => "00111101101110010111101101011011", 
    55 => "10111110001010001100111000101111", 
    56 => "10111101110010100001001110100100", 
    57 => "00111110000000011111101110010110", 
    58 => "00111101010111101111011100011010", 
    59 => "00111110011010000110010100001100", 
    60 => "10111110000011111100110000011000", 
    61 => "10111110001101101100110001110111", 
    62 => "00111101100000010000000010110111", 
    63 => "10111101011100010001111110111101", 
    64 => "10111100100111001011100101101110", 
    65 => "10111101100110001010000010011010", 
    66 => "10111110001001100110000001001100", 
    67 => "00111110000001100001100011010111", 
    68 => "10111101000001100011110011101101", 
    69 => "10111101100111001001001011101001", 
    70 => "00111100110011111111000001010111", 
    71 => "00111101011111110100100001011010", 
    72 => "00111101001111110110100010101100", 
    73 => "10111100001100110100111001011011", 
    74 => "10111110001110001110011100010000", 
    75 => "10111110010010111010000110100111", 
    76 => "00111100110100011111110100000001", 
    77 => "10111101010001000001110000101101", 
    78 => "00111101110111010000010011000000", 
    79 => "00111100110010100101101111010000", 
    80 => "10111101101100010100111000101100", 
    81 => "10111100111000001111110101001011", 
    82 => "10111110100101010011001000101011", 
    83 => "00111100101101000101001011010110", 
    84 => "10111110011100110111000111010000", 
    85 => "10111101100110000111111100001001", 
    86 => "10111100100001011111100111110011", 
    87 => "10111101110001111111111010111010", 
    88 => "10111011001000000111001110011000", 
    89 => "10111101011000110010111110011000", 
    90 => "00111101011100110001100111011000", 
    91 => "00111110010110000111010010111010", 
    92 => "00111101110011010000010010110001", 
    93 => "10111110000011011010111011000101", 
    94 => "10111101101001101011110110000000", 
    95 => "00111101111010110101000101100110", 
    96 => "10111101001001011111011110100111", 
    97 => "10111100100101100111011101011111", 
    98 => "00111101101101010001100111010010", 
    99 => "10111101110100011101111001011111", 
    100 => "10111110000110111000111101001010", 
    101 => "00111101100011001110010010111001", 
    102 => "00111110001000000110101000000010", 
    103 => "10111101000001100111011110000000", 
    104 => "00111100111100000101000010011100", 
    105 => "00111101011110001111001111000000", 
    106 => "00111101111111110010101010001010", 
    107 => "00111101010101111000011011100010", 
    108 => "00111110001111101001001101101010", 
    109 => "10111110001111111001001001011111", 
    110 => "00111101100111010010011100010111", 
    111 => "00111110000011011111010100110001", 
    112 => "00111101011111000101000001010000", 
    113 => "00111101101010001010000100100111", 
    114 => "10111101111101101111010100001000", 
    115 => "10111101011110111010111101111111", 
    116 => "00111110000100010000001010001000", 
    117 => "10111110001101000001101100110111", 
    118 => "00111101011010010001000101110001", 
    119 => "10111110011011010100011110001100", 
    120 => "10111101100110101000111000010001", 
    121 => "10111101101011001001010000010001", 
    122 => "10111101011000111111010001010110", 
    123 => "00111101001111111010011000000011", 
    124 => "10111101101011100110001111011101", 
    125 => "10111110010001110010011010010110", 
    126 => "00111101101010100110010001011110", 
    127 => "00111100000111011000011100010001", 
    128 => "10111101001111010010001100001101", 
    129 => "10111101101111110110010001010000", 
    130 => "10111101100010010101000101110110", 
    131 => "10111101011101001101011001101101", 
    132 => "00111100001010101110100000111001", 
    133 => "10111110110001011111110000001000", 
    134 => "00111110000010100010011001011110", 
    135 => "10111101001010111110011001010001", 
    136 => "00111110000111000000000000001111", 
    137 => "10111110100111101101100011101110", 
    138 => "10111110000011001011101001110000", 
    139 => "10111110000111010010010001100011", 
    140 => "00111110000011011000000001010001", 
    141 => "00111110000010001100011000011011", 
    142 => "00111101001110111101001011011101", 
    143 => "10111101110001000000010110110011", 
    144 => "10111101101101110001110011101110", 
    145 => "10111101110011111011101010000000", 
    146 => "00111100001110110011100001010100", 
    147 => "10111101000001111100100100111000", 
    148 => "00111100110011111001101101100101", 
    149 => "10111101000110100010000010001111", 
    150 => "10111011111100001011110011100100", 
    151 => "00111100111111000011100000111001", 
    152 => "00111110100000101010101001001111", 
    153 => "00111101101101100001101110000101", 
    154 => "10111110100011111000110111101000", 
    155 => "00111101110101111011010000000010", 
    156 => "10111101000101110011000001100001", 
    157 => "10111101011110011100000101010001", 
    158 => "10111110011000110000101011000111", 
    159 => "00111101100001011010000100111101", 
    160 => "10111101110111001111111101011110", 
    161 => "00111101111010010110100110110001", 
    162 => "10111110101000101010111000101101", 
    163 => "10111110110010000001000001000110", 
    164 => "00111110000000100101111010111110", 
    165 => "00111110011000100000101110101001", 
    166 => "00111101101101101110100101111101", 
    167 => "00111011110011000100010110000111", 
    168 => "10111011100100001010100111110001", 
    169 => "00111110001100110001101101101111", 
    170 => "00111101100110111010011011101000", 
    171 => "00111110000000100010111110100110", 
    172 => "10111101011011011111101111001111", 
    173 => "10111100110111110100010000110111", 
    174 => "00111110100011111001101001011101", 
    175 => "00111110000000000100000011010111", 
    176 => "00111101000000010110110111100010", 
    177 => "00111110010100001010001101011011", 
    178 => "00111101111010000110110000100100", 
    179 => "10111110100101011111100111011011", 
    180 => "00111101101111100101110100111111", 
    181 => "10111110000100101111010011011110", 
    182 => "10111101010111000001111111000000", 
    183 => "00111100110110110000010001000010", 
    184 => "10111101100010110001000000111011", 
    185 => "10111010111101101000110100110010", 
    186 => "00111101011101111101000011101010", 
    187 => "10111101110110100010001100110111", 
    188 => "10111100110000110000101110010001", 
    189 => "00111101000111110000010011001101", 
    190 => "10111110000000110110110000011011", 
    191 => "10111101100110010001001000010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibQq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibQq is
    component conv_2_conv_2_weibQq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibQq_rom_U :  component conv_2_conv_2_weibQq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


