-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibwn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibwn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111100111011110001111000", 
    1 => "00111110000100100111111110110100", 
    2 => "00111101101101001001001111101011", 
    3 => "10111110100011110101101101010101", 
    4 => "10111101010110001000100101000010", 
    5 => "10111101101100110011010100010101", 
    6 => "10111101101011100101100011110111", 
    7 => "10111101000111010000100111010111", 
    8 => "10111110100010000110011001111111", 
    9 => "10111110000010011010101110110010", 
    10 => "00111101101001110101110011011001", 
    11 => "00111110000101111011101001011101", 
    12 => "10111110010011000101001101011111", 
    13 => "10111111000010011010101001010001", 
    14 => "10111110110000111101101101000100", 
    15 => "10111110110111100000111111111011", 
    16 => "10111101110101101000111110101101", 
    17 => "10111110000010001000110010111111", 
    18 => "10111110100100000111000101111010", 
    19 => "00111101110100110001100011100001", 
    20 => "10111110010101101100001010110001", 
    21 => "10111101110000100111010111001000", 
    22 => "10111101001011100011100111000001", 
    23 => "10111110100110111110101011101100", 
    24 => "10111101010100010001010100101111", 
    25 => "10111110010001101100111101101011", 
    26 => "10111101111001100011100010010100", 
    27 => "00111100101011011011011111111010", 
    28 => "10111110011111001000101011100011", 
    29 => "00111101101011111110000110100111", 
    30 => "10111101110110101110101110101110", 
    31 => "00111110011000101101110111000011", 
    32 => "10111100000000100000010111111110", 
    33 => "10111110010001010100110011010110", 
    34 => "10111110000111011110101101000110", 
    35 => "10111101001001001110001111111101", 
    36 => "00111101001001011011011011100011", 
    37 => "10111110011100111100110100101110", 
    38 => "00111101100101010000100110000001", 
    39 => "10111110001111010011010111000101", 
    40 => "00111101101000111011001101000101", 
    41 => "10111110101011011110011010000000", 
    42 => "00111101001010000101011001110110", 
    43 => "10111110100010001100100111001111", 
    44 => "10111100110000110110010001011101", 
    45 => "10111110010101010010011110000100", 
    46 => "10111110101001001000100101010111", 
    47 => "10111110100110110000010101110101", 
    48 => "00111101101101010100110011011010", 
    49 => "10111101110000001101000000111111", 
    50 => "10111101110100111001000101111110", 
    51 => "00111101111100110000101010101011", 
    52 => "00111110000001100101001101000100", 
    53 => "10111110010011111010110001001010", 
    54 => "00111110001100010101101011011000", 
    55 => "00111100110001010111000111110110", 
    56 => "10111110010111100110100101110111", 
    57 => "00111101011000010100011110111100", 
    58 => "10111101001100111100011011111111", 
    59 => "10111110100101101010010111001111", 
    60 => "10111101100100000110001011011100", 
    61 => "10111110000111110010000100011011", 
    62 => "10111110000000010011010111100100", 
    63 => "10111110011001111011110111011111", 
    64 => "00111101010110111111101010111001", 
    65 => "10111110010111010111111101110011", 
    66 => "00111101100011101011000111100010", 
    67 => "00111101110100001110101100000101", 
    68 => "10111110001010100100000111001010", 
    69 => "10111110010110001111100011111100", 
    70 => "10111100110010010011100011000111", 
    71 => "10111100100110010110111011001011", 
    72 => "10111110000010111110001011111100", 
    73 => "00111011011110110011100101100001", 
    74 => "10111100111110001011110110011001", 
    75 => "10111110100000100100000000000110", 
    76 => "10111101001100101100000010111110", 
    77 => "10111110101000111110100101011001", 
    78 => "10111110101010110100001010010011", 
    79 => "10111110100111011001101101110101", 
    80 => "10111110000100011111110111111111", 
    81 => "10111101100110100100001111011111", 
    82 => "10111111000000110100000010110110", 
    83 => "00111100001101100111000010000101", 
    84 => "10111100010000111000011110110100", 
    85 => "10111110000000111010110000011101", 
    86 => "10111110101100001110110000001001", 
    87 => "10111110101001101001001100011101", 
    88 => "10111110011001100110111100110110", 
    89 => "10111101000111010110101000101001", 
    90 => "10111101010100101000001101110001", 
    91 => "00111101110001001100001101011100", 
    92 => "10111110100010110001101011110000", 
    93 => "10111101010111010100110100101010", 
    94 => "10111110010010110101000111110001", 
    95 => "00111110100001011000001011010011", 
    96 => "10111101000001100100001111001011", 
    97 => "00111110001100010101100010110001", 
    98 => "10111100010100100001110100101110", 
    99 => "00111101000101010000100111001001", 
    100 => "00111110000011101111011011100001", 
    101 => "10111101001000000011000011000000", 
    102 => "00111101010010100000101000001111", 
    103 => "10111110000101001100111011100000", 
    104 => "10111110000010000001000110011101", 
    105 => "10111101111001011001000101110100", 
    106 => "10111101101000011011101111110111", 
    107 => "10111101100010010100111101111011", 
    108 => "10111101100100011010000010000001", 
    109 => "10111101101110111100000111110110", 
    110 => "10111110100000101100100100010000", 
    111 => "00111110001001100100000011100010", 
    112 => "00111110000001001101011000110111", 
    113 => "00111110010100101110100010101110", 
    114 => "10111101101100001011110001110101", 
    115 => "10111110010101111100011100111111", 
    116 => "00111110001000100101100100000010", 
    117 => "10111110001001011101010011001001", 
    118 => "00111101101011010100011111101010", 
    119 => "00111101110011101101011110010001", 
    120 => "10111101100000110110010001101111", 
    121 => "10111101000011100111111000011000", 
    122 => "10111101011111000100000111111000", 
    123 => "10111110101111101110011110011001", 
    124 => "10111101101001111110000101010101", 
    125 => "10111110100000011101011000010000", 
    126 => "10111110000100010010001010101001", 
    127 => "00111100100100111000101001111000", 
    128 => "10111100001011001000110111110011", 
    129 => "10111110101010010101101101001000", 
    130 => "10111110100000110000100110011000", 
    131 => "00111110000000111000011101011110", 
    132 => "10111110000111101111001110000001", 
    133 => "00111100001010101011100100100000", 
    134 => "00111110000011001100011111110110", 
    135 => "10111110000101011001101011011101", 
    136 => "00111101000110111111010101011010", 
    137 => "10111110011101001100011001101101", 
    138 => "10111101000001111111111100011010", 
    139 => "10111100101010110010101101101001", 
    140 => "00111101000011000101011110100101", 
    141 => "10111101110111011001001111011001", 
    142 => "00111101101110101011011110010110", 
    143 => "10111101100000101110011001010111", 
    144 => "10111110010110010100110000101011", 
    145 => "00111110100100000000010001100110", 
    146 => "10111101000011001100011011110010", 
    147 => "10111110011000001101011101101000", 
    148 => "00111110000100001100110111011101", 
    149 => "10111110100000000000111011110010", 
    150 => "10111110101101010011101101011001", 
    151 => "10111110100110100000101101001111", 
    152 => "10111101101111100100010000001010", 
    153 => "00111110001100111101001111011010", 
    154 => "10111101100100100111110111100111", 
    155 => "00111101001100001110011001011000", 
    156 => "00111101010010000001010001111100", 
    157 => "10111011011000001010100101000111", 
    158 => "00111101010010010010010110001010", 
    159 => "00111101101010010111100110110010", 
    160 => "00111101100100111101010010101000", 
    161 => "00111110000001100010110111011111", 
    162 => "10111110000101000100100010010111", 
    163 => "10111110001011010100000000111011", 
    164 => "00111110010011111011000101001011", 
    165 => "10111101111111011011011111011101", 
    166 => "10111110011011110111110000001000", 
    167 => "10111100101010011000010011011001", 
    168 => "10111110001011001000011000111011", 
    169 => "00111110010000000010001110100000", 
    170 => "10111110100001000100011101100001", 
    171 => "00111110001001101101101001000100", 
    172 => "10111110011101101101000101101011", 
    173 => "00111110010100100100100011111111", 
    174 => "00111100100110110001101001101101", 
    175 => "00111110001001001101001001000011", 
    176 => "10111110010101111001001010101110", 
    177 => "00111101110101111011010010010010", 
    178 => "00111101011000001101101000010000", 
    179 => "10111110001001001001001101001111", 
    180 => "00111101100011100101011101000000", 
    181 => "10111110100011111100000110101111", 
    182 => "10111110010101010010010001001000", 
    183 => "00111110001000010111001111111001", 
    184 => "10111101000100100111000100010111", 
    185 => "10111101100001111011001110000110", 
    186 => "10111110000001000110010010111110", 
    187 => "10111110101011001011111111001000", 
    188 => "00111011011011011010111001001101", 
    189 => "00111101001101011011001111101111", 
    190 => "10111101110011010000001110001100", 
    191 => "10111101000100110010000000110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibwn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibwn is
    component conv_2_conv_2_weibwn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibwn_rom_U :  component conv_2_conv_2_weibwn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


