-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibKp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibKp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101011101100111011111111", 
    1 => "10111101111010000000101110111010", 
    2 => "10111110001111010101100011000110", 
    3 => "00111101101110001111101101101000", 
    4 => "10111101001100100010111101110010", 
    5 => "10111100101100111101101100110010", 
    6 => "00111110001001101011010111100101", 
    7 => "10111010001111101111100001101010", 
    8 => "00111101010111111001001000010110", 
    9 => "00111101111010111100000011001101", 
    10 => "00111110010001100001100011111110", 
    11 => "10111101011001100000100101001101", 
    12 => "00111101111100010011101011000000", 
    13 => "00111110010001010010000101101100", 
    14 => "00111110001010000101100000111010", 
    15 => "00111110000010100011000110010101", 
    16 => "00111101110010110000100110100010", 
    17 => "00111101101000100010010101110010", 
    18 => "00111101000000000111110000011100", 
    19 => "10111110001101000110111101111111", 
    20 => "00111101110011111111100101010011", 
    21 => "00111101100110000000001001000011", 
    22 => "00111101111111001101001010010011", 
    23 => "00111101111111001001011100000110", 
    24 => "10111100110111000000011001001000", 
    25 => "00111011101010110011001011010011", 
    26 => "00111101111010101011101110101001", 
    27 => "10111110100000111100111110011101", 
    28 => "00111110001000110110101011010010", 
    29 => "10111110000001110000111100110000", 
    30 => "00111101011100010100110000110011", 
    31 => "10111110011010001100000000100001", 
    32 => "00111100001100101111010100110001", 
    33 => "00111110001000010111101000001111", 
    34 => "00111110000110101101101101001001", 
    35 => "10111110000000010101011110011010", 
    36 => "10111101100011011111110011001000", 
    37 => "00111110000000101100110010100010", 
    38 => "10111100111010110011111100011100", 
    39 => "10111100111000011001010100010000", 
    40 => "10111110011011110110100011000101", 
    41 => "00111110010100111001110010101110", 
    42 => "10111101001100000001010111100111", 
    43 => "00111110010010111010000001101101", 
    44 => "10111100100101000011101100000101", 
    45 => "00111110001010111011111101101001", 
    46 => "00111110010100110001000111010000", 
    47 => "00111110011100010000000010111010", 
    48 => "00111011100101111001001101111110", 
    49 => "10111101111101110100000001011000", 
    50 => "10111101000010011001101000100111", 
    51 => "10111110011011000101000010101011", 
    52 => "10111101110111101111101111101111", 
    53 => "00111101010000110010000111001111", 
    54 => "10111101111110001001000100110100", 
    55 => "10111110010100011001101100101010", 
    56 => "00111101110111100001110011101110", 
    57 => "10111101101101100011011011000110", 
    58 => "00111101101111001000101100101001", 
    59 => "00111110011000000110110010011111", 
    60 => "10111011101110001111111111010111", 
    61 => "00111101110110101001101110101111", 
    62 => "00111100100101011001010110110100", 
    63 => "00111101110010010001001000011011", 
    64 => "00111101101011111101101100011001", 
    65 => "10111101110110001000001011001101", 
    66 => "10111110011111100100100110001100", 
    67 => "10111101010111010001010100010101", 
    68 => "00111101110101110110011001000010", 
    69 => "00111110010000100101100010101000", 
    70 => "00111101011001001110001001110100", 
    71 => "10111100010111010001101100110010", 
    72 => "10111100111100000101001010001011", 
    73 => "00111101010011000111001001011111", 
    74 => "00111101000100110011011110000001", 
    75 => "10111100100011000110111001001110", 
    76 => "10111101101110101010011100111100", 
    77 => "00111101100101000011100100110010", 
    78 => "10111101000101011111010000000100", 
    79 => "00111100000111010100100101010001", 
    80 => "00111101110001011111011101100000", 
    81 => "10111011000001001010001010110110", 
    82 => "00111101101101000101111010001000", 
    83 => "00111100101111100100010001100011", 
    84 => "10111100110110110100011111000010", 
    85 => "00111101111001010000010001001100", 
    86 => "00111101111001001000011101110000", 
    87 => "00111101100001101010010011001101", 
    88 => "00111110000011110110110101011100", 
    89 => "00111101110000110001111100101101", 
    90 => "10111011101000111100001111110100", 
    91 => "00111101001111011110101011110100", 
    92 => "10111101110100101011101110111011", 
    93 => "10111100000101100001101110100001", 
    94 => "10111101110100001101000110101011", 
    95 => "10111110010000110011001010001100", 
    96 => "00111100110100110101100010100010", 
    97 => "10111101101111001111110110111100", 
    98 => "00111101111101011010111100000001", 
    99 => "10111011000001000101101101110100", 
    100 => "00111101100110101000110000100101", 
    101 => "10111011010011100101110110010010", 
    102 => "00111101001010001110101110001001", 
    103 => "10111101011000111011100101000100", 
    104 => "00111110001101101011010110100100", 
    105 => "00111101110111101011101110000010", 
    106 => "00111101110110110101111110001001", 
    107 => "10111100100001001000000000011001", 
    108 => "10111101101011001010101000010110", 
    109 => "00111101011101001100001010011001", 
    110 => "00111100100100111000000101011010", 
    111 => "10111101010000011000000111000001", 
    112 => "10111101001001111011001111111101", 
    113 => "10111110000101110011101100001011", 
    114 => "00111101000001101101101001001001", 
    115 => "10111101000110000011100101010101", 
    116 => "10111110010000100110011110010001", 
    117 => "00111101110111101100001101110111", 
    118 => "10111100100100110011101100111001", 
    119 => "10111110101011000101011000100001", 
    120 => "10111101001000110101101000101110", 
    121 => "00111100101110101100000101110010", 
    122 => "00111101101101010010011110011000", 
    123 => "10111101000100101011001110001010", 
    124 => "00111101101010011111010111110001", 
    125 => "10111100001000110100011001011110", 
    126 => "00111110000110001001000100100110", 
    127 => "00111010001110011100100110010010", 
    128 => "10111101101101110011000000010001", 
    129 => "10111101110101010001000110001111", 
    130 => "10111110100001001010111111101001", 
    131 => "10111101011100011111110010001111", 
    132 => "00111101011011001010110110111001", 
    133 => "00111011100111111111111110110110", 
    134 => "00111011111010011000001111111011", 
    135 => "00111101000001000101111111011110", 
    136 => "00111101010010010100001010000101", 
    137 => "10111101101001000110010101100010", 
    138 => "10111100111100110110011011000010", 
    139 => "10111100011100010101001000000011", 
    140 => "00111101101000010000010111110101", 
    141 => "00111100111110110110100001100101", 
    142 => "00111101101100011001111001111100", 
    143 => "00111101000111000101101010011000", 
    144 => "10111101010110000000010110111111", 
    145 => "00111100100011001101110101001010", 
    146 => "10111110010000000010100111010111", 
    147 => "00111101111001001001100001110010", 
    148 => "10111110000001110011101001000001", 
    149 => "00111101100000101100100100011001", 
    150 => "00111100111100001100111100101000", 
    151 => "10111100110010001000101010010101", 
    152 => "00111101111100011011110010000000", 
    153 => "10111100101000101110100110001001", 
    154 => "00111101010000000010110110100100", 
    155 => "00111101010011101111100100000100", 
    156 => "10111100110011011011100000010001", 
    157 => "00111101100100000100011110110100", 
    158 => "00111100001111001011011001100110", 
    159 => "10111100101101110001111110000100", 
    160 => "10111110010100001100000001010111", 
    161 => "10111100110011001000000001110100", 
    162 => "10111110011010010010001000000100", 
    163 => "10111101101100010010111101001110", 
    164 => "10111101111100010111110011010110", 
    165 => "00111101001100110110110000110111", 
    166 => "10111101000010110011101101100010", 
    167 => "00111101110111010001110000010000", 
    168 => "00111110000011100000101001001111", 
    169 => "10111110000101011100110001000011", 
    170 => "00111101111110011100011011110101", 
    171 => "10111110000110111101010111000000", 
    172 => "00111101101010110101100110000100", 
    173 => "10111101110000101000100011010000", 
    174 => "10111101100000111010000000110001", 
    175 => "10111110000010100011000111100001", 
    176 => "00111100101110011110000011000111", 
    177 => "00111101111011101010111110000101", 
    178 => "10111101100001010010101011010000", 
    179 => "00111110001100110001011011101111", 
    180 => "00111101100110111001110010011001", 
    181 => "00111110010001111011101110100001", 
    182 => "10111101111011011101001100101110", 
    183 => "10111110010011111111111110100001", 
    184 => "10111101111100110011010010001011", 
    185 => "00111101101100011001111011011110", 
    186 => "00111101010011100110111111010100", 
    187 => "00111101110001111111010111001000", 
    188 => "10111101011000111001000000011000", 
    189 => "10111100110111011011010110011000", 
    190 => "00111101100110010111100110011110", 
    191 => "00111101010010101100011110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibKp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibKp is
    component conv_2_conv_2_weibKp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibKp_rom_U :  component conv_2_conv_2_weibKp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


