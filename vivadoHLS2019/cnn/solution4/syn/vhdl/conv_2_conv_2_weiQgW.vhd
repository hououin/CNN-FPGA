-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiQgW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiQgW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110111100101111111010", 
    1 => "00111101000001110011111111100100", 
    2 => "10111101101110001111110100101000", 
    3 => "00111110000010111001101011000000", 
    4 => "00111101110110110100100110101010", 
    5 => "10111110000001111101111101010101", 
    6 => "00111101111110001001100100010100", 
    7 => "10111110100010000000001000101100", 
    8 => "00111110011001000101011001101010", 
    9 => "10111101011111111001010001010000", 
    10 => "10111101110110001110110001010111", 
    11 => "10111110100010001100111011111001", 
    12 => "10111100001100110100010001100000", 
    13 => "00111110001001101010100100001101", 
    14 => "00111110000010010100100101000001", 
    15 => "00111110100010001000010111100001", 
    16 => "10111110001000001100100100110011", 
    17 => "10111011101011111000110111100010", 
    18 => "10111101101010011011011110110011", 
    19 => "10111110001011001010100101111111", 
    20 => "10111110100001011100000010111100", 
    21 => "00111101101101101111001001011110", 
    22 => "10111101101001000101100000110101", 
    23 => "10111110100101010111001100100010", 
    24 => "00111101111110010010000101000101", 
    25 => "00111101101010001111000111101101", 
    26 => "00111101011101100101000000010001", 
    27 => "00111110000100011110011100100111", 
    28 => "00111101111010000101010100011000", 
    29 => "10111101100101110000111011111111", 
    30 => "10111101101101001101011110010110", 
    31 => "00111100011010001000011111111000", 
    32 => "00111101101100110111110110011010", 
    33 => "10111110110001110011101001000110", 
    34 => "10111101001010100100110101001111", 
    35 => "00111101100000000101000110000110", 
    36 => "10111101101001010011011011111000", 
    37 => "10111100001010001010101010110001", 
    38 => "10111101001001010001001011101000", 
    39 => "00111110000000011101101011011000", 
    40 => "00111011101100011010110000110001", 
    41 => "10111101110011000010000111100001", 
    42 => "10111101000011010111111001100111", 
    43 => "00111101000111000100011101001010", 
    44 => "00111101100010011001101110100011", 
    45 => "10111101011010111000010001101101", 
    46 => "10111100100111111000101100110100", 
    47 => "00111100011010000001111110011111", 
    48 => "10111110010101011010111101011001", 
    49 => "10111110101000110100100010110100", 
    50 => "00111101110010000001110001110001", 
    51 => "10111110101100000100010000010101", 
    52 => "10111110100010111010010000100011", 
    53 => "00111110000101101101001110000000", 
    54 => "00111110000011001011010110101111", 
    55 => "10111110101001011101111111011101", 
    56 => "10111011110100101100011001100000", 
    57 => "10111100000111110100010001101110", 
    58 => "10111011000000100001011011001000", 
    59 => "00111100100001110001100110110001", 
    60 => "00111110001100011100100010010000", 
    61 => "00111110100100010100111010001101", 
    62 => "00111100101111100111001010010011", 
    63 => "00111101101101111011110011101000", 
    64 => "00111110000011010101010111110101", 
    65 => "00111110001101010101001111000101", 
    66 => "00111110010011100101010110111111", 
    67 => "10111101110110001011001001000011", 
    68 => "10111101011100001011010000101011", 
    69 => "10111110101001100011111111111010", 
    70 => "00111100100011010001000101001010", 
    71 => "10111110011101010110101000111111", 
    72 => "00111110100001001000000100101111", 
    73 => "10111110101000111010110011011001", 
    74 => "00111101100010010101000101111100", 
    75 => "10111110100101110110101001011000", 
    76 => "00111101001110100000001011100011", 
    77 => "00111100011101010101101111001000", 
    78 => "00111110101001111010110110011101", 
    79 => "00111110110001110100010010010010", 
    80 => "10111101011110001011111001111010", 
    81 => "10111110100100010011011111011101", 
    82 => "00111101111011010110000010000111", 
    83 => "10111101110110101101010101110000", 
    84 => "10111110110111011001111001010001", 
    85 => "00111101100000000101111010101110", 
    86 => "10111101101010001010011111001011", 
    87 => "10111110001111111110010110011010", 
    88 => "00111101111110010011110000101010", 
    89 => "00111101111001111011000100010100", 
    90 => "10111110000010011100011100011101", 
    91 => "00111110001001100111111011100101", 
    92 => "00111101110100000011011110101001", 
    93 => "00111101011111100000110011000100", 
    94 => "10111110000000100101010111110100", 
    95 => "10111110011000011010011011111011", 
    96 => "10111110001101001101100010000001", 
    97 => "10111110010001000100101110111100", 
    98 => "10111110100111100100101010101010", 
    99 => "10111101010010101010010101110010", 
    100 => "10111100110000101011101110110010", 
    101 => "00111110010110010011011111010001", 
    102 => "00111101011010110101110100111111", 
    103 => "10111101111001000011100111100111", 
    104 => "10111100111001000000111111000100", 
    105 => "10111110010010011111001010001001", 
    106 => "00111101000011001100101111101100", 
    107 => "10111110011110000111110110110100", 
    108 => "10111101010001111011001000101111", 
    109 => "10111110100001111010110101001011", 
    110 => "10111101011100011011110111100000", 
    111 => "00111110001110111100011110011011", 
    112 => "10111101001111001111111000011101", 
    113 => "10111101001100000101000111111001", 
    114 => "00111110100110100101011010101100", 
    115 => "00111101110110110101011110010100", 
    116 => "10111101011010000111001000101001", 
    117 => "00111110010110000001111111000000", 
    118 => "00111110000101111011011001010111", 
    119 => "10111110001001001111010001010001", 
    120 => "00111101010000101010010011001110", 
    121 => "10111110010011000110101100101100", 
    122 => "00111110011101101001110010100011", 
    123 => "10111101110011000110100010011101", 
    124 => "00111110001001111101010111001100", 
    125 => "00111101110001100110010100100101", 
    126 => "10111110000110111111100111000100", 
    127 => "10111110100000000011111111111110", 
    128 => "00111100110101010110110011001110", 
    129 => "00111101101000100100011010011101", 
    130 => "00111110000111011100110101011110", 
    131 => "10111110000111010011101010011100", 
    132 => "10111101100010110000101111010100", 
    133 => "10111110101011010101100000001111", 
    134 => "10111110010111111001001001100111", 
    135 => "10111011010001101000000111101101", 
    136 => "10111110000010101010111010111110", 
    137 => "10111110010000110010010101011011", 
    138 => "10111101110001110111111111101111", 
    139 => "10111110000010111011011100111001", 
    140 => "10111101111111100001010110001011", 
    141 => "10111100000101110000101100011110", 
    142 => "10111101001101101010101001001100", 
    143 => "10111101011000001111100111011101", 
    144 => "10111110101010011111011111110111", 
    145 => "00111101000000000100001110010010", 
    146 => "10111110000000000010101101100010", 
    147 => "00111110000001110001111000111001", 
    148 => "10111101010001001111111101111111", 
    149 => "00111110010101110000101110000100", 
    150 => "10111101011001111000010110111000", 
    151 => "10111110000101010111000011010111", 
    152 => "10111101011111100000000111010001", 
    153 => "00111010110111111000110011110000", 
    154 => "10111110011010111101011000111110", 
    155 => "00111110100100100001001000111101", 
    156 => "00111110011001111011110001001111", 
    157 => "00111110000100010000100100110010", 
    158 => "00111110010110110101011001110010", 
    159 => "00111100100100010100011110110010", 
    160 => "10111110101000010101010010000101", 
    161 => "00111101100001100101101111100000", 
    162 => "10111110100100001100001110011010", 
    163 => "10111110101011010100011100100101", 
    164 => "00111110110010010011001101001000", 
    165 => "00111101010000101010011001001001", 
    166 => "10111101110111011100100011111100", 
    167 => "10111110001010111010000011101100", 
    168 => "00111110001101000010001111100111", 
    169 => "10111110101000101110110110010011", 
    170 => "10111110011010011010111011001000", 
    171 => "10111110111100000011000100110101", 
    172 => "00111101100100001101100011111111", 
    173 => "10111110100110011001111100010011", 
    174 => "10111110001111101111000011001001", 
    175 => "00111101010000111110110110111110", 
    176 => "00111101010110011010000111110000", 
    177 => "00111101100001011011001100001100", 
    178 => "00111101011110111000111101001000", 
    179 => "10111101100001111000000001101010", 
    180 => "00111110010101000101011000001001", 
    181 => "00111110110000110011110010101111", 
    182 => "00111110100101110010011000001011", 
    183 => "00111110100000010011011110100100", 
    184 => "10111110011001110111111110100111", 
    185 => "10111011001011111101001101110100", 
    186 => "00111110011101010010010011000001", 
    187 => "00111101110111010011001000111001", 
    188 => "00111110101001101101101010101010", 
    189 => "00111101000110000001110001000101", 
    190 => "00111101110101000010101000010111", 
    191 => "10111110011110101000011110100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiQgW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiQgW is
    component conv_2_conv_2_weiQgW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiQgW_rom_U :  component conv_2_conv_2_weiQgW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


