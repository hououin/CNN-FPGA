-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibWr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibWr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100011111011001011111000001", 
    1 => "10111110000101001100100000000010", 
    2 => "10111100011110111111010011001000", 
    3 => "10111101111110011101110101110110", 
    4 => "00111101110000001100000101000110", 
    5 => "00111100110010111101100011111101", 
    6 => "10111101110001010101010011101101", 
    7 => "10111100110111001100010011010100", 
    8 => "00111100100001011010011100110110", 
    9 => "10111110000010101011010010001101", 
    10 => "00111101100010100100110110001101", 
    11 => "00111100111110000100110110010111", 
    12 => "10111110000101001000101010110111", 
    13 => "00111110100000000100010001100110", 
    14 => "10111101101001011100110100000010", 
    15 => "00111101101101101001111101101010", 
    16 => "00111101111001010010111100000010", 
    17 => "10111100101000000001010011100001", 
    18 => "00111101101000100011111011111011", 
    19 => "10111110000001110100101101101111", 
    20 => "10111101101111100111001110011001", 
    21 => "00111110010011000101110001010111", 
    22 => "00111101101000100111110000101100", 
    23 => "10111100001011000001000101001011", 
    24 => "00111110001011110000000011110000", 
    25 => "00111100001100000001110101100100", 
    26 => "10111101101000111101011011001111", 
    27 => "10111110010010011011011010100101", 
    28 => "00111101011111100000010010001010", 
    29 => "10111101011101000111010101011110", 
    30 => "10111110000000001110010100100010", 
    31 => "10111110100111110101101101100000", 
    32 => "00111101111111101000100111011000", 
    33 => "10111101111011011101111100100100", 
    34 => "00111100101111001011110100101100", 
    35 => "10111110001101001100011110110001", 
    36 => "10111101100100000000010011111100", 
    37 => "10111110001000101110100101000010", 
    38 => "00111101101011010101011111110011", 
    39 => "00111110001110001010110010011011", 
    40 => "00111101010010111010111100000001", 
    41 => "00111101101100100011111100010010", 
    42 => "00111101011101111000001011010101", 
    43 => "10111101111000111010111101101110", 
    44 => "10111110001011111111011011000111", 
    45 => "00111110000110101000101011001000", 
    46 => "00111101110101111010010110011001", 
    47 => "10111101001100100101110011011011", 
    48 => "10111101001100001100111110111001", 
    49 => "10111110001100011101110011011111", 
    50 => "10111101111101001111101010101000", 
    51 => "10111101100001010100100001001010", 
    52 => "10111101111111111001011111111011", 
    53 => "00111100101100011100001011010010", 
    54 => "00111110010101011101100010111000", 
    55 => "00111101101110001010111010010111", 
    56 => "00111101101111111100000100100000", 
    57 => "10111101111001110100110001100000", 
    58 => "00111110010100001000110111000001", 
    59 => "00111101000100111000011001110101", 
    60 => "10111101101011000111101010111011", 
    61 => "00111101011001000001010110110101", 
    62 => "10111100011011011110111110010010", 
    63 => "10111101001010011100011001110010", 
    64 => "00111101101101010100000011010000", 
    65 => "10111110011110011001101000010011", 
    66 => "00111110000000010000010010001011", 
    67 => "10111101111111010110001001000101", 
    68 => "00111101010001000000101001011001", 
    69 => "00111101011111000110000110111100", 
    70 => "10111101110000010110110010101111", 
    71 => "10111110000010101111111101001000", 
    72 => "00111101110000011110110010110110", 
    73 => "10111011101111110100011110001111", 
    74 => "10111110000100011010110100100110", 
    75 => "00111101101111001011000100011101", 
    76 => "10111110010110000110100011000100", 
    77 => "00111101101110000011110011110110", 
    78 => "10111101010011001110000001101000", 
    79 => "10111110000011100110001001000110", 
    80 => "10111101101111101101010100001100", 
    81 => "00111100100010011111101111010110", 
    82 => "10111101101110010001100011000000", 
    83 => "10111101000111111111101011001110", 
    84 => "10111110100100111111100010110001", 
    85 => "00111101111000011110011011011001", 
    86 => "00111101101010101001000111110111", 
    87 => "00111101101001110011101100101100", 
    88 => "00111101011011001100000011101010", 
    89 => "00111101111010000101100100011100", 
    90 => "10111101111100100001111010000011", 
    91 => "00111101110000000010100101001010", 
    92 => "10111100001111000111100011000000", 
    93 => "00111101000000011000000010111100", 
    94 => "10111101111000001101011011000110", 
    95 => "10111110001001011110101010101101", 
    96 => "00111101010101011011001111000001", 
    97 => "10111110000011101011101010011111", 
    98 => "10111110010010111101110101100100", 
    99 => "10111101110110110111010101001011", 
    100 => "10111110000001000110010100111101", 
    101 => "00111110000000001000001111111100", 
    102 => "10111101101001011011110110111001", 
    103 => "00111101100100101011001011110010", 
    104 => "00111110001100111010000100101001", 
    105 => "10111101101110011010101000110010", 
    106 => "00111011110011101111111010011111", 
    107 => "10111110101001111100100010001001", 
    108 => "10111101101000000001000010000101", 
    109 => "10111110000101101011000000010011", 
    110 => "10111110001000011000011100010110", 
    111 => "10111110000001101100001100101010", 
    112 => "10111101101000101011100110111001", 
    113 => "10111100100010100100010100110111", 
    114 => "10111101100101110110101110000110", 
    115 => "00111110000110111100000111010110", 
    116 => "00111011110110000101110101101101", 
    117 => "00111100101001000111101100101100", 
    118 => "00111110000011110011101110100000", 
    119 => "10111110100110110100111000001100", 
    120 => "10111101111011110110010111001010", 
    121 => "00111100111110011010100110001001", 
    122 => "00111110000111100011111100101111", 
    123 => "10111101000111110001011110001111", 
    124 => "10111110001001101111110111010011", 
    125 => "10111100100100100100011110001110", 
    126 => "00111100110110111111001101011001", 
    127 => "10111011101011110000111110111011", 
    128 => "10111110000011111101000111000011", 
    129 => "10111101100001000010010110011111", 
    130 => "00111101101111001110100011000111", 
    131 => "10111110011001011011111100111101", 
    132 => "00111110000101111011001101100000", 
    133 => "10111110001100111001101111000101", 
    134 => "00111101100110000001110100110010", 
    135 => "00111101011010011011111111000111", 
    136 => "00111110000100111010000111011111", 
    137 => "10111110101101000010000010001010", 
    138 => "00111101011010011110101001000111", 
    139 => "10111101101111101100101000010000", 
    140 => "00111101001000100100101110001001", 
    141 => "00111100111010100111011011010100", 
    142 => "00111101101100110001100101110001", 
    143 => "10111101010100110011010110111101", 
    144 => "10111110000000110010011111110000", 
    145 => "10111101011101001000001010010011", 
    146 => "10111110101100101110100011110100", 
    147 => "00111110000111110111111110101111", 
    148 => "00111100101010100100110100011000", 
    149 => "00111101100000001100000110010110", 
    150 => "10111101010100100111011010001100", 
    151 => "00111110100010010110011000101100", 
    152 => "00111101100011100000101010111101", 
    153 => "10111101100001101011111000000111", 
    154 => "10111110011110001110000010000000", 
    155 => "10111110000011100011000000001001", 
    156 => "10111101011110011010110111100110", 
    157 => "00111100001000111100011101011111", 
    158 => "10111110001000001011000010011010", 
    159 => "00111100100111101101110101001111", 
    160 => "10111110010111111110000111000100", 
    161 => "00111100010000001011101100100101", 
    162 => "10111110110100001010001101011110", 
    163 => "10111110101001011000110011001001", 
    164 => "10111101101001101101010000101011", 
    165 => "00111101011000010111001000011011", 
    166 => "00111110001101010000100011010011", 
    167 => "10111100111100111111001001000010", 
    168 => "00111101001110001010001010011100", 
    169 => "10111110001001101000000100010001", 
    170 => "10111101011110111110001101000110", 
    171 => "10111110100011100111110101000010", 
    172 => "00111101101110100011011100110101", 
    173 => "10111101111110011101110000100011", 
    174 => "10111100111000111110011010101001", 
    175 => "00111101001111111011001000001101", 
    176 => "00111101110100101111100110010110", 
    177 => "10111100000101111100101011111000", 
    178 => "10111101110100101110001110110010", 
    179 => "00111101010011001101011101011000", 
    180 => "10111101000001110010000010010001", 
    181 => "10111101001000011001110001011010", 
    182 => "00111101101001100110100110111000", 
    183 => "10111110010000000001001110001100", 
    184 => "10111110000101101011110111011100", 
    185 => "00111110011001011000101010101100", 
    186 => "00111110001100100001100101001110", 
    187 => "10111101010000010011100100001011", 
    188 => "00111100111110110100010101011111", 
    189 => "00111101111001011001010100001110", 
    190 => "10111101110000100101011011011100", 
    191 => "00111101100001001010011011001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibWr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibWr is
    component conv_2_conv_2_weibWr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibWr_rom_U :  component conv_2_conv_2_weibWr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


