-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibek_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibek_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011110101010110100000", 
    1 => "10111100101001110100111110111111", 
    2 => "10111110010101010111001001101010", 
    3 => "00111110001101100010010001101100", 
    4 => "00111100110000001110101011010011", 
    5 => "00111101000100000101111010001010", 
    6 => "00111101000011010011110000011100", 
    7 => "10111110010101111001110101100110", 
    8 => "00111110001110000001010101100101", 
    9 => "00111101000001010011001000100111", 
    10 => "00111100110110100011100101010110", 
    11 => "10111101000001001100000011001010", 
    12 => "10111101000011000010011001110101", 
    13 => "00111100100111101110110101111110", 
    14 => "00111110001000110111001101010000", 
    15 => "00111110011101011010100111001111", 
    16 => "10111100111111110111100011111100", 
    17 => "10111100100100100110101110011110", 
    18 => "10111110000010000100011110101100", 
    19 => "10111101001111110111010111100000", 
    20 => "00111110000100010001100011101101", 
    21 => "10111101100111011110000001101111", 
    22 => "10111101100101111010010011011011", 
    23 => "00111101000111101101100011010111", 
    24 => "10111101111011000000010101001011", 
    25 => "00111101100000010010010001010001", 
    26 => "00111110001100101011010001011110", 
    27 => "10111101110000101011000110110101", 
    28 => "00111101001100111001101000010010", 
    29 => "10111101010011001110100101110000", 
    30 => "10111110000000100111010100001010", 
    31 => "10111101111100100101010001100101", 
    32 => "00111101110000100101000010100101", 
    33 => "10111110010010000101111011101010", 
    34 => "00111110001000000000110110101001", 
    35 => "00111110000011110001010000001011", 
    36 => "00111011100101110011001111010101", 
    37 => "00111101010111100101010000011100", 
    38 => "10111101110011100100100110011111", 
    39 => "00111100101010110111100011000110", 
    40 => "10111110100010101111011010000010", 
    41 => "00111110001001000010101110010100", 
    42 => "10111101110101001100011010101010", 
    43 => "00111110100010111111011000110011", 
    44 => "00111101101001000100001111101010", 
    45 => "00111101100010001111010100100011", 
    46 => "10111101101001000101000110100001", 
    47 => "10111100011001100000101101110100", 
    48 => "10111110000010110011000000110001", 
    49 => "10111110001010110010001111011000", 
    50 => "10111101010010110100110000010011", 
    51 => "10111011111111011010001011100000", 
    52 => "10111110010111001111100110110000", 
    53 => "00111101110010101100101000111100", 
    54 => "10111101100110011010111111010011", 
    55 => "10111110010101001010100010000101", 
    56 => "10111100100101010010100100100011", 
    57 => "10111101011000110000100000001011", 
    58 => "10111110000001000110110101011101", 
    59 => "10111101100000010000010001011110", 
    60 => "00111101000011111000100011111001", 
    61 => "00111101011100111101101110001000", 
    62 => "00111101101010111111101100111010", 
    63 => "00111110000111111101101000101010", 
    64 => "00111101111100101000101011100000", 
    65 => "10111100010011001000101111111011", 
    66 => "10111011110011001010101000000010", 
    67 => "10111100101011000100110011111001", 
    68 => "00111100110110011011011110101001", 
    69 => "00111101101001001111000000001110", 
    70 => "10111100010001111100101110110001", 
    71 => "00111100110111111101100000100110", 
    72 => "00111101100010111110011011001000", 
    73 => "10111110001000000011001101011111", 
    74 => "00111100110000001111110001001011", 
    75 => "10111110001001011100011101010010", 
    76 => "10111101100000010000110001000010", 
    77 => "00111101101001010001011001110010", 
    78 => "00111101110100011110111101000101", 
    79 => "00111100111001010011011101000001", 
    80 => "00111101010011001111010101000101", 
    81 => "00111100010011011110100100010001", 
    82 => "00111101010001110110100011010110", 
    83 => "00111100100100010011111001100010", 
    84 => "10111110000101101100000001101010", 
    85 => "10111110001000010100111000110101", 
    86 => "00111101111100100110011101010100", 
    87 => "10111101111101010011100111111100", 
    88 => "00111101111101000111100010001001", 
    89 => "10111101111111011101110011100011", 
    90 => "10111101011110010101111101110011", 
    91 => "00111100011011010100000111000000", 
    92 => "00111101101111000010000001110011", 
    93 => "10111101011110001111001100101100", 
    94 => "10111001101000111110110111100000", 
    95 => "00111100010010000001110000110000", 
    96 => "10111101100100101101000100001110", 
    97 => "10111101000101000000011001110111", 
    98 => "10111100000101101101011011100100", 
    99 => "10111110000000111011110000010001", 
    100 => "10111101001000100010010110000110", 
    101 => "00111100110011111001010001101000", 
    102 => "10111101100000111000111101110001", 
    103 => "10111100110100001010101100001010", 
    104 => "10111110000101011101001011010010", 
    105 => "10111101000111010111111000101110", 
    106 => "00111101011010101101101101000000", 
    107 => "00111101000001000011100101000110", 
    108 => "10111101100001111010100111110011", 
    109 => "10111100110001110101100100010110", 
    110 => "00111101001011110001011111111100", 
    111 => "10111101010111101010001011001011", 
    112 => "10111101000010010000111000110001", 
    113 => "10111101111010100101100111100001", 
    114 => "00111101100010110011011010000111", 
    115 => "00111011011010011101111111110110", 
    116 => "10111100111100001101111010000101", 
    117 => "10111011100000001100001110010011", 
    118 => "10111101110000010011100110011101", 
    119 => "10111101100110111001111000100101", 
    120 => "00111110010010000111001010001011", 
    121 => "00111100101001101100101101100101", 
    122 => "10111110100111101111000000111101", 
    123 => "00111101110011011110101101010010", 
    124 => "00111101111010100100111011010100", 
    125 => "10111100010001101010110010000100", 
    126 => "10111110000010000100100111110010", 
    127 => "00111101111000011001000111011111", 
    128 => "00111101011011011110001100001011", 
    129 => "00111110010011001010011000000000", 
    130 => "00111101010101011101001011010111", 
    131 => "10111100001101101000111001101111", 
    132 => "10111011110100001010011011010111", 
    133 => "10111110001010110100000000100000", 
    134 => "10111110011000001000111000110010", 
    135 => "00111100001101001011110111101000", 
    136 => "10111101101010010000100110011100", 
    137 => "10111110001001111001111100100011", 
    138 => "10111110011010111101011100000011", 
    139 => "10111110010100101010000100001010", 
    140 => "10111101110110010111000010010100", 
    141 => "00111101010000101011110101011100", 
    142 => "10111101010111001001111001101111", 
    143 => "10111101100010111011100110100001", 
    144 => "00111011111001111110100000010111", 
    145 => "10111101011101011011111111111111", 
    146 => "00111101110110000000000011000111", 
    147 => "00111101010011011010000010011001", 
    148 => "10111100010011000101000001010011", 
    149 => "00111101111100001010001101100101", 
    150 => "00111110000001001010111010010011", 
    151 => "10111110010100110111001000100110", 
    152 => "10111101011111011110111100110101", 
    153 => "10111101111111010101000010101100", 
    154 => "10111101111000101001001011011101", 
    155 => "00111100000111101101000110001101", 
    156 => "10111101011101111111000101000011", 
    157 => "00111101101110010000100110010001", 
    158 => "00111101111100000000011010011000", 
    159 => "10111101110011011000010100100110", 
    160 => "10111110011010111001010111000110", 
    161 => "00111101001000001100000011110011", 
    162 => "10111110100111100101001010011110", 
    163 => "10111101110101110010100111111001", 
    164 => "10111100101100100011101001010011", 
    165 => "10111110000100110100110001100110", 
    166 => "10111101010101111100011110110100", 
    167 => "00111011111101101101011001010001", 
    168 => "00111110010110000010001110001000", 
    169 => "10111110011011011101100101100011", 
    170 => "00111101011010001000010111000011", 
    171 => "10111101101100010001011110001101", 
    172 => "00111100001000011111110110001100", 
    173 => "10111110010110011110111101010001", 
    174 => "10111110001111001010010110100111", 
    175 => "10111101111001101010111101011000", 
    176 => "00111101101011010000001001111101", 
    177 => "00111101101100011000010110111100", 
    178 => "10111101000000111010111010101111", 
    179 => "00111011100011100111000001110001", 
    180 => "10111101000101000010101000000000", 
    181 => "00111101011011000111111000110001", 
    182 => "10111101111100011110100110011101", 
    183 => "00111101000001010110110011010011", 
    184 => "00111101011000110011111001010100", 
    185 => "10111101000011001001010001110011", 
    186 => "10111101110001101100010011111111", 
    187 => "10111101101011100010000001000011", 
    188 => "00111110001010000101000000100010", 
    189 => "10111101101010010111000111100101", 
    190 => "00111110001000110111110111001101", 
    191 => "00111101011100001001001100001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibek is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibek is
    component conv_2_conv_2_weibek_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibek_rom_U :  component conv_2_conv_2_weibek_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


