-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiyd2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiyd2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000111100101111111000010", 
    1 => "10111101010011100110000000000101", 
    2 => "00111101101111100010000111000111", 
    3 => "10111100101001000100001111010011", 
    4 => "10111110001000111011110101011100", 
    5 => "00111101011110110111110011011001", 
    6 => "00111101110101110110000100011100", 
    7 => "10111101101111110101010111111010", 
    8 => "00111101111001010001010111111010", 
    9 => "00111101101110101110111111110111", 
    10 => "00111101111100111011101110010011", 
    11 => "10111101010011111011010000001001", 
    12 => "00111101100010000101001011010100", 
    13 => "10111110001001110000110110111101", 
    14 => "10111010011001001111100110000001", 
    15 => "10111101001011010100001001110111", 
    16 => "10111110011001111100101101010010", 
    17 => "00111100100011101111101111101100", 
    18 => "00111100000010011101011001010110", 
    19 => "00111101100000010010101100011001", 
    20 => "10111110100110011100001010001111", 
    21 => "10111110001111101110000010010011", 
    22 => "10111110001000111111010111001111", 
    23 => "10111110001100100010110110111011", 
    24 => "00111101000110010011000100111110", 
    25 => "00111110001001011111011111011000", 
    26 => "00111101101010000110011110101111", 
    27 => "00111101111011000101000110101110", 
    28 => "10111101010000011000011001101110", 
    29 => "00111110000010000100010001000100", 
    30 => "00111100111010110101111001111001", 
    31 => "10111101101010111111111011101101", 
    32 => "10111101000001100000000101010101", 
    33 => "10111110101111001111000000110000", 
    34 => "10111101001100110000110100010101", 
    35 => "00111110000001000100101000001110", 
    36 => "10111100000110110011000101110010", 
    37 => "00111101101001110100101000011000", 
    38 => "10111101100111010000101100100111", 
    39 => "00111101111001101111101010001110", 
    40 => "10111100010000100001111011111000", 
    41 => "00111110010010011011010111000000", 
    42 => "10111101110111010111100100011010", 
    43 => "00111101011100001101100111110111", 
    44 => "10111100111011010110101101001001", 
    45 => "00111100110011010001010001001100", 
    46 => "00111101101101111001010011010111", 
    47 => "00111110100001000101001011001111", 
    48 => "00111100100111101100110011000000", 
    49 => "10111110101101000100001101101000", 
    50 => "10111101111111100010101110000101", 
    51 => "00111101000110010111101000010111", 
    52 => "10111110101100001110110001001011", 
    53 => "00111101000011001000011100001110", 
    54 => "00111110000100101101111101001100", 
    55 => "10111110100011011011100001100101", 
    56 => "10111101101111011110000011100111", 
    57 => "00111100110101111111010111101111", 
    58 => "00111101010001100011110111101011", 
    59 => "10111100110010010100010111111000", 
    60 => "10111100111100000010101101011100", 
    61 => "10111101001100001101001101100111", 
    62 => "00111101010010111100001001101010", 
    63 => "00111100111100100000100111000100", 
    64 => "00111101101010001100100000011110", 
    65 => "10111101100110110010011101101001", 
    66 => "00111100100010001011010111011110", 
    67 => "10111101011110101100011100000010", 
    68 => "10111011010010100001101001000100", 
    69 => "00111100001011110111011001100001", 
    70 => "10111110011010011011001111000111", 
    71 => "10111100101011101110011101011111", 
    72 => "00111101100000010100101100011011", 
    73 => "10111100111001111110000101110010", 
    74 => "00111101000110000010110011001101", 
    75 => "10111101111110011110100010111110", 
    76 => "10111101100110000110000001100101", 
    77 => "10111110000001111110001001101110", 
    78 => "00111100111001010100010101000110", 
    79 => "10111100111001001011000010000011", 
    80 => "10111110000101001011011010111011", 
    81 => "10111100101111010111101111010000", 
    82 => "10111101101111011011010111011001", 
    83 => "00111101000010111111011110001001", 
    84 => "10111110110010011000010010100101", 
    85 => "10111110001011100111100001000010", 
    86 => "10111101011110111010100100011011", 
    87 => "10111101100000001101001010010001", 
    88 => "10111101000111010000100101001000", 
    89 => "00111101111001111101110110010100", 
    90 => "10111100101001001011111111100110", 
    91 => "10111101111101100010000011110101", 
    92 => "10111101011010000111011111000111", 
    93 => "00111101110111101111101010010111", 
    94 => "10111110011001111100011111110010", 
    95 => "00111101000111000100101110011010", 
    96 => "10111110100011111011010010101000", 
    97 => "10111110000001001011100110111011", 
    98 => "10111101001010000101110110101111", 
    99 => "10111100110101101100111010101101", 
    100 => "10111100010010001111000001110110", 
    101 => "00111101111111001101000111100001", 
    102 => "10111110011010101010000000101100", 
    103 => "00111100010111111001111100011010", 
    104 => "00111101001000100000001011011001", 
    105 => "00111101000011111010100100000100", 
    106 => "10111101110110010110110110101101", 
    107 => "10111101110010001110101001011000", 
    108 => "10111101101101101111001011000001", 
    109 => "10111110010001101000001011110011", 
    110 => "10111101010101001110010000010100", 
    111 => "00111101100000011010111001001101", 
    112 => "00111101100101100111000010000100", 
    113 => "10111110100011110000011010111011", 
    114 => "10111110011110001001101011111111", 
    115 => "00111100011111001111010110000000", 
    116 => "10111101001101011010101110001101", 
    117 => "10111011100101000000001011001111", 
    118 => "00111101110101101100110010011101", 
    119 => "10111101000011111111011010100011", 
    120 => "10111110010000001001101110110100", 
    121 => "00111101011101110010111110111110", 
    122 => "00111100110101011001011100011101", 
    123 => "10111101100011111001001010000011", 
    124 => "10111110001001110000101000010100", 
    125 => "10111100101111000001100101010011", 
    126 => "00111101001011011100001110110010", 
    127 => "00111101011000101101101001000000", 
    128 => "00111100101110100101011101001111", 
    129 => "00111110010001010100111010101101", 
    130 => "00111101101000100110001000111001", 
    131 => "00111101101001011100001100010011", 
    132 => "10111110010101000101011110001001", 
    133 => "10111101101111101100100000001110", 
    134 => "10111110011101101100100110011101", 
    135 => "10111100001000110001011100100101", 
    136 => "10111100110000000011101101010111", 
    137 => "00111100100100001101111011000000", 
    138 => "00111011110111111101001011011011", 
    139 => "10111110001100101110000101010000", 
    140 => "10111110110010000000100111100100", 
    141 => "00111110000001111010010011111110", 
    142 => "10111101100101010111001010001000", 
    143 => "00111101100110010110110000100111", 
    144 => "00111110000010110011011010011111", 
    145 => "10111101010110010101000001101110", 
    146 => "00111110000011100110001101100000", 
    147 => "00111101101101100000101110100000", 
    148 => "10111110001101101110111010110110", 
    149 => "10111110010000111101100001111011", 
    150 => "00111110000001001110000110011111", 
    151 => "10111110010101001001101011010000", 
    152 => "10111110000101100100001110100010", 
    153 => "00111100000101100111110000101100", 
    154 => "00111101000001010100101011011101", 
    155 => "10111101110110110111111001011011", 
    156 => "00111101101000111001101011100110", 
    157 => "00111101110011100110111101100111", 
    158 => "10111110100001011000010001001101", 
    159 => "00111101010110110010000011000110", 
    160 => "10111110111001110101001011101110", 
    161 => "00111110000001110100010111100100", 
    162 => "10111101111111100000101011110100", 
    163 => "10111110001100000010011110111110", 
    164 => "00111101110101111000000100001101", 
    165 => "00111100001000100010100111111100", 
    166 => "10111100110011001011100010000111", 
    167 => "10111101100001101111101010010111", 
    168 => "10111110001110001110110001001111", 
    169 => "10111101110000111100101010101100", 
    170 => "10111101101100110010101001000000", 
    171 => "00111101110011100001000011111100", 
    172 => "00111110001100001110101111001111", 
    173 => "10111110000100011110011110010011", 
    174 => "10111100111101001100010011110011", 
    175 => "10111100111101001001110111000011", 
    176 => "00111101100100111001100110100101", 
    177 => "10111101110111001101110111011100", 
    178 => "10111110100100011000000111010011", 
    179 => "10111101110000001011100110100001", 
    180 => "00111100101010011011100110110000", 
    181 => "10111110100010000100101110111001", 
    182 => "00111110010101101001111000001100", 
    183 => "00111110000110001011110100100111", 
    184 => "10111100001100000110001100000110", 
    185 => "10111100110101101110111000101110", 
    186 => "00111101101011101001001110010000", 
    187 => "10111100101011100000001011000101", 
    188 => "10111110001000101101110001100111", 
    189 => "10111101100001100111010101100101", 
    190 => "10111101010010111110010110100010", 
    191 => "10111101000101101101010000110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiyd2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiyd2 is
    component conv_2_conv_2_weiyd2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiyd2_rom_U :  component conv_2_conv_2_weiyd2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


