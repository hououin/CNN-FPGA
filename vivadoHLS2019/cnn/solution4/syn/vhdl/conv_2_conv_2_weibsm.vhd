-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibsm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibsm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111000101100011001001110", 
    1 => "10111110101011010011011111011100", 
    2 => "00111110000000001001110110101001", 
    3 => "10111101110100010000000001100010", 
    4 => "10111101101110000111111001111010", 
    5 => "00111101111101001101110110011010", 
    6 => "00111100110101011001101001111011", 
    7 => "00111100011000101110100111111101", 
    8 => "10111100100110100010100010001110", 
    9 => "10111100001010001110111000010011", 
    10 => "00111110000011101011001110010111", 
    11 => "00111110100000110100001000110000", 
    12 => "10111110000110100110010001011011", 
    13 => "10111101111111000000011100001010", 
    14 => "00111110010000101000000001000011", 
    15 => "00111110011000011101111110010110", 
    16 => "00111101011001011011000001111101", 
    17 => "10111100101010001010010101100000", 
    18 => "00111110000000100000111000100000", 
    19 => "00111101011101011101000111111111", 
    20 => "00111101111010000100111000100011", 
    21 => "10111100101101101101110011110100", 
    22 => "00111101011110001111000101101111", 
    23 => "00111011011000110011111000001110", 
    24 => "00111101110110010100001000001111", 
    25 => "00111110000110011011000010011101", 
    26 => "10111110010011111011101001001100", 
    27 => "10111110001110111000011111100100", 
    28 => "00111110001100010100011000010000", 
    29 => "00111101100101100101100101011101", 
    30 => "10111110000001100010110100001011", 
    31 => "10111101100010011001110111100110", 
    32 => "00111101110011011111001000101010", 
    33 => "10111110011111110010110000010100", 
    34 => "00111101111111101010100010010110", 
    35 => "10111110100011000100101011110100", 
    36 => "10111101101000001000100011001011", 
    37 => "10111110011101111110011001010011", 
    38 => "00111100001010101111001000100101", 
    39 => "00111011011110001111101001111000", 
    40 => "00111110000101100011100110000101", 
    41 => "00111110101011000011000111001010", 
    42 => "00111100000010100100001110101111", 
    43 => "00111100111001111101010001100010", 
    44 => "00111101110111001100011001111000", 
    45 => "00111101010000111010001001101011", 
    46 => "00111110000110100010010011100001", 
    47 => "00111101010010001101111010011100", 
    48 => "00111101101110011111100000000100", 
    49 => "10111110101110010101010000000111", 
    50 => "00111101001011101001010100100001", 
    51 => "10111111000000110100100101011010", 
    52 => "10111110000010111110000000000110", 
    53 => "10111101010111111011010000011011", 
    54 => "00111101100110011111000011100000", 
    55 => "10111101100010111101101010010111", 
    56 => "10111101010100100101101010111111", 
    57 => "00111110011000111011100000110111", 
    58 => "00111100111101101000100001001110", 
    59 => "00111110001011010010001110000110", 
    60 => "00111101001001011000101101011111", 
    61 => "10111101001000001000000100010111", 
    62 => "10111110001001100011011101111010", 
    63 => "10111110001101000010111110000111", 
    64 => "00111110001011000010101001001011", 
    65 => "10111110110000110101000000000110", 
    66 => "10111110000101010101011001000101", 
    67 => "00111110000010001110111100101111", 
    68 => "10111110001110111110001010000010", 
    69 => "00111100110100001101101010001001", 
    70 => "00111101100010010011010000110010", 
    71 => "00111101001011000100101011000000", 
    72 => "00111101101000010110001110110010", 
    73 => "00111101000100100010100010101001", 
    74 => "10111110110001111011001010011110", 
    75 => "00111101100110111100101100011010", 
    76 => "00111100100001100010111111010111", 
    77 => "10111110010110110001100111000110", 
    78 => "10111100100011010001100100100110", 
    79 => "00111100010110001010110010000001", 
    80 => "10111110010100010111100101001001", 
    81 => "00111100000011110011010111010101", 
    82 => "00111100100000101010001100010100", 
    83 => "00111101011010000000111111000110", 
    84 => "00111110010110101100100101100010", 
    85 => "10111101111100001110010011101101", 
    86 => "00111101110011001111011110100110", 
    87 => "10111110101011111100111111011100", 
    88 => "10111100111011111101001000100101", 
    89 => "00111011110010110111010101011010", 
    90 => "00111110001000100111110001011000", 
    91 => "00111110100010000000001011111001", 
    92 => "10111101010111111001011011101110", 
    93 => "00111100100011111100010110100111", 
    94 => "10111110011000010011111000100010", 
    95 => "10111100111111111111011001000100", 
    96 => "00111110000101110001111001110111", 
    97 => "10111101010010001001011011100001", 
    98 => "00111110011000000100100001110110", 
    99 => "10111101010111001111100011010101", 
    100 => "00111100001111010100111101010000", 
    101 => "00111101000000100110001101101010", 
    102 => "10111101111110101110000100010001", 
    103 => "10111101111100000100110111000110", 
    104 => "00111110001100011110011010110111", 
    105 => "00111100010111110110001010001100", 
    106 => "10111101101011110111011001010000", 
    107 => "00111101001010111011101100010001", 
    108 => "10111110010111110001110010010100", 
    109 => "10111110010000111110110001111000", 
    110 => "10111110000100000111101000001111", 
    111 => "10111101110110010010111001010111", 
    112 => "00111100011000011000111001101000", 
    113 => "00111101001101100000010001101100", 
    114 => "00111100011010011110101011011010", 
    115 => "00111100101100011000110000001010", 
    116 => "00111101010000001101001101001111", 
    117 => "00111101111110101111111001111100", 
    118 => "00111110001001011111001110111100", 
    119 => "10111110010101101001001101001101", 
    120 => "10111100111111001010001100001011", 
    121 => "10111110001011000000110111110011", 
    122 => "00111101001101001111001000111101", 
    123 => "10111110011101010000010101100011", 
    124 => "10111011110011011111001101011110", 
    125 => "00111101000111101100010011111010", 
    126 => "00111110000111000001101010011000", 
    127 => "00111101100000001011000101100101", 
    128 => "10111110100000110101100001011011", 
    129 => "10111110010011100011101011111101", 
    130 => "10111101110010110110111111101001", 
    131 => "10111101011010100100100100000110", 
    132 => "10111110011010101100010100000100", 
    133 => "10111110100011101001100010110111", 
    134 => "10111101101110111010111000110100", 
    135 => "00111110001100011010010111001010", 
    136 => "00111110010101100001011101111010", 
    137 => "10111110110110010011111111000000", 
    138 => "00111110000011100111000111100010", 
    139 => "10111101100001111110100001001000", 
    140 => "10111101010110101011101001011000", 
    141 => "10111100110010000010011001011101", 
    142 => "00111110100001000001001001111100", 
    143 => "00111101101011111100011010111101", 
    144 => "10111101100000001011000010111010", 
    145 => "10111101010101111001011110011111", 
    146 => "10111101100101111100001001100111", 
    147 => "10111101110110010001001100001000", 
    148 => "00111110010010110010000000010100", 
    149 => "10111110011110100100010001000011", 
    150 => "10111101101001000111011100011111", 
    151 => "10111110110110010111010111010110", 
    152 => "10111101000010101000010101000011", 
    153 => "10111101100100011110010010111011", 
    154 => "00111010101101110001011011011010", 
    155 => "00111101101010001001011001101000", 
    156 => "00111100111101010100001010011101", 
    157 => "00111101011110010011010100010111", 
    158 => "00111101001001011100111101101110", 
    159 => "00111011011000100111111101111100", 
    160 => "10111110000110001101010001000001", 
    161 => "00111101110001101011000010010100", 
    162 => "10111111000000110100001001111101", 
    163 => "10111110101001000010010000111001", 
    164 => "10111110011001101110001111001101", 
    165 => "00111100110100100011001000000000", 
    166 => "10111110010110110101110111111110", 
    167 => "00111110100001110111101101001110", 
    168 => "00111101010101000010010100111010", 
    169 => "10111100000100111110011011101111", 
    170 => "10111110010100110110001111011001", 
    171 => "10111101101111001000111000111110", 
    172 => "00111101010010111000011110000101", 
    173 => "00111110010001001111010001001001", 
    174 => "00111101101110011010111100011001", 
    175 => "10111011010000011100111110111111", 
    176 => "10111110010010100100001100111101", 
    177 => "00111110001010100100010000111100", 
    178 => "00111101111111111110000101001000", 
    179 => "00111010011101111011111100010001", 
    180 => "00111110010011011000111101100110", 
    181 => "10111101110010011001100101101101", 
    182 => "10111101010000110111001101000000", 
    183 => "10111101110100000011000010011000", 
    184 => "10111101100000011111111011111110", 
    185 => "00111101111011101010100011001111", 
    186 => "10111101011011000110001000111000", 
    187 => "00111110001100110111111111000000", 
    188 => "10111101110010101001100100000111", 
    189 => "10111011110000011100011111011110", 
    190 => "00111101111000010011100010010010", 
    191 => "00111010000100001100000110101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibsm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibsm is
    component conv_2_conv_2_weibsm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibsm_rom_U :  component conv_2_conv_2_weibsm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


