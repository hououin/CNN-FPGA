-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiKfY_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiKfY_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000110001110100101000011", 
    1 => "10111100110100111101011001110011", 
    2 => "10111101100100001001111110000110", 
    3 => "00111101010011001111010001011100", 
    4 => "10111101101011101101011011110001", 
    5 => "10111011011001000101100100100100", 
    6 => "10111101110100000101011011011111", 
    7 => "10111101001110100000000000001101", 
    8 => "10111101100101111111001000111110", 
    9 => "10111110100000110010110100011000", 
    10 => "10111101101101110011101000010100", 
    11 => "10111101100000100011010100001000", 
    12 => "10111110010000101100111011001111", 
    13 => "00111101000110101001001111100011", 
    14 => "00111100101111010111100001100000", 
    15 => "00111100001000010010100101100110", 
    16 => "10111110011010111011011101001100", 
    17 => "00111101000011001100010000111011", 
    18 => "00111101101101111001100001010110", 
    19 => "00111110000110101011011111101001", 
    20 => "00111101010010000110001100100100", 
    21 => "10111110011010100111010001101101", 
    22 => "10111101111000011001100100000100", 
    23 => "00111101101100001101010111001110", 
    24 => "10111110001110001110011111000100", 
    25 => "00111011111011000110011010110000", 
    26 => "10111101111001010101010101011010", 
    27 => "00111101111100011011111010101011", 
    28 => "00111101011101110001001011101111", 
    29 => "10111101011010011111100001000011", 
    30 => "00111101101010101010100110110110", 
    31 => "00111101111010011001001011000001", 
    32 => "10111101111001000001011011001010", 
    33 => "10111110000011110010101101100010", 
    34 => "10111101100101011100010111010110", 
    35 => "00111110100001011111001111000001", 
    36 => "10111101111111010110110001001111", 
    37 => "10111100100001111101111110110000", 
    38 => "10111100100101111010100110010000", 
    39 => "10111100100010000100011100000011", 
    40 => "00111101010110000111111001110010", 
    41 => "10111101001010100010101101111010", 
    42 => "10111011011000111011011100101001", 
    43 => "00111101111001111111001101110001", 
    44 => "00111011111100000101101000101010", 
    45 => "10111100111101100100111000110000", 
    46 => "10111101000101111010110100101011", 
    47 => "00111011111110111100010111010101", 
    48 => "00111110010100110111000110010101", 
    49 => "10111110110011010000101001000011", 
    50 => "10111110010110001001110111010100", 
    51 => "10111110000101101110100110011111", 
    52 => "10111110010011110011010100001111", 
    53 => "00111110000111110010011101000101", 
    54 => "10111101100100000000010110011111", 
    55 => "10111101001100111000110110000010", 
    56 => "00111101101010010000000011011110", 
    57 => "00111100101001010101101101100010", 
    58 => "10111101011000011110001101001110", 
    59 => "10111011111100100001010100001101", 
    60 => "00111101110000000110101001110001", 
    61 => "00111100100001100110011110100011", 
    62 => "10111101011111100010010111111100", 
    63 => "10111101100011101000000000111111", 
    64 => "10111101011101011001000110011010", 
    65 => "10111101000001111111011000100111", 
    66 => "10111110011000010010101110001011", 
    67 => "10111110000111010010111011000100", 
    68 => "10111101110010111000110110100010", 
    69 => "00111101100010100000001000000010", 
    70 => "10111101011111011000110100110100", 
    71 => "10111110000111110101110000001010", 
    72 => "10111110001101010100000111100100", 
    73 => "00111110001010101011001000100111", 
    74 => "00111101000111001100011110001111", 
    75 => "10111100101010101010111011010010", 
    76 => "10111101111011111010010001110011", 
    77 => "10111110011100001010000000100111", 
    78 => "10111101111010001000011000100101", 
    79 => "10111101010101100111111000101000", 
    80 => "10111110000010100011100101010111", 
    81 => "10111100111110110010111001111010", 
    82 => "10111110010010100011101101101101", 
    83 => "00111110001110110011000101111100", 
    84 => "10111110001110100001111111011000", 
    85 => "10111110001101001011111101111100", 
    86 => "10111110111100011111010101110100", 
    87 => "00111101101011100111110001111110", 
    88 => "10111110100110011011100100011011", 
    89 => "10111100001100111111010111101110", 
    90 => "00111011101011110110011101100111", 
    91 => "00111101011101000011100010000011", 
    92 => "10111100010101101000111111111111", 
    93 => "10111101000000111101000110110001", 
    94 => "10111110001000110110100111101100", 
    95 => "00111101111101011101110100111000", 
    96 => "10111101111110101101101001000111", 
    97 => "10111110100001001011111110110000", 
    98 => "10111101000000010111100111111100", 
    99 => "00111101101100110111001110100101", 
    100 => "10111100101011101110001101011001", 
    101 => "00111110000100101101001110011111", 
    102 => "10111110001001010000101010110110", 
    103 => "10111110001101011000101101111011", 
    104 => "00111011100101101110111110110011", 
    105 => "10111101001101001000101101110011", 
    106 => "10111110100101000110011001011100", 
    107 => "10111101100001011011011100101010", 
    108 => "00111101010101101111100000001001", 
    109 => "00111101101010101110111010010000", 
    110 => "00111101010111011000001101110000", 
    111 => "00111101000000111011011000000001", 
    112 => "00111101100101100111000111001010", 
    113 => "10111110000100100000110000110011", 
    114 => "10111110101100000000011000001000", 
    115 => "10111100011111001011010011000100", 
    116 => "10111110100000100010101110110001", 
    117 => "00111110011110011010101010100110", 
    118 => "00111011110101111101101111001001", 
    119 => "10111101111001001011111110011101", 
    120 => "00111101000011000110100011101010", 
    121 => "00111101000010111010100101101011", 
    122 => "00111100110100101110001101010110", 
    123 => "00111101100111000100110011111100", 
    124 => "10111110110111101010011110101000", 
    125 => "10111110001101100101101011100111", 
    126 => "10111110010101100101011010010010", 
    127 => "10111101011010111110100011101010", 
    128 => "10111100010010100000110110111100", 
    129 => "00111101000101100011000011010110", 
    130 => "00111101010100011000100101011000", 
    131 => "00111101011101010111010100101110", 
    132 => "10111110000111000010001111110001", 
    133 => "10111101000010100011110000001100", 
    134 => "00111101101100110010101111100110", 
    135 => "10111110010010001101000011011110", 
    136 => "10111101000100011110010011001101", 
    137 => "10111101101010100011100100100101", 
    138 => "00111101100100111101001001100000", 
    139 => "10111110001110110110000010110000", 
    140 => "10111110000011000100000110010111", 
    141 => "10111110001111101011001101010110", 
    142 => "10111110000110100011001110111100", 
    143 => "10111101111010011101000011010100", 
    144 => "10111100100010110010111000111101", 
    145 => "00111101100001000101001111101110", 
    146 => "10111101101011001011100000111010", 
    147 => "00111101010011101001110110011000", 
    148 => "10111110011101100010110011110000", 
    149 => "00111110010110110111110110110010", 
    150 => "10111101111010000001000101111001", 
    151 => "00111101010010001011000000111000", 
    152 => "10111101101111011101010001100100", 
    153 => "00111101000011100111100111100001", 
    154 => "00111101101101001100101011011010", 
    155 => "10111101110010100110110110111011", 
    156 => "00111101011010010110010011011001", 
    157 => "00111101101010001011001001110010", 
    158 => "10111110010100001000001110001000", 
    159 => "00111101011011011011010101000100", 
    160 => "10111101111000100111010101001110", 
    161 => "10111101001000010001111111100111", 
    162 => "10111101100110110001111111110100", 
    163 => "10111110100111111001101100010010", 
    164 => "00111100000011101110011011010111", 
    165 => "00111101101011110001001101000111", 
    166 => "10111100111101010110111010100000", 
    167 => "00111100100001101101000001111110", 
    168 => "10111100100110001000011001011101", 
    169 => "00111101110010101110011101101010", 
    170 => "00111110000000100101011101000000", 
    171 => "00111011001111010111011101001110", 
    172 => "10111101101111010101001001111110", 
    173 => "10111101111000010000011001100110", 
    174 => "10111101100000101100001010011110", 
    175 => "00111101101110111100011111110111", 
    176 => "00111100101001001011100110000110", 
    177 => "10111110001011011111011010001010", 
    178 => "10111110100111101100010010110000", 
    179 => "00111110000110101100001011001100", 
    180 => "00111101101000101101100101000001", 
    181 => "10111101010000100011001000101100", 
    182 => "00111101000010000010010010110110", 
    183 => "10111101110000100101110110111001", 
    184 => "00111101011010011111000011111001", 
    185 => "10111101011101110100111101100111", 
    186 => "00111101100100100111000110001111", 
    187 => "00111101100110011111010100101101", 
    188 => "10111110111011111111000000011011", 
    189 => "10111101100011100101011000010100", 
    190 => "10111100111110011100001111111111", 
    191 => "00111101110100111110000110011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiKfY is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiKfY is
    component conv_2_conv_2_weiKfY_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiKfY_rom_U :  component conv_2_conv_2_weiKfY_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


