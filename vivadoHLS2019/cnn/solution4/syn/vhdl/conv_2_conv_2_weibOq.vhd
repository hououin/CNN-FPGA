-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibOq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibOq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100010001100011010001111", 
    1 => "10111110001101010110001000100010", 
    2 => "10111110010011111001000001010011", 
    3 => "00111110001110000111101110110101", 
    4 => "00111101101100010011100011001101", 
    5 => "10111100010110001000111101100101", 
    6 => "00111110011010000110001000111011", 
    7 => "10111010101000100010110011011011", 
    8 => "10111101001101100101110000111111", 
    9 => "00111011100011101101111000001111", 
    10 => "00111100010111001111101101010010", 
    11 => "10111110001010010111010001101101", 
    12 => "00111110000111010011010000000000", 
    13 => "00111110000000010101110110001000", 
    14 => "00111110010000110110110000100100", 
    15 => "00111101100011111111100010001100", 
    16 => "00111101100100100010001111111100", 
    17 => "00111101011000001110111001111011", 
    18 => "00111100011011100110001010000011", 
    19 => "10111110010000110101110000000111", 
    20 => "00111101110110101011100011011011", 
    21 => "00111101111000111001111111010100", 
    22 => "00111110000100000110111011101101", 
    23 => "00111101110101111000111100111101", 
    24 => "00111101101111101111100001110010", 
    25 => "00111101110011110101011110110001", 
    26 => "00111101101101110110100010000000", 
    27 => "10111110011010100001111000001000", 
    28 => "00111110000001101001000100001000", 
    29 => "10111110011010111111111011000100", 
    30 => "00111100000101000110010000110000", 
    31 => "10111110110100000001100010000011", 
    32 => "00111100101111010111100010101011", 
    33 => "00111110000010111100100110100010", 
    34 => "10111100010010111110111000010111", 
    35 => "10111110000110010010100011001000", 
    36 => "10111101000011110010110010001000", 
    37 => "10111100101101000101001111011011", 
    38 => "00111101000001000111101010111001", 
    39 => "10111101111000110000011100110100", 
    40 => "10111110110100100011011101101010", 
    41 => "00111101110011111011101010100000", 
    42 => "10111100001010010110100101100100", 
    43 => "00111101111001100010000000000110", 
    44 => "00111011100010010101001110001101", 
    45 => "00111110001010011110011110111111", 
    46 => "00111101110000110110101011001010", 
    47 => "00111110001111101101101011100000", 
    48 => "10111110001110010101110101101001", 
    49 => "10111100110011010001001001101000", 
    50 => "00111101110011011000011001011101", 
    51 => "10111101110010111100011000011000", 
    52 => "10111110001110100101000111100000", 
    53 => "00111101110111101110111011101011", 
    54 => "10111110100100000000101001111110", 
    55 => "10111101100011010001011110001000", 
    56 => "00111101110100110010101000100101", 
    57 => "10111101011110110011000100000000", 
    58 => "10111101100100110011111101010110", 
    59 => "00111110000100011010101110011000", 
    60 => "00111101101000110001001000010010", 
    61 => "00111100110001011100101101010011", 
    62 => "10111101101110111110011001010100", 
    63 => "10111010110100110101111101111111", 
    64 => "00111100010100100111101000110110", 
    65 => "10111101110000111010011000101100", 
    66 => "10111110101010011101010100101100", 
    67 => "10111110001010011101110100000110", 
    68 => "00111011111111111101001111001000", 
    69 => "00111110001010110001101011010011", 
    70 => "10111101111011110011011011100101", 
    71 => "00111100100001111000100111001011", 
    72 => "10111011100001001001000000000111", 
    73 => "10111101010011100100111001010011", 
    74 => "10111101000000000101101100101101", 
    75 => "00111110000001101100101110110101", 
    76 => "10111101100101111010110000000101", 
    77 => "00111100101100010111001110011100", 
    78 => "10111101101110000110110111110101", 
    79 => "10111101111110001101010011101100", 
    80 => "00111100101000010101101101111010", 
    81 => "00111001001011100111011101101000", 
    82 => "10111100010010111011000010100011", 
    83 => "00111011110011110000011000111011", 
    84 => "00111101000010010101111100010100", 
    85 => "00111100100110111111001100001101", 
    86 => "00111110000001000111001001110000", 
    87 => "10111101010101101110110100111000", 
    88 => "00111110001011011001110110011000", 
    89 => "10111101100010010001110110101101", 
    90 => "10111101100010111110001101001110", 
    91 => "00111101101111101010011100011010", 
    92 => "10111110000110001101110110110110", 
    93 => "10111101110010011101001100111111", 
    94 => "10111101000000000111010011100011", 
    95 => "10111110001010110111010011010001", 
    96 => "00111101000111000111111011111000", 
    97 => "10111110000000001101111000100100", 
    98 => "00111101101101111001001000100101", 
    99 => "10111110000011110110100111100001", 
    100 => "10111110001001101010001110101010", 
    101 => "00111100110001001011011100001110", 
    102 => "10111101000101101101110111010000", 
    103 => "10111101101110001011110101101011", 
    104 => "00111110011010111010010100110011", 
    105 => "00111101011100001100011100011100", 
    106 => "10111101001000101100110011110011", 
    107 => "10111101110100100011001110110011", 
    108 => "10111100000111000110100111110011", 
    109 => "00111110000111000100010100111101", 
    110 => "00111101101001010000110100100100", 
    111 => "10111101111010001110111100101011", 
    112 => "10111110011101001000110100110011", 
    113 => "10111110100011010111011011001010", 
    114 => "00111110000101001101101100110001", 
    115 => "10111110000011110111000100000100", 
    116 => "10111101111111010110010011100110", 
    117 => "00111101111110100111110010011011", 
    118 => "00111101101101011101000011111111", 
    119 => "10111110001110010010110100011110", 
    120 => "00111101100010111100010101010000", 
    121 => "10111101000010011101101010001000", 
    122 => "00111101101010011010100111100100", 
    123 => "00111100000100100101110011010010", 
    124 => "00111101101111010100000101111000", 
    125 => "00111100011101011010001010010110", 
    126 => "00111101110111000101100110100101", 
    127 => "10111011100010101101111101010000", 
    128 => "00111101010000000101111110000110", 
    129 => "10111101111111011111000101100011", 
    130 => "10111110100011110101011011011111", 
    131 => "10111101011111011011101110000100", 
    132 => "00111101101110100001001110110110", 
    133 => "10111101001001000100001101010010", 
    134 => "10111100110010100100001110101111", 
    135 => "10111011110100111110111100011010", 
    136 => "00111100100001101010000011110101", 
    137 => "10111101010100101100100111011001", 
    138 => "10111110000001001110000110010001", 
    139 => "10111100011100101001111111001011", 
    140 => "10111101101001101101110010011110", 
    141 => "00111100000110100010000011010010", 
    142 => "00111110000000101010010111111110", 
    143 => "10111100011011001110000010010101", 
    144 => "10111101010010010111001000101001", 
    145 => "00111100111001101101101100011010", 
    146 => "10111110001101101011101100001001", 
    147 => "10111101101010100011110110101111", 
    148 => "10111101001100001101101101001000", 
    149 => "00111101110110110110000111010010", 
    150 => "10111101010100011110011101111100", 
    151 => "00111101001000100101001100001001", 
    152 => "10111101010100010111001011000011", 
    153 => "10111101100001101011100001011100", 
    154 => "10111101010000001001001010110100", 
    155 => "00111101110001011011110101111111", 
    156 => "10111101110000000101111111001000", 
    157 => "10111100110011001001000001011111", 
    158 => "00111101000000010010111010110101", 
    159 => "10111101100110110010110001000110", 
    160 => "00111101011111010100111001011101", 
    161 => "00111011111111100011001011110000", 
    162 => "10111101101010111100010011011010", 
    163 => "10111110001011010111110110000100", 
    164 => "10111101110101100100100101101010", 
    165 => "00111110001101001000100111011000", 
    166 => "10111101000000110010100100000010", 
    167 => "00111100111011011001100000101001", 
    168 => "00111110000001111110110000101010", 
    169 => "10111101111101100011110011001101", 
    170 => "00111101011010101101111000000001", 
    171 => "10111101111011000111000010011000", 
    172 => "00111101100101000111011000110011", 
    173 => "10111110001000010001001110100101", 
    174 => "10111101101111100000011110001011", 
    175 => "00111101110001010101011101011001", 
    176 => "10111100111010010111011001001000", 
    177 => "00111101100100101111000110011010", 
    178 => "10111101100111011100010101000011", 
    179 => "00111101100001000100111001000000", 
    180 => "00111110000111110110100101100001", 
    181 => "00111101000001110110010011110010", 
    182 => "10111100111100001000101000100100", 
    183 => "10111110101001101100001110101110", 
    184 => "10111101110011110111110001010011", 
    185 => "10111011110000101101110110000001", 
    186 => "00111101101101010110101001110101", 
    187 => "00111101110010111011101011000110", 
    188 => "10111101110100010101000000100111", 
    189 => "10111110001000101101110100111100", 
    190 => "00111101000110010110010000011011", 
    191 => "00111100110001000100100000101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibOq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibOq is
    component conv_2_conv_2_weibOq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibOq_rom_U :  component conv_2_conv_2_weibOq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


