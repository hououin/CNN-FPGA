-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibhl_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibhl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101111110101000000101101", 
    1 => "00111101110001111100000100100001", 
    2 => "00111110001011011010111110010010", 
    3 => "00111100110101100111000100110011", 
    4 => "00111101101000011000010100101000", 
    5 => "10111100011110111010010001111110", 
    6 => "00111100100110101001000001010010", 
    7 => "00111101110000100000101001110110", 
    8 => "10111110000001110100100011000100", 
    9 => "00111100100110100110100100011110", 
    10 => "00111100000010110111100010010101", 
    11 => "00111101100100100101110111010011", 
    12 => "00111101110101101010000110010101", 
    13 => "00111101100011110100010111001110", 
    14 => "10111101101010110100010011101010", 
    15 => "10111110000011000001100111100010", 
    16 => "00111101110011011101101011001101", 
    17 => "10111101001001110000001101001001", 
    18 => "00111011000110000101111000111110", 
    19 => "10111110011100111101010011110101", 
    20 => "00111100110011111101110011010100", 
    21 => "10111101110101000010011011011011", 
    22 => "10111101110110100100010000111000", 
    23 => "00111101011000011000000100000011", 
    24 => "10111110000110100110110001011110", 
    25 => "10111101010001101100100100100110", 
    26 => "10111110001000101000100010100000", 
    27 => "10111101101110011110111110100101", 
    28 => "00111101111001111000111101110001", 
    29 => "10111101001000011101111110011101", 
    30 => "00111110011000001100010110011010", 
    31 => "10111110001010101001001000000001", 
    32 => "10111101101100110100110001100111", 
    33 => "10111101011010100111000101101101", 
    34 => "10111101100100100110000010111011", 
    35 => "10111101100000111101011010100110", 
    36 => "10111101111110101001011111000101", 
    37 => "00111101100110010110011101101100", 
    38 => "00111101101100100101100000111101", 
    39 => "00111100011010101101111100101100", 
    40 => "10111110100110010011000010110000", 
    41 => "10111110000010101001000100010101", 
    42 => "10111011101100100101010101100100", 
    43 => "10111101100001101011101011111101", 
    44 => "00111101001000001011100101000000", 
    45 => "00111100000001101101000000000101", 
    46 => "10111101110100101011011111101111", 
    47 => "10111101110100100000010100001100", 
    48 => "00111100100000100010101000001001", 
    49 => "10111101000111101010001011000100", 
    50 => "10111101001100000101111110110011", 
    51 => "00111101110001001000110001111110", 
    52 => "10111101101101001101010010001111", 
    53 => "10111110011000111001011011101011", 
    54 => "10111110100100111011000001010111", 
    55 => "10111101001001010111010101111100", 
    56 => "10111101010100000000011101111100", 
    57 => "00111100101011010100001100001010", 
    58 => "10111110000000110010100000001101", 
    59 => "10111100000111111010101101010011", 
    60 => "10111110010010110010111101010101", 
    61 => "10111101111110101110100001101010", 
    62 => "00111110010000010000111011111001", 
    63 => "10111101000110100000100011011000", 
    64 => "10111110000011101001010011110010", 
    65 => "00111101010111110011101111011110", 
    66 => "10111100011000010110001010110111", 
    67 => "00111110000101010011011001111011", 
    68 => "00111101010110100000000000001001", 
    69 => "00111101110001010101010010010110", 
    70 => "00111101000110111101000100110011", 
    71 => "00111101111101101100100111001111", 
    72 => "10111110010110101111111110101010", 
    73 => "00111101110101001001111110100110", 
    74 => "00111110000010110100110101110101", 
    75 => "00111101000111110001100011010110", 
    76 => "00111101110101010110000110000111", 
    77 => "10111101110111011110111111101001", 
    78 => "10111101101010100100111011001001", 
    79 => "10111101101000011000010110100101", 
    80 => "10111100101001100111011000111011", 
    81 => "10111100001111001000011010101010", 
    82 => "10111110000111010100000010010010", 
    83 => "00111110000010111000100101110011", 
    84 => "00111011011100101011001111011110", 
    85 => "00111100100011010101001000001010", 
    86 => "10111110000001100100111111000010", 
    87 => "10111100101100010111110000110010", 
    88 => "10111101001000011011110100110011", 
    89 => "00111100100000110011111100100101", 
    90 => "00111101110000101000111001000001", 
    91 => "10111110011011110101011100111000", 
    92 => "10111101110100101101010011011100", 
    93 => "10111101010000010000100101001110", 
    94 => "00111101111001011011100000101110", 
    95 => "00111101110101011000110100111011", 
    96 => "00111110000110010011100011001110", 
    97 => "00111101011010100100101110100110", 
    98 => "10111011111100110011011100111011", 
    99 => "10111110000000001100010000110110", 
    100 => "10111101000001101111010001011011", 
    101 => "10111100100100010111111100110000", 
    102 => "00111101111000101101110000111000", 
    103 => "10111110000101011111001010000110", 
    104 => "10111110000011001011000010000110", 
    105 => "00111101000001001101111001111011", 
    106 => "00111101111100000010000000100011", 
    107 => "10111100100010010110011000101110", 
    108 => "00111110000011100101110110001010", 
    109 => "00111110001000111110110100101011", 
    110 => "00111101111101100110010111011110", 
    111 => "00111110010000011011101001110001", 
    112 => "00111110010001000101001011000100", 
    113 => "10111110000111011001010101001010", 
    114 => "00111101011100001110111001100111", 
    115 => "10111100110001010010000011000110", 
    116 => "00111011000100010011100101011000", 
    117 => "00111101010000010111101101001100", 
    118 => "10111101001001010011011011110001", 
    119 => "00111101011101010000101111111100", 
    120 => "10111101011001000110111101111111", 
    121 => "00111101100001000001110100001101", 
    122 => "00111101001110000110110101101111", 
    123 => "10111011101010000100011000111100", 
    124 => "10111110000000101010100011111010", 
    125 => "10111101101010110110011110010111", 
    126 => "10111101010000000011101111001100", 
    127 => "00111101101001011111000001101100", 
    128 => "00111101101000101011000000010100", 
    129 => "10111110100000111001101110001010", 
    130 => "10111110100100101100110001111000", 
    131 => "00111100101110100000110011100110", 
    132 => "10111100000110010000100101101010", 
    133 => "00111100000101000010100010000100", 
    134 => "00111110001011110001001011100010", 
    135 => "10111101001101111011111011111000", 
    136 => "00111011010001100000111001001011", 
    137 => "10111100101001100100010111101000", 
    138 => "00111101000011111100000010011011", 
    139 => "10111100111110100100000001001100", 
    140 => "00111110001100000011010100101000", 
    141 => "10111101110001001100101011000101", 
    142 => "00111110000000100111011001000011", 
    143 => "00111101111000110011111110110111", 
    144 => "00111101000111110111110010110010", 
    145 => "10111100000110001110111110101010", 
    146 => "00111100010010000011101011110100", 
    147 => "00111101101101001010000010110001", 
    148 => "10111110010111010100001110110010", 
    149 => "10111110001111010011100011001011", 
    150 => "10111101100011111111110010111110", 
    151 => "00111101010011111000010000111001", 
    152 => "00111100110111100001010001110111", 
    153 => "00111110001100001100001111110100", 
    154 => "00111101101000101011101000011010", 
    155 => "10111100111011001110100011101101", 
    156 => "10111100100111000001101100000011", 
    157 => "10111101110111010110011000100110", 
    158 => "10111110000000110001101011110011", 
    159 => "00111101111010110111000100001011", 
    160 => "00111101101001000000100110010111", 
    161 => "00111101100101110010000001101110", 
    162 => "00111101111000101111000111000011", 
    163 => "10111101011000010011000110001011", 
    164 => "10111011101000000111000001110101", 
    165 => "10111110100011100011000110000011", 
    166 => "00111101010100000011010001010101", 
    167 => "00111011111110010010010001110110", 
    168 => "10111110001101011100111000100111", 
    169 => "00111110010000010011001001001000", 
    170 => "00111100111110111000100101111000", 
    171 => "00111110010110011001101011000000", 
    172 => "10111110010001111110011000010110", 
    173 => "00111100100011001000111000101101", 
    174 => "10111101000011011000011000010000", 
    175 => "10111100110000010000111101111000", 
    176 => "10111011110011001100011110001110", 
    177 => "10111101011011001001100010101111", 
    178 => "00111101100101100001111100100010", 
    179 => "10111110001111110001000011101111", 
    180 => "00111100011110110111101000110101", 
    181 => "10111101001110011010011000101100", 
    182 => "10111100001100000110100010000000", 
    183 => "00111110010010110001100010100101", 
    184 => "00111101100010101001111010011010", 
    185 => "10111110000111011100111100001110", 
    186 => "00111110001000001111000000100000", 
    187 => "10111101101111101001101000010101", 
    188 => "00111101100011100111011000100110", 
    189 => "00111110100001011100110101101101", 
    190 => "10111110001100000010010100001010", 
    191 => "10111101101010000110001000000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibhl is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibhl is
    component conv_2_conv_2_weibhl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibhl_rom_U :  component conv_2_conv_2_weibhl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


