-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibJp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibJp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001100001101101001101", 
    1 => "10111110010001101111100001111101", 
    2 => "10111101010001001000101001110101", 
    3 => "10111101101010010011111000101100", 
    4 => "00111100110111111111111011101000", 
    5 => "00111110000101000110101101000010", 
    6 => "00111110000011110011111101100001", 
    7 => "10111101100110011111100000110100", 
    8 => "00111011101001000011101110100111", 
    9 => "00111101110001010111000010100011", 
    10 => "00111011110101011011010101100110", 
    11 => "00111110011001100100010001001111", 
    12 => "10111101101010101011001111001011", 
    13 => "00111101100000100101011100001011", 
    14 => "00111011001100100011011111000011", 
    15 => "00111101101001100110010001101100", 
    16 => "10111100011001000011010110011010", 
    17 => "00111101110000100010010101010011", 
    18 => "00111100000110000100000110111101", 
    19 => "00111101111000111011010110101010", 
    20 => "10111110001011011101110000000110", 
    21 => "00111101100110011100010110000011", 
    22 => "00111101111001101100010001110001", 
    23 => "10111101011101110101100110111111", 
    24 => "00111110001010010000011100101100", 
    25 => "10111101100000001001011011001000", 
    26 => "10111101100101000101110000100001", 
    27 => "10111100100010110000111100100111", 
    28 => "10111101010000001010011101101100", 
    29 => "00111101001010011101011000011010", 
    30 => "10111101100000000001011011110100", 
    31 => "10111110100110001001001000100011", 
    32 => "00111101111001110110011010001101", 
    33 => "10111110010100101010001111001101", 
    34 => "00111101110110011110111100001111", 
    35 => "10111110001100000100111101010011", 
    36 => "10111110100011000001111011000000", 
    37 => "10111110000110110000011001110000", 
    38 => "00111100110101100110110110110101", 
    39 => "10111101000010110001011010001001", 
    40 => "00111101110001000111011110110111", 
    41 => "00111101100011110111101101011001", 
    42 => "10111100101110110010111100101010", 
    43 => "10111100100010010101111001110010", 
    44 => "00111101111111110110111101110001", 
    45 => "10111101101110101111110000011000", 
    46 => "00111101010101011100111000100011", 
    47 => "00111100100001111011100111010001", 
    48 => "00111101010111101101000111000100", 
    49 => "10111110100101101111010100010010", 
    50 => "00111101110101010000010011100000", 
    51 => "10111101111110111101110011010101", 
    52 => "10111101101100100011100011000100", 
    53 => "10111100110110100000111011111111", 
    54 => "00111101110100110101010111100100", 
    55 => "10111101110101001000001010000000", 
    56 => "00111101101001011101001100111110", 
    57 => "00111110000010101110111000111010", 
    58 => "00111101000111100000011101010110", 
    59 => "00111110000000101100100100110001", 
    60 => "00111100011111010101001001111001", 
    61 => "10111101101100100101101110101111", 
    62 => "00111100110011111101000001111100", 
    63 => "10111101111010111010000111111100", 
    64 => "00111101100010000110110100100111", 
    65 => "10111101101111001100000101110101", 
    66 => "10111110001110011101010011011000", 
    67 => "00111101111001010000000100011100", 
    68 => "10111101110011010110111010011001", 
    69 => "10111110001011010101011111010101", 
    70 => "00111101010111100010111011000110", 
    71 => "10111100000101111011101011001010", 
    72 => "00111101100011110010101111011111", 
    73 => "10111101010010000101101110000011", 
    74 => "10111110000001000100000111011010", 
    75 => "10111110000100001000011000010010", 
    76 => "00111011011011111110110000011001", 
    77 => "10111101110010101011100111011010", 
    78 => "00111110001010100000001001110100", 
    79 => "00111101100111011111110100010010", 
    80 => "10111101100110111110110010001011", 
    81 => "00111100101000100001110000011000", 
    82 => "10111110000100111000001000110100", 
    83 => "00111101001001011010111011110110", 
    84 => "10111011100010100100101001001010", 
    85 => "10111010111001111000000000101100", 
    86 => "00111101110111000001101101010011", 
    87 => "10111101111010011101110101000100", 
    88 => "00111101000011010101111010100100", 
    89 => "10111101010100110001011000000111", 
    90 => "10111101110000011000101100100101", 
    91 => "00111110010001001001010001000001", 
    92 => "00111100010011111000110101011100", 
    93 => "10111100001010110011001000100110", 
    94 => "10111101111111010101010011000110", 
    95 => "00111101011000010011101000100110", 
    96 => "10111100010101111001101001001010", 
    97 => "10111101100010100100001011011101", 
    98 => "00111100111010010000011100110111", 
    99 => "10111110011000010110011010011011", 
    100 => "10111110001000110010001001011110", 
    101 => "00111101101110010000111001111011", 
    102 => "00111101011011100101000011111010", 
    103 => "10111110000010001101010101101101", 
    104 => "00111110010000001101111000010011", 
    105 => "10111101100010100010110100001010", 
    106 => "00111101101111010111110011100001", 
    107 => "00111101001001101101111001010101", 
    108 => "00111110000011001010101110110011", 
    109 => "10111110000110000001111100000111", 
    110 => "10111100101101000111101110110010", 
    111 => "00111110000010011101010101011011", 
    112 => "00111101101001000100001101100001", 
    113 => "10111100010111010100010110011100", 
    114 => "00111010011011100010010000101100", 
    115 => "00111100100111110111000111111010", 
    116 => "00111101101100111101000011100011", 
    117 => "00111101110111111010111111101011", 
    118 => "00111101001010000100000000111001", 
    119 => "10111110110010110001000100010101", 
    120 => "10111100110001110001011110011101", 
    121 => "10111110000110100100011111111100", 
    122 => "00111100111100110011000101000001", 
    123 => "10111101100111011010011010000000", 
    124 => "10111101100000010011000010111101", 
    125 => "10111101010100000001001101001011", 
    126 => "00111101111011011110101110111000", 
    127 => "10111101001111000110000011101001", 
    128 => "10111101101111101000010011101100", 
    129 => "10111101101010111001001110111000", 
    130 => "10111110010101100000001011100110", 
    131 => "10111101101100001101101111000011", 
    132 => "10111101100111110101100000011100", 
    133 => "10111101111110100001100011000011", 
    134 => "00111110000010011101000111001110", 
    135 => "00111110000001010111001010011111", 
    136 => "00111110001001111100101111011010", 
    137 => "10111110010001100010110001000011", 
    138 => "10111100101100010011001110100001", 
    139 => "10111110001110000000010100001110", 
    140 => "00111101010100000110101111000100", 
    141 => "00111110000011011011000010010001", 
    142 => "00111110010001011101101101010001", 
    143 => "10111110000001110010000100010000", 
    144 => "10111101111001011100101000111011", 
    145 => "00111101011011100011010001011100", 
    146 => "10111101101101001010001111011011", 
    147 => "10111100000110101000001001000111", 
    148 => "10111011101101111101110101111000", 
    149 => "10111110000100001001110010000011", 
    150 => "10111101001011110010011011011100", 
    151 => "10111100111010100000011000010001", 
    152 => "00111110010100110101001111101010", 
    153 => "00111100111011011100100010101000", 
    154 => "10111110011011001000010100101101", 
    155 => "00111101101010010101101110001000", 
    156 => "00111101001001110110010000001011", 
    157 => "10111101001011001011111110001011", 
    158 => "10111110001010111111000101011001", 
    159 => "00111101011110110111101101101010", 
    160 => "10111101011100110110111010100001", 
    161 => "00111101001001011011000010111000", 
    162 => "10111110101111010011111110100110", 
    163 => "10111110101010111011110100001100", 
    164 => "10111101010011101001100011100010", 
    165 => "00111101111100000110010000001011", 
    166 => "00111100001101010111010011101101", 
    167 => "00111101110100001101101011010101", 
    168 => "00111100110010000101101001110010", 
    169 => "00111101001101110011000011110111", 
    170 => "10111100011001111011011100010011", 
    171 => "00111101101101010110011001111011", 
    172 => "10111101100101011011110010110010", 
    173 => "10111100000001111101011110011101", 
    174 => "00111110010111001001000100010001", 
    175 => "00111101111111111101011110010110", 
    176 => "10111101110101101101100001010000", 
    177 => "00111110001010100010101111000110", 
    178 => "00111110010011010000101011101001", 
    179 => "10111101110101010100000011100011", 
    180 => "00111110001010010100000010000100", 
    181 => "10111110000001110101011101110101", 
    182 => "10111100111111110010010000110010", 
    183 => "10111110000001011110100100111011", 
    184 => "10111001111110110010001001100100", 
    185 => "10111100011001111011100111110010", 
    186 => "10111101110011101100100110010101", 
    187 => "00111101011110001010101010000101", 
    188 => "00111011101000111001100011111010", 
    189 => "00111101100000010111101100111100", 
    190 => "10111110001010110100001100110101", 
    191 => "10111100100101111100111110101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibJp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibJp is
    component conv_2_conv_2_weibJp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibJp_rom_U :  component conv_2_conv_2_weibJp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


