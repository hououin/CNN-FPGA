-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce0 : OUT STD_LOGIC;
    input_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_0_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_0_ce1 : OUT STD_LOGIC;
    input_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv15_5480 : STD_LOGIC_VECTOR (14 downto 0) := "101010010000000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv11_340 : STD_LOGIC_VECTOR (10 downto 0) := "01101000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_1_weights_0_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_0_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_0_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_0_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_1_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_1_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_0_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_1_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_1_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_weights_2_2_0_ce0 : STD_LOGIC;
    signal conv_1_weights_2_2_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal conv_1_bias_ce0 : STD_LOGIC;
    signal conv_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten30_reg_326 : STD_LOGIC_VECTOR (14 downto 0);
    signal r_0_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_348 : STD_LOGIC_VECTOR (10 downto 0);
    signal c_0_reg_359 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_0_reg_370 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state13_pp0_stage1_iter2 : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter3 : BOOLEAN;
    signal ap_block_state23_pp0_stage1_iter4 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal icmp_ln8_reg_922 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_state14_pp0_stage2_iter2 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter3 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_state15_pp0_stage3_iter2 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter3 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state6_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state16_pp0_stage4_iter2 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter3 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_390_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_419 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_425 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_reg_922_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_386_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln8_reg_922_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln8_reg_922_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_reg_922_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln8_fu_469_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln8_reg_926 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln35_10_fu_489_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_10_reg_931 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_10_reg_931_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_10_reg_931_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_10_reg_931_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_10_reg_931_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln26_fu_521_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_reg_937 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_11_fu_533_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_11_reg_942 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_fu_549_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln35_reg_948 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_15_fu_601_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_15_reg_954 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_15_reg_954_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_15_reg_954_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_15_reg_954_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_15_reg_954_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln35_16_fu_609_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_16_reg_960 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_16_reg_960_pp0_iter1_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_16_reg_960_pp0_iter2_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_16_reg_960_pp0_iter3_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_16_reg_960_pp0_iter4_reg : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln35_15_fu_617_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_15_reg_966 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_16_fu_646_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_16_reg_977 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_18_fu_667_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_18_reg_988 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln26_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_993 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_993_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_993_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln11_fu_694_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln11_reg_1043 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_fu_724_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_1_reg_1048 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_17_fu_740_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_17_reg_1059 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_1_weights_0_2_0_2_reg_1080 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_0_0_2_reg_1085 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_1_0_2_reg_1090 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_1_2_0_2_reg_1095 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_0_0_2_reg_1100 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_1_0_2_reg_1105 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_weights_2_2_0_2_reg_1110 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln26_14_fu_781_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_14_reg_1115 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_18_fu_795_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_18_reg_1125 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_22_fu_809_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_22_reg_1135 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_397_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_0_1_reg_1140 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_reg_1155 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_1_reg_1165 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_1_reg_1165_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_2_reg_1170 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_1_2_reg_1170_pp0_iter1_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal f_fu_826_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_reg_1175 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_2_reg_1180 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_reg_1180_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_1_reg_1185 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_1_reg_1185_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_1_reg_1185_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_2_reg_1190 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_2_reg_1190_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_2_2_reg_1190_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_4_1_1_reg_1195 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_1_bias_load_reg_1205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_phi_mux_indvar_flatten30_phi_fu_330_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_341_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_352_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_phi_mux_c_0_phi_fu_363_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_f_0_phi_fu_374_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln26_108_fu_627_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_111_fu_656_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_109_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln26_113_fu_748_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_112_fu_790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln26_114_fu_804_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln26_fu_814_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal sext_ln26_1_fu_818_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_115_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln35_19_fu_857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_381_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_381_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_386_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_390_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_397_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln11_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_445_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_10_fu_497_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_509_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_102_fu_505_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_103_fu_517_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_fu_527_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_12_fu_541_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_451_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_3_fu_457_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln14_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln35_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_fu_481_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln35_fu_583_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln35_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_11_fu_589_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_12_fu_621_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_15_fu_632_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_13_fu_555_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_17_fu_638_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln26_16_fu_650_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_19_fu_661_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln35_14_fu_563_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln11_fu_688_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_702_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_713_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_104_fu_709_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_105_fu_720_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_13_fu_730_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_20_fu_743_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_fu_753_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_29_fu_764_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln26_106_fu_760_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_107_fu_771_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln26_2_fu_775_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_17_fu_786_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln26_21_fu_800_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_913_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_14_fu_837_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln26_110_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln35_18_fu_848_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln35_7_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln34_fu_862_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_866_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln34_fu_876_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln34_2_fu_886_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_892_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln34_fu_898_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_913_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_913_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_913_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_913_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_913_p20 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fadd_32ns_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_6nncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_1_conv_1_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weicud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weidEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weig8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weihbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weiibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_weijbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1_conv_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_1_weights_0_0_0_U : component conv_1_conv_1_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_0_0_address0,
        ce0 => conv_1_weights_0_0_0_ce0,
        q0 => conv_1_weights_0_0_0_q0);

    conv_1_weights_0_1_0_U : component conv_1_conv_1_weicud
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_1_0_address0,
        ce0 => conv_1_weights_0_1_0_ce0,
        q0 => conv_1_weights_0_1_0_q0);

    conv_1_weights_0_2_0_U : component conv_1_conv_1_weidEe
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_0_2_0_address0,
        ce0 => conv_1_weights_0_2_0_ce0,
        q0 => conv_1_weights_0_2_0_q0);

    conv_1_weights_1_0_0_U : component conv_1_conv_1_weieOg
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_0_0_address0,
        ce0 => conv_1_weights_1_0_0_ce0,
        q0 => conv_1_weights_1_0_0_q0);

    conv_1_weights_1_1_0_U : component conv_1_conv_1_weifYi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_1_0_address0,
        ce0 => conv_1_weights_1_1_0_ce0,
        q0 => conv_1_weights_1_1_0_q0);

    conv_1_weights_1_2_0_U : component conv_1_conv_1_weig8j
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_1_2_0_address0,
        ce0 => conv_1_weights_1_2_0_ce0,
        q0 => conv_1_weights_1_2_0_q0);

    conv_1_weights_2_0_0_U : component conv_1_conv_1_weihbi
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_0_0_address0,
        ce0 => conv_1_weights_2_0_0_ce0,
        q0 => conv_1_weights_2_0_0_q0);

    conv_1_weights_2_1_0_U : component conv_1_conv_1_weiibs
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_1_0_address0,
        ce0 => conv_1_weights_2_1_0_ce0,
        q0 => conv_1_weights_2_1_0_q0);

    conv_1_weights_2_2_0_U : component conv_1_conv_1_weijbC
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_weights_2_2_0_address0,
        ce0 => conv_1_weights_2_2_0_ce0,
        q0 => conv_1_weights_2_2_0_q0);

    conv_1_bias_U : component conv_1_conv_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 32,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_bias_address0,
        ce0 => conv_1_bias_ce0,
        q0 => conv_1_bias_q0);

    cnn_fadd_32ns_32nkbM_U1 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_381_p0,
        din1 => grp_fu_381_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_381_p2);

    cnn_fadd_32ns_32nkbM_U2 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_386_p0,
        din1 => grp_fu_386_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_386_p2);

    cnn_fmul_32ns_32nlbW_U3 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_390_p0,
        din1 => input_0_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_390_p2);

    cnn_fmul_32ns_32nlbW_U4 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_397_p0,
        din1 => input_0_q1,
        ce => ap_const_logic_1,
        dout => grp_fu_397_p2);

    cnn_fcmp_32ns_32nmb6_U5 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_386_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_s_fu_403_p2);

    cnn_mac_muladd_6nncg_U6 : component cnn_mac_muladd_6nncg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 5,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_913_p0,
        din1 => grp_fu_913_p1,
        din2 => grp_fu_913_p2,
        dout => grp_fu_913_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
                c_0_reg_359 <= select_ln35_16_reg_960;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_359 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    f_0_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
                f_0_reg_370 <= f_reg_1175;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_370 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten30_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
                indvar_flatten30_reg_326 <= add_ln8_reg_926;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten30_reg_326 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
                indvar_flatten_reg_348 <= select_ln11_reg_1043;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_348 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    r_0_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
                r_0_reg_337 <= select_ln35_10_reg_931;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_337 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then
                add_ln26_14_reg_1115 <= add_ln26_14_fu_781_p2;
                add_ln26_18_reg_1125 <= add_ln26_18_fu_795_p2;
                add_ln26_22_reg_1135 <= add_ln26_22_fu_809_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then
                add_ln35_reg_948 <= add_ln35_fu_549_p2;
                select_ln35_11_reg_942 <= select_ln35_11_fu_533_p3;
                select_ln35_15_reg_954 <= select_ln35_15_fu_601_p3;
                select_ln35_18_reg_988 <= select_ln35_18_fu_667_p3;
                    sub_ln26_reg_937(10 downto 2) <= sub_ln26_fu_521_p2(10 downto 2);
                    zext_ln26_reg_993(5 downto 0) <= zext_ln26_fu_675_p1(5 downto 0);
                    zext_ln35_15_reg_966(4 downto 0) <= zext_ln35_15_fu_617_p1(4 downto 0);
                    zext_ln35_16_reg_977(4 downto 0) <= zext_ln35_16_fu_646_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                add_ln8_reg_926 <= add_ln8_fu_469_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_922_pp0_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_bias_load_reg_1205 <= conv_1_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_922 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_1_weights_0_2_0_2_reg_1080 <= conv_1_weights_0_2_0_q0;
                conv_1_weights_1_0_0_2_reg_1085 <= conv_1_weights_1_0_0_q0;
                conv_1_weights_1_1_0_2_reg_1090 <= conv_1_weights_1_1_0_q0;
                conv_1_weights_1_2_0_2_reg_1095 <= conv_1_weights_1_2_0_q0;
                conv_1_weights_2_0_0_2_reg_1100 <= conv_1_weights_2_0_0_q0;
                conv_1_weights_2_1_0_2_reg_1105 <= conv_1_weights_2_1_0_q0;
                conv_1_weights_2_2_0_2_reg_1110 <= conv_1_weights_2_2_0_q0;
                    sub_ln26_1_reg_1048(10 downto 2) <= sub_ln26_1_fu_724_p2(10 downto 2);
                    zext_ln35_17_reg_1059(4 downto 0) <= zext_ln35_17_fu_740_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then
                f_reg_1175 <= f_fu_826_p2;
                tmp_7_1_1_reg_1165 <= grp_fu_390_p2;
                tmp_7_1_2_reg_1170 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln8_reg_922 <= icmp_ln8_fu_463_p2;
                icmp_ln8_reg_922_pp0_iter1_reg <= icmp_ln8_reg_922;
                icmp_ln8_reg_922_pp0_iter2_reg <= icmp_ln8_reg_922_pp0_iter1_reg;
                icmp_ln8_reg_922_pp0_iter3_reg <= icmp_ln8_reg_922_pp0_iter2_reg;
                icmp_ln8_reg_922_pp0_iter4_reg <= icmp_ln8_reg_922_pp0_iter3_reg;
                select_ln35_10_reg_931_pp0_iter1_reg <= select_ln35_10_reg_931;
                select_ln35_10_reg_931_pp0_iter2_reg <= select_ln35_10_reg_931_pp0_iter1_reg;
                select_ln35_10_reg_931_pp0_iter3_reg <= select_ln35_10_reg_931_pp0_iter2_reg;
                select_ln35_10_reg_931_pp0_iter4_reg <= select_ln35_10_reg_931_pp0_iter3_reg;
                select_ln35_15_reg_954_pp0_iter1_reg <= select_ln35_15_reg_954;
                select_ln35_15_reg_954_pp0_iter2_reg <= select_ln35_15_reg_954_pp0_iter1_reg;
                select_ln35_15_reg_954_pp0_iter3_reg <= select_ln35_15_reg_954_pp0_iter2_reg;
                select_ln35_15_reg_954_pp0_iter4_reg <= select_ln35_15_reg_954_pp0_iter3_reg;
                select_ln35_16_reg_960_pp0_iter1_reg <= select_ln35_16_reg_960;
                select_ln35_16_reg_960_pp0_iter2_reg <= select_ln35_16_reg_960_pp0_iter1_reg;
                select_ln35_16_reg_960_pp0_iter3_reg <= select_ln35_16_reg_960_pp0_iter2_reg;
                select_ln35_16_reg_960_pp0_iter4_reg <= select_ln35_16_reg_960_pp0_iter3_reg;
                tmp_7_2_1_reg_1185_pp0_iter2_reg <= tmp_7_2_1_reg_1185;
                tmp_7_2_1_reg_1185_pp0_iter3_reg <= tmp_7_2_1_reg_1185_pp0_iter2_reg;
                tmp_7_2_reg_1180_pp0_iter2_reg <= tmp_7_2_reg_1180;
                    zext_ln26_reg_993_pp0_iter1_reg(5 downto 0) <= zext_ln26_reg_993(5 downto 0);
                    zext_ln26_reg_993_pp0_iter2_reg(5 downto 0) <= zext_ln26_reg_993_pp0_iter1_reg(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0)))) then
                reg_419 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0)))) then
                reg_425 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln8_reg_922_pp0_iter1_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_922_pp0_iter1_reg = ap_const_lv1_0)))) then
                reg_430 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922_pp0_iter2_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_922_pp0_iter2_reg = ap_const_lv1_0)))) then
                reg_435 <= grp_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (icmp_ln8_reg_922_pp0_iter3_reg = ap_const_lv1_0)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_922_pp0_iter3_reg = ap_const_lv1_0)))) then
                reg_440 <= grp_fu_386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln8_fu_463_p2 = ap_const_lv1_0))) then
                select_ln11_reg_1043 <= select_ln11_fu_694_p3;
                select_ln35_10_reg_931 <= select_ln35_10_fu_489_p3;
                select_ln35_16_reg_960 <= select_ln35_16_fu_609_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then
                tmp_7_0_1_reg_1140 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_7_1_1_reg_1165_pp0_iter1_reg <= tmp_7_1_1_reg_1165;
                tmp_7_1_2_reg_1170_pp0_iter1_reg <= tmp_7_1_2_reg_1170;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then
                tmp_7_1_reg_1155 <= grp_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then
                tmp_7_2_1_reg_1185 <= grp_fu_397_p2;
                tmp_7_2_reg_1180 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_922_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_7_2_2_reg_1190 <= grp_fu_390_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                tmp_7_2_2_reg_1190_pp0_iter2_reg <= tmp_7_2_2_reg_1190;
                tmp_7_2_2_reg_1190_pp0_iter3_reg <= tmp_7_2_2_reg_1190_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_922_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                w_sum_4_1_1_reg_1195 <= grp_fu_381_p2;
            end if;
        end if;
    end process;
    sub_ln26_reg_937(1 downto 0) <= "00";
    zext_ln35_15_reg_966(10 downto 5) <= "000000";
    zext_ln35_16_reg_977(10 downto 5) <= "000000";
    zext_ln26_reg_993(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_993_pp0_iter1_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln26_reg_993_pp0_iter2_reg(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    sub_ln26_1_reg_1048(1 downto 0) <= "00";
    zext_ln35_17_reg_1059(10 downto 5) <= "000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter3, icmp_ln8_fu_463_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage1_subdone, ap_enable_reg_pp0_iter4, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln8_fu_463_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    add_ln11_fu_688_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_352_p4));
    add_ln26_11_fu_589_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(select_ln35_fu_481_p3));
    add_ln26_12_fu_621_p2 <= std_logic_vector(unsigned(sub_ln26_fu_521_p2) + unsigned(zext_ln35_15_fu_617_p1));
    add_ln26_13_fu_730_p2 <= std_logic_vector(unsigned(sub_ln26_1_fu_724_p2) + unsigned(zext_ln35_15_reg_966));
    add_ln26_14_fu_781_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_775_p2) + unsigned(zext_ln35_15_reg_966));
    add_ln26_15_fu_632_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(select_ln35_fu_481_p3));
    add_ln26_16_fu_650_p2 <= std_logic_vector(unsigned(sub_ln26_fu_521_p2) + unsigned(zext_ln35_16_fu_646_p1));
    add_ln26_17_fu_786_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_1048) + unsigned(zext_ln35_16_reg_977));
    add_ln26_18_fu_795_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_775_p2) + unsigned(zext_ln35_16_reg_977));
    add_ln26_19_fu_661_p2 <= std_logic_vector(unsigned(ap_const_lv5_3) + unsigned(select_ln35_fu_481_p3));
    add_ln26_20_fu_743_p2 <= std_logic_vector(unsigned(sub_ln26_reg_937) + unsigned(zext_ln35_17_fu_740_p1));
    add_ln26_21_fu_800_p2 <= std_logic_vector(unsigned(sub_ln26_1_reg_1048) + unsigned(zext_ln35_17_reg_1059));
    add_ln26_22_fu_809_p2 <= std_logic_vector(unsigned(sub_ln26_2_fu_775_p2) + unsigned(zext_ln35_17_reg_1059));
    add_ln26_3_fu_457_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_363_p4) + unsigned(ap_const_lv5_2));
    add_ln26_fu_527_p2 <= std_logic_vector(unsigned(ap_const_lv5_2) + unsigned(ap_phi_mux_r_0_phi_fu_341_p4));
    add_ln35_7_fu_851_p2 <= std_logic_vector(unsigned(zext_ln26_110_fu_844_p1) + unsigned(zext_ln35_18_fu_848_p1));
    add_ln35_fu_549_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_341_p4) + unsigned(select_ln35_12_fu_541_p3));
    add_ln8_fu_469_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten30_phi_fu_330_p4) + unsigned(ap_const_lv15_1));
    and_ln34_fu_898_p2 <= (tmp_s_fu_403_p2 and or_ln34_fu_892_p2);
    and_ln35_fu_583_p2 <= (xor_ln35_fu_571_p2 and icmp_ln14_fu_577_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state24 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage4_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage4_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage4_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln8_fu_463_p2)
    begin
        if ((icmp_ln8_fu_463_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state24) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_363_p4_assign_proc : process(c_0_reg_359, icmp_ln8_reg_922, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln35_16_reg_960, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
            ap_phi_mux_c_0_phi_fu_363_p4 <= select_ln35_16_reg_960;
        else 
            ap_phi_mux_c_0_phi_fu_363_p4 <= c_0_reg_359;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_374_p4_assign_proc : process(f_0_reg_370, icmp_ln8_reg_922, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, f_reg_1175, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
            ap_phi_mux_f_0_phi_fu_374_p4 <= f_reg_1175;
        else 
            ap_phi_mux_f_0_phi_fu_374_p4 <= f_0_reg_370;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten30_phi_fu_330_p4_assign_proc : process(indvar_flatten30_reg_326, icmp_ln8_reg_922, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, add_ln8_reg_926, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten30_phi_fu_330_p4 <= add_ln8_reg_926;
        else 
            ap_phi_mux_indvar_flatten30_phi_fu_330_p4 <= indvar_flatten30_reg_326;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_352_p4_assign_proc : process(indvar_flatten_reg_348, icmp_ln8_reg_922, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln11_reg_1043, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_352_p4 <= select_ln11_reg_1043;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_352_p4 <= indvar_flatten_reg_348;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_341_p4_assign_proc : process(r_0_reg_337, icmp_ln8_reg_922, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, select_ln35_10_reg_931, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln8_reg_922 = ap_const_lv1_0))) then 
            ap_phi_mux_r_0_phi_fu_341_p4 <= select_ln35_10_reg_931;
        else 
            ap_phi_mux_r_0_phi_fu_341_p4 <= r_0_reg_337;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln34_fu_862_p1 <= grp_fu_386_p2;
    c_fu_451_p2 <= std_logic_vector(unsigned(ap_phi_mux_c_0_phi_fu_363_p4) + unsigned(ap_const_lv5_1));
    conv_1_bias_address0 <= zext_ln26_reg_993_pp0_iter2_reg(5 - 1 downto 0);

    conv_1_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_1_bias_ce0 <= ap_const_logic_1;
        else 
            conv_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_0_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_0_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_1_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_0_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_0_2_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_0_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_0_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_0_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_1_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_1_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_1_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_1_2_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_1_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_1_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_0_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_2_0_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_1_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_2_1_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_1_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_1_weights_2_2_0_address0 <= zext_ln26_fu_675_p1(5 - 1 downto 0);

    conv_1_weights_2_2_0_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_1;
        else 
            conv_1_weights_2_2_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= zext_ln35_19_fu_857_p1(15 - 1 downto 0);

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_386_p2 when (and_ln34_fu_898_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln8_reg_922_pp0_iter4_reg, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln8_reg_922_pp0_iter4_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_826_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(select_ln35_15_reg_954));

    grp_fu_381_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_fu_390_p2, reg_425, reg_430, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_381_p0 <= reg_430;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_381_p0 <= reg_425;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_381_p0 <= grp_fu_390_p2;
        else 
            grp_fu_381_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_381_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, reg_419, ap_enable_reg_pp0_iter2, tmp_7_0_1_reg_1140, tmp_7_1_reg_1155, tmp_7_1_1_reg_1165_pp0_iter1_reg, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_381_p1 <= tmp_7_1_1_reg_1165_pp0_iter1_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_381_p1 <= tmp_7_1_reg_1155;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_381_p1 <= reg_419;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_381_p1 <= tmp_7_0_1_reg_1140;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_381_p1 <= ap_const_lv32_0;
        else 
            grp_fu_381_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_386_p0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, reg_435, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, reg_440, w_sum_4_1_1_reg_1195, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_fu_386_p0 <= reg_440;
        elsif ((((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_386_p0 <= reg_435;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_386_p0 <= w_sum_4_1_1_reg_1195;
        else 
            grp_fu_386_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_386_p1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, tmp_7_1_2_reg_1170_pp0_iter1_reg, tmp_7_2_reg_1180_pp0_iter2_reg, tmp_7_2_1_reg_1185_pp0_iter3_reg, tmp_7_2_2_reg_1190_pp0_iter3_reg, conv_1_bias_load_reg_1205, ap_enable_reg_pp0_iter4, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_386_p1 <= conv_1_bias_load_reg_1205;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_386_p1 <= tmp_7_2_2_reg_1190_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_386_p1 <= tmp_7_2_1_reg_1185_pp0_iter3_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_386_p1 <= tmp_7_2_reg_1180_pp0_iter2_reg;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_386_p1 <= tmp_7_1_2_reg_1170_pp0_iter1_reg;
        else 
            grp_fu_386_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_390_p0_assign_proc : process(conv_1_weights_0_0_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv_1_weights_0_2_0_2_reg_1080, conv_1_weights_1_1_0_2_reg_1090, conv_1_weights_2_0_0_2_reg_1100, conv_1_weights_2_2_0_2_reg_1110, ap_block_pp0_stage0, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_390_p0 <= conv_1_weights_2_2_0_2_reg_1110;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_390_p0 <= conv_1_weights_2_0_0_2_reg_1100;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_390_p0 <= conv_1_weights_1_1_0_2_reg_1090;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_390_p0 <= conv_1_weights_0_2_0_2_reg_1080;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_390_p0 <= conv_1_weights_0_0_0_q0;
        else 
            grp_fu_390_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_397_p0_assign_proc : process(conv_1_weights_0_1_0_q0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, conv_1_weights_1_0_0_2_reg_1085, conv_1_weights_1_2_0_2_reg_1095, conv_1_weights_2_1_0_2_reg_1105, ap_block_pp0_stage1, ap_block_pp0_stage2, ap_block_pp0_stage3, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                grp_fu_397_p0 <= conv_1_weights_2_1_0_2_reg_1105;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                grp_fu_397_p0 <= conv_1_weights_1_2_0_2_reg_1095;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                grp_fu_397_p0 <= conv_1_weights_1_0_0_2_reg_1085;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                grp_fu_397_p0 <= conv_1_weights_0_1_0_q0;
            else 
                grp_fu_397_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_397_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_913_p0 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_913_p1 <= grp_fu_913_p10(5 - 1 downto 0);
    grp_fu_913_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_10_reg_931_pp0_iter4_reg),10));
    grp_fu_913_p2 <= grp_fu_913_p20(5 - 1 downto 0);
    grp_fu_913_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_16_reg_960_pp0_iter4_reg),10));
    icmp_ln11_fu_475_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_352_p4 = ap_const_lv11_340) else "0";
    icmp_ln14_fu_577_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_374_p4 = ap_const_lv6_20) else "0";
    icmp_ln34_2_fu_886_p2 <= "1" when (trunc_ln34_fu_876_p1 = ap_const_lv23_0) else "0";
    icmp_ln34_fu_880_p2 <= "0" when (tmp_fu_866_p4 = ap_const_lv8_FF) else "1";
    icmp_ln8_fu_463_p2 <= "1" when (ap_phi_mux_indvar_flatten30_phi_fu_330_p4 = ap_const_lv15_5480) else "0";

    input_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_108_fu_627_p1, ap_block_pp0_stage1, zext_ln26_113_fu_748_p1, zext_ln26_112_fu_790_p1, ap_block_pp0_stage2, sext_ln26_fu_814_p1, ap_block_pp0_stage3, zext_ln26_115_fu_822_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                input_0_address0 <= zext_ln26_115_fu_822_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_0_address0 <= sext_ln26_fu_814_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_0_address0 <= zext_ln26_112_fu_790_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_0_address0 <= zext_ln26_113_fu_748_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_0_address0 <= zext_ln26_108_fu_627_p1(10 - 1 downto 0);
            else 
                input_0_address0 <= "XXXXXXXXXX";
            end if;
        else 
            input_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_0_address1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, zext_ln26_111_fu_656_p1, zext_ln26_109_fu_735_p1, ap_block_pp0_stage1, ap_block_pp0_stage2, zext_ln26_114_fu_804_p1, ap_block_pp0_stage3, sext_ln26_1_fu_818_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                input_0_address1 <= sext_ln26_1_fu_818_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                input_0_address1 <= zext_ln26_114_fu_804_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                input_0_address1 <= zext_ln26_109_fu_735_p1(10 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                input_0_address1 <= zext_ln26_111_fu_656_p1(10 - 1 downto 0);
            else 
                input_0_address1 <= "XXXXXXXXXX";
            end if;
        else 
            input_0_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    input_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_0_ce0 <= ap_const_logic_1;
        else 
            input_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_0_ce1_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            input_0_ce1 <= ap_const_logic_1;
        else 
            input_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln34_fu_892_p2 <= (icmp_ln34_fu_880_p2 or icmp_ln34_2_fu_886_p2);
    or_ln35_fu_595_p2 <= (icmp_ln11_fu_475_p2 or and_ln35_fu_583_p2);
    r_fu_445_p2 <= std_logic_vector(unsigned(ap_phi_mux_r_0_phi_fu_341_p4) + unsigned(ap_const_lv5_1));
    select_ln11_fu_694_p3 <= 
        ap_const_lv11_1 when (icmp_ln11_fu_475_p2(0) = '1') else 
        add_ln11_fu_688_p2;
    select_ln35_10_fu_489_p3 <= 
        r_fu_445_p2 when (icmp_ln11_fu_475_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_341_p4;
    select_ln35_11_fu_533_p3 <= 
        add_ln26_fu_527_p2 when (icmp_ln11_fu_475_p2(0) = '1') else 
        r_fu_445_p2;
    select_ln35_12_fu_541_p3 <= 
        ap_const_lv5_3 when (icmp_ln11_fu_475_p2(0) = '1') else 
        ap_const_lv5_2;
    select_ln35_13_fu_555_p3 <= 
        ap_const_lv5_1 when (icmp_ln11_fu_475_p2(0) = '1') else 
        c_fu_451_p2;
    select_ln35_14_fu_563_p3 <= 
        ap_const_lv5_2 when (icmp_ln11_fu_475_p2(0) = '1') else 
        add_ln26_3_fu_457_p2;
    select_ln35_15_fu_601_p3 <= 
        ap_const_lv6_0 when (or_ln35_fu_595_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_374_p4;
    select_ln35_16_fu_609_p3 <= 
        add_ln26_11_fu_589_p2 when (and_ln35_fu_583_p2(0) = '1') else 
        select_ln35_fu_481_p3;
    select_ln35_17_fu_638_p3 <= 
        add_ln26_15_fu_632_p2 when (and_ln35_fu_583_p2(0) = '1') else 
        select_ln35_13_fu_555_p3;
    select_ln35_18_fu_667_p3 <= 
        add_ln26_19_fu_661_p2 when (and_ln35_fu_583_p2(0) = '1') else 
        select_ln35_14_fu_563_p3;
    select_ln35_fu_481_p3 <= 
        ap_const_lv5_0 when (icmp_ln11_fu_475_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_363_p4;
        sext_ln26_1_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_18_reg_1125),64));

        sext_ln26_fu_814_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln26_14_reg_1115),64));

    sub_ln26_1_fu_724_p2 <= std_logic_vector(unsigned(zext_ln26_104_fu_709_p1) - unsigned(zext_ln26_105_fu_720_p1));
    sub_ln26_2_fu_775_p2 <= std_logic_vector(unsigned(zext_ln26_106_fu_760_p1) - unsigned(zext_ln26_107_fu_771_p1));
    sub_ln26_fu_521_p2 <= std_logic_vector(unsigned(zext_ln26_102_fu_505_p1) - unsigned(zext_ln26_103_fu_517_p1));
    tmp_10_fu_497_p3 <= (select_ln35_10_fu_489_p3 & ap_const_lv5_0);
    tmp_11_fu_509_p3 <= (select_ln35_10_fu_489_p3 & ap_const_lv2_0);
    tmp_12_fu_702_p3 <= (select_ln35_11_reg_942 & ap_const_lv5_0);
    tmp_13_fu_713_p3 <= (select_ln35_11_reg_942 & ap_const_lv2_0);
    tmp_14_fu_837_p3 <= (grp_fu_913_p3 & ap_const_lv5_0);
    tmp_28_fu_753_p3 <= (add_ln35_reg_948 & ap_const_lv5_0);
    tmp_29_fu_764_p3 <= (add_ln35_reg_948 & ap_const_lv2_0);
    tmp_fu_866_p4 <= bitcast_ln34_fu_862_p1(30 downto 23);
    trunc_ln34_fu_876_p1 <= bitcast_ln34_fu_862_p1(23 - 1 downto 0);
    xor_ln35_fu_571_p2 <= (icmp_ln11_fu_475_p2 xor ap_const_lv1_1);
    zext_ln26_102_fu_505_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_497_p3),11));
    zext_ln26_103_fu_517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_509_p3),11));
    zext_ln26_104_fu_709_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_702_p3),11));
    zext_ln26_105_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_713_p3),11));
    zext_ln26_106_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_753_p3),11));
    zext_ln26_107_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_764_p3),11));
    zext_ln26_108_fu_627_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_12_fu_621_p2),64));
    zext_ln26_109_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_13_fu_730_p2),64));
    zext_ln26_110_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_837_p3),16));
    zext_ln26_111_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_16_fu_650_p2),64));
    zext_ln26_112_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_17_fu_786_p2),64));
    zext_ln26_113_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_20_fu_743_p2),64));
    zext_ln26_114_fu_804_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_21_fu_800_p2),64));
    zext_ln26_115_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_22_reg_1135),64));
    zext_ln26_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_15_fu_601_p3),64));
    zext_ln35_15_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_16_fu_609_p3),11));
    zext_ln35_16_fu_646_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_17_fu_638_p3),11));
    zext_ln35_17_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_18_reg_988),11));
    zext_ln35_18_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_15_reg_954_pp0_iter4_reg),16));
    zext_ln35_19_fu_857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_7_fu_851_p2),64));
end behav;
