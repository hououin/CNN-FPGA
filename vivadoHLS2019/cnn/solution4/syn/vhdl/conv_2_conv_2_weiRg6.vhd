-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiRg6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiRg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010010001100110100110", 
    1 => "10111101111010001010001111100011", 
    2 => "00111110000000011111100010111001", 
    3 => "10111101100000111110001100110011", 
    4 => "10111101000011101101101111000100", 
    5 => "10111101001011100100100101100010", 
    6 => "00111101000000110111111000111011", 
    7 => "10111101100001100011111110011001", 
    8 => "00111101100011001001110010000100", 
    9 => "10111100111110000101011001110001", 
    10 => "00111101101000110010110011101111", 
    11 => "00111011110001011110001001100000", 
    12 => "10111100110110000110011011010011", 
    13 => "10111110010111000011111111010101", 
    14 => "10111101010100001001000001010111", 
    15 => "00111100100110000001001001010111", 
    16 => "10111101010100101001110010111111", 
    17 => "10111110000101001001010010100010", 
    18 => "10111101110011110101110101101010", 
    19 => "10111101001011101011001101010101", 
    20 => "10111100100011101101001000011001", 
    21 => "10111110100111100101000110010011", 
    22 => "10111101100001100101110010000110", 
    23 => "10111101010011101000100101000000", 
    24 => "10111100100101111100110011010111", 
    25 => "10111011010011100001011110001011", 
    26 => "10111101101100011010111001011100", 
    27 => "00111101010010100110100110010011", 
    28 => "10111110011001110010111110101101", 
    29 => "00111110000001010011001011100111", 
    30 => "10111100000000101101011011100111", 
    31 => "10111110001111010001100001110011", 
    32 => "00111101001001111110101110000101", 
    33 => "10111110010010110011110110110010", 
    34 => "10111100101011011011101111011110", 
    35 => "00111110010001000010011111000111", 
    36 => "10111110000010010100110010011010", 
    37 => "00111100110011011100100010011101", 
    38 => "10111101101110011011011110010010", 
    39 => "00111101100010100000010000011110", 
    40 => "00111101101011100110110000010101", 
    41 => "00111101101111110111001110101101", 
    42 => "10111110000001111011101001001110", 
    43 => "10111101100011110101010111000010", 
    44 => "00111010001111000101000100001001", 
    45 => "00111101101100001000011011100001", 
    46 => "00111101101011111111011111101001", 
    47 => "00111101110010110000000010011000", 
    48 => "00111100100011011110000111100111", 
    49 => "10111110011001101001111101001101", 
    50 => "00111101101100100100110000111000", 
    51 => "00111110000000010010011110001000", 
    52 => "10111110011110110010100000010100", 
    53 => "00111100110010011011100100101001", 
    54 => "00111110000100110001101101001011", 
    55 => "10111101100001011111001101011010", 
    56 => "10111101111101011101100011010111", 
    57 => "00111011010101110101000111001110", 
    58 => "00111100001111101001011001110000", 
    59 => "00111101010011010001001111010001", 
    60 => "00111101110000101110010110110110", 
    61 => "10111101010010100010111111001100", 
    62 => "10111101110000000110010100111001", 
    63 => "00111011111110111001101000100011", 
    64 => "10111011010100001000001110111010", 
    65 => "10111100000101111100011000010110", 
    66 => "00111101111011100111100000010111", 
    67 => "10111101011011000011000000100111", 
    68 => "10111101101010001110001111010001", 
    69 => "00111100101000101100000010000110", 
    70 => "10111101101111110011011010011000", 
    71 => "10111100001011111000000101101100", 
    72 => "10111101001101110000100000000111", 
    73 => "00111100010011111100001001001111", 
    74 => "10111100111101000011111010101111", 
    75 => "10111100111101101010001101101100", 
    76 => "00111100000101000110000000011000", 
    77 => "10111110000110010001100010101011", 
    78 => "10111100101101001011000100000011", 
    79 => "10111101000011111100000101010010", 
    80 => "10111101110011010111101000100010", 
    81 => "00111101001101100111100101110101", 
    82 => "10111101011111101111011010110110", 
    83 => "00111101101101000100100011100111", 
    84 => "10111110001001000100010010000101", 
    85 => "10111110011100111000101101010010", 
    86 => "00111100001000100001100111100011", 
    87 => "10111100011010101101010010011010", 
    88 => "00111101000111110010011111100010", 
    89 => "00111100100110110100111001000001", 
    90 => "10111101100110011011101010111000", 
    91 => "10111110001101100100010000110011", 
    92 => "00111101001011101010001101010000", 
    93 => "00111101001111001010101010000101", 
    94 => "10111101110010000001110000100111", 
    95 => "00111100101000111110101001000111", 
    96 => "10111100011100000110011011101101", 
    97 => "10111101000110001101100001101111", 
    98 => "00111101011001101101010100101101", 
    99 => "00111101110000101001101100110110", 
    100 => "10111101010001010000001101000011", 
    101 => "10111011000001011101101111000100", 
    102 => "10111110000101111000000101101110", 
    103 => "00111101011001110010100010011011", 
    104 => "00111101101000011111010001111000", 
    105 => "00111011001111101001110000011011", 
    106 => "10111100011010010011001111100011", 
    107 => "10111101110000110011010101001000", 
    108 => "00111101100010001000000100001101", 
    109 => "10111011100100001110100001111111", 
    110 => "10111100010010000000111110110001", 
    111 => "10111101110000010001010100100000", 
    112 => "00111101101011001101111110100111", 
    113 => "10111110000001110010101000100101", 
    114 => "10111100101010100110110110111101", 
    115 => "00111101010110101111010011011110", 
    116 => "10111110010110011010110111111100", 
    117 => "10111110010010011101001110110000", 
    118 => "00111101110100001000101010010111", 
    119 => "10111110000100011100011001000001", 
    120 => "10111101101011101010000001111100", 
    121 => "00111110000000100000001011101010", 
    122 => "10111100101010110000011000101000", 
    123 => "00111101010111011111100111001000", 
    124 => "10111101101010110001001101111011", 
    125 => "00111100011010110011010011010100", 
    126 => "10111101110111001001011000001111", 
    127 => "10111101010101111011100010001011", 
    128 => "00111100101000100100010101011101", 
    129 => "00111101001100111101110111001111", 
    130 => "00111101111111001000001100000010", 
    131 => "00111101010010111100000100000010", 
    132 => "10111100101111110010001000010111", 
    133 => "10111101110111010101100010100000", 
    134 => "10111110001110010111010010110000", 
    135 => "00111101100010000011011010011101", 
    136 => "00111101010100001000010001011011", 
    137 => "00111100011110111111111010000111", 
    138 => "10111110000100010101001111011110", 
    139 => "10111110100011011100010010001010", 
    140 => "10111100101111110001101111011100", 
    141 => "00111101011011011111001000011111", 
    142 => "10111101100111000001101101001100", 
    143 => "00111101110000101000111110010001", 
    144 => "10111100011011101110100011110011", 
    145 => "00111100110000111011110101010110", 
    146 => "10111100111101011001110001111111", 
    147 => "10111101100010110101000000000001", 
    148 => "10111110100010001111000010101011", 
    149 => "10111101010100100011100100001111", 
    150 => "00111101110001010101000100010011", 
    151 => "10111110011101000001101101111000", 
    152 => "00111100011010001110000111011110", 
    153 => "10111101000111001110010011010100", 
    154 => "00111100011101110011100101000000", 
    155 => "10111110011111010011010001101011", 
    156 => "10111101000000011110000001101000", 
    157 => "00111101111001110001011111100010", 
    158 => "10111110001100101110010111000001", 
    159 => "00111101010001001100101110011010", 
    160 => "10111110100100111000001101111011", 
    161 => "00111110010011000010010010000110", 
    162 => "10111101101101111010001111100001", 
    163 => "10111101010011000010001010110100", 
    164 => "00111101001000001111000011100111", 
    165 => "10111101110100000000011110101001", 
    166 => "10111101110011101111110111010011", 
    167 => "00111100110001100111000110011100", 
    168 => "10111101110000110001001001000100", 
    169 => "00111100111010001001111101101010", 
    170 => "00111101111001100111011101110100", 
    171 => "00111101001000111000010001110011", 
    172 => "00111100000111111101010111110110", 
    173 => "10111110100000110000110110011100", 
    174 => "10111110001011111111000111010010", 
    175 => "10111110001110111010110101001001", 
    176 => "00111100001001100000001001110110", 
    177 => "00111101010101100110110100100011", 
    178 => "10111101100001110001100101010011", 
    179 => "10111100100101111110000110010011", 
    180 => "00111100110110101101110111111110", 
    181 => "10111110000100011111001111110100", 
    182 => "10111011111100100000101011010101", 
    183 => "00111101111000100100010001100010", 
    184 => "00111100111101101011010111010001", 
    185 => "00111100000111101111001000001111", 
    186 => "10111110001101110000110101011011", 
    187 => "00111101011001011000001001000101", 
    188 => "00111101001111101010110101011111", 
    189 => "00111101110001101110000101101101", 
    190 => "00111100100101000100101110101001", 
    191 => "10111100010011011101010000101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiRg6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiRg6 is
    component conv_2_conv_2_weiRg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiRg6_rom_U :  component conv_2_conv_2_weiRg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


