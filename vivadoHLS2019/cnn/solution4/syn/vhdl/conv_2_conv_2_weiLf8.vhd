-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiLf8_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiLf8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111011000000010100011010", 
    1 => "00111100011001111000100111011111", 
    2 => "00111011111010001111110101111111", 
    3 => "10111101010010010010101100101100", 
    4 => "00111110010010000010010110100110", 
    5 => "00111101100011001011101010011110", 
    6 => "00111110000101010011000101001101", 
    7 => "10111100101000110000000000011011", 
    8 => "00111101100001011011011101100101", 
    9 => "10111101100111001011100100111101", 
    10 => "10111101110000000111111110101101", 
    11 => "00111110000011011110101000111011", 
    12 => "00111110011110001010101100001011", 
    13 => "00111110000010000110011101010010", 
    14 => "00111011111000101110001101100001", 
    15 => "10111101101111000110001011101111", 
    16 => "00111101111111110001011000001001", 
    17 => "00111101000011100001101101110111", 
    18 => "00111101000111001010111000100101", 
    19 => "10111110001001101110000011111101", 
    20 => "00111101101110001011110001000100", 
    21 => "10111101010001100111000011011110", 
    22 => "00111101010011101100010001010100", 
    23 => "00111100111011110001110001001010", 
    24 => "10111101010101001110000100010101", 
    25 => "10111110100100101001111000000111", 
    26 => "10111110000101010000100000111110", 
    27 => "00111101001100101110100101110011", 
    28 => "10111101101110100011001001111100", 
    29 => "00111101010100000000001101111101", 
    30 => "00111101100011011101110001000101", 
    31 => "10111110100000110000010001111110", 
    32 => "00111000111010011001010000110100", 
    33 => "00111101010110100100111110010001", 
    34 => "00111101011011000000100001001011", 
    35 => "00111101000101101111000101010111", 
    36 => "10111110010001101001111001001100", 
    37 => "00111101110010101010110110000100", 
    38 => "00111101100001111111101000100011", 
    39 => "00111100111011011011111100011111", 
    40 => "10111010001110001110011011101000", 
    41 => "10111110100000000101010000001011", 
    42 => "00111011001100101010100101100010", 
    43 => "10111101110110011111111111001001", 
    44 => "10111101111101100011000000101101", 
    45 => "10111001110001111111001011011101", 
    46 => "00111101101000110011000111010100", 
    47 => "10111101100100011111000000000110", 
    48 => "00111101110110100011111001100110", 
    49 => "10111110101000000111000100010011", 
    50 => "00111110000000000111110011010011", 
    51 => "00111110001100101111111100000001", 
    52 => "00111100101001100001110001100100", 
    53 => "00111100001000111100011110100000", 
    54 => "00111011101000101011111100101000", 
    55 => "00111101101100110111011111011111", 
    56 => "00111100100000000000001101110101", 
    57 => "10111101110100100010010101111111", 
    58 => "10111110000100110101110100100100", 
    59 => "00111110000000110101000100000001", 
    60 => "00111100110111010011000111010100", 
    61 => "10111110010110001101100100110100", 
    62 => "10111101101110111100100010101100", 
    63 => "10111101111001000110111101001000", 
    64 => "10111110000100100111000001011100", 
    65 => "10111011011110100011010011100011", 
    66 => "00111100101111001111000000010100", 
    67 => "00111101010100110001010101110100", 
    68 => "00111101100000011000111000000110", 
    69 => "10111011011110001011011011111110", 
    70 => "00111110000110110010101001100011", 
    71 => "10111100100011000111000011111101", 
    72 => "00111010111100011011110100101001", 
    73 => "00111101110000010101100001111010", 
    74 => "00111100110111001011100111001101", 
    75 => "00111101101000010111110101001011", 
    76 => "00111110001011010110110000110010", 
    77 => "00111100001010101100010000110110", 
    78 => "10111011101100111001101000011000", 
    79 => "10111101010100100101100110100000", 
    80 => "10111101101110000100011111111101", 
    81 => "00111101011000100110000110110110", 
    82 => "10111110011101001000010101111001", 
    83 => "00111101101110010100111101011110", 
    84 => "00111101110011010011100100110010", 
    85 => "00111100011000101111101010001000", 
    86 => "10111101101110010111100101101100", 
    87 => "00111011110100001101100111011010", 
    88 => "00111101010111101000000110011000", 
    89 => "10111100010010001011000011010011", 
    90 => "00111101100110101000101111010011", 
    91 => "10111110001111101011100111110000", 
    92 => "10111110100010111001001010111001", 
    93 => "00111101100110111000000000111110", 
    94 => "00111100001011110100101101010000", 
    95 => "10111100101011100110011100001000", 
    96 => "00111011000100101000001111110001", 
    97 => "10111110010101110100011001110011", 
    98 => "00111110000110011000111111010111", 
    99 => "00111101110000100011101000111101", 
    100 => "10111101101100001111001111111011", 
    101 => "00111110000101111110111000101110", 
    102 => "00111101101001011011000001100001", 
    103 => "10111100111110111000010111010001", 
    104 => "00111001111010010110000011110000", 
    105 => "00111110000100000010011100010110", 
    106 => "00111100110001111010001101100010", 
    107 => "00111101100110110001001011011101", 
    108 => "10111101001011000101010111011000", 
    109 => "00111110010101110100110000010101", 
    110 => "00111101111110011011010100110100", 
    111 => "00111101000011000101000111110101", 
    112 => "00111101111100001001111001110111", 
    113 => "10111110100011101101001000111111", 
    114 => "00111110000100010100101110001101", 
    115 => "00111110000100011010111001111100", 
    116 => "10111110001111001110100100000011", 
    117 => "00111101101100100101101111010011", 
    118 => "10111101101111011101011011010011", 
    119 => "10111110010000001110011001101000", 
    120 => "10111101010101000111011101010111", 
    121 => "00111101110001010010110000011101", 
    122 => "10111110011100010100001010110011", 
    123 => "00111100110001111110010100000010", 
    124 => "00111101110111101110100000100101", 
    125 => "10111110001001010000111001011111", 
    126 => "00111101001111110001011111000011", 
    127 => "00111011000111000101011100101001", 
    128 => "00111101110010000000110011101101", 
    129 => "10111101111100000110100101110011", 
    130 => "10111101000011010010001110101011", 
    131 => "10111101100010101001100001011011", 
    132 => "00111101111011101001010110100100", 
    133 => "00111101100011111000100010101101", 
    134 => "00111101101000001011100100101011", 
    135 => "10111101101110100101101100101110", 
    136 => "10111010101001010000010010111001", 
    137 => "00111101100101010011010110010111", 
    138 => "00111101011100001110011110110111", 
    139 => "10111101110100001110010101111010", 
    140 => "00111110000000100110111101001010", 
    141 => "10111101001011111000101101111001", 
    142 => "10111101010110100101000100011111", 
    143 => "00111110000111101101101111110010", 
    144 => "10111110000101110110100101011101", 
    145 => "00111100101001101001011010011000", 
    146 => "10111101001111001000001000000001", 
    147 => "10111101000011100001110011101010", 
    148 => "10111110111001101101110110111011", 
    149 => "00111101011100001111010010000001", 
    150 => "10111110000111111111001001100000", 
    151 => "00111101001000010111001101000101", 
    152 => "00111110000011100001011001110000", 
    153 => "00111100111000110110011111100111", 
    154 => "00111110001010100010010010000101", 
    155 => "10111110011011100111000111001011", 
    156 => "10111101110110001010110001101001", 
    157 => "10111011001101000101111001000100", 
    158 => "10111110011011100010110111101101", 
    159 => "00111101001111111010100011010001", 
    160 => "10111101101001001011110000001100", 
    161 => "00111101100101000111001010110100", 
    162 => "00111101111110111101100011100100", 
    163 => "10111101111001110011001111011011", 
    164 => "10111101000011110111100100000111", 
    165 => "00111100001001001100101110000001", 
    166 => "10111101110100000010001011000010", 
    167 => "00111011110001101000000100111011", 
    168 => "10111110100010111001010010100100", 
    169 => "00111101011111110110011000100100", 
    170 => "00111101111010011001100011011110", 
    171 => "00111101101110100110101010110000", 
    172 => "10111110100001110011110110001111", 
    173 => "10111101111110011000101011100100", 
    174 => "10111100000110100010011110101111", 
    175 => "10111100011010110011110010100000", 
    176 => "10111110010001110110001100100111", 
    177 => "10111101101001001001010110001111", 
    178 => "00111110010010101001100101001110", 
    179 => "00111101110100101110110010010110", 
    180 => "10111101101110111100010010010010", 
    181 => "10111101100010001010101110011001", 
    182 => "10111110011000100101001101110011", 
    183 => "00111100001101001100000010110111", 
    184 => "10111100100111001000111101011000", 
    185 => "10111100010010110100111011010101", 
    186 => "10111110001000011110100000100110", 
    187 => "10111100001011001011001011011111", 
    188 => "00111101011010000001010100110100", 
    189 => "00111101010111111100001001101100", 
    190 => "00111100110011111101010000111001", 
    191 => "00111101100101100011011011000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiLf8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiLf8 is
    component conv_2_conv_2_weiLf8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiLf8_rom_U :  component conv_2_conv_2_weiLf8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


