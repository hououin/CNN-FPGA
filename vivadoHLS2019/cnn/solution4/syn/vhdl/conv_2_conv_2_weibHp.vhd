-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibHp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibHp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100000011010001110010", 
    1 => "00111100101111100000111100010000", 
    2 => "10111110001100100001111100111110", 
    3 => "10111101010010011000001101110100", 
    4 => "00111101111101110110000000001101", 
    5 => "10111101110111001101000010010000", 
    6 => "10111110000001111111111111001110", 
    7 => "00111110011000100011111110011110", 
    8 => "10111110000000101001100000111001", 
    9 => "00111100100101110010000011101111", 
    10 => "10111110000101101110011100011000", 
    11 => "00111100000101101110110100000000", 
    12 => "10111101111001000101001110000101", 
    13 => "10111101110110111000111111111011", 
    14 => "10111100010011000001011101011000", 
    15 => "10111101010110111010111001100000", 
    16 => "10111011001111110111000000101001", 
    17 => "10111110000010001100010000101001", 
    18 => "10111101111010101011110010110110", 
    19 => "00111110000010111011010101100010", 
    20 => "10111110111010101010000100111010", 
    21 => "10111101110010110110101111110010", 
    22 => "10111110001000110001101110001011", 
    23 => "10111110100101000000110101101110", 
    24 => "10111101110001110100110011110110", 
    25 => "10111110001101110101001001101000", 
    26 => "10111101000000111001010011101111", 
    27 => "10111101000001100100011001011001", 
    28 => "10111011001111011011000101111011", 
    29 => "00111110011111001100100010000001", 
    30 => "00111101101110010101011110111001", 
    31 => "00111110000110010000010101110011", 
    32 => "10111101010110110101101001101100", 
    33 => "10111110100100000000100001001001", 
    34 => "10111110000011010000010110110101", 
    35 => "00111101100110000110110111101000", 
    36 => "10111110010101101100100010000011", 
    37 => "00111101000010100011000100010101", 
    38 => "00111110010101101011110100011101", 
    39 => "00111110101000001001000000110011", 
    40 => "10111110101101110001010110111010", 
    41 => "10111110000100001010111101011100", 
    42 => "10111101101001111101011011000101", 
    43 => "10111110000001010000011110011100", 
    44 => "00111110010010001001101010111100", 
    45 => "10111110110101000010010010111101", 
    46 => "10111110100000001100001001100010", 
    47 => "10111100101010001111001101010001", 
    48 => "00111110001101111010010111010010", 
    49 => "10111100101110001101011101001111", 
    50 => "10111110010101010101101001100110", 
    51 => "00111110010001011000110111100010", 
    52 => "00111101001101001000101100100001", 
    53 => "10111110111010000110111011001100", 
    54 => "00111101110000011001011010100010", 
    55 => "10111110000001010111111100000101", 
    56 => "10111101101001110111111001110110", 
    57 => "00111110000011000010001010001001", 
    58 => "10111110001100101100100000111000", 
    59 => "00111110000011010100011010010111", 
    60 => "10111101101010101001000111011010", 
    61 => "00111101100111111010011011110011", 
    62 => "00111101110110010101100111110100", 
    63 => "00111110100010001001101101010011", 
    64 => "10111101111101011001010111011011", 
    65 => "00111101111101000000000011100011", 
    66 => "00111100111001001001000001111010", 
    67 => "00111101111010000010101001011000", 
    68 => "00111101111101011000101110101010", 
    69 => "10111110100000011101011111001001", 
    70 => "00111110100000111010111000011001", 
    71 => "10111110000001011000101110101001", 
    72 => "10111100100111110000011100101010", 
    73 => "00111101000000011010011111001101", 
    74 => "00111101001001100000010111101001", 
    75 => "10111110101111011110111011010010", 
    76 => "00111110000100001010111100000100", 
    77 => "10111100010100110101001111000110", 
    78 => "00111101110000001010100111000110", 
    79 => "10111100100010000111001101000000", 
    80 => "00111100100101001110110100011010", 
    81 => "10111101100101100111001011011101", 
    82 => "10111100010001011000110111100000", 
    83 => "10111101101010110011010010100001", 
    84 => "10111110101001110001111010110001", 
    85 => "00111110000000010110010000100101", 
    86 => "10111101110110111001111101111110", 
    87 => "00111101001000001111111101111000", 
    88 => "10111101001001100100010110111001", 
    89 => "00111110001000000000100111000100", 
    90 => "10111101110111010010011010100000", 
    91 => "10111100110010001011110000101100", 
    92 => "00111110011110010101101101110001", 
    93 => "10111101111000010100001001101111", 
    94 => "10111101101010010100010000111001", 
    95 => "00111110100001101101001111010101", 
    96 => "00111011101000101000011100000101", 
    97 => "00111101100011001110111001010100", 
    98 => "10111110010111110010000100101100", 
    99 => "10111110000010001100101100011110", 
    100 => "00111110100001101011011011010101", 
    101 => "10111110100111100111100110000111", 
    102 => "00111110101000110100100110110010", 
    103 => "00111101111011101111011000000101", 
    104 => "10111110101000101000001100101110", 
    105 => "00111101110001000011100011010010", 
    106 => "00111101110001100110100001011101", 
    107 => "00111101100110100010111001000010", 
    108 => "10111100101000010010111110011101", 
    109 => "10111110011111110110000101101101", 
    110 => "00111110001111001010011011001010", 
    111 => "00111110100000110100101000011010", 
    112 => "00111110001110011000101011001110", 
    113 => "00111110010111100100100000000011", 
    114 => "10111101010000001100010100000100", 
    115 => "00111110001100110111010001010100", 
    116 => "00111101011101001111011000001110", 
    117 => "10111110100110111011011100110000", 
    118 => "10111101101111101000001101111111", 
    119 => "00111101101110101000101001001010", 
    120 => "00111101000100110010000010100010", 
    121 => "10111100100011011001111110011110", 
    122 => "10111101101110101100000111110010", 
    123 => "10111110101001110010101000000100", 
    124 => "00111011010010011100001001110000", 
    125 => "10111110010000001111000011010001", 
    126 => "10111101000010111001010010101110", 
    127 => "10111100000110101100110000110010", 
    128 => "10111110010110010010111011010101", 
    129 => "10111100010111100110000011010001", 
    130 => "10111101100110000000100010110001", 
    131 => "10111101111110010000100000101010", 
    132 => "00111110010011100110110101101100", 
    133 => "10111110101001110110111000110111", 
    134 => "00111110001010111111101000101000", 
    135 => "10111110010101010111101110001001", 
    136 => "10111100111111110011101000000111", 
    137 => "10111110011110100110010010100001", 
    138 => "10111110101001000101111011110110", 
    139 => "10111110001010111101000101110101", 
    140 => "00111110000010001010111010000100", 
    141 => "00111110100001101011100111010100", 
    142 => "10111100111101101000111001111101", 
    143 => "00111100100110010111000111100000", 
    144 => "00111101101110000111001011000001", 
    145 => "10111101101110000001101001010110", 
    146 => "00111101110101010011010101001111", 
    147 => "00111110010001100010101010010101", 
    148 => "00111100000011010011000111000011", 
    149 => "00111110100000011101111101110110", 
    150 => "00111110001001000100101011010111", 
    151 => "00111110010001011001010011001101", 
    152 => "00111110000110110100000000100100", 
    153 => "00111101011010001011001001110100", 
    154 => "10111110011011010000011010111001", 
    155 => "10111110000111100110100001110000", 
    156 => "00111101111011001011101100010100", 
    157 => "10111100110011010111101001000000", 
    158 => "10111110000110000010101010000110", 
    159 => "00111101111100001000011110101000", 
    160 => "10111110001111000011111000001110", 
    161 => "00111110010001111111001100111000", 
    162 => "10111110110110110001110000001001", 
    163 => "10111110011111100011001101100000", 
    164 => "00111110101111000011111011111111", 
    165 => "10111110000100111110111110111011", 
    166 => "00111110010011010010101111000111", 
    167 => "10111101011110000011010100011010", 
    168 => "10111101100111000010100100100110", 
    169 => "00111110100000101010101101110110", 
    170 => "10111110001010010100110001001100", 
    171 => "00111100111001001101101101001101", 
    172 => "10111110001001000110000010010100", 
    173 => "10111110001011010111100011011000", 
    174 => "00111101101100100101100110011000", 
    175 => "00111100110011011011101101000001", 
    176 => "10111011110101001100000001100001", 
    177 => "00111101000111101000100100110100", 
    178 => "00111110001101000100100111110000", 
    179 => "10111110001010100100010011101101", 
    180 => "10111110001110010101110001111110", 
    181 => "00111101011010110111011010001110", 
    182 => "10111101000000010110100001110101", 
    183 => "00111110110000000010001100111010", 
    184 => "10111101010100000011011110110010", 
    185 => "10111101110101111000011001010000", 
    186 => "00111101011000010110011000001111", 
    187 => "10111110111111100110100000100010", 
    188 => "00111110000011101011000000110001", 
    189 => "00111110001000000010110111011101", 
    190 => "10111110011010101010100111000110", 
    191 => "10111101110001011101010011001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibHp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibHp is
    component conv_2_conv_2_weibHp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibHp_rom_U :  component conv_2_conv_2_weibHp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


