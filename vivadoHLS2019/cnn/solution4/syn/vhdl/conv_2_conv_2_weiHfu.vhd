-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiHfu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010010101111110100111", 
    1 => "00111101000111001011100011010100", 
    2 => "00111110000010010111000111000001", 
    3 => "00111100100111101110101110100001", 
    4 => "00111101011111100010100001010100", 
    5 => "00111101110011000100100110101100", 
    6 => "00111011010101000010110111010010", 
    7 => "00111101000110111110000100000011", 
    8 => "10111101100111100100111100111101", 
    9 => "00111101101001001110000000100110", 
    10 => "10111101110000000010110001110110", 
    11 => "00111101101101110001001100000000", 
    12 => "10111110000001100000011101111010", 
    13 => "10111101111111000000011011000011", 
    14 => "10111100001110010101111111110111", 
    15 => "10111100110000101010111010101000", 
    16 => "00111011111110011011011011000100", 
    17 => "10111101101111010001111111111101", 
    18 => "10111100111111010001001000000000", 
    19 => "10111100101111000011011011110010", 
    20 => "10111101000010011000001001111011", 
    21 => "10111110010011100101101100111110", 
    22 => "10111110010100110101001110110101", 
    23 => "00111101101100110001111010001101", 
    24 => "10111101110011000101111101111110", 
    25 => "00111110001110110110100111010001", 
    26 => "10111101000000011110001101001100", 
    27 => "10111101101010010111100011111010", 
    28 => "00111101010011101100000010010110", 
    29 => "00111100011111011001001110001010", 
    30 => "10111110011001010100111001011100", 
    31 => "00111100110010101000110011001001", 
    32 => "10111100000111000000101001001110", 
    33 => "10111101111000011100000111010101", 
    34 => "00111101110101101001001011001100", 
    35 => "00111110001100000100111001000111", 
    36 => "00111101101010100100101111011001", 
    37 => "00111100101101101100010011100110", 
    38 => "10111101011001111010001100000000", 
    39 => "00111101100001001001000111010111", 
    40 => "10111110010100101010110010011011", 
    41 => "00111010100000001010111110011101", 
    42 => "00111101101011111001001110011011", 
    43 => "00111101001000110001011000010010", 
    44 => "10111100001110001100111101011100", 
    45 => "10111100100000001000110000110001", 
    46 => "10111101010010111001111100001010", 
    47 => "10111101001111000000110011010000", 
    48 => "00111101111010010011101000110100", 
    49 => "10111101110001011011100011011100", 
    50 => "10111011110101111101000101101011", 
    51 => "10111101100001011011000000010010", 
    52 => "10111110010000111010011100001110", 
    53 => "00111101110011011000010110100100", 
    54 => "00111101001001001101111001110010", 
    55 => "10111110100000010100110101110000", 
    56 => "10111100101001000000011100011011", 
    57 => "00111101110011001101011111001011", 
    58 => "10111110000000111110010100001110", 
    59 => "10111110000110111000110111110101", 
    60 => "10111101110001111011010010011100", 
    61 => "10111100011001101100111010101111", 
    62 => "00111110000110000111101010110000", 
    63 => "10111101011100000000110011010100", 
    64 => "00111101001111111011001100110000", 
    65 => "00111101110111000111101100110010", 
    66 => "00111011111011000100110111110111", 
    67 => "00111101000001010001100100000001", 
    68 => "10111101100111001110100011001110", 
    69 => "10111101111110010001110011011010", 
    70 => "10111101100011110010100101001100", 
    71 => "10111101100010000000000110100011", 
    72 => "10111101001010010011110001101001", 
    73 => "10111100010011101111101110101010", 
    74 => "10111110010001011011011100001011", 
    75 => "10111110000100001100010000110111", 
    76 => "10111101110001111010101101110110", 
    77 => "10111101100111000000000111100001", 
    78 => "10111110000100110111011101111011", 
    79 => "10111101001010111110110010011111", 
    80 => "00111101001011110001101011101001", 
    81 => "10111101001011110001011000101110", 
    82 => "00111101100011111110100011000101", 
    83 => "00111100100010010001011000001101", 
    84 => "10111110101101000000101011011101", 
    85 => "10111110001111101010111011110000", 
    86 => "10111011101100111110010011110000", 
    87 => "10111101011101010110101100100001", 
    88 => "00111100111101010100000000110100", 
    89 => "10111101110000000001011010111010", 
    90 => "10111101010101010001011111111101", 
    91 => "10111110011100011011111001001001", 
    92 => "00111101100000111101001001000110", 
    93 => "10111101101101001011110110011010", 
    94 => "10111110000110001111101011010000", 
    95 => "00111101110101110000010100110100", 
    96 => "10111101101110111100110101111101", 
    97 => "00111101111101100110000001110001", 
    98 => "10111101101011111011101000101111", 
    99 => "10111101000011100110011100001111", 
    100 => "00111100100101010001011101110001", 
    101 => "10111100101111100110101010100011", 
    102 => "10111101100110101111010000011010", 
    103 => "10111101110000010000001011010010", 
    104 => "00111101000000010000010001110001", 
    105 => "00111101001011101100001011000010", 
    106 => "00111110001110011100000110100011", 
    107 => "10111101001000100010110111010001", 
    108 => "10111101110011101011101100110101", 
    109 => "10111101111011001000001011110101", 
    110 => "10111110000001011010010011001110", 
    111 => "10111110100000100101001010000011", 
    112 => "00111101100100111000010001111111", 
    113 => "10111110000000111111000100110010", 
    114 => "10111101110001100110111111001011", 
    115 => "10111011100011011110110000011110", 
    116 => "10111101100011100000110110000111", 
    117 => "10111100101100100010010011010101", 
    118 => "00111101000110000101001111100111", 
    119 => "10111011011010111100000111100110", 
    120 => "00111101111000001101111111110001", 
    121 => "00111101010010101110011000011010", 
    122 => "10111110001000011100110110101010", 
    123 => "00111101110001101111001001000011", 
    124 => "10111110001000001110010000100011", 
    125 => "00111101101011110101101001111010", 
    126 => "10111100111000110000111100001011", 
    127 => "00111101110001010011001011110011", 
    128 => "10111101110011010010011010001100", 
    129 => "00111101001101000100010110000010", 
    130 => "00111101010100001001100011111010", 
    131 => "10111100101001111010000111010000", 
    132 => "10111101100010101100010100011100", 
    133 => "10111110100110000110011010010110", 
    134 => "10111110001110000110000001010000", 
    135 => "00111101110110110011110000010111", 
    136 => "00111101011011011000011001001010", 
    137 => "10111101101110010111001101010001", 
    138 => "10111110001000110000111110001101", 
    139 => "10111110000000011101111100101111", 
    140 => "10111101100111001011111011110011", 
    141 => "00111101110011011111011011100010", 
    142 => "10111100110001011001000001101101", 
    143 => "10111100000111000010110101000111", 
    144 => "00111011011011001000110101110110", 
    145 => "10111010001101110010000100000000", 
    146 => "00111101010101101011010100100111", 
    147 => "10111100100001011001110101101011", 
    148 => "00111101110010011111000110110010", 
    149 => "10111101001100001110010001010010", 
    150 => "00111110000100111001101110110100", 
    151 => "10111110010011101011011000100100", 
    152 => "10111110001011010110011111110100", 
    153 => "00111100101101111011010111110100", 
    154 => "10111101001111101100101111011000", 
    155 => "10111100101000100010110101000101", 
    156 => "10111101111101111010110100111011", 
    157 => "10111100000111001110110110101010", 
    158 => "00111100001001010101000011111010", 
    159 => "00111101111110111010101101001101", 
    160 => "10111110000000101100000101000100", 
    161 => "00111100111101110110100001111111", 
    162 => "10111101111111111110001100110001", 
    163 => "10111101011100000011001001010111", 
    164 => "10111101101100111110001110000011", 
    165 => "10111101111011011000100110100101", 
    166 => "00111101010010101010001000001111", 
    167 => "00111101000001001101000010011111", 
    168 => "00111110000011101101001010011010", 
    169 => "10111110000100100111100011100001", 
    170 => "10111100100101111011001100111010", 
    171 => "00111101100010111100001101111110", 
    172 => "00111101111001011111010110001011", 
    173 => "00111101010001000100010100110010", 
    174 => "00111110001011111100010011010101", 
    175 => "10111110010010110001011101000010", 
    176 => "00111110100000001001101110000100", 
    177 => "00111101110011100010000100100000", 
    178 => "10111110001000000111101110000011", 
    179 => "10111110001000101010010001011111", 
    180 => "10111100001011111100101000111011", 
    181 => "10111101101100001000111110110110", 
    182 => "10111101100010110001001101001111", 
    183 => "00111100111010110011111001000000", 
    184 => "10111101001110010010001000001100", 
    185 => "10111110000101100000010000001110", 
    186 => "10111110011100100101111011011000", 
    187 => "10111110010010000101101101100010", 
    188 => "10111101011010011011110100000100", 
    189 => "00111100101000010101011010000101", 
    190 => "00111101110101011100000110110001", 
    191 => "00111101111010011011010110000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiHfu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiHfu is
    component conv_2_conv_2_weiHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiHfu_rom_U :  component conv_2_conv_2_weiHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


