-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibyn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibyn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110101001001010111010100000", 
    1 => "10111110010011101110101010110110", 
    2 => "00111101111101111001001010000000", 
    3 => "10111101101111011010001000000011", 
    4 => "10111100100100000000100001001111", 
    5 => "10111110010000100110111111011100", 
    6 => "10111101100011101100100010001010", 
    7 => "00111110011001111101100110010011", 
    8 => "00111100011110111010000001011110", 
    9 => "10111101110000111010010000111111", 
    10 => "10111101100100001100110011001011", 
    11 => "00111101100000011011101100100111", 
    12 => "10111110010001101110001000110100", 
    13 => "10111101011111011100101000001000", 
    14 => "00111101010010000111100110111111", 
    15 => "00111101111100111111100100000001", 
    16 => "10111110010111001110110111010111", 
    17 => "10111110101000010001010001101110", 
    18 => "10111110000111111000110001000010", 
    19 => "10111110011000110111111100111001", 
    20 => "10111110000011100010100001010100", 
    21 => "10111110111011101110011110100100", 
    22 => "10111101001110000001001100111000", 
    23 => "10111100111110011000010111000100", 
    24 => "10111110000110101000110011110011", 
    25 => "00111110000111001110010010110100", 
    26 => "10111110000111000110010101001111", 
    27 => "10111110011110101000011100010000", 
    28 => "00111101001101011101100100110000", 
    29 => "10111110001100001010110111101011", 
    30 => "10111101110100100010100110000010", 
    31 => "10111101110100111110110001111011", 
    32 => "10111101101011100000001100101000", 
    33 => "00111110001101001110111010110001", 
    34 => "00111101000111100111111110101100", 
    35 => "10111101110110000100010010000000", 
    36 => "00111110001100110000011010001001", 
    37 => "10111101110001011111001101111101", 
    38 => "10111101011111101100010111011001", 
    39 => "10111110000111101010000110101110", 
    40 => "10111111001001111000111011011010", 
    41 => "00111110000001000111000110100001", 
    42 => "10111110101101001001010000111101", 
    43 => "00111110010101101101101001001111", 
    44 => "00111101010001111101110001100010", 
    45 => "10111101110111011000111000111101", 
    46 => "00111101110101100001110011110111", 
    47 => "10111011001001110001100100100111", 
    48 => "00111110000111110010100000101110", 
    49 => "00111101101110011010110000010100", 
    50 => "10111110000010111011011101100110", 
    51 => "10111110001000000101001001100000", 
    52 => "00111101000101010001101001000110", 
    53 => "10111110111111110011100010111101", 
    54 => "10111110100110101111000001001110", 
    55 => "10111101100011110101010001001100", 
    56 => "00111010111000000110001110111101", 
    57 => "00111100101101000101101110111110", 
    58 => "10111110101011111010111100110110", 
    59 => "10111101011011101001111010001000", 
    60 => "00111110001010100100100110110111", 
    61 => "10111100110001100110111100110101", 
    62 => "00111110000001010010101000100100", 
    63 => "00111101101010011111110000110110", 
    64 => "10111110000010111100000000001010", 
    65 => "10111110011110001101100010000011", 
    66 => "10111110000100111111000101101110", 
    67 => "00111011110010010100100100111101", 
    68 => "10111101110110000001111111111100", 
    69 => "10111100101001111000010111110100", 
    70 => "10111110101010011010011001000101", 
    71 => "10111100111001101011000101111100", 
    72 => "00111100100100111111011010100100", 
    73 => "10111011110010101110010001001001", 
    74 => "00111100110011001001011100110000", 
    75 => "00111101000010100001111110110101", 
    76 => "10111110100111011010100010011001", 
    77 => "10111110000010010101110011110000", 
    78 => "10111100110101011100100011100010", 
    79 => "10111011000110100000111111000100", 
    80 => "10111101110111010110010100110010", 
    81 => "00111100000011000001100010111010", 
    82 => "10111110000101001110000000010111", 
    83 => "10111101011010111001110100110011", 
    84 => "10111110001100011010100011010011", 
    85 => "10111110101001001100011010101111", 
    86 => "10111101011011001000110100011111", 
    87 => "10111110001000000010010111111100", 
    88 => "10111101111110100001001100010111", 
    89 => "00111100111100101110011101011010", 
    90 => "00111101101011001101100111101011", 
    91 => "00111110111010010011101010010101", 
    92 => "10111101000011000001100000110000", 
    93 => "10111110000001100111101111011111", 
    94 => "00111101110010110110010111011101", 
    95 => "00111101101010001110010000001100", 
    96 => "00111100101001111001100011011000", 
    97 => "00111110010111001100110000011010", 
    98 => "10111101000011011110111101110001", 
    99 => "10111101110101101011100010111111", 
    100 => "10111110101001101110011100100111", 
    101 => "10111110001110110011011001011101", 
    102 => "10111101101001000110110010011111", 
    103 => "10111110001101010101000111110010", 
    104 => "10111110100101000110110100010101", 
    105 => "10111101100010111101001111000010", 
    106 => "10111110100011110011111001110101", 
    107 => "00111101101010111100010001110010", 
    108 => "00111110100000110111100111111011", 
    109 => "00111010111110001011011100100000", 
    110 => "00111100110111100110101000101110", 
    111 => "10111101000001011111000010100111", 
    112 => "10111110000010011110101110011100", 
    113 => "00111101011010100001100010011101", 
    114 => "00111001101111111101011000101010", 
    115 => "10111101100110111000110010001001", 
    116 => "00111110000010000111100110010101", 
    117 => "10111110010111100010011111000100", 
    118 => "10111100000110001001010011111010", 
    119 => "00111110011001000001011100010001", 
    120 => "00111101111101010011010110011001", 
    121 => "00111110001101011101010000010001", 
    122 => "10111110100110000010001101101010", 
    123 => "00111101001100010100110101110010", 
    124 => "00111101111001000101000101010000", 
    125 => "00111100001001100101101101001110", 
    126 => "10111101010111001101011001101000", 
    127 => "00111100101000101001111101100101", 
    128 => "00111101111011011111111000100010", 
    129 => "10111110000010100000101101011010", 
    130 => "10111101111001001001111100010001", 
    131 => "00111110001111100111001100110001", 
    132 => "10111101111011101110110010001010", 
    133 => "10111101001011100111111000111011", 
    134 => "00111101110100001101000010110011", 
    135 => "00111110000001011101010110101001", 
    136 => "00111101100001011111010011000101", 
    137 => "00111101111100101001100100011010", 
    138 => "10111101111101010110011011111101", 
    139 => "10111110000100000100111111110111", 
    140 => "10111100111011011111001000100100", 
    141 => "00111110000110110010000101110100", 
    142 => "00111110000110111100101110101001", 
    143 => "00111101100000100001010000000101", 
    144 => "00111101100010100011101100000111", 
    145 => "00111110001000110000100100110011", 
    146 => "00111110000010110111111111110111", 
    147 => "10111110000000100101011100011000", 
    148 => "10111101100110011100110110110011", 
    149 => "10111110100010100011100101000001", 
    150 => "10111101111100000100110111001001", 
    151 => "10111110000110001010011010001101", 
    152 => "10111101111100010000101100100111", 
    153 => "00111101010110001011111011011010", 
    154 => "10111011101101011101000000011011", 
    155 => "00111110100010010010110001111101", 
    156 => "00111110000101011100101010111100", 
    157 => "10111110001111000100011011100000", 
    158 => "10111100100101000110111101111001", 
    159 => "00111110010011011111111010011011", 
    160 => "00111110101000111101000100000011", 
    161 => "00111110010011110011100110000111", 
    162 => "00111101111111111001010000010100", 
    163 => "10111110000110001100111010011110", 
    164 => "10111110110010111111001001100000", 
    165 => "00111110010111010011000011010010", 
    166 => "10111110001000111011101110011111", 
    167 => "00111100110100001101001110010100", 
    168 => "10111110011110110110000010101000", 
    169 => "00111110000011001110100010100001", 
    170 => "00111101001000111101001111111011", 
    171 => "00111110000111110000001010000111", 
    172 => "10111010001011000101110100101100", 
    173 => "10111110010001111101111111000111", 
    174 => "00111110100111001111001001111100", 
    175 => "00111110100001100000001101011101", 
    176 => "10111101111010111000110110000110", 
    177 => "00111110110000010111010111010100", 
    178 => "00111110000000000110000001111000", 
    179 => "10111110011110001100010111011101", 
    180 => "00111101001100111001000110111100", 
    181 => "10111110100111111001011101000011", 
    182 => "10111110011110001001011010011111", 
    183 => "10111110000100110100111001101011", 
    184 => "00111101111111100110010111001010", 
    185 => "10111110100011000001010000101111", 
    186 => "10111110010000111001001000101010", 
    187 => "10111101101010101110000011101010", 
    188 => "10111101011001101110010010011010", 
    189 => "10111101111011010000000110110000", 
    190 => "00111110000001111101110000101100", 
    191 => "00111101101011001010101001001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibyn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibyn is
    component conv_2_conv_2_weibyn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibyn_rom_U :  component conv_2_conv_2_weibyn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


