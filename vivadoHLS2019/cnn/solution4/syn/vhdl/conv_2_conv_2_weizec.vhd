-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weizec_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weizec_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010100000011001011110011", 
    1 => "00111101011100011111100111000100", 
    2 => "00111100111011010100000110010001", 
    3 => "10111100100100000101001111100100", 
    4 => "10111011011011001100011010101110", 
    5 => "00111100010000100000010111010000", 
    6 => "00111110001000110010100111110010", 
    7 => "10111101100101000101110000110011", 
    8 => "00111110000000110011101001000100", 
    9 => "00111101000100100010111101001010", 
    10 => "10111101100001100111101100110010", 
    11 => "00111101000101010111111110010011", 
    12 => "00111101111111100011110010111011", 
    13 => "00111100111100100011101001001000", 
    14 => "00111000110001111111111000110110", 
    15 => "00111010011011010100001001011001", 
    16 => "10111100110110011111011100100101", 
    17 => "10111101111111111001111000100111", 
    18 => "10111101100100111111110001101101", 
    19 => "10111110010110011100111100001101", 
    20 => "00111101001011101101110010110010", 
    21 => "10111101111000101111010110101101", 
    22 => "10111100101010101010001101000110", 
    23 => "10111110001000011101001101000100", 
    24 => "00111101101111101011101011101000", 
    25 => "10111101100101011001010001110011", 
    26 => "00111101011100100110011101000010", 
    27 => "00111101100111001100001010011110", 
    28 => "10111101101101100100010001110100", 
    29 => "00111110000011001110001010000000", 
    30 => "00111110000111010000001110010011", 
    31 => "10111110100111110111101111101000", 
    32 => "00111110000111111000000101011110", 
    33 => "10111101110010100000100000001110", 
    34 => "10111100000011001111111101001001", 
    35 => "00111101110010000000101001111111", 
    36 => "10111110010000100011011110101010", 
    37 => "00111101011101000101111011101101", 
    38 => "00111011101010111110001111011001", 
    39 => "00111101000001011101011111001101", 
    40 => "10111101101100011101010110111010", 
    41 => "10111100011010000110010101110100", 
    42 => "10111100100100000011111010101101", 
    43 => "10111011100000011011111100110100", 
    44 => "10111110001111001011010111111001", 
    45 => "00111011100011001111110110010011", 
    46 => "00111011110111101101100110010010", 
    47 => "00111100011011000011011101101000", 
    48 => "00111101100000001001111101011100", 
    49 => "10111110100000011010010111010010", 
    50 => "00111110000000000111011010010010", 
    51 => "00111110010110101111010010010100", 
    52 => "10111101101110110110101110111110", 
    53 => "10111110011011001110100010001010", 
    54 => "00111101111100111100100110010101", 
    55 => "10111101111000001100101101000000", 
    56 => "10111101110110111101001001110111", 
    57 => "10111101000101010010001101001100", 
    58 => "00111110000111001000001000001110", 
    59 => "00111110000011001110011110101001", 
    60 => "00111101011110111010000100000011", 
    61 => "10111101101001111100110001001000", 
    62 => "10111100101100010110001100000111", 
    63 => "10111101011010000110011000011000", 
    64 => "00111101101101011011000101011100", 
    65 => "00111110000011111010000110101000", 
    66 => "00111110100001110111100111110001", 
    67 => "00111101010000100000010001001100", 
    68 => "00111101101001011010100010100110", 
    69 => "10111101001111011111000011010101", 
    70 => "00111101101101101011000101111100", 
    71 => "00111101011110101111000101000010", 
    72 => "00111101100010110111010000101011", 
    73 => "00111101001101011000010111000101", 
    74 => "00111110000000011010000111001011", 
    75 => "00111101101011111001100001101011", 
    76 => "10111100110001011100111100011011", 
    77 => "00111100010101100111100011111001", 
    78 => "10111101010000101001010010000000", 
    79 => "00111100101111110010011110110100", 
    80 => "10111101100111010101100000111111", 
    81 => "10111100101101100001111100111101", 
    82 => "00111101100001001111111100010100", 
    83 => "10111101001010010010010001001110", 
    84 => "10111101000011100011010100011000", 
    85 => "10111110000000000101000010010010", 
    86 => "10111011001100110110010101001100", 
    87 => "10111110000101101101010011111110", 
    88 => "00111110000100010110111111100100", 
    89 => "10111100101110111111101001010101", 
    90 => "10111100101011111101110000101000", 
    91 => "10111110000101111000011100100011", 
    92 => "10111101101001000011110101111110", 
    93 => "00111101101001001001001110000111", 
    94 => "10111101101110100111110010000100", 
    95 => "10111101111101000111001100111001", 
    96 => "00111101001001010110111110001100", 
    97 => "10111101000101010100100000110010", 
    98 => "00111110001010100101001111101111", 
    99 => "00111101010000100011011101101001", 
    100 => "00111100110110010100010110011010", 
    101 => "10111100100100111000011011100001", 
    102 => "10111100011101001111110000001010", 
    103 => "10111101101011010111101101001100", 
    104 => "10111101111100010110110001100001", 
    105 => "10111101010010101111101001001000", 
    106 => "00111101111101111000111011011101", 
    107 => "10111101101001100000101100000001", 
    108 => "10111101101100101110101001010001", 
    109 => "00111101100101011111101011000000", 
    110 => "10111101000011110110100110000001", 
    111 => "10111101111011000000100101110111", 
    112 => "10111101010110100001110010111110", 
    113 => "10111100111000000101010011000001", 
    114 => "00111110010011100011100000111101", 
    115 => "00111101000000001000100011110101", 
    116 => "00111101010111011111001100000100", 
    117 => "10111101100001111010110100000011", 
    118 => "10111101001001100011000110110010", 
    119 => "10111101111001001010111010001011", 
    120 => "10111101011001001000110001110111", 
    121 => "10111011100001010101001101111100", 
    122 => "10111110001110011100100010011111", 
    123 => "00111101110111110011010101110011", 
    124 => "00111100101011010010011111100100", 
    125 => "10111101010111101011001101011100", 
    126 => "10111100111110101101001110111000", 
    127 => "00111011010101101001111111100000", 
    128 => "00111101101011110001011001110101", 
    129 => "00111100110101100001011101011111", 
    130 => "00111101011111111100110010010101", 
    131 => "10111101111010000000101101100000", 
    132 => "00111101011001110001111100001101", 
    133 => "00111101001010010101000010100000", 
    134 => "10111110001111101010110010001101", 
    135 => "00111101110001011101001101001010", 
    136 => "10111110000110011011010110000110", 
    137 => "00111010101011100001001011010010", 
    138 => "10111110010100001100110110111011", 
    139 => "10111110000100100001001110100101", 
    140 => "10111101100101011010010100101101", 
    141 => "00111100111100011000000010010001", 
    142 => "10111110001011111010010001111011", 
    143 => "00111101111001001101111110111111", 
    144 => "10111101110101011000101011100110", 
    145 => "00111100010000010010001100110001", 
    146 => "10111101101001100011011110101000", 
    147 => "00111101101001000100100000111110", 
    148 => "10111101001111011101101111111111", 
    149 => "00111110000001010001101110101000", 
    150 => "00111100101000001000000100100110", 
    151 => "10111110010100001111011110100001", 
    152 => "00111101101011000001010011111101", 
    153 => "00111100110110001011100100101000", 
    154 => "10111101101001101000101010100000", 
    155 => "00111101100001101100111101100010", 
    156 => "10111101111100011100011100010001", 
    157 => "10111101111011001011001111000110", 
    158 => "00111101110100011111011010000110", 
    159 => "00111101001010100001001001110000", 
    160 => "10111110101010110000010100100101", 
    161 => "00111101010011011101000010101110", 
    162 => "10111101011001110001101101010001", 
    163 => "10111101001101100010001100001010", 
    164 => "10111100111000010011111111010110", 
    165 => "10111110000111000011001010010111", 
    166 => "10111110000111100000100101111110", 
    167 => "10111100011110000011111101011110", 
    168 => "00111101110001010100101110010110", 
    169 => "10111101000100011011110001010010", 
    170 => "00111110001001110101110101001100", 
    171 => "10111101001111101010010111110110", 
    172 => "00111110000001011100001010100110", 
    173 => "10111101111100110001101011111101", 
    174 => "10111110100100000101101100001100", 
    175 => "10111101101001110101111110100111", 
    176 => "00111100100011100000000110100010", 
    177 => "00111100001000100001101110110010", 
    178 => "00111101111001100100010011011100", 
    179 => "00111101010111010111000010001001", 
    180 => "10111100100111100101011111001110", 
    181 => "10111100111010001111111100101001", 
    182 => "10111110001001001110000111011000", 
    183 => "00111110001010110101101111010110", 
    184 => "10111101111010001100011111101101", 
    185 => "10111101000010001001101011101101", 
    186 => "10111101100100011011010100100110", 
    187 => "00111101100010010101101011010000", 
    188 => "00111101110001101111111011100000", 
    189 => "00111101111010000110001011101011", 
    190 => "00111101010000000101001011101010", 
    191 => "10111100100000011001100011101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weizec is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weizec is
    component conv_2_conv_2_weizec_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weizec_rom_U :  component conv_2_conv_2_weizec_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


