-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibck_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibck_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001001100101001110011100", 
    1 => "10111110001011100110100100010101", 
    2 => "00111100000000000001010110010001", 
    3 => "00111110001101111111110101000110", 
    4 => "10111110000001100110100010011111", 
    5 => "10111101011001010111001000011100", 
    6 => "00111101101110011011001110110110", 
    7 => "00111101001010110110101011000001", 
    8 => "00111101111110010010010000011111", 
    9 => "10111100101001101011111101111111", 
    10 => "00111100011101010100101010010000", 
    11 => "00111101111001101111000111011001", 
    12 => "10111110011110101000100000111000", 
    13 => "10111110000001011010001010011010", 
    14 => "00111110100010100100010101001111", 
    15 => "00111110101001110101100000101010", 
    16 => "00111101110100010110010001001110", 
    17 => "10111100001111011100011010001010", 
    18 => "00111101011010011001000011100011", 
    19 => "00111110010000101011011101010000", 
    20 => "00111101111010000111000100111111", 
    21 => "10111101111001100101111011110001", 
    22 => "10111101001101100110011111010001", 
    23 => "10111010111101000100101000101011", 
    24 => "00111110001001010100001010110001", 
    25 => "00111110010100011100101100000100", 
    26 => "10111101110011110110011010011001", 
    27 => "10111110001011100000100000010100", 
    28 => "00111110100111010001100101011010", 
    29 => "10111101110001110010101001010100", 
    30 => "00111100100110000100111110111011", 
    31 => "00111110000101100100010010101100", 
    32 => "00111101110001111100001001100110", 
    33 => "10111101111000100101111000000101", 
    34 => "00111101111011100110111110010000", 
    35 => "10111110001100000010100010111100", 
    36 => "00111101101100100000001100011110", 
    37 => "10111110001110110000001001100111", 
    38 => "10111101111011100111100001101000", 
    39 => "10111101111111111010100010101100", 
    40 => "10111101100100100111101011100010", 
    41 => "00111110000000100100010000001011", 
    42 => "10111101000011110100101100001010", 
    43 => "00111110010001001101011100010111", 
    44 => "00111101110011011110011011001101", 
    45 => "10111100110001101100111101100100", 
    46 => "10111100101000011100101001111100", 
    47 => "00111101000010111110010000000100", 
    48 => "00111100111101000111110100101100", 
    49 => "10111110001000000001000010000101", 
    50 => "00111100011101011000111111110110", 
    51 => "10111110110110001110000000111100", 
    52 => "10111100101001001110110001011111", 
    53 => "10111101111000000010001101101110", 
    54 => "10111110101011011001101110110100", 
    55 => "10111110101010000110011111010010", 
    56 => "00111110001001110111001010000110", 
    57 => "00111110010010111000110011110111", 
    58 => "10111100110001111010101001111101", 
    59 => "00111110000111010101111011000011", 
    60 => "10111110001011000111010011000000", 
    61 => "00111101111010100110111001110011", 
    62 => "10111101100011111000101001110110", 
    63 => "00111101100000011010011011100001", 
    64 => "00111101101011010011110110110001", 
    65 => "10111110001000100000000101011101", 
    66 => "10111110010011101001101101000010", 
    67 => "00111101101110011101100101011110", 
    68 => "10111101111000000000000000101100", 
    69 => "10111101100101100000100001101000", 
    70 => "10111110011011100010110101011101", 
    71 => "00111101001110010010110110001001", 
    72 => "00111101001001101011110111001000", 
    73 => "00111101000010101100001110010101", 
    74 => "10111110100100001001101111110000", 
    75 => "10111011011001101110101111010111", 
    76 => "10111110101110000011110000011100", 
    77 => "10111101011011110010111111110100", 
    78 => "10111110000101010010111000010101", 
    79 => "10111101100101101001000111110110", 
    80 => "00111101111010000000001000111110", 
    81 => "10111100110000000011000100000100", 
    82 => "00111110100101100110100000001100", 
    83 => "00111101111001011111001111110111", 
    84 => "00111110101101001011001000010110", 
    85 => "10111110001010100111001010010101", 
    86 => "00111101101100001011001110010110", 
    87 => "10111110011011011010111000111011", 
    88 => "10111101010000010111101100010000", 
    89 => "00111100111001111111100111100011", 
    90 => "00111101101011001111000110010001", 
    91 => "00111101110111010101000000111011", 
    92 => "00111101010000010011001100100111", 
    93 => "10111110000110100111011011100110", 
    94 => "10111101101000000101011011011011", 
    95 => "00111011001100001101111101010011", 
    96 => "00111101111100011101010101111101", 
    97 => "00111110000001101111110011000001", 
    98 => "00111101000101110000011111111111", 
    99 => "10111110100011011010100101110011", 
    100 => "00111101101000000100111010111001", 
    101 => "10111110010001101011011111101101", 
    102 => "10111110001110010111101110010000", 
    103 => "10111101100011110110110101110100", 
    104 => "00111101100111100100100011101111", 
    105 => "10111101011000101100100101101010", 
    106 => "10111101110110100010000111010001", 
    107 => "00111101011110001111110010001100", 
    108 => "10111110011001011010000101110111", 
    109 => "10111110000001010001111010110110", 
    110 => "10111110100100011011011001111000", 
    111 => "10111110010101110001101011111000", 
    112 => "10111110001001101010000011010011", 
    113 => "10111101100111010001011011011001", 
    114 => "10111100101100100000001100001110", 
    115 => "10111111000010010100101011000011", 
    116 => "00111101100001111000010010110111", 
    117 => "10111101011001110100111110000111", 
    118 => "10111011010001100111111011111000", 
    119 => "00111101010011110010000101100010", 
    120 => "00111110011001010100011101101001", 
    121 => "00111101001100100100111000111101", 
    122 => "00111101000101100110101010100011", 
    123 => "00111101000111111001000010011111", 
    124 => "10111101100001101100000101001111", 
    125 => "00111110100000101100011000010001", 
    126 => "00111110001001100100100000001101", 
    127 => "00111110001011000001111110001100", 
    128 => "00111011000001011101101100010101", 
    129 => "10111110011111000101110000011000", 
    130 => "10111110101001010001101101000101", 
    131 => "10111101010110100111101110100111", 
    132 => "10111110011110101100101001001100", 
    133 => "10111110110000011100000101111011", 
    134 => "10111110100110000111001111010110", 
    135 => "00111110010011011001100110011001", 
    136 => "00111110000110110011000100001011", 
    137 => "10111111000011001101001010111011", 
    138 => "00111100010001101111110010001000", 
    139 => "10111110011100010111010001101111", 
    140 => "10111110010101110010010001010101", 
    141 => "10111110101110100101110010010000", 
    142 => "00111110101010000111001100000111", 
    143 => "00111110011111001001100100011011", 
    144 => "10111110001000010101000001010110", 
    145 => "00111100100000100111110110001110", 
    146 => "10111101100100101110101000011100", 
    147 => "10111101010001010101010011010010", 
    148 => "00111110000111001011011111000101", 
    149 => "00111100100001011011111010011110", 
    150 => "10111101000000100110100000001010", 
    151 => "10111110101010100001110000100101", 
    152 => "10111110011100110100111010011110", 
    153 => "10111101101101101101011010010011", 
    154 => "00111100101000000001011110110011", 
    155 => "00111110010101011111101001010100", 
    156 => "00111101110100010001001111100101", 
    157 => "10111100101100000100001111111111", 
    158 => "00111110001001111000110111011010", 
    159 => "10111101101001101001100000000111", 
    160 => "10111110001101001100010111100101", 
    161 => "10111011001010101111110000011000", 
    162 => "10111110001011111110010100011100", 
    163 => "10111110010011001110010011110111", 
    164 => "10111110001111110000100101100111", 
    165 => "10111100100000101000000111100011", 
    166 => "10111110000111101011011000011001", 
    167 => "00111110001111001010101101111111", 
    168 => "00111110011101100000011110000000", 
    169 => "10111110011101001000000011111101", 
    170 => "10111110100010010100011000110111", 
    171 => "00111101000010001011001011110110", 
    172 => "00111101001101111010111110011000", 
    173 => "00111110100100101100101010101010", 
    174 => "10111101110011000001000010001001", 
    175 => "10111110010010011100101110100110", 
    176 => "00111110010100101100101001110001", 
    177 => "00111110001111010101101101100011", 
    178 => "10111110010010110101100000101000", 
    179 => "10111110000010001111111001011110", 
    180 => "00111101111000111011110101000001", 
    181 => "10111101001110111000010101110010", 
    182 => "00111100101111010011000011011011", 
    183 => "00111100110011010010101011000100", 
    184 => "00111110011111000101011001000011", 
    185 => "00111110011010101010010001110111", 
    186 => "10111101000100011101010110000100", 
    187 => "00111101100111101110010100001100", 
    188 => "10111110000011001110011000010110", 
    189 => "10111101011100100100010000101000", 
    190 => "00111110011100110111110100000000", 
    191 => "00111110000100010001011111101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibck is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibck is
    component conv_2_conv_2_weibck_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibck_rom_U :  component conv_2_conv_2_weibck_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


