-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiIfE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiIfE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011110001010000001110", 
    1 => "10111011100001101100110111101011", 
    2 => "10111101000000111001111110100000", 
    3 => "00111101110101101101101100111000", 
    4 => "10111101000000001100011010100110", 
    5 => "00111101011011101010100001110010", 
    6 => "10111101110111010011001100001011", 
    7 => "10111100110111001010101111111100", 
    8 => "00111101110001010011011010100111", 
    9 => "00111101110111011010101111010001", 
    10 => "10111100001010010101000101011101", 
    11 => "00111011110111010101110010110011", 
    12 => "10111101110111000101010110111101", 
    13 => "10111110010110111101100111101000", 
    14 => "10111101110000101000010000000100", 
    15 => "00111011000000000011111100010001", 
    16 => "10111110010111000001011001111110", 
    17 => "00111110000100010111001110001010", 
    18 => "10111110010110010001110101101110", 
    19 => "00111110000110011100001010101000", 
    20 => "10111110010101100100101100010111", 
    21 => "10111110100011000010000111111001", 
    22 => "10111101110111011000010111001111", 
    23 => "10111100011111000101101100100111", 
    24 => "00111100010000110000000001101100", 
    25 => "00111110001010111101011111011000", 
    26 => "00111110001011011001010011010101", 
    27 => "00111100100010100001110110000011", 
    28 => "10111110011100101000001010001000", 
    29 => "00111110000100011111010110011100", 
    30 => "10111101110101101011111111001000", 
    31 => "10111110001000110011101101010000", 
    32 => "10111101100000010000011100011101", 
    33 => "10111110100010111010100111111100", 
    34 => "10111100101011110101100110111010", 
    35 => "00111101111010010001011011010101", 
    36 => "10111100110001101101011100001010", 
    37 => "10111101011001110100001111010000", 
    38 => "10111100101111101100110101011110", 
    39 => "00111110000010001010000100110111", 
    40 => "10111010111011101011010101000100", 
    41 => "00111110000000100101000100101000", 
    42 => "10111101000100000100110000000001", 
    43 => "00111110010011011011101011010011", 
    44 => "00111101100111110000010001111101", 
    45 => "10111100011000110000010110011011", 
    46 => "10111100010110101001100111001000", 
    47 => "00111110100101101100111010100010", 
    48 => "00111101110011001000101100101010", 
    49 => "10111110011100010010100100100000", 
    50 => "10111101100110101010100110111101", 
    51 => "10111100110000101100000001110010", 
    52 => "10111110010010010100010101001000", 
    53 => "00111100101011110101001000110000", 
    54 => "00111101000000000000101011011101", 
    55 => "10111110010001000101011010011010", 
    56 => "10111110011101100100011101101111", 
    57 => "00111101000110110111000101110111", 
    58 => "10111100110100000011011011000110", 
    59 => "00111101101111100000100011010011", 
    60 => "00111011110111101011001011110100", 
    61 => "00111101010000101010001011010100", 
    62 => "00111101101111110101000100001001", 
    63 => "00111101101000110010001010111101", 
    64 => "00111100000011100110111010111100", 
    65 => "10111100011011101110011101010001", 
    66 => "00111101110000011000100111010011", 
    67 => "00111100111010100000110110010100", 
    68 => "10111101101010100110100101111010", 
    69 => "10111101101110111000000111000110", 
    70 => "10111110011000110000110001010111", 
    71 => "00111101110100010001001100111011", 
    72 => "10111101000110001010000111110000", 
    73 => "00111110000001101001101110110010", 
    74 => "10111101000000010100101010111110", 
    75 => "10111100000111000111010000110001", 
    76 => "10111110100001010101111110001011", 
    77 => "10111101101110100010000001000101", 
    78 => "00111011111001011101011000110011", 
    79 => "00111110001000011000000011110011", 
    80 => "00111100110101110101101101100000", 
    81 => "10111100101010111110000101100001", 
    82 => "10111100000000111101010111101001", 
    83 => "00111101011111010111100010010010", 
    84 => "10111110110000011100111100000001", 
    85 => "10111110100010100010100011001110", 
    86 => "10111101011000100010101111001011", 
    87 => "10111101100101001101001100110110", 
    88 => "10111100110011100100010001011001", 
    89 => "00111100111111000010010000011001", 
    90 => "00111101001001100001001010010111", 
    91 => "10111110010110111010000100101111", 
    92 => "00111101010001111010111000100001", 
    93 => "00111101100001111101111001111000", 
    94 => "10111110011000010001011001100011", 
    95 => "00111100110001000110111110101011", 
    96 => "10111110100001011111001011000110", 
    97 => "00111100111001000000101100101110", 
    98 => "10111110010011000100000110010010", 
    99 => "10111101100001010001110000100011", 
    100 => "10111101100100011111011001101001", 
    101 => "00111010100000100011100000101010", 
    102 => "10111110101110101000001011110010", 
    103 => "00111100101000010000101000010011", 
    104 => "10111110000000100010001111101011", 
    105 => "00111101101010100010110110010000", 
    106 => "00111010101000110010111000001110", 
    107 => "10111101000110110000101111111110", 
    108 => "10111101100100000001011000100010", 
    109 => "10111110100001001101111010011101", 
    110 => "00111101001010101010011101111110", 
    111 => "10111011110001111100111000000110", 
    112 => "00111101100101111001100010111100", 
    113 => "10111100110010101011111110111110", 
    114 => "10111110101000101110111011001110", 
    115 => "10111101000010101000010111000100", 
    116 => "10111101110100010100100001011001", 
    117 => "10111101001000000100010100111010", 
    118 => "00111110000001111111011100110100", 
    119 => "10111100010101101110000111101010", 
    120 => "00111100001001010000010001011010", 
    121 => "10111100001100100011000111010011", 
    122 => "00111100111101010000011000110001", 
    123 => "00111101100000001000010101011001", 
    124 => "10111110101011111000000010110010", 
    125 => "00111101111110110110100100110001", 
    126 => "10111101101000110001011010101010", 
    127 => "10111101110000100000011111100001", 
    128 => "10111101101110100101110001011101", 
    129 => "00111110001101010010110110001010", 
    130 => "00111101111100100111000000010000", 
    131 => "00111101110010011001100110111111", 
    132 => "00111100010100101100010100011001", 
    133 => "10111110001110011011100011011010", 
    134 => "10111110010111000110010100010010", 
    135 => "00111101100011011011010110010010", 
    136 => "00111011111011111111001011011100", 
    137 => "10111110001100111111011111101101", 
    138 => "10111110001110110000100111001000", 
    139 => "10111110011000111101111011000011", 
    140 => "10111110011110000001110111001000", 
    141 => "00111101111100011011101101100001", 
    142 => "00111101001001110111110101111010", 
    143 => "10111101010010011111101000011000", 
    144 => "00111101111001010000010000011010", 
    145 => "10111110010110111100010101001101", 
    146 => "00111110000001011010111011010110", 
    147 => "00111101100001101111010101010100", 
    148 => "10111101001000000101011000111011", 
    149 => "10111110001011000110001000001101", 
    150 => "00111101101010000000000100100011", 
    151 => "10111110101111000011000101010100", 
    152 => "10111101001000010110111011011010", 
    153 => "10111101001101001011010011100000", 
    154 => "10111110000000001111110000100010", 
    155 => "10111101111001010101110011000100", 
    156 => "10111101010010001111111001000001", 
    157 => "00111101110011010011011000110111", 
    158 => "10111101000111111100111001011000", 
    159 => "00111100001101101100101001001000", 
    160 => "10111110101000110110110100111000", 
    161 => "00111011000010010011000101000100", 
    162 => "10111110010100001010100011100101", 
    163 => "00111101000110001011011000000110", 
    164 => "00111110000001011011000001010110", 
    165 => "10111110010000000010000111000001", 
    166 => "00111101100101110100011000101110", 
    167 => "10111100000110010000100000101111", 
    168 => "10111101111111100010001100110000", 
    169 => "10111101100111111100110001111101", 
    170 => "10111101101001110000000011100010", 
    171 => "00111100101100101100011100101110", 
    172 => "00111110000100111010001111011000", 
    173 => "10111110100101011110010001100001", 
    174 => "10111101110010011100101111110000", 
    175 => "10111110000111010100011011101010", 
    176 => "00111110011011110100100101101000", 
    177 => "10111100111000110010011100001111", 
    178 => "10111110010111010010100011001111", 
    179 => "10111110000111000110010001110100", 
    180 => "00111110001000100100000100110101", 
    181 => "10111110100000111101011111000011", 
    182 => "00111110000001100001011111011011", 
    183 => "00111101100101010110110111110011", 
    184 => "00111101100000010010011110111101", 
    185 => "00111101001100011100100001001001", 
    186 => "00111100100001110101010000110110", 
    187 => "00111101101101111101111001001000", 
    188 => "10111100100000011110111000100110", 
    189 => "10111101110001011011011101011101", 
    190 => "10111101110110101011111000110000", 
    191 => "10111101101101011101111101101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiIfE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiIfE is
    component conv_2_conv_2_weiIfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiIfE_rom_U :  component conv_2_conv_2_weiIfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


