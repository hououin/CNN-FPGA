-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibom_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibom_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010111101101000101111101010", 
    1 => "10111100000101101101000101101011", 
    2 => "00111100110101010011011010100001", 
    3 => "10111110000001101000101010000110", 
    4 => "00111101100100111110101001000001", 
    5 => "10111100101110110011000000000110", 
    6 => "00111110001011001001001111001111", 
    7 => "10111101001011010001001110001100", 
    8 => "00111101011100110100100110010010", 
    9 => "10111011011000111000001001100100", 
    10 => "00111101110111000111110111100001", 
    11 => "00111011111100011011111011101011", 
    12 => "00111101111010010011000001110100", 
    13 => "10111100111010001000101100110010", 
    14 => "10111101101001000110001011011100", 
    15 => "00111101000111000100111011100111", 
    16 => "00111101101001101010101011000000", 
    17 => "10111101101001110000011001000001", 
    18 => "10111101111101011100001100011010", 
    19 => "10111101110001111010001101010111", 
    20 => "00111101000100000000000010101011", 
    21 => "10111110000011100100111011011011", 
    22 => "10111110010001000010000010000110", 
    23 => "10111101001001101110101111100001", 
    24 => "00111101101011010001100100111010", 
    25 => "10111101010000100001100010111111", 
    26 => "10111101001011000011110111010111", 
    27 => "10111101011101101000000011101111", 
    28 => "10111101110111011101011111110100", 
    29 => "00111110000000000100010001001000", 
    30 => "00111101010101011000100010110100", 
    31 => "00111100000000111001001100001000", 
    32 => "10111101010111111110110001011010", 
    33 => "10111101011010001000100000101011", 
    34 => "00111101110010111001111111011101", 
    35 => "10111100101111110111100010000011", 
    36 => "00111101000100111100010100010011", 
    37 => "10111101011110011111111101011001", 
    38 => "00111100111000010101001111000111", 
    39 => "00111101100011001000100011010110", 
    40 => "00111101011101111000111111111000", 
    41 => "00111100110011010010100111011111", 
    42 => "00111100000000111010110111101010", 
    43 => "10111101111100001101110100111100", 
    44 => "00111100101110110111001100011100", 
    45 => "00111101010111011100100110100011", 
    46 => "00111101111111110000011111011100", 
    47 => "00111101111000010011011110100110", 
    48 => "00111100001010111100010100100100", 
    49 => "10111101100010010001111110111000", 
    50 => "00111110001000100111010000000000", 
    51 => "00111110001111001011000111111111", 
    52 => "10111101011001000110000000110110", 
    53 => "10111110010010100011110001111001", 
    54 => "10111110000100101111011100000100", 
    55 => "10111110001101011000110001001110", 
    56 => "10111101111000011011100011101001", 
    57 => "00111100100010100011001000110011", 
    58 => "10111101000101111000101101100110", 
    59 => "00111101110100010001101011010100", 
    60 => "10111110000100100110001010001010", 
    61 => "10111110001000000000010001111101", 
    62 => "10111100110100011111011111010001", 
    63 => "00111011100011110011110111001101", 
    64 => "00111110001011111011101101001011", 
    65 => "10111100110100000111111000000101", 
    66 => "00111100011100010110101011100101", 
    67 => "00111101010011110010110001111101", 
    68 => "10111101000111100000101110010001", 
    69 => "00111101111101010010010111000100", 
    70 => "00111101010011110101001110010101", 
    71 => "00111100110001011111011100000100", 
    72 => "00111110000011111100001000001101", 
    73 => "00111101110011110111111111110110", 
    74 => "00111101001101110101100101011010", 
    75 => "10111101011100100011100000010000", 
    76 => "10111100110110111100000011101101", 
    77 => "10111101011010010111000001011110", 
    78 => "00111011100100001111111010100001", 
    79 => "00111100001001101010010001000101", 
    80 => "00111101001100000110101101001000", 
    81 => "00111100011110000010101111101101", 
    82 => "10111110000001011110101101101001", 
    83 => "00111101001101111101010011110010", 
    84 => "10111110001101110100100011101010", 
    85 => "10111101001110100111110111101010", 
    86 => "10111100001000100011101011111110", 
    87 => "10111110010111110011111000010000", 
    88 => "10111100100000100100101111111101", 
    89 => "00111101100011110101100011111010", 
    90 => "00111110001000100110011000001000", 
    91 => "10111110011000001001000001000101", 
    92 => "10111101000111010011010101011001", 
    93 => "00111101011101100110000010001011", 
    94 => "00111101001101100000110111010001", 
    95 => "00111100111110101101000011000010", 
    96 => "10111100111101010100110100111100", 
    97 => "10111101000110001101110011110000", 
    98 => "00111110000111000110100001101111", 
    99 => "00111101000010010111110111100100", 
    100 => "00111100101110101110111101100000", 
    101 => "10111101100010000111111010101000", 
    102 => "10111100110101111001101010011100", 
    103 => "00111011110100101111011100110110", 
    104 => "00111101001000001100111111110110", 
    105 => "00111100000111110110100000001110", 
    106 => "10111100011011001001001110111110", 
    107 => "00111101100010101011100001111000", 
    108 => "10111101010000101111010001101000", 
    109 => "00111110010000010110111101010101", 
    110 => "00111011111011110111010011110111", 
    111 => "10111101011100100110111011111011", 
    112 => "00111101100100011011111111111000", 
    113 => "00111101110111110110101111100010", 
    114 => "00111101111000111011110110001110", 
    115 => "10111101001011011111101010000010", 
    116 => "10111101101000100100000010010000", 
    117 => "10111101110011111100110110010010", 
    118 => "10111101110001111011111010110100", 
    119 => "00111101001000011101001111100010", 
    120 => "10111101101100110000000001011000", 
    121 => "10111101000111011101110101001111", 
    122 => "10111110001011000000010010000110", 
    123 => "10111100110101010100110100000111", 
    124 => "00111010010110000001101010011101", 
    125 => "00111100001101001000010010000100", 
    126 => "10111100111111010000001000101011", 
    127 => "10111100101001010001100101000010", 
    128 => "10111110001110100100011011101000", 
    129 => "10111100101111100101110001000111", 
    130 => "10111101000101111110010100000111", 
    131 => "10111100101000010011001111100101", 
    132 => "00111110001100000001010010111100", 
    133 => "10111110000010100110010100100111", 
    134 => "00111100010010101000100110110101", 
    135 => "10111011111111011111100101000010", 
    136 => "00111110001001010111011100011001", 
    137 => "10111101101111011011000111100010", 
    138 => "10111110011100111001111000110111", 
    139 => "10111110011100110011100110000110", 
    140 => "10111011100111101000111111001010", 
    141 => "00111100110010101000011010100110", 
    142 => "00111110000011010010010101110001", 
    143 => "00111110000101111100111001001011", 
    144 => "00111100111100110101110100011111", 
    145 => "10111110000001001101101010001000", 
    146 => "10111100100011111101001110101100", 
    147 => "00111101110000011011010011010101", 
    148 => "10111110001010100100000010001000", 
    149 => "00111101001000001011001101111101", 
    150 => "00111011000010000100010001101001", 
    151 => "10111101000010101110101010101000", 
    152 => "00111100100100011000110001111001", 
    153 => "00111101100101101011001011010001", 
    154 => "00111100111011100011010111101001", 
    155 => "10111101010110011011000110011000", 
    156 => "00111101101101111100101001101100", 
    157 => "10111110000110110010101101001011", 
    158 => "10111101100110000000001010110110", 
    159 => "10111101101001101111111010101110", 
    160 => "10111110100111001000011111000001", 
    161 => "10111101101001010111001101110000", 
    162 => "10111101111000100001001011101000", 
    163 => "10111101001011001111111100001111", 
    164 => "00111101110111000000111110010010", 
    165 => "10111110101000110100011000010111", 
    166 => "00111010100111101010100101011110", 
    167 => "10111101100001010000100101110100", 
    168 => "10111101000110110011111010101111", 
    169 => "00111011111100011000111100101010", 
    170 => "00111101011010010010011011100110", 
    171 => "00111101001010111101011100011111", 
    172 => "10111110001010000100011000110001", 
    173 => "10111110100010011010101011000100", 
    174 => "10111101111110111011100000010100", 
    175 => "10111101100001011100100101110000", 
    176 => "10111101001110111000110000110010", 
    177 => "10111101101111100111011001110101", 
    178 => "00111101100111010110101110100111", 
    179 => "10111110001010101011110001111010", 
    180 => "10111101101100010010110011101001", 
    181 => "00111100011010010010101000000011", 
    182 => "10111101101000100011010100000110", 
    183 => "00111101100101000111000110000100", 
    184 => "00111010111011110001000001000000", 
    185 => "00111101101100101010101101010010", 
    186 => "10111110000010011100001011011100", 
    187 => "10111101001111100001000111001001", 
    188 => "00111101110010100000100101111101", 
    189 => "00111110000001101000010001010000", 
    190 => "10111110001000101100111011010100", 
    191 => "10111101110001100100110010111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibom is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibom is
    component conv_2_conv_2_weibom_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibom_rom_U :  component conv_2_conv_2_weibom_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


