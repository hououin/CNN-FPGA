-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiCeG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiCeG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100110101101011000011011", 
    1 => "10111101100011101011100101010101", 
    2 => "10111100110011111100000000010010", 
    3 => "00111101010110001000001000110111", 
    4 => "00111101101001100100110010110011", 
    5 => "00111101000101000101001000110000", 
    6 => "00111101110000100100110110010101", 
    7 => "10111110001101111100001110001110", 
    8 => "00111110000110110001111110110010", 
    9 => "10111100001001010010111111010110", 
    10 => "00111101111010010000000110110000", 
    11 => "10111011000001100110010010010100", 
    12 => "00111101000000101100001101011000", 
    13 => "10111100101100111110011111111100", 
    14 => "10111101101001001110101001111010", 
    15 => "00111011110111001000100000001111", 
    16 => "10111110000010111100100000100101", 
    17 => "10111110000110111110100101010111", 
    18 => "10111110100010111000111111000100", 
    19 => "10111100101011100010001010011011", 
    20 => "10111100100000100100010001110111", 
    21 => "10111110100001100001001110111100", 
    22 => "10111110001010001111000101100111", 
    23 => "10111101101010000010011110000110", 
    24 => "00111100100100110110111111100001", 
    25 => "00111101011001011100000011010101", 
    26 => "10111101010101111010100010110001", 
    27 => "10111110000000101111101011001101", 
    28 => "10111101100010100110111011001011", 
    29 => "00111110000100101110101110001111", 
    30 => "00111011000111111111110000110111", 
    31 => "10111110001000100110110011100000", 
    32 => "10111110000000010101000110100011", 
    33 => "10111110100000000111110001001011", 
    34 => "00111101000011100100100101101010", 
    35 => "00111101110011101111011000111110", 
    36 => "10111100100100110111101000011001", 
    37 => "00111101110001000001010100010100", 
    38 => "10111100100110001001000100000000", 
    39 => "10111100100101110001111010001111", 
    40 => "00111101010010001100100111111111", 
    41 => "00111101011101111000010010100101", 
    42 => "10111100001100111000011010110110", 
    43 => "00111101100110011111000011111000", 
    44 => "00111011101010101000101010010110", 
    45 => "00111101101010111001011010001100", 
    46 => "10111100101110101001000000101011", 
    47 => "10111101000111111110100001000011", 
    48 => "00111100100010100110001111111011", 
    49 => "10111110011110000001010110110001", 
    50 => "10111100001001001100111110100010", 
    51 => "00111110000101110000100010100001", 
    52 => "10111110100110100111110010101111", 
    53 => "10111101011111101011011101111011", 
    54 => "00111101100001011110000000011101", 
    55 => "10111110011100110111000100110101", 
    56 => "10111110010100001001000001000001", 
    57 => "00111100100001101011110001111011", 
    58 => "10111101110110110100000111010000", 
    59 => "00111101011001001011001001111001", 
    60 => "00111101011010111100011000111100", 
    61 => "10111101001010011110010111010010", 
    62 => "00111100011101011011100100110000", 
    63 => "00111101000010101010101010001101", 
    64 => "00111100010110011001111101000111", 
    65 => "00111101101011010111100000001111", 
    66 => "00111101001110000100011001000101", 
    67 => "10111011011000001011010000100000", 
    68 => "00111100110101011000000001100011", 
    69 => "10111101000100111100000011111011", 
    70 => "00111101001000101010000000101000", 
    71 => "10111101100101100110011000011110", 
    72 => "00111100000111010001110000001101", 
    73 => "10111100100001011001101110000000", 
    74 => "00111101110100001110111011100100", 
    75 => "10111101111011001101101001001110", 
    76 => "10111101000010010000010010011011", 
    77 => "10111101010111110001010010100101", 
    78 => "10111101100100011111000010111000", 
    79 => "10111011111011001010011010100111", 
    80 => "00111100101100011001001111101110", 
    81 => "00111101001000001011110001011001", 
    82 => "10111100101011010001000011101001", 
    83 => "00111010010000000110111100100110", 
    84 => "10111110100011010000010100100010", 
    85 => "10111110001010100011100000111111", 
    86 => "10111100100100011001100000000111", 
    87 => "10111101110101000000100001101011", 
    88 => "00111101000010011111100011111100", 
    89 => "10111101000001010110010010111001", 
    90 => "00111100010000110100111011011110", 
    91 => "10111110101000000111000010000111", 
    92 => "00111100001111100100000010101011", 
    93 => "00111110000010010010100011001000", 
    94 => "10111110010110110101110110100110", 
    95 => "10111100111010100110000100010000", 
    96 => "10111101110111000010101011111010", 
    97 => "00111101110100011100110101101111", 
    98 => "00111101100001011001110010000000", 
    99 => "10111101100011010011111001001011", 
    100 => "00111100011110110010111011001100", 
    101 => "10111101100010001101000011001110", 
    102 => "10111101010111000011100011111111", 
    103 => "10111101100100010101110110010001", 
    104 => "10111101101010001101001111001111", 
    105 => "00111100111111101000110110101101", 
    106 => "00111101011001101001000110000011", 
    107 => "10111101111011010010011101101111", 
    108 => "10111101101100001001100001010111", 
    109 => "10111100110010101011110001011000", 
    110 => "10111101111011011011100000011100", 
    111 => "10111101100111001110110110000111", 
    112 => "10111101011001101100111111010001", 
    113 => "10111110000101010001010000111000", 
    114 => "00111100110110111000101111011011", 
    115 => "00111101011000000111000111100100", 
    116 => "00111011110011101111100111000001", 
    117 => "10111101111011110110101111011001", 
    118 => "10111100101000100101011010100100", 
    119 => "10111101110010011000010011011011", 
    120 => "00111100101001010000100100111001", 
    121 => "10111101001010010000101000111010", 
    122 => "10111110000111010100100010110110", 
    123 => "00111101101101100000111101100111", 
    124 => "10111101011101011010000100000000", 
    125 => "00111101010010110001100001101011", 
    126 => "10111110001000110101010010001011", 
    127 => "10111101000000010000001011010100", 
    128 => "10111100000000001101101111010101", 
    129 => "00111101100100001100000010010000", 
    130 => "00111110000100001001001011001101", 
    131 => "10111101000010100111010110001011", 
    132 => "00111110001010110001111000011101", 
    133 => "10111110010100101010010001110110", 
    134 => "10111101101001000101010000000010", 
    135 => "00111101100100011000000010011010", 
    136 => "00111101101001110000101010011000", 
    137 => "10111100101111110111000111101000", 
    138 => "10111110001011111100111011001011", 
    139 => "10111110100100010100000100000000", 
    140 => "10111101110110000011000101000011", 
    141 => "10111010010000111100111010110000", 
    142 => "10111101110000100100110100111100", 
    143 => "10111100111000100111000100001111", 
    144 => "00111101100010100111010011010000", 
    145 => "10111110001110000111001110111010", 
    146 => "10111100111100110110100000001101", 
    147 => "10111101000110101100010000010111", 
    148 => "10111101111000101110111110011001", 
    149 => "10111101100010001000111010011100", 
    150 => "00111110000100001010110010100111", 
    151 => "10111110011010101100010101011010", 
    152 => "00111101010101010011001100111010", 
    153 => "10111101101000111100100100000100", 
    154 => "10111101001111010010001000011100", 
    155 => "10111101101100000101101101001010", 
    156 => "00111101100001010001011111011110", 
    157 => "10111100011001110010110010000010", 
    158 => "10111101111000001000101101111111", 
    159 => "10111101110010011010001000001110", 
    160 => "10111110101100100010101111000110", 
    161 => "00111110000111000111111111010101", 
    162 => "10111110010000011011101010100000", 
    163 => "10111100011010000110111100011100", 
    164 => "10111100011100001001110010110000", 
    165 => "10111110010110100001100011001010", 
    166 => "10111110000000101101011100100010", 
    167 => "10111101010101000100001110100011", 
    168 => "00111101010011101100011000001010", 
    169 => "10111110000111100111101000000101", 
    170 => "00111110000011110110000101101110", 
    171 => "00111101010010100100001111000000", 
    172 => "10111101101001010000001101010100", 
    173 => "10111101100101010111011111011001", 
    174 => "10111101100000010101110111001101", 
    175 => "10111110001111110100110010111101", 
    176 => "00111001011000001100001011101101", 
    177 => "00111101110000011110110101111100", 
    178 => "00111100111000001000110001010001", 
    179 => "10111101111000000101001011111011", 
    180 => "00111101111001011000111101110101", 
    181 => "10111101100001110100101010001100", 
    182 => "00111101001111010111111111101000", 
    183 => "00111110000101100011100000001111", 
    184 => "10111100100101101101101101011100", 
    185 => "10111110001001000010010110111101", 
    186 => "10111110000110111001011111010011", 
    187 => "10111101010010010111001100111100", 
    188 => "00111100111001001100110100110000", 
    189 => "10111101000100110000110010010110", 
    190 => "10111101001111001011010100101111", 
    191 => "00111100010000010110011010100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiCeG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiCeG is
    component conv_2_conv_2_weiCeG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiCeG_rom_U :  component conv_2_conv_2_weiCeG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


