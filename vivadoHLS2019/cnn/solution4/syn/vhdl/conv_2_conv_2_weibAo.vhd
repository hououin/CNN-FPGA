-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibAo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibAo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011100111010010111010111", 
    1 => "00111101011101011011100100100100", 
    2 => "10111110000110100110110101101010", 
    3 => "00111101010101111001001001001110", 
    4 => "00111110000001000100010010100101", 
    5 => "00111100100100001001110010000100", 
    6 => "10111011111011011000000000011011", 
    7 => "10111101011010100101110101001011", 
    8 => "10111100101100111110011011101100", 
    9 => "10111100011000001111110111001001", 
    10 => "00111101011111000010111001100011", 
    11 => "10111101101001011111001011101101", 
    12 => "00111110000000101011111101000111", 
    13 => "00111110001100101101001011010101", 
    14 => "00111110000010011111001100010101", 
    15 => "00111110000101111001010000000101", 
    16 => "10111101100010110001011001000111", 
    17 => "10111101100001000111110010010101", 
    18 => "00111101011101100100111111101110", 
    19 => "10111110001011100000111100110011", 
    20 => "00111110010001101110000101000001", 
    21 => "00111110000011000101000000001111", 
    22 => "00111101101110000011011001101111", 
    23 => "00111101000000101001011011001110", 
    24 => "00111101101000011001111010010011", 
    25 => "10111100111111011100110000010011", 
    26 => "00111100110001000001101000101100", 
    27 => "10111110011110111111111010001010", 
    28 => "00111110001100100001100001110000", 
    29 => "10111101110000111001011101110010", 
    30 => "00111101000010110101001010100101", 
    31 => "10111110011001000110000011001011", 
    32 => "00111101010110000010101101111111", 
    33 => "00111101100010110101111110010111", 
    34 => "00111101101100000001000110101101", 
    35 => "10111101000010110011100001010110", 
    36 => "10111110000011101001110110010110", 
    37 => "00111110000110110110010111001000", 
    38 => "10111101100011000111001110001001", 
    39 => "00111101100000111110010111011000", 
    40 => "10111110100011011011101000100011", 
    41 => "00111101110011011010010011110010", 
    42 => "10111101101001010010110111110001", 
    43 => "00111101001110110111100111100110", 
    44 => "00111100101101001010010011101011", 
    45 => "00111101001010111110100101101011", 
    46 => "00111100011010101000111000101010", 
    47 => "00111110010111000010100001010000", 
    48 => "10111101110101110000100101010101", 
    49 => "10111100011111110000011100010011", 
    50 => "10111110000010101010100011011101", 
    51 => "10111101101010010101000011001100", 
    52 => "10111110001010010000000111111110", 
    53 => "00111101000101110101100111001010", 
    54 => "10111110011111001110111111110000", 
    55 => "10111100110001001010110010011010", 
    56 => "00111101001000010010101111101101", 
    57 => "10111011011011111010100011011110", 
    58 => "00111101100001101111110110010001", 
    59 => "10111101001101110011011100010101", 
    60 => "00111101011100001110011011100011", 
    61 => "00111101000101000100101101100011", 
    62 => "10111101101011001110001101010110", 
    63 => "00111100111101001111011100111011", 
    64 => "10111101010111111110110010010110", 
    65 => "10111100110111001010110111110100", 
    66 => "10111100001001011111001101100110", 
    67 => "10111101101011000001010001111111", 
    68 => "00111101100010001001001001111111", 
    69 => "00111110001110110111011010111011", 
    70 => "00111100100011100011110110111101", 
    71 => "00111101000110011110011111100111", 
    72 => "00111101100110110110110101110011", 
    73 => "00111101010111001011010111010101", 
    74 => "00111101111101110011001000100110", 
    75 => "00111101001011100001111100111001", 
    76 => "10111100110011100010111110011000", 
    77 => "00111101001111100000101100011000", 
    78 => "10111100111110011101010100001111", 
    79 => "10111101011101100111100010100000", 
    80 => "00111011110001011011000100111011", 
    81 => "10111101101011111011110010000111", 
    82 => "00111101011100001110010000111010", 
    83 => "00111101110000011111010001001010", 
    84 => "10111101111011011100001101111110", 
    85 => "00111101100000101001110110010001", 
    86 => "00111101000001100110000101001000", 
    87 => "00111101101100001111010110011110", 
    88 => "00111110000010011010001010100110", 
    89 => "10111101101001110110101110101000", 
    90 => "10111101100011001010011100011000", 
    91 => "10111101110000000000010001111100", 
    92 => "00111101011101100001000101110100", 
    93 => "10111100001001000010011101110010", 
    94 => "00111101001000010011100101100100", 
    95 => "10111101111111111101100110100010", 
    96 => "00111101101010110010110100101101", 
    97 => "10111101111001001000111100101100", 
    98 => "00111101100000000110110010000101", 
    99 => "10111101011111011001011100011010", 
    100 => "10111101001000000111001110001001", 
    101 => "10111110000101010101111101110110", 
    102 => "10111101000010111110001100000000", 
    103 => "00111100110001010001001101111011", 
    104 => "10111101001111001101000100101000", 
    105 => "00111101000110010100110100100000", 
    106 => "00111110000001100110111010000110", 
    107 => "10111101010010001011001001111111", 
    108 => "10111101101000111011011000100111", 
    109 => "00111101101000110111111100000001", 
    110 => "00111101111001110000110100000010", 
    111 => "00111101001001110011111110101110", 
    112 => "10111010101010000111000011010100", 
    113 => "10111110011011010000101100110110", 
    114 => "00111101100001111010111010111010", 
    115 => "10111101101111110000100000001110", 
    116 => "10111110001010001100101010011000", 
    117 => "00111110000100110001011100101010", 
    118 => "10111101000110110000000010111100", 
    119 => "10111110011010110000101000001000", 
    120 => "10111101100001101010110100010011", 
    121 => "00111100010000001010111110111110", 
    122 => "00111101100110100100000010110000", 
    123 => "00111010100000110001100111000000", 
    124 => "00111101111110111101101000100010", 
    125 => "10111100101111110100001100100100", 
    126 => "10111101110001010011111110101010", 
    127 => "10111101010101000010011110100101", 
    128 => "00111100011001101010010010001010", 
    129 => "10111101110000101001110100011001", 
    130 => "10111101110000000010011110101010", 
    131 => "10111101101010000000110000101110", 
    132 => "00111101100110000101101110101010", 
    133 => "00111011000011101101111110110011", 
    134 => "00111011111000001011010100110101", 
    135 => "00111101100000101010100000110011", 
    136 => "00111101010000100001000100001000", 
    137 => "00111101010011100110110010110100", 
    138 => "10111110011111011111001001111000", 
    139 => "10111100100101000111010001101111", 
    140 => "00111101110110000101000100110110", 
    141 => "10111011010100001100101101110011", 
    142 => "10111100101011100000000100001001", 
    143 => "10111011001101110101110001110001", 
    144 => "10111101101011111110111111001011", 
    145 => "10111101110000111001100110001110", 
    146 => "10111101101101110001001111000111", 
    147 => "00111101101111000001001001010101", 
    148 => "10111110010011110010000110011011", 
    149 => "00111110010001010010001100000010", 
    150 => "00111101110000010011100000001101", 
    151 => "00111110000101111010010110010001", 
    152 => "00111011110001100011100111001111", 
    153 => "00111100110111101000001010000000", 
    154 => "10111101000110110011000110100101", 
    155 => "10111101011011010110000101000001", 
    156 => "10111101110111111101100010010100", 
    157 => "10111101001110101101101010011011", 
    158 => "00111100101101010110111100110000", 
    159 => "10111100101101011010011001000111", 
    160 => "10111101110101110001010000100001", 
    161 => "10111101101100100110111001111110", 
    162 => "10111101101110111010100101101001", 
    163 => "10111101100010011110100110010000", 
    164 => "00111101100100000101010100010101", 
    165 => "10111101011001100010111101000110", 
    166 => "00111100010100011010111010000011", 
    167 => "00111100000010001000110110001000", 
    168 => "00111011111110100000010100111000", 
    169 => "10111101011101011010001101100011", 
    170 => "00111101010101010101100111101100", 
    171 => "10111101001011110000110010100000", 
    172 => "00111101001110111111011000110011", 
    173 => "10111101110100100101000000000010", 
    174 => "10111101101111001010010110101000", 
    175 => "10111101001010001000000011000001", 
    176 => "10111100011111101111111010101101", 
    177 => "10111100101110101100001110111001", 
    178 => "10111101001111101010000001110100", 
    179 => "00111011011011110011110101001001", 
    180 => "00111100110001111011111101101110", 
    181 => "00111110010010011010001001010010", 
    182 => "10111101001001110011000100110111", 
    183 => "00111100111011011010000001111001", 
    184 => "10111110001001001101111111011101", 
    185 => "00111101011001111010000100011101", 
    186 => "00111101110010101110110110100010", 
    187 => "10111101100101101110100010010010", 
    188 => "00111101100111101000110110100100", 
    189 => "10111101110111111110011101100111", 
    190 => "10111101100001100111011010011101", 
    191 => "10111100110001011010000101110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibAo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibAo is
    component conv_2_conv_2_weibAo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibAo_rom_U :  component conv_2_conv_2_weibAo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


