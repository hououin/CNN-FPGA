-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiYie_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiYie_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001111100100101101100111", 
    1 => "00111011111010101010110001111111", 
    2 => "00111110011000100010100100101000", 
    3 => "10111101001011000010010100001011", 
    4 => "00111100001111110011010100000101", 
    5 => "10111101100000100101011101111101", 
    6 => "10111110101010010110001101110011", 
    7 => "00111100101010111110011110100100", 
    8 => "10111110111101001111101011000000", 
    9 => "10111101010100110111011100101110", 
    10 => "00111100010111101000000101011000", 
    11 => "00111110011001100001111100000110", 
    12 => "10111110000100000011100100101101", 
    13 => "10111110000110111011001001000110", 
    14 => "10111111000011101100101111111101", 
    15 => "10111110100001111100011100111110", 
    16 => "10111011111010010001000010100100", 
    17 => "10111101010000001100000111000010", 
    18 => "00111110010110110000110110011100", 
    19 => "00111101001001001101011011001010", 
    20 => "00111101100011110110101001100011", 
    21 => "10111110001100001000000110011011", 
    22 => "10111110010011011001101100000110", 
    23 => "00111101011100101110100011001011", 
    24 => "10111110111000000001010111001101", 
    25 => "10111110000111110010000011101100", 
    26 => "10111101111101001111001001101001", 
    27 => "00111100110110010000111011000100", 
    28 => "10111110000110101110011011100110", 
    29 => "10111100100101110001110100010111", 
    30 => "00111110010011111011000111001000", 
    31 => "10111101100100101111100110101110", 
    32 => "10111011111011111110100000001000", 
    33 => "00111101111111001100100001100001", 
    34 => "00111101001100100011000000001011", 
    35 => "00111101001010110010010000110111", 
    36 => "00111101100000000101000100010000", 
    37 => "00111101111111100101110100100010", 
    38 => "10111101110000101100100001010100", 
    39 => "10111110101000000001011100110010", 
    40 => "10111101111111101001010101010000", 
    41 => "10111110110110000110100110110100", 
    42 => "10111110011111000000000000111001", 
    43 => "10111110011010011100010110001001", 
    44 => "00111101111010110110010010011000", 
    45 => "10111101011100110101100010110000", 
    46 => "10111110011111001101111001010011", 
    47 => "10111110100101011011111111010010", 
    48 => "00111101101101010011001001110111", 
    49 => "00111101011010111101001001111001", 
    50 => "10111110101011011010011100001000", 
    51 => "00111100110001000000100100000100", 
    52 => "10111101011100111100010110111000", 
    53 => "10111110100001010010011000100010", 
    54 => "10111110100111111000011100000111", 
    55 => "00111101010100100001011000011011", 
    56 => "00111101000010100110001011001110", 
    57 => "00111101101010000101100000110110", 
    58 => "10111101010000100010101111000101", 
    59 => "00111100101000001101000011000001", 
    60 => "10111110100011100100011001000000", 
    61 => "10111110100110001001000000010000", 
    62 => "10111011000010111011001001110011", 
    63 => "10111110001000111110110100101100", 
    64 => "10111101110000100001001101101011", 
    65 => "10111101111110011101100101100101", 
    66 => "10111110000111011010111000110101", 
    67 => "00111101110000010101001000110111", 
    68 => "10111101111110100010000000101111", 
    69 => "10111101011110101010000111110010", 
    70 => "10111100100101111010000011010111", 
    71 => "00111101000000100111100011110001", 
    72 => "10111110111100011010100010001110", 
    73 => "10111011101100100111010101100111", 
    74 => "00111110000110101000011010001001", 
    75 => "10111101000100011010101000011010", 
    76 => "10111101110001101001000011111101", 
    77 => "10111110101100101110011010010101", 
    78 => "10111110100101111011100111110101", 
    79 => "10111110010010101010111010001100", 
    80 => "10111110001011110000000100010110", 
    81 => "00111101000011101101010100111100", 
    82 => "10111110000101010110000000101110", 
    83 => "00111100111010101111000001011111", 
    84 => "00111110100011011001010111011110", 
    85 => "10111110010001100110001010100010", 
    86 => "10111110111010000100000111100001", 
    87 => "10111101001011011011001100111101", 
    88 => "10111110000101011101111011101010", 
    89 => "10111110100001110100100111001001", 
    90 => "10111100110001000110101001101000", 
    91 => "10111110010011111101111011111111", 
    92 => "10111110011000110111110001101110", 
    93 => "10111101011111011001111110110101", 
    94 => "00111110010001011100111110001101", 
    95 => "00111101110011000111011011011110", 
    96 => "00111101100011010110110100001011", 
    97 => "00111110010010000101111001100010", 
    98 => "00111100110011000000010000011011", 
    99 => "00111100011110001111000011100100", 
    100 => "10111101011111000011101011100111", 
    101 => "00111101111000000101110110000000", 
    102 => "10111110000101011100001110111011", 
    103 => "10111110100111000111110010110011", 
    104 => "10111101111001010010011011110111", 
    105 => "10111101110000011110100110000011", 
    106 => "10111110001100000101011110110011", 
    107 => "10111101101000110100000101011111", 
    108 => "00111101100110100000001010111000", 
    109 => "00111101110000010010100111011000", 
    110 => "00111100110011000101111111110010", 
    111 => "10111100000111010101011101111101", 
    112 => "10111100110101010110101010111111", 
    113 => "10111110000101101100101010001001", 
    114 => "10111110010011110001000000010101", 
    115 => "00111100111010100001000110101110", 
    116 => "10111110000010001001111110100100", 
    117 => "10111101010000000100110010111100", 
    118 => "10111110011111110001010110101110", 
    119 => "00111100101010010000101010010101", 
    120 => "00111110000111101001000101000001", 
    121 => "00111110000100100101001101000100", 
    122 => "10111110000110110011110000001110", 
    123 => "00111100111001010000010110001001", 
    124 => "10111110110011100111000111011110", 
    125 => "10111101110001101010100100100111", 
    126 => "00111101100100101101010000001000", 
    127 => "10111101000101100001001000101000", 
    128 => "00111110010011001000100110100111", 
    129 => "10111110001000001001110001011101", 
    130 => "10111110011100000011001000111111", 
    131 => "00111110010001111111000111000101", 
    132 => "10111110100100011010111110101101", 
    133 => "00111110011110011110101011010100", 
    134 => "00111110010000101100001100100111", 
    135 => "10111101100011011001111010000110", 
    136 => "00111110010110001101111100010011", 
    137 => "00111011100111101100010000110000", 
    138 => "00111110000010001000010011111000", 
    139 => "00111101000011000101000100100000", 
    140 => "00111101100111110101011100110011", 
    141 => "10111110100100101001100100010110", 
    142 => "00111101111101110101100010001010", 
    143 => "10111100101111000111101101010100", 
    144 => "00111110000010001001111011100011", 
    145 => "00111110010111101110000111101101", 
    146 => "00111101001011110001110111101001", 
    147 => "10111101111011010111111010001001", 
    148 => "10111110001011100000111010111010", 
    149 => "10111110111100100101101011000111", 
    150 => "10111110011001001110000010010101", 
    151 => "00111101011101001010111100110000", 
    152 => "00111101100111111111011010111101", 
    153 => "00111110000110011110001111100001", 
    154 => "00111101100010000101000000001001", 
    155 => "00111101100011101000010100100101", 
    156 => "10111101001111001011010111100011", 
    157 => "10111100011001101011110001000110", 
    158 => "10111101010110100001101101111010", 
    159 => "00111100101111101110101010111010", 
    160 => "00111110010011001000011001111100", 
    161 => "10111101111011100001001101011111", 
    162 => "00111110010101100001010111010111", 
    163 => "00111101010111110000010110000011", 
    164 => "10111110001100000100100011110111", 
    165 => "10111110001000101101110101110111", 
    166 => "10111110011011011011010001010111", 
    167 => "00111010110011101010100101000100", 
    168 => "10111110111110000010100101101110", 
    169 => "00111110001100000110111111010011", 
    170 => "10111110010100000100011111001011", 
    171 => "00111110100100001111110010101000", 
    172 => "10111101000000110101000011101110", 
    173 => "00111110100000000011000101010000", 
    174 => "00111101111111111110000110000001", 
    175 => "00111101010011100011010010111100", 
    176 => "10111101101110011000011000111101", 
    177 => "10111101101010010010101011111101", 
    178 => "10111101000011001101001100100111", 
    179 => "10111100100110111010111001010100", 
    180 => "00111110001101111001010110101110", 
    181 => "10111110100100010010101110101000", 
    182 => "10111110000110111101101100110100", 
    183 => "10111101011100100110101111001010", 
    184 => "00111110000011100100010100010011", 
    185 => "10111101111111111010101010110000", 
    186 => "10111101110110001110100010111011", 
    187 => "00111101000111101000011001110110", 
    188 => "10111110100000011000110101100100", 
    189 => "00111101000011110001011100100111", 
    190 => "00111101010011111110010110011110", 
    191 => "10111101011001111000110010111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiYie is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiYie is
    component conv_2_conv_2_weiYie_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiYie_rom_U :  component conv_2_conv_2_weiYie_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


