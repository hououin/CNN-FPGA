-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibjl_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibjl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111111000001000100011", 
    1 => "10111110000100001100010100110100", 
    2 => "10111101010100111011011010000000", 
    3 => "10111101001110011110001111010000", 
    4 => "10111101101011010010100110100110", 
    5 => "10111101110101001001111010011000", 
    6 => "10111110001101101001011000010010", 
    7 => "00111110000111101111101100101000", 
    8 => "00111010101010000111111101001000", 
    9 => "00111110000101110100011011100001", 
    10 => "10111101001110111000110101100110", 
    11 => "00111110100000101010100011100001", 
    12 => "10111110010010010101111011111111", 
    13 => "10111110101111100101000001111101", 
    14 => "10111101101110010100001010111000", 
    15 => "00111101010111110000110111110111", 
    16 => "10111110010111001100100000010100", 
    17 => "10111110100110011110100101101110", 
    18 => "00111101001000100111101001111111", 
    19 => "00111100110000000111010110001010", 
    20 => "00111110100011010000010100100000", 
    21 => "10111111000000110000000010101100", 
    22 => "10111110100101101001110111000000", 
    23 => "00111110000001110100001011110100", 
    24 => "10111110100010110001101110100010", 
    25 => "00111110000001100001010000111101", 
    26 => "10111101000111011010010000010001", 
    27 => "00111110000001101110111101111100", 
    28 => "10111110100110101111111110111110", 
    29 => "10111110001011101100101010111100", 
    30 => "00111101011011000110100100000111", 
    31 => "10111101101111110111010001010100", 
    32 => "00111101100010100110110100100000", 
    33 => "00111110011111101011001000001111", 
    34 => "00111100100010011000000001010110", 
    35 => "10111101010011110111100110111010", 
    36 => "00111100101101001111111011110100", 
    37 => "00111110000001111010001101010011", 
    38 => "10111100111111110011000100101100", 
    39 => "10111100100001110111111011110001", 
    40 => "10111101100111110101111010101111", 
    41 => "00111110000001010100011000000001", 
    42 => "10111101111000001111111011001110", 
    43 => "00111101011001110001110010110100", 
    44 => "00111101000100011101010011100111", 
    45 => "10111110010010110011011011010000", 
    46 => "10111110000010000001111000101110", 
    47 => "10111100111011001110111010101101", 
    48 => "00111101101100010101100011100010", 
    49 => "10111101100010010000110110010011", 
    50 => "10111110110100000001001000101110", 
    51 => "10111101001000000101100111000100", 
    52 => "10111101111001011010110000010010", 
    53 => "10111101111011000101000110001000", 
    54 => "10111110100110010011011001011011", 
    55 => "10111101100110111110010001011001", 
    56 => "10111110000001100011111110001001", 
    57 => "00111110010010010011111110001011", 
    58 => "10111110010010110101110000111100", 
    59 => "10111100111000100101110001001001", 
    60 => "10111110011011010010111011100000", 
    61 => "00111011100111100000101110000110", 
    62 => "00111101000101010001011111010010", 
    63 => "00111101100110111110010010110001", 
    64 => "10111100100011111110100110000111", 
    65 => "10111110010101101100011100010001", 
    66 => "10111110100011001100110000000000", 
    67 => "00111110100011001110100000100110", 
    68 => "10111110110010011101110111111000", 
    69 => "10111101100101111110000011110001", 
    70 => "10111110011100110000000101100111", 
    71 => "00111100111011100111010101011100", 
    72 => "10111110001100011000111011010000", 
    73 => "00111101100000010000101001110100", 
    74 => "00111101000010011001010000010110", 
    75 => "00111101101100001101010001000100", 
    76 => "10111110011100101000001111111100", 
    77 => "10111110100111001000100110000011", 
    78 => "10111101110011111100010101000111", 
    79 => "10111101110011101000001110100110", 
    80 => "10111101100011111100111100001001", 
    81 => "00111101111001100100110000100011", 
    82 => "00111101101010101011011010101010", 
    83 => "00111101111111000000111001111011", 
    84 => "00111101110110000111101111100100", 
    85 => "10111110111101100010011000110011", 
    86 => "10111110011000101010001110110110", 
    87 => "10111101010101111000000101101111", 
    88 => "10111110011110001101011101001010", 
    89 => "10111110100011000010000110000100", 
    90 => "00111101110000000110000000111101", 
    91 => "10111101111001101010011101101110", 
    92 => "00111100101110111111000101111111", 
    93 => "10111101001110111000010110100001", 
    94 => "10111100101001001001000000011000", 
    95 => "00111110100101001000110011001100", 
    96 => "00111101111010010110100011101111", 
    97 => "10111101100110000010100101000111", 
    98 => "00111101110001001010100001111011", 
    99 => "10111101111110000000011001110100", 
    100 => "10111110100101101100001000100100", 
    101 => "10111101000001011110000001001101", 
    102 => "10111110010011100100011011110000", 
    103 => "10111110100100011001010000100000", 
    104 => "10111101111010110010100011010111", 
    105 => "00111010000110000101111100110000", 
    106 => "10111110001111000011100011110001", 
    107 => "10111101000110111100001100011001", 
    108 => "00111110000100100101101111111101", 
    109 => "00111110011001011000110001001100", 
    110 => "00111101101011001001000101010000", 
    111 => "10111101111011111100110010100111", 
    112 => "10111100111010110001110101101101", 
    113 => "10111100101000011101101011110010", 
    114 => "10111110100011101110110110001101", 
    115 => "10111101100011111011000101011100", 
    116 => "00111110001110011101011101011110", 
    117 => "10111110010110001011010011011011", 
    118 => "10111110011101000111101110100110", 
    119 => "10111110101101010001110110011000", 
    120 => "00111100110101001000100110100000", 
    121 => "00111101101011010010110011011110", 
    122 => "10111110101111110100011011110000", 
    123 => "10111101010000100100000110110111", 
    124 => "10111110000011110011100101010011", 
    125 => "10111101101011001000110111000001", 
    126 => "10111101011101001100010110000011", 
    127 => "10111101010111011000010000111101", 
    128 => "00111101111000000101011100000111", 
    129 => "10111101000111110010010111010110", 
    130 => "10111110010011011111011001000011", 
    131 => "00111110000110101111011011001000", 
    132 => "10111110101011010000000010010111", 
    133 => "00111110100010110011101110100001", 
    134 => "00111100010110101100010011100000", 
    135 => "00111101111011010110000011111011", 
    136 => "00111101110110100101110111010111", 
    137 => "10111011100011010100001101011110", 
    138 => "10111101100000001110000001001110", 
    139 => "10111110001000110000101100001111", 
    140 => "10111101000000101110010110001101", 
    141 => "10111110100000110010000001111100", 
    142 => "00111101110000111100101011111101", 
    143 => "00111101111010101111100010100100", 
    144 => "00111110000101000011000011000010", 
    145 => "00111110100001011011001010001011", 
    146 => "00111100111100010111001010100100", 
    147 => "10111100111011110110000101010101", 
    148 => "10111110010000111101001011011111", 
    149 => "10111111000111100111111111101000", 
    150 => "10111101101001110100011000100001", 
    151 => "10111101111001011100111100011011", 
    152 => "10111110000111100101011110001101", 
    153 => "10111100010001001001110101010000", 
    154 => "00111110000100000111111110110111", 
    155 => "00111110001100111010011011110100", 
    156 => "00111101011101110110001000011011", 
    157 => "10111101100110011101001110110011", 
    158 => "10111101100010101110100100111001", 
    159 => "10111100001010101010101101111110", 
    160 => "00111110000000111111011011101110", 
    161 => "00111101011101011111001101011010", 
    162 => "00111101110110101011001010100000", 
    163 => "10111110100111001100001100100101", 
    164 => "10111110100110010000111011010101", 
    165 => "10111110110001110011010011000110", 
    166 => "10111110010110110001110001111110", 
    167 => "00111110011010000110101111000100", 
    168 => "10111110110001000001110010000001", 
    169 => "00111110001111100111110100111010", 
    170 => "10111101100101101110111011001010", 
    171 => "00111110000001001101101100001111", 
    172 => "10111110110110000010101101000111", 
    173 => "00111101101010011001110011001000", 
    174 => "00111110000011001000100010110001", 
    175 => "10111100000011110100011110011011", 
    176 => "00111101000110100010101010100010", 
    177 => "00111101100101001010001111100110", 
    178 => "10111110001100001100110001001010", 
    179 => "10111101101011010000011110100100", 
    180 => "00111101111101100001001001110001", 
    181 => "10111101101000010110000111010110", 
    182 => "10111110101001100100101001100110", 
    183 => "10111100111010000000101011010001", 
    184 => "00111110100000110100100011001101", 
    185 => "10111101110011111111000011001001", 
    186 => "10111110100100011101000100010010", 
    187 => "10111101110111110011011100001010", 
    188 => "10111101101110010111000001101110", 
    189 => "10111101111101000011110010100111", 
    190 => "00111100110111011101000100101100", 
    191 => "00111110000000000100111110010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibjl is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibjl is
    component conv_2_conv_2_weibjl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibjl_rom_U :  component conv_2_conv_2_weibjl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


