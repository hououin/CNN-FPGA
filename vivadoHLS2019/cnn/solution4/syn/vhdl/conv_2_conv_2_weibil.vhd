-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibil_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibil_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111110101101010000001010", 
    1 => "10111110010000010111110011100001", 
    2 => "10111101011100101101001000011101", 
    3 => "00111101110110000011011101000100", 
    4 => "00111101011011001011001011001111", 
    5 => "10111101101110001110011010110111", 
    6 => "10111101100100001110000010111000", 
    7 => "10111101101000101010110000110011", 
    8 => "00111110001101111111001001100100", 
    9 => "10111110000001001010001001000001", 
    10 => "10111100010001000010001101000010", 
    11 => "10111101110011000101110001111101", 
    12 => "00111100111011110001000110001001", 
    13 => "10111101001010000010001101000000", 
    14 => "00111011100011110001101101110000", 
    15 => "00111110001011110010110101101111", 
    16 => "10111110010010011011011000010100", 
    17 => "10111101110100110000000100101101", 
    18 => "10111110100000001000110100111110", 
    19 => "00111101001111111101110101110101", 
    20 => "00111101001110001000100000000010", 
    21 => "10111110011000101000010110001100", 
    22 => "10111110010001110100100100010101", 
    23 => "00111110000011011101101111111000", 
    24 => "00111100011100011101010100101000", 
    25 => "00111110000010000111010000011110", 
    26 => "00111100101000101101100100010001", 
    27 => "10111110000011111101010000001111", 
    28 => "00111100010000011000110110001100", 
    29 => "10111101010110011100111100101011", 
    30 => "10111011110010011101000001110100", 
    31 => "10111110100101101101101001101011", 
    32 => "10111101011010110110101010110111", 
    33 => "10111100011010111111000110000100", 
    34 => "10111101001011001010100010110010", 
    35 => "00111101100101100000010101101110", 
    36 => "10111101001111101000001011011001", 
    37 => "00111101100111101111010100000001", 
    38 => "10111101110000101111000111011100", 
    39 => "10111100100010101001110010111110", 
    40 => "10111110100011011001001110111010", 
    41 => "00111110010110001000000010100001", 
    42 => "10111110010001010001010001101101", 
    43 => "00111110010110111100011101111010", 
    44 => "00111101000001111111101011001000", 
    45 => "10111100100001100101111011010000", 
    46 => "10111101000001101010011000001011", 
    47 => "10111101000011010111001011001001", 
    48 => "10111101100110100110100011000100", 
    49 => "10111101100001100110111010000111", 
    50 => "10111100101000010001101011110100", 
    51 => "00111101101000000001010011011111", 
    52 => "10111110011001011011000111110110", 
    53 => "00111101000101001011010111111001", 
    54 => "10111101011101010010100010001000", 
    55 => "10111101101110111100110010011001", 
    56 => "10111101101000100101010111001101", 
    57 => "10111110001101010100110101011101", 
    58 => "10111110000011110110101101110111", 
    59 => "00111100001101100011010011010100", 
    60 => "00111100000011110001011000011110", 
    61 => "00111101011010110101101001001001", 
    62 => "00111101110000001111010101101010", 
    63 => "00111101101000011011000000011011", 
    64 => "00111101011110000000001100100100", 
    65 => "10111101000000000010100010001111", 
    66 => "10111101011101100110000100001101", 
    67 => "10111011101010001011110011110101", 
    68 => "00111010110101011001001010000100", 
    69 => "10111100100000001001010101000101", 
    70 => "10111101101110001101000011111011", 
    71 => "10111100101001000010111111011010", 
    72 => "10111011100111110110010111010011", 
    73 => "10111101000000000110101011001010", 
    74 => "00111110001001001001010010001110", 
    75 => "10111101100001101010101101011001", 
    76 => "10111101110001110001001100110100", 
    77 => "00111101000010011111001000001000", 
    78 => "00111101100001111010101000001001", 
    79 => "00111010101110001010101011110110", 
    80 => "00111101101001011110010100101111", 
    81 => "00111100100000001011011111111001", 
    82 => "00111101101101001001011001110100", 
    83 => "00111101110110000100111010010011", 
    84 => "00111101011101100111010100101000", 
    85 => "10111101101101101011001101100001", 
    86 => "00111100110011000001110010001110", 
    87 => "10111100011010110111100110111011", 
    88 => "10111011101011010000000000110111", 
    89 => "00111011010100001001110011010000", 
    90 => "00111101001001010110000000010000", 
    91 => "10111101101000010001110000010100", 
    92 => "00111101110100010111101100000100", 
    93 => "10111100110100000111111111100111", 
    94 => "00111101101000011011110101000011", 
    95 => "10111100011111011001101010110011", 
    96 => "10111101000001001010000011100101", 
    97 => "10111101111011000101001000010000", 
    98 => "00111101011110001011001101011010", 
    99 => "10111101110011011001001110101101", 
    100 => "10111101101100111000010111000110", 
    101 => "10111100100000001010111110011100", 
    102 => "10111101101000010110010010001100", 
    103 => "10111101101000000101011011001000", 
    104 => "10111101110100001011011100110000", 
    105 => "10111101011010000101100110110111", 
    106 => "00111100111001001011100001010011", 
    107 => "00111100110011000110111000101101", 
    108 => "00111110000000110000101111111110", 
    109 => "00111100101101010010110001001000", 
    110 => "10111110000010011110000011011110", 
    111 => "10111100001011001000100100000000", 
    112 => "00111101001011001110010110000011", 
    113 => "10111100110101010110001111010000", 
    114 => "00111101001111001010100010010111", 
    115 => "00111101110011010011010000111001", 
    116 => "10111101100001101000010011100011", 
    117 => "10111101100010101000110110000011", 
    118 => "10111110010001010011101000100110", 
    119 => "10111110100011011100000100010110", 
    120 => "00111101011000000001110100011110", 
    121 => "00111101110101101010001111101100", 
    122 => "10111110101101110111001010111100", 
    123 => "00111101110011011001111100010110", 
    124 => "00111100100101000101111011001101", 
    125 => "00111101101001010000010101101011", 
    126 => "10111101000101000101010011011001", 
    127 => "00111101101011110000100101110001", 
    128 => "00111101100101011010000000111000", 
    129 => "00111110001010011110100111011001", 
    130 => "00111101101100011101110001101111", 
    131 => "00111100001111110101011000010101", 
    132 => "10111100110000111011001101101011", 
    133 => "00111010010100101101110101101101", 
    134 => "10111101101010001011001001000000", 
    135 => "10111100101011111110001000000001", 
    136 => "10111100111100100101011000110110", 
    137 => "10111101101101010101000010100101", 
    138 => "10111101011010111011001011111100", 
    139 => "10111110010000000001000111001010", 
    140 => "10111100101101110101000000101111", 
    141 => "00111101110011100000100100100101", 
    142 => "10111100101000101010111001101110", 
    143 => "00111100111100011111100011111010", 
    144 => "00111101000111100110010101000000", 
    145 => "00111101001100101011001100101101", 
    146 => "10111011001011111010001111101111", 
    147 => "10111101010100011110011010101101", 
    148 => "10111101101000000100101010001000", 
    149 => "00111100110001110000001100101101", 
    150 => "00111110000001011110010100010010", 
    151 => "10111110011110010010111011101111", 
    152 => "10111101011001000101001110010101", 
    153 => "10111101100111011110111000101101", 
    154 => "10111101010101011111101101101001", 
    155 => "00111101011110110110010101101010", 
    156 => "10111100101100010010001100110000", 
    157 => "00111101100110100111010100110000", 
    158 => "00111101010000101011110010101110", 
    159 => "00111100010000011001110101110010", 
    160 => "10111100110100111100001110101101", 
    161 => "00111100010110111010001110001111", 
    162 => "10111100100111010100010010010011", 
    163 => "10111110100011100110001101010000", 
    164 => "00111100001011010101100110001001", 
    165 => "10111110011000110001000000101100", 
    166 => "10111110001110100111001001000100", 
    167 => "00111110000010001010100110000000", 
    168 => "00111101110101101010101101111010", 
    169 => "10111101010000000011101110101010", 
    170 => "00111101011100011110011010010001", 
    171 => "00111101101100111111001010000001", 
    172 => "10111101110111001100011000101100", 
    173 => "10111100110010010101001000011010", 
    174 => "00111100110111100100011010100110", 
    175 => "10111101110101010011011011111100", 
    176 => "00111101100100010011101010111110", 
    177 => "00111101110110011000011101101011", 
    178 => "10111100101011001001101101011111", 
    179 => "10111101010001101110011100101111", 
    180 => "10111101100011111011111110011001", 
    181 => "00111100100001011011110001101101", 
    182 => "10111101100000000000101000111000", 
    183 => "00111101011111101101001010110000", 
    184 => "10111101001001001010011000010011", 
    185 => "10111110000000000100011110010010", 
    186 => "10111101011101010011110111111011", 
    187 => "10111100001110111110001110101111", 
    188 => "00111101100110100111000001110011", 
    189 => "10111110010111001100010001111110", 
    190 => "00111101010001110011010001001000", 
    191 => "00111101100100001101100111101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibil is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibil is
    component conv_2_conv_2_weibil_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibil_rom_U :  component conv_2_conv_2_weibil_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


