-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiDeQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiDeQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001111011011111001000", 
    1 => "10111110000011101110001110110001", 
    2 => "00111101010101001011001100101001", 
    3 => "00111101101100000011110011011111", 
    4 => "10111101100100011111111011011111", 
    5 => "00111011111010101011010010101001", 
    6 => "00111100110111000000010011011010", 
    7 => "10111110000000110010101101001010", 
    8 => "10111101001011110100000010011101", 
    9 => "00111101100100011001010010010010", 
    10 => "10111101000011100111010001100110", 
    11 => "10111010100111111001100011100101", 
    12 => "00111101010000011111111011000101", 
    13 => "10111101101001010100100100011010", 
    14 => "10111101011111010011001111000001", 
    15 => "10111101111000001111110101010010", 
    16 => "00111100111110101101010101111010", 
    17 => "10111011111010100100111101001111", 
    18 => "10111101100010011011101001101011", 
    19 => "10111101001100111101000101100110", 
    20 => "10111110000010110001011000011101", 
    21 => "10111110010011110011111000010101", 
    22 => "10111101111001001011110100101111", 
    23 => "10111101101100101011000001110000", 
    24 => "00111100100110101000010011111101", 
    25 => "00111101101111101001000100001111", 
    26 => "10111101101111001011000000101000", 
    27 => "00111101001111001100111001100111", 
    28 => "10111100000111100101101101100001", 
    29 => "00111101101110110111111100011011", 
    30 => "00111101110110111001110110100001", 
    31 => "00111100111100010100000011101100", 
    32 => "10111101101011100010110001000001", 
    33 => "10111110110010000110100111111111", 
    34 => "00111101111001011010000001101111", 
    35 => "10111100110100101000101010010110", 
    36 => "00111100100011111011100010100011", 
    37 => "00111101111100110011111000000001", 
    38 => "10111100101011111000101110100111", 
    39 => "00111101010001001011110111100010", 
    40 => "00111101010111101001110011000101", 
    41 => "00111110000110001001000010110110", 
    42 => "10111110010100101111011000111001", 
    43 => "10111110001010110100100000110000", 
    44 => "00111100100110011100011010101011", 
    45 => "10111101000100010000000101100101", 
    46 => "00111101010101110101001111101000", 
    47 => "00111101101111110100001101000111", 
    48 => "00111100101001100011000101110011", 
    49 => "10111110101010101010100001110000", 
    50 => "10111100110000110110010111101101", 
    51 => "00111101010001001101001010001000", 
    52 => "10111110011111101001011111111110", 
    53 => "00111101100111100001001101000100", 
    54 => "00111100110100010011011110111011", 
    55 => "10111101110110000110110010000011", 
    56 => "10111110000100001111010000111101", 
    57 => "00111101001001101001101101011011", 
    58 => "10111100101111101000010010111001", 
    59 => "00111101000100001001000010000010", 
    60 => "10111101011101100001110011100100", 
    61 => "00111100001000101000011101110010", 
    62 => "00111101100111001011100101010100", 
    63 => "00111101100010100100110101111010", 
    64 => "00111110011000000111111100011000", 
    65 => "10111101101110010001001111111011", 
    66 => "00111101001101010110011111111011", 
    67 => "00111101110001110110110101000101", 
    68 => "10111100110000100011000000101000", 
    69 => "00111101111111110110100001100001", 
    70 => "10111110001101110100110001011010", 
    71 => "10111101010101101000111110000001", 
    72 => "00111100111100000000001101001100", 
    73 => "00111011110001111101111110001001", 
    74 => "00111101100100110000000100100111", 
    75 => "10111101010011000011100001100010", 
    76 => "00111100101110110111010011011010", 
    77 => "10111110000110110000101010010001", 
    78 => "00111101111111111011000101110001", 
    79 => "00111100110100100011111000101001", 
    80 => "00111101101010001000000100001010", 
    81 => "00111101111111001101011001101100", 
    82 => "10111101110101101010110110000001", 
    83 => "10111101010000100011000000001011", 
    84 => "10111110101100101100010110101111", 
    85 => "10111110000011110101101000010100", 
    86 => "10111100101110010000100000101010", 
    87 => "10111110100110010110110101101000", 
    88 => "10111101101111101111011100001000", 
    89 => "10111101010100100000010010010101", 
    90 => "00111101100110110111101111110100", 
    91 => "10111110001101101011011010101110", 
    92 => "10111011011110010100000011001111", 
    93 => "00111101101100110111011010001001", 
    94 => "10111101101010000011110001001000", 
    95 => "10111101100010010101010001011100", 
    96 => "10111110001011000101000101110001", 
    97 => "10111101100111101001001001100101", 
    98 => "10111011100111110101000100111111", 
    99 => "10111101110111110001011111111100", 
    100 => "00111110000000110011000000010111", 
    101 => "00111101100011101011110101010111", 
    102 => "10111101111000111110000000100011", 
    103 => "00111101110110100111001100110010", 
    104 => "10111101101100011011000000111001", 
    105 => "10111101000111001000101010011100", 
    106 => "00111101011000111001000100011000", 
    107 => "10111101001010101100001011011010", 
    108 => "10111100110000001010110001001000", 
    109 => "10111101101011001011000011001101", 
    110 => "10111100011011111011101001100101", 
    111 => "00111101100101001101011100111011", 
    112 => "00111101100011011011100000000000", 
    113 => "10111110010000101010111011111011", 
    114 => "10111110011010011000101111111111", 
    115 => "00111101110000010110111001001010", 
    116 => "10111101011000001001010100000110", 
    117 => "10111101111101010010011001001000", 
    118 => "00111101111110010010010000101010", 
    119 => "10111110000111000111111000001010", 
    120 => "10111101001001100011011110000111", 
    121 => "00111101000101000111110000010110", 
    122 => "10111011110011110100110001010001", 
    123 => "00111100101110010001001111010100", 
    124 => "10111110010100000100001010000000", 
    125 => "00111101000011110101111110000001", 
    126 => "00111110001101010110000111000110", 
    127 => "00111101111011111110011001011011", 
    128 => "10111101111111110000101101011001", 
    129 => "00111101101000101011110111101001", 
    130 => "00111100110001001000000110000100", 
    131 => "00111110000000011110101111100011", 
    132 => "10111101111011010000100101001111", 
    133 => "10111110010101100100001010110100", 
    134 => "10111110010101000010100010010010", 
    135 => "00111101101110111001000100000000", 
    136 => "00111101100011110100100001100011", 
    137 => "00111101001101111101110101101001", 
    138 => "10111101111000010111000001101100", 
    139 => "10111101101110000001010011000001", 
    140 => "10111110010011000101110010100110", 
    141 => "10111101000011011001110100110011", 
    142 => "00111110000001010111100100011001", 
    143 => "00111101010110000011111011010001", 
    144 => "10111101000101110011111111010001", 
    145 => "00111100110001110010100100110111", 
    146 => "10111101101000101001100001111000", 
    147 => "00111101100101001010101101010000", 
    148 => "10111110000101100101001111111101", 
    149 => "00111100110110001010011001000100", 
    150 => "00111101010101110011111110101101", 
    151 => "10111110100101101111001010011100", 
    152 => "10111101100010101011101110001000", 
    153 => "00111100110101010111100111101111", 
    154 => "10111101100010000011111010011101", 
    155 => "10111110100110001100110100101110", 
    156 => "10111101001110010001001010000111", 
    157 => "00111110001111010011100001100011", 
    158 => "10111101101111000000110000010010", 
    159 => "10111100110100000001100110010010", 
    160 => "10111110100011010101000001111000", 
    161 => "00111101010111011010001011010010", 
    162 => "00111101100100010101011101101100", 
    163 => "10111110000111101101110101000011", 
    164 => "00111101111101101110011000001001", 
    165 => "10111011110010110010100110000001", 
    166 => "10111101001110010011000010001000", 
    167 => "00111101101101100101111111101011", 
    168 => "10111101010011110000011111010110", 
    169 => "10111101101100101011011000111011", 
    170 => "10111101001011111011101100110001", 
    171 => "10111101001110110110100011010010", 
    172 => "00111110000010100001000001111110", 
    173 => "10111110100100110000110100101011", 
    174 => "00111101110000010000011100011000", 
    175 => "10111011111011011111010111000100", 
    176 => "00111110001010100100100100000111", 
    177 => "10111101101010010110101100111000", 
    178 => "10111110000010110100101001001101", 
    179 => "10111110011111100000100001010001", 
    180 => "00111101011111001111001100011010", 
    181 => "10111110101100000111111101110011", 
    182 => "00111101111001110100000011100110", 
    183 => "00111100011100001110011100100101", 
    184 => "10111101011010100111100111110001", 
    185 => "10111100100010001111011101101000", 
    186 => "10111110000000010100011101010001", 
    187 => "10111101010010001101010011001110", 
    188 => "10111110100011011111100111010100", 
    189 => "10111101011011011110100101111011", 
    190 => "00111101101100011000010011100100", 
    191 => "00111011011010001011110011010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiDeQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiDeQ is
    component conv_2_conv_2_weiDeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiDeQ_rom_U :  component conv_2_conv_2_weiDeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


