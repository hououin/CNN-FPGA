-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiFfa_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiFfa_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010111111111111101010111", 
    1 => "10111100100001100101110110101110", 
    2 => "00111110100010110101001111001000", 
    3 => "10111100110011111010111100001110", 
    4 => "10111110000100110100100011101001", 
    5 => "00111110000011011111111110110000", 
    6 => "10111101001111001100100001111000", 
    7 => "10111101100110111110101100111000", 
    8 => "00111101110010100110010011110100", 
    9 => "00111110010100001111001110000110", 
    10 => "10111010100111111110001101111010", 
    11 => "00111110100000000100001000010010", 
    12 => "00111101011001100011100001101000", 
    13 => "10111110100100101111100101111111", 
    14 => "10111101010101011010110100101100", 
    15 => "10111110100111000010101101000110", 
    16 => "00111110010000101010010000001100", 
    17 => "10111100111000100101111101101110", 
    18 => "00111101100101000110000101101011", 
    19 => "00111101100010110001111010101011", 
    20 => "00111101100011110111010011000100", 
    21 => "00111101101011000100100100100000", 
    22 => "00111100100101100000011111011010", 
    23 => "00111101011010110110001110010110", 
    24 => "00111100111001001101100111111110", 
    25 => "00111110000010100010100111011001", 
    26 => "10111110000010011111011001011100", 
    27 => "00111110000111111101010111111110", 
    28 => "00111101100111011001000001111001", 
    29 => "00111101101101110010100110000110", 
    30 => "10111110010000011110010011100101", 
    31 => "10111101000110111101010100111100", 
    32 => "10111101010011001001010110110010", 
    33 => "10111110000011100000001011100111", 
    34 => "00111110000010011100010101100011", 
    35 => "00111101001010000111101001100000", 
    36 => "00111110100100001101001000111111", 
    37 => "00111101111111101000001111110000", 
    38 => "10111101100101010100111010011000", 
    39 => "00111101100100000101110100010001", 
    40 => "00111101111010100011001010000010", 
    41 => "10111101101000001100000111011000", 
    42 => "10111101101110000100011001110010", 
    43 => "10111110101111010110100110001010", 
    44 => "10111110000010100100011000110010", 
    45 => "00111101010111011000010111111010", 
    46 => "00111101010110101011011011011011", 
    47 => "10111110011000111100011110011011", 
    48 => "00111101100110001111010110001111", 
    49 => "10111110010111100101100100001000", 
    50 => "10111101000100100001111010111101", 
    51 => "00111011110101111000101110111010", 
    52 => "10111110100010110011101110111010", 
    53 => "00111110001101010111101100011110", 
    54 => "00111101111101011000011101101001", 
    55 => "10111110100001010010001111100001", 
    56 => "10111100101010100110110100110000", 
    57 => "00111110001100000000110111111110", 
    58 => "00111110000100011011110010000101", 
    59 => "10111101110011110001000110110000", 
    60 => "10111110011111011010101010100011", 
    61 => "10111101001011110111100111111101", 
    62 => "10111011100010111010110100101001", 
    63 => "10111101101101010110100000110111", 
    64 => "00111100000000101111111000000101", 
    65 => "10111110100000001010101000111000", 
    66 => "00111110000110011101110111101001", 
    67 => "00111110001100100111000010001000", 
    68 => "10111110100110011110101100010001", 
    69 => "00111110000011001100101001100001", 
    70 => "10111101000111110010000000010110", 
    71 => "10111100101100000001000101010010", 
    72 => "10111100110100111011111100101001", 
    73 => "10111101100010111111000011010001", 
    74 => "00111100111010001011010000011001", 
    75 => "10111110010000010111011100010010", 
    76 => "00111110001100010001011011110100", 
    77 => "10111101111110001011000001010001", 
    78 => "10111110000001100100010011001010", 
    79 => "10111100101010110001000111010011", 
    80 => "10111101100010010100110001000000", 
    81 => "00111101110100110000011101100001", 
    82 => "10111110001111010110000101111110", 
    83 => "10111101001101101001000000010100", 
    84 => "10111110011000000010011011001001", 
    85 => "00111110010000001010000111111001", 
    86 => "00111101000111010011010101101111", 
    87 => "10111110110001101010110001111110", 
    88 => "10111101111111100010111001010111", 
    89 => "10111100000010110110000101010010", 
    90 => "00111101110010100000001000100111", 
    91 => "10111110101011100110001111100101", 
    92 => "10111110000110101100010110111101", 
    93 => "10111100110000111001101101101011", 
    94 => "10111110011101111010011010101001", 
    95 => "10111110011010110011101101100111", 
    96 => "10111110001110010011101101010000", 
    97 => "00111101100100001110100000110110", 
    98 => "00111101101101010010011010011001", 
    99 => "10111101001111011101111100011100", 
    100 => "00111101100001001001110000111011", 
    101 => "00111110001000001101000000100001", 
    102 => "00111100010110010010100010100110", 
    103 => "00111110001110001101101001010010", 
    104 => "10111100100100110110000000101010", 
    105 => "00111101101011110010010011111100", 
    106 => "10111110000110110000110101100111", 
    107 => "00111110000010100011000000001100", 
    108 => "10111100101110100110101001100010", 
    109 => "00111010100010100110011110100100", 
    110 => "00111100100111001111110101011000", 
    111 => "00111100110011101010011110000011", 
    112 => "10111100111111011011100010110011", 
    113 => "10111110011110011101011011100111", 
    114 => "10111110100011010011010011000111", 
    115 => "00111101001010100110001001000100", 
    116 => "10111110010110101000110110001100", 
    117 => "10111110001001100000010011011000", 
    118 => "00111110000100000001111000011011", 
    119 => "10111101100000010111110011100101", 
    120 => "10111110011010111110001100111110", 
    121 => "10111110101100111010001100011011", 
    122 => "00111101011010010001011110000111", 
    123 => "10111011110101110101001111101101", 
    124 => "10111110101010011011100000111010", 
    125 => "00111110001011101010001010111101", 
    126 => "00111101110111100010000111001010", 
    127 => "00111110010100101000110011011111", 
    128 => "00111101110111011100111000011010", 
    129 => "10111101111100001011101011010101", 
    130 => "00111101001101110010001100000010", 
    131 => "10111100100010110011000111010000", 
    132 => "10111101100011100100000010011101", 
    133 => "00111101101010010111111100010101", 
    134 => "10111110000011001100001000010110", 
    135 => "00111101101001011010111111010011", 
    136 => "00111110010011001110000010000001", 
    137 => "00111110010011000010110101001000", 
    138 => "00111101000001100110111000111011", 
    139 => "10111101110001101111101010000111", 
    140 => "00111101111100010110100011111101", 
    141 => "10111110100101001011101010111111", 
    142 => "00111110101011100011101101010111", 
    143 => "00111110101100101000111110110111", 
    144 => "10111100100111111010001000101000", 
    145 => "00111101110101111010100011001010", 
    146 => "10111110000101000100110110101010", 
    147 => "10111110001010100010010010000000", 
    148 => "00111100011111001001111001110101", 
    149 => "00111101000011010111100111000100", 
    150 => "10111110101001110111111010010001", 
    151 => "10111101101101100101010000111000", 
    152 => "10111110010101111011001011110111", 
    153 => "00111101110101111000100111000110", 
    154 => "10111101101100011011010001110100", 
    155 => "10111110010001110110001001000110", 
    156 => "00111110000000000001001011111100", 
    157 => "00111011101110111011010000010101", 
    158 => "10111110010000100111001010110011", 
    159 => "10111101111111111100001000000001", 
    160 => "00111010010010101111011110010110", 
    161 => "00111110010000110001111101110100", 
    162 => "00111110101100001010110100011000", 
    163 => "10111100010001011011011110000101", 
    164 => "00111100101101011000011001010010", 
    165 => "10111101110110111010011100010011", 
    166 => "00111110000101110010001111100100", 
    167 => "00111101111100110000111011100000", 
    168 => "10111101000011010001010010101000", 
    169 => "10111110110000111101100000010011", 
    170 => "10111110101101111000101101000011", 
    171 => "10111101110011000101001100001110", 
    172 => "00111110000100010001001111111110", 
    173 => "10111010111010110100011010001000", 
    174 => "00111110101100011111100111011001", 
    175 => "00111110010111100111010110001010", 
    176 => "10111110011010000000001111010010", 
    177 => "10111101000001000010101111010011", 
    178 => "00111101010110110100000100010110", 
    179 => "10111110100011010000101010011101", 
    180 => "00111101100010011001101011101010", 
    181 => "10111110101100111000111100101010", 
    182 => "00111101111100000111100010111001", 
    183 => "00111110001011111000101010101110", 
    184 => "10111011001110010011111010010100", 
    185 => "10111110010001100101010100100011", 
    186 => "00111101011111101100000110000100", 
    187 => "10111110100011001100111111001101", 
    188 => "10111110101010110110100101110010", 
    189 => "10111101000100010000000101010000", 
    190 => "00111100111010011111010101010110", 
    191 => "00111101000110000010001101101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiFfa is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiFfa is
    component conv_2_conv_2_weiFfa_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiFfa_rom_U :  component conv_2_conv_2_weiFfa_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


