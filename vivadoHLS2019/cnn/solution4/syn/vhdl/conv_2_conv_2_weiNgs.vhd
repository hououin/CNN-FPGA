-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiNgs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiNgs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010101100011001111111001", 
    1 => "10111011100011100001001101101110", 
    2 => "10111101111111101100011101000101", 
    3 => "00111100010000000001000110101011", 
    4 => "00111011100010010001101000101101", 
    5 => "10111101010100010111001100010000", 
    6 => "00111100100011001010100000010101", 
    7 => "00111101101000100000010011111100", 
    8 => "10111110010011010000111101010110", 
    9 => "00111101010001111001011010101000", 
    10 => "10111101100001000001010111010111", 
    11 => "00111101111011101110010000111001", 
    12 => "10111101101100111001110101100011", 
    13 => "00111101110101100001010110110110", 
    14 => "10111101111000011100110101111100", 
    15 => "10111101100101001001001010110000", 
    16 => "00111100110111101100001010000011", 
    17 => "00111100010101000001011011001101", 
    18 => "00111110010100101110111111111111", 
    19 => "00111110010111111010000011101000", 
    20 => "00111110000000001100000001101101", 
    21 => "10111110010010011100001100100111", 
    22 => "10111101111111010010000110000110", 
    23 => "00111101111001111000101011001010", 
    24 => "10111110000110110010010011100110", 
    25 => "10111110000001101110110001110010", 
    26 => "10111101001101010111100100111110", 
    27 => "00111110011100010001010010010100", 
    28 => "00111101101000010101001111111000", 
    29 => "10111110011101010111111010001111", 
    30 => "00111110000010110001010000001000", 
    31 => "10111101000011000110011001000011", 
    32 => "10111101101111101111111000000011", 
    33 => "00111110001110011110010101110001", 
    34 => "00111100101111100011100101100100", 
    35 => "00111110000111000110101101000101", 
    36 => "10111101110001000011011101011110", 
    37 => "10111101010110100110010100100100", 
    38 => "00111101101110100110111001111011", 
    39 => "10111101111010010100100010110100", 
    40 => "00111101101001101001000010110111", 
    41 => "10111110100000010010110001000101", 
    42 => "00111110010010001000001101110010", 
    43 => "00111101001000110000101101010101", 
    44 => "00111101101110011111110011110001", 
    45 => "10111101000110001100101001000001", 
    46 => "00111011010010001100000001010110", 
    47 => "00111101011111111110000110101100", 
    48 => "00111110011101100000110111111010", 
    49 => "10111110110010101100110001110011", 
    50 => "10111110001011000010010001011000", 
    51 => "10111110100001111110001010011000", 
    52 => "10111110001100011100110010011101", 
    53 => "00111110001001110011001000011111", 
    54 => "10111110011000110100010101011011", 
    55 => "00111101011110010111110000010001", 
    56 => "00111100101001110111000101100100", 
    57 => "00111101110001110101111011001011", 
    58 => "10111110000010010001101010011001", 
    59 => "00111101011110010100100011111001", 
    60 => "00111110000011101011000110001011", 
    61 => "10111110000100011110111100011001", 
    62 => "10111101110110110100111100011011", 
    63 => "10111100101000000100111010000100", 
    64 => "10111110001001010001000100100100", 
    65 => "10111110001000010110100001001111", 
    66 => "10111110101101110110100101110100", 
    67 => "00111100100111111011011111111000", 
    68 => "10111101100111011000101001001001", 
    69 => "00111101010101110101001010100100", 
    70 => "10111101011000111101001011000000", 
    71 => "10111101100100011101111001110011", 
    72 => "10111110111000111111110001111011", 
    73 => "00111110001111010001100011010001", 
    74 => "00111011101110001110010010100011", 
    75 => "00111100111011011001011011000101", 
    76 => "10111101001110100111101001001010", 
    77 => "10111110100010101110001111001111", 
    78 => "10111101101110011100101101000001", 
    79 => "10111101111100000110110000011101", 
    80 => "10111110011011110101010000100111", 
    81 => "00111101011111111011111000000011", 
    82 => "10111101101010011010100110111110", 
    83 => "00111110010110101010000100011010", 
    84 => "10111110010010111110111110111100", 
    85 => "10111100001101110001110100101000", 
    86 => "10111110110010101110001101110011", 
    87 => "00111110000101100000101010001111", 
    88 => "10111101101101100101011100100100", 
    89 => "10111101001011110000010000110101", 
    90 => "10111101001010111000010001101011", 
    91 => "10111110010010111100000111110100", 
    92 => "10111110010011000001111001101000", 
    93 => "10111110001110011001100110101100", 
    94 => "10111110100000110011000101001001", 
    95 => "00111110100111011010001010011111", 
    96 => "10111101001000011100101110111110", 
    97 => "10111110010101101110001000010110", 
    98 => "10111011111110011101011010100010", 
    99 => "00111100000101001101100011010000", 
    100 => "10111110000000010100101110001011", 
    101 => "00111100010001001010101110100001", 
    102 => "10111110011011010010101101000110", 
    103 => "10111110010111101011110011110111", 
    104 => "10111100101000110010101011011000", 
    105 => "00111101110101100000000100110011", 
    106 => "10111101010010110011100111100100", 
    107 => "00111101100010011011110110010100", 
    108 => "00111101010100000101100100011000", 
    109 => "00111110000010110010000110001000", 
    110 => "00111101101110001111010000110101", 
    111 => "10111110000000111111111110000111", 
    112 => "00111101100010110100110000111000", 
    113 => "10111110011000000100011000001001", 
    114 => "10111110011000101111000001111110", 
    115 => "00111101100000001011100000001101", 
    116 => "10111101101011101100110001000101", 
    117 => "00111110001001101000101101000110", 
    118 => "10111110001010100010101001110101", 
    119 => "10111101010001011001011010111011", 
    120 => "10111110000011101100111010111000", 
    121 => "00111101001111110011110001100100", 
    122 => "10111101101110110010011111011011", 
    123 => "10111101001001000111001110100001", 
    124 => "10111110110010110101111001011011", 
    125 => "10111111000011111000101101011001", 
    126 => "10111110011000100110100110100010", 
    127 => "00111101111011110111110000000110", 
    128 => "10111101110010100011001011010111", 
    129 => "10111101101100101111101001101010", 
    130 => "10111101110010110101010001101000", 
    131 => "00111100110101000010011100101110", 
    132 => "10111110100000100100110011010000", 
    133 => "00111110000111100101101100100111", 
    134 => "00111101001110111111010110111001", 
    135 => "10111101100000010110000001011000", 
    136 => "10111101011111000110010011100100", 
    137 => "10111101110001101001000001110010", 
    138 => "10111110000101011010010000001111", 
    139 => "10111110100101100010011010011101", 
    140 => "00111101100000101100010000000110", 
    141 => "10111110011011111010000100101101", 
    142 => "10111101001010011111110111011001", 
    143 => "10111101101010110100011110011001", 
    144 => "00111101001001111110011100001001", 
    145 => "00111100111001101001000000010000", 
    146 => "10111101101010000010111011001111", 
    147 => "10111100100010001000000111110100", 
    148 => "10111110101010110110100111011111", 
    149 => "10111100110100000111010000111010", 
    150 => "10111101110001110001111000010101", 
    151 => "00111110000010110000011000001101", 
    152 => "10111110000011101111000010101101", 
    153 => "10111100100111100101111010011001", 
    154 => "00111101110011001001100111010110", 
    155 => "10111100010000110001111001111011", 
    156 => "10111101001101111000000110111010", 
    157 => "10111101011001101100111000100101", 
    158 => "10111110100110110011110100000111", 
    159 => "00111101110000010001010011001101", 
    160 => "10111101101010111111001101110100", 
    161 => "00111011110010001101101010011100", 
    162 => "10111101001100110010010111011110", 
    163 => "10111110100110111101111101110111", 
    164 => "00111101000001000110110101000011", 
    165 => "10111101110100101111001110000110", 
    166 => "00111101000001000001101110111100", 
    167 => "00111110000101010111111111100001", 
    168 => "10111110100000010001100011010010", 
    169 => "00111101101100111110100101110111", 
    170 => "00111110000111101111110010101101", 
    171 => "00111110011100001011000010100000", 
    172 => "10111110000101001001001111010010", 
    173 => "10111110010111110000001100100101", 
    174 => "00111101110100101110101101001110", 
    175 => "00111101000100100011110001011000", 
    176 => "00111101101111111110100011110111", 
    177 => "10111110001000000001111001001101", 
    178 => "10111110000111100111101100010100", 
    179 => "00111110001110100111010000011101", 
    180 => "00111110100010111011101111111000", 
    181 => "10111101000110000101101110101000", 
    182 => "10111100101001101011000100110101", 
    183 => "00111100100100110001100001010101", 
    184 => "00111101111110101100001100001001", 
    185 => "00111101010011100001010001110001", 
    186 => "10111101111011110101000110100001", 
    187 => "00111110000010011110000010001010", 
    188 => "10111110100110111001100001110011", 
    189 => "00111110000100010001101100011000", 
    190 => "00111110001011010000100011100111", 
    191 => "00111110001110101010100111010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiNgs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiNgs is
    component conv_2_conv_2_weiNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiNgs_rom_U :  component conv_2_conv_2_weiNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


