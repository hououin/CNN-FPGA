-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibNq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibNq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010101101010000010100110", 
    1 => "10111110100001010010000011010100", 
    2 => "00111110000001010111001001000110", 
    3 => "10111101111010110101101011101110", 
    4 => "00111110000111110000000100100010", 
    5 => "10111110001101101111000011011000", 
    6 => "10111101101000000000000110001110", 
    7 => "00111110001101111010101101001011", 
    8 => "10111110000001111000101100001101", 
    9 => "10111110000010011000011110000110", 
    10 => "00111100111111001100100110101001", 
    11 => "00111101111110100011100110100000", 
    12 => "10111101000100011110110000110111", 
    13 => "10111011111110011110001111100101", 
    14 => "10111101111010111110000010111111", 
    15 => "10111101000100011000000000110101", 
    16 => "00111101001011010010110000011100", 
    17 => "10111110000000001100111001101100", 
    18 => "00111101010000101001000011100000", 
    19 => "10111110011101101111111100001111", 
    20 => "00111011010010010001101001100010", 
    21 => "10111101000001101110100000010000", 
    22 => "10111110011000011001000000011010", 
    23 => "00111101010010011110111011000000", 
    24 => "10111110000101011110001001011101", 
    25 => "10111101001010111000011011110010", 
    26 => "10111110001001000110111111110110", 
    27 => "10111110100110111010001011000001", 
    28 => "10111101110110001101001111010010", 
    29 => "10111110010010010100001000010110", 
    30 => "10111101110010000111100111101111", 
    31 => "10111101110110010000010110001001", 
    32 => "10111110000001100001001100101111", 
    33 => "00111101110110011011101111100101", 
    34 => "10111101101001001001100000110111", 
    35 => "10111101101110001111011001100001", 
    36 => "10111101001110001000010010110000", 
    37 => "10111110000110011110000110110110", 
    38 => "00111101100111001011101110001110", 
    39 => "00111110000000001011100101010110", 
    40 => "10111110111000000110111100000101", 
    41 => "10111101110100111100110000110110", 
    42 => "10111110001001101011101101010110", 
    43 => "00111101101110001111100011011000", 
    44 => "10111101101111111100011110111010", 
    45 => "10111100100000100101011011111100", 
    46 => "00111110000100101010000011110111", 
    47 => "00111100101000000010001101100011", 
    48 => "10111110010010000001110000001000", 
    49 => "00111101110110101101110100000011", 
    50 => "10111101111000001001100000100001", 
    51 => "10111110001001110100001101011111", 
    52 => "10111101011111001011001001001010", 
    53 => "10111110010110110001110100110010", 
    54 => "10111110001001010000100110100011", 
    55 => "00111110000101110011011110101100", 
    56 => "00111101000111001101010110111101", 
    57 => "10111110011001000110101111111100", 
    58 => "10111100111111000011011001001011", 
    59 => "00111011010100100101011000001001", 
    60 => "10111101101111001010000100000001", 
    61 => "10111110011100010010010001010100", 
    62 => "00111101100011010001010101110110", 
    63 => "00111101110110011110011000101111", 
    64 => "00111101010111100001101111011011", 
    65 => "10111110110010010000101000101010", 
    66 => "10111100101011110001100011101011", 
    67 => "10111110000010010100110010101001", 
    68 => "00111101111100101110000111100100", 
    69 => "00111110000110111110000000100100", 
    70 => "10111101000101001111001100011100", 
    71 => "00111011101001111010011111101010", 
    72 => "00111101101000101111001100001111", 
    73 => "00111100110100110010001110110001", 
    74 => "10111101110001111101011101000111", 
    75 => "10111010011110111111101110000001", 
    76 => "10111101101101010010000001110000", 
    77 => "10111101100000000110000000100110", 
    78 => "10111101101000011101011010001010", 
    79 => "00111100100110101000011001111101", 
    80 => "10111100101110110011110100001001", 
    81 => "00111110000101100101100001010110", 
    82 => "00111100011100000111101110101101", 
    83 => "00111101010010110110000011000001", 
    84 => "10111110011000110110110001000011", 
    85 => "10111101110011010110100011111101", 
    86 => "10111011110110110100110010110010", 
    87 => "00111101101111010111001001010111", 
    88 => "10111101000110100110111111001101", 
    89 => "10111101011111001010010010011010", 
    90 => "00111100111010101110100011011001", 
    91 => "10111101100111000111000101101111", 
    92 => "10111101001100110011100011110010", 
    93 => "10111110001011011111000111000000", 
    94 => "00111101000001111000000111000001", 
    95 => "10111110010001000100011000101100", 
    96 => "00111101101011011000111010111101", 
    97 => "00111101000011110110110001101011", 
    98 => "00111101100100011101000001001001", 
    99 => "10111101110001100011001111110101", 
    100 => "10111110100100000111111010001111", 
    101 => "10111110100110001011101101000101", 
    102 => "00111101101010000101111001001100", 
    103 => "10111010111000011100010110010110", 
    104 => "10111110100010010111011001101001", 
    105 => "10111101111111101011111001000100", 
    106 => "10111101000100010011010011011110", 
    107 => "10111101111010101100100001001010", 
    108 => "10111100011111001111001111111000", 
    109 => "00111101100010111011110010011101", 
    110 => "00111101001100011011111011100111", 
    111 => "00111110000011011101000000111101", 
    112 => "00111100011110011110111111101110", 
    113 => "00111101010001111111010011011111", 
    114 => "00111100100010010111001100010010", 
    115 => "10111101111001110100100101011111", 
    116 => "10111101110010001000010111011000", 
    117 => "10111110001001010010000001001100", 
    118 => "00111110000000100111100001101011", 
    119 => "00111110010011111001110111011011", 
    120 => "00111101001011101100100100010111", 
    121 => "00111101100011100010001001000001", 
    122 => "10111100110110011100011010010111", 
    123 => "00111110001100101111100001110100", 
    124 => "00111100101110100100111110011001", 
    125 => "00111100001100110000110010111111", 
    126 => "10111101110000110001101001111110", 
    127 => "10111101100111100010000100111000", 
    128 => "10111100100011110001110100110101", 
    129 => "10111110100101110100001101001001", 
    130 => "00111110000001001101111110000111", 
    131 => "00111101110110110101010010101001", 
    132 => "10111100101000101000100010000011", 
    133 => "10111110010010010000011011011111", 
    134 => "00111110001101101000111101111000", 
    135 => "10111110000000010000101000110010", 
    136 => "10111101000110111101100100111101", 
    137 => "00111101001100110001111110101111", 
    138 => "10111101110111000001011010011011", 
    139 => "10111101101111000111011001101000", 
    140 => "00111101111010111101101011101110", 
    141 => "00111100111001101110001101101001", 
    142 => "00111011111000100000010000110010", 
    143 => "00111110011000010000010101001101", 
    144 => "00111101000000001010100000101101", 
    145 => "00111101111000100001110111100101", 
    146 => "10111101111010111010011010011000", 
    147 => "10111101011001010100011000011011", 
    148 => "10111101010101110100111000101001", 
    149 => "10111110000011011100100011000010", 
    150 => "10111101110100100001111101110100", 
    151 => "00111101101010110000011010100100", 
    152 => "10111100111101100011111111110011", 
    153 => "00111101110000001011110001000100", 
    154 => "10111101000000000111001010101111", 
    155 => "00111110000101111100111010000110", 
    156 => "00111110001110100010100100100111", 
    157 => "10111101101110011110111111101100", 
    158 => "10111110000100011110110001000011", 
    159 => "00111101101111001101100100111111", 
    160 => "00111101101010010111111111111010", 
    161 => "10111100010001010011001000000001", 
    162 => "10111101101111111111111001101010", 
    163 => "10111101000100100001101111110000", 
    164 => "10111101110110001111100000001111", 
    165 => "00111100000001111101011011110011", 
    166 => "00111101100010111001100100101011", 
    167 => "10111110001000010001100101110011", 
    168 => "10111110000110011001000011010100", 
    169 => "00111110001110100101011011001010", 
    170 => "10111101101111110111001111100001", 
    171 => "00111101101001101001011000000100", 
    172 => "00111011011101010001101100011101", 
    173 => "10111110101000111110101010101101", 
    174 => "00111101111011111001001010111110", 
    175 => "00111110011001100101101110001101", 
    176 => "10111101100101000110000100010110", 
    177 => "00111110010101000110011100011100", 
    178 => "00111101000111001011010001011110", 
    179 => "10111110011000001111011000110100", 
    180 => "10111100101000010001111001000000", 
    181 => "10111110000110001111110001000101", 
    182 => "00111101111011100010100001100000", 
    183 => "10111101011110111010110011011001", 
    184 => "00111101111101010000100001010011", 
    185 => "00111011000100100111000110001000", 
    186 => "00111101110010001110001010101001", 
    187 => "10111001001100110111011100010010", 
    188 => "10111101111001110000000110010000", 
    189 => "10111101101101011101000110011010", 
    190 => "10111101010001101100110110100011", 
    191 => "10111100001100010001110111000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibNq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibNq is
    component conv_2_conv_2_weibNq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibNq_rom_U :  component conv_2_conv_2_weibNq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


