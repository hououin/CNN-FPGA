-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibbk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibbk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010111010110100001001", 
    1 => "00111110000101110111000110100101", 
    2 => "00111101100011001001001010111010", 
    3 => "10111101111001001111100101101010", 
    4 => "10111110001110100000111001010100", 
    5 => "00111101010010000110010000010011", 
    6 => "00111110001100001011101101111001", 
    7 => "00111101101110011111010010110000", 
    8 => "00111110001111101111101101000000", 
    9 => "00111101011010011111100100100101", 
    10 => "10111100000101011101111110100000", 
    11 => "00111110000000100010110011111110", 
    12 => "00111110001111000001101011101100", 
    13 => "10111110101110101110110111100001", 
    14 => "10111101110001011000010001110001", 
    15 => "10111110011010100010000011010110", 
    16 => "00111101111100000000010101010110", 
    17 => "10111101100001001000011011100110", 
    18 => "10111101111001111011111111101010", 
    19 => "10111101000000010101000010001001", 
    20 => "00111110010100100011111000100101", 
    21 => "10111110011111111011001000110000", 
    22 => "10111110110100110111101100011100", 
    23 => "10111110100011101100000100011110", 
    24 => "00111110000011010100001111101011", 
    25 => "10111100100001001110011011011110", 
    26 => "10111101101011011010001000101100", 
    27 => "10111101110001010001111100101001", 
    28 => "10111101111010011101010111001001", 
    29 => "00111110010001000100110101000001", 
    30 => "10111101101110010101010111001001", 
    31 => "00111100111011011101100100011001", 
    32 => "00111101100100001101001100000010", 
    33 => "00111101001111010000110011000110", 
    34 => "00111010100011110000001110100101", 
    35 => "00111101101001010101101110000111", 
    36 => "00111100111101111101101100100110", 
    37 => "00111100111001111111101101101100", 
    38 => "00111110001100100001100110001110", 
    39 => "00111110001000011110111000111011", 
    40 => "00111101100011000101010010111011", 
    41 => "10111101001011010001000101011001", 
    42 => "10111101101101111100101001001000", 
    43 => "10111110100100100001000010010101", 
    44 => "10111101110001010111101111110011", 
    45 => "10111110000011111000001111000011", 
    46 => "00111101100000000101110010000100", 
    47 => "10111110011000111110110010001101", 
    48 => "00111110100110001010100110110000", 
    49 => "10111100000111111011010010100101", 
    50 => "00111110010011111101001010110111", 
    51 => "00111110001101110111101100000000", 
    52 => "10111101011101110110000111001101", 
    53 => "10111110111111110110100010101110", 
    54 => "10111011011110010010001110010011", 
    55 => "10111101100110100000110000001011", 
    56 => "10111101111110111100001001101111", 
    57 => "00111101000000001010001010110010", 
    58 => "00111101001000001100011101001000", 
    59 => "00111101111001101011001000001001", 
    60 => "10111101000001000110001110111101", 
    61 => "10111110101011000100011010111010", 
    62 => "00111101101101111100000111110100", 
    63 => "10111001011111101100110010111100", 
    64 => "00111101001111001101001010111111", 
    65 => "00111101111001011110011110010110", 
    66 => "00111110001011110011110110101101", 
    67 => "00111110000010000011011100100001", 
    68 => "10111110100100011111101011100000", 
    69 => "00111101000011011111001101011100", 
    70 => "10111101110010100100111010001111", 
    71 => "10111011011110000010101110000010", 
    72 => "00111110011011101100100001010101", 
    73 => "00111100110011010011010001111100", 
    74 => "00111101000111000110101110100100", 
    75 => "10111101101000001001110100111000", 
    76 => "00111101011010101101101011010011", 
    77 => "10111110010110011110100000111001", 
    78 => "00111110010000111100111100000100", 
    79 => "00111110001101000110101111101110", 
    80 => "10111110000001101011011000000010", 
    81 => "00111101100000011110111000101010", 
    82 => "10111110010011110100110001101100", 
    83 => "10111101010110110011000000100111", 
    84 => "10111110101001110010110101000110", 
    85 => "10111101111100000110111111111111", 
    86 => "10111110011111100111111011010000", 
    87 => "10111101101000001111001000001010", 
    88 => "00111101110010000001001010010100", 
    89 => "00111110100001101111011101100111", 
    90 => "00111101101110000001101001100010", 
    91 => "10111110011010001011010111000000", 
    92 => "00111101111011110010110100001101", 
    93 => "00111101111100111110111011000010", 
    94 => "10111101111000101000001011101101", 
    95 => "00111100111100111001001101100110", 
    96 => "00111110000011011110101101001101", 
    97 => "00111101011101110000111111010010", 
    98 => "10111100010001000010001010111010", 
    99 => "10111101001111011011001001000011", 
    100 => "00111110001010101010111000000110", 
    101 => "10111101011000010110010111001100", 
    102 => "00111101100000000100000001001001", 
    103 => "00111100101001100101011100011110", 
    104 => "10111100110011001111010101110001", 
    105 => "00111101101111110011101000010100", 
    106 => "10111110000000110001010010010011", 
    107 => "00111101111110010101010101100000", 
    108 => "10111110001110001111110000100100", 
    109 => "00111101010101110101111100010010", 
    110 => "00111101100110000011101100001000", 
    111 => "10111101111011100100011010001000", 
    112 => "00111100010010001010101010100000", 
    113 => "10111100110000111001100000110000", 
    114 => "00111101110111001100001000000100", 
    115 => "00111101110111111100111111111011", 
    116 => "10111101000001101110100110010001", 
    117 => "10111110100110010011111110011010", 
    118 => "00111101101010100000001000011111", 
    119 => "00111101101101000010000011000010", 
    120 => "10111110010001111000010100101111", 
    121 => "10111101110110010001101011110000", 
    122 => "10111110011000010110011111011011", 
    123 => "10111110110010010000100011100000", 
    124 => "00111101010001010010011010110011", 
    125 => "00111100110111101010001100000000", 
    126 => "10111100101101000010000001101011", 
    127 => "00111101110111111101010010011001", 
    128 => "10111110010010100011000110011100", 
    129 => "10111101111011000111110101011001", 
    130 => "00111110000001101011101101000001", 
    131 => "10111101101110001001001111101011", 
    132 => "10111110010100010000010101110001", 
    133 => "10111101101100110101110100100101", 
    134 => "10111010101100011111000100101000", 
    135 => "10111001101100010001110010000101", 
    136 => "00111110001011011011101101001100", 
    137 => "10111100011010100110111000001110", 
    138 => "10111110010111101110111011000000", 
    139 => "10111110100101110000101001000100", 
    140 => "00111101101001111010000110011100", 
    141 => "00111100100001000001000010011010", 
    142 => "00111110011000110111100011010000", 
    143 => "00111110000011111011100101111101", 
    144 => "10111101110101101100011110000100", 
    145 => "10111110001010000110110001001011", 
    146 => "00111101011100000111011000101001", 
    147 => "10111101010001010000111010011000", 
    148 => "10111101111000000001000110010110", 
    149 => "10111101101101100100100110010011", 
    150 => "10111101100010010000100000100000", 
    151 => "00111110100001101001101111001101", 
    152 => "00111110010111100000001111100000", 
    153 => "00111110001101001110111110101100", 
    154 => "10111110100000100110000101101010", 
    155 => "10111011111111010101010101110000", 
    156 => "00111110011111100000100000000110", 
    157 => "10111101100101011010011011101100", 
    158 => "00111101101010100000110110110100", 
    159 => "10111100111110011100101110111101", 
    160 => "10111110100110010110101000001011", 
    161 => "10111100100100010001010111010001", 
    162 => "10111110000001000000110000000001", 
    163 => "10111101000101011010011100101000", 
    164 => "00111101100011000110110110100000", 
    165 => "10111110101010111010100110111101", 
    166 => "00111101101001010011111001011100", 
    167 => "00111100010110110111001101101000", 
    168 => "10111110010011101100100010000101", 
    169 => "00111100111100010100000010110111", 
    170 => "10111110100011111000111101100010", 
    171 => "00111101000001100000110001101101", 
    172 => "10111101100111111010100001111100", 
    173 => "10111110000110001011000000100111", 
    174 => "00111011010001001101101111010110", 
    175 => "00111101001011110001100010010010", 
    176 => "10111101100101111011110111111110", 
    177 => "10111100110000010110010100000101", 
    178 => "00111101110111100100000001000011", 
    179 => "10111101100000001001000001000110", 
    180 => "10111100111101010010100000001000", 
    181 => "10111101100110110001010010001100", 
    182 => "00111101011111000001011011101100", 
    183 => "00111110100000101101110000100011", 
    184 => "00111011111100000111000101000111", 
    185 => "10111101100111110001000111001100", 
    186 => "10111110100001101110100111011011", 
    187 => "10111110010010101000010001010100", 
    188 => "00111110010001011011101100010100", 
    189 => "00111110100010111010101001000000", 
    190 => "10111110101001011011101001101101", 
    191 => "10111110100000100111010001101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibbk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibbk is
    component conv_2_conv_2_weibbk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibbk_rom_U :  component conv_2_conv_2_weibbk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


