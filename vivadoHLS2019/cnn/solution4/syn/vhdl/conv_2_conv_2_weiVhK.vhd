-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiVhK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiVhK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000011011010110101110100", 
    1 => "00111101100101011100111100010101", 
    2 => "00111110000010000001001100000101", 
    3 => "10111101110101110100111111110110", 
    4 => "10111101001100010011101111001001", 
    5 => "10111100101100010010101110000001", 
    6 => "00111110000000011011000101110011", 
    7 => "00111101000011110001011010101111", 
    8 => "10111101011101101100010001110010", 
    9 => "00111101100101111100011000011111", 
    10 => "10111010110000011100111111100001", 
    11 => "00111110000001110100000011001110", 
    12 => "10111100110001011000011000011001", 
    13 => "10111110000011101001101000100011", 
    14 => "10111100011001101100011000011001", 
    15 => "10111011101111000000101100010000", 
    16 => "00111100101001010011101010100011", 
    17 => "10111101011001101000001111011011", 
    18 => "10111100100001010001000100001100", 
    19 => "00111110001010100100110100000100", 
    20 => "00111110000101000111011101000101", 
    21 => "10111101011101000100011101001101", 
    22 => "10111110001111000011001101101101", 
    23 => "00111100111010011001101001100110", 
    24 => "00111101111001010010111101001000", 
    25 => "00111100000111010010011101111011", 
    26 => "10111101101011100000000110001011", 
    27 => "10111110101001100100000011010110", 
    28 => "00111110000000010111010101010010", 
    29 => "00111101110100101100111111100010", 
    30 => "00111101111101011110000110101101", 
    31 => "00111101100110010010010011101000", 
    32 => "10111101001100110001111011011101", 
    33 => "00111100010111101111001010010110", 
    34 => "00111011110000011010110010001001", 
    35 => "10111101110001111101111111100000", 
    36 => "00111101010111001011100001110101", 
    37 => "10111101010110001110001100110110", 
    38 => "00111101110000101011110000011001", 
    39 => "10111101110000011110010111110011", 
    40 => "10111001101001111111011000100110", 
    41 => "00111101101100000001100111101000", 
    42 => "00111101001111011100000001000010", 
    43 => "10111110011110111010101110000010", 
    44 => "00111101101011101110000101110011", 
    45 => "10111101011001101110110100111010", 
    46 => "00111101110000011011101100010010", 
    47 => "10111010001101011011111111001010", 
    48 => "00111101110111000011001101101110", 
    49 => "00111101111101010010001011001100", 
    50 => "00111100001110100111111100110000", 
    51 => "00111100010010010111101001000011", 
    52 => "10111110000011111000010110101010", 
    53 => "10111110011100011001110101000011", 
    54 => "10111101100111111101011100100000", 
    55 => "10111110000011000101001110100011", 
    56 => "00111100001000011001110100100010", 
    57 => "10111011100010010101111101111110", 
    58 => "10111110001100000110000011101000", 
    59 => "00111100001011101100111110000011", 
    60 => "10111101000100101000010011101000", 
    61 => "10111110011110001110110110010111", 
    62 => "10111101101100001001101101100110", 
    63 => "10111110000100010001000100111101", 
    64 => "00111101001000001110111110000011", 
    65 => "00111011100100001111010001001011", 
    66 => "00111101100101100010010010110101", 
    67 => "00111110000110100111101010100000", 
    68 => "10111101111100001100100001010101", 
    69 => "10111101000100111111111010000101", 
    70 => "10111101101001111011000001011101", 
    71 => "00111110000000000000001101111000", 
    72 => "00111101100100001111100111010000", 
    73 => "10111100000111100011000111111101", 
    74 => "10111110100100000011111001100101", 
    75 => "10111110000101011000100011100010", 
    76 => "00111101001000110011111111100011", 
    77 => "10111110000011111000111110000111", 
    78 => "10111101010111001111110000110111", 
    79 => "00111101001010110000011000010110", 
    80 => "10111110001101010011110000010011", 
    81 => "10111101100011010010110110000111", 
    82 => "10111011101001100010100101101101", 
    83 => "00111100010110001010100110101011", 
    84 => "00111101110101001011000000011000", 
    85 => "10111110000100001101001000011000", 
    86 => "00111101100111111110000100100100", 
    87 => "10111110010111101110000010111100", 
    88 => "00111101011011101011101111111010", 
    89 => "00111110000100001100111001100101", 
    90 => "00111011111011000011000111110111", 
    91 => "10111101110101010100101001100000", 
    92 => "10111110010110101011101101101010", 
    93 => "10111110001001110111101010101100", 
    94 => "10111101100101111110100111111100", 
    95 => "00111101001111001010011111101000", 
    96 => "00111100001101011101110010111110", 
    97 => "00111110000111101111011001010001", 
    98 => "00111101011110001101111100011001", 
    99 => "10111110011111011010100110111101", 
    100 => "00111110010101101110001001000110", 
    101 => "10111110010011110101110101010101", 
    102 => "10111101101100100101011010111101", 
    103 => "00111100100111000101010100100111", 
    104 => "00111110000001001101011110111010", 
    105 => "00111110000011001100010011110100", 
    106 => "10111100000001011100100100010111", 
    107 => "00111011010010101110110010111010", 
    108 => "10111110011110010101110100111001", 
    109 => "00111101100111101011000011111110", 
    110 => "10111110000111000000100000011111", 
    111 => "10111110011101101000010011011110", 
    112 => "10111101010110110110100100010110", 
    113 => "00111100111011000100010101110110", 
    114 => "00111101101100101000000100011000", 
    115 => "10111110000110111101011000101001", 
    116 => "00111101110101010011100110000000", 
    117 => "10111101100111001001010000010100", 
    118 => "10111101110010111111011100000000", 
    119 => "00111110001100010010110111101111", 
    120 => "10111101000111001111110100110100", 
    121 => "00111101110010000110011100110111", 
    122 => "10111110001010000110111101001001", 
    123 => "10111110001000100101011110000001", 
    124 => "00111101011000111101100011000110", 
    125 => "10111100110101010001110110000010", 
    126 => "00111100011000010000100101110011", 
    127 => "00111101110100001100111111111101", 
    128 => "10111110000011110000001101101111", 
    129 => "10111110001111010110111100110101", 
    130 => "10111110011111110000001101000001", 
    131 => "00111101010100101111011010011000", 
    132 => "10111101100101011110110101000111", 
    133 => "10111110000000110110000100110000", 
    134 => "10111110000000000111111100000110", 
    135 => "00111101101011101010011011111011", 
    136 => "00111110011111100000111010011111", 
    137 => "10111110100010110101000111101111", 
    138 => "10111101110110001111010101011000", 
    139 => "10111110100101100001110000110000", 
    140 => "10111101110011101110010010011001", 
    141 => "10111110011110100011111000101110", 
    142 => "00111110100000100000001100111001", 
    143 => "00111110100010111011100101011000", 
    144 => "10111101101110000101100111111100", 
    145 => "00111101111110111000000010001100", 
    146 => "10111101000011100010000100101100", 
    147 => "10111101010000101111011111010100", 
    148 => "00111110000101011110010111010101", 
    149 => "10111101101001110011010000000101", 
    150 => "10111101000000110011111000100110", 
    151 => "10111110010001110011000011111000", 
    152 => "10111100110100101101101101100101", 
    153 => "00111100100010100010100111100011", 
    154 => "00111100101001011110000011001110", 
    155 => "00111101010010000010100001111100", 
    156 => "00111101101100111101101110100110", 
    157 => "10111110000000100101111101001001", 
    158 => "00111101111011101101011101111010", 
    159 => "10111100111010000111110001100010", 
    160 => "10111101111000000001010110000000", 
    161 => "10111011001010011101100101110000", 
    162 => "10111101000100101011010101011111", 
    163 => "10111101110010001000100100111001", 
    164 => "10111101101001001001110101101111", 
    165 => "10111110000000100101001100100101", 
    166 => "10111101101001100010011000010011", 
    167 => "00111110000001001111110111110100", 
    168 => "00111101100111111010100001000001", 
    169 => "00111101101011101110011100111110", 
    170 => "10111110000000000000010110101001", 
    171 => "00111100100111100111111110000011", 
    172 => "10111011111000110011111011110100", 
    173 => "00111101101111001111010001001100", 
    174 => "00111101011001111110001011101000", 
    175 => "10111110001011001000100101111111", 
    176 => "10111101100110010010101011111100", 
    177 => "00111110000001100101101100110111", 
    178 => "00111101010000110100000101110011", 
    179 => "10111110100100000011010101000000", 
    180 => "00111110001010011111011010111101", 
    181 => "10111101011110110101011111100110", 
    182 => "10111110000100110111100010101110", 
    183 => "00111110010000000110000001110111", 
    184 => "00111101001000000111010111010110", 
    185 => "00111101110111111010111011001100", 
    186 => "10111110011101010101100101111101", 
    187 => "10111110010010000001111011001100", 
    188 => "00111101111110100101101001001111", 
    189 => "00111101111111101010101100000101", 
    190 => "10111101010100000011011011010000", 
    191 => "00111101101010111110011001111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiVhK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiVhK is
    component conv_2_conv_2_weiVhK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiVhK_rom_U :  component conv_2_conv_2_weiVhK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


