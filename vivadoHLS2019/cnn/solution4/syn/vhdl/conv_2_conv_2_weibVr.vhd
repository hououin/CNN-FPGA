-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibVr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibVr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010000110011010011010", 
    1 => "00111100001101010001110100000011", 
    2 => "00111110011001001000010011101100", 
    3 => "10111110100001001010110111100100", 
    4 => "00111101001100010100000100000111", 
    5 => "10111110001010101000001100111101", 
    6 => "10111110100000000111000011100010", 
    7 => "00111110001101011111000101101110", 
    8 => "10111101110111000000111001110111", 
    9 => "10111110011010111000000001011111", 
    10 => "10111101011101001101000110011000", 
    11 => "10111011101001111100111101000011", 
    12 => "10111110010001001100001100100110", 
    13 => "00111110010101101101110010000111", 
    14 => "10111110100001101101011100010001", 
    15 => "10111110000001100101101101000010", 
    16 => "00111101110110000010100010100111", 
    17 => "10111101011011000000000101011101", 
    18 => "00111110001001011001001000111110", 
    19 => "10111110101100100100011010000100", 
    20 => "10111110000011111101100110100001", 
    21 => "00111101111000001000010110101100", 
    22 => "10111100110011011101000011010001", 
    23 => "00111101001000111000100010011101", 
    24 => "10111101101010101011101111100000", 
    25 => "10111100000100010010010010101101", 
    26 => "10111110000001101100001011110100", 
    27 => "10111110100111110111000001001111", 
    28 => "00111100111100011000110011110011", 
    29 => "10111011110010010110110111000001", 
    30 => "10111101000010100101111010000110", 
    31 => "10111110011000110001011001101110", 
    32 => "10111101011011100011101001000000", 
    33 => "00111101111001011010100011110100", 
    34 => "10111110001110110101100100100010", 
    35 => "10111101101110011011011110111101", 
    36 => "00111101111101001001111011010110", 
    37 => "10111110011110101101110100110110", 
    38 => "10111101100111101111100111000010", 
    39 => "00111110100100010101111010100111", 
    40 => "10111101110101010101110010101100", 
    41 => "10111101101001000001001101011110", 
    42 => "10111101101101100111000011101000", 
    43 => "10111101010101010011000100011011", 
    44 => "10111110000100001011101101111101", 
    45 => "10111100110001010001001000100110", 
    46 => "00111101111010000011110101101101", 
    47 => "10111110010001111101101011110000", 
    48 => "10111110100001100101111000001010", 
    49 => "00111110000010110101110101111100", 
    50 => "10111110000011111010101111110000", 
    51 => "10111101010001010110011100100000", 
    52 => "10111110011000010010000111101110", 
    53 => "10111110000111000001101110000110", 
    54 => "10111101001111010110111010101110", 
    55 => "00111110000101010011100000101001", 
    56 => "10111110000110000000000001111000", 
    57 => "10111110011100001001000001111110", 
    58 => "00111101100101110110001111111100", 
    59 => "10111110001011000100000111010110", 
    60 => "10111110010110101101110101101111", 
    61 => "10111110101000101010010100011011", 
    62 => "10111100011100000000001001000110", 
    63 => "00111101111110101011111110101111", 
    64 => "00111100111001010101010010100010", 
    65 => "10111110011010100001110111100000", 
    66 => "00111110001110111110001000000010", 
    67 => "10111110110000100111101011100110", 
    68 => "00111110001011011101110011101000", 
    69 => "00111100110100010011001111001101", 
    70 => "10111101100110101101010100011100", 
    71 => "10111101101101110011100100011111", 
    72 => "00111110010110011001010100111011", 
    73 => "10111101100011111011101101010011", 
    74 => "10111100000111111101010000101010", 
    75 => "00111101100110010010010011100001", 
    76 => "10111110001110101100110000101001", 
    77 => "10111101100001011101110010111101", 
    78 => "10111100110010110111101101100101", 
    79 => "10111101000000111101000000100011", 
    80 => "10111101100100110110101101110111", 
    81 => "00111101000011101100111101100100", 
    82 => "10111110001001010110001100110110", 
    83 => "00111100111101110011101101000110", 
    84 => "10111110101010011011111001110110", 
    85 => "00111101110110011111011011110100", 
    86 => "10111101100011010001001100100111", 
    87 => "00111101111111100111011011000111", 
    88 => "00111101010100111100100101110011", 
    89 => "00111110001101111111011010100111", 
    90 => "10111101000001011010011111110000", 
    91 => "10111110010011001110011001100110", 
    92 => "10111101110100011101001000100111", 
    93 => "10111100110011011110001001111100", 
    94 => "00111011100101011110000011110110", 
    95 => "10111110000010000000000110001011", 
    96 => "00111110000001100100001101100010", 
    97 => "10111110000111111100110101001100", 
    98 => "10111101110001001010010101000000", 
    99 => "10111101101111000011011001111010", 
    100 => "10111101010110111001000001011000", 
    101 => "10111101111001101011100001101011", 
    102 => "00111101101110001110000001101100", 
    103 => "00111110000000101111001110011011", 
    104 => "10111101001111110100100101001101", 
    105 => "00111101000001001011001001010000", 
    106 => "10111110000000100111100100100001", 
    107 => "10111110101000010100111101001110", 
    108 => "00111100110000000111001011111001", 
    109 => "00111100010001000101011101101110", 
    110 => "00111110000000100011000001111001", 
    111 => "00111100010110011101010001010011", 
    112 => "10111101000101010100101010010001", 
    113 => "10111110100000100001111011010010", 
    114 => "00111101001000001101101100000111", 
    115 => "00111100101001010000101001111001", 
    116 => "00111100011011010111000110101101", 
    117 => "00111101100100000001100111101110", 
    118 => "00111101111000100000111001100100", 
    119 => "00111110010011011011100111101001", 
    120 => "10111110001100111011011001001111", 
    121 => "00111110001100010010010010000011", 
    122 => "00111101101100100000010010011000", 
    123 => "10111100011110100100001101011011", 
    124 => "00111011101101000010010010010100", 
    125 => "00111101010010100001010010110111", 
    126 => "10111110001010100010111000110100", 
    127 => "10111100011011000110101111001010", 
    128 => "00111101010000100010011011110110", 
    129 => "10111110011101000000011001010101", 
    130 => "00111101110111101010010010011110", 
    131 => "10111100110101000110001111110010", 
    132 => "00111101101100001010000000010101", 
    133 => "10111110011100100000110000101010", 
    134 => "00111110010110101000100001001000", 
    135 => "10111110001010111000101011001110", 
    136 => "10111101100111100110111000110010", 
    137 => "10111110000100000101101110010001", 
    138 => "10111101100100011100100000001011", 
    139 => "10111100001101111010101000101101", 
    140 => "00111110010110111000000001001111", 
    141 => "10111101011000111101101001110110", 
    142 => "10111110001110001011010110110110", 
    143 => "00111101101000001011101000101010", 
    144 => "00111101101111000000010100110000", 
    145 => "10111101001011100111010110011001", 
    146 => "10111110101001111010110100010110", 
    147 => "00111101100000010001000000100101", 
    148 => "10111101110010000110101100011110", 
    149 => "00111101100011111110000100001011", 
    150 => "10111110101011100010000111000001", 
    151 => "00111110100100111111110000110011", 
    152 => "10111101001000101100000111100010", 
    153 => "10111100100011011000001010000010", 
    154 => "10111110010010110100010000001001", 
    155 => "10111011100010000111011101111011", 
    156 => "00111101001011011100100101011001", 
    157 => "00111100111101100111000010100100", 
    158 => "10111101111100000111011000100110", 
    159 => "00111101100001100111001011101111", 
    160 => "10111110001001010011000111111111", 
    161 => "10111110010100010110001001101111", 
    162 => "10111110000100010111111011011111", 
    163 => "10111110000000001011001010011001", 
    164 => "00111110000000001100010001001001", 
    165 => "00111101101101000001000001110011", 
    166 => "00111110000010001101100100111001", 
    167 => "10111101111000001011100011111111", 
    168 => "10111101111011000100100000001010", 
    169 => "00111101101101000011000000111111", 
    170 => "10111100100000001101000010100101", 
    171 => "10111011000100000101011100001101", 
    172 => "00111101101010001000001010010110", 
    173 => "10111110001010100110101101001011", 
    174 => "10111011100001010000110110011100", 
    175 => "00111110000110110101111101110000", 
    176 => "00111101101010010011110101101111", 
    177 => "00111100101101011011111100110110", 
    178 => "00111100110110100011111100010000", 
    179 => "00111101101100001001100100110110", 
    180 => "00111101101110000000111000001100", 
    181 => "10111101011111111111000011101000", 
    182 => "00111110011000100010101011101010", 
    183 => "10111101100000110111010110010111", 
    184 => "00111011010111101001011000011110", 
    185 => "00111110000100100010111110000101", 
    186 => "00111110000110110100111011001000", 
    187 => "00111100100100010001010000000011", 
    188 => "00111101101001000001010010011001", 
    189 => "00111110011101001000001010001110", 
    190 => "10111101101100011111101001011110", 
    191 => "10111110001101001110110100000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibVr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibVr is
    component conv_2_conv_2_weibVr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibVr_rom_U :  component conv_2_conv_2_weibVr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


