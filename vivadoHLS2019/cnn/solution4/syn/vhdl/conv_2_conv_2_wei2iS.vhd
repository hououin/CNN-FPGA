-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei2iS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei2iS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101001000001000011100", 
    1 => "00111101010100110001110010100101", 
    2 => "00111101101101100111010010011011", 
    3 => "10111110001111101001000001010001", 
    4 => "00111101010101110000000011111010", 
    5 => "10111110001001000110011011010010", 
    6 => "10111110010011001110111000000010", 
    7 => "00111110001000011100011011110000", 
    8 => "00111101001111100100000010100100", 
    9 => "00111001100101110000110011001001", 
    10 => "10111101100000011011010000111001", 
    11 => "00111110000110001110111011011010", 
    12 => "10111101110101001110001001011010", 
    13 => "10111110100001000110101001110000", 
    14 => "10111110101010101110100000101100", 
    15 => "10111110001010110001000011011000", 
    16 => "10111101001001100010101111001101", 
    17 => "10111110100101001101101000111010", 
    18 => "00111100011101001110100000110011", 
    19 => "10111101011001011000111110110001", 
    20 => "00111101101111010111011101111101", 
    21 => "10111110110100101110110110111011", 
    22 => "10111110101110100111111001111000", 
    23 => "10111010101011100010000001000110", 
    24 => "10111110010111111001001110011011", 
    25 => "00111101000100001001011011110010", 
    26 => "10111101110011010100110010110111", 
    27 => "00111101101110100111010111011101", 
    28 => "10111110101111001000101010011100", 
    29 => "10111110000011011111111100111111", 
    30 => "00111110000000101111010101000011", 
    31 => "10111110001111010011010110110010", 
    32 => "10111110001011000010110001110101", 
    33 => "00111110010101101000110111010000", 
    34 => "00111101011001011001011010111010", 
    35 => "10111011100100001010111111110100", 
    36 => "00111101000000000100110011100000", 
    37 => "00111101010000001111111010001100", 
    38 => "00111100111001100101101011001110", 
    39 => "10111101100110111100000111001000", 
    40 => "10111101101101011001101000100110", 
    41 => "10111110000100111011101100011110", 
    42 => "10111101100011111011101010010100", 
    43 => "00111101111000000011000111001000", 
    44 => "00111011100011110100010110101011", 
    45 => "10111110000010100000000011100111", 
    46 => "10111101111011100111100101010101", 
    47 => "00111100101101000010001000010000", 
    48 => "00111101100011000011101101100001", 
    49 => "10111101100110100000000100111000", 
    50 => "10111110110101101110110110111010", 
    51 => "10111100001101101110000101001110", 
    52 => "00111101010001011010001011110101", 
    53 => "10111110000110111000010110100010", 
    54 => "10111101110001010011010111101011", 
    55 => "00111110010110100110101010110110", 
    56 => "10111110000100010100011100100110", 
    57 => "00111101011100000010011000111110", 
    58 => "10111101110000100000000011101101", 
    59 => "00111101100000010100011001011000", 
    60 => "10111110100110011011100010100100", 
    61 => "10111101101010001001010101000000", 
    62 => "10111101000101111001000101100101", 
    63 => "00111101111010000010000110010000", 
    64 => "10111101001000101101010011000101", 
    65 => "10111110000101101101001010111010", 
    66 => "10111110010011101101010101010101", 
    67 => "00111110010011010101111111110110", 
    68 => "10111110000000010110101000110011", 
    69 => "10111101100100100001111111111100", 
    70 => "10111101001000101000010100111110", 
    71 => "10111101100001011100011001111010", 
    72 => "10111110100011001110011110000010", 
    73 => "00111101111010011000101101111110", 
    74 => "00111101100101001111110100110110", 
    75 => "00111101001111001010010100100001", 
    76 => "10111110000111101101010010000000", 
    77 => "10111110110010111111111101001100", 
    78 => "10111110000010110001111111111111", 
    79 => "10111011100011110100001001100011", 
    80 => "10111101111000100110111010001000", 
    81 => "00111101010100010110100110100000", 
    82 => "10111110000100111000001100101100", 
    83 => "00111110000010111001000111010100", 
    84 => "00111110100001100000100010111001", 
    85 => "10111110111101001011111001000101", 
    86 => "10111110111100110111111111100111", 
    87 => "00111100010111010110110010110100", 
    88 => "10111110011001111111001001011010", 
    89 => "10111101111001111111100001000111", 
    90 => "00111101100011010000011010101001", 
    91 => "10111110000001001110110010100111", 
    92 => "10111101011010101001110110101111", 
    93 => "00111101000100001100100010001100", 
    94 => "00111101101111101110111000101010", 
    95 => "00111110011101001001110001101011", 
    96 => "00111101110001010111000010001011", 
    97 => "10111100111000000011101010000111", 
    98 => "00111101101000010111011010011101", 
    99 => "00111101110101101110001011010000", 
    100 => "10111110010010101101101111101101", 
    101 => "00111101100110001010010010001110", 
    102 => "10111101101010000001000110000100", 
    103 => "10111110011011101111100101011111", 
    104 => "10111110000110011100011100111001", 
    105 => "00111101111010110110000001110110", 
    106 => "10111101111001000110000101010110", 
    107 => "00111100101110001010011101101110", 
    108 => "00111101100111000111101010001001", 
    109 => "00111110010000111000000100110010", 
    110 => "00111110000011011111100011001101", 
    111 => "10111101101011000001001110111101", 
    112 => "00111101101100101001111110011010", 
    113 => "10111101000000101000000111000011", 
    114 => "10111110011101001111110110111100", 
    115 => "10111110000111110001100001010101", 
    116 => "00111101110010101100111101001110", 
    117 => "10111101111000110101001100111111", 
    118 => "10111101111010111011010101000111", 
    119 => "10111101100001101000101110110100", 
    120 => "10111100101101010010101011011001", 
    121 => "00111101111011110010111101011010", 
    122 => "10111110100010101111011010010101", 
    123 => "10111101110000010111010010000011", 
    124 => "10111110101110010000111010000000", 
    125 => "10111011000010111011110110011010", 
    126 => "10111101010011000111010000101101", 
    127 => "00111101100100011011111101011100", 
    128 => "00111110000101011100100011100100", 
    129 => "10111101111001110011000010101000", 
    130 => "10111110100001001101011001011010", 
    131 => "00111110001001110110101101110110", 
    132 => "10111110101111101110101011010010", 
    133 => "00111110100011100100100001110011", 
    134 => "00111101111100001111100101110110", 
    135 => "10111101101110100011010000101001", 
    136 => "00111110011010001001000001000010", 
    137 => "00111101111010100010001010001111", 
    138 => "00111101100010110111111110010110", 
    139 => "10111101110110111110101100110110", 
    140 => "10111101001100000000110000101101", 
    141 => "10111110001010101110001110110111", 
    142 => "00111101100101111010111000000001", 
    143 => "00111110001101111000001010101101", 
    144 => "00111101100100001001101110001000", 
    145 => "00111110011111100011010010100000", 
    146 => "00111110001001000111111010100111", 
    147 => "10111101110001110001011000001100", 
    148 => "10111110100001000011001101000001", 
    149 => "10111111001011011101000010111000", 
    150 => "10111110001101011100110010111101", 
    151 => "10111101111000100100111011101110", 
    152 => "10111011101101001100000110101011", 
    153 => "00111110010101011011100010001011", 
    154 => "00111110010001101011001001000110", 
    155 => "10111011011010001001111110101010", 
    156 => "00111100111110110010011000111111", 
    157 => "10111101110010111101111001010111", 
    158 => "10111101101011110001011000011110", 
    159 => "00111100001001011001101010111010", 
    160 => "00111110000000110100111010101111", 
    161 => "00111101000010111111000011011101", 
    162 => "00111110011001001101111111011101", 
    163 => "10111110001000110101011011011001", 
    164 => "10111101000001010000100101100000", 
    165 => "10111111000000100001110100110010", 
    166 => "10111110011100101100011001111001", 
    167 => "00111110010100101111000101010111", 
    168 => "10111110110001111001000100010000", 
    169 => "00111110011011110000101001111001", 
    170 => "10111110000001101001101100101000", 
    171 => "00111110001100110011001011110010", 
    172 => "10111110101100000100101010100101", 
    173 => "00111101100001100000001000101010", 
    174 => "00111101110000000001110000110101", 
    175 => "00111101110101100001010110100001", 
    176 => "10111101001011000010101111000010", 
    177 => "00111100111111100001000111011111", 
    178 => "10111011010011101101001111000101", 
    179 => "10111101110111100010111011000111", 
    180 => "00111101100001101011001011100111", 
    181 => "10111110001100000101101011111111", 
    182 => "10111110001110000011110001111011", 
    183 => "00111100110011000101011100100101", 
    184 => "00111110001001101000111100111110", 
    185 => "00111001100110011000010100001111", 
    186 => "10111110100001111011000110101011", 
    187 => "10111011110110000000001011111000", 
    188 => "10111110010011100100010001110101", 
    189 => "10111011101100011010000110110011", 
    190 => "10111100111111000111110010011010", 
    191 => "00111100111000000100001000010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei2iS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei2iS is
    component conv_2_conv_2_wei2iS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei2iS_rom_U :  component conv_2_conv_2_wei2iS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


