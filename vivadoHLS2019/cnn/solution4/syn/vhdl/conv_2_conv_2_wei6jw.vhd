-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei6jw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei6jw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101111101010000101010101", 
    1 => "10111110010001001101011110110010", 
    2 => "00111100111010100101010110001111", 
    3 => "10111100111010011000101011110100", 
    4 => "10111100100110000101100011100110", 
    5 => "10111010100110110001010011011000", 
    6 => "10111110001101110100000011010010", 
    7 => "10111101011101110011001001000011", 
    8 => "10111110001101101000010010110010", 
    9 => "10111101101101011101111001110010", 
    10 => "10111101111001100101100100000110", 
    11 => "00111101101000001011101000011001", 
    12 => "10111110100100101110000000110100", 
    13 => "10111101001001111110101011110000", 
    14 => "10111110100111000111110000110110", 
    15 => "00111101010001111001110110101011", 
    16 => "10111110011010100000001110010111", 
    17 => "00111101011011110000001101100010", 
    18 => "00111101010100101010110011110010", 
    19 => "00111100111010000000000100111010", 
    20 => "00111101110100010001101101111111", 
    21 => "00111101000101010011110101111001", 
    22 => "10111100110111101110111100000111", 
    23 => "10111110000101111111010000111110", 
    24 => "10111110011011111011010111101011", 
    25 => "00111011100001100110010111000010", 
    26 => "00111101101100000101110000001111", 
    27 => "00111110010011101010001110100001", 
    28 => "10111110010010001001100010111111", 
    29 => "10111101011011011011010011110110", 
    30 => "10111101110110101101111110100000", 
    31 => "10111110001011000101011011001001", 
    32 => "10111101100011011011011001000000", 
    33 => "00111101110100011111101111000110", 
    34 => "00111101111001100000000110000111", 
    35 => "00111110001011100110000101100001", 
    36 => "00111110000001000011110111111000", 
    37 => "10111100001011010000010100000011", 
    38 => "10111110100110011111101011110101", 
    39 => "10111110011000001101100011110001", 
    40 => "00111101101111110111001111010010", 
    41 => "00111100101001010111110010000001", 
    42 => "00111010111111101001010111111111", 
    43 => "10111100001100001111100011100000", 
    44 => "10111101100101001101001100110000", 
    45 => "10111101001000010011010011110110", 
    46 => "10111110100101110101001101001100", 
    47 => "10111101111000011100101110100010", 
    48 => "10111101101000010110010101110011", 
    49 => "10111101000000101110001100000010", 
    50 => "10111110100001111100100110101100", 
    51 => "10111101111011110001010100111010", 
    52 => "00111101100011001111110010110101", 
    53 => "00111100111111010100110011110110", 
    54 => "10111101110011111111110010110111", 
    55 => "00111100101001101000000001111110", 
    56 => "10111101111001001100001010101000", 
    57 => "00111101100010000001100111101101", 
    58 => "00111101011110011000011101110110", 
    59 => "10111101111101001110111000110001", 
    60 => "10111101111111111010110110011100", 
    61 => "00111101011111001110001100110110", 
    62 => "10111101101110100101001001011100", 
    63 => "10111110001000100000010001101010", 
    64 => "10111011111000110000110111110011", 
    65 => "10111101001010101111001000011001", 
    66 => "10111101111010101010000111001010", 
    67 => "10111101111011001100011010010000", 
    68 => "10111100010100001110111011010001", 
    69 => "10111100101100110011110101010010", 
    70 => "10111110101010001101110011100110", 
    71 => "10111101110011110001110101111000", 
    72 => "10111110110011010000011011110011", 
    73 => "00111101000101011011101000100101", 
    74 => "00111101001100100011101101110011", 
    75 => "00111101000101001010001010100111", 
    76 => "10111110101101111001001101001000", 
    77 => "10111110001001010101001110101011", 
    78 => "10111110010001000111000000011100", 
    79 => "10111110000101100010001010100010", 
    80 => "10111101110101011101100011001111", 
    81 => "00111101011111101111101100101101", 
    82 => "00111101101010111010111111101101", 
    83 => "10111110001001100010000010101100", 
    84 => "00111101101110010010111100111110", 
    85 => "00111101001100101110111001000110", 
    86 => "10111110001011011010110100001100", 
    87 => "10111101110110111010100101010110", 
    88 => "10111110110010100010011000011101", 
    89 => "10111111000110011111111010101101", 
    90 => "10111101001010100100011111110000", 
    91 => "10111101001011101100010010001010", 
    92 => "10111101110000111101110110011010", 
    93 => "00111101100100001111100001100000", 
    94 => "10111101101011100011110101100111", 
    95 => "00111101110010110101101011100101", 
    96 => "00111101100011000001110110110111", 
    97 => "10111101011000100111100011110001", 
    98 => "00111100110111001101010100100011", 
    99 => "00111101101011110101010010001011", 
    100 => "10111110100000101000001110101110", 
    101 => "10111100000011101101011110101100", 
    102 => "10111110101101001001010110010101", 
    103 => "10111110100110101100111111111111", 
    104 => "10111101001111010111101000000100", 
    105 => "10111110110101011110100110011000", 
    106 => "10111110011001101010010110000010", 
    107 => "10111110101000111000010101111011", 
    108 => "00111101000001011110100000010101", 
    109 => "00111110001100100000100110111011", 
    110 => "10111110110010111111010110010010", 
    111 => "10111110001101001101111111000011", 
    112 => "10111110100111111001001101101100", 
    113 => "10111100001110110000100110110101", 
    114 => "10111110111010100101101100111000", 
    115 => "00111101010001100000010001010011", 
    116 => "00111101010011010110111110101000", 
    117 => "10111101110011101111000111000010", 
    118 => "10111110000101000110110010000101", 
    119 => "10111100011101101001110111000011", 
    120 => "00111110000101010011010110010100", 
    121 => "10111101010001010110001000000001", 
    122 => "10111011111111110100111000110001", 
    123 => "10111100111100100111110010110100", 
    124 => "10111110001001110101110011100011", 
    125 => "00111010100111001101001011001100", 
    126 => "10111110001001011011010000000101", 
    127 => "10111101010011011101011010101001", 
    128 => "00111101101011010000000000100000", 
    129 => "00111110100001000101011100100101", 
    130 => "10111100111110111111110101001011", 
    131 => "00111101101011000001111110101101", 
    132 => "10111110011011000000100101110000", 
    133 => "00111110010011101100000001000110", 
    134 => "10111110011101011010100111101110", 
    135 => "00111101010001001100001000110100", 
    136 => "10111110010111100000111000111011", 
    137 => "00111010010001110001010111111100", 
    138 => "00111101111010100111001010101000", 
    139 => "00111100001111101010001001100000", 
    140 => "10111110101110000000110011100001", 
    141 => "10111101101111110011010000101111", 
    142 => "10111110101010100011110100011010", 
    143 => "10111110100000010011100100000011", 
    144 => "00111100111001011010010110101010", 
    145 => "00111101111011100111111100110011", 
    146 => "00111100101110011101110001000111", 
    147 => "10111110000110011000001000001011", 
    148 => "10111110001001001010011010000011", 
    149 => "10111110110010100110011100001101", 
    150 => "00111101000010111000111111111001", 
    151 => "10111100011110000000011000110011", 
    152 => "10111110101000101101100000000111", 
    153 => "10111110011100000000010110111000", 
    154 => "00111110000001010001111001101100", 
    155 => "00111100000010101011010100101110", 
    156 => "10111101100001010011001010001000", 
    157 => "00111101100011111000011110011100", 
    158 => "00111101001010010100011100011110", 
    159 => "10111101101100100101111110011100", 
    160 => "00111101101111000111100101101001", 
    161 => "10111101111100011001001010110111", 
    162 => "00111101000000111001001110100011", 
    163 => "00111100101010110101110110111110", 
    164 => "10111110111111101010001011100001", 
    165 => "10111011110010100101010110011000", 
    166 => "10111110011110001010101011100111", 
    167 => "10111101101010110111111001010100", 
    168 => "10111110001101111010011110111111", 
    169 => "10111011110011111001110001000111", 
    170 => "10111110011100110101100001110100", 
    171 => "10111101011011111001111101111111", 
    172 => "10111101111001101010111011011100", 
    173 => "00111110010101100110101100011010", 
    174 => "10111101111001010100000010100111", 
    175 => "10111101101000001000001000100001", 
    176 => "00111100100100010111001010101001", 
    177 => "10111101100001000110101111001101", 
    178 => "10111111000110011001000000000001", 
    179 => "00111101111100010110001000000100", 
    180 => "00111101010110110111101110000010", 
    181 => "10111110010001100001000011010111", 
    182 => "10111101111000101000001011010101", 
    183 => "10111101100110000111110001000001", 
    184 => "00111101111110110010111110010100", 
    185 => "10111110001011000110111011001110", 
    186 => "10111101101001100100101110101101", 
    187 => "10111101101001101010100111111001", 
    188 => "10111110110110110000010111010111", 
    189 => "10111110111001111100011010001011", 
    190 => "00111101110110101010100111101010", 
    191 => "00111100010010100111000100101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei6jw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei6jw is
    component conv_2_conv_2_wei6jw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei6jw_rom_U :  component conv_2_conv_2_wei6jw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


