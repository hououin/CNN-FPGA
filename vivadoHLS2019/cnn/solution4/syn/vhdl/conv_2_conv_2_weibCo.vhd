-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibCo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibCo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110011010011100110100", 
    1 => "10111101100101111000101010100101", 
    2 => "10111100101110110000100011111011", 
    3 => "10111101001000101101101110100101", 
    4 => "10111110000100001110001000011101", 
    5 => "10111101100111101000010110101010", 
    6 => "10111101101110010010101011001101", 
    7 => "00111100100000101010001101110001", 
    8 => "10111110010111110100001010011011", 
    9 => "00111101000001100010000001111100", 
    10 => "00111101101110100001101111110110", 
    11 => "10111101011001000000111001011001", 
    12 => "10111110001000011101000000110101", 
    13 => "10111100000000110001011111000001", 
    14 => "10111101011100101011000110000000", 
    15 => "10111101100000010011110010000100", 
    16 => "10111110100001100000111111101111", 
    17 => "10111101100111000000111111111111", 
    18 => "10111110010110001110100010101110", 
    19 => "10111110000101000110001011110001", 
    20 => "00111110100011000001011000101011", 
    21 => "00111101011100101101101000110100", 
    22 => "10111110001110001001001001011110", 
    23 => "10111110111011011000111011001101", 
    24 => "10111110010010001011101100001001", 
    25 => "10111101000110011110110110111001", 
    26 => "10111100001010101111011000010001", 
    27 => "00111101001101000111111011000101", 
    28 => "00111101110110001011110000001101", 
    29 => "00111101111110011101101101101111", 
    30 => "10111110010101000111011001110011", 
    31 => "00111100111011011001111011011000", 
    32 => "10111100000100110101001000001100", 
    33 => "00111110011010101010001110110111", 
    34 => "00111101111001101101110001110101", 
    35 => "00111101011000011000000101000110", 
    36 => "00111101011001111101010010000011", 
    37 => "00111101010111110010100001100000", 
    38 => "10111110000111001111110000111000", 
    39 => "10111110101000011100111001111101", 
    40 => "10111110001110100001101100101100", 
    41 => "00111100101110100001101100000011", 
    42 => "10111110101001010101101110101110", 
    43 => "10111100001011001010101001000101", 
    44 => "10111110010010001000100100001010", 
    45 => "10111100110000111100111111000111", 
    46 => "10111110000010101001100011110100", 
    47 => "10111100101110000011111010110110", 
    48 => "00111101100110011100100111011010", 
    49 => "00111110001100000010010001010000", 
    50 => "10111110011110101101011110110100", 
    51 => "10111101100110011000101000100010", 
    52 => "00111101100011010000101011011111", 
    53 => "10111101100001111010000001010100", 
    54 => "00111100110011101111100000000000", 
    55 => "10111101101110101100000111111010", 
    56 => "00111101010111111001100011100100", 
    57 => "10111110011011100010110011110111", 
    58 => "10111101111001110011011010010001", 
    59 => "10111101111111010000011011000111", 
    60 => "00111101100001010100000011011101", 
    61 => "10111100010111001010010011000001", 
    62 => "10111110000011011011100010110101", 
    63 => "10111110011000111111000011011111", 
    64 => "10111101000100100010001111010011", 
    65 => "10111101010001010111000011010100", 
    66 => "10111101011110010000001010011000", 
    67 => "10111100100000101000101111011111", 
    68 => "10111110100011111011001100111101", 
    69 => "00111101010010110101011100110101", 
    70 => "10111110111100010101111011110110", 
    71 => "10111110010011101001000001010011", 
    72 => "10111110100011010001110001101001", 
    73 => "10111101010011101001000001011001", 
    74 => "00111101101100010010000101000110", 
    75 => "00111100111010011000111100101101", 
    76 => "10111110110001101010100000000000", 
    77 => "10111101110101101110111000111110", 
    78 => "10111110100101110110100101001010", 
    79 => "10111110011111110100111010111100", 
    80 => "10111110000100111101100011100110", 
    81 => "10111010101011011100000011101111", 
    82 => "00111101111100001010001101001000", 
    83 => "10111110101011001110110011001010", 
    84 => "00111101000000111010100001100000", 
    85 => "10111101100010000110011100101011", 
    86 => "00111110001110100100100011011100", 
    87 => "10111111000010000111011110111010", 
    88 => "10111110100111010110101101111101", 
    89 => "10111100101110111100000001100010", 
    90 => "00111101011011001111100010000101", 
    91 => "10111100000111010010011010111111", 
    92 => "10111110100011000011000000011110", 
    93 => "00111101110101100001111111101010", 
    94 => "00111101010111011010000110111001", 
    95 => "10111110001100101011110110010000", 
    96 => "00111101110101100001101010111111", 
    97 => "00111101000011001011011011000010", 
    98 => "00111101100101001001011000010000", 
    99 => "10111101011100111111000101001111", 
    100 => "00111100100011011111010100111011", 
    101 => "10111101101111101010100100011000", 
    102 => "10111110110001110010101100100010", 
    103 => "10111100100100110110000110010101", 
    104 => "10111110001000101111011100100000", 
    105 => "10111101010100011100111000000011", 
    106 => "10111110100101011000000100101001", 
    107 => "00111100010000110011101010000100", 
    108 => "10111110100010100101011101011011", 
    109 => "00111110011101110100110110101000", 
    110 => "10111110111001100101011000010000", 
    111 => "10111110101000110101111011110101", 
    112 => "10111110110100101101110100011011", 
    113 => "00111101000001000111011101101001", 
    114 => "10111110011001100000000001010111", 
    115 => "10111100000111011000000100010011", 
    116 => "10111110001010101010111101011000", 
    117 => "00111110000101101010001101110010", 
    118 => "10111110000010010110101110110001", 
    119 => "10111101011011110110001001100110", 
    120 => "00111101110110100011101000110100", 
    121 => "10111110100111101011111100010001", 
    122 => "10111101101100100101000001000000", 
    123 => "10111101100011111001100010010100", 
    124 => "00111101110111011010000000011011", 
    125 => "10111101000111001001111110101001", 
    126 => "00111110000011000110010001010111", 
    127 => "00111110000101111100101011100010", 
    128 => "00111110010100100110000001011001", 
    129 => "00111110000101111101111000111111", 
    130 => "10111101111010101100010111100110", 
    131 => "00111100001001101010110001101101", 
    132 => "10111110101010011111101101001110", 
    133 => "00111110011001111011000110011010", 
    134 => "10111110011110100001000011110110", 
    135 => "00111110001111101101011010010101", 
    136 => "00111101001001100011111100011110", 
    137 => "00111110000001010111011100110000", 
    138 => "10111101110100000111100111001110", 
    139 => "00111101110101000100010001110100", 
    140 => "10111110100000001010101110011100", 
    141 => "10111110000111111011100111110010", 
    142 => "10111100110011010110101000101011", 
    143 => "00111010111101001111001001001000", 
    144 => "10111101001101011110000010001010", 
    145 => "00111100101110100101101010011000", 
    146 => "10111100100110110011111101110111", 
    147 => "10111110100111000101010010111001", 
    148 => "10111110000101000111100101001111", 
    149 => "10111101010100001100110110001000", 
    150 => "10111101001001110000001100010111", 
    151 => "10111110100110000100100001101100", 
    152 => "10111110110000011011111001010001", 
    153 => "10111110000110011100111100110001", 
    154 => "00111110001101111111000011010101", 
    155 => "00111101001010100001000011110110", 
    156 => "10111110100001001001000010001101", 
    157 => "00111101010001110101111000101000", 
    158 => "00111110100101001011001001101010", 
    159 => "00111100000000100100001101100111", 
    160 => "00111110101001011101111100000111", 
    161 => "10111101111101110101111001111100", 
    162 => "00111110001000100101010111100100", 
    163 => "00111101100000011111111101010000", 
    164 => "10111110110100010101111001001100", 
    165 => "10111110010100000001100000111101", 
    166 => "10111110111000100100100100011011", 
    167 => "10111101010101101000110011000010", 
    168 => "10111100000000110010111101110101", 
    169 => "10111110001010010011100111001111", 
    170 => "10111110011001110110011111110100", 
    171 => "10111110000111011101010100011010", 
    172 => "00111101101010001111110111011000", 
    173 => "00111101100011111100110100011111", 
    174 => "10111110001101110100001000110100", 
    175 => "10111101100100101101110101111010", 
    176 => "10111110000001001101001101111110", 
    177 => "00111100110101111111111010000111", 
    178 => "10111110001000110111101000110111", 
    179 => "10111100100010111110110101000000", 
    180 => "10111101001101011111101110100001", 
    181 => "00111101101011011100100001010001", 
    182 => "10111110001101101011000101110001", 
    183 => "10111101111111111010110001000111", 
    184 => "10111101101101001000010100111101", 
    185 => "10111110101001010000110111100101", 
    186 => "10111110001011100101111110110001", 
    187 => "10111101001000000001011010100100", 
    188 => "10111110001010011010111100011111", 
    189 => "10111110011000011101011000101111", 
    190 => "00111101101111110011010010101011", 
    191 => "00111101100111001010000011000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibCo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibCo is
    component conv_2_conv_2_weibCo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibCo_rom_U :  component conv_2_conv_2_weibCo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


