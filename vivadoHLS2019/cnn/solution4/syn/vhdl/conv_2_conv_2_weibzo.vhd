-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibzo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibzo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111010111111101100010111", 
    1 => "10111101110011000110011000101101", 
    2 => "10111101110100100011010100010010", 
    3 => "00111101110111101000010111000101", 
    4 => "10111110000100011111111100100110", 
    5 => "10111110000100011001101011001010", 
    6 => "10111101011001100111111000111101", 
    7 => "10111101011001000101001100100010", 
    8 => "10111110010011001001101110000010", 
    9 => "00111101000010001000000010111010", 
    10 => "00111110010111010001110111110010", 
    11 => "10111110000001011110100000011000", 
    12 => "00111101001101001001101001110011", 
    13 => "00111101110100011010110100010000", 
    14 => "00111101101100011010110101011000", 
    15 => "00111110001110010110101011000011", 
    16 => "10111110100111111001001110111011", 
    17 => "00111101000101100001111011110101", 
    18 => "10111101011101001100001101111000", 
    19 => "10111110011101110110010001100100", 
    20 => "00111110101000110010011011010111", 
    21 => "00111101000101010110111001111111", 
    22 => "00111101111101111011100000100000", 
    23 => "10111110010001001101111101110011", 
    24 => "10111100100001110001001010100111", 
    25 => "00111101100101000100001110011010", 
    26 => "10111101111010000010110111100111", 
    27 => "00111101100100110011100011010111", 
    28 => "00111110011001100011010001000010", 
    29 => "00111101000111010001011011011010", 
    30 => "10111101101000010000101010101011", 
    31 => "10111110100110110100000010000111", 
    32 => "00111101111101100001011000000001", 
    33 => "00111110011010101000010011111010", 
    34 => "00111101100101100000101001001110", 
    35 => "10111100101000001110011111001101", 
    36 => "10111101011000110000011110111110", 
    37 => "00111110001110111000001101000101", 
    38 => "10111101101011011111110010011011", 
    39 => "10111100111001100000001000001001", 
    40 => "10111110011110101111111100001110", 
    41 => "00111110011100001110100101100011", 
    42 => "10111110110001110011100001100101", 
    43 => "00111110001010001010010010111000", 
    44 => "10111100100001101101110111111110", 
    45 => "00111101000111100100101011001000", 
    46 => "00111110000100111101100101001100", 
    47 => "00111110010010001110000111101011", 
    48 => "00111100010100100100010101110111", 
    49 => "00111100111010011110100100010111", 
    50 => "10111110000110010111010000100100", 
    51 => "10111101001011011101101011000101", 
    52 => "10111101111001111101101011100010", 
    53 => "00111101100100011101100101100001", 
    54 => "10111101111100101100010010000100", 
    55 => "10111100101000111000001111110010", 
    56 => "00111101101011000010011111111000", 
    57 => "10111110100101101010101000011010", 
    58 => "10111110000100010101111111111111", 
    59 => "10111110000001011101100111000000", 
    60 => "00111110001110110110111000001000", 
    61 => "00111101100001111110000110001010", 
    62 => "10111101101010110001001011011111", 
    63 => "10111110000110000100011000110001", 
    64 => "10111110000000000011101001111001", 
    65 => "00111110000010001011000111100110", 
    66 => "00111100010111101111110011100010", 
    67 => "10111110000011110101011110001110", 
    68 => "10111110001000110010011000100001", 
    69 => "00111110000101101010010101011000", 
    70 => "10111110010010010100000101111000", 
    71 => "10111010100111100010110110001111", 
    72 => "10111101111011110101101100101000", 
    73 => "00111101111001111001111001011011", 
    74 => "00111101100100111110100001000101", 
    75 => "00111101011010100101100011100100", 
    76 => "10111110010110011010011011110010", 
    77 => "00111001110000000000001100001111", 
    78 => "10111101000001010011100100000011", 
    79 => "10111101011001001100001101111101", 
    80 => "00111101011011000001111001111110", 
    81 => "10111011000110011011010100101011", 
    82 => "00111110010110101000010001000010", 
    83 => "10111110000010001000001001100001", 
    84 => "00111101101000111011100000011100", 
    85 => "00111101110010010110010010110101", 
    86 => "00111101100110000011100011111101", 
    87 => "10111101111101010010011010110110", 
    88 => "10111101110100100110101100100001", 
    89 => "10111101101010100101111101001000", 
    90 => "10111100100011110110010111111111", 
    91 => "10111101000010101011101111110111", 
    92 => "00111101110110110010010010101101", 
    93 => "00111100100001010111111000110110", 
    94 => "00111110000011001000110111101100", 
    95 => "10111110100100000111010001000010", 
    96 => "00111101011111110101111011010110", 
    97 => "10111101010100000111100011001011", 
    98 => "10111100110000101001110100101100", 
    99 => "10111101110101011000111111111000", 
    100 => "10111110011100100101001000100110", 
    101 => "10111110001010110111010010110001", 
    102 => "10111101101101000101111111001000", 
    103 => "00111101011110101001110000101010", 
    104 => "00111100111110110100010001010001", 
    105 => "10111101100010101110001101100001", 
    106 => "10111110010110111001011001111000", 
    107 => "10111101101111001011100100000001", 
    108 => "10111110011100101101000001100111", 
    109 => "00111110011010110100011010011001", 
    110 => "10111101010110000011000110011111", 
    111 => "10111101011010101111110001110101", 
    112 => "10111110110011010000000101110101", 
    113 => "10111101111110110001110101100010", 
    114 => "10111101100110011011010111000101", 
    115 => "00111101100100010001011101011001", 
    116 => "10111110010100000101101001100111", 
    117 => "00111101110101100001111100110000", 
    118 => "10111110100110111111001011111000", 
    119 => "10111101111001011110110011111110", 
    120 => "00111011001101001100010110010000", 
    121 => "10111110100010101001011001110010", 
    122 => "10111101101001100111110000000011", 
    123 => "10111101111110011100101101101010", 
    124 => "00111110010010101101100111001111", 
    125 => "10111100110001010100100011010001", 
    126 => "10111101110010101011000100000000", 
    127 => "00111101100011011100101000111010", 
    128 => "00111101101111000101101010000001", 
    129 => "10111100001100010110101101000101", 
    130 => "10111101011011110111101100000111", 
    131 => "10111100110011000111111000000011", 
    132 => "10111101100001111101010101100110", 
    133 => "00111110010110001110101110100111", 
    134 => "10111110000110100100010110100100", 
    135 => "00111101111111000000111000101010", 
    136 => "00111101110110000010010010000011", 
    137 => "00111110000111110110111010010101", 
    138 => "10111110010000100100100100000110", 
    139 => "00111101001000111000011101101011", 
    140 => "10111100001001001110011010100010", 
    141 => "00111110000010101101001000000111", 
    142 => "10111101101100100101111101011011", 
    143 => "00111100101001110010000100001001", 
    144 => "00111100110110001100011100011101", 
    145 => "00111110001000101000101110100000", 
    146 => "10111101011000101011001111100111", 
    147 => "10111101110010001000000001010101", 
    148 => "10111110010011001100011101101001", 
    149 => "00111101101011010001000001000101", 
    150 => "00111101001110100010101001000011", 
    151 => "10111100110100111001001010011110", 
    152 => "10111110010110001101110011110011", 
    153 => "10111110000100111110000101110111", 
    154 => "00111110000111100011111001101011", 
    155 => "00111101001011001111111101100101", 
    156 => "10111101011011000101100001101010", 
    157 => "00111100000110000101111101010111", 
    158 => "00111110000100111001001001110010", 
    159 => "10111101101111010111011110111100", 
    160 => "00111110100000000111010000111101", 
    161 => "10111110010001001101100101000100", 
    162 => "00111110011110101000011001110101", 
    163 => "10111101111110001111101101110001", 
    164 => "10111110001100000001001000001011", 
    165 => "10111110001110110010111010100100", 
    166 => "10111110010101001011100011101000", 
    167 => "10111101101100110101101100110100", 
    168 => "10111101011000000100111100101011", 
    169 => "10111110000000010111110001101100", 
    170 => "10111011100001000110101111110111", 
    171 => "10111110011100101101110010000011", 
    172 => "00111110000110110110100110100101", 
    173 => "10111110000001100111111111111011", 
    174 => "10111101010111100101100000110101", 
    175 => "10111100100011101011010011000100", 
    176 => "10111110000110101101010001001110", 
    177 => "10111110000001001101010111100110", 
    178 => "10111101101000110011110100110110", 
    179 => "00111100100101110111100100100001", 
    180 => "10111110010001010111110011101100", 
    181 => "00111101101011010100000000010000", 
    182 => "10111110000100010110101011100100", 
    183 => "10111101001101111100110011110011", 
    184 => "10111101111101011111101110111110", 
    185 => "10111110011001011110011000110000", 
    186 => "10111101011100111001111011110100", 
    187 => "10111101001110000011110000101001", 
    188 => "00111101110010011110001011001001", 
    189 => "10111101111111101110001101110100", 
    190 => "10111101001111010111000011001001", 
    191 => "00111101001101111111110100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibzo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibzo is
    component conv_2_conv_2_weibzo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibzo_rom_U :  component conv_2_conv_2_weibzo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


