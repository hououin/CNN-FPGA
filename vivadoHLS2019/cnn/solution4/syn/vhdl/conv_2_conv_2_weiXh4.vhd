-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiXh4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiXh4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111011110100100110111010", 
    1 => "00111101111101101100001110001101", 
    2 => "10111101100111010011111111110111", 
    3 => "10111101101011110011100011011110", 
    4 => "00111101001101110100111011100001", 
    5 => "10111100011000101000000011100000", 
    6 => "00111101100100101011001100001100", 
    7 => "10111101101111001110010101110101", 
    8 => "10111101011000100111010110111001", 
    9 => "00111101001110011111010100110110", 
    10 => "00111101111011010100100000101001", 
    11 => "10111100100110110100000100101011", 
    12 => "00111110000111000001001101111100", 
    13 => "00111100000011001011011110011001", 
    14 => "10111100011011011010111110100001", 
    15 => "10111101100011110101110001000110", 
    16 => "00111101101001100101111111111111", 
    17 => "00111100001101001111000010011110", 
    18 => "10111101000101111011010100001011", 
    19 => "10111100101101000101111111110011", 
    20 => "00111101110111010100001010011110", 
    21 => "10111110000111010111001100010010", 
    22 => "10111110000011000001000110110001", 
    23 => "10111101110111101001011110001010", 
    24 => "10111100100100010000011001010100", 
    25 => "10111101101011101011000001010100", 
    26 => "10111011100011000101111100000001", 
    27 => "10111110100100101100010101110111", 
    28 => "00111101001101011000101001111101", 
    29 => "00111100101001011001111011110110", 
    30 => "00111101011100101001001010010011", 
    31 => "10111100110010100011001010010010", 
    32 => "00111101110011100111111110100101", 
    33 => "00111101100101011011101011100001", 
    34 => "10111100101100110111010000101000", 
    35 => "10111101000100101001010010010101", 
    36 => "10111110010000000001011101000011", 
    37 => "00111101011110110100010111101111", 
    38 => "00111101100000100101001101011010", 
    39 => "00111101011100110110101001000001", 
    40 => "10111110000101010101100010100111", 
    41 => "10111011101011100001101011111010", 
    42 => "00111101001010100011101000110000", 
    43 => "10111101010010101110100101010110", 
    44 => "10111011000001011000101000010110", 
    45 => "10111100000011110101100110001101", 
    46 => "00111101101110111101101101011100", 
    47 => "00111101100011001100101001011011", 
    48 => "00111101000100011110000101100100", 
    49 => "10111110000111010101100100110000", 
    50 => "00111100111111101110011110000011", 
    51 => "00111110001111001001011001001011", 
    52 => "10111101110000011101110110000110", 
    53 => "10111110011010011010000101000000", 
    54 => "10111110001001000110010100011101", 
    55 => "10111101110010001110101101000010", 
    56 => "10111101101010000010100011011011", 
    57 => "00111101101100110110001101111010", 
    58 => "10111110010101001011111100001001", 
    59 => "00111110001000001111000010100111", 
    60 => "00111101110010110000010001110110", 
    61 => "10111101111011000101011101011011", 
    62 => "00111101010110101000101111101010", 
    63 => "10111100010010111001010000001001", 
    64 => "00111101011101100001110010001000", 
    65 => "00111101110110001001111110110101", 
    66 => "00111101001100011110001011000111", 
    67 => "00111110001000010101101100110111", 
    68 => "10111101001100110100110011100110", 
    69 => "00111101101011011101001011001100", 
    70 => "00111101110001110001100100100111", 
    71 => "10111101110001010101100000101100", 
    72 => "00111110000101011110101101100101", 
    73 => "00111101010000000101010001011001", 
    74 => "00111101000001110100111000110001", 
    75 => "10111101000011001110011100111011", 
    76 => "00111101111110011101000100011110", 
    77 => "10111100100111101101100010001101", 
    78 => "00111101011101000110111011000011", 
    79 => "00111011010010111110010011110111", 
    80 => "00111100001100101010001011100111", 
    81 => "10111101010000000011110011100100", 
    82 => "10111011100010111100101100000111", 
    83 => "00111100111010000000011101100010", 
    84 => "10111110011001101110111010010011", 
    85 => "10111100000010101010101010000110", 
    86 => "10111101101101111000011110010000", 
    87 => "10111101100100011101101000110110", 
    88 => "00111011111011010010011001101100", 
    89 => "00111101000101001001010111100100", 
    90 => "00111100100001001000111100111111", 
    91 => "10111110001111001111101010010110", 
    92 => "00111100011011001111001110111101", 
    93 => "10111011011110101101110111101011", 
    94 => "00111101110001011011011110001000", 
    95 => "00111011000111110000010011001010", 
    96 => "10111011111101000010101000000110", 
    97 => "10111101100111001000100100101110", 
    98 => "10111101010101100001011001000010", 
    99 => "10111110011010101010111000101001", 
    100 => "00111110000001100011110001110100", 
    101 => "10111110010111101111111010011110", 
    102 => "10111100010000110000010100100011", 
    103 => "10111101010000010001001010011100", 
    104 => "10111101110100100001111101011001", 
    105 => "00111101010111011010111100101001", 
    106 => "00111101111100101111010011010000", 
    107 => "00111100101111100101011100010000", 
    108 => "10111110000101000111111110100111", 
    109 => "00111110001111000010110011000111", 
    110 => "00111110001011000110010100100001", 
    111 => "00111100111101111100100011110000", 
    112 => "00111101101010101011101010100110", 
    113 => "00111100011111000101011010001000", 
    114 => "00111100110100101010101010110010", 
    115 => "10111100101111101010000000100111", 
    116 => "10111101010000111101001011011010", 
    117 => "10111100100001011100101100000010", 
    118 => "10111100011011101111110001011010", 
    119 => "10111101001101001001000010111001", 
    120 => "10111100111101100101000001111111", 
    121 => "00111100011001101110010000101100", 
    122 => "10111110001101010111100001011000", 
    123 => "00111101011111110111010011000010", 
    124 => "00111100101110011110110110101010", 
    125 => "00111101000010000111000101001100", 
    126 => "00111101101001110010001011101111", 
    127 => "00111101010100100111000001001011", 
    128 => "10111100110011001101101000111101", 
    129 => "10111101100001010001101101010111", 
    130 => "00111101010110001000010011011010", 
    131 => "10111011110100000001101100110101", 
    132 => "00111101101010110111110010001010", 
    133 => "10111110001001001010010101010010", 
    134 => "00111101101110011101010111000000", 
    135 => "10111110000000000011111000110100", 
    136 => "00111101110100101100110010111001", 
    137 => "10111110001010001001111101001111", 
    138 => "10111110101111100010111001010000", 
    139 => "10111110001001100011000100000000", 
    140 => "00111101100110010001010000101101", 
    141 => "00111100000001110111111111010110", 
    142 => "00111110000110111001100100011101", 
    143 => "00111101100100100110011010110110", 
    144 => "10111101010000001011000000001111", 
    145 => "00111100110101001010011111001010", 
    146 => "10111101010111101110100110101000", 
    147 => "00111110001010111000000101101100", 
    148 => "10111101101001111100110000011001", 
    149 => "00111011010101001000111000110010", 
    150 => "00111101001010100000111001011010", 
    151 => "10111101101001000111001011110101", 
    152 => "00111101111110001100111001000100", 
    153 => "00111101110010101010111010001100", 
    154 => "10111110001110101000000010110001", 
    155 => "00111101110100111111111101100101", 
    156 => "00111110000000110110101011111010", 
    157 => "10111101110010100011010111111011", 
    158 => "10111101010001100110001000101010", 
    159 => "00111101001111000000011011011010", 
    160 => "10111110011001001100010100000010", 
    161 => "10111101000110100001100010001001", 
    162 => "10111101000001000110000110111011", 
    163 => "10111110010111111000010011000110", 
    164 => "00111101100111011010001101011100", 
    165 => "10111110100001001011010000101100", 
    166 => "00111101110101110011011000101101", 
    167 => "10111101011011110010011000001001", 
    168 => "00111101010000010011000011010000", 
    169 => "00111101100000001101110000110001", 
    170 => "00111110000110100111100000001110", 
    171 => "00111100000110010111101010101001", 
    172 => "10111101101011101110100100101111", 
    173 => "10111110011101101110000011001001", 
    174 => "00111101111100101011110111000111", 
    175 => "10111100110100011010111001010110", 
    176 => "10111101101100001101001010011110", 
    177 => "10111101101011100100001010001100", 
    178 => "00111110011001110001000101001001", 
    179 => "10111110001011101011011110010100", 
    180 => "00111101100101011101101011100000", 
    181 => "00111110001011100111001101100000", 
    182 => "10111101101010000110000000011110", 
    183 => "00111110001100111111100101000111", 
    184 => "10111101110010101011010100001000", 
    185 => "10111100011000001101100000010110", 
    186 => "10111101010001101100011101001100", 
    187 => "10111101000010101101101110100110", 
    188 => "00111110010011100000010100001001", 
    189 => "00111110010111000100011101110111", 
    190 => "10111101111011000101111101001110", 
    191 => "10111110000110100000101110010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiXh4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiXh4 is
    component conv_2_conv_2_weiXh4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiXh4_rom_U :  component conv_2_conv_2_weiXh4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


