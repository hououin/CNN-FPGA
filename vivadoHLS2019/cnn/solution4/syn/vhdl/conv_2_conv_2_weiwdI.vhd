-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiwdI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiwdI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011001100011111011110001", 
    1 => "00111110000111001110100110101110", 
    2 => "00111101010101110011111100100011", 
    3 => "10111100100111111110000110010011", 
    4 => "10111101101101111001001100110110", 
    5 => "10111101111011101111000001100111", 
    6 => "10111101001010110111110111011011", 
    7 => "00111100110011010001000111010011", 
    8 => "10111110100100010101101011000010", 
    9 => "10111101000101100111000111110000", 
    10 => "10111110100101011101001101100111", 
    11 => "00111110010110010101010110011100", 
    12 => "00111101110101101000000110001000", 
    13 => "00111011110110011101010001011110", 
    14 => "10111011011011111100111100010000", 
    15 => "10111110101000010001001001101000", 
    16 => "00111101111110100011010110111011", 
    17 => "10111100110110110110000101011000", 
    18 => "00111110001110111011010100011100", 
    19 => "00111101110100110011011110100110", 
    20 => "00111110001001111100100011101100", 
    21 => "10111110000101011010101101101010", 
    22 => "10111101011000101011110000111001", 
    23 => "00111101100001111100111110101100", 
    24 => "10111101100000010101111000111110", 
    25 => "10111110101100010000100100111110", 
    26 => "10111110101101100110111110101000", 
    27 => "00111110011011110011100011010010", 
    28 => "10111101100111010101011111010000", 
    29 => "10111110011011101000000000001000", 
    30 => "00111110000101100101110110100110", 
    31 => "10111110010110001110110101101010", 
    32 => "00111100111100000110001100011010", 
    33 => "00111110010010110010100010000100", 
    34 => "00111010101010010011101000110000", 
    35 => "00111110001001001011101010101100", 
    36 => "10111010111001011011110100010101", 
    37 => "10111101111110100010101010100000", 
    38 => "00111101110000100001101010000000", 
    39 => "10111110100001100100000111101000", 
    40 => "00111101111100110100000011111110", 
    41 => "10111110001111011111101110100111", 
    42 => "00111110010010101111011111001100", 
    43 => "10111100100100010111101101101000", 
    44 => "00111100010000011100011110001100", 
    45 => "10111100111010101101001010110010", 
    46 => "00111110000001011100000001100010", 
    47 => "00111100100101010001010001111010", 
    48 => "00111110100000011100111101001100", 
    49 => "10111110110100100100100010111110", 
    50 => "10111110001101101001001101010101", 
    51 => "10111110010101000001111110111111", 
    52 => "10111101111111100101010111110111", 
    53 => "00111101110011011100001100111010", 
    54 => "10111110000110011001101111110101", 
    55 => "00111101100010101100001011101001", 
    56 => "00111100100011101001100111100110", 
    57 => "00111101111001100111000011001100", 
    58 => "10111101011101001001010010111101", 
    59 => "00111101111001010101001101011101", 
    60 => "00111110000111001000101010000010", 
    61 => "10111110100110011010110111111001", 
    62 => "10111101101011111101010011111011", 
    63 => "10111110010011010011000001100010", 
    64 => "10111101110110111111011010111110", 
    65 => "10111110001001001101000001010010", 
    66 => "10111110010110000111001001111110", 
    67 => "00111101100010110110101101010000", 
    68 => "10111110001001101101111010010001", 
    69 => "00111110010100000110011100101110", 
    70 => "00111101110010010011110101111010", 
    71 => "00111101101101101101111010010110", 
    72 => "10111110100010111100101001101111", 
    73 => "00111110000101010011101101111101", 
    74 => "00111110000111011010000011010111", 
    75 => "00111101010001111110100001100001", 
    76 => "10111101000111111001111101011000", 
    77 => "10111110010101101111000111101101", 
    78 => "10111110100001100111001101001000", 
    79 => "10111110010110001000000010111010", 
    80 => "10111110011110111001000011111101", 
    81 => "00111110000011110110001100110001", 
    82 => "10111110100000000100001111011110", 
    83 => "00111110001111001010111011010101", 
    84 => "10111101101101001101000010011000", 
    85 => "10111101101101001010010001111111", 
    86 => "10111110101110101011000011111110", 
    87 => "00111110100001111101110010110001", 
    88 => "10111101011111110000001011101110", 
    89 => "00111101100111001111100001110001", 
    90 => "00111101110110110011111011010011", 
    91 => "10111101101000111011101101010111", 
    92 => "10111110101101001001001001011010", 
    93 => "10111101111011000110111101000101", 
    94 => "10111110001111101101011101011110", 
    95 => "00111110001101001011101011010111", 
    96 => "00111101111011101000000010010100", 
    97 => "10111110100111110000111001001101", 
    98 => "00111101000010110100000010110011", 
    99 => "00111110001001000111011101100000", 
    100 => "00111110000011010101001010001101", 
    101 => "00111110001010110001011101101101", 
    102 => "10111101100101100101111100101100", 
    103 => "10111101111101111111100010101010", 
    104 => "00111101111100010011010100111000", 
    105 => "00111110000011010100110111100110", 
    106 => "10111101101111010000001000111011", 
    107 => "00111101001011111011110011111010", 
    108 => "00111101101110100010100001110000", 
    109 => "00111110011001110111010100110010", 
    110 => "00111100010000000010100010000100", 
    111 => "10111110000000111010101001111000", 
    112 => "00111101111000001011011010010010", 
    113 => "10111110100011000100000001000000", 
    114 => "10111110001111111011000101110011", 
    115 => "10111100011001011001111100100000", 
    116 => "10111110100111010000101001111001", 
    117 => "00111110100001100110010000010101", 
    118 => "10111101110011011100010001111101", 
    119 => "10111110101001001001010000111010", 
    120 => "10111110100000101011011110001010", 
    121 => "10111010111100110111000101011011", 
    122 => "10111100101001000010001001100011", 
    123 => "10111101000111010111000001110000", 
    124 => "10111110000110100110000100110000", 
    125 => "10111110101000111101010100011011", 
    126 => "10111101100010111001100011000101", 
    127 => "00111101100000001110001110000100", 
    128 => "00111100011111011101010011110010", 
    129 => "10111110100011101101100101010010", 
    130 => "10111110010000011101011111001001", 
    131 => "10111110000011110011100001010111", 
    132 => "10111110000110001000101001001111", 
    133 => "00111110101001111100101011001100", 
    134 => "00111011011000101101110111010101", 
    135 => "00111101101100101100011000000000", 
    136 => "10111101100100100111110100001001", 
    137 => "00111101101000011111110010011001", 
    138 => "10111011101011011100101111011010", 
    139 => "10111110001101000100010000000000", 
    140 => "00111101100100001111111011111001", 
    141 => "10111110101111100100011100100100", 
    142 => "10111101101100000000100001111101", 
    143 => "10111011001111100011101111011111", 
    144 => "10111011100101101010011011100011", 
    145 => "00111101100011111100000010000000", 
    146 => "10111110011011101111101000010010", 
    147 => "00111101000101011010101001010100", 
    148 => "10111111000100001111111001011111", 
    149 => "00111011111110011110001001110000", 
    150 => "10111110010111100110011001010001", 
    151 => "00111101100011001001001010110000", 
    152 => "10111101110111000100001101111001", 
    153 => "00111110001011010011100000001110", 
    154 => "00111110010110010001111001110100", 
    155 => "10111110010011111011110001110101", 
    156 => "10111100101001100101001011000000", 
    157 => "10111110010000100111000010000000", 
    158 => "10111110100100001100011011001100", 
    159 => "00111110010000010110111010011100", 
    160 => "10111101110110110111001011011010", 
    161 => "00111101011001110101110011110010", 
    162 => "00111101001110000110101000001100", 
    163 => "10111110011011010000100110010111", 
    164 => "10111101111001001010010111100100", 
    165 => "00111100110010000110010001011011", 
    166 => "10111100110100101100001111111000", 
    167 => "00111110001001011000011101001110", 
    168 => "10111110011011011001011011000110", 
    169 => "00111110001100010000110010111011", 
    170 => "00111100111101000010001110101000", 
    171 => "00111110001011000101001000011100", 
    172 => "10111110101001100110111110000000", 
    173 => "10111110011100010011010000001001", 
    174 => "00111101100100000111010000010110", 
    175 => "00111101101100011011100100010101", 
    176 => "10111110000000101001001011000000", 
    177 => "10111110001000101100110000100101", 
    178 => "10111101010111011100100011010011", 
    179 => "00111110001001100100101111110011", 
    180 => "10111101000111000011111100011111", 
    181 => "10111101110000010111101110010011", 
    182 => "10111110011111011100011111110010", 
    183 => "10111101101101000011000011100101", 
    184 => "00111011000101011000101010101000", 
    185 => "00111011111010001000011111010010", 
    186 => "10111101111001011111010111101110", 
    187 => "00111101110101111101001011001111", 
    188 => "10111110001110010100011110011011", 
    189 => "00111110001000000000110110100000", 
    190 => "00111101111010100001011101011000", 
    191 => "00111101111011011001100111010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiwdI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiwdI is
    component conv_2_conv_2_weiwdI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiwdI_rom_U :  component conv_2_conv_2_weiwdI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


