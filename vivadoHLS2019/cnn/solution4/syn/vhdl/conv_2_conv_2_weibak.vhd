-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibak_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibak_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010000111011100111100", 
    1 => "00111101101000110110001111001100", 
    2 => "10111100100001111000100011101000", 
    3 => "10111101001010110101001011111011", 
    4 => "00111101100010010111101110111000", 
    5 => "10111101000100000111011000110010", 
    6 => "00111110000001100000110000010100", 
    7 => "10111110000000011010010111100100", 
    8 => "00111110000111000010111011011101", 
    9 => "00111110000001110010100011011010", 
    10 => "00111110000100101001000010001110", 
    11 => "10111101101110110111110100010010", 
    12 => "00111110001100111000011011101101", 
    13 => "10111100010101111110011101010001", 
    14 => "00111100100111011011100101000000", 
    15 => "10111100000011111110110110000010", 
    16 => "10111101110011101001010111100011", 
    17 => "10111101010010001010000111100010", 
    18 => "10111101110110001111000011110001", 
    19 => "10111100001010111001111000010100", 
    20 => "10111100010000111110010111001100", 
    21 => "10111101101101110101000011000010", 
    22 => "10111110100000111000100100111101", 
    23 => "10111110101010100011000001100001", 
    24 => "00111101101000111011011000001000", 
    25 => "00111100010000101100110011101011", 
    26 => "10111101010111101000101010101000", 
    27 => "10111101110010000111001110100101", 
    28 => "10111011101000100111111110000010", 
    29 => "00111100100001101111100000110101", 
    30 => "10111101000101111111001111101111", 
    31 => "10111100001011001000110011011101", 
    32 => "00111110000011000000011011001110", 
    33 => "10111110000101101111000110111000", 
    34 => "10111101010011010010100101011110", 
    35 => "00111100110110111001001001101001", 
    36 => "10111101101000011100010011000001", 
    37 => "10111101000111110010110000110110", 
    38 => "00111101110010101001011111101100", 
    39 => "00111110001001100111010110110110", 
    40 => "00111110000011001100100111000100", 
    41 => "00111100000110010110110010100110", 
    42 => "10111100000010000111010010011111", 
    43 => "10111101111100111000100101111000", 
    44 => "00111010111110110110100101011000", 
    45 => "10111100011001001101010001010110", 
    46 => "00111101000010100110111001000000", 
    47 => "00111100100001100100110110100100", 
    48 => "00111101111001101111001010111011", 
    49 => "10111101011110110001011100000001", 
    50 => "00111101111101101101010111000101", 
    51 => "00111110011110010011000111000010", 
    52 => "10111101011101110101001000010010", 
    53 => "10111110101010001110001001101101", 
    54 => "10111100101001111011110110110111", 
    55 => "10111101111010010110100111101010", 
    56 => "10111101111101000110101110100001", 
    57 => "10111101100101101110001000011110", 
    58 => "00111101101111010000100001000010", 
    59 => "00111101000011111101100000011011", 
    60 => "10111101010011100011111100111000", 
    61 => "10111110000001101101101110000111", 
    62 => "00111101000000100111000101100010", 
    63 => "10111101000110000100111111011000", 
    64 => "00111101001100010000100110011000", 
    65 => "00111101101001101000000101100001", 
    66 => "00111110001100011001001010000100", 
    67 => "00111101001011101011010101101011", 
    68 => "10111101011110011101101111111100", 
    69 => "00111101110110111100001110010111", 
    70 => "00111101111011010100011010111110", 
    71 => "10111110001101010001110100011010", 
    72 => "00111101101010010010011011100111", 
    73 => "00111100110100111000011101011101", 
    74 => "00111101101001110001111010001101", 
    75 => "00111100100011001100011011111110", 
    76 => "00111100111111001010110001110000", 
    77 => "00111101000100011100110010100101", 
    78 => "00111110000101110110011000101000", 
    79 => "10111100111110101001011111101110", 
    80 => "00111101000010110110011001000110", 
    81 => "10111101111100100011000011110001", 
    82 => "10111011101110000001111011100110", 
    83 => "10111101110001011001101000110100", 
    84 => "10111110101011011000001000000011", 
    85 => "00111011111111100010101101100101", 
    86 => "00111100101110111101010001101101", 
    87 => "10111100101101011011000001000011", 
    88 => "00111101001001111000100001100100", 
    89 => "00111101111101001010100010001011", 
    90 => "00111101001001100000000111111100", 
    91 => "10111110101111100110010101011000", 
    92 => "00111101100100011011000000000110", 
    93 => "10111100110000111011101100011000", 
    94 => "10111011101001111010001111000000", 
    95 => "10111100111111011100110010110100", 
    96 => "00111101100001100110110111100011", 
    97 => "10111101111000110001110001010001", 
    98 => "10111101011111111101110011001000", 
    99 => "10111101010101101010011010011110", 
    100 => "00111110001000110011001100001010", 
    101 => "10111101101010001001001111101101", 
    102 => "00111110000110101011101110001110", 
    103 => "00111101011101011001001100110000", 
    104 => "10111110001110100111101100110100", 
    105 => "00111110000111011110110001000101", 
    106 => "10111101101110000110001110111010", 
    107 => "00111100101100101110111000000000", 
    108 => "10111101100010111110111010001111", 
    109 => "00111101000010101111101111010000", 
    110 => "00111110011000010110011011010111", 
    111 => "10111101100100101011111111000011", 
    112 => "00111101000100111010111000010100", 
    113 => "10111110011011111011011010010100", 
    114 => "00111110000111011110100101000100", 
    115 => "00111110000111100100001110011010", 
    116 => "00111100110110001011101110010000", 
    117 => "10111101111000111000011101111111", 
    118 => "10111101000111100000011111111001", 
    119 => "10111101000010110001000001100110", 
    120 => "10111101100110010011010011000101", 
    121 => "10111110000010011111001111101000", 
    122 => "10111110000111000011011101011111", 
    123 => "10111101010100111011011001110110", 
    124 => "00111101000010111011111010110111", 
    125 => "10111101000100110110000111110111", 
    126 => "10111110001011111110001011110010", 
    127 => "10111101100000100110010011011001", 
    128 => "00111011111010010001001111000100", 
    129 => "00111101010101100011010100010001", 
    130 => "00111101100101001101010100110000", 
    131 => "10111101010111101111000110110001", 
    132 => "00111011111010010001011010110010", 
    133 => "10111101111001011110101101110010", 
    134 => "10111101100000010010110001010011", 
    135 => "10111101100110101111110100101100", 
    136 => "10111100110111110111100111101011", 
    137 => "10111110001001101100001010011100", 
    138 => "10111110100000111011010101100101", 
    139 => "10111110001101111001110111010111", 
    140 => "00111110000011010000000101111101", 
    141 => "00111101101111000110010001110010", 
    142 => "00111100101111011101001110011011", 
    143 => "10111101011100110100100010010110", 
    144 => "00111100101100101111011101101000", 
    145 => "10111110001110110101011011110101", 
    146 => "00111101101000000001000111011100", 
    147 => "00111101110011101011001111001010", 
    148 => "10111110001110000010101000001010", 
    149 => "10111100111111100011011100000101", 
    150 => "00111100001100110011010111110011", 
    151 => "00111110000000100000000111101010", 
    152 => "00111101101101000011100101111111", 
    153 => "10111101101101000000101110001110", 
    154 => "10111110001000010000010000110101", 
    155 => "00111101100110101010111100100011", 
    156 => "00111100111100000011111110110111", 
    157 => "10111101001000011111110011101010", 
    158 => "00111101111111010000111000001001", 
    159 => "00111101110101010111000110000010", 
    160 => "10111110111011001010000011110001", 
    161 => "10111101010101010101001001001111", 
    162 => "10111110001001111000010000100110", 
    163 => "10111100100011111001111001100000", 
    164 => "00111110001011001010101100010000", 
    165 => "10111110011110101101000011100110", 
    166 => "10111100000111001000101110101000", 
    167 => "10111101111000011001001010011011", 
    168 => "00111101011111111101100101001000", 
    169 => "00111101111000010011010101110110", 
    170 => "10111110000001101000001100011001", 
    171 => "10111010010110101001011101101000", 
    172 => "10111101111100101011000110010010", 
    173 => "10111110100111100101110100101110", 
    174 => "10111101010111110100101101100010", 
    175 => "10111100101011001111000010011110", 
    176 => "00111100100001101100001001000010", 
    177 => "10111010110101100010010011101000", 
    178 => "00111110001101000011101100110110", 
    179 => "10111110000100000110101000001110", 
    180 => "10111101111100111100100101111010", 
    181 => "00111110001010001111111010000001", 
    182 => "00111011101011100110110000101000", 
    183 => "00111110100010100001110111111110", 
    184 => "10111101101001100011011000101000", 
    185 => "10111101011011101101110000111101", 
    186 => "10111110011000111101011010000010", 
    187 => "10111101011010101000010011010110", 
    188 => "00111110010110111111001100000111", 
    189 => "00111110011111100110100101111111", 
    190 => "10111101000000110000000110000001", 
    191 => "10111110001000010100001011011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibak is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibak is
    component conv_2_conv_2_weibak_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibak_rom_U :  component conv_2_conv_2_weibak_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


