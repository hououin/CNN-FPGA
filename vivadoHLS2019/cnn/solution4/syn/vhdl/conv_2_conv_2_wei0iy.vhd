-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei0iy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei0iy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011110110110010001110001", 
    1 => "00111110001000001100100000011011", 
    2 => "00111110100000000000000110101110", 
    3 => "10111110100110001111101100010101", 
    4 => "00111101100110011000011100001110", 
    5 => "10111101101010010000001000101110", 
    6 => "10111110000001100110011001100011", 
    7 => "00111110000010111000011100100010", 
    8 => "10111110011001000010110101001110", 
    9 => "00111101011100110011111001010101", 
    10 => "10111101101000101000010000101001", 
    11 => "00111101101000110010101000111101", 
    12 => "10111101110001000010010000000001", 
    13 => "10111101110110111101110111101011", 
    14 => "10111110101011100101010001111101", 
    15 => "10111110101110110101100101000101", 
    16 => "00111101100110000010001110001100", 
    17 => "10111101101111011110100010100000", 
    18 => "00111100100101011010000101010110", 
    19 => "00111101011011111000111011000101", 
    20 => "00111110001000100011111011100011", 
    21 => "00111101011101000110110100010001", 
    22 => "10111110000010110010101000100101", 
    23 => "10111101111011010010111110001001", 
    24 => "10111110000011111001111110100110", 
    25 => "10111101110001100010001000010010", 
    26 => "10111110000011101010111011111101", 
    27 => "10111101000010101110011111010000", 
    28 => "10111101001110000010101010111100", 
    29 => "00111101101001110110010001110000", 
    30 => "10111101010110001100010100001001", 
    31 => "00111101110110100110001000010001", 
    32 => "10111110011001101000101011011011", 
    33 => "00111110000001010101101010011101", 
    34 => "10111110001010010110110001100010", 
    35 => "00111110001010111100111000110000", 
    36 => "00111110101000101110000001101001", 
    37 => "10111101001011100101011001001111", 
    38 => "10111101001111000110111101101010", 
    39 => "10111101110001011101111101010110", 
    40 => "10111100110001001001101001111100", 
    41 => "10111110100000111001101011100111", 
    42 => "00111101011011101000010101110001", 
    43 => "10111110110000111000000101011101", 
    44 => "00111011001100010010110010001010", 
    45 => "10111110100001001101010110001100", 
    46 => "00111101011101101011001111110100", 
    47 => "10111110101011110101011100110110", 
    48 => "00111101111100010001111111001100", 
    49 => "10111100110010000011010101111110", 
    50 => "10111110000110100000001011100000", 
    51 => "00111100110001000011010000100000", 
    52 => "10111100010101011010110101010100", 
    53 => "10111110000101000010100101111100", 
    54 => "10111010010011101100011011001011", 
    55 => "10111110001000011110101001111011", 
    56 => "10111101100101101000010011000101", 
    57 => "00111101110011100011001111100010", 
    58 => "00111101011110101111110101001101", 
    59 => "10111110001101111010100000010111", 
    60 => "10111011110011011011100010111101", 
    61 => "10111110101110111001101111001010", 
    62 => "10111110001110001010011110000111", 
    63 => "10111110010110011100111101000110", 
    64 => "00111101100111010001101100011000", 
    65 => "00111100101111010010011100011000", 
    66 => "00111101100010001000111111000010", 
    67 => "10111101100010001110001011001001", 
    68 => "10111101100101001111000111100001", 
    69 => "10111011010000110110000101110000", 
    70 => "10111110001111010000001100101010", 
    71 => "10111011111110110000110000001010", 
    72 => "10111110000100010010011101110000", 
    73 => "00111101110011001011111111110010", 
    74 => "00111100101101101100111001101000", 
    75 => "00111101010011000100111001100000", 
    76 => "10111101100100110001000101011010", 
    77 => "10111110001011000100010011111101", 
    78 => "10111111001000101100011000000101", 
    79 => "10111110111101011111010010101110", 
    80 => "10111110101001011101001011101011", 
    81 => "00111100101000100101011011100110", 
    82 => "10111110000100010100100110110101", 
    83 => "00111100000101011000111011000101", 
    84 => "00111110000000100111000110001100", 
    85 => "00111100111110000111110001110011", 
    86 => "10111110000101100101101000111001", 
    87 => "10111110100011011110000111101110", 
    88 => "10111110011001000100111111010001", 
    89 => "00111101001011001111110001011110", 
    90 => "10111101000001100101110011101111", 
    91 => "10111110000001000100010101101010", 
    92 => "10111110111000100011001001000100", 
    93 => "10111101101000110100001001001100", 
    94 => "10111101101101011111000101010001", 
    95 => "00111101101100001111000100111000", 
    96 => "10111101101000111001001100100000", 
    97 => "00111110100000101011111111100010", 
    98 => "10111101101101111011101000010011", 
    99 => "00111101010001011100000101010001", 
    100 => "00111110011010110110111101111001", 
    101 => "10111101011110010111010110000111", 
    102 => "10111110011010010101101011010011", 
    103 => "10111101100010010110110000010000", 
    104 => "10111100010100110101000010001101", 
    105 => "10111110000110100011111111000010", 
    106 => "00111100000100000101100001111010", 
    107 => "10111011100001001100100100000001", 
    108 => "10111101100110010110010000011110", 
    109 => "10111110001100010111100001101000", 
    110 => "10111110101100011101110110111100", 
    111 => "10111110011101101110000011000100", 
    112 => "10111100110010011010111111111101", 
    113 => "00111101101110001001001110100010", 
    114 => "10111101111100111000111001000010", 
    115 => "10111110001001000100110100111100", 
    116 => "10111100111010011000111010011100", 
    117 => "00111101011011101001001111000011", 
    118 => "10111110001111110111110100111010", 
    119 => "00111101110011000011011010011100", 
    120 => "10111110100000000100111111000100", 
    121 => "00111101010101001001100101100101", 
    122 => "00111100011011010001000100011011", 
    123 => "10111110110100010101111011001110", 
    124 => "10111101000000001101100110101011", 
    125 => "00111101011010001010111101111001", 
    126 => "10111101110011111001101100001100", 
    127 => "10111101101000000111110110101000", 
    128 => "10111110000010001010001111000101", 
    129 => "10111110010110001100111011010001", 
    130 => "10111110010100100000100011011101", 
    131 => "10111101110011010111000110101001", 
    132 => "00111011110111001001001011000011", 
    133 => "00111101010100111101100001110000", 
    134 => "10111110100110000101100001111111", 
    135 => "10111100001010110101111111000101", 
    136 => "10111101001010011001001100100110", 
    137 => "10111101110010100011000010111110", 
    138 => "10111100111100110100100110101010", 
    139 => "10111110001001101100001001010111", 
    140 => "10111110100011011001100011010101", 
    141 => "10111110101001011111001010000000", 
    142 => "10111110010001010101111101011011", 
    143 => "10111101100010111110111111110100", 
    144 => "10111110100010101000001101101111", 
    145 => "00111110001010001011110110111000", 
    146 => "10111110100001111011110100011101", 
    147 => "10111110101001000111101110011111", 
    148 => "00111101110100110110110100000101", 
    149 => "10111101010010000110000100011000", 
    150 => "10111110011101000110100100100001", 
    151 => "00111100101110100010000100110101", 
    152 => "10111110100000001100101001110001", 
    153 => "10111100111110000001100101010101", 
    154 => "00111110011011010011100101100101", 
    155 => "00111101000001001011101110110011", 
    156 => "10111110011011011100000011000001", 
    157 => "10111110001010111111011000001101", 
    158 => "00111101100110111110010111001110", 
    159 => "00111101001001010100101011100000", 
    160 => "00111110000100010111101110010000", 
    161 => "00111101111011001000010101101110", 
    162 => "00111101110010111111000000000010", 
    163 => "00111101010111101000001010001111", 
    164 => "10111101111011011111000001010111", 
    165 => "10111101110000110111000111010001", 
    166 => "10111110000101000000010110110100", 
    167 => "00111101100111111011001011000010", 
    168 => "10111101101100111001111011110010", 
    169 => "10111101010000100111011000010100", 
    170 => "10111110100111001111010010000111", 
    171 => "00111101100011110110111000100011", 
    172 => "10111101001111001001010101100100", 
    173 => "00111110011110010101001000000101", 
    174 => "10111100100100110011000001010000", 
    175 => "10111101100111010110001001011010", 
    176 => "10111110101011010110000001110111", 
    177 => "00111101100110100100011100111010", 
    178 => "10111110101111010001000010000101", 
    179 => "10111110001011001101010001110100", 
    180 => "10111100110011011101000111010101", 
    181 => "00111100101110110110110111101010", 
    182 => "10111110000100010000100101110000", 
    183 => "00111110000110000100001101100100", 
    184 => "10111110011100111101111111010001", 
    185 => "10111110001011000010011111100110", 
    186 => "10111100111011011010100101011110", 
    187 => "10111101101011000001110011111000", 
    188 => "10111110001101100111111110100110", 
    189 => "00111101100011010001111111111110", 
    190 => "10111110011101100000011100111000", 
    191 => "10111101101010100100011011000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei0iy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei0iy is
    component conv_2_conv_2_wei0iy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei0iy_rom_U :  component conv_2_conv_2_wei0iy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


