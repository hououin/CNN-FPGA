-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei3i2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei3i2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000001101100110101001110", 
    1 => "10111110000110011000000011110000", 
    2 => "10111101100100010011010011010000", 
    3 => "00111101110101100111010100111111", 
    4 => "10111110101101001110100011000001", 
    5 => "10111110000011101010101000011101", 
    6 => "10111110100011001000001000011110", 
    7 => "10111101100000001001000111011100", 
    8 => "00111110000010110111111111011111", 
    9 => "10111101010111001111001011001110", 
    10 => "00111100110110111011101001010011", 
    11 => "10111011110111010000011011100100", 
    12 => "10111110100010111000001100111001", 
    13 => "10111110001111010001110101010110", 
    14 => "00111100110101001100110010111100", 
    15 => "00111110010110000010011101011101", 
    16 => "10111110101011101110110101011101", 
    17 => "00111101100000111110010110110100", 
    18 => "00111101011001001000100001001001", 
    19 => "10111100111110101101100101101101", 
    20 => "00111101110010001011010010000010", 
    21 => "10111110001001111000011001000000", 
    22 => "10111110011010000010011000110010", 
    23 => "10111100101001011100010010101110", 
    24 => "10111110001000111111011111110010", 
    25 => "00111110010000010111110011111000", 
    26 => "00111100111000101100100100000100", 
    27 => "00111110001001110010010111110101", 
    28 => "10111110000001101000001101000010", 
    29 => "00111100111001000111001001011110", 
    30 => "10111110001100111111010100110000", 
    31 => "10111110100001010010100111100001", 
    32 => "00111101000011011001011111001000", 
    33 => "10111101001111010100001001000101", 
    34 => "00111101100010011110001101001111", 
    35 => "00111101000100100101011100101000", 
    36 => "10111110000011001110101001001010", 
    37 => "00111101001000001100100000100110", 
    38 => "10111110010110010100111101110100", 
    39 => "00111101000101011110011111010100", 
    40 => "10111101010110111110101011010111", 
    41 => "00111110001010110011110011100001", 
    42 => "10111110010110000101101100011110", 
    43 => "00111101100101100000111010011100", 
    44 => "10111101100110011000001011011010", 
    45 => "10111100000101111010010111111001", 
    46 => "10111101111010010000101000001101", 
    47 => "10111110001000001000011000011100", 
    48 => "10111110100010110010001011001110", 
    49 => "10111101011110000010000110110100", 
    50 => "00111100100100011011001010010111", 
    51 => "00111101011101000010010111011111", 
    52 => "10111101110000001010011110110000", 
    53 => "10111100100110010110000001101110", 
    54 => "00111100100000011000100100011111", 
    55 => "10111110000010010111110101011001", 
    56 => "10111110010000010000010001111011", 
    57 => "10111001011011110100110101101011", 
    58 => "00111100000110110010001111111110", 
    59 => "10111110001001110101001011011010", 
    60 => "00111100100111001110100100001111", 
    61 => "00111110001010111101000111101101", 
    62 => "00111101011011100110011000011010", 
    63 => "00111110000011100010010010111001", 
    64 => "10111110001011101011010100111110", 
    65 => "10111101011010110111011000010010", 
    66 => "10111100111010111110011011001101", 
    67 => "10111110010110001001010100000000", 
    68 => "10111110101001010001101010011100", 
    69 => "00111100110000101010010000001111", 
    70 => "10111110011110110010100001110100", 
    71 => "10111101100011011110110001100010", 
    72 => "00111110001000101011010001000000", 
    73 => "10111101000111011111010000011101", 
    74 => "00111110010000010001010101000000", 
    75 => "00111101000011011100011111110000", 
    76 => "10111110100100010010000010011011", 
    77 => "10111101011100011101001110011010", 
    78 => "00111110001100010000000110101101", 
    79 => "00111100100011000011100100111000", 
    80 => "10111101101001111000111000001111", 
    81 => "10111101010100010001100100010110", 
    82 => "00111101110001100011011010100000", 
    83 => "10111101000101111111000011111001", 
    84 => "00111110000000011001100011101111", 
    85 => "10111110000111011001011110000010", 
    86 => "00111101001001110101001011111101", 
    87 => "10111101100001000011011111011111", 
    88 => "10111110001011010000101001101111", 
    89 => "10111110010000011100111001110100", 
    90 => "10111101101001101011111001010100", 
    91 => "10111110000100001000100110000111", 
    92 => "00111110001010100010010110101000", 
    93 => "00111101111100101111000101110000", 
    94 => "10111101101000000001001111011100", 
    95 => "00111011101010100011001110100001", 
    96 => "10111100011001100001011111100010", 
    97 => "10111110010101011111100110101000", 
    98 => "10110111010011000001101100001000", 
    99 => "00111101001011000111111111101111", 
    100 => "10111110110011100111100101100001", 
    101 => "00111101010110101001011111100001", 
    102 => "10111110011010111001101000100100", 
    103 => "10111110011000011110100001011001", 
    104 => "10111101110001100011010001000100", 
    105 => "10111110011110101111001111111001", 
    106 => "10111110101110001111110000010011", 
    107 => "10111110100111100100101001000110", 
    108 => "00111101000101101000001110111111", 
    109 => "00111110000101111111100111011111", 
    110 => "10111110100111010011101110010011", 
    111 => "10111100100011001101100001000101", 
    112 => "10111110001011010000011100101010", 
    113 => "10111110001001001000101110111000", 
    114 => "10111101000011111100010001111011", 
    115 => "00111110001010101101001110110100", 
    116 => "10111101101101111110101101010000", 
    117 => "10111110001000100110101111101001", 
    118 => "10111100000010000111110111000011", 
    119 => "10111101011111010001001001010101", 
    120 => "00111110001101000011111000000000", 
    121 => "00111101011000101000111000111101", 
    122 => "10111101101100011010101110011111", 
    123 => "00111101001010001111111010000001", 
    124 => "00111101100010000101111101000000", 
    125 => "00111110000110100100011001001111", 
    126 => "10111110011101110100001111001111", 
    127 => "10111110000011100001011000011011", 
    128 => "00111101111011111011001010110000", 
    129 => "00111110010000001101110001111011", 
    130 => "00111101101011000001001110001100", 
    131 => "00111101101001011000111011110011", 
    132 => "10111110000101010010011111101011", 
    133 => "00111011010011011111000110000001", 
    134 => "10111110100001011110011011011011", 
    135 => "10111101101111111111110110010100", 
    136 => "10111110000011010001001111101000", 
    137 => "00111100010010011101010001010111", 
    138 => "10111100101001001100100101001110", 
    139 => "00111000100110010011100000101110", 
    140 => "10111110100101001101000010011110", 
    141 => "10111110000011110010101011110010", 
    142 => "10111110011001101000010010100110", 
    143 => "10111100111010110000101011000000", 
    144 => "00111101000000000010100100100010", 
    145 => "00111101100011011000101101010000", 
    146 => "00111101100101100100101101011100", 
    147 => "00111101000001101000111111100110", 
    148 => "10111110101100101110000001101010", 
    149 => "10111110101111000010111100001100", 
    150 => "00111101100001111101000010110010", 
    151 => "10111101010101011000001010101110", 
    152 => "10111110011101000100110010010000", 
    153 => "10111110010000101111000110001000", 
    154 => "00111101110010010011001111111001", 
    155 => "10111101000011101110010100011111", 
    156 => "10111100100110111101111001100100", 
    157 => "00111110001100100100101111001011", 
    158 => "00111100111010011111111000010000", 
    159 => "10111101100110011010101010001101", 
    160 => "00111101101000101011001001010100", 
    161 => "10111110011101111000100001001000", 
    162 => "00111010000101011101110110110010", 
    163 => "10111101101110100011010101000001", 
    164 => "10111110001110100001001000001000", 
    165 => "10111110000001010011111111011110", 
    166 => "10111110001000111001001101110101", 
    167 => "10111101110100000011010101010110", 
    168 => "10111110011111001001011101101111", 
    169 => "10111110000101001100001011100101", 
    170 => "10111101111101111110001110000100", 
    171 => "10111101011011010001000100001110", 
    172 => "10111110011011010001011111001101", 
    173 => "00111011100010010000010100010001", 
    174 => "10111110010011000101110011000001", 
    175 => "10111101100101001101100001001001", 
    176 => "00111100110111110110001001000101", 
    177 => "10111001001010001010111101001000", 
    178 => "10111110000001001010111111010000", 
    179 => "10111100001001100010101000010111", 
    180 => "10111100001110001100010100011000", 
    181 => "10111101111111011100000100010001", 
    182 => "10111101101010101010101000100011", 
    183 => "00111101010110101101101011111100", 
    184 => "00111110000010101111011100111110", 
    185 => "00111101001011100111110100111100", 
    186 => "10111110100011100101100111111100", 
    187 => "00111101101111110110010001011000", 
    188 => "10111101100011101101100101010111", 
    189 => "10111110011100110100110111100111", 
    190 => "00111110000010100001101110111111", 
    191 => "10111101011100101010111011101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei3i2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei3i2 is
    component conv_2_conv_2_wei3i2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei3i2_rom_U :  component conv_2_conv_2_wei3i2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


