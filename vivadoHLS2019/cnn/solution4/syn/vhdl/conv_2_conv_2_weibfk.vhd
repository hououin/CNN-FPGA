-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibfk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010000101110000111011111", 
    1 => "00111101101001100101010011111011", 
    2 => "00111101100010010111000110110011", 
    3 => "10111110000111000011001010000001", 
    4 => "00111101100010100011001010011000", 
    5 => "10111101100111000111110001101111", 
    6 => "10111110000001110010101010111101", 
    7 => "00111101100010011000010011011101", 
    8 => "10111101001010110110101000111010", 
    9 => "10111011001101101101010011100011", 
    10 => "10111101111010101100011111010100", 
    11 => "00111101100110010101100001000101", 
    12 => "00111100100010101010000110011100", 
    13 => "10111110000111111100110011110001", 
    14 => "10111110100010000001000100011110", 
    15 => "10111110000000001100000101010000", 
    16 => "00111101100001010001011011111000", 
    17 => "10111110001011110000100011010110", 
    18 => "00111101100111001010111000011001", 
    19 => "10111110001010001001110101110010", 
    20 => "00111110001010111000111110101001", 
    21 => "10111110100111111010011011000010", 
    22 => "10111110101100111001001010101010", 
    23 => "00111101101110011000101010101100", 
    24 => "10111110100111001000010110110100", 
    25 => "10111101110100011010001011111001", 
    26 => "10111101111110100101110110111001", 
    27 => "10111101100111010011010010110010", 
    28 => "10111110010010111011011011100001", 
    29 => "10111110000100110010100111011100", 
    30 => "00111110100011000111010101011101", 
    31 => "10111110000111100110110011011001", 
    32 => "10111110000101110100111000010000", 
    33 => "00111101110010010001100111010000", 
    34 => "10111101000101000011011000000000", 
    35 => "00111100110111110100110010000010", 
    36 => "00111100000011010100100000101111", 
    37 => "10111010001110001100101000000000", 
    38 => "00111110001100010111000110111010", 
    39 => "00111100001010100000011100111011", 
    40 => "10111110100011111001111000110001", 
    41 => "10111110010000011000100000111110", 
    42 => "10111110001000110101010111001000", 
    43 => "10111101110100011000110010101001", 
    44 => "00111110000111101000011010110111", 
    45 => "10111110011001010011100111111110", 
    46 => "00111101010111011101110000010100", 
    47 => "10111101101001000110001110100011", 
    48 => "00111101101111000100000100001001", 
    49 => "10111101110010110110001011101000", 
    50 => "10111110101001011110110000001000", 
    51 => "00111101000000110001110000110101", 
    52 => "00111101010110100111101001110111", 
    53 => "10111110010101101000000111101011", 
    54 => "10111110000110101001000011100111", 
    55 => "00111101110001011001100100110000", 
    56 => "10111101010111110010100100000100", 
    57 => "00111100011000110110010100110001", 
    58 => "10111110001111001000100101111001", 
    59 => "00111101101110001101110001110110", 
    60 => "10111110000100110111000100001100", 
    61 => "10111101100011111001110111110000", 
    62 => "00111110001101110000000010001110", 
    63 => "00111101110001001011100001001101", 
    64 => "10111101011100101110000100010111", 
    65 => "10111101110000101100001100011111", 
    66 => "10111110010111000010000011101111", 
    67 => "00111101010101110110001001111101", 
    68 => "00111100100110101001100001101110", 
    69 => "10111010111011101001111001100100", 
    70 => "00111101000110010110001010110111", 
    71 => "10111101000001110000010100010011", 
    72 => "10111110011100000111101010000111", 
    73 => "00111101111001000100110011111110", 
    74 => "00111101100100111100001100011011", 
    75 => "10111100111001001101010111000001", 
    76 => "10111101010100110110010001101101", 
    77 => "10111110100001010010111001100111", 
    78 => "10111101110100110011110101001011", 
    79 => "10111100110000011010010011010111", 
    80 => "10111101101011001011000011100011", 
    81 => "00111101100100111111110101001110", 
    82 => "10111110010100100111000000101111", 
    83 => "00111110000110001110111101101110", 
    84 => "00111110011100110111010011110101", 
    85 => "10111110001011000000111101011110", 
    86 => "10111110101111100111100010010011", 
    87 => "00111101100110001010110101011101", 
    88 => "10111101110010101111100001000101", 
    89 => "10111100101101101101001110101111", 
    90 => "10111100101110001100011010001101", 
    91 => "10111110010000011001011111011000", 
    92 => "10111110000101100111001101001110", 
    93 => "10111110000011001101101010111101", 
    94 => "00111110001101000001100001011001", 
    95 => "00111110011001111111000110000001", 
    96 => "00111101011010010100001110011010", 
    97 => "00111110000101001111101100111001", 
    98 => "00111101111001101110111000101001", 
    99 => "00111101100001000010110010101100", 
    100 => "10111100100011110001001101011101", 
    101 => "00111101010101101101100100111100", 
    102 => "00111101000001111100000000011100", 
    103 => "10111110100001010010010011100100", 
    104 => "10111110000010011100111110110101", 
    105 => "00111100110100101001100001001001", 
    106 => "10111101110001011000111110101010", 
    107 => "00111110000011110110000110000010", 
    108 => "00111110011001010110101110001101", 
    109 => "00111110010100110101100101010100", 
    110 => "00111110011001000110100000011100", 
    111 => "00111101111100000111000111110111", 
    112 => "00111110100010001011110010111011", 
    113 => "10111110010100000111010110111001", 
    114 => "10111101110011000101001010110100", 
    115 => "10111100001000010100101101011000", 
    116 => "10111101001011110011010100100100", 
    117 => "10111101100010111111110111110000", 
    118 => "10111101101010010110111010111010", 
    119 => "00111110000101011000111000100000", 
    120 => "00111101011001010010010110100101", 
    121 => "00111110001001100110110010000110", 
    122 => "10111101001000010101101111011101", 
    123 => "10111101011011101001101110000011", 
    124 => "10111110100101111000100111000101", 
    125 => "00111100000011111000111010111101", 
    126 => "10111011101101010001110111111000", 
    127 => "00111101100011101001111010110101", 
    128 => "00111110010011001001101000100111", 
    129 => "10111110000111001011011000110001", 
    130 => "10111110100010110010011000010111", 
    131 => "00111110000100100000111111010011", 
    132 => "10111101101000010111100111010001", 
    133 => "00111110011100110110001100111000", 
    134 => "00111110010001100110110110001000", 
    135 => "10111101110101110001110101101000", 
    136 => "00111110001111110000010011010100", 
    137 => "00111101001100001010000011101011", 
    138 => "00111010101100101011010000000100", 
    139 => "10111101001110010110110100010101", 
    140 => "00111101110101011001101111100100", 
    141 => "10111110010100010011101111011000", 
    142 => "00111101001011010000101110100000", 
    143 => "00111101101000011101111111011111", 
    144 => "00111110001101110001001001011000", 
    145 => "00111110000101110011100010010111", 
    146 => "00111101001111010110011011001100", 
    147 => "00111100110000101111011010101000", 
    148 => "10111110111101010101000100110010", 
    149 => "10111110111100110011101011101010", 
    150 => "10111110011100001100101110111001", 
    151 => "00111101110100011101010001111100", 
    152 => "00111100001011001001011101011011", 
    153 => "00111110100000110100011011110001", 
    154 => "00111110011011000101000001111010", 
    155 => "00111100011000101110011010110000", 
    156 => "00111101101110100001000010110011", 
    157 => "10111110000001110110110011111001", 
    158 => "10111110001111100000001001001110", 
    159 => "00111101110110001101110111100110", 
    160 => "00111110011010101111011000110000", 
    161 => "00111000111001010011111100000010", 
    162 => "00111101111101000111110010101110", 
    163 => "10111110000110100110011100100100", 
    164 => "10111100110000000100100110010100", 
    165 => "10111110101110011100001011011011", 
    166 => "10111101010111101101011111100110", 
    167 => "00111101111111011010010110010100", 
    168 => "10111110110010101111100010001011", 
    169 => "00111110010011010000000110001000", 
    170 => "10111100110001101110011010100110", 
    171 => "00111110001111110010001011000111", 
    172 => "10111110100110001011101110100011", 
    173 => "00111110011001011101111011101001", 
    174 => "00111101100010010011111110000111", 
    175 => "00111101111000100111011100100000", 
    176 => "10111101001101110001001101101001", 
    177 => "00111101101000111111101010101011", 
    178 => "00111101100010100000000100101000", 
    179 => "10111110010110010110000100000010", 
    180 => "10111100110101001000110111001100", 
    181 => "10111110000001111101101000111011", 
    182 => "10111110011110101001010001101100", 
    183 => "10111101000011010000010100100010", 
    184 => "00111110010011111100000001011110", 
    185 => "10111101110001000110000100001011", 
    186 => "10111100100010100111000000010010", 
    187 => "00111100101010000001111101011000", 
    188 => "10111100000011011110100111001110", 
    189 => "00111110000001011101110001100101", 
    190 => "10111100101111001100101010001010", 
    191 => "00111100101000011111011000111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibfk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibfk is
    component conv_2_conv_2_weibfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibfk_rom_U :  component conv_2_conv_2_weibfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


