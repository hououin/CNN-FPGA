-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibRq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibRq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111011110000001001101", 
    1 => "10111101011000110111101001110111", 
    2 => "10111010010111001100111001100010", 
    3 => "00111110010001110011010010011101", 
    4 => "10111101110001101111101101001000", 
    5 => "00111100101110001000110110010010", 
    6 => "00111011001111010001000101010100", 
    7 => "00111101100011000111110011010011", 
    8 => "00111101010010101100011100011110", 
    9 => "10111101010001101000010110100101", 
    10 => "00111110000011001101011101101011", 
    11 => "00111011110011110011011111110110", 
    12 => "00111011100010101101111101001010", 
    13 => "00111110011010000000111011001101", 
    14 => "00111110011100000110000000100110", 
    15 => "00111110000110110010000010100101", 
    16 => "10111110011010110010101101110011", 
    17 => "00111101110110111000001001101111", 
    18 => "10111100100111111001000011110100", 
    19 => "10111110010111101001101111101000", 
    20 => "00111110010111000111011011111010", 
    21 => "00111100110111110001110111110011", 
    22 => "00111110000010111010110110100100", 
    23 => "10111101010110000110011101010100", 
    24 => "00111101101100011010101100101001", 
    25 => "00111110000000101100011101100100", 
    26 => "00111011110000110001000011100111", 
    27 => "10111101010010001011111111101110", 
    28 => "00111110010110011100010111000110", 
    29 => "10111101110100001010001100101011", 
    30 => "10111110001000100111111100011100", 
    31 => "10111110101110011010000110010100", 
    32 => "00111101101010011101101111111110", 
    33 => "00111110010101100010010100111001", 
    34 => "00111100101010000010111111001011", 
    35 => "10111110001001001001001100101011", 
    36 => "00111101010000001101111001001010", 
    37 => "00111110001111011111101010100100", 
    38 => "10111101010011101100100110001001", 
    39 => "10111110000010111001110101101010", 
    40 => "10111110101011111010001111001010", 
    41 => "00111110100000011001111000010000", 
    42 => "10111110010000001100000101101000", 
    43 => "00111110010101000110111100101001", 
    44 => "10111101001110110110001000011010", 
    45 => "00111101011000001100011011111001", 
    46 => "00111110010101100100110001011100", 
    47 => "00111110001000011011110101011000", 
    48 => "10111101101011000101011000000000", 
    49 => "10111100001000111111000110101101", 
    50 => "10111110000010001001011010000110", 
    51 => "10111110000111100010100001111101", 
    52 => "10111101111111101100110111111010", 
    53 => "00111101000101110011111101110011", 
    54 => "10111110011000111101100100111010", 
    55 => "10111101101110010100100110101100", 
    56 => "00111110000100100000100010001010", 
    57 => "10111110001101000100011101010100", 
    58 => "10111110001011001011011010001111", 
    59 => "00111101001000010110111001011111", 
    60 => "00111101101111011011010010100100", 
    61 => "00111110000100011101010101010100", 
    62 => "10111101110111110100011011111000", 
    63 => "10111110000110101011010011101010", 
    64 => "10111101100001100101111100101111", 
    65 => "00111101011110100110000100110100", 
    66 => "10111101101110010110101101101011", 
    67 => "10111100000111100010000000111010", 
    68 => "00111011001011000001101010101101", 
    69 => "00111110001101001010010010101010", 
    70 => "10111110010001011100000000111010", 
    71 => "10111101011100101011011000000010", 
    72 => "10111100010011001011100001100001", 
    73 => "00111011100000001100011010000110", 
    74 => "00111110000000101010000111000101", 
    75 => "00111101100000100111001111011100", 
    76 => "10111110010010011111110110001110", 
    77 => "00111101010111011001101010010100", 
    78 => "00111101001000101010000000110110", 
    79 => "10111101000001100101011110010111", 
    80 => "00111101101110011100100110100100", 
    81 => "00111101001011000010011100001100", 
    82 => "00111110001000011000101001010111", 
    83 => "10111101110011100000100101010011", 
    84 => "10111101100000100101101000001111", 
    85 => "10111011100101010100111011001110", 
    86 => "00111101101000100001111011011111", 
    87 => "00111101001001001010011010101001", 
    88 => "00111101101110000111001001100110", 
    89 => "10111101110000110110111001101010", 
    90 => "00111101100010001011011111110111", 
    91 => "00111100110011100001011010000100", 
    92 => "10111101000000110011101100001101", 
    93 => "10111101111100100010010011101011", 
    94 => "00111100101110000010111011110001", 
    95 => "10111110000001111111001100010000", 
    96 => "00111101001001011110111111010011", 
    97 => "10111101111000100100000110111001", 
    98 => "00111110001011101111001101111010", 
    99 => "10111110001010001111111111011100", 
    100 => "10111110001010010011100000101101", 
    101 => "10111110001101000101001010111100", 
    102 => "00111100001000111010010011011011", 
    103 => "00111101000111010000110110110010", 
    104 => "00111100110001011000100001011111", 
    105 => "00111100111010110010111010100101", 
    106 => "10111100101100100001110000101001", 
    107 => "00111100101111011100110001011001", 
    108 => "10111101011101110010000001000111", 
    109 => "00111110011101101010100000010001", 
    110 => "10111100101001000111101001110011", 
    111 => "10111101101001000011111100011110", 
    112 => "10111110011010111101010101100101", 
    113 => "10111101101011111010011110111000", 
    114 => "10111100010010110000011001110010", 
    115 => "10111110000110100100100110110001", 
    116 => "10111101111111010010001001111011", 
    117 => "00111110000010000010100100000011", 
    118 => "10111110010101010100110000011010", 
    119 => "10111110001011101000000001101100", 
    120 => "00111100101110110110111101011001", 
    121 => "10111110000110011001101110010000", 
    122 => "10111101110010000111010001110011", 
    123 => "10111101000000111011011000010101", 
    124 => "00111101110001110001100011011000", 
    125 => "10111011001010001111100111000011", 
    126 => "10111101011110001001110001000100", 
    127 => "00111101101101001010010001111111", 
    128 => "00111100011011111001010101111110", 
    129 => "00111100001101101001011110011100", 
    130 => "10111101100011000100011011000101", 
    131 => "10111101101100100001010001010100", 
    132 => "10111100001111110010101100010111", 
    133 => "00111101110111000001100101111110", 
    134 => "10111101100100101011001111110011", 
    135 => "00111110000011111000101110010000", 
    136 => "00111101100111111100010101010011", 
    137 => "00111101001100010100101010100101", 
    138 => "10111110100110101110101101000101", 
    139 => "00111110000111011110110110011001", 
    140 => "00111101100011001010100111011001", 
    141 => "00111110001100110011011111010011", 
    142 => "00111100110001001111110001111001", 
    143 => "00111101011001000010110110010100", 
    144 => "10111011010010010111001100000001", 
    145 => "00111101110100001111000100000010", 
    146 => "10111101100100010011100010000010", 
    147 => "10111100110011000100111010010100", 
    148 => "10111110000100111011111010101110", 
    149 => "10111100111110011100001101011111", 
    150 => "00111101000111001010000111101100", 
    151 => "00111101000110011100011100110011", 
    152 => "10111101100111000011010000111100", 
    153 => "10111101101101111010101011000110", 
    154 => "00111110001100011101001110111100", 
    155 => "00111110001101010010110001101000", 
    156 => "10111110000010110101001011000000", 
    157 => "00111100111101101011000101101101", 
    158 => "00111101110001001001110001101010", 
    159 => "10111101011010101111100111110000", 
    160 => "00111101011000100001100011111010", 
    161 => "10111101100100000111111010001111", 
    162 => "00111101000010100111010100001100", 
    163 => "10111110010110001011010110110000", 
    164 => "10111110100001100000000110101001", 
    165 => "00111010111110110111001000110111", 
    166 => "10111011111001100010110101100100", 
    167 => "00111101111111010110111110110010", 
    168 => "00111101110101010110100100000011", 
    169 => "10111101111100001011110010110010", 
    170 => "00111101100111011101010010001001", 
    171 => "10111101000010001011010001001110", 
    172 => "00111101100001001001100110111001", 
    173 => "10111110000101000010000001100110", 
    174 => "10111101100001100110010001101111", 
    175 => "00111101111010010000111101100011", 
    176 => "10111101011111111101100011001001", 
    177 => "00111011100111001101100001101010", 
    178 => "10111101111100000110000101010000", 
    179 => "00111101010111011111100011100001", 
    180 => "00111101000101001100010000000010", 
    181 => "00111110000010011100101000110110", 
    182 => "10111110000111000111011100111101", 
    183 => "10111110100010100100000101001100", 
    184 => "10111110001101010000001100100001", 
    185 => "10111100010100100110111011010000", 
    186 => "10111100100110101110100111010010", 
    187 => "00111101010000110010011100100110", 
    188 => "00111101001001010111001101100000", 
    189 => "10111110010101110010111110011101", 
    190 => "00111101100110110101111010100000", 
    191 => "00111101111001111100110001110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibRq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibRq is
    component conv_2_conv_2_weibRq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibRq_rom_U :  component conv_2_conv_2_weibRq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


