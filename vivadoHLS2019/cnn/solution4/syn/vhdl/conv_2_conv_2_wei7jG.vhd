-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei7jG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei7jG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010000101011110011110001", 
    1 => "10111101100001111010100000011100", 
    2 => "10111110010011001100001110111011", 
    3 => "00111110010001000000101000011100", 
    4 => "10111110101100101010011101111100", 
    5 => "00111101101011010101101101000011", 
    6 => "10111101010011001101000011100110", 
    7 => "10111110000001111000001011100100", 
    8 => "00111110001001011110101010001101", 
    9 => "10111011110000101000011001100110", 
    10 => "00111100110000001111100110111010", 
    11 => "10111110001000101000110011001101", 
    12 => "10111101111011100101001000011111", 
    13 => "10111110000010100100010000111010", 
    14 => "00111110010001101111100001011111", 
    15 => "00111110000100000001100101101100", 
    16 => "10111110100101111001111000111001", 
    17 => "00111101100101110111011111000101", 
    18 => "10111101000111111000010010001100", 
    19 => "00111100111110111110011110110011", 
    20 => "00111101110101001001011010110000", 
    21 => "00111101000000100010100110000101", 
    22 => "10111110100110100111101101000011", 
    23 => "10111110001111111010011001000110", 
    24 => "10111011110110001111010110100000", 
    25 => "00111110000100101100010011010110", 
    26 => "00111101110000110100110011100100", 
    27 => "00111110001010000101011101011010", 
    28 => "10111101001000100101111110111100", 
    29 => "00111101011001010100101000100001", 
    30 => "10111110000101000011011010110000", 
    31 => "10111110100101011001100100000010", 
    32 => "00111110010000110000110110100011", 
    33 => "10111110011111001111001000110000", 
    34 => "00111110000001110100110100001110", 
    35 => "00111101111110100000001010110011", 
    36 => "10111101101111110011111001000001", 
    37 => "10111100001001100110101101101000", 
    38 => "10111110000111111101011001110011", 
    39 => "00111101110111010001101001111001", 
    40 => "00111110000000000111010110100111", 
    41 => "00111110100100001010101111010010", 
    42 => "10111110110001110001101001010111", 
    43 => "00111101110010010000000100001111", 
    44 => "10111011110010010101010111010111", 
    45 => "00111101100010101111001010011011", 
    46 => "10111101110010000011110000000101", 
    47 => "10111101010101110111110111001000", 
    48 => "10111110000011001011001010010001", 
    49 => "10111110000101101011010001101010", 
    50 => "00111101110000110100111010100010", 
    51 => "00111110000101011011010001000010", 
    52 => "10111101110100010100011001011000", 
    53 => "10111101111011100010100010100111", 
    54 => "10111101001101101000101011000110", 
    55 => "10111110010101111011001011111001", 
    56 => "10111101001111001100111010001101", 
    57 => "10111101111000010000111101100110", 
    58 => "00111100001001001011100111011110", 
    59 => "10111110011100001111001001110100", 
    60 => "10111101110010111010110010100111", 
    61 => "00111110000000101001011001001101", 
    62 => "00111101110111000010001111101110", 
    63 => "00111110000011001101101101010010", 
    64 => "10111110011001101010011010101011", 
    65 => "00111110000001110000000110101011", 
    66 => "10111100110011111010000110000000", 
    67 => "10111110011110000110101000000001", 
    68 => "10111110101101001100100011010101", 
    69 => "10111101010001011111110100011101", 
    70 => "10111110000011111010101111011110", 
    71 => "10111110000110000110101010000100", 
    72 => "00111101101010101100011111000101", 
    73 => "10111101100100000101000000100001", 
    74 => "00111101011010011011001010110001", 
    75 => "00111101101101111100000010001000", 
    76 => "10111100100010100001111110101000", 
    77 => "10111100001011010110101110110100", 
    78 => "00111110100010001010100001011011", 
    79 => "00111101000110011011111110110100", 
    80 => "00111101101010100001000110001110", 
    81 => "10111101101100001100101010110011", 
    82 => "00111101100110110000101100110000", 
    83 => "10111101000101100001001000000000", 
    84 => "00111101110111101110001011010110", 
    85 => "10111101010101010010011000100110", 
    86 => "00111100111001101101110011011011", 
    87 => "10111101000111110101011000010100", 
    88 => "00111101011101111111101011011001", 
    89 => "10111101001100011011111110100011", 
    90 => "10111110000001101100000110111000", 
    91 => "10111100011011000100000011111000", 
    92 => "00111110011010100110010010000111", 
    93 => "00111100110100110100000010111110", 
    94 => "10111101111011000010100100100110", 
    95 => "10111101101110100010000010000000", 
    96 => "10111101000010011101010100111111", 
    97 => "10111110011011001100001001000110", 
    98 => "10111101011010001000011000001110", 
    99 => "00111100001110000101001011111101", 
    100 => "10111110100101011101100000110101", 
    101 => "00111101110001101011010001101001", 
    102 => "10111110010011000100110011111000", 
    103 => "10111101001100111101001111110100", 
    104 => "10111101110111010010001011111101", 
    105 => "10111110001001100100111011100111", 
    106 => "10111110100011011011110010101000", 
    107 => "10111110010001100110001100001111", 
    108 => "10111101101110011111011100000101", 
    109 => "10111100011000011000101101010011", 
    110 => "10111110011001011010011101111001", 
    111 => "10111101011010110110001000110011", 
    112 => "10111110011111000000010111010101", 
    113 => "10111110101011010000100010101101", 
    114 => "00111110001101000100010010100010", 
    115 => "00111110010111101100000001001011", 
    116 => "10111110001000111111110100110110", 
    117 => "10111110000101000011111110000110", 
    118 => "10111010010101011001010011001110", 
    119 => "10111110011110110011101111101101", 
    120 => "00111101000101111101100101100111", 
    121 => "10111101000110101110000110010110", 
    122 => "10111101101110111101111000010001", 
    123 => "00111010001101100101110101101000", 
    124 => "00111110010001100100001100010001", 
    125 => "00111101111000001011011010111111", 
    126 => "10111110100000010001011100010011", 
    127 => "10111101111001111001001100101110", 
    128 => "00111110000111010001100011101101", 
    129 => "00111110001000110110011000101111", 
    130 => "00111110010000001011011001101101", 
    131 => "10111101100010011001001011011111", 
    132 => "10111110000100100000011101110000", 
    133 => "00111100001011010101110111001100", 
    134 => "10111110100001000111111001010101", 
    135 => "10111110001111010101011010111010", 
    136 => "10111110010110111010111100011000", 
    137 => "10111101110111011001011110000011", 
    138 => "00111011101011011101000110111000", 
    139 => "10111010111001000111001001001010", 
    140 => "10111110001011011110001010100100", 
    141 => "00111100100010001010000101100110", 
    142 => "10111110100101010010011111111001", 
    143 => "10111110000100010000000101100110", 
    144 => "00111101011111000100101011010010", 
    145 => "00111101001110100101111111010010", 
    146 => "00111101101010100010001111000001", 
    147 => "00111100110110010111110000000011", 
    148 => "10111110100010001111100011110100", 
    149 => "10111110010110110010101111010111", 
    150 => "00111101010101101110001010110101", 
    151 => "00111101100001110000001000001100", 
    152 => "10111110011111111100100111010001", 
    153 => "10111110011110010110001101111011", 
    154 => "00111101101010101011010010011010", 
    155 => "10111101000111010101111101101101", 
    156 => "10111100111000101110110100110011", 
    157 => "00111110001100111101001011011001", 
    158 => "00111101101011000110010000000000", 
    159 => "10111011101001011001110110001110", 
    160 => "10111101001101011000101101011100", 
    161 => "10111110100001111001110010101100", 
    162 => "00111101001001101011100001000010", 
    163 => "10111110001011010100110011011110", 
    164 => "10111110000001111101101101110001", 
    165 => "10111110010000100100001111110101", 
    166 => "10111101111000110010011000011101", 
    167 => "10111110100101000001010010000111", 
    168 => "10111101110110010000100001111110", 
    169 => "10111110011111011010101100010010", 
    170 => "10111110001001101001101011100000", 
    171 => "10111110010111011011000001001000", 
    172 => "10111110010100000101010110010110", 
    173 => "00111101010100100100001011010000", 
    174 => "10111110101111100110011000111011", 
    175 => "10111110001010000001111000011010", 
    176 => "00111101110110111001100011110011", 
    177 => "10111101010011110100011001101000", 
    178 => "10111101110110111011111001010010", 
    179 => "00111110000010010110011000100110", 
    180 => "00111101000010111111000010101110", 
    181 => "00111101110001000001001011100010", 
    182 => "10111101010101110111001010011000", 
    183 => "00111110001001110110111110011011", 
    184 => "00111101010100010111100101000011", 
    185 => "10111110000011001001001001011000", 
    186 => "10111110100000011010000010111111", 
    187 => "00111001101111101000100111000100", 
    188 => "00111101111001110111100000000101", 
    189 => "10111110010000101110101111100010", 
    190 => "00111101101010110000001110000010", 
    191 => "10111101110101100110010001100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei7jG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei7jG is
    component conv_2_conv_2_wei7jG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei7jG_rom_U :  component conv_2_conv_2_wei7jG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


