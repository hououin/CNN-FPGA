-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_address0 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address1 : OUT STD_LOGIC_VECTOR (14 downto 0);
    conv_out_ce1 : OUT STD_LOGIC;
    conv_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    max_pool_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_out_ce0 : OUT STD_LOGIC;
    max_pool_out_we0 : OUT STD_LOGIC;
    max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv13_1520 : STD_LOGIC_VECTOR (12 downto 0) := "1010100100000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_A9 : STD_LOGIC_VECTOR (7 downto 0) := "10101001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_D : STD_LOGIC_VECTOR (3 downto 0) := "1101";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_146 : STD_LOGIC_VECTOR (12 downto 0);
    signal f_0_reg_157 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_reg_168 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_0_reg_179 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_190 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln9_fu_226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln9_fu_232_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln9_reg_941 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln28_9_fu_258_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln28_9_reg_946 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln28_10_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln28_10_reg_953 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln12_fu_316_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_reg_958 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_5_fu_332_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_5_reg_964 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln12_7_fu_364_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln12_7_reg_970 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln28_13_fu_380_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_13_reg_975 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_16_fu_437_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln28_16_reg_985 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln12_8_fu_476_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln12_8_reg_995 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln28_4_fu_700_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_4_reg_1010 : STD_LOGIC_VECTOR (31 downto 0);
    signal c_fu_708_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_1017 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten23_phi_fu_150_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_161_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_172_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_r_0_phi_fu_183_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_194_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln28_14_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_18_fu_465_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln28_15_fu_533_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln28_20_fu_611_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_6_fu_923_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_201_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_207_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_fu_580_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln28_5_fu_802_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_212_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln12_fu_244_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_238_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln25_fu_220_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln15_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln28_8_fu_250_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln28_13_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln12_fu_310_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_304_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln25_mid1_fu_324_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_10_fu_270_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln12_6_fu_340_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_352_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln25_2_fu_358_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln28_11_fu_278_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_fu_372_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_fu_352_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_fu_384_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln28_fu_390_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_394_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_408_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln28_13_fu_402_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_418_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln26_fu_431_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln28_9_fu_441_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_447_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_17_fu_455_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_10_fu_459_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln12_fu_470_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_2_fu_487_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln28_2_fu_487_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_8_fu_493_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln28_7_fu_498_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_502_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_515_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln28_14_fu_510_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_525_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln28_fu_538_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_542_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_8_fu_552_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_14_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_11_fu_589_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_594_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln28_19_fu_602_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln28_12_fu_606_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal bitcast_ln28_7_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_8_fu_634_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_620_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_9_fu_630_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_16_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_15_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_638_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_10_fu_648_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_18_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_17_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_7_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_8_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_7_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_8_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_9_fu_719_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_10_fu_737_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_fu_723_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_11_fu_733_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_20_fu_760_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_19_fu_754_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_740_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_12_fu_750_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_22_fu_778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_21_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_9_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_10_fu_784_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_9_fu_790_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_10_fu_796_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln28_11_fu_810_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln28_12_fu_828_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_814_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_13_fu_824_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_24_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_23_fu_846_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_832_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln28_14_fu_842_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln28_26_fu_870_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_25_fu_864_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_11_fu_858_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln28_12_fu_876_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_11_fu_882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln28_12_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_928_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_906_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln28_fu_713_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln35_5_fu_913_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln35_3_fu_917_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_928_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_928_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_928_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_928_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_928_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln28_2_fu_487_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln28_fu_352_p10 : STD_LOGIC_VECTOR (9 downto 0);

    component cnn_fcmp_32ns_32nmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mac_muladd_5nocq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32nmb6_U23 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_out_q0,
        din1 => grp_fu_201_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_201_p2);

    cnn_fcmp_32ns_32nmb6_U24 : component cnn_fcmp_32ns_32nmb6
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => conv_out_q1,
        din1 => grp_fu_207_p1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_207_p2);

    cnn_mac_muladd_5nocq_U25 : component cnn_mac_muladd_5nocq
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_928_p0,
        din1 => grp_fu_928_p1,
        din2 => grp_fu_928_p2,
        dout => grp_fu_928_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_190 <= c_reg_1017;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_190 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_157 <= select_ln28_9_reg_946;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_157 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_146 <= add_ln9_reg_941;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_146 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_168 <= select_ln12_8_reg_995;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_168 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_179_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_179 <= select_ln12_5_reg_964;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_179 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln9_reg_941 <= add_ln9_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_reg_1017 <= c_fu_708_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln9_reg_937 <= icmp_ln9_fu_226_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_226_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln12_5_reg_964 <= select_ln12_5_fu_332_p3;
                select_ln12_8_reg_995 <= select_ln12_8_fu_476_p3;
                select_ln28_9_reg_946 <= select_ln28_9_fu_258_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_fu_226_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    select_ln12_7_reg_970(4 downto 1) <= select_ln12_7_fu_364_p3(4 downto 1);
                select_ln12_reg_958 <= select_ln12_fu_316_p3;
                    zext_ln28_10_reg_953(5 downto 0) <= zext_ln28_10_fu_266_p1(5 downto 0);
                    zext_ln28_13_reg_975(4 downto 1) <= zext_ln28_13_fu_380_p1(4 downto 1);
                    zext_ln28_16_reg_985(4 downto 1) <= zext_ln28_16_fu_437_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln28_4_reg_1010 <= select_ln28_4_fu_700_p3;
            end if;
        end if;
    end process;
    zext_ln28_10_reg_953(15 downto 6) <= "0000000000";
    select_ln12_7_reg_970(0) <= '1';
    zext_ln28_13_reg_975(0) <= '0';
    zext_ln28_13_reg_975(9 downto 5) <= "00000";
    zext_ln28_16_reg_985(0) <= '1';
    zext_ln28_16_reg_985(9 downto 5) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_fu_226_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln9_fu_226_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln9_fu_226_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln12_fu_470_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_172_p4));
    add_ln28_10_fu_459_p2 <= std_logic_vector(unsigned(zext_ln28_10_fu_266_p1) + unsigned(zext_ln28_17_fu_455_p1));
    add_ln28_11_fu_589_p2 <= std_logic_vector(unsigned(zext_ln28_16_reg_985) + unsigned(mul_ln28_2_fu_487_p2));
    add_ln28_12_fu_606_p2 <= std_logic_vector(unsigned(zext_ln28_10_reg_953) + unsigned(zext_ln28_19_fu_602_p1));
    add_ln28_8_fu_493_p2 <= std_logic_vector(unsigned(zext_ln28_13_reg_975) + unsigned(mul_ln28_2_fu_487_p2));
    add_ln28_9_fu_441_p2 <= std_logic_vector(unsigned(zext_ln28_16_fu_437_p1) + unsigned(mul_ln28_fu_352_p2));
    add_ln28_fu_384_p2 <= std_logic_vector(unsigned(zext_ln28_13_fu_380_p1) + unsigned(mul_ln28_fu_352_p2));
    add_ln35_3_fu_917_p2 <= std_logic_vector(unsigned(zext_ln28_fu_713_p1) + unsigned(zext_ln35_5_fu_913_p1));
    add_ln9_fu_232_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_150_p4) + unsigned(ap_const_lv13_1));
    and_ln28_10_fu_796_p2 <= (grp_fu_201_p2 and and_ln28_9_fu_790_p2);
    and_ln28_11_fu_882_p2 <= (or_ln28_12_fu_876_p2 and or_ln28_11_fu_858_p2);
    and_ln28_12_fu_888_p2 <= (grp_fu_207_p2 and and_ln28_11_fu_882_p2);
    and_ln28_13_fu_298_p2 <= (xor_ln28_fu_286_p2 and icmp_ln15_fu_292_p2);
    and_ln28_7_fu_688_p2 <= (or_ln28_8_fu_682_p2 and or_ln28_7_fu_664_p2);
    and_ln28_8_fu_694_p2 <= (grp_fu_207_p2 and and_ln28_7_fu_688_p2);
    and_ln28_9_fu_790_p2 <= (or_ln28_9_fu_766_p2 and or_ln28_10_fu_784_p2);
    and_ln28_fu_574_p2 <= (or_ln28_fu_568_p2 and grp_fu_201_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln9_fu_226_p2)
    begin
        if ((icmp_ln9_fu_226_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_194_p4_assign_proc : process(c_0_reg_190, icmp_ln9_reg_937, ap_CS_fsm_pp0_stage0, c_reg_1017, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_194_p4 <= c_reg_1017;
        else 
            ap_phi_mux_c_0_phi_fu_194_p4 <= c_0_reg_190;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_161_p4_assign_proc : process(f_0_reg_157, icmp_ln9_reg_937, ap_CS_fsm_pp0_stage0, select_ln28_9_reg_946, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_161_p4 <= select_ln28_9_reg_946;
        else 
            ap_phi_mux_f_0_phi_fu_161_p4 <= f_0_reg_157;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_150_p4_assign_proc : process(indvar_flatten23_reg_146, icmp_ln9_reg_937, ap_CS_fsm_pp0_stage0, add_ln9_reg_941, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_150_p4 <= add_ln9_reg_941;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_150_p4 <= indvar_flatten23_reg_146;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_172_p4_assign_proc : process(indvar_flatten_reg_168, icmp_ln9_reg_937, ap_CS_fsm_pp0_stage0, select_ln12_8_reg_995, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_172_p4 <= select_ln12_8_reg_995;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_172_p4 <= indvar_flatten_reg_168;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_183_p4_assign_proc : process(r_0_reg_179, icmp_ln9_reg_937, ap_CS_fsm_pp0_stage0, select_ln12_5_reg_964, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_183_p4 <= select_ln12_5_reg_964;
        else 
            ap_phi_mux_r_0_phi_fu_183_p4 <= r_0_reg_179;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln28_10_fu_737_p1 <= select_ln28_4_reg_1010;
    bitcast_ln28_11_fu_810_p1 <= conv_out_q1;
    bitcast_ln28_12_fu_828_p1 <= select_ln28_5_fu_802_p3;
    bitcast_ln28_7_fu_616_p1 <= conv_out_q1;
    bitcast_ln28_8_fu_634_p1 <= select_ln28_fu_580_p3;
    bitcast_ln28_9_fu_719_p1 <= conv_out_q0;
    bitcast_ln28_fu_538_p1 <= conv_out_q0;
    c_fu_708_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln12_reg_958));

    conv_out_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_14_fu_426_p1, zext_ln28_15_fu_533_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_out_address0 <= zext_ln28_15_fu_533_p1(15 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_out_address0 <= zext_ln28_14_fu_426_p1(15 - 1 downto 0);
            else 
                conv_out_address0 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            conv_out_address0 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln28_18_fu_465_p1, ap_block_pp0_stage1, zext_ln28_20_fu_611_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_out_address1 <= zext_ln28_20_fu_611_p1(15 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_out_address1 <= zext_ln28_18_fu_465_p1(15 - 1 downto 0);
            else 
                conv_out_address1 <= "XXXXXXXXXXXXXXX";
            end if;
        else 
            conv_out_address1 <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_out_ce1 <= ap_const_logic_1;
        else 
            conv_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_238_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_f_0_phi_fu_161_p4));

    grp_fu_201_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, select_ln28_4_reg_1010, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_201_p1 <= select_ln28_4_reg_1010;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_201_p1 <= ap_const_lv32_800000;
        else 
            grp_fu_201_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_207_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1, select_ln28_fu_580_p3, select_ln28_5_fu_802_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_207_p1 <= select_ln28_5_fu_802_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_207_p1 <= select_ln28_fu_580_p3;
        else 
            grp_fu_207_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_928_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_928_p1 <= grp_fu_928_p10(4 - 1 downto 0);
    grp_fu_928_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_5_reg_964),8));
    grp_fu_928_p2 <= grp_fu_928_p20(4 - 1 downto 0);
    grp_fu_928_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_reg_958),8));
    icmp_ln12_fu_244_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_172_p4 = ap_const_lv8_A9) else "0";
    icmp_ln15_fu_292_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_194_p4 = ap_const_lv4_D) else "0";
    icmp_ln28_14_fu_562_p2 <= "1" when (trunc_ln28_8_fu_552_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_15_fu_652_p2 <= "0" when (tmp_14_fu_620_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_16_fu_658_p2 <= "1" when (trunc_ln28_9_fu_630_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_17_fu_670_p2 <= "0" when (tmp_15_fu_638_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_18_fu_676_p2 <= "1" when (trunc_ln28_10_fu_648_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_19_fu_754_p2 <= "0" when (tmp_17_fu_723_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_20_fu_760_p2 <= "1" when (trunc_ln28_11_fu_733_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_21_fu_772_p2 <= "0" when (tmp_18_fu_740_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_22_fu_778_p2 <= "1" when (trunc_ln28_12_fu_750_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_23_fu_846_p2 <= "0" when (tmp_20_fu_814_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_24_fu_852_p2 <= "1" when (trunc_ln28_13_fu_824_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_25_fu_864_p2 <= "0" when (tmp_21_fu_832_p4 = ap_const_lv8_FF) else "1";
    icmp_ln28_26_fu_870_p2 <= "1" when (trunc_ln28_14_fu_842_p1 = ap_const_lv23_0) else "0";
    icmp_ln28_fu_556_p2 <= "0" when (tmp_s_fu_542_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_226_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_150_p4 = ap_const_lv13_1520) else "0";
    max_pool_out_address0 <= zext_ln35_6_fu_923_p1(13 - 1 downto 0);

    max_pool_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_d0 <= 
        conv_out_q1 when (and_ln28_12_fu_888_p2(0) = '1') else 
        select_ln28_5_fu_802_p3;

    max_pool_out_we0_assign_proc : process(icmp_ln9_reg_937, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln9_reg_937 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_we0 <= ap_const_logic_1;
        else 
            max_pool_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln28_2_fu_487_p1 <= mul_ln28_2_fu_487_p10(5 - 1 downto 0);
    mul_ln28_2_fu_487_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_7_reg_970),10));
    mul_ln28_2_fu_487_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln28_2_fu_487_p1), 10));
    mul_ln28_fu_352_p1 <= mul_ln28_fu_352_p10(5 - 1 downto 0);
    mul_ln28_fu_352_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln12_6_fu_340_p3),10));
    mul_ln28_fu_352_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv10_1A) * unsigned(mul_ln28_fu_352_p1), 10));
    or_ln12_fu_310_p2 <= (icmp_ln12_fu_244_p2 or and_ln28_13_fu_298_p2);
    or_ln25_2_fu_358_p2 <= (shl_ln25_mid1_fu_324_p3 or ap_const_lv5_1);
    or_ln25_fu_220_p2 <= (shl_ln_fu_212_p3 or ap_const_lv5_1);
    or_ln26_fu_431_p2 <= (shl_ln2_fu_372_p3 or ap_const_lv5_1);
    or_ln28_10_fu_784_p2 <= (icmp_ln28_22_fu_778_p2 or icmp_ln28_21_fu_772_p2);
    or_ln28_11_fu_858_p2 <= (icmp_ln28_24_fu_852_p2 or icmp_ln28_23_fu_846_p2);
    or_ln28_12_fu_876_p2 <= (icmp_ln28_26_fu_870_p2 or icmp_ln28_25_fu_864_p2);
    or_ln28_13_fu_402_p2 <= (tmp_12_fu_394_p3 or select_ln28_9_fu_258_p3);
    or_ln28_14_fu_510_p2 <= (tmp_23_fu_502_p3 or select_ln28_9_reg_946);
    or_ln28_7_fu_664_p2 <= (icmp_ln28_16_fu_658_p2 or icmp_ln28_15_fu_652_p2);
    or_ln28_8_fu_682_p2 <= (icmp_ln28_18_fu_676_p2 or icmp_ln28_17_fu_670_p2);
    or_ln28_9_fu_766_p2 <= (icmp_ln28_20_fu_760_p2 or icmp_ln28_19_fu_754_p2);
    or_ln28_fu_568_p2 <= (icmp_ln28_fu_556_p2 or icmp_ln28_14_fu_562_p2);
    r_fu_304_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln28_8_fu_250_p3));
    select_ln12_5_fu_332_p3 <= 
        r_fu_304_p2 when (and_ln28_13_fu_298_p2(0) = '1') else 
        select_ln28_8_fu_250_p3;
    select_ln12_6_fu_340_p3 <= 
        shl_ln25_mid1_fu_324_p3 when (and_ln28_13_fu_298_p2(0) = '1') else 
        select_ln28_10_fu_270_p3;
    select_ln12_7_fu_364_p3 <= 
        or_ln25_2_fu_358_p2 when (and_ln28_13_fu_298_p2(0) = '1') else 
        select_ln28_11_fu_278_p3;
    select_ln12_8_fu_476_p3 <= 
        ap_const_lv8_1 when (icmp_ln12_fu_244_p2(0) = '1') else 
        add_ln12_fu_470_p2;
    select_ln12_fu_316_p3 <= 
        ap_const_lv4_0 when (or_ln12_fu_310_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_194_p4;
    select_ln28_10_fu_270_p3 <= 
        ap_const_lv5_0 when (icmp_ln12_fu_244_p2(0) = '1') else 
        shl_ln_fu_212_p3;
    select_ln28_11_fu_278_p3 <= 
        ap_const_lv5_1 when (icmp_ln12_fu_244_p2(0) = '1') else 
        or_ln25_fu_220_p2;
    select_ln28_4_fu_700_p3 <= 
        conv_out_q1 when (and_ln28_8_fu_694_p2(0) = '1') else 
        select_ln28_fu_580_p3;
    select_ln28_5_fu_802_p3 <= 
        conv_out_q0 when (and_ln28_10_fu_796_p2(0) = '1') else 
        select_ln28_4_reg_1010;
    select_ln28_8_fu_250_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_244_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_183_p4;
    select_ln28_9_fu_258_p3 <= 
        f_fu_238_p2 when (icmp_ln12_fu_244_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_161_p4;
    select_ln28_fu_580_p3 <= 
        conv_out_q0 when (and_ln28_fu_574_p2(0) = '1') else 
        ap_const_lv32_800000;
    shl_ln25_mid1_fu_324_p3 <= (r_fu_304_p2 & ap_const_lv1_0);
    shl_ln2_fu_372_p3 <= (select_ln12_fu_316_p3 & ap_const_lv1_0);
    shl_ln_fu_212_p3 <= (ap_phi_mux_r_0_phi_fu_183_p4 & ap_const_lv1_0);
    tmp_12_fu_394_p3 <= (trunc_ln28_fu_390_p1 & ap_const_lv5_0);
    tmp_14_fu_620_p4 <= bitcast_ln28_7_fu_616_p1(30 downto 23);
    tmp_15_fu_638_p4 <= bitcast_ln28_8_fu_634_p1(30 downto 23);
    tmp_17_fu_723_p4 <= bitcast_ln28_9_fu_719_p1(30 downto 23);
    tmp_18_fu_740_p4 <= bitcast_ln28_10_fu_737_p1(30 downto 23);
    tmp_1_fu_418_p3 <= (tmp_fu_408_p4 & or_ln28_13_fu_402_p2);
    tmp_20_fu_814_p4 <= bitcast_ln28_11_fu_810_p1(30 downto 23);
    tmp_21_fu_832_p4 <= bitcast_ln28_12_fu_828_p1(30 downto 23);
    tmp_23_fu_502_p3 <= (trunc_ln28_7_fu_498_p1 & ap_const_lv5_0);
    tmp_2_fu_515_p4 <= add_ln28_8_fu_493_p2(9 downto 1);
    tmp_3_fu_525_p3 <= (tmp_2_fu_515_p4 & or_ln28_14_fu_510_p2);
    tmp_4_fu_447_p3 <= (add_ln28_9_fu_441_p2 & ap_const_lv5_0);
    tmp_5_fu_594_p3 <= (add_ln28_11_fu_589_p2 & ap_const_lv5_0);
    tmp_6_fu_906_p3 <= (grp_fu_928_p3 & ap_const_lv5_0);
    tmp_fu_408_p4 <= add_ln28_fu_384_p2(9 downto 1);
    tmp_s_fu_542_p4 <= bitcast_ln28_fu_538_p1(30 downto 23);
    trunc_ln28_10_fu_648_p1 <= bitcast_ln28_8_fu_634_p1(23 - 1 downto 0);
    trunc_ln28_11_fu_733_p1 <= bitcast_ln28_9_fu_719_p1(23 - 1 downto 0);
    trunc_ln28_12_fu_750_p1 <= bitcast_ln28_10_fu_737_p1(23 - 1 downto 0);
    trunc_ln28_13_fu_824_p1 <= bitcast_ln28_11_fu_810_p1(23 - 1 downto 0);
    trunc_ln28_14_fu_842_p1 <= bitcast_ln28_12_fu_828_p1(23 - 1 downto 0);
    trunc_ln28_7_fu_498_p1 <= add_ln28_8_fu_493_p2(1 - 1 downto 0);
    trunc_ln28_8_fu_552_p1 <= bitcast_ln28_fu_538_p1(23 - 1 downto 0);
    trunc_ln28_9_fu_630_p1 <= bitcast_ln28_7_fu_616_p1(23 - 1 downto 0);
    trunc_ln28_fu_390_p1 <= add_ln28_fu_384_p2(1 - 1 downto 0);
    xor_ln28_fu_286_p2 <= (icmp_ln12_fu_244_p2 xor ap_const_lv1_1);
    zext_ln28_10_fu_266_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_9_fu_258_p3),16));
    zext_ln28_13_fu_380_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_372_p3),10));
    zext_ln28_14_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_418_p3),64));
    zext_ln28_15_fu_533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_525_p3),64));
    zext_ln28_16_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln26_fu_431_p2),10));
    zext_ln28_17_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_447_p3),16));
    zext_ln28_18_fu_465_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_10_fu_459_p2),64));
    zext_ln28_19_fu_602_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_594_p3),16));
    zext_ln28_20_fu_611_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_12_fu_606_p2),64));
    zext_ln28_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln28_9_reg_946),14));
    zext_ln35_5_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_906_p3),14));
    zext_ln35_6_fu_923_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_3_fu_917_p2),64));
end behav;
