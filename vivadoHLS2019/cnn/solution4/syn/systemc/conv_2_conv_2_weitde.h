// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weitde_H__
#define __conv_2_conv_2_weitde_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weitde_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 192;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weitde_ram) {
        ram[0] = "0b00111101011010111000100101001101";
        ram[1] = "0b10111101110110010001111001000101";
        ram[2] = "0b10111101010101101100100010011001";
        ram[3] = "0b00111101010101010110100100100110";
        ram[4] = "0b00111101101101000100101100101010";
        ram[5] = "0b00111101111001000111001100001001";
        ram[6] = "0b00111101101011011101110111001110";
        ram[7] = "0b10111100101000011101110011101100";
        ram[8] = "0b00111101100010001100011100000001";
        ram[9] = "0b00111010110011100100011001101110";
        ram[10] = "0b00111101010100000110000101111011";
        ram[11] = "0b00111100101010000000001110110100";
        ram[12] = "0b00111100100001111000011100010110";
        ram[13] = "0b00111100100110100001101110011010";
        ram[14] = "0b00111100011101110110000001100111";
        ram[15] = "0b00111101101110110101111000110100";
        ram[16] = "0b10111101010111001110111010111101";
        ram[17] = "0b00111100111101111110111010111010";
        ram[18] = "0b10111101111000000011110101101111";
        ram[19] = "0b10111100011000011111111111000000";
        ram[20] = "0b10111101101111100000011011110001";
        ram[21] = "0b10111101100001111001010100101110";
        ram[22] = "0b00111001100110001111110100000000";
        ram[23] = "0b10111100011010110101000011011001";
        ram[24] = "0b00111100111111100011110011011001";
        ram[25] = "0b00111101011100000000110111001000";
        ram[26] = "0b00111101000101001000011011111000";
        ram[27] = "0b10111110000010000010011000110111";
        ram[28] = "0b10111101100011100110011000001001";
        ram[29] = "0b00111110000011111111011010100111";
        ram[30] = "0b10111101110101110111001110100111";
        ram[31] = "0b10111101101110011011000111111110";
        ram[32] = "0b10111110001001110001000110111110";
        ram[33] = "0b10111110011000100110000110110000";
        ram[34] = "0b10111001111000001001100000101010";
        ram[35] = "0b00111110001001101111000111011100";
        ram[36] = "0b10111101100110010011111010110010";
        ram[37] = "0b00111100010110101011010000100100";
        ram[38] = "0b10111100000101101101110001011111";
        ram[39] = "0b10111100011001101110111111110110";
        ram[40] = "0b10111101100111010100001111100110";
        ram[41] = "0b00111101011100110010101111101011";
        ram[42] = "0b10111101101001101110011010100110";
        ram[43] = "0b00111101101010111010110011101100";
        ram[44] = "0b00111101100010001011001101011100";
        ram[45] = "0b00111101101000110101111011011001";
        ram[46] = "0b10111100110100010000000110011001";
        ram[47] = "0b10111011111101010000110010101111";
        ram[48] = "0b00111100110110000110110101000000";
        ram[49] = "0b10111110011111001110111110000000";
        ram[50] = "0b10111101101011000010010100100010";
        ram[51] = "0b00111101101010001000111111111000";
        ram[52] = "0b10111110011110111100101100000000";
        ram[53] = "0b10111000000111001000111110001110";
        ram[54] = "0b00111101100001111110010001111010";
        ram[55] = "0b10111110000111110000000100000011";
        ram[56] = "0b10111101111011000000010000101100";
        ram[57] = "0b10111010101101000010110111000000";
        ram[58] = "0b00111101011010001011110000010001";
        ram[59] = "0b00111100110111000111111101110111";
        ram[60] = "0b00111101011111011111100111110110";
        ram[61] = "0b00111101100000101011011111000110";
        ram[62] = "0b10111101100110011110100011010111";
        ram[63] = "0b00111101100000100010111000011011";
        ram[64] = "0b10111101000101111011111100011100";
        ram[65] = "0b00111101000000000001111111110111";
        ram[66] = "0b10111101011001001000111100100110";
        ram[67] = "0b00111100110001000101011010011010";
        ram[68] = "0b00111100010010100011100111101011";
        ram[69] = "0b00111101100000001101000000100101";
        ram[70] = "0b10111101110000110101111000111101";
        ram[71] = "0b10111101010101111001111000010011";
        ram[72] = "0b00111101110110100110111001000111";
        ram[73] = "0b10111100100100110010011011111011";
        ram[74] = "0b10111010111100111110010111001001";
        ram[75] = "0b10111100101000001111100101100101";
        ram[76] = "0b00111101000111010100111111001001";
        ram[77] = "0b10111101000101010110001010001100";
        ram[78] = "0b10111101010110001101001001010100";
        ram[79] = "0b00111101101001011001011011011100";
        ram[80] = "0b00111101100111001010010000100110";
        ram[81] = "0b10111101001001001111001110111001";
        ram[82] = "0b10111101110000100111001000111101";
        ram[83] = "0b00111101100110001100100000101001";
        ram[84] = "0b10111110100100110100011000110111";
        ram[85] = "0b10111101001110010110000110100010";
        ram[86] = "0b10111101100010011000000001001100";
        ram[87] = "0b10111110000010111001001111110110";
        ram[88] = "0b10111101100100100001110010001111";
        ram[89] = "0b00111101010001111101011111101000";
        ram[90] = "0b00111101001001010110000000100101";
        ram[91] = "0b10111110101110101001111101100100";
        ram[92] = "0b10111100101100101110110110010111";
        ram[93] = "0b00111101111100110010001011110111";
        ram[94] = "0b10111110010110101010010011011110";
        ram[95] = "0b00111101001010011101010011001110";
        ram[96] = "0b10111110010101001001010101011100";
        ram[97] = "0b10111100011100101000001111101001";
        ram[98] = "0b10111101101000101111011111011010";
        ram[99] = "0b10111100001111110111101111000011";
        ram[100] = "0b00111101101110100110011111101011";
        ram[101] = "0b00111001011001001110101111110101";
        ram[102] = "0b10111100111000111000001100100100";
        ram[103] = "0b10111101100000110001100111000110";
        ram[104] = "0b10111101110111001100001110011011";
        ram[105] = "0b00111100010110100101110111110110";
        ram[106] = "0b00111101101110101010111111001110";
        ram[107] = "0b10111100011000111011000010010001";
        ram[108] = "0b10111101100000110110001001010101";
        ram[109] = "0b10111101000010011111010000101000";
        ram[110] = "0b10111101100111010010110001110111";
        ram[111] = "0b00111101000111110010011110101000";
        ram[112] = "0b00111100110111111100000001000010";
        ram[113] = "0b10111110000010101100010111101001";
        ram[114] = "0b10111101010110110011000010000000";
        ram[115] = "0b00111010110001011011100001110010";
        ram[116] = "0b10111101101111110000100000011000";
        ram[117] = "0b10111110010010001000001101011001";
        ram[118] = "0b10111011101010111000001000010110";
        ram[119] = "0b10111101100101000010101011010010";
        ram[120] = "0b00111011110101001011101011001011";
        ram[121] = "0b10111100110001110101000000110100";
        ram[122] = "0b10111101011000101001101001111011";
        ram[123] = "0b00111110000101000101001111010000";
        ram[124] = "0b00111011110001000001001010001100";
        ram[125] = "0b00111101100000001100010111110100";
        ram[126] = "0b10111101110010110011110101101100";
        ram[127] = "0b00111011011111111100101011011010";
        ram[128] = "0b10111110001001100100100101011111";
        ram[129] = "0b00111101100110000000010101111010";
        ram[130] = "0b00111101100101110111100100010010";
        ram[131] = "0b00111101110000111111101011001101";
        ram[132] = "0b00111101010011010001010000100110";
        ram[133] = "0b10111110001101011001111010101010";
        ram[134] = "0b10111110000110000011011011000011";
        ram[135] = "0b00111101001011101011001001110010";
        ram[136] = "0b00111110000000101111001011101111";
        ram[137] = "0b10111101010110010010110010111010";
        ram[138] = "0b10111110010110111111000110011111";
        ram[139] = "0b10111110100100101100011010101101";
        ram[140] = "0b10111100000111100101100110111110";
        ram[141] = "0b00111101100000111010011110110110";
        ram[142] = "0b10111100110111100100010100011110";
        ram[143] = "0b10111101000100110111010010000011";
        ram[144] = "0b00111101101000110101001001110101";
        ram[145] = "0b10111110001001100001010110000011";
        ram[146] = "0b00111101101001100010000100100000";
        ram[147] = "0b10111100010110000000100010100100";
        ram[148] = "0b10111101111000011000011000100111";
        ram[149] = "0b00111101010011100101100001111101";
        ram[150] = "0b00111101100010100001010101010111";
        ram[151] = "0b10111110001111011111101010011011";
        ram[152] = "0b00111101001111101101110111100010";
        ram[153] = "0b10111110001100110111001001111000";
        ram[154] = "0b10111100100010001001100010011010";
        ram[155] = "0b10111110010010011100101001111101";
        ram[156] = "0b00111101100001010000011110011000";
        ram[157] = "0b00111100101010011101011101000101";
        ram[158] = "0b10111101011100110100001001001110";
        ram[159] = "0b10111101100001100110111011101001";
        ram[160] = "0b10111110101011000111111011111011";
        ram[161] = "0b00111101101100001111101000010001";
        ram[162] = "0b10111101011000010000100110101100";
        ram[163] = "0b00111101010001110100011010001001";
        ram[164] = "0b00111100111101001110101100111001";
        ram[165] = "0b10111110100111000111110010100101";
        ram[166] = "0b10111101100011111101110111100111";
        ram[167] = "0b00111100101111000111000110010100";
        ram[168] = "0b10111101011100010111010011100101";
        ram[169] = "0b10111100100100011101100100011111";
        ram[170] = "0b00111100111001010000110000101011";
        ram[171] = "0b00111101100111001111100010010110";
        ram[172] = "0b00111101100000001111101011011010";
        ram[173] = "0b10111110001011011010101101101110";
        ram[174] = "0b10111101000001011101000011010100";
        ram[175] = "0b10111110010011111111111011101101";
        ram[176] = "0b10111101100101000100100010111011";
        ram[177] = "0b00111101010010110001010001000101";
        ram[178] = "0b10111101101000001011000010000010";
        ram[179] = "0b10111110010011101110000000100000";
        ram[180] = "0b00111101101000110100001110010101";
        ram[181] = "0b10111101100001011111000111110001";
        ram[182] = "0b00111101001011101000101011001101";
        ram[183] = "0b10111010110001001000010100110001";
        ram[184] = "0b00111101001110101000001000010010";
        ram[185] = "0b10111101100010111101100110101001";
        ram[186] = "0b10111101111010000111011101101111";
        ram[187] = "0b10111101100000111101000000000100";
        ram[188] = "0b10111101000011000101110110010000";
        ram[189] = "0b00111100110010110101010110101011";
        ram[190] = "0b00111100100110000100101010111100";
        ram[191] = "0b10111101000000001000000100111110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weitde) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 192;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weitde_ram* meminst;


SC_CTOR(conv_2_conv_2_weitde) {
meminst = new conv_2_conv_2_weitde_ram("conv_2_conv_2_weitde_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weitde() {
    delete meminst;
}


};//endmodule
#endif
