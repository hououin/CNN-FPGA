// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weiHfu_H__
#define __conv_2_conv_2_weiHfu_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weiHfu_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 192;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weiHfu_ram) {
        ram[0] = "0b10111101101010010101111110100111";
        ram[1] = "0b00111101000111001011100011010100";
        ram[2] = "0b00111110000010010111000111000001";
        ram[3] = "0b00111100100111101110101110100001";
        ram[4] = "0b00111101011111100010100001010100";
        ram[5] = "0b00111101110011000100100110101100";
        ram[6] = "0b00111011010101000010110111010010";
        ram[7] = "0b00111101000110111110000100000011";
        ram[8] = "0b10111101100111100100111100111101";
        ram[9] = "0b00111101101001001110000000100110";
        ram[10] = "0b10111101110000000010110001110110";
        ram[11] = "0b00111101101101110001001100000000";
        ram[12] = "0b10111110000001100000011101111010";
        ram[13] = "0b10111101111111000000011011000011";
        ram[14] = "0b10111100001110010101111111110111";
        ram[15] = "0b10111100110000101010111010101000";
        ram[16] = "0b00111011111110011011011011000100";
        ram[17] = "0b10111101101111010001111111111101";
        ram[18] = "0b10111100111111010001001000000000";
        ram[19] = "0b10111100101111000011011011110010";
        ram[20] = "0b10111101000010011000001001111011";
        ram[21] = "0b10111110010011100101101100111110";
        ram[22] = "0b10111110010100110101001110110101";
        ram[23] = "0b00111101101100110001111010001101";
        ram[24] = "0b10111101110011000101111101111110";
        ram[25] = "0b00111110001110110110100111010001";
        ram[26] = "0b10111101000000011110001101001100";
        ram[27] = "0b10111101101010010111100011111010";
        ram[28] = "0b00111101010011101100000010010110";
        ram[29] = "0b00111100011111011001001110001010";
        ram[30] = "0b10111110011001010100111001011100";
        ram[31] = "0b00111100110010101000110011001001";
        ram[32] = "0b10111100000111000000101001001110";
        ram[33] = "0b10111101111000011100000111010101";
        ram[34] = "0b00111101110101101001001011001100";
        ram[35] = "0b00111110001100000100111001000111";
        ram[36] = "0b00111101101010100100101111011001";
        ram[37] = "0b00111100101101101100010011100110";
        ram[38] = "0b10111101011001111010001100000000";
        ram[39] = "0b00111101100001001001000111010111";
        ram[40] = "0b10111110010100101010110010011011";
        ram[41] = "0b00111010100000001010111110011101";
        ram[42] = "0b00111101101011111001001110011011";
        ram[43] = "0b00111101001000110001011000010010";
        ram[44] = "0b10111100001110001100111101011100";
        ram[45] = "0b10111100100000001000110000110001";
        ram[46] = "0b10111101010010111001111100001010";
        ram[47] = "0b10111101001111000000110011010000";
        ram[48] = "0b00111101111010010011101000110100";
        ram[49] = "0b10111101110001011011100011011100";
        ram[50] = "0b10111011110101111101000101101011";
        ram[51] = "0b10111101100001011011000000010010";
        ram[52] = "0b10111110010000111010011100001110";
        ram[53] = "0b00111101110011011000010110100100";
        ram[54] = "0b00111101001001001101111001110010";
        ram[55] = "0b10111110100000010100110101110000";
        ram[56] = "0b10111100101001000000011100011011";
        ram[57] = "0b00111101110011001101011111001011";
        ram[58] = "0b10111110000000111110010100001110";
        ram[59] = "0b10111110000110111000110111110101";
        ram[60] = "0b10111101110001111011010010011100";
        ram[61] = "0b10111100011001101100111010101111";
        ram[62] = "0b00111110000110000111101010110000";
        ram[63] = "0b10111101011100000000110011010100";
        ram[64] = "0b00111101001111111011001100110000";
        ram[65] = "0b00111101110111000111101100110010";
        ram[66] = "0b00111011111011000100110111110111";
        ram[67] = "0b00111101000001010001100100000001";
        ram[68] = "0b10111101100111001110100011001110";
        ram[69] = "0b10111101111110010001110011011010";
        ram[70] = "0b10111101100011110010100101001100";
        ram[71] = "0b10111101100010000000000110100011";
        ram[72] = "0b10111101001010010011110001101001";
        ram[73] = "0b10111100010011101111101110101010";
        ram[74] = "0b10111110010001011011011100001011";
        ram[75] = "0b10111110000100001100010000110111";
        ram[76] = "0b10111101110001111010101101110110";
        ram[77] = "0b10111101100111000000000111100001";
        ram[78] = "0b10111110000100110111011101111011";
        ram[79] = "0b10111101001010111110110010011111";
        ram[80] = "0b00111101001011110001101011101001";
        ram[81] = "0b10111101001011110001011000101110";
        ram[82] = "0b00111101100011111110100011000101";
        ram[83] = "0b00111100100010010001011000001101";
        ram[84] = "0b10111110101101000000101011011101";
        ram[85] = "0b10111110001111101010111011110000";
        ram[86] = "0b10111011101100111110010011110000";
        ram[87] = "0b10111101011101010110101100100001";
        ram[88] = "0b00111100111101010100000000110100";
        ram[89] = "0b10111101110000000001011010111010";
        ram[90] = "0b10111101010101010001011111111101";
        ram[91] = "0b10111110011100011011111001001001";
        ram[92] = "0b00111101100000111101001001000110";
        ram[93] = "0b10111101101101001011110110011010";
        ram[94] = "0b10111110000110001111101011010000";
        ram[95] = "0b00111101110101110000010100110100";
        ram[96] = "0b10111101101110111100110101111101";
        ram[97] = "0b00111101111101100110000001110001";
        ram[98] = "0b10111101101011111011101000101111";
        ram[99] = "0b10111101000011100110011100001111";
        ram[100] = "0b00111100100101010001011101110001";
        ram[101] = "0b10111100101111100110101010100011";
        ram[102] = "0b10111101100110101111010000011010";
        ram[103] = "0b10111101110000010000001011010010";
        ram[104] = "0b00111101000000010000010001110001";
        ram[105] = "0b00111101001011101100001011000010";
        ram[106] = "0b00111110001110011100000110100011";
        ram[107] = "0b10111101001000100010110111010001";
        ram[108] = "0b10111101110011101011101100110101";
        ram[109] = "0b10111101111011001000001011110101";
        ram[110] = "0b10111110000001011010010011001110";
        ram[111] = "0b10111110100000100101001010000011";
        ram[112] = "0b00111101100100111000010001111111";
        ram[113] = "0b10111110000000111111000100110010";
        ram[114] = "0b10111101110001100110111111001011";
        ram[115] = "0b10111011100011011110110000011110";
        ram[116] = "0b10111101100011100000110110000111";
        ram[117] = "0b10111100101100100010010011010101";
        ram[118] = "0b00111101000110000101001111100111";
        ram[119] = "0b10111011011010111100000111100110";
        ram[120] = "0b00111101111000001101111111110001";
        ram[121] = "0b00111101010010101110011000011010";
        ram[122] = "0b10111110001000011100110110101010";
        ram[123] = "0b00111101110001101111001001000011";
        ram[124] = "0b10111110001000001110010000100011";
        ram[125] = "0b00111101101011110101101001111010";
        ram[126] = "0b10111100111000110000111100001011";
        ram[127] = "0b00111101110001010011001011110011";
        ram[128] = "0b10111101110011010010011010001100";
        ram[129] = "0b00111101001101000100010110000010";
        ram[130] = "0b00111101010100001001100011111010";
        ram[131] = "0b10111100101001111010000111010000";
        ram[132] = "0b10111101100010101100010100011100";
        ram[133] = "0b10111110100110000110011010010110";
        ram[134] = "0b10111110001110000110000001010000";
        ram[135] = "0b00111101110110110011110000010111";
        ram[136] = "0b00111101011011011000011001001010";
        ram[137] = "0b10111101101110010111001101010001";
        ram[138] = "0b10111110001000110000111110001101";
        ram[139] = "0b10111110000000011101111100101111";
        ram[140] = "0b10111101100111001011111011110011";
        ram[141] = "0b00111101110011011111011011100010";
        ram[142] = "0b10111100110001011001000001101101";
        ram[143] = "0b10111100000111000010110101000111";
        ram[144] = "0b00111011011011001000110101110110";
        ram[145] = "0b10111010001101110010000100000000";
        ram[146] = "0b00111101010101101011010100100111";
        ram[147] = "0b10111100100001011001110101101011";
        ram[148] = "0b00111101110010011111000110110010";
        ram[149] = "0b10111101001100001110010001010010";
        ram[150] = "0b00111110000100111001101110110100";
        ram[151] = "0b10111110010011101011011000100100";
        ram[152] = "0b10111110001011010110011111110100";
        ram[153] = "0b00111100101101111011010111110100";
        ram[154] = "0b10111101001111101100101111011000";
        ram[155] = "0b10111100101000100010110101000101";
        ram[156] = "0b10111101111101111010110100111011";
        ram[157] = "0b10111100000111001110110110101010";
        ram[158] = "0b00111100001001010101000011111010";
        ram[159] = "0b00111101111110111010101101001101";
        ram[160] = "0b10111110000000101100000101000100";
        ram[161] = "0b00111100111101110110100001111111";
        ram[162] = "0b10111101111111111110001100110001";
        ram[163] = "0b10111101011100000011001001010111";
        ram[164] = "0b10111101101100111110001110000011";
        ram[165] = "0b10111101111011011000100110100101";
        ram[166] = "0b00111101010010101010001000001111";
        ram[167] = "0b00111101000001001101000010011111";
        ram[168] = "0b00111110000011101101001010011010";
        ram[169] = "0b10111110000100100111100011100001";
        ram[170] = "0b10111100100101111011001100111010";
        ram[171] = "0b00111101100010111100001101111110";
        ram[172] = "0b00111101111001011111010110001011";
        ram[173] = "0b00111101010001000100010100110010";
        ram[174] = "0b00111110001011111100010011010101";
        ram[175] = "0b10111110010010110001011101000010";
        ram[176] = "0b00111110100000001001101110000100";
        ram[177] = "0b00111101110011100010000100100000";
        ram[178] = "0b10111110001000000111101110000011";
        ram[179] = "0b10111110001000101010010001011111";
        ram[180] = "0b10111100001011111100101000111011";
        ram[181] = "0b10111101101100001000111110110110";
        ram[182] = "0b10111101100010110001001101001111";
        ram[183] = "0b00111100111010110011111001000000";
        ram[184] = "0b10111101001110010010001000001100";
        ram[185] = "0b10111110000101100000010000001110";
        ram[186] = "0b10111110011100100101111011011000";
        ram[187] = "0b10111110010010000101101101100010";
        ram[188] = "0b10111101011010011011110100000100";
        ram[189] = "0b00111100101000010101011010000101";
        ram[190] = "0b00111101110101011100000110110001";
        ram[191] = "0b00111101111010011011010110000000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weiHfu) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 192;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weiHfu_ram* meminst;


SC_CTOR(conv_2_conv_2_weiHfu) {
meminst = new conv_2_conv_2_weiHfu_ram("conv_2_conv_2_weiHfu_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weiHfu() {
    delete meminst;
}


};//endmodule
#endif
