// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _dense_HH_
#define _dense_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "soft_max.h"
#include "cnn_fadd_32ns_32nkbM.h"
#include "cnn_fmul_32ns_32nlbW.h"
#include "dense_dense_weights.h"
#include "dense_dense_array.h"

namespace ap_rtl {

struct dense : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<32> > prediction_Addr_A;
    sc_out< sc_logic > prediction_EN_A;
    sc_out< sc_lv<4> > prediction_WEN_A;
    sc_out< sc_lv<32> > prediction_Din_A;
    sc_in< sc_lv<32> > prediction_Dout_A;
    sc_out< sc_lv<11> > flat_array_address0;
    sc_out< sc_logic > flat_array_ce0;
    sc_in< sc_lv<32> > flat_array_q0;
    sc_signal< sc_logic > ap_var_for_const1;
    sc_signal< sc_lv<32> > ap_var_for_const0;


    // Module declarations
    dense(sc_module_name name);
    SC_HAS_PROCESS(dense);

    ~dense();

    sc_trace_file* mVcdFile;

    dense_dense_weights* dense_weights_U;
    dense_dense_array* dense_array_U;
    soft_max* grp_soft_max_fu_161;
    cnn_fadd_32ns_32nkbM<1,2,32,32,32>* cnn_fadd_32ns_32nkbM_U145;
    cnn_fmul_32ns_32nlbW<1,2,32,32,32>* cnn_fmul_32ns_32nlbW_U146;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<14> > dense_weights_address0;
    sc_signal< sc_logic > dense_weights_ce0;
    sc_signal< sc_lv<32> > dense_weights_q0;
    sc_signal< sc_lv<14> > indvar_flatten_reg_116;
    sc_signal< sc_lv<4> > d_0_reg_127;
    sc_signal< sc_lv<32> > w_sum_0_reg_138;
    sc_signal< sc_lv<11> > f_0_reg_150;
    sc_signal< sc_lv<1> > icmp_ln29_fu_180_p2;
    sc_signal< sc_lv<1> > icmp_ln29_reg_292;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln29_reg_292_pp0_iter1_reg;
    sc_signal< sc_lv<14> > add_ln29_fu_186_p2;
    sc_signal< sc_lv<14> > add_ln29_reg_296;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<1> > icmp_ln33_fu_198_p2;
    sc_signal< sc_lv<1> > icmp_ln33_reg_301;
    sc_signal< sc_lv<11> > select_ln35_1_fu_204_p3;
    sc_signal< sc_lv<11> > select_ln35_1_reg_306;
    sc_signal< sc_lv<4> > select_ln35_2_fu_212_p3;
    sc_signal< sc_lv<4> > select_ln35_2_reg_311;
    sc_signal< sc_lv<4> > select_ln35_2_reg_311_pp0_iter1_reg;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state5_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_11001;
    sc_signal< sc_lv<11> > f_fu_270_p2;
    sc_signal< sc_lv<11> > f_reg_337;
    sc_signal< sc_lv<32> > grp_fu_173_p2;
    sc_signal< sc_lv<1> > icmp_ln33_1_fu_283_p2;
    sc_signal< sc_lv<1> > icmp_ln33_1_reg_353;
    sc_signal< sc_lv<32> > grp_fu_168_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage1_subdone;
    sc_signal< sc_lv<4> > dense_array_address0;
    sc_signal< sc_logic > dense_array_ce0;
    sc_signal< sc_logic > dense_array_we0;
    sc_signal< sc_lv<32> > dense_array_q0;
    sc_signal< sc_logic > grp_soft_max_fu_161_ap_start;
    sc_signal< sc_logic > grp_soft_max_fu_161_ap_done;
    sc_signal< sc_logic > grp_soft_max_fu_161_ap_idle;
    sc_signal< sc_logic > grp_soft_max_fu_161_ap_ready;
    sc_signal< sc_lv<4> > grp_soft_max_fu_161_dense_array_address0;
    sc_signal< sc_logic > grp_soft_max_fu_161_dense_array_ce0;
    sc_signal< sc_lv<32> > grp_soft_max_fu_161_prediction_Addr_A;
    sc_signal< sc_logic > grp_soft_max_fu_161_prediction_EN_A;
    sc_signal< sc_lv<4> > grp_soft_max_fu_161_prediction_WEN_A;
    sc_signal< sc_lv<32> > grp_soft_max_fu_161_prediction_Din_A;
    sc_signal< sc_lv<14> > ap_phi_mux_indvar_flatten_phi_fu_120_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<4> > ap_phi_mux_d_0_phi_fu_131_p4;
    sc_signal< sc_lv<11> > ap_phi_mux_f_0_phi_fu_154_p4;
    sc_signal< sc_logic > grp_soft_max_fu_161_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > zext_ln35_9_fu_265_p1;
    sc_signal< sc_lv<64> > zext_ln35_3_fu_224_p1;
    sc_signal< sc_lv<64> > zext_ln35_fu_288_p1;
    sc_signal< bool > ap_block_pp0_stage1;
    sc_signal< sc_lv<32> > grp_fu_168_p0;
    sc_signal< sc_lv<4> > d_fu_192_p2;
    sc_signal< sc_lv<14> > tmp_25_fu_229_p3;
    sc_signal< sc_lv<12> > tmp_26_fu_241_p3;
    sc_signal< sc_lv<15> > zext_ln35_8_fu_249_p1;
    sc_signal< sc_lv<15> > zext_ln35_7_fu_237_p1;
    sc_signal< sc_lv<15> > add_ln35_fu_253_p2;
    sc_signal< sc_lv<15> > zext_ln34_fu_220_p1;
    sc_signal< sc_lv<15> > add_ln35_4_fu_259_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_pp0_stage0;
    static const sc_lv<5> ap_ST_fsm_pp0_stage1;
    static const sc_lv<5> ap_ST_fsm_state6;
    static const sc_lv<5> ap_ST_fsm_state7;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<11> ap_const_lv11_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<14> ap_const_lv14_3E80;
    static const sc_lv<14> ap_const_lv14_1;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<11> ap_const_lv11_640;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<11> ap_const_lv11_1;
    // Thread declarations
    void thread_ap_var_for_const1();
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_add_ln29_fu_186_p2();
    void thread_add_ln35_4_fu_259_p2();
    void thread_add_ln35_fu_253_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_pp0_stage1();
    void thread_ap_block_pp0_stage1_11001();
    void thread_ap_block_pp0_stage1_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_block_state5_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_d_0_phi_fu_131_p4();
    void thread_ap_phi_mux_f_0_phi_fu_154_p4();
    void thread_ap_phi_mux_indvar_flatten_phi_fu_120_p4();
    void thread_ap_ready();
    void thread_d_fu_192_p2();
    void thread_dense_array_address0();
    void thread_dense_array_ce0();
    void thread_dense_array_we0();
    void thread_dense_weights_address0();
    void thread_dense_weights_ce0();
    void thread_f_fu_270_p2();
    void thread_flat_array_address0();
    void thread_flat_array_ce0();
    void thread_grp_fu_168_p0();
    void thread_grp_soft_max_fu_161_ap_start();
    void thread_icmp_ln29_fu_180_p2();
    void thread_icmp_ln33_1_fu_283_p2();
    void thread_icmp_ln33_fu_198_p2();
    void thread_prediction_Addr_A();
    void thread_prediction_Din_A();
    void thread_prediction_EN_A();
    void thread_prediction_WEN_A();
    void thread_select_ln35_1_fu_204_p3();
    void thread_select_ln35_2_fu_212_p3();
    void thread_tmp_25_fu_229_p3();
    void thread_tmp_26_fu_241_p3();
    void thread_zext_ln34_fu_220_p1();
    void thread_zext_ln35_3_fu_224_p1();
    void thread_zext_ln35_7_fu_237_p1();
    void thread_zext_ln35_8_fu_249_p1();
    void thread_zext_ln35_9_fu_265_p1();
    void thread_zext_ln35_fu_288_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
