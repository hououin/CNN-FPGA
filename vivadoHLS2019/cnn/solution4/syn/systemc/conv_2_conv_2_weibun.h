// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weibun_H__
#define __conv_2_conv_2_weibun_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weibun_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 192;
  static const unsigned AddressWidth = 8;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weibun_ram) {
        ram[0] = "0b10111110100010001010111110100011";
        ram[1] = "0b10111110000000000101011101111010";
        ram[2] = "0b00111110011001010110010111110010";
        ram[3] = "0b10111101100001011111011111110101";
        ram[4] = "0b10111101110001010100010000010110";
        ram[5] = "0b10111110001011000100001111001101";
        ram[6] = "0b10111101110100101100110100000000";
        ram[7] = "0b00111110010001010111001110100011";
        ram[8] = "0b10111110100111001110110100101011";
        ram[9] = "0b10111101101010101000000111001001";
        ram[10] = "0b00111101110111101111001100001111";
        ram[11] = "0b00111100000000101101001101100111";
        ram[12] = "0b10111110011001110000011100101011";
        ram[13] = "0b10111111000000011100000110000111";
        ram[14] = "0b10111110101110000100001101001110";
        ram[15] = "0b10111100111100011110101000011000";
        ram[16] = "0b10111110010100010000001011111010";
        ram[17] = "0b10111110011000010001111010100111";
        ram[18] = "0b10111110100010100110101001011100";
        ram[19] = "0b10111101101001100110100110001101";
        ram[20] = "0b00111101001100101110100110000111";
        ram[21] = "0b10111110111010001101011111111010";
        ram[22] = "0b10111110110011000001001100000111";
        ram[23] = "0b10111110100011111100110000110001";
        ram[24] = "0b10111110100100111110100100000100";
        ram[25] = "0b10111110001100101010010011100010";
        ram[26] = "0b10111110000011000100101110001011";
        ram[27] = "0b10111101101000111001111111000100";
        ram[28] = "0b10111101101010110111000100100101";
        ram[29] = "0b10111101101110111101001111001001";
        ram[30] = "0b10111101001101010111010001000111";
        ram[31] = "0b00111100000111101101001011111111";
        ram[32] = "0b00111110000010000110101110001010";
        ram[33] = "0b00111101110010011110011010011100";
        ram[34] = "0b00111101111110100011010001101011";
        ram[35] = "0b10111101110001111001111110110011";
        ram[36] = "0b00111101000011010001110110111100";
        ram[37] = "0b10111101101010010111111101001000";
        ram[38] = "0b10111101111001110001000110011111";
        ram[39] = "0b10111110011010101011011110010110";
        ram[40] = "0b10111110101010111011011011111110";
        ram[41] = "0b10111110001011011111000110101011";
        ram[42] = "0b10111110110001001101000010111110";
        ram[43] = "0b10111010010000111000110111000000";
        ram[44] = "0b10111101001011010010111000100111";
        ram[45] = "0b10111101001111110010001001111010";
        ram[46] = "0b10111110001101111111100100011100";
        ram[47] = "0b10111101100101011111011110000000";
        ram[48] = "0b10111100111111010110100000000000";
        ram[49] = "0b00111110011110000011101101011001";
        ram[50] = "0b10111101100001011001111011110100";
        ram[51] = "0b10111110011100101110111111010001";
        ram[52] = "0b10111101101011100001000011111000";
        ram[53] = "0b10111110101111111000011000001011";
        ram[54] = "0b10111110101110011000011001011011";
        ram[55] = "0b10111010110110110011000110110100";
        ram[56] = "0b10111101101001111111010011000010";
        ram[57] = "0b10111110010011110001100001110010";
        ram[58] = "0b10111110100001000100011011000101";
        ram[59] = "0b00111011101100101011010011011101";
        ram[60] = "0b00111101001111101010111111110010";
        ram[61] = "0b10111110001101011000101001000110";
        ram[62] = "0b00111101010000111000010100001110";
        ram[63] = "0b10111110011111000000000111000101";
        ram[64] = "0b10111100100000101110101010011101";
        ram[65] = "0b10111110101000010001001111101011";
        ram[66] = "0b00111011110100000001110111100111";
        ram[67] = "0b10111101101011101101011111101111";
        ram[68] = "0b10111110011000011111111001010100";
        ram[69] = "0b00111110000010010110100010111101";
        ram[70] = "0b10111110100110110011111010011011";
        ram[71] = "0b10111101110100010110010111110100";
        ram[72] = "0b10111110010110111010110010010100";
        ram[73] = "0b10111101101111100001001010000100";
        ram[74] = "0b00111010101011110111011001000111";
        ram[75] = "0b00111110001010011011100110101010";
        ram[76] = "0b10111110001100101011110001101001";
        ram[77] = "0b10111110001001001001000110001111";
        ram[78] = "0b10111110000110000101101101011001";
        ram[79] = "0b10111110010111010101101011000000";
        ram[80] = "0b00111100100101111011000001001101";
        ram[81] = "0b10111100101111110100000110010100";
        ram[82] = "0b00111100001000100011111111010000";
        ram[83] = "0b10111110100010100000110010010111";
        ram[84] = "0b10111101011111010100011011001000";
        ram[85] = "0b10111110110110100000001011100001";
        ram[86] = "0b10111101011111011100001100001000";
        ram[87] = "0b10111110011101001000110001100100";
        ram[88] = "0b10111110100101100001011011011110";
        ram[89] = "0b10111110001001010010011011000001";
        ram[90] = "0b00111100010000111110100100110011";
        ram[91] = "0b00111110000111100100010101110001";
        ram[92] = "0b10111101110101100101000011010001";
        ram[93] = "0b10111101010000100001010011010011";
        ram[94] = "0b00111110011001111101001111010010";
        ram[95] = "0b10111110001100001001010111011011";
        ram[96] = "0b00111110001001001011100101011111";
        ram[97] = "0b00111110000001000001111000000000";
        ram[98] = "0b00111101001111101110111110110000";
        ram[99] = "0b10111110000101100000001110011001";
        ram[100] = "0b10111101111010110011110010111110";
        ram[101] = "0b10111110001001001010000111101001";
        ram[102] = "0b10111110010010111111111000011011";
        ram[103] = "0b10111110000111101101100101000111";
        ram[104] = "0b10111110111100001111101001000000";
        ram[105] = "0b10111101101101000100101110101111";
        ram[106] = "0b10111110101011001110111101110010";
        ram[107] = "0b10111100111101011010110010001111";
        ram[108] = "0b10111101001110011111011110010100";
        ram[109] = "0b00111110010010100010111101010001";
        ram[110] = "0b10111101100111100001101010101011";
        ram[111] = "0b00111101111000100100011101010011";
        ram[112] = "0b10111110001111010010111100111110";
        ram[113] = "0b00111101101011110101111111001100";
        ram[114] = "0b10111101001011011100110111110111";
        ram[115] = "0b10111101111100110000001101111001";
        ram[116] = "0b10111110001100111110110101110001";
        ram[117] = "0b10111110101010010001001110101001";
        ram[118] = "0b10111101100101101010010101100010";
        ram[119] = "0b00111100101100110010101011110100";
        ram[120] = "0b00111101101111000000111001101110";
        ram[121] = "0b00111101110001010101000000110100";
        ram[122] = "0b10111110100011001101110001011000";
        ram[123] = "0b00111101111101011100110000101011";
        ram[124] = "0b00111101001100001111100100111001";
        ram[125] = "0b10111110000000001000000010001110";
        ram[126] = "0b10111110000101110001010001101111";
        ram[127] = "0b10111101110100010011100000111111";
        ram[128] = "0b00111101100100111101010110011001";
        ram[129] = "0b10111110010010011001110100000100";
        ram[130] = "0b10111101110100100110110111111001";
        ram[131] = "0b00111101101110111110001000100110";
        ram[132] = "0b10111110010100110110100101110110";
        ram[133] = "0b10111011010010011110101101000011";
        ram[134] = "0b00111100001011100010010000100000";
        ram[135] = "0b10111101001101010000110010001101";
        ram[136] = "0b00111101000001110100101010001001";
        ram[137] = "0b00111110001111011111010011100010";
        ram[138] = "0b10111110100010010001010010101011";
        ram[139] = "0b00111101101100100010110001011001";
        ram[140] = "0b00111110000000110110010000101000";
        ram[141] = "0b10111101100110011000010110011101";
        ram[142] = "0b00111110011001010101010110100110";
        ram[143] = "0b00111110100000000010010110011110";
        ram[144] = "0b00111101110110110101001001001011";
        ram[145] = "0b00111110011111011000110010101110";
        ram[146] = "0b10111101110010100110010100000010";
        ram[147] = "0b10111110001111011000001000100110";
        ram[148] = "0b10111110011010100110111101111011";
        ram[149] = "0b10111110110100011111110011111111";
        ram[150] = "0b10111101111111101010011110001010";
        ram[151] = "0b10111101101010111001101101100010";
        ram[152] = "0b10111110000000001001010100100010";
        ram[153] = "0b10111100010111001010100010101100";
        ram[154] = "0b00111101110011000010100110011100";
        ram[155] = "0b00111110100011101001000100010010";
        ram[156] = "0b00111110001111000111100011000110";
        ram[157] = "0b10111100111101011110000101010010";
        ram[158] = "0b00111110000101101001001111001110";
        ram[159] = "0b00111101101101110100011010100110";
        ram[160] = "0b00111110101100010100111110011000";
        ram[161] = "0b10111101010101010101000010101100";
        ram[162] = "0b00111101011101011110101110111001";
        ram[163] = "0b00111101000101010101100110000111";
        ram[164] = "0b10111110101101000111010010010110";
        ram[165] = "0b00111101110100000000101010000001";
        ram[166] = "0b10111110001110000010001101100010";
        ram[167] = "0b10111101101010010000110010001111";
        ram[168] = "0b10111110100010011110010010001011";
        ram[169] = "0b00111110001100010111010101011001";
        ram[170] = "0b10111110001110110110000001101100";
        ram[171] = "0b10111101011110010111000110000111";
        ram[172] = "0b00111100111010000001000110011101";
        ram[173] = "0b10111101001010010110111000110010";
        ram[174] = "0b00111110000100100001110101100010";
        ram[175] = "0b00111110101000000100100111101101";
        ram[176] = "0b10111110010001001100000010010110";
        ram[177] = "0b00111110011100010011100101110100";
        ram[178] = "0b00111101101001110011111000010000";
        ram[179] = "0b10111110000000000001001011010101";
        ram[180] = "0b10111101111001000111100011001111";
        ram[181] = "0b10111110001000000001000110101010";
        ram[182] = "0b10111101001100101001101111001011";
        ram[183] = "0b10111101001101011110010011000111";
        ram[184] = "0b00111101001100010101111111110111";
        ram[185] = "0b10111110001010010000011110101111";
        ram[186] = "0b10111110100000110110110001011010";
        ram[187] = "0b00111011111111000101000000101010";
        ram[188] = "0b10111110100111010100111011001000";
        ram[189] = "0b10111110010000000100011001100001";
        ram[190] = "0b00111110000011001001010111110111";
        ram[191] = "0b10111101010111110111001001000110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weibun) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 192;
static const unsigned AddressWidth = 8;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weibun_ram* meminst;


SC_CTOR(conv_2_conv_2_weibun) {
meminst = new conv_2_conv_2_weibun_ram("conv_2_conv_2_weibun_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weibun() {
    delete meminst;
}


};//endmodule
#endif
