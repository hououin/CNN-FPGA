-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibGp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibGp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001110110010011111000", 
    1 => "00111101011011000000111000100100", 
    2 => "10111110010000111100001110111100", 
    3 => "10111010000101011110110111011111", 
    4 => "10111100100101000100110010010011", 
    5 => "10111110000001010010101010010100", 
    6 => "00111100101110010001011110011111", 
    7 => "00111100101001011101101011000011", 
    8 => "10111011010000101110000111010011", 
    9 => "00111101011010010111111000011011", 
    10 => "00111101010100101010111110101101", 
    11 => "10111101100111001011000011101110", 
    12 => "00111100100000110100000011010110", 
    13 => "10111101010000110100101010000101", 
    14 => "00111100110101010111101110010000", 
    15 => "00111011110100000100001000110111", 
    16 => "00111101100110000010111101111010", 
    17 => "10111101111111101000100101111001", 
    18 => "10111011100000000010010110111100", 
    19 => "00111101010101101110100101110001", 
    20 => "10111101101111110010110110110000", 
    21 => "00111101100001101010100011101110", 
    22 => "10111101000000101110100010101111", 
    23 => "10111110001011111011011011101001", 
    24 => "00111101101101010101101011110101", 
    25 => "10111100111111111011010001100001", 
    26 => "00111101010000110111001111101011", 
    27 => "10111110100101001000001110001100", 
    28 => "00111101110100010100001011110111", 
    29 => "10111100000001110111000010010000", 
    30 => "00111110000100110110011111110111", 
    31 => "00111101110100001011001100000111", 
    32 => "00111101001010010000011011001111", 
    33 => "10111101101111101011000010110011", 
    34 => "10111101011100101111101011010100", 
    35 => "00111011110110000011110001000001", 
    36 => "10111101100101011001011110101110", 
    37 => "10111101100100000001001001100110", 
    38 => "00111101111110010100000001110011", 
    39 => "00111110010111100100110011100000", 
    40 => "10111110100111111110000010101110", 
    41 => "10111100001110010000110110010000", 
    42 => "00111101100100100110011100110010", 
    43 => "10111101000000110101011010101100", 
    44 => "00111110001100100111010100101111", 
    45 => "10111101100101110101010100101011", 
    46 => "10111110001000101010010001001111", 
    47 => "00111101111010000011101101100011", 
    48 => "10111100111100111111010110011110", 
    49 => "10111101110010111001001000110101", 
    50 => "10111110001010110111101000100111", 
    51 => "00111101111111100000101110111100", 
    52 => "10111101111001111010010111101000", 
    53 => "10111101111100010100101110100111", 
    54 => "10111110001011010101010001000001", 
    55 => "10111101110101011010000011010101", 
    56 => "00111101001000110101001100110100", 
    57 => "00111110000010001101111100001001", 
    58 => "00111011010100011110101101010010", 
    59 => "10111101000101001010100010100101", 
    60 => "10111101000110110100100000000001", 
    61 => "10111011001010011101110000011000", 
    62 => "00111101101110111010010001001000", 
    63 => "00111110010101111011111011100010", 
    64 => "00111011110001111100111100011011", 
    65 => "00111100110000111101100011001000", 
    66 => "10111100001001101000101100111101", 
    67 => "00111001111111001110111100001010", 
    68 => "00111101010100111000110000100000", 
    69 => "10111101110101111000100011010001", 
    70 => "00111110001000001010110001110110", 
    71 => "10111110001100001100101110101101", 
    72 => "00111100101110110011001011110011", 
    73 => "00111100000100001110001110111111", 
    74 => "00111101110101010000101001011100", 
    75 => "10111110000011010110110011110110", 
    76 => "00111110000001111001000010111110", 
    77 => "00111110000100000000100101100110", 
    78 => "10111101010010100110000000101011", 
    79 => "10111100101010000100011110101000", 
    80 => "00111101110011111100111011100011", 
    81 => "10111101000010101110000001010001", 
    82 => "00111101101111011111100101111011", 
    83 => "00111101100100011100001110100100", 
    84 => "10111110000111100010111111100010", 
    85 => "00111110000100000100000111101011", 
    86 => "00111100101010010011101001011011", 
    87 => "00111101110010110111001010101111", 
    88 => "00111101001101110111111000101111", 
    89 => "00111101011111000010011000111001", 
    90 => "10111110000110001000001111110100", 
    91 => "10111110011111101100111110101100", 
    92 => "10111010101110000101001011000100", 
    93 => "10111110011000000010000010100001", 
    94 => "00111101011010101000110000110101", 
    95 => "00111100111011010100111011010000", 
    96 => "00111101000111000111010110110100", 
    97 => "00111101010010011001000001111010", 
    98 => "10111110000011101000011100110110", 
    99 => "10111110001110111100110000100001", 
    100 => "00111110011010101010111010101000", 
    101 => "10111110110010001001010111010010", 
    102 => "00111110000100011010011011010110", 
    103 => "00111101001010111011011000001000", 
    104 => "10111110000001001000101101101111", 
    105 => "00111100000101111100100001111000", 
    106 => "00111110000110011100001001010101", 
    107 => "00111101111100001010110100111011", 
    108 => "00111100000000111111101011001001", 
    109 => "10111101100011110100100011110111", 
    110 => "00111101011101111011010100010001", 
    111 => "00111101110110010111011010011010", 
    112 => "00111110000100111001001111101001", 
    113 => "00111101100001101001011100001010", 
    114 => "10111101111101110101110100111010", 
    115 => "00111101010100000010100101110010", 
    116 => "10111101100010000100010010111010", 
    117 => "00111011100001000001001010111010", 
    118 => "10111101100111111011010000011110", 
    119 => "10111101100100100010000001010010", 
    120 => "10111101100100001011000100001101", 
    121 => "00111100101111010001010000011100", 
    122 => "00111100110101011010100001010100", 
    123 => "10111110100000111100000100000011", 
    124 => "00111100011101011001001101010101", 
    125 => "10111110000000101000011010110011", 
    126 => "10111101111110111101101001010011", 
    127 => "10111101101011111110111011100100", 
    128 => "10111110011010110011011001011110", 
    129 => "10111101101010011111011101011000", 
    130 => "10111101101001111101001000001001", 
    131 => "10111101101110100001101010011111", 
    132 => "00111101011000100110010011001000", 
    133 => "10111110011000100101101000101011", 
    134 => "00111101110011001001100101110110", 
    135 => "00111100111011101110000001011010", 
    136 => "10111101100110011100101000100100", 
    137 => "10111110001111110110001010001001", 
    138 => "10111110100110011100010011001111", 
    139 => "10111101011101010101110001100001", 
    140 => "00111110001011011100111000101100", 
    141 => "00111110000001110010101000011011", 
    142 => "10111100111111011100001010011101", 
    143 => "00111101010110010001110100110001", 
    144 => "10111101010010100100010100000101", 
    145 => "10111101111110001110111000111101", 
    146 => "10111010111001010001001011010010", 
    147 => "00111110000111010010111010010001", 
    148 => "00111101100100010100110001011010", 
    149 => "00111110001010101001100110100100", 
    150 => "00111101101010011011110100010011", 
    151 => "00111110101010011111001111100110", 
    152 => "00111101110000001000100010010001", 
    153 => "00111101110000111110001000110110", 
    154 => "10111110001001011111001010010110", 
    155 => "10111101011111110011100000001000", 
    156 => "10111100101001011000101111001010", 
    157 => "10111101100111010111001110101111", 
    158 => "10111101100111111001101000100010", 
    159 => "10111100011010011101001010111100", 
    160 => "10111110100011000000111111110001", 
    161 => "10111101011010000110110000111101", 
    162 => "10111110011101001111101011011110", 
    163 => "10111101011111111010010100010101", 
    164 => "00111110101111101011111000011000", 
    165 => "10111110001111101010100000100111", 
    166 => "00111101101000100100101010101111", 
    167 => "10111101110111000100011100000011", 
    168 => "00111101000111110010010111001101", 
    169 => "00111101010101100001011001111001", 
    170 => "00111101101010100011110100000001", 
    171 => "00111100111111011011010010001100", 
    172 => "10111110001001011001001000101000", 
    173 => "10111101110111101001000011011001", 
    174 => "10111101010001100110011101000001", 
    175 => "00111101111000101100000000100111", 
    176 => "00111100111101110100100111100001", 
    177 => "10111100001010111101101110110100", 
    178 => "00111101101100101001110011101010", 
    179 => "10111100111101101111000011100000", 
    180 => "10111100101011010011000011010100", 
    181 => "00111110010010010111101100011001", 
    182 => "00111100000011011101100000110101", 
    183 => "00111110101011011011011001010110", 
    184 => "10111110000101001001000010100010", 
    185 => "10111100110111111111001111101011", 
    186 => "00111100110101010011000001000101", 
    187 => "10111110100000000101111111010011", 
    188 => "00111101101101101111111101100000", 
    189 => "00111110001001010001001010110010", 
    190 => "00111010011010001011110101110011", 
    191 => "10111101111001111100101110101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibGp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibGp is
    component conv_2_conv_2_weibGp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibGp_rom_U :  component conv_2_conv_2_weibGp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


