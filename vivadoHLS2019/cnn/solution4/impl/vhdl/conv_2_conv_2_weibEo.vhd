-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibEo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibEo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110101110111010110001000", 
    1 => "10111110001001011011110111001010", 
    2 => "10111101110111001010100110001110", 
    3 => "10111110010010101001010010010011", 
    4 => "00111101100110110110010001100110", 
    5 => "00111101100000010011010100111111", 
    6 => "10111101000100101001100000100011", 
    7 => "10111100001100110000101100100011", 
    8 => "10111101111010000010000000010000", 
    9 => "00111011000011001011110111001010", 
    10 => "00111010101010010001000110111110", 
    11 => "10111011101011000110101011011000", 
    12 => "10111101011001100011000011011001", 
    13 => "00111110000011011100000011000100", 
    14 => "10111101101010110101100110010011", 
    15 => "10111101010111010111110000111001", 
    16 => "00111101100011101100001110100100", 
    17 => "00111100111100001101101011101010", 
    18 => "10111100001001001100001010111111", 
    19 => "10111101010101101101101010101110", 
    20 => "00111100101001000010101000001011", 
    21 => "00111110010011100010101111110011", 
    22 => "00111100101001001000111101001000", 
    23 => "00111101111011101010011000100001", 
    24 => "00111011111001111100011010110100", 
    25 => "10111110000000101000110001000101", 
    26 => "10111101000000011110010010111101", 
    27 => "10111110100100101111100010110000", 
    28 => "10111101100111110000001001010010", 
    29 => "10111101110111000000010110101111", 
    30 => "00111100101011001101111000100011", 
    31 => "10111110110010101001101010100010", 
    32 => "10111101100110111101111111110010", 
    33 => "10111101100101110010101101101110", 
    34 => "10111100100000011001000000111100", 
    35 => "10111110001011101011011010011000", 
    36 => "10111110001000000001111111000110", 
    37 => "10111101011011111111001000111101", 
    38 => "10111011110101101000010001111100", 
    39 => "10111101100100100100010000101100", 
    40 => "00111100101111111101100011011111", 
    41 => "10111101100000101101110011010010", 
    42 => "00111110000000010011010011101010", 
    43 => "10111100110001001000001011011010", 
    44 => "10111100111111001101000111110011", 
    45 => "00111110010000101011110110111101", 
    46 => "00111101100110101100010001010111", 
    47 => "00111100111100001101011101111100", 
    48 => "10111110001011110001101111100000", 
    49 => "10111110000100101010101100100101", 
    50 => "00111101100001111001011001010011", 
    51 => "10111110010111111100100110011111", 
    52 => "10111110010001001101000111000010", 
    53 => "00111110000101100100011111110010", 
    54 => "00111101001001010100011011110001", 
    55 => "10111100010100110101011001110000", 
    56 => "00111011010001001011010111111001", 
    57 => "10111100101100001101011001010101", 
    58 => "00111110001011000010111111110111", 
    59 => "00111101101100001011101100110010", 
    60 => "00111100001101101001111110111100", 
    61 => "10111101010100011010101011001111", 
    62 => "10111110010000101110011000000011", 
    63 => "10111110000011000110110111011011", 
    64 => "00111101011101001000001110011000", 
    65 => "10111110100000000111001111100010", 
    66 => "10111110000110101111001000010111", 
    67 => "10111101111000001000100001010110", 
    68 => "00111110010001001011101001011110", 
    69 => "00111100101000001111000010101110", 
    70 => "10111101011001101001100110011000", 
    71 => "10111110001100000001001100100101", 
    72 => "10111100010110101101100000101101", 
    73 => "10111100110010001100000010111000", 
    74 => "10111110010110101011101001001001", 
    75 => "00111101101000111011010011010010", 
    76 => "10111101101010110011000010101101", 
    77 => "00111100101101001010111100101001", 
    78 => "10111101100100111010001001011110", 
    79 => "10111101100111110010111100011101", 
    80 => "10111011110101101010111101011011", 
    81 => "10111101001110000011110000111100", 
    82 => "10111101110001000011011000001001", 
    83 => "00111100100000010111111100100011", 
    84 => "10111110001111101100101100001010", 
    85 => "00111101100011010111001001010100", 
    86 => "00111101101010010011111001001101", 
    87 => "00111101111100110110010101011111", 
    88 => "00111101101100010101101000100110", 
    89 => "10111101111110101011111011111100", 
    90 => "10111101101010111110111101111101", 
    91 => "00111101100101111010001010101110", 
    92 => "10111110000000001111000110010011", 
    93 => "00111100011000111101110100010000", 
    94 => "00111101000111111011110000111011", 
    95 => "00111100001011100000110010010010", 
    96 => "10111100110010101011010011110000", 
    97 => "10111110000110011101111000111001", 
    98 => "00111100011110110011100001011100", 
    99 => "10111101100000110010100110110111", 
    100 => "10111110011000010100110010111000", 
    101 => "00111100011100100100111000011001", 
    102 => "00111100101000011111010110101000", 
    103 => "10111101010111001111010011110110", 
    104 => "00111100111110000100011100110000", 
    105 => "10111101111001100111100000011110", 
    106 => "00111101001010011110010010101101", 
    107 => "10111101100000110100001110110011", 
    108 => "10111101010000111000110000100000", 
    109 => "00111011101111111010010010111110", 
    110 => "10111101111011001000010101111010", 
    111 => "10111101100011001011001100101111", 
    112 => "10111101111001110101111110101001", 
    113 => "10111110000000100111111100110001", 
    114 => "10111101101001110110100110110011", 
    115 => "10111101000011011000010001100011", 
    116 => "10111100001001101000000100010100", 
    117 => "00111110001010110100111001111110", 
    118 => "00111110001010010100110010010001", 
    119 => "10111110001111110101110000101101", 
    120 => "00111100010000100010010110111001", 
    121 => "00111100100010001101111100101001", 
    122 => "00111110010100011110011101011100", 
    123 => "00111101110011110101100010001000", 
    124 => "10111101100001001011100110001110", 
    125 => "10111101111001000100000001000010", 
    126 => "10111100110001110111111000001011", 
    127 => "00111101010101001011111011010100", 
    128 => "10111110001000010001010011001010", 
    129 => "10111110101010010110010011101011", 
    130 => "10111101101111010010101010111111", 
    131 => "10111101011110111101001010111101", 
    132 => "00111101111101000111010100001010", 
    133 => "10111110101000010100000001101101", 
    134 => "00111101101100100001010100100000", 
    135 => "00111101010001011010010111100000", 
    136 => "00111101100111001010101111110001", 
    137 => "10111110001010001101001010000101", 
    138 => "00111100100010010101100111001111", 
    139 => "10111110001101001100101001100111", 
    140 => "00111101011011011100101011100010", 
    141 => "00111101101111010111100110001110", 
    142 => "00111101010000000110110111010111", 
    143 => "10111100111000111111011100001110", 
    144 => "10111101011010010010010110110001", 
    145 => "10111110001101101001010001000101", 
    146 => "10111110010000000000010001011010", 
    147 => "00111100110011110111010011011100", 
    148 => "10111100001100101000111011110101", 
    149 => "00111101101110000100111000011100", 
    150 => "00111011100011010000100111110000", 
    151 => "00111110001011101011011000001110", 
    152 => "00111101001011100010110011011000", 
    153 => "00111101101000010110001011101101", 
    154 => "10111110000000111011001000011100", 
    155 => "10111101111100010110110011111101", 
    156 => "00111100100110111010000000100110", 
    157 => "10111101100011110000000010001010", 
    158 => "10111110000011001101001101001110", 
    159 => "00111011000100011001100110010000", 
    160 => "10111110010010001101100010001001", 
    161 => "00111101110011000110001011011111", 
    162 => "10111110010111101110001010111011", 
    163 => "10111110100111101010111001011001", 
    164 => "10111101111011100111000110100101", 
    165 => "00111110000011001001001001101010", 
    166 => "00111101101000111101010011101000", 
    167 => "00111101110101000111011000011010", 
    168 => "00111101101011001010011100000111", 
    169 => "00111100011001101011001011111110", 
    170 => "00111101111110100100101101101010", 
    171 => "10111101101001100110101111001000", 
    172 => "10111101000101010110100111011000", 
    173 => "10111110000100101110110111100011", 
    174 => "00111011000011001110111101110100", 
    175 => "00111101001000101011100101101110", 
    176 => "00111100101010111111001101101110", 
    177 => "00111101110001110001001111100111", 
    178 => "00111100110111001010011001100110", 
    179 => "00111101001111001111110011100010", 
    180 => "00111110000101010110011100101011", 
    181 => "00111101100111011110101000101111", 
    182 => "00111101100111001100111110011010", 
    183 => "10111110011001110010001101011001", 
    184 => "10111101010110010110000111100001", 
    185 => "00111101101100001110111100000110", 
    186 => "00111110010011000100110100000101", 
    187 => "00111100111100111010001000101000", 
    188 => "10111110000001111111011101111111", 
    189 => "10111101101100011010111011110100", 
    190 => "10111101000010101111101010111001", 
    191 => "00111101101000100001100111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibEo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibEo is
    component conv_2_conv_2_weibEo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibEo_rom_U :  component conv_2_conv_2_weibEo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


