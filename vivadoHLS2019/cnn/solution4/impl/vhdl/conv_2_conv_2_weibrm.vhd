-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibrm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibrm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011000111000101000011", 
    1 => "10111100100011110110101011001001", 
    2 => "10111101010101101111101101100001", 
    3 => "10111101110011001001110011101101", 
    4 => "00111100011111101011100011110010", 
    5 => "10111101110000111001001001100100", 
    6 => "10111100110101110100010000010001", 
    7 => "00111100110111000001011101010110", 
    8 => "10111110000110111110011011011110", 
    9 => "00111110000010010101010010110010", 
    10 => "10111101100101001000101111110000", 
    11 => "00111110001100000001100000000110", 
    12 => "10111101110000100001001001101101", 
    13 => "10111110010110001011011010111001", 
    14 => "10111101111101010000100000001001", 
    15 => "10111101110001101110100010000001", 
    16 => "10111011110110000111001000100000", 
    17 => "10111100011110011011101100001001", 
    18 => "10111101100110010000100000101100", 
    19 => "00111110001101100100001010001111", 
    20 => "10111110100100010111010101100101", 
    21 => "10111100111110110110110101000101", 
    22 => "10111101011111101110000011100111", 
    23 => "10111110010101001001010101011110", 
    24 => "00111101111000000110001011101001", 
    25 => "10111110010111001000000000100001", 
    26 => "10111101111010010100110011001000", 
    27 => "00111100101111010110001111001110", 
    28 => "10111101010101000100001111100110", 
    29 => "00111110000010101111111000010001", 
    30 => "00111101110101000110110111010101", 
    31 => "10111101101010101101100000000111", 
    32 => "10111011101110101101001110110101", 
    33 => "10111110110100101010100111111101", 
    34 => "10111100100101001110101101100001", 
    35 => "10111110100101101010100111010000", 
    36 => "10111110101110001011001111000110", 
    37 => "10111110110001110001111001110110", 
    38 => "00111101111111011000000111001001", 
    39 => "00111011111010010010110000100101", 
    40 => "00111101111101000101100100001010", 
    41 => "10111110000001101010010101110110", 
    42 => "00111100111001100101110100001010", 
    43 => "10111110011000101011100110111111", 
    44 => "00111101110101011001010100001000", 
    45 => "10111110001000100001101001100001", 
    46 => "10111101010100010011100110011110", 
    47 => "10111100110001000101001100001011", 
    48 => "00111101101110010011111001001000", 
    49 => "10111110010100000010000001101111", 
    50 => "00111101101110000001100010001001", 
    51 => "10111101100111011110110100100001", 
    52 => "00111011010111101000010110111010", 
    53 => "10111110001000101011100111110100", 
    54 => "00111101100100110101010010110011", 
    55 => "10111110000000011010110000010011", 
    56 => "10111101110011011110001100111101", 
    57 => "00111110001101000000001010101010", 
    58 => "10111101101011111101000111011000", 
    59 => "00111110001001101101110011010100", 
    60 => "10111110001111000110111001110110", 
    61 => "10111110001110111011100010001110", 
    62 => "00111100100011011101011111001001", 
    63 => "10111110001000110100011101111011", 
    64 => "00111100100100101000111001100111", 
    65 => "10111110001010011011001110101011", 
    66 => "10111110000001101000000011000000", 
    67 => "00111101111100101001100110101000", 
    68 => "10111110001001111110010100111010", 
    69 => "10111110100100000011011001100110", 
    70 => "00111101100111110111001010101010", 
    71 => "00111101101011111110001010110000", 
    72 => "00111010101011110110000000100100", 
    73 => "00111011010101101110100010101010", 
    74 => "10111110011111100000111010011100", 
    75 => "10111110001001100111111110101000", 
    76 => "00111101111111111011100011011011", 
    77 => "10111110001000001100000001110001", 
    78 => "00111101011110001101100010110001", 
    79 => "10111101100010110110010100110110", 
    80 => "10111101101100010010100110010010", 
    81 => "10111101100010111100011000000111", 
    82 => "10111110101011010100000011101010", 
    83 => "10111011101111010111101100101001", 
    84 => "10111110001011001101001100011010", 
    85 => "10111101010100101111010101000101", 
    86 => "10111011000100010010100001101010", 
    87 => "10111110010010111111110110110110", 
    88 => "10111100000010010101111110000101", 
    89 => "00111100100000010010110111010010", 
    90 => "00111101000111101111110100110111", 
    91 => "00111110001010101100110011111110", 
    92 => "00111110000011010101000011100001", 
    93 => "10111110100001111100011011110000", 
    94 => "10111110000100011101110111001110", 
    95 => "00111110000001111111110000101011", 
    96 => "00111101011100001110011001011111", 
    97 => "00111110000001110000010110000110", 
    98 => "10111101100011001010111100010011", 
    99 => "10111110101000101111110101000001", 
    100 => "00111101100110111001001010111001", 
    101 => "00111101101111001010011111111011", 
    102 => "00111101110111011100001000111110", 
    103 => "10111101111110110110001001011010", 
    104 => "00111101110110111110100101110111", 
    105 => "10111100100111011101000001000110", 
    106 => "00111101101000011000110100000001", 
    107 => "00111110001101111100111001111100", 
    108 => "10111101010010100111110001011111", 
    109 => "10111110100001010111010011001000", 
    110 => "00111101001011000000101110000110", 
    111 => "00111110000110011011001111010000", 
    112 => "00111101110010101010101111100000", 
    113 => "00111110001000011011110000001110", 
    114 => "10111101110101000010100011011100", 
    115 => "10111110000001101000001111101100", 
    116 => "00111101100110000001100100100000", 
    117 => "10111101010011010101100000101000", 
    118 => "10111100010101001111011000000010", 
    119 => "10111110000110110111011000010100", 
    120 => "00111101011100110101101110101000", 
    121 => "10111101011011100100000000111001", 
    122 => "10111101011111011111010000011110", 
    123 => "10111110010001000101001011001010", 
    124 => "10111101111010111010110101010011", 
    125 => "10111101101010101001011000100101", 
    126 => "00111101011001001011100001010010", 
    127 => "10111100111100000101100110100101", 
    128 => "10111110100001001100101110101111", 
    129 => "10111110101000001001111010000011", 
    130 => "10111110010110100111000110010011", 
    131 => "00111101100010110001111000101100", 
    132 => "00111100110100010110001010010001", 
    133 => "10111110101101011010101000010101", 
    134 => "00111110011001111100111000101011", 
    135 => "00111101100111111010110001110101", 
    136 => "00111101111110011000101100111111", 
    137 => "10111110110011110001100011000001", 
    138 => "10111110000110000000011001011010", 
    139 => "10111110010110100001110011111101", 
    140 => "00111110001010001000111010011010", 
    141 => "00111101001001110000111011001001", 
    142 => "00111110001001101011100100111101", 
    143 => "00111101101000000100011101000110", 
    144 => "00111100110111101111011010000001", 
    145 => "00111101000011001010010101100110", 
    146 => "10111100011111010011001100100100", 
    147 => "00111101101100111111110000010010", 
    148 => "00111110000101000000100010101011", 
    149 => "10111100101001010110001010011111", 
    150 => "10111101010000101101001100011011", 
    151 => "10111101000011001001101110101010", 
    152 => "00111110010100001111000010001010", 
    153 => "00111110001011101000010000011001", 
    154 => "10111110011011000111010111110011", 
    155 => "00111101100000110111001001110000", 
    156 => "00111101110000001100000000101000", 
    157 => "10111101100000100111011001001011", 
    158 => "10111101010011011001100100101111", 
    159 => "00111110001110011110111100000101", 
    160 => "00111101111010101011111100110100", 
    161 => "00111110010010111010001101001111", 
    162 => "10111110110111100011001110100110", 
    163 => "10111110101010111000001111100001", 
    164 => "00111101101001000110100100100001", 
    165 => "00111110010001100001001100011000", 
    166 => "00111110001000011001111010100100", 
    167 => "00111101010011010001111101010110", 
    168 => "10111101111001101110110000101110", 
    169 => "00111110100001011010100101000111", 
    170 => "10111110010111000111010111110110", 
    171 => "00111110001000100101100100111001", 
    172 => "10111110001100001001111111000011", 
    173 => "00111101100111001111000001110110", 
    174 => "00111110100010001110000110100001", 
    175 => "00111110011010111100010100101110", 
    176 => "10111110010000111010100100100010", 
    177 => "00111110011101001011010100010001", 
    178 => "00111110011111100101010110000001", 
    179 => "10111110010011101001001011000101", 
    180 => "00111101110010111000100010110110", 
    181 => "10111110000010100110001111000100", 
    182 => "10111110001111111110101000100000", 
    183 => "00111101111001000010001101001111", 
    184 => "10111101000101010000111110010100", 
    185 => "10111100110110110011101011100000", 
    186 => "10111100100001100010011110010001", 
    187 => "10111101111101010000010000010000", 
    188 => "00111101010010001110011101111010", 
    189 => "10111011011111000011000011010110", 
    190 => "10111110100000011010101011110000", 
    191 => "10111101011001011111110000111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibrm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibrm is
    component conv_2_conv_2_weibrm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibrm_rom_U :  component conv_2_conv_2_weibrm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


