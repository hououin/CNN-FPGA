-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibml_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibml_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010010100001100111000", 
    1 => "10111101011010101011000001100001", 
    2 => "10111110100001010101010100101010", 
    3 => "00111101111110101110001110011010", 
    4 => "10111110100011000101100100100011", 
    5 => "00111110001010011100000100010111", 
    6 => "10111010110111001011111011001111", 
    7 => "10111110010101010010000110111100", 
    8 => "00111110111100010110110110100011", 
    9 => "10111110000011111110000111000011", 
    10 => "00111110000010010110100111101101", 
    11 => "10111110001110110000100011000001", 
    12 => "00111101001111101101101011100000", 
    13 => "10111101001111100100101010011100", 
    14 => "00111110110011100001111101000100", 
    15 => "00111110110001111100010111101101", 
    16 => "10111101100011001011010111101100", 
    17 => "00111101001010110001100110101010", 
    18 => "10111101010100000010001110001110", 
    19 => "10111101111101011111011101010011", 
    20 => "10111101100000111001111100110000", 
    21 => "00111100010011110001110110110010", 
    22 => "10111100010000001110101000100101", 
    23 => "10111101100011010011000011100001", 
    24 => "00111110010111111110001011111000", 
    25 => "00111110101001111101011000101100", 
    26 => "10111100100111100001111111100000", 
    27 => "00111101111110011000110011000101", 
    28 => "00111110101010001000001110110111", 
    29 => "10111011111101010011010110111011", 
    30 => "10111101011101010111000101111111", 
    31 => "10111110010111110100111111111100", 
    32 => "00111110101100001011000001100111", 
    33 => "10111110000110101000010101000011", 
    34 => "00111101010111010010111010001001", 
    35 => "00111110000101011100100100101001", 
    36 => "10111110000111010111000100010111", 
    37 => "00111101010000111110010010011111", 
    38 => "00111101001100111100100111110110", 
    39 => "00111110000101011110100111101101", 
    40 => "10111011111001111110010110001110", 
    41 => "00111110100110110110110100001000", 
    42 => "10111101110101111110011101111011", 
    43 => "00111110100001110011101001111100", 
    44 => "10111101011100011100110110001100", 
    45 => "00111110000101111011111100101101", 
    46 => "10111110000100001010000011110101", 
    47 => "00111101111110010100011001101001", 
    48 => "10111110000100010011110001111101", 
    49 => "10111110001100010110100101110101", 
    50 => "00111110011111100010011010100101", 
    51 => "00111110000000111001011001100101", 
    52 => "10111110010100100110110000001000", 
    53 => "10111101110001111101110110101000", 
    54 => "00111101001011111110001101100011", 
    55 => "10111110011101100111111111110100", 
    56 => "00111101001001001111010111001100", 
    57 => "10111110100011110111010001110111", 
    58 => "00111110001100111101000110111010", 
    59 => "10111110000101111101111001101101", 
    60 => "00111101111000110011111110111001", 
    61 => "00111110100110000011110011110100", 
    62 => "00111100110110011000011100010110", 
    63 => "00111101101001101111110001101110", 
    64 => "10111110000011111000001001110101", 
    65 => "00111110010000000110110010110111", 
    66 => "00111101001001110000111100000000", 
    67 => "10111110110000110101101010000100", 
    68 => "10111101100000111010001101010101", 
    69 => "00111101100010110011011100000011", 
    70 => "10111100101111110101110010111100", 
    71 => "10111101100000001110011000110010", 
    72 => "00111110100101000101110101101101", 
    73 => "10111110010101111111001111111000", 
    74 => "00111110011100001101010011010011", 
    75 => "10111101110111100100000011111010", 
    76 => "10111101111101100000101001000111", 
    77 => "00111101010000000000001100011100", 
    78 => "00111110011101000100111010000000", 
    79 => "00111110000111111010101001001001", 
    80 => "10111110010110010110100110110101", 
    81 => "10111101110101100101010011000001", 
    82 => "00111110000001100011000000011101", 
    83 => "10111101110111001000110100111001", 
    84 => "10111110001111011101001101101011", 
    85 => "00111110010001011011111111010111", 
    86 => "00111110010101101110011111110011", 
    87 => "00111110000111101110011010011110", 
    88 => "00111110010101111001011101000011", 
    89 => "10111100011010110100111101010110", 
    90 => "10111101111000111001011111000000", 
    91 => "00111110000011110001011111010011", 
    92 => "00111110101010111100001001111100", 
    93 => "00111101111110111101111110010111", 
    94 => "10111110010110111010000000111111", 
    95 => "10111110000111100110001011101001", 
    96 => "10111110010100110001011000110111", 
    97 => "10111110000011010101001100000100", 
    98 => "10111110101100110010111011100110", 
    99 => "00111101110111100000110101110110", 
    100 => "10111110010011101101100011010110", 
    101 => "00111110010010111101001111010100", 
    102 => "10111101110000010011110001111010", 
    103 => "10111110000000101100010110000001", 
    104 => "00111110000100111001010101000011", 
    105 => "10111101110011010111010100000110", 
    106 => "10111110100000011001101010111101", 
    107 => "10111110100100110010100000001010", 
    108 => "10111101100110100011010000110001", 
    109 => "10111110101000010110011010000000", 
    110 => "00111101100011011101010111111100", 
    111 => "00111110000000000001100010110001", 
    112 => "10111110101011010111011110100111", 
    113 => "10111110001001111101111011001011", 
    114 => "00111110111000011010011000110101", 
    115 => "00111110011111111111000110110110", 
    116 => "10111100101110110110100010000010", 
    117 => "10111011101001001100010011001000", 
    118 => "00111101000100111010001000100100", 
    119 => "10111110101001010000000101110011", 
    120 => "10111101101010011101111111001011", 
    121 => "10111110100001001100101111100011", 
    122 => "00111110000000111011010001010011", 
    123 => "10111101101111011011100010110111", 
    124 => "00111110101000000001000010100011", 
    125 => "00111110000101011100010101001111", 
    126 => "00111101011100101110000011010111", 
    127 => "00111100111101011101001100111011", 
    128 => "10111110001000010111111101101010", 
    129 => "00111110000101101100011110101001", 
    130 => "00111110100000100000001100111100", 
    131 => "10111110101110000011010110001000", 
    132 => "10111110000111101001010001010010", 
    133 => "10111110010110100010111101011111", 
    134 => "10111110011011110110100100111000", 
    135 => "00111101101100110101100111011010", 
    136 => "10111101111011111010101100010011", 
    137 => "10111110100111110010110111111111", 
    138 => "10111101100000000110100010000111", 
    139 => "10111101100011110110100001001000", 
    140 => "10111110001000010111000010111101", 
    141 => "00111101010111100110010101100101", 
    142 => "10111110101010110011001111110000", 
    143 => "10111110110000001001110101010111", 
    144 => "00111011100001110000001001110101", 
    145 => "10111110011110101001101101010100", 
    146 => "00111110001001000100011001111000", 
    147 => "00111110100100001001011001101111", 
    148 => "00111101111100001000001100110111", 
    149 => "10111101100000100011010001011001", 
    150 => "00111110001010011100110000111111", 
    151 => "00111101000010010001100111011101", 
    152 => "10111101111110000000001010101011", 
    153 => "10111110101000001000111101010000", 
    154 => "10111110001100001111110010100001", 
    155 => "00111100110101011011000111000011", 
    156 => "10111101100101010100000110000010", 
    157 => "00111110010010001101101000110011", 
    158 => "00111101010010100101010101100100", 
    159 => "10111101111101000000100100110000", 
    160 => "10111110101001000111111100111001", 
    161 => "10111101111110111110010000010101", 
    162 => "10111110101101110101110110111011", 
    163 => "10111110010000100001111001001100", 
    164 => "00111110010011010100010001000111", 
    165 => "00111110000101100110000111001010", 
    166 => "00111101010111000001001010100100", 
    167 => "10111110010001010000011100101010", 
    168 => "00111110101011100000011111001111", 
    169 => "10111111000010000011010111011011", 
    170 => "10111110011100100100111001111000", 
    171 => "10111110101101111011011000111001", 
    172 => "00111101100010100110010000111010", 
    173 => "10111110110010100001111110110010", 
    174 => "10111110011111011011001000011000", 
    175 => "10111110000011100101101000010001", 
    176 => "00111110011110101001110101100110", 
    177 => "10111101110110010000100001011111", 
    178 => "00111101101011010000101011110001", 
    179 => "00111110000010110011001010100101", 
    180 => "00111110000110111111011001111111", 
    181 => "00111101111010001100110001001101", 
    182 => "00111110001101110010011101111011", 
    183 => "00111110000100010010110010001101", 
    184 => "10111110001101001001010110111110", 
    185 => "00111101000010011110011001110100", 
    186 => "00111110001001010110000110100011", 
    187 => "00111101010100100101111000110101", 
    188 => "00111110101111110000100011110101", 
    189 => "10111110100101010010100001110111", 
    190 => "10111110000011100011010011100000", 
    191 => "10111110011010101000100101100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibml is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibml is
    component conv_2_conv_2_weibml_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibml_rom_U :  component conv_2_conv_2_weibml_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


