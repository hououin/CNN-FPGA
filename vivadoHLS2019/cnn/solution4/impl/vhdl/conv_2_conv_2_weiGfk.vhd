-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiGfk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011011001010001011000000100", 
    1 => "00111100100001111100010010001000", 
    2 => "10111100101110101010011111100010", 
    3 => "00111101111011001000111001010100", 
    4 => "00111101111110010110001001010001", 
    5 => "00111101111011110101011100011010", 
    6 => "10111110010001111000101011010010", 
    7 => "00111110111000001100100001010111", 
    8 => "10111101001101001001011100001000", 
    9 => "00111110000001010011010100001101", 
    10 => "10111101111000010011001101001100", 
    11 => "00111101000000000110011111001010", 
    12 => "10111110011000111011001010101010", 
    13 => "10111110000101001100100010100000", 
    14 => "10111101000110101100100111001011", 
    15 => "00111110001110000001100001001011", 
    16 => "10111101100000110001011000100110", 
    17 => "10111101101101010001110110100011", 
    18 => "00111100011010011100011110011111", 
    19 => "00111110001000110111101110000001", 
    20 => "10111100101001110001010010111001", 
    21 => "10111101110111000110100011001110", 
    22 => "10111110010000101111000000000000", 
    23 => "00111110010110100010001001110110", 
    24 => "10111110100000000101010011101000", 
    25 => "00111110010100110100010111011001", 
    26 => "00111110011011011001101000110100", 
    27 => "10111110011101011101001011001011", 
    28 => "00111011000101101100000001010101", 
    29 => "10111110000110110101011010100101", 
    30 => "10111110100001000000110100010111", 
    31 => "00111101111101100011010001110011", 
    32 => "10111110010011100111001100110000", 
    33 => "00111100001001101100101110101000", 
    34 => "00111100001111110100111100001011", 
    35 => "10111101100101110101001000100101", 
    36 => "00111110000101001111000100010001", 
    37 => "10111110001100101010111001010101", 
    38 => "10111110101100011010001111001110", 
    39 => "00111101001100000011011100111000", 
    40 => "10111110010111111010111001010100", 
    41 => "10111110001000001110000101111100", 
    42 => "00111110010001010110101001110010", 
    43 => "00111110100000001010100100000111", 
    44 => "00111110000010111000111100110011", 
    45 => "10111110010001011110001010001010", 
    46 => "10111101101110001010100000101000", 
    47 => "10111101110100010001001101111111", 
    48 => "00111101010110111000001100101011", 
    49 => "10111110000010101110011010001111", 
    50 => "10111110000010000111000111011000", 
    51 => "10111110000101010100100000100111", 
    52 => "10111110000110010101011001011100", 
    53 => "10111011100001010100110110000001", 
    54 => "10111101111011010111111110111001", 
    55 => "10111110010011110000111100010110", 
    56 => "00111101000100010010011001010000", 
    57 => "00111110000111101111101100101000", 
    58 => "10111101101000100011100010010111", 
    59 => "10111110010110010111110111000001", 
    60 => "10111110000010101001000001100010", 
    61 => "00111101100111010111100010110000", 
    62 => "00111110010011001010000010001000", 
    63 => "00111101110011011101010000000001", 
    64 => "10111101110100000110101001101110", 
    65 => "00111101100001000100011010011110", 
    66 => "10111101100000101011110111111110", 
    67 => "00111101011110011101100010110001", 
    68 => "10111110001001100011101110000000", 
    69 => "10111110010101101000000100110101", 
    70 => "10111110011101000110000010001100", 
    71 => "00111101011010111111011100110111", 
    72 => "10111110001011110011101001101110", 
    73 => "10111101100110100010100000010001", 
    74 => "10111110111000001011100001000111", 
    75 => "10111110010100111000110111101000", 
    76 => "10111110100000000011000010101001", 
    77 => "00111101101010111110111000101110", 
    78 => "10111101010000001110101110001001", 
    79 => "10111110000111011001111101110011", 
    80 => "00111101100011100110101011011011", 
    81 => "10111101100101101110010011111000", 
    82 => "00111110011000111000100001011000", 
    83 => "00111110001110011000100011011111", 
    84 => "10111110001100100000100001101011", 
    85 => "10111110000110000000011011100101", 
    86 => "00111010000111000010111010100101", 
    87 => "00111101000111101111011001111000", 
    88 => "10111101010111100100100111101111", 
    89 => "10111110101010010100001110100000", 
    90 => "10111101000100000000010000010000", 
    91 => "10111101101000110111110101000011", 
    92 => "00111101110110011100111011011101", 
    93 => "10111110010110011001111000111110", 
    94 => "10111110011001111101000010100010", 
    95 => "00111110000101111111100011001010", 
    96 => "10111110100001000010010101100010", 
    97 => "00111110001111011010011101110100", 
    98 => "10111110011001011000100100000011", 
    99 => "10111100101101011000111110000010", 
    100 => "10111110000111010111100000011110", 
    101 => "00111101001100001111010111000001", 
    102 => "10111110000100001111011010111111", 
    103 => "10111110000011101010110001010101", 
    104 => "10111101111000011101000011110110", 
    105 => "10111110000100011111101011000100", 
    106 => "00111101101011001101110010010111", 
    107 => "00111101101111100100111100101101", 
    108 => "10111100110000110101100001010010", 
    109 => "10111111000001111110001001000000", 
    110 => "10111101111110000101111101010110", 
    111 => "10111110100100011110011101000011", 
    112 => "00111101010111110011010010100000", 
    113 => "00111011010101010011010111010110", 
    114 => "10111110000010010001101011111011", 
    115 => "10111111000101111001111110011100", 
    116 => "00111100111011101110110010011000", 
    117 => "10111100010111100001010000100110", 
    118 => "10111101111100011011011011010011", 
    119 => "00111110001100110101101001010001", 
    120 => "00111110011000000101000101010110", 
    121 => "00111101001001001110000010000111", 
    122 => "10111110010111110001111111000010", 
    123 => "00111101111000111101110110111010", 
    124 => "10111110101011100010001110110100", 
    125 => "00111011111100011001100001111110", 
    126 => "10111101111011001011011001110101", 
    127 => "10111011000101100101001011001000", 
    128 => "10111110100011110100011101101010", 
    129 => "00111110100010000111111001001101", 
    130 => "10111110000011010001011100100100", 
    131 => "00111101100101010101111100110010", 
    132 => "10111101011111100100011100111100", 
    133 => "10111110111100001000010111011101", 
    134 => "10111110011001111110001011111001", 
    135 => "10111100110010111101101000110010", 
    136 => "10111110100010101010001010001000", 
    137 => "10111110100000110000011010001011", 
    138 => "10111101111100100011010011111000", 
    139 => "10111110101011111110101100100001", 
    140 => "10111110001111000011001101010111", 
    141 => "00111101100011111101111000110111", 
    142 => "10111101000111110011111010110110", 
    143 => "10111110001011110101011001001101", 
    144 => "10111100110110000101100110110100", 
    145 => "10111110000100111000111111101101", 
    146 => "00111101111111000001011110100100", 
    147 => "00111011011011000100000101010001", 
    148 => "00111110000010111010110011011001", 
    149 => "00111101011011101110000101001001", 
    150 => "00111110001110110110001010101110", 
    151 => "00111101100101110010000011001100", 
    152 => "10111110100000011010100111011110", 
    153 => "10111110000011011100100001111011", 
    154 => "10111110000011100011100101111111", 
    155 => "00111101110111111000010000001111", 
    156 => "10111100110011010000011001101100", 
    157 => "10111110101100111000000111110000", 
    158 => "00111101001011101000101000110011", 
    159 => "00111110001101001101101101100111", 
    160 => "10111101000110101110001011000110", 
    161 => "10111100101000011001101010011011", 
    162 => "10111110001000010100100100110110", 
    163 => "00111101010111011011111010000100", 
    164 => "00111011101100110011110101010000", 
    165 => "10111110010110000101111101010010", 
    166 => "00111101100111111000010010110011", 
    167 => "00111101101000010000111011010000", 
    168 => "00111101100011110001001111100001", 
    169 => "10111101110111101011000000001011", 
    170 => "10111101101111000011011000011001", 
    171 => "00111110100001011110110101001000", 
    172 => "00111101111011100110000000111011", 
    173 => "00111110100000101111100101001110", 
    174 => "00111101000111110011001100101110", 
    175 => "10111101110010001100001101101001", 
    176 => "00111110110010110001001001010110", 
    177 => "00111110010100100001000010010011", 
    178 => "10111110101000010100100011111001", 
    179 => "10111110101111100010111100010000", 
    180 => "00111110010010101100101001110111", 
    181 => "10111101001110110101100110010110", 
    182 => "10111110011000011001111110110110", 
    183 => "00111101111000000100100011110010", 
    184 => "00111110000100001110110010001101", 
    185 => "10111110100001111111000000010000", 
    186 => "10111110100000011011011011011010", 
    187 => "10111110100011001101100101100101", 
    188 => "10111110000010111101101011010100", 
    189 => "10111110011100010010111000110001", 
    190 => "00111110000110010011010001100100", 
    191 => "00111101100001001010111111010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiGfk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiGfk is
    component conv_2_conv_2_weiGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiGfk_rom_U :  component conv_2_conv_2_weiGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


