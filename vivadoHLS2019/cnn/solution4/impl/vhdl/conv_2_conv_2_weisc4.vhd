-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weisc4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weisc4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011001110110001010000101", 
    1 => "00111101001100011110101111011110", 
    2 => "10111101001000111100111010000111", 
    3 => "10111110000000111000001110000101", 
    4 => "10111101010011000010100110010101", 
    5 => "10111101101000010011000010100100", 
    6 => "00111101101011110111011110001111", 
    7 => "00111100110101100000110110110011", 
    8 => "10111110110011011100000000101011", 
    9 => "10111100111010001110010010100001", 
    10 => "10111110001011111001101111110100", 
    11 => "00111110011001010010101111001001", 
    12 => "00111110001100011101010010000101", 
    13 => "00111101110011000101011111001110", 
    14 => "10111110000101001100000000110000", 
    15 => "10111110111000011000100000011100", 
    16 => "00111100000011011000110100001010", 
    17 => "10111101111011010001100001001100", 
    18 => "00111101100001010000101110001111", 
    19 => "10111100000101010101011100110010", 
    20 => "00111101111100001010110110000101", 
    21 => "10111100000011111000100010001110", 
    22 => "10111101010001110000101100001111", 
    23 => "00111101110011110110111101011001", 
    24 => "10111101111001011100001110101001", 
    25 => "10111110110010100001101000000010", 
    26 => "10111110100010011011100001000101", 
    27 => "00111101111011000111000000010000", 
    28 => "00111101110000100011001101101111", 
    29 => "10111110100001001000011011110111", 
    30 => "00111110100000001100001101011001", 
    31 => "10111101110100010000010010011010", 
    32 => "00111101011000001010101110110000", 
    33 => "00111110010101011100011000101010", 
    34 => "10111101000101101001010010011101", 
    35 => "00111110010001001111010010011001", 
    36 => "10111101110010100110001110100111", 
    37 => "10111100110110011000001011100100", 
    38 => "00111101110101111111011001000110", 
    39 => "10111110111010001000101111110011", 
    40 => "10111101101001100010010000100100", 
    41 => "10111110111100110101000011001110", 
    42 => "00111110000001101110001010001011", 
    43 => "10111100100000110111100000010111", 
    44 => "10111100100011110011000000011100", 
    45 => "10111101001010010111101001000100", 
    46 => "00111101000100111111010001111000", 
    47 => "10111101000110100011001111111011", 
    48 => "00111110000001101001100110000011", 
    49 => "10111101101010001110011100001011", 
    50 => "00111100001000100111000011111101", 
    51 => "10111100010011110011011101000010", 
    52 => "00111101001111010100110101100001", 
    53 => "00111100010100110010110110011101", 
    54 => "10111100110010000101110000001011", 
    55 => "00111110001100100001001011011110", 
    56 => "00111110000011001110110000010100", 
    57 => "10111101101010111101100001111000", 
    58 => "00111011010100100010101110110110", 
    59 => "00111110001001100111001010111011", 
    60 => "10111101000111110101001010101101", 
    61 => "10111110011011101110110011010000", 
    62 => "10111110010000010000100111101110", 
    63 => "10111110101011100100011110001010", 
    64 => "10111110000111011001111110000101", 
    65 => "10111101011010110010001111010100", 
    66 => "10111110011101101010000100111011", 
    67 => "00111101101000010101101011100001", 
    68 => "10111101111100101100001111110000", 
    69 => "00111110000011000100101110000101", 
    70 => "00111110000111110001100101111110", 
    71 => "10111100011010000010100011101001", 
    72 => "10111110111111110100011001000011", 
    73 => "00111101101010011100111110011100", 
    74 => "00111101010010100000110001010110", 
    75 => "00111101011011110001110110101110", 
    76 => "00111101001100011110000000011101", 
    77 => "10111101001100000110100010000001", 
    78 => "10111110111000000000110010011000", 
    79 => "10111110111011101001011010000110", 
    80 => "10111110100110110011001000000100", 
    81 => "00111101000100110000010001011100", 
    82 => "10111110011101000010001100100101", 
    83 => "00111011011111011101000100000110", 
    84 => "00111110000101110001111111011001", 
    85 => "00111101100000101100111100110101", 
    86 => "10111101111111101010001110100010", 
    87 => "00111101110111111011100000110010", 
    88 => "10111101101000100011001000011000", 
    89 => "10111101101110111011100000011010", 
    90 => "00111101110101100111101011111111", 
    91 => "10111101010111011100100100110011", 
    92 => "10111110111000001011011000110000", 
    93 => "10111110011010100010110110111000", 
    94 => "00111101110010101010101001010011", 
    95 => "00111100110010111110111111000100", 
    96 => "00111101100011111001111010100111", 
    97 => "10111101101000001011100110101100", 
    98 => "00111110001010011111000000100100", 
    99 => "00111110010001100111100001111011", 
    100 => "10111101001011010100011000001010", 
    101 => "00111110000100011100010010101101", 
    102 => "10111100100101001011000110010010", 
    103 => "10111110011110100100100111110101", 
    104 => "10111100101010001100011110111011", 
    105 => "00111101100010001000000001110011", 
    106 => "10111110010000000111010010000100", 
    107 => "10111100001011011100101001100000", 
    108 => "00111101100000000110100001001100", 
    109 => "00111110000010110001110101010010", 
    110 => "00111101000000111011001101100011", 
    111 => "10111110000100001000110011110011", 
    112 => "00111100110010100000100011010000", 
    113 => "10111110000111011000011100000110", 
    114 => "00111101011010111110011100011101", 
    115 => "00111101000001110110100000001110", 
    116 => "10111101101000001100110010001111", 
    117 => "00111110011000100110001000111110", 
    118 => "10111110010011110011001111110011", 
    119 => "00111100110100100100101011110110", 
    120 => "10111101101010111111001111111000", 
    121 => "00111100111111101100100110000110", 
    122 => "10111101011011011001100101000000", 
    123 => "00111101000101111001011011001110", 
    124 => "10111101110110110010101011101010", 
    125 => "10111110010101011100101110011011", 
    126 => "10111101110111000111001000010000", 
    127 => "10111101001010110100101011000000", 
    128 => "10111101100101111100000100100101", 
    129 => "10111110100111111101100110110011", 
    130 => "10111110011010000011000000110100", 
    131 => "10111101111101000011000111000100", 
    132 => "10111110010000100011111101001011", 
    133 => "00111110001100101100000111000100", 
    134 => "00111110010011001001011000101100", 
    135 => "10111110001110111000101001000101", 
    136 => "10111101000010000101010010101111", 
    137 => "00111100000100011100000111000001", 
    138 => "00111100100101110010101100101010", 
    139 => "10111101001110110111101100110111", 
    140 => "00111101111111011000111010000111", 
    141 => "10111110100011000011111010110000", 
    142 => "10111101101111110011111010001110", 
    143 => "10111110001101101100000110011011", 
    144 => "10111110010101110111110101100101", 
    145 => "00111101000010100101001110100100", 
    146 => "10111110000001101111010000011110", 
    147 => "10111100100100100010101111011000", 
    148 => "10111110001010011110111110101111", 
    149 => "00111101111100110011000001000000", 
    150 => "10111110101001011001001011010101", 
    151 => "00111110000101100001111100110000", 
    152 => "00111110000011011000000111000110", 
    153 => "10111011100101001000011101110101", 
    154 => "00111110000010011000000101111101", 
    155 => "10111110100100010001000100110010", 
    156 => "10111110010100010101100111111000", 
    157 => "10111110011110111101010001001011", 
    158 => "10111110000100011010001111101000", 
    159 => "00111101000010010010100110110101", 
    160 => "00111110010000011001011010000110", 
    161 => "10111101110110101100100001011101", 
    162 => "00111101111111000011100110001000", 
    163 => "10111101100000011000001001111010", 
    164 => "10111110000101101010000100000100", 
    165 => "10111011111110100000001011100100", 
    166 => "10111110000001111001110001100100", 
    167 => "00111101110110010101110001110001", 
    168 => "10111101011001000010011011000000", 
    169 => "00111110010100010011110111110111", 
    170 => "00111101100011110001010000110110", 
    171 => "00111110001100111110000010100111", 
    172 => "10111110001001010011010011110100", 
    173 => "00111110000100001011010111101000", 
    174 => "10111101100101110111011111111011", 
    175 => "10111101010101010111101110101000", 
    176 => "10111101100001001111000110001100", 
    177 => "10111110011101101001010111000010", 
    178 => "10111101000110000010011000110001", 
    179 => "00111110011110110110000111000111", 
    180 => "00111100001111000000001001101010", 
    181 => "10111010101001100110000001011010", 
    182 => "10111110100001011101000011100111", 
    183 => "10111110000001010110001010100000", 
    184 => "10111100101111010110111001010111", 
    185 => "10111101100101010011110100010001", 
    186 => "10111101011001001101000101110100", 
    187 => "00111100111010110111010000000110", 
    188 => "10111110001011001110001001100010", 
    189 => "10111100100100100101110100011011", 
    190 => "10111100011000110010110101000111", 
    191 => "00111101111001110100010100010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weisc4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weisc4 is
    component conv_2_conv_2_weisc4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weisc4_rom_U :  component conv_2_conv_2_weisc4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


