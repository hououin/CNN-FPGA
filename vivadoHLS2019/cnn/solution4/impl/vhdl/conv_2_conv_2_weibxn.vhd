-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibxn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibxn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000100010000010110111101", 
    1 => "10111110000010111111101110101100", 
    2 => "10111110000011010011110101111101", 
    3 => "10111101100101110100100011110001", 
    4 => "00111101101100000101000101111011", 
    5 => "10111101010000001010001111101111", 
    6 => "00111101110001001110101111101000", 
    7 => "00111101000011100110111111100111", 
    8 => "00111101101001100011011110101001", 
    9 => "10111101110010101001100001011111", 
    10 => "10111101011000100000110001100001", 
    11 => "00111101010000001001000000001011", 
    12 => "10111100110110101010111101101011", 
    13 => "00111011100110100010110011101011", 
    14 => "00111101101000001100001010100001", 
    15 => "00111101100001001000011010000100", 
    16 => "00111101100101101100111100101101", 
    17 => "10111011101100000010101110100000", 
    18 => "10111100000101110000000010101101", 
    19 => "10111101101110101010001010000011", 
    20 => "10111110001011000011010111111010", 
    21 => "00111100111101001100110010010110", 
    22 => "10111101101100110001101100110100", 
    23 => "00111101010110111101101010101010", 
    24 => "10111010100001111001000111111100", 
    25 => "00111101101000000110100011011101", 
    26 => "10111100001110100000011100110001", 
    27 => "10111110101011101010100101110111", 
    28 => "00111100100100100110001000000010", 
    29 => "10111101010011111101010101101011", 
    30 => "00111011101101100101100000001110", 
    31 => "10111110101111011001110010110001", 
    32 => "00111011010010110011100000001100", 
    33 => "10111101111111111110010100111000", 
    34 => "10111101101101101100001111100011", 
    35 => "10111101111000100011000111000011", 
    36 => "10111110001001001000000111111110", 
    37 => "10111101111010011010000111100001", 
    38 => "00111101000101100001001001110100", 
    39 => "00111101110101011000001011001100", 
    40 => "10111110010010010111100101100101", 
    41 => "10111101000101010000111110010011", 
    42 => "00111101111000010011111001111111", 
    43 => "10111011101001110011010001010001", 
    44 => "00111101100101111100100001111101", 
    45 => "00111101001101010010101101100101", 
    46 => "00111101100111000101101001101001", 
    47 => "10111101101110101111110000110001", 
    48 => "10111100101001110111110000010101", 
    49 => "10111110011011010000000001110000", 
    50 => "10111101000011011001011000110000", 
    51 => "10111100111110001110101000000001", 
    52 => "10111110010010011011110100111100", 
    53 => "10111101100110010100001101001011", 
    54 => "10111110000111110010001100100001", 
    55 => "10111101010010010000011100101110", 
    56 => "10111101110000000110011001101011", 
    57 => "00111101011110011011001010100110", 
    58 => "10111100111111010101101011011100", 
    59 => "00111101101110000110100000111101", 
    60 => "00111101001011001101000101100001", 
    61 => "10111101101010001111001001100100", 
    62 => "10111101011011000011101010000000", 
    63 => "00111101011011010110011110000100", 
    64 => "00111110000100011110000000110011", 
    65 => "10111101101001110011101111010101", 
    66 => "10111110010111011000000111101000", 
    67 => "00111101110010101101110011100110", 
    68 => "00111100110110001010001100000000", 
    69 => "00111101000011101100010100011011", 
    70 => "00111101000011010001011100101001", 
    71 => "10111101100101010000110111001110", 
    72 => "10111100110111100100111100101110", 
    73 => "00111011011001000010010010110010", 
    74 => "10111110000110111000100000100101", 
    75 => "10111101101110101110000111101110", 
    76 => "00111101101101101010110000111011", 
    77 => "00111101110010100001000010000100", 
    78 => "00111100111000001110101010001011", 
    79 => "10111100011011010001000111001111", 
    80 => "10111100101011000101001111000010", 
    81 => "00111101010110110010101111011111", 
    82 => "10111101001100110001000100001100", 
    83 => "00111011110110011011010000000011", 
    84 => "10111110000011101000101010001110", 
    85 => "00111110000001100001101110010010", 
    86 => "10111100100101001011101011101100", 
    87 => "10111100101001010000101110010100", 
    88 => "00111101101101010111100110011010", 
    89 => "10111100111101101101010110110110", 
    90 => "00111101100100000011001000000101", 
    91 => "00111101011100010101010111010000", 
    92 => "00111100001101100100101011111001", 
    93 => "10111110001100001000011011001000", 
    94 => "00111101110111001011111100110101", 
    95 => "00111101101110011101011110111011", 
    96 => "00111101110001011011010011001000", 
    97 => "10111110000100011101100000001010", 
    98 => "00111101000110000100001011111001", 
    99 => "10111101101001111011011101101001", 
    100 => "10111110001000010101110110110110", 
    101 => "10111110001110111100101100100010", 
    102 => "00111101101001101010100010111011", 
    103 => "10111101100100011100011011001111", 
    104 => "10111101010110010111100010011000", 
    105 => "10111101011010011001110111011000", 
    106 => "00111110000110000010000010010010", 
    107 => "10111100011110000111101100011110", 
    108 => "00111101000100010100001000011101", 
    109 => "10111101101001111101011111010001", 
    110 => "10111101010000010100110011011100", 
    111 => "10111011100001110000100001111010", 
    112 => "00111100110011010001110101111011", 
    113 => "10111110000010100111101001101010", 
    114 => "00111100011010101100100000100000", 
    115 => "10111101100100010100011101100001", 
    116 => "00111101011010000100111100111001", 
    117 => "00111101101011001110110010110001", 
    118 => "00111011101000100100111000101001", 
    119 => "10111110010101011010101101110010", 
    120 => "00111101110010101101110101001111", 
    121 => "00111101001010011101000011011110", 
    122 => "00111101110001100110111001010101", 
    123 => "00111010110011010011010010100111", 
    124 => "10111100100011110111100110101100", 
    125 => "10111101101111110101101111000111", 
    126 => "00111101101111000011100001100110", 
    127 => "10111011101011010001001110000110", 
    128 => "10111100111110111000101110010001", 
    129 => "10111101111110001110101000011101", 
    130 => "10111101001001101000101011101101", 
    131 => "00111101100010101101000101001011", 
    132 => "00111110000001011110010010110011", 
    133 => "10111110100100011001101011010000", 
    134 => "00111110001010000100100000001001", 
    135 => "00111100111100101111110011000101", 
    136 => "10111100101010101100011010000111", 
    137 => "10111110001111100101000011000001", 
    138 => "10111100000000111001010000010011", 
    139 => "10111110001010111000101001001101", 
    140 => "00111100111110111111001010001010", 
    141 => "10111100111011101010001010011101", 
    142 => "10111100010100011110001010011011", 
    143 => "10111101010111011010101011111001", 
    144 => "00111100100100011111100000111011", 
    145 => "10111101100100010011110000111101", 
    146 => "10111101001000101110111110111011", 
    147 => "10111101001101011010001000111111", 
    148 => "00111110011000111110010100011010", 
    149 => "00111100100010000011101110001000", 
    150 => "00111101100011100110000001001101", 
    151 => "00111101011100011010010001001111", 
    152 => "00111110000001101100000110111101", 
    153 => "10111101001101001110001110011011", 
    154 => "10111101110001110100101110101000", 
    155 => "10111010111000110111011000010101", 
    156 => "10111101100000000000111001001110", 
    157 => "10111100011111010110001100111111", 
    158 => "10111110001111010011010100001010", 
    159 => "10111101000011010110111000011000", 
    160 => "10111110001001101001111110011101", 
    161 => "00111101110010111011011110111000", 
    162 => "10111110001111011110000110011100", 
    163 => "10111110010110110100001101101000", 
    164 => "00111100100010110011011011011011", 
    165 => "00111011101000111010110100100001", 
    166 => "00111101110000100000100110101110", 
    167 => "00111100111101101111100110001101", 
    168 => "00111110000011111110101011100011", 
    169 => "00111100101001001110111101011001", 
    170 => "00111100100010100111000110000000", 
    171 => "00111100010000110000011011000011", 
    172 => "00111100011110011100010000100110", 
    173 => "10111101100101110011001100001001", 
    174 => "00111110001010111101010001001110", 
    175 => "00111101101000110000101100011110", 
    176 => "00111101000011010111000000001001", 
    177 => "00111101101010101010011111111101", 
    178 => "10111101000010001110110000101110", 
    179 => "10111110000001010111101100111110", 
    180 => "00111100100111111110110101010100", 
    181 => "10111010101000101010010111011011", 
    182 => "00111101000000011100010101101100", 
    183 => "10111110010010110100111001010000", 
    184 => "10111101100111100000111101110010", 
    185 => "10111101101010110001001000001011", 
    186 => "00111101111101101101010010111001", 
    187 => "10111101110100101110000110110110", 
    188 => "10111101110000000011100101001000", 
    189 => "10111110000111110010101011011000", 
    190 => "00111101010011110011011010010000", 
    191 => "00111101101000101100011100011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibxn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibxn is
    component conv_2_conv_2_weibxn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibxn_rom_U :  component conv_2_conv_2_weibxn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


