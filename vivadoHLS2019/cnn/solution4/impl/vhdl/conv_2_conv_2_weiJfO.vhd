-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiJfO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiJfO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001010000111100111100", 
    1 => "00111110011100101110101001000101", 
    2 => "00111101111111000111010110010101", 
    3 => "10111110001001101010011011100001", 
    4 => "10111110000110001100111011010110", 
    5 => "10111101001000100000011011101111", 
    6 => "00111101100001010101101011001001", 
    7 => "00111101000011010010110100111100", 
    8 => "10111101110100110110100101010010", 
    9 => "00111101001011010110111111000001", 
    10 => "10111110010001110000111010001100", 
    11 => "00111110010011110001010110010111", 
    12 => "00111110001111111010011010000111", 
    13 => "10111100000001110010001001011100", 
    14 => "00111100110110101110100111010001", 
    15 => "10111110010111110000101111010100", 
    16 => "00111110010010110111000111110011", 
    17 => "10111101111110001111011101010100", 
    18 => "00111100110111011001000000011000", 
    19 => "10111110001010000101001100011101", 
    20 => "00111110001011100011001110110110", 
    21 => "10111110001111110010011110001011", 
    22 => "10111101101001110101110100111000", 
    23 => "10111100110010011010000101111101", 
    24 => "00111101011000001110110100000100", 
    25 => "10111110101010011001000100100000", 
    26 => "10111110100111101000001100011001", 
    27 => "00111110001101101100101101011000", 
    28 => "00111100110100000010111110100000", 
    29 => "10111100110011100111001000111011", 
    30 => "00111110010000111100001010101110", 
    31 => "10111110010111011110110011111000", 
    32 => "00111100100011001110010001010001", 
    33 => "00111110001000011110001101001111", 
    34 => "00111101111100110110010011000001", 
    35 => "00111110001010010110000000101111", 
    36 => "10111101111111000101010010010001", 
    37 => "00111100010110011101010101101001", 
    38 => "00111110001110001101111110000101", 
    39 => "10111110001010100001100011001010", 
    40 => "00111101010111110110001001110001", 
    41 => "10111110010101011001111101110000", 
    42 => "00111110000100101110010111100010", 
    43 => "10111110001010101101110011100101", 
    44 => "00111101001000100000110000111101", 
    45 => "10111010110001100110100011001001", 
    46 => "00111110001010001001101110001101", 
    47 => "10111100100001010100100100111011", 
    48 => "00111110100100110110000100010010", 
    49 => "10111110101100100011110100111100", 
    50 => "00111100011001110010010000111011", 
    51 => "10111011110010000011000110111100", 
    52 => "10111101110011011101000111111000", 
    53 => "10111101011100000100011000101011", 
    54 => "10111011101101111101011001001000", 
    55 => "00111101010110110111010101011001", 
    56 => "00111101011000010100011000001110", 
    57 => "00111101101110001011100011000110", 
    58 => "10111101110100110100011111100111", 
    59 => "00111110010101001000110001010001", 
    60 => "00111100010111010101101111011101", 
    61 => "10111110100101010000110001111001", 
    62 => "10111101100001101010011001011111", 
    63 => "10111110011100001101011000100000", 
    64 => "10111101111101001100110011000010", 
    65 => "10111101010111000011011001101111", 
    66 => "10111101011000111100011100110110", 
    67 => "10111100011010011110100011111101", 
    68 => "10111101101001110000101101001111", 
    69 => "00111101011001011000000011000111", 
    70 => "00111101110000111011100101100011", 
    71 => "00111101111000011011010011100111", 
    72 => "10111110000101111011011001100010", 
    73 => "00111101110111101000011000100111", 
    74 => "00111101111101001111010110100001", 
    75 => "00111100111010101010101100010000", 
    76 => "00111110000111000001111011000100", 
    77 => "10111110010111110001101110111000", 
    78 => "10111110001111111111101010111001", 
    79 => "10111110001001110010101011100111", 
    80 => "10111110001110000001111100101011", 
    81 => "00111101111101101001101110010111", 
    82 => "10111110100000101101111111001101", 
    83 => "00111101001111110100001000100110", 
    84 => "00111101011101010100011011001011", 
    85 => "10111110001001001101000111100011", 
    86 => "10111110100010110000011011000001", 
    87 => "00111110001100010000001110010010", 
    88 => "00111101000001100010101100111111", 
    89 => "00111101000111011111100011001011", 
    90 => "00111101100011000110011010101110", 
    91 => "10111101100011111010111110011101", 
    92 => "10111110100100100101010110011111", 
    93 => "10111101100100001100110010001111", 
    94 => "10111110000110100000100000111010", 
    95 => "00111101100111011110100100110000", 
    96 => "10111011101111000010100100000011", 
    97 => "10111110011010100100110011011011", 
    98 => "00111110000111010000000000100000", 
    99 => "00111110001101011010110101011111", 
    100 => "00111101110000101010000010100001", 
    101 => "00111110001000010001110010101111", 
    102 => "00111100100110000011110000001010", 
    103 => "10111101111000010110110100100101", 
    104 => "00111100010001011011101011100011", 
    105 => "00111101100001001100001101000001", 
    106 => "10111011001101110101110001101011", 
    107 => "00111101000001010111010100111000", 
    108 => "10111100001010111000110111000010", 
    109 => "00111101110100100010100101001000", 
    110 => "00111101110111010000111001000001", 
    111 => "10111100100100011110110000100101", 
    112 => "00111110000101111011111101101000", 
    113 => "10111110101010010111100110001101", 
    114 => "10111100110111101100101101101000", 
    115 => "00111101100000101110001000010010", 
    116 => "10111110101010111001111110100111", 
    117 => "00111101100101100111011000000000", 
    118 => "10111110001011110110101001010100", 
    119 => "10111110010010010100110001000011", 
    120 => "10111101111011110010000011010010", 
    121 => "00111100110001111111110110110001", 
    122 => "10111110000001010100001101110100", 
    123 => "10111101110010110111000101111110", 
    124 => "00111101011101110011010101000110", 
    125 => "10111110100000101101001111100100", 
    126 => "10111011111000011000111100010110", 
    127 => "00111101101010100011001001010001", 
    128 => "00111101101110001010111101001100", 
    129 => "10111110101110000100001111110000", 
    130 => "10111101010111110010001100011000", 
    131 => "10111101101000010010110111101110", 
    132 => "00111101110101101000000001011011", 
    133 => "00111110011010000111000100010000", 
    134 => "00111101011000110111001110010101", 
    135 => "00111101110111001110111101110101", 
    136 => "10111011011111000001111011111111", 
    137 => "00111110000000101000110110011100", 
    138 => "10111101000001100000100010101110", 
    139 => "10111101101011010110100100000111", 
    140 => "00111110000000101110110000011010", 
    141 => "10111110101101111011001101110011", 
    142 => "10111101000011000001000100101001", 
    143 => "00111101111110101011010111001101", 
    144 => "10111101100001011010100011011111", 
    145 => "00111110001000010011010111111001", 
    146 => "10111110000101101100111110110000", 
    147 => "00111101010000101000000001111010", 
    148 => "10111111000100110010111000001101", 
    149 => "10111101110000101111111010101100", 
    150 => "10111110001110001101011101111111", 
    151 => "10111011111011101100000110110110", 
    152 => "00111101000011110111011010111100", 
    153 => "00111110000011000011001101001110", 
    154 => "00111110000100101101110110001000", 
    155 => "10111110001010000100101100101010", 
    156 => "10111101010001100110001000100110", 
    157 => "10111110000111000010101000110011", 
    158 => "10111110010000000000011011000010", 
    159 => "00111110001100110000011010101000", 
    160 => "10111101100110101101100110100010", 
    161 => "10111100100111111010110011000010", 
    162 => "00111101001100001100011110010010", 
    163 => "10111110000000101100101110101111", 
    164 => "00111100101011010111010101001111", 
    165 => "10111100011011101001001011100101", 
    166 => "10111101110011010101011001100100", 
    167 => "00111110001001001000000111001100", 
    168 => "10111110000101110111000101111111", 
    169 => "00111101111000010101011001010011", 
    170 => "00111110001111010100000111011100", 
    171 => "00111101111110010110010000010111", 
    172 => "10111110010111110101111010110110", 
    173 => "10111110000001011110010100110010", 
    174 => "00111011110000110011101001110001", 
    175 => "00111100010111111101011000001000", 
    176 => "10111110001101001010101100110011", 
    177 => "10111110010010101100101011000011", 
    178 => "00111110000110010110011101000100", 
    179 => "00111110010110001001000100011010", 
    180 => "10111100001011111100010010110000", 
    181 => "10111101110111111100110011110101", 
    182 => "10111110100000001000010011011011", 
    183 => "00111011111100111010011000011001", 
    184 => "00111101010010011100111010010110", 
    185 => "10111011101100100101011011100110", 
    186 => "10111110001100011101010011010111", 
    187 => "00111110000010000000001000010000", 
    188 => "10111101010100100001010101110011", 
    189 => "00111110010101101011011001000010", 
    190 => "00111110000001010011001100011001", 
    191 => "00111110001011111010100100111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiJfO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiJfO is
    component conv_2_conv_2_weiJfO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiJfO_rom_U :  component conv_2_conv_2_weiJfO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


