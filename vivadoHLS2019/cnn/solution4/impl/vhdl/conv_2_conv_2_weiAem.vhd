-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiAem_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiAem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000011010101111100011", 
    1 => "00111101111100000111001011111010", 
    2 => "10111101100000101111100011011010", 
    3 => "00111101101110101110110011000000", 
    4 => "10111100001000110100001110011010", 
    5 => "10111110001100110000001001110011", 
    6 => "10111101010001011000110110101100", 
    7 => "10111101000001100111110100110011", 
    8 => "10111110111010100110110101001111", 
    9 => "10111110100001111010001010001001", 
    10 => "10111110001101100101001001000001", 
    11 => "10111101101000000001101100101011", 
    12 => "10111101011111111000111001110001", 
    13 => "00111110001110101011110011110101", 
    14 => "10111101110011000111110011010011", 
    15 => "10111110010101111000110010110110", 
    16 => "10111110011001010100011110001010", 
    17 => "00111100100011010011001110010011", 
    18 => "00111101000100101000001011101100", 
    19 => "00111110000010100011011100010100", 
    20 => "10111101000001010011001110000000", 
    21 => "00111100101101101111000101001001", 
    22 => "10111110000010110100001001011101", 
    23 => "10111110000001001010111011001000", 
    24 => "10111101110111111010100100100001", 
    25 => "10111110100111011000011000001100", 
    26 => "10111110000010000001101110001101", 
    27 => "00111100110100101100000111101100", 
    28 => "10111010110101101110111101101110", 
    29 => "10111101110101110011110101100110", 
    30 => "00111101101001010011001011101000", 
    31 => "00111101101100011110100100100101", 
    32 => "10111110000110001011001100110111", 
    33 => "10111101100100011101111110110100", 
    34 => "10111110001000110110110110101001", 
    35 => "00111110010000000110100001011010", 
    36 => "10111101110000011110001111011110", 
    37 => "10111101111110011000110000010100", 
    38 => "10111101111110101010001011010110", 
    39 => "10111110100110011011010010011110", 
    40 => "00111101010011010110010000001001", 
    41 => "10111110100111011011011011001110", 
    42 => "00111101101101010111001110110100", 
    43 => "00111101110110111101100000000110", 
    44 => "00111101010110001100000011011010", 
    45 => "10111101000000010010010110000010", 
    46 => "10111101101111101011000111001101", 
    47 => "10111101001001111001100111010000", 
    48 => "10111110001101111011010111101110", 
    49 => "10111110001111001101111101111100", 
    50 => "10111110000110000000010011000010", 
    51 => "10111101110100100000001011110000", 
    52 => "00111101011011010010100001011111", 
    53 => "10111100000100000111111101100001", 
    54 => "10111101100001111110111101010110", 
    55 => "00111101100010000110100111100111", 
    56 => "00111100111111100101011001100011", 
    57 => "10111101001010011110001001110100", 
    58 => "00111101100011100000111110001011", 
    59 => "10111101101001110001011000110011", 
    60 => "00111100101011100110101000011100", 
    61 => "10111101000111101000011000010110", 
    62 => "10111110010000100110110010001111", 
    63 => "10111110000110100111000101110110", 
    64 => "10111110010110001011101011011111", 
    65 => "10111101110110110010110101100111", 
    66 => "10111110000001111010001100111001", 
    67 => "10111110001001101101100001100110", 
    68 => "00111101111001110011101100001011", 
    69 => "00111101001111011011000010011011", 
    70 => "10111110001110011111000000111000", 
    71 => "10111110001110010001001010110011", 
    72 => "10111110101001110100100100111111", 
    73 => "00111110000010010001111010110110", 
    74 => "00111101101101101001111010101001", 
    75 => "10111101000110010101001010100100", 
    76 => "10111110000111100011110000111001", 
    77 => "10111101011111101010001101011010", 
    78 => "10111110100011010100101111000100", 
    79 => "10111110101000110100110111111010", 
    80 => "10111101101110011101101010011111", 
    81 => "10111101110101001101000001110110", 
    82 => "10111110111001010010110000110101", 
    83 => "10111101001000100111010100110101", 
    84 => "10111101111111101101100001001010", 
    85 => "00111101001110000010100001000101", 
    86 => "10111100111010011110100011101000", 
    87 => "00111101001110111110001110110011", 
    88 => "10111101111011010001001111110100", 
    89 => "10111110110110001111101110010011", 
    90 => "00111110010001110111011010110111", 
    91 => "00111100011011001000010001001000", 
    92 => "10111110001111010011001110001011", 
    93 => "00111101101001110001111001000001", 
    94 => "10111110000111011101000011111101", 
    95 => "00111101011010100011100101101000", 
    96 => "10111101011111111010000011011101", 
    97 => "10111101101100010001010010111001", 
    98 => "10111101110111110111111110110111", 
    99 => "00111110000010111011101010100001", 
    100 => "10111110101100101000011001111110", 
    101 => "00111100100101111001000011001011", 
    102 => "10111101100111010101001111111110", 
    103 => "10111110101110010100010100000100", 
    104 => "00111101001001011110111100000011", 
    105 => "10111101110000000101100101101000", 
    106 => "10111110001110000001010101000100", 
    107 => "10111101111110111101101110100110", 
    108 => "00111011110000111000001100010111", 
    109 => "10111101001100011010000010101111", 
    110 => "10111110000101000011100010111100", 
    111 => "00111101100010001101011110000110", 
    112 => "10111110010010101101111110001000", 
    113 => "10111101010001110110001101001111", 
    114 => "10111110110010110111010111111001", 
    115 => "00111101111010110101001010011010", 
    116 => "10111110000001001111110001100110", 
    117 => "00111110100110011101111101111101", 
    118 => "10111100001100100011100001111101", 
    119 => "10111100111000010011001001100101", 
    120 => "10111100010000010100010001001100", 
    121 => "10111110001001110010000100111011", 
    122 => "00111101000101111100000000101101", 
    123 => "10111110000011011110101000101001", 
    124 => "10111101100101010110111110100110", 
    125 => "10111110011000001000110110110001", 
    126 => "10111110101011001010001101111010", 
    127 => "10111110011000111001011111100101", 
    128 => "10111101000111100100000111111110", 
    129 => "00111110000001111010010011010011", 
    130 => "00111101001100011011011001001110", 
    131 => "10111101011111001111010111111110", 
    132 => "10111101100011110100110011000010", 
    133 => "10111100011011110110010000000100", 
    134 => "00111100111111111001011000010110", 
    135 => "10111110011000110010010001101010", 
    136 => "10111110101000110001101001001111", 
    137 => "10111100111110001001110000111100", 
    138 => "10111101100010100111110000100101", 
    139 => "10111101110111101110110001101100", 
    140 => "10111101101011000011101001101000", 
    141 => "10111101110101001110111110101010", 
    142 => "10111110101010010000010100101010", 
    143 => "10111110110111011010010000011101", 
    144 => "10111101111101000010001101111001", 
    145 => "00111101010001100101111000000011", 
    146 => "10111110000000010000010001110101", 
    147 => "00111101101000001010000011100011", 
    148 => "10111110001011001100000000010100", 
    149 => "00111110100001000010110011011011", 
    150 => "10111101100000101011111111101110", 
    151 => "00111110000100000011001101111100", 
    152 => "10111110000100100101110000111110", 
    153 => "10111110010111110011101001100000", 
    154 => "00111101100111011000110111100010", 
    155 => "10111101100001101000000000001111", 
    156 => "10111101100100011001110100111100", 
    157 => "00111101110000010101101100010011", 
    158 => "10111110010010100101100111100000", 
    159 => "00111100101100010101100110110110", 
    160 => "00111100000111000001111010110001", 
    161 => "10111110011110000111010110101010", 
    162 => "10111110010011100010111111000110", 
    163 => "10111101101111010110101111101110", 
    164 => "10111101000110110010000110110100", 
    165 => "00111101001101110010100010101010", 
    166 => "10111101011000010110101010011010", 
    167 => "10111100111100111101010111100011", 
    168 => "10111101100011101111000110011001", 
    169 => "00111101111100001011101101110111", 
    170 => "10111101100100100011010100110001", 
    171 => "00111011011100111110011100101111", 
    172 => "10111110100001010110011010110010", 
    173 => "10111101111110001000011011001100", 
    174 => "10111101110111000101000000011110", 
    175 => "00111110000010000101111000010100", 
    176 => "10111101101011011001010011010000", 
    177 => "10111110100000000010010011101110", 
    178 => "10111110110011111110100101010100", 
    179 => "00111110101010101000000010010011", 
    180 => "00111110010111101011100010001001", 
    181 => "00111101100101100001011101100100", 
    182 => "00111101101010101000001001000001", 
    183 => "10111101101000111101100011111010", 
    184 => "00111101010000100111011110011000", 
    185 => "10111110000100000110111100011110", 
    186 => "00111110010000010001110110010010", 
    187 => "10111101000011001110100110010100", 
    188 => "10111101010100001111011011110100", 
    189 => "10111110100110110011010000110000", 
    190 => "00111101101011001010010100101011", 
    191 => "00111101110010010110001100011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiAem is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiAem is
    component conv_2_conv_2_weiAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiAem_rom_U :  component conv_2_conv_2_weiAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


