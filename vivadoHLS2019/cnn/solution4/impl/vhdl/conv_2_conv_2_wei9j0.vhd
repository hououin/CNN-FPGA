-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei9j0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei9j0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100001110010011110110", 
    1 => "10111110000001110110101101000000", 
    2 => "10111110011001000010110111001101", 
    3 => "00111110000100010001101001111100", 
    4 => "00111101011000001101011111010000", 
    5 => "00111101011110001011111010110111", 
    6 => "00111010101100010001101111111010", 
    7 => "10111110000011001011101100000010", 
    8 => "00111101010110000111111001010100", 
    9 => "00111101010010010100010011110110", 
    10 => "00111100111110110100010000001100", 
    11 => "10111100111101000010100001101100", 
    12 => "00111100110010010110101001101010", 
    13 => "10111101000010110011110011010010", 
    14 => "10111100111010101111000011110110", 
    15 => "00111101100101101110000000111011", 
    16 => "10111100010110000000011110110000", 
    17 => "00111100101111000011001100110000", 
    18 => "10111101001101000010101110011000", 
    19 => "00111101011001111111011100010011", 
    20 => "10111101000101101011110101001000", 
    21 => "10111110001110111110011111010110", 
    22 => "10111110000001001100101111000100", 
    23 => "10111101101101101011011100011111", 
    24 => "00111101110110000110111001111111", 
    25 => "00111101011111101000000100101011", 
    26 => "00111100000111011011000001111001", 
    27 => "00111101100110010011011100001011", 
    28 => "10111101100110010111000001011001", 
    29 => "00111101010100001110101001101111", 
    30 => "10111100101000001000011101001101", 
    31 => "10111110010101111001011000101011", 
    32 => "00111100011100001110011111111110", 
    33 => "10111110000001111001100101100111", 
    34 => "00111101010001101111111101110110", 
    35 => "00111101000101011010100001101000", 
    36 => "10111110000100011011010100000011", 
    37 => "00111100101101001110001001010000", 
    38 => "00111100111111111010001001110111", 
    39 => "00111110001110111100101010101100", 
    40 => "00111101101011011101011101011100", 
    41 => "00111110000000100011001001010111", 
    42 => "00111101010100001110001101110111", 
    43 => "00111101111000110010100101010101", 
    44 => "10111101001011100100010001111100", 
    45 => "00111101111110111101100001111111", 
    46 => "10111101110101000110001011101011", 
    47 => "10111100110100000111110001001110", 
    48 => "00111101001001011011101110000010", 
    49 => "10111101011001100011001001001011", 
    50 => "00111100100110110111001110010000", 
    51 => "00111101000101010110001001110110", 
    52 => "10111110001100101111000010010111", 
    53 => "10111100110100010000101100000000", 
    54 => "10111101000000100100011100100110", 
    55 => "10111101110010101100001011010000", 
    56 => "10111101011011011000110110010111", 
    57 => "10111101101001111010011001000000", 
    58 => "00111100100101110110011101101111", 
    59 => "00111101100001001010111011100101", 
    60 => "00111011111001000001110000100011", 
    61 => "10111011111110110100010101011110", 
    62 => "00111101000010000101011101100000", 
    63 => "00111110000100110100110111010010", 
    64 => "10111101000110110001101100110100", 
    65 => "00111101111011110001101100110001", 
    66 => "00111100001111001000001111001000", 
    67 => "10111110000001111111101011010001", 
    68 => "00111101000010011110011111001101", 
    69 => "00111101100010110100110110011011", 
    70 => "00111100110111011010011110100001", 
    71 => "10111101111111011010011000101110", 
    72 => "00111110001001101100000010100101", 
    73 => "00111100001111110111001100010011", 
    74 => "10111100101000000000010000011110", 
    75 => "10111101001111100111101000110111", 
    76 => "10111101000000011011101101000110", 
    77 => "00111100001011000110100010001110", 
    78 => "00111101000001100011001111001101", 
    79 => "00111100100000000001110110100100", 
    80 => "10111101110110101110011100101110", 
    81 => "10111101000011001000001100011110", 
    82 => "10111101001101100000101011010110", 
    83 => "10111101100000111000000111101111", 
    84 => "10111101111101110011011011001111", 
    85 => "10111101100001101001110001000001", 
    86 => "00111100010010000011001100001101", 
    87 => "10111100100011111010110110010110", 
    88 => "10111101001110000000001010100101", 
    89 => "10111101010000101110001100000011", 
    90 => "10111100010111000010000110001001", 
    91 => "10111110001101111110111011100101", 
    92 => "00111101000000110001111010100101", 
    93 => "00111101101011100110010001011001", 
    94 => "10111100111111000011100101100110", 
    95 => "10111101111100100011010101111110", 
    96 => "10111010110111001100010110111101", 
    97 => "10111101011100111001011110001101", 
    98 => "00111101000111110100001001010111", 
    99 => "00111101011100011111011110001010", 
    100 => "00111101011011010101011001101000", 
    101 => "10111101011101110011011011000001", 
    102 => "00111101101001011101010100111000", 
    103 => "10111101100101111101101101000010", 
    104 => "00111101001011100010101001110001", 
    105 => "00111101100001100101111011101000", 
    106 => "00111101100000111111000011011010", 
    107 => "10111100000100100010101000100011", 
    108 => "10111100100010110011011100100001", 
    109 => "00111011001001011110000001111100", 
    110 => "10111101100101010111110101010010", 
    111 => "10111101000000110011001110001001", 
    112 => "00111100110110000101111000111011", 
    113 => "10111100100100100111101011001110", 
    114 => "00111101000010001110101000011010", 
    115 => "00111101111010000110011110001101", 
    116 => "10111110000011100101000010011110", 
    117 => "10111110011101100101010110010111", 
    118 => "00111101001111101111111110111001", 
    119 => "10111110000010101100101001110101", 
    120 => "00111011010011010111000101110001", 
    121 => "00111101000110000011100001101001", 
    122 => "00111101100000010111100000111000", 
    123 => "10111100010100011101010000111111", 
    124 => "10111100111000001001000110000101", 
    125 => "10111101100000010010101010100110", 
    126 => "00111101100110001110100110110111", 
    127 => "00111100100110011010000101111111", 
    128 => "10111100110001101100000111010010", 
    129 => "00111110000011001111100010011000", 
    130 => "10111100100100111011000010010011", 
    131 => "10111101101010111110001000100101", 
    132 => "10111101100101100001011010111100", 
    133 => "10111110000011110101111100111100", 
    134 => "10111101111001010011100010101100", 
    135 => "10111101001100110110101100000001", 
    136 => "00111101100010011111010110101001", 
    137 => "10111101101110010100101111110100", 
    138 => "10111101101010000100110101101100", 
    139 => "10111101101110111111000101111000", 
    140 => "10111101010110111101011100011101", 
    141 => "00111101111010100111100111101101", 
    142 => "00111101001011010100011011110101", 
    143 => "10111101110111000111001100010101", 
    144 => "10111101010010100010110001000110", 
    145 => "10111100111010010111001100010111", 
    146 => "10111100010111101000101111100101", 
    147 => "10111101011010010111101110010000", 
    148 => "10111110100001111111111000100110", 
    149 => "10111101010101101111000101111000", 
    150 => "00111110000111001111010011010011", 
    151 => "10111110001011110000001011011001", 
    152 => "00111101001101100101110111000100", 
    153 => "00111101100000001011111011000101", 
    154 => "10111100110100101101001010000011", 
    155 => "10111101101111010000101011110111", 
    156 => "10111011110110000001101101000111", 
    157 => "10111101001001100100000010001001", 
    158 => "00111101100111010000001001110001", 
    159 => "00111100010101000010011111110101", 
    160 => "10111110101011011001011100000011", 
    161 => "10111100000111111001110110101110", 
    162 => "10111101110001110101100101001100", 
    163 => "10111101001110100110011100101011", 
    164 => "00111101101011111110011010011111", 
    165 => "10111101101101110111011100011010", 
    166 => "10111100101000000000110001001110", 
    167 => "10111110000011101010010101000011", 
    168 => "00111101010110001100110010001010", 
    169 => "10111100011101110100100100100011", 
    170 => "10111100111101000010100110011001", 
    171 => "00111100100111001100010110001001", 
    172 => "10111101011011110100101010111111", 
    173 => "10111110010011100000000111110101", 
    174 => "10111101101101100101100001111100", 
    175 => "10111101100011000010100101101000", 
    176 => "00111110000000111100110000000010", 
    177 => "10111101100001110010100111100010", 
    178 => "00111101101011110011011000001110", 
    179 => "10111110000110010011100000101010", 
    180 => "00111100100010011100011011010011", 
    181 => "00111100011010010011111111111100", 
    182 => "10111101011001100100001011110111", 
    183 => "00111101001100001001111101111101", 
    184 => "00111100110010001110000111101111", 
    185 => "00111101100110111111100111001001", 
    186 => "00111100110101111100000010101110", 
    187 => "00111100011001011011101011111010", 
    188 => "00111101110101100101011100110000", 
    189 => "00111101001001101100000001011100", 
    190 => "10111101100000001011000111011001", 
    191 => "10111100011011000010010101100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei9j0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei9j0 is
    component conv_2_conv_2_wei9j0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei9j0_rom_U :  component conv_2_conv_2_wei9j0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


