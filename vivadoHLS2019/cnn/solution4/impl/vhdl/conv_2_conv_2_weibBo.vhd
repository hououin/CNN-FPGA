-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibBo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibBo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100110111001100110010", 
    1 => "10111110000011000010000100001000", 
    2 => "00111011100101000111111100010100", 
    3 => "10111101111010100010110001110110", 
    4 => "00111110000100100101101001100110", 
    5 => "00111101110000101001010001011110", 
    6 => "10111110001100001000111101100010", 
    7 => "00111101011110110100101010011100", 
    8 => "10111100000011011001010111010101", 
    9 => "10111100111001111100010111011100", 
    10 => "00111010111011110101001000000011", 
    11 => "10111010110100100110101010111000", 
    12 => "10111110010010110011101100000110", 
    13 => "00111101000000101100011010110010", 
    14 => "10111101010101011101101111011101", 
    15 => "00111101000110101010110010010110", 
    16 => "00111101010110111001101001010110", 
    17 => "10111101111010110111100010100000", 
    18 => "00111110010011000100001101011101", 
    19 => "10111110010100000101010101101100", 
    20 => "10111110000101110101101110011011", 
    21 => "10111011011100101001001000000111", 
    22 => "00111101110010101000011111100110", 
    23 => "00111110010100000110110011100100", 
    24 => "00111101100000100100101010111010", 
    25 => "00111011000100011101100011111010", 
    26 => "10111101111010111110111011111101", 
    27 => "10111110011100100010100111100000", 
    28 => "00111101110111111001010010001011", 
    29 => "10111110010101111011101000101100", 
    30 => "10111100100111101010101110110110", 
    31 => "10111110110000111001100011011011", 
    32 => "00111101001001111101100111100000", 
    33 => "10111101111110101101011101101000", 
    34 => "10111101001100111010011010100010", 
    35 => "10111101110100101101111011010001", 
    36 => "10111110001100110111000010010001", 
    37 => "10111101100101001001101001111101", 
    38 => "10111100100111111000110001110110", 
    39 => "00111110001100110111001010111001", 
    40 => "10111101101110110011011111010011", 
    41 => "10111101100001010110010010101110", 
    42 => "10111100101111101111001100010110", 
    43 => "10111110000101110110001000101111", 
    44 => "00111100000000111101011110101111", 
    45 => "00111101101000100111011111001100", 
    46 => "00111100100011100110111000011001", 
    47 => "10111101101100010000000000111111", 
    48 => "10111110100000001000011111010001", 
    49 => "10111110000100011000000010001001", 
    50 => "10111011100110111101100010001101", 
    51 => "10111110001111101000110001101001", 
    52 => "10111101101111111100110011010000", 
    53 => "10111101110001011011110010011011", 
    54 => "10111101010010000111110101100000", 
    55 => "00111100110010111000101001111001", 
    56 => "00111100111000011001101001001001", 
    57 => "10111101101000001010110111001110", 
    58 => "00111110001000110011110101011100", 
    59 => "00111101110001111101011101101110", 
    60 => "10111101111011001100100110111100", 
    61 => "10111101101010000001011000010001", 
    62 => "00111101101001011010110111000110", 
    63 => "00111101101011111101101010101011", 
    64 => "00111100110011100100010000100110", 
    65 => "10111110111000000111000011001000", 
    66 => "00111101111011111111111010101011", 
    67 => "10111101111000110100110010100000", 
    68 => "00111100111100111111001011111101", 
    69 => "00111101100110110001010100111000", 
    70 => "10111101001100000110101110010111", 
    71 => "10111101110010100011000010010001", 
    72 => "00111110001010110001100010000101", 
    73 => "10111110000000100010010011010100", 
    74 => "10111110001000110010000001010101", 
    75 => "00111101011010100001001111010111", 
    76 => "10111101101101110111110000000010", 
    77 => "10111100001000101011100101110010", 
    78 => "00111101000110110011101110110110", 
    79 => "10111011110010101010101001101110", 
    80 => "00111100101110011100001010010000", 
    81 => "00111101001110111110100110001101", 
    82 => "10111101101100010010011110100000", 
    83 => "00111100100011001100101000000010", 
    84 => "10111110001000101111100010000000", 
    85 => "10111011010001000011000111011010", 
    86 => "10111101101000011000010001011000", 
    87 => "00111110001010011000011000010001", 
    88 => "10111100000111010001101001110101", 
    89 => "00111100010111011100111011110100", 
    90 => "10111101101011111010111100110011", 
    91 => "00111101100101110111111000100011", 
    92 => "10111101010011011110011111001101", 
    93 => "10111110000001100010111000111101", 
    94 => "10111101101111100111111110010110", 
    95 => "10111110000001100011100011111101", 
    96 => "00111100100110001011101000101100", 
    97 => "10111101111011100001000110100101", 
    98 => "10111101101111011100000101100011", 
    99 => "10111110000111010010111101101110", 
    100 => "10111101100000010011100010011011", 
    101 => "10111101000110010001111110001010", 
    102 => "00111110000101000001010110100011", 
    103 => "00111100110000010011101101011001", 
    104 => "00111101001001011000000010111000", 
    105 => "10111100100101111000110000100001", 
    106 => "10111100101101110010111111000110", 
    107 => "10111101100011101000101011110011", 
    108 => "00111101001101011110110010000110", 
    109 => "10111101110010000010011100001010", 
    110 => "10111101100010001111000000011100", 
    111 => "00111101110101111010011000111011", 
    112 => "00111101100000011100110110110010", 
    113 => "10111101100011110001111001011001", 
    114 => "10111101001111100010110110001011", 
    115 => "10111101100011001111010111000011", 
    116 => "00111101111010001010110011011101", 
    117 => "00111101011110000111010101100111", 
    118 => "00111101111101111100100010110011", 
    119 => "10111110010001101001101010110110", 
    120 => "10111101100101000000010000101011", 
    121 => "00111110000011011100101101001110", 
    122 => "00111101101101110010100101111110", 
    123 => "00111100110001110100010100111011", 
    124 => "10111101101001000010001100000100", 
    125 => "00111110000011011011100110111011", 
    126 => "10111011100110110011100011101010", 
    127 => "00111101101011100101001001101111", 
    128 => "10111101010011010111000100101011", 
    129 => "10111110110110010001001110111110", 
    130 => "10111100100110010010011000001011", 
    131 => "10111100011010100111110001100010", 
    132 => "00111110010000110100001010101001", 
    133 => "10111110000100000011111110010100", 
    134 => "00111110001001111011010011101010", 
    135 => "10111101001110100000010001111001", 
    136 => "00111100101101010101000100111001", 
    137 => "10111110100001100011000111100100", 
    138 => "10111101100000111110101001010110", 
    139 => "10111110001101010000110110001110", 
    140 => "00111101100010101001110010011111", 
    141 => "00111100101011110100101001011100", 
    142 => "10111101001001010111100010010011", 
    143 => "00111100101011010010101001000001", 
    144 => "00111101011000011001000101000011", 
    145 => "00111101000101110010111010101111", 
    146 => "10111110000011010111110001011111", 
    147 => "00111110010000110101000011011010", 
    148 => "10111101111010011001100111000001", 
    149 => "00111101000010111001111110111011", 
    150 => "10111110010011110000010111101111", 
    151 => "00111101111011001111110101110110", 
    152 => "00111101110011111100001010000111", 
    153 => "00111100010010100110000011000011", 
    154 => "10111110011000000000111111000111", 
    155 => "10111110000101100011110010000001", 
    156 => "00111101100011000110001001110010", 
    157 => "00111100001100000101001011001111", 
    158 => "10111110010110011001011001011101", 
    159 => "00111101010011100110110100101110", 
    160 => "10111110000011100111110010000111", 
    161 => "00111011110111000001001110110110", 
    162 => "10111110011110110001100011110100", 
    163 => "10111110011011010011101001011000", 
    164 => "00111101100101100100100111001111", 
    165 => "00111110011100100001010000100101", 
    166 => "00111110011111010010101111101100", 
    167 => "10111110000110101000000110110000", 
    168 => "10111101000111110001001001110000", 
    169 => "00111101000100011111011000011001", 
    170 => "00111101110001001011000100000010", 
    171 => "00111110000000111000010110000100", 
    172 => "10111101011101001000011100101101", 
    173 => "10111110011011000010001110111011", 
    174 => "00111110000001111111101010010001", 
    175 => "00111110000010100010110011011111", 
    176 => "00111101011111101101001111010110", 
    177 => "10111100100011111001010001110011", 
    178 => "00111100110001111011000011101011", 
    179 => "10111011111101110101101001101101", 
    180 => "00111101110010001001011101110001", 
    181 => "10111101101111000110001000111011", 
    182 => "00111110001000010111000001111101", 
    183 => "00111010101001101101110110101110", 
    184 => "10111100110011100000011000110010", 
    185 => "00111110000111011001001101000001", 
    186 => "00111101111111010110001110100110", 
    187 => "10111101111000010001010000000011", 
    188 => "10111101010111011111101100111011", 
    189 => "00111101101001101000101011100100", 
    190 => "10111011111101111011000000101000", 
    191 => "00111100001111101111010111101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibBo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibBo is
    component conv_2_conv_2_weibBo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibBo_rom_U :  component conv_2_conv_2_weibBo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


