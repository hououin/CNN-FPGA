-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiUhA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiUhA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111001011010110100001100", 
    1 => "00111100110011010100011000100011", 
    2 => "10111110000001010110010111111010", 
    3 => "00111110000011001000111100111101", 
    4 => "00111110011010011100100101001001", 
    5 => "10111101010101100000110000111100", 
    6 => "00111110010010101011100001011001", 
    7 => "10111101110001111001101001011101", 
    8 => "00111110010011011010010101101000", 
    9 => "00111101011011110110111100010100", 
    10 => "10111101101010000001000001101001", 
    11 => "10111101010111010000110001000111", 
    12 => "00111101110001010000010101101111", 
    13 => "10111100000100100110101000110000", 
    14 => "00111101111001001111001101111101", 
    15 => "00111101100010011011011110101111", 
    16 => "10111011101111100010010111110100", 
    17 => "10111100011111011001010010000100", 
    18 => "10111101011011101100001011010001", 
    19 => "10111101111000110110010011100001", 
    20 => "00111011111010011010100000001011", 
    21 => "00111100000010010010010101001110", 
    22 => "00111101001001111101011000100100", 
    23 => "00111101000001101101100111001101", 
    24 => "00111101111110111110110000111110", 
    25 => "10111101001111011000011011010100", 
    26 => "00111110011110100010110000001111", 
    27 => "00111101100100101100010100010111", 
    28 => "10111101011001010101010101010011", 
    29 => "00111101101111001101101010010101", 
    30 => "00111100100011001111111000000000", 
    31 => "10111101010101000100010110111000", 
    32 => "00111100110011101010010011101011", 
    33 => "10111110001001011110100111011101", 
    34 => "10111101001010100010001111111110", 
    35 => "00111101111001110110111110110111", 
    36 => "10111110010000001011111111001111", 
    37 => "00111101010111111011100111010111", 
    38 => "10111101101101011111011111101101", 
    39 => "00111110001011010001100001011001", 
    40 => "10111110100000010111000100010110", 
    41 => "10111100100011001110001110000101", 
    42 => "00111101101110111000100111011100", 
    43 => "00111101000011111110111101101010", 
    44 => "00111100110111110100110111100100", 
    45 => "00111100101100111101100001000100", 
    46 => "00111100101100111010010101010000", 
    47 => "10111100101100001101010100011100", 
    48 => "10111101101110111110010000110010", 
    49 => "10111110100001101000110000101000", 
    50 => "00111110010011101100011001100001", 
    51 => "00111110010111110110011110001100", 
    52 => "10111110010010001011111101010010", 
    53 => "10111100000110010001000011100100", 
    54 => "00111101000000010001010000011001", 
    55 => "10111110001001010000000110110011", 
    56 => "10111100111110110011111100110001", 
    57 => "00111101101001111010111000011010", 
    58 => "10111101100011000011110001111001", 
    59 => "10111100010010101111000010000001", 
    60 => "00111101100111010000101100011110", 
    61 => "00111110000101111010001110100100", 
    62 => "00111110010001101100010100101001", 
    63 => "00111101110010011101010101000011", 
    64 => "00111100101100001110001101001111", 
    65 => "00111101110001111111010101001010", 
    66 => "00111101111000010111111001110001", 
    67 => "10111101110000110110101011000010", 
    68 => "00111101111101111100110010000000", 
    69 => "10111101101000110100010000010110", 
    70 => "10111101001110011011101000110101", 
    71 => "10111101100110001101001110100010", 
    72 => "00111101011101001101100101001000", 
    73 => "10111101011010110011001001101001", 
    74 => "10111101010110111010011110001000", 
    75 => "10111101001011110101011100101101", 
    76 => "00111110000100000010011000101111", 
    77 => "00111110001100101110100011100010", 
    78 => "00111101001010000010000010010110", 
    79 => "10111101111000000100001100011111", 
    80 => "00111101101000001001011100010111", 
    81 => "00111011110000110010011110101001", 
    82 => "10111101001011100111101010000110", 
    83 => "10111110001111100000110001101110", 
    84 => "10111110011000011101010110100011", 
    85 => "00111101001100011010110111101011", 
    86 => "00111101010110101101110111111101", 
    87 => "10111101111011110100101100101001", 
    88 => "00111110000010101010001111000110", 
    89 => "10111101110110110010011011111101", 
    90 => "00111101111111000101011111000001", 
    91 => "10111110001100100100111011001000", 
    92 => "10111101011100010101000010111010", 
    93 => "00111101000101110101101110100000", 
    94 => "00111100110111011111111111000110", 
    95 => "10111100110000110010010100101001", 
    96 => "00111101011111111011010111111001", 
    97 => "10111101000110001111110101011011", 
    98 => "10111100110110001111111100101000", 
    99 => "10111110100101100010100101010001", 
    100 => "10111101111100000100001111000111", 
    101 => "00111100011100111011010001011100", 
    102 => "10111101110101011110111001010111", 
    103 => "10111101011010001110101010000000", 
    104 => "10111101100011010001001001010101", 
    105 => "10111110000101010001101010000010", 
    106 => "00111110000111110100001010111010", 
    107 => "10111110001010100010010110110011", 
    108 => "10111110100000101011111110010101", 
    109 => "10111101101010000011101101010000", 
    110 => "00111101000111001001100100011000", 
    111 => "10111110011110101010111000001110", 
    112 => "10111100000000111001101101000000", 
    113 => "00111101011010110110000101001001", 
    114 => "00111110010000110000000111101111", 
    115 => "10111101001111100000111110110000", 
    116 => "00111101101000010010010001000010", 
    117 => "10111101001000000010110101110100", 
    118 => "10111110001011100010011100111000", 
    119 => "00111101010100101011100101101110", 
    120 => "10111011100110111010110111011000", 
    121 => "00111101001001010011011101111000", 
    122 => "10111110000111010010001111001000", 
    123 => "00111101101100100000011011010111", 
    124 => "00111101000111110011010000011010", 
    125 => "10111101010101100001110000010110", 
    126 => "10111101110011010111101111010000", 
    127 => "10111101100110100010100011111101", 
    128 => "10111101000010011011011000010001", 
    129 => "00111110001011101110101001100110", 
    130 => "00111110100011110011001101011110", 
    131 => "10111100010000111111000001001011", 
    132 => "00111110001001010101001011100111", 
    133 => "10111110011010111111101100001001", 
    134 => "10111101111110010010101100111011", 
    135 => "00111101010000110000011111001011", 
    136 => "10111101100001010111110011101110", 
    137 => "10111110010010010110011110000111", 
    138 => "10111110001101101000100111100001", 
    139 => "10111110001011111101010110110010", 
    140 => "00111101010000000100010010100100", 
    141 => "00111101111011111111000001101100", 
    142 => "00111101111110001111111010100000", 
    143 => "00111101100100101101001000111011", 
    144 => "10111101011001100100101000101001", 
    145 => "10111100111011011110110001001100", 
    146 => "00111100101010100111010101010000", 
    147 => "10111110010000000101100100111010", 
    148 => "10111011000101101101100010101001", 
    149 => "00111110001011011101001010101101", 
    150 => "00111101111100110100110111010010", 
    151 => "10111110000100100010011100001100", 
    152 => "10111100100010111100001101110100", 
    153 => "10111100101110101001111010111100", 
    154 => "10111110011111001011011110001110", 
    155 => "00111101100110111011000001101111", 
    156 => "10111101000111000100110010100110", 
    157 => "10111101001100100000100110111100", 
    158 => "00111101101001000010100110110000", 
    159 => "10111110000011011100101110111001", 
    160 => "10111110000101000010101101100000", 
    161 => "00111100100001001110110111010011", 
    162 => "10111110010100001111010110011010", 
    163 => "10111110101101010111011011001000", 
    164 => "10111100011001011010100110000111", 
    165 => "00111011110100001001111000100011", 
    166 => "10111101111011111110001100010010", 
    167 => "10111110000110111111010011000111", 
    168 => "00111101101010001000001010010100", 
    169 => "10111101101100000100110111110000", 
    170 => "00111101100001100010001010110001", 
    171 => "10111101110100010010101011010010", 
    172 => "10111101101000010110111000101010", 
    173 => "10111101001001010100010000000110", 
    174 => "10111110000110011100011000011000", 
    175 => "10111101110111110101111110010100", 
    176 => "10111100010010100110001111110011", 
    177 => "00111101110001001011011100111010", 
    178 => "00111101100111100100001100001010", 
    179 => "10111101101111110010100110100001", 
    180 => "00111100100011100101000011001101", 
    181 => "00111110001111001011100011001100", 
    182 => "10111101110111101100011001001101", 
    183 => "00111110010101001011111110100111", 
    184 => "10111101000001010111111110111110", 
    185 => "10111110001000110111011010001000", 
    186 => "10111101100001001110000101000010", 
    187 => "10111011001010100011100100110100", 
    188 => "00111101100000011000111001100011", 
    189 => "10111110001001000111000001011101", 
    190 => "10111101100100010101001101010111", 
    191 => "10111101010100101001110110001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiUhA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiUhA is
    component conv_2_conv_2_weiUhA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiUhA_rom_U :  component conv_2_conv_2_weiUhA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


