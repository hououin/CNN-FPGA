-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibnm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibnm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010101110101100011000", 
    1 => "00111101000001111100011011011111", 
    2 => "10111101110011010111110111011110", 
    3 => "10111100000101001010001110101101", 
    4 => "00111110001111101001001001100101", 
    5 => "10111101011001111011111110111110", 
    6 => "00111101011100001010100000110111", 
    7 => "10111101100001101111011101011110", 
    8 => "10111101100011000010100101011000", 
    9 => "10111100011101111110100111110001", 
    10 => "00111011001101011110111000110101", 
    11 => "10111101011101111100101101100100", 
    12 => "00111101011001010011110010010110", 
    13 => "10111101000000000111110111110001", 
    14 => "00111101101011100001101101001000", 
    15 => "10111100110100010000110011110111", 
    16 => "00111100110100100100001100010001", 
    17 => "10111101110110110011010111111011", 
    18 => "10111101000110100011100111111111", 
    19 => "10111110011110100000000010100111", 
    20 => "00111110000101001010111000110101", 
    21 => "10111101111010100001101010000100", 
    22 => "10111110001100010010001100010000", 
    23 => "10111101011011011101001111011100", 
    24 => "10111101001010010101011000010100", 
    25 => "10111100011010010111111010000000", 
    26 => "00111100110101001111111111001011", 
    27 => "10111110001010011101110000110111", 
    28 => "00111100100111111100100111010101", 
    29 => "10111101010010101110000000101110", 
    30 => "00111110000010100011110011010100", 
    31 => "10111110100100111101011101000111", 
    32 => "00111100111010010111001110110000", 
    33 => "00111101011000010110111010111001", 
    34 => "10111101110001110010001000100111", 
    35 => "00111101010101111000101001111011", 
    36 => "10111110010000101001101001101101", 
    37 => "10111011000100010100111011010100", 
    38 => "10111011111100010011100101100110", 
    39 => "10111010001101111011100101001101", 
    40 => "10111110000100110110010011101101", 
    41 => "10111101100100011001110101111111", 
    42 => "10111100001010010111001110110001", 
    43 => "00111101000101100011111111010111", 
    44 => "00111101111110111110100010100000", 
    45 => "10111100111101001110010001000111", 
    46 => "10111011110101101100101101110011", 
    47 => "00111101101111000100000010101001", 
    48 => "10111001101001000101011010001000", 
    49 => "10111110011110010101101111100100", 
    50 => "00111110000011000110111100010000", 
    51 => "00111101100011011001011101100001", 
    52 => "10111110001110111010011100010000", 
    53 => "10111101100010101110001010011100", 
    54 => "10111101100100100101011101101000", 
    55 => "10111011101110100000000001010011", 
    56 => "10111101101110010111011001001110", 
    57 => "10111101101001101000101010110111", 
    58 => "10111110001011000011000111000001", 
    59 => "00111101010101011101010111011110", 
    60 => "00111101000101110001101001001000", 
    61 => "00111101010001011001101101000011", 
    62 => "10111100000110000111101100111011", 
    63 => "10111100001000111110011010111011", 
    64 => "00111101101100100000111001111110", 
    65 => "00111101011011101001111100100000", 
    66 => "10111101011110111100000010101111", 
    67 => "10111100000000010100010011000111", 
    68 => "00111011110000010101110011110001", 
    69 => "00111100010110011111000111000100", 
    70 => "00111101111010100001010101000000", 
    71 => "10111101111000000111100011011010", 
    72 => "00111101000011000000000010001011", 
    73 => "00111101101100111101001110011001", 
    74 => "00111101100101100010010011000000", 
    75 => "10111101100111111111100110001001", 
    76 => "10111011000110101010010111010000", 
    77 => "10111100110010111011000010000010", 
    78 => "00111010100111011110100000110101", 
    79 => "10111100101011011110010001000001", 
    80 => "00111101101111110100101110111100", 
    81 => "10111101000101100110011100110001", 
    82 => "00111101000001110110111010010111", 
    83 => "00111011111111101000001001110001", 
    84 => "10111101010101010011101010000100", 
    85 => "00111101111000010101010000110100", 
    86 => "10111101000000101001100000111001", 
    87 => "10111100101100101100010101101110", 
    88 => "00111101100001010010100111100111", 
    89 => "10111101101011111101100110110110", 
    90 => "10111101100100111100011100100010", 
    91 => "10111110011001011000101111111011", 
    92 => "10111101100000001100000100010100", 
    93 => "10111101000100011100000011111100", 
    94 => "00111110000011011101100101110010", 
    95 => "10111011000010110110111010101110", 
    96 => "00111110000011100000101100000111", 
    97 => "10111101111010011100111110100100", 
    98 => "10111100100111110111110010001000", 
    99 => "10111101111001011011010000000000", 
    100 => "10111101100010111101111111001000", 
    101 => "10111100110110100001110110110010", 
    102 => "10111100101011010001010011111000", 
    103 => "10111101110100011110101110011100", 
    104 => "10111101111010000000001011100010", 
    105 => "10111101100101100111010101101100", 
    106 => "00111101110100011011101100110101", 
    107 => "10111100110001011010111100110001", 
    108 => "10111011110110010111001101101110", 
    109 => "00111110001011000001001100011000", 
    110 => "10111101010010010011000011011101", 
    111 => "00111011111111101001011011001011", 
    112 => "00111101010100011001010110011111", 
    113 => "10111110000000010010101001001000", 
    114 => "00111100101101001110001110111101", 
    115 => "10111100110001001010101101001101", 
    116 => "10111101110101100110100101110111", 
    117 => "00111100111000111011011111100011", 
    118 => "10111100010010000011001100101111", 
    119 => "10111110100010000111111101010111", 
    120 => "10111101111011011110111110110000", 
    121 => "00111101011100101101010101011111", 
    122 => "10111011111111000100011101110100", 
    123 => "00111101101011011111100110010001", 
    124 => "00111101100000110101001110110001", 
    125 => "10111110000100110101110001111101", 
    126 => "10111101110111010001000110101101", 
    127 => "10111100111101001111010111111111", 
    128 => "00111100100001000011111100110001", 
    129 => "10111101010101101100000100110011", 
    130 => "10111100101000001110000101011111", 
    131 => "00111100100111010011010111100110", 
    132 => "00111101100000000001101001101100", 
    133 => "00111100110111011111001010010010", 
    134 => "00111101011111011000101111111011", 
    135 => "00111100010110101011000100100011", 
    136 => "00111010000101011110111101001111", 
    137 => "10111011110111011000100111000100", 
    138 => "10111110100101110001010000111011", 
    139 => "10111101111001100111011100101100", 
    140 => "00111101100001110110110011111001", 
    141 => "10111101001100111000100001010100", 
    142 => "10111101011001100110101011100011", 
    143 => "10111101001111010010010111011111", 
    144 => "00111100101101010001010000001011", 
    145 => "10111101000011001000111011111111", 
    146 => "10111101111101000101111001001110", 
    147 => "10111011111010100111011110101110", 
    148 => "10111101111010101000001011001010", 
    149 => "10111100010101100010011110111001", 
    150 => "00111101110010001010001110000000", 
    151 => "10111101110001101110110101011100", 
    152 => "00111101100011001110010001111100", 
    153 => "00111011101000111011000010110110", 
    154 => "00111101001011001110001011011000", 
    155 => "00111101101011100000001100000111", 
    156 => "10111101101111011010000000111011", 
    157 => "10111110001111111111100000010011", 
    158 => "10111100100100010111001000101100", 
    159 => "00111101010111110011100101010011", 
    160 => "10111101110000110110010110011011", 
    161 => "00111101100000100000101110001000", 
    162 => "10111101100111111100111100110000", 
    163 => "10111110011010000101001100101011", 
    164 => "00111011111111010110110110111111", 
    165 => "10111101101010111101100001000101", 
    166 => "10111101000010110110001001000100", 
    167 => "10111101110000111110001100101101", 
    168 => "00111101010111100101110001001001", 
    169 => "00111101011100011010000110100000", 
    170 => "00111110001010001000100111110111", 
    171 => "00111100101110000010110011000101", 
    172 => "10111101100001011110101101010010", 
    173 => "10111110010110111001000001110000", 
    174 => "10111101000101010010110011000001", 
    175 => "10111101111110101110110101010111", 
    176 => "10111101000111101100011011010110", 
    177 => "10111101110101010101011001110100", 
    178 => "00111101110001001011110011010000", 
    179 => "10111110000011101100101010001100", 
    180 => "00111101110000111111011001000000", 
    181 => "00111101111111111010111110011101", 
    182 => "10111101101001111100000010110010", 
    183 => "10111100010110110111110101010111", 
    184 => "10111110000100101000010101101000", 
    185 => "10111101100111100001110100110101", 
    186 => "00111101100011001101100101100010", 
    187 => "10111101001010000010110000000100", 
    188 => "10111100100001111001110011000010", 
    189 => "00111101001101001010101011111001", 
    190 => "10111101100111110111110101110010", 
    191 => "10111101100001110111110000110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibnm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibnm is
    component conv_2_conv_2_weibnm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibnm_rom_U :  component conv_2_conv_2_weibnm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


