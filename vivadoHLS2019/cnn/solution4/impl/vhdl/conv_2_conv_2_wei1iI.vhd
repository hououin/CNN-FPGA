-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei1iI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei1iI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010110001101110110111111", 
    1 => "00111101000001011011011100110011", 
    2 => "10111101001010001010010011101101", 
    3 => "00111101001000001011100111111110", 
    4 => "00111101101110010001110010001111", 
    5 => "10111101101101110010001100000010", 
    6 => "00111101010101000011111001101010", 
    7 => "10111101111011001110010011000001", 
    8 => "00111101111001011010100000100000", 
    9 => "10111101100011000001000011100011", 
    10 => "00111101100010000011110011101001", 
    11 => "00111100111101100000111000010101", 
    12 => "00111101010001011111110000101001", 
    13 => "10111101100110001110101011000101", 
    14 => "00111101000001100101000101011111", 
    15 => "00111101100100001011010001110010", 
    16 => "10111101000101111010110110101011", 
    17 => "10111101000111101110010100111101", 
    18 => "10111110001101111011101001000010", 
    19 => "10111101011000111000100011000101", 
    20 => "10111101001100111010101100000100", 
    21 => "10111101000111110101000000111011", 
    22 => "10111110000100100100100101000010", 
    23 => "00111100111011101111010001000010", 
    24 => "00111100010000010101101001101011", 
    25 => "10111101000001111100110100010010", 
    26 => "10111100100010101000001011010101", 
    27 => "10111110011001000011110011001010", 
    28 => "10111101000100010001001111110000", 
    29 => "00111101110011100001011010111001", 
    30 => "00111101111111101110101001101100", 
    31 => "10111101110000110111110110111101", 
    32 => "00111101001001000011001101001010", 
    33 => "10111101001000100000111011001110", 
    34 => "00111100110010010100110001000110", 
    35 => "00111100101111000011101111110011", 
    36 => "10111110001001011111011100010010", 
    37 => "00111101110001001110010000110001", 
    38 => "10111101100000100110010001110000", 
    39 => "00111100001100100100110100010100", 
    40 => "10111110000111100110101000001101", 
    41 => "00111101001110100101101101111111", 
    42 => "10111011010111000000000101001010", 
    43 => "00111100101101110100010011100111", 
    44 => "10111101001111110010111011111100", 
    45 => "00111011000000100111100110000000", 
    46 => "10111100001001000110110111110110", 
    47 => "00111100101001111101101011110001", 
    48 => "00111011111000111000011101001110", 
    49 => "10111110010111111100000111101100", 
    50 => "00111101111111010101001010100001", 
    51 => "00111110000010000111110011100101", 
    52 => "10111110100011110110001010000101", 
    53 => "10111110001001111110000101000111", 
    54 => "10111110000010010110111101010100", 
    55 => "00111100101001001011010101100011", 
    56 => "10111101110000111111010001001010", 
    57 => "10111101100010011101001011111010", 
    58 => "10111110000010000111100010101100", 
    59 => "00111110000001101111010010000100", 
    60 => "10111100110011000101101010111010", 
    61 => "10111100010100100011001100000111", 
    62 => "00111101101001100000001000111011", 
    63 => "10111101000100111100100100010010", 
    64 => "00111101101000000101100111011111", 
    65 => "00111100011100101011110000011111", 
    66 => "10111101101100101010101111101000", 
    67 => "00111101101100100011111010100001", 
    68 => "00111101110001011111100100110100", 
    69 => "00111101110100100011010010011101", 
    70 => "00111100001001101100011101001101", 
    71 => "10111101000111000110111110000100", 
    72 => "00111100110001111111000010001101", 
    73 => "00111101001000101001100111001100", 
    74 => "00111101101000000010101000110110", 
    75 => "00111101001101101100100000110100", 
    76 => "00111101000011111111111010101010", 
    77 => "00111100010011111001100000010110", 
    78 => "00111100111001000001100000011101", 
    79 => "00111100111100001010110111000010", 
    80 => "00111101010111010101011011011111", 
    81 => "00111101000001001011100100100110", 
    82 => "00111101011011100011100010101111", 
    83 => "10111101000100101100011100000001", 
    84 => "10111101011100110111011111011110", 
    85 => "10111101100101110101001111111011", 
    86 => "00111101000001001001100000111101", 
    87 => "10111101101101100001110111110111", 
    88 => "10111100010111011000100101001101", 
    89 => "10111101000101100011110101011100", 
    90 => "00111101101011100101001001001000", 
    91 => "10111110100110110111101101000011", 
    92 => "10111100111001000010001110110000", 
    93 => "10111100100010010011111011001100", 
    94 => "10111101100011010111110101011100", 
    95 => "10111011101001000001100000101001", 
    96 => "00111101100100111101110100000110", 
    97 => "10111100100110111101111011001010", 
    98 => "00111101111011101010100111011011", 
    99 => "10111100110101001010000100000100", 
    100 => "00111101010111111001100111111001", 
    101 => "10111110000001110010000011111010", 
    102 => "00111101001101110100001101000001", 
    103 => "10111011101111110101111100000001", 
    104 => "10111101110011100010111101010101", 
    105 => "00111100111110100101001110011100", 
    106 => "10111011101100110000001110111111", 
    107 => "00111100111001110110100100100000", 
    108 => "00111101001001101110101110111101", 
    109 => "00111100101000111000010111100110", 
    110 => "00111101111110111101110110111011", 
    111 => "00111101111001001010001011010010", 
    112 => "00111110001000011001100001011111", 
    113 => "10111100110000010000101110101100", 
    114 => "10111011011001010110101101110010", 
    115 => "00111101000011011100001001011000", 
    116 => "10111101010111101110100111111011", 
    117 => "10111101101110000010000111000001", 
    118 => "10111101000011011000011101001010", 
    119 => "10111101111001010001001010010000", 
    120 => "00111100000110000110111010100111", 
    121 => "10111101100010010100010100010101", 
    122 => "10111101111011000011000100100100", 
    123 => "10111101000001100000001101000101", 
    124 => "10111011110011001010111110101111", 
    125 => "10111001101111010010100101010010", 
    126 => "10111101001111101000111110111110", 
    127 => "00111100010101010100011101010011", 
    128 => "10111100010011110000000000011111", 
    129 => "00111100000110111001101011011101", 
    130 => "00111101100000110101010010001000", 
    131 => "10111101100111111010110010110110", 
    132 => "10111101010100100010000011100010", 
    133 => "00111100110110011011010000100011", 
    134 => "00111101111101111001000101111110", 
    135 => "10111011111110011000011101110011", 
    136 => "00111101101000101100001101010000", 
    137 => "10111101010111100001000101111110", 
    138 => "10111110100000111101011100111011", 
    139 => "10111110001011111101010111001010", 
    140 => "00111101111011010011110100101110", 
    141 => "00111101111010000001010001101101", 
    142 => "00111110000000110111011010111101", 
    143 => "00111101000010011010100100100011", 
    144 => "00111101110010111000011110000011", 
    145 => "10111101111100100100010111011000", 
    146 => "00111101110001000011111001011010", 
    147 => "10111101001101010101110111110110", 
    148 => "10111101110111101100110101101001", 
    149 => "10111101100011111001111101110000", 
    150 => "00111101100101000011110011110110", 
    151 => "10111101100000000000111010101101", 
    152 => "00111101011111110000100001000101", 
    153 => "00111101110001011110100100011000", 
    154 => "10111101101000101010100110011101", 
    155 => "00111101100011000100011010100111", 
    156 => "00111011101010100110011001100011", 
    157 => "10111101110000011111011001111111", 
    158 => "10111101010100011111111110000001", 
    159 => "00111101011100111011110010011001", 
    160 => "10111110000010010111000000001111", 
    161 => "00111101110011100100101110010010", 
    162 => "10111101101001000111101110001101", 
    163 => "10111101110100100110001010001111", 
    164 => "00111101111000101101101001100100", 
    165 => "10111110000001000100111101000011", 
    166 => "00111001100111101111111111100010", 
    167 => "00111100110100100100001011100010", 
    168 => "10111100111001011110001101100100", 
    169 => "00111101000000111010101100111110", 
    170 => "00111101001001111000010101101110", 
    171 => "00111101101011000001011101011110", 
    172 => "10111101100101101100001000000011", 
    173 => "10111101111011001100001111010010", 
    174 => "10111101001101110000001011011100", 
    175 => "00111011101111111011011101110010", 
    176 => "10111101101000111110100111110100", 
    177 => "10111101100110111010011101000110", 
    178 => "00111101000111010101100111000010", 
    179 => "10111101101010010110001010110101", 
    180 => "00111101101010000011100111011100", 
    181 => "00111101111011100010010001110101", 
    182 => "10111101111101001111000010011100", 
    183 => "00111110000011110101100011001010", 
    184 => "00111101000111100010111000011100", 
    185 => "10111101100010100000011010011000", 
    186 => "10111100111100101001010010110011", 
    187 => "10111101100101000110110111110111", 
    188 => "00111101110010000111111110110000", 
    189 => "00111101101011001101101100001110", 
    190 => "00111100000101000010111110011000", 
    191 => "10111101010101110011100010101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei1iI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei1iI is
    component conv_2_conv_2_wei1iI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei1iI_rom_U :  component conv_2_conv_2_wei1iI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


