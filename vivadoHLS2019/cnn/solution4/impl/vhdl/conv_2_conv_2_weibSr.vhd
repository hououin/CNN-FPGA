-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibSr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibSr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001010100010000001110", 
    1 => "10111011101010000010001011101101", 
    2 => "10111100100000011101011101110100", 
    3 => "10111101011110000100110100110111", 
    4 => "10111101111100111100111111101001", 
    5 => "10111101001111111100100101011000", 
    6 => "00111110100000110001001100000001", 
    7 => "10111111000100001011010111111001", 
    8 => "00111101111111000100101101111101", 
    9 => "00111100100010110111110100100001", 
    10 => "00111110010101100011101000001110", 
    11 => "10111101011011101000001000100001", 
    12 => "10111101100010100110011001010010", 
    13 => "00111110010100100101001100111100", 
    14 => "00111101011011100010011010000111", 
    15 => "00111101110000111101101101110011", 
    16 => "10111110000110111001000111000010", 
    17 => "10111101000010100000010101111111", 
    18 => "00111101100110001010000101010011", 
    19 => "10111110000011111001011101010110", 
    20 => "00111101010000111010110000011101", 
    21 => "00111110001101000000000010101001", 
    22 => "10111101101010000101000011111011", 
    23 => "10111101100101100111011101001010", 
    24 => "00111100110001000101000101110001", 
    25 => "00111101010110110000011000111110", 
    26 => "10111110001001100010111111000101", 
    27 => "10111110001101110100111110001100", 
    28 => "00111110111100111011111001011100", 
    29 => "00111101111110110010001100011101", 
    30 => "10111110000011000101010000100100", 
    31 => "10111110101110101001101001100100", 
    32 => "00111101010110001001011011100010", 
    33 => "10111110100101110101111110111111", 
    34 => "10111010111001011111100101111011", 
    35 => "00111100110111100100101110100110", 
    36 => "00111101000001101011110010011011", 
    37 => "00111110010000001101100000111111", 
    38 => "00111101111011110110100100110100", 
    39 => "00111110100100110000111101111110", 
    40 => "00111101110011100010101100010100", 
    41 => "00111110010011100001000111110101", 
    42 => "10111110011100110111101110100010", 
    43 => "10111110010000011010000111010010", 
    44 => "10111110001000111011111111000001", 
    45 => "00111100110111111010110000101010", 
    46 => "00111110000100110000101000110100", 
    47 => "10111100001000000000010011011111", 
    48 => "10111101011101000011000100000000", 
    49 => "10111110100010001001100101110001", 
    50 => "10111101001100001110011000010001", 
    51 => "00111110100010011110011011011000", 
    52 => "10111110000110111100101110100100", 
    53 => "00111110000011100101011110101010", 
    54 => "00111110000111000111101111111001", 
    55 => "00111101111011110000011010101010", 
    56 => "00111101111010101100111101111110", 
    57 => "10111101001001011111010100010100", 
    58 => "00111110000110100001110011101000", 
    59 => "10111110000000101010010001011000", 
    60 => "10111110000001101111010101011001", 
    61 => "00111110010011001000001000011001", 
    62 => "00111100011100100001000011110110", 
    63 => "10111110010000011111001111111101", 
    64 => "00111101110101101101100110110111", 
    65 => "00111110101010110010001111100110", 
    66 => "00111110010100101010000111000000", 
    67 => "10111110000101011000000111100100", 
    68 => "10111110001101001000000110111110", 
    69 => "10111100100010111110111011011110", 
    70 => "00111110001010001101101001111101", 
    71 => "10111110010011101100011000011110", 
    72 => "00111101111000000110000001111011", 
    73 => "10111101111010000111001001100011", 
    74 => "00111110100101101101011110010011", 
    75 => "10111110000111111110011010100011", 
    76 => "00111101011110000000111000111100", 
    77 => "00111110000010011001001011100101", 
    78 => "00111101100010101110101011000111", 
    79 => "10111101101011001101011010100111", 
    80 => "00111101000101000110111001101101", 
    81 => "10111101110001100100101101001111", 
    82 => "00111110011001110100101011001001", 
    83 => "10111101100010011011111010111000", 
    84 => "00111100100010101111111111001000", 
    85 => "00111101110101011001000001101010", 
    86 => "10111101100010101011011110001100", 
    87 => "00111110011110011100110101100111", 
    88 => "00111110011011101000110001101101", 
    89 => "00111110001001101101100101011010", 
    90 => "10111110010101010010010111110001", 
    91 => "10111101100110110001110110011111", 
    92 => "00111110010101110101100110011011", 
    93 => "00111100101100000010101100000011", 
    94 => "10111110100111010011111100010000", 
    95 => "10111110011100110000001110101000", 
    96 => "10111101100010011100111010011010", 
    97 => "10111110110101100111001101011001", 
    98 => "10111101111001111000001110111011", 
    99 => "10111101111001100111111100110011", 
    100 => "10111101100011010101101100101000", 
    101 => "00111101100111010101111111010011", 
    102 => "00111110011110110111010010111110", 
    103 => "00111110001100010000110001110100", 
    104 => "10111100100000011100011101100101", 
    105 => "10111011000100010111111101100011", 
    106 => "10111110111010011000101100000111", 
    107 => "10111110101100000110111000100000", 
    108 => "10111110011000100010000111110110", 
    109 => "10111101100100101010000100011000", 
    110 => "10111101001111000110001100011011", 
    111 => "10111101110101010001010001001001", 
    112 => "10111110101011001011010111110000", 
    113 => "10111110001011000110011001010100", 
    114 => "00111101000010011010110001000100", 
    115 => "00111110101010001010110000010110", 
    116 => "10111101010011110010100010111010", 
    117 => "00111110011101101110110011111100", 
    118 => "00111101110101111010001000010010", 
    119 => "10111110100110101100001010101110", 
    120 => "10111110000000101010101011100010", 
    121 => "10111110101110110001001011010111", 
    122 => "00111110000000010001000110001001", 
    123 => "10111110000111111000010010111000", 
    124 => "00111110001100010001100000101000", 
    125 => "00111110100000011001101111111100", 
    126 => "10111100010011101110011001110110", 
    127 => "00111101101110111110101110101110", 
    128 => "00111110001101011111000001000001", 
    129 => "00111110010011110101111010011100", 
    130 => "00111101100110000101111100111110", 
    131 => "10111110100110001000001100011011", 
    132 => "10111110010110101110100110110010", 
    133 => "00111101110110000010100001111001", 
    134 => "10111110110111100010011111111101", 
    135 => "00111101011101001000001111110010", 
    136 => "10111101110000100110000111111111", 
    137 => "10111110100110011100001000010010", 
    138 => "00111101111100001111101010001111", 
    139 => "10111101100100001001101111111110", 
    140 => "10111110011111011010010101010100", 
    141 => "10111110100011010011011100111011", 
    142 => "10111110011001001111010000011011", 
    143 => "10111110001010101000110110011111", 
    144 => "10111101100110100111111001100110", 
    145 => "10111101110001000111001110010000", 
    146 => "10111110010100100111101000110101", 
    147 => "00111101010110111100000101100100", 
    148 => "10111110110001111010010011000111", 
    149 => "00111101101011101111110010010110", 
    150 => "10111110001101101010101100011010", 
    151 => "00111101111000111001101101100010", 
    152 => "10111100000000111111001110001011", 
    153 => "10111101010010010011001001010111", 
    154 => "10111100101101101011100110101010", 
    155 => "10111110100110010101000011010101", 
    156 => "10111110101100010101010100011101", 
    157 => "00111101110100111111110010011101", 
    158 => "00111101101111110000000001011110", 
    159 => "10111110011011111100110000101100", 
    160 => "10111110100100001110111000110001", 
    161 => "10111110101101111000001111100001", 
    162 => "10111110100100101101011000011111", 
    163 => "10111110001110110101111111100101", 
    164 => "00111101110010001011001101001010", 
    165 => "00111101010000010011111010111011", 
    166 => "00111100101100011101001101011001", 
    167 => "00111101101101011011000000001100", 
    168 => "00111101110010011111001101010111", 
    169 => "10111110110010110011010100011010", 
    170 => "10111110110111010101010010010110", 
    171 => "10111110111011111000111110001101", 
    172 => "00111110001001000100000111111100", 
    173 => "10111101011100011000001100100101", 
    174 => "10111110100001010110111110010111", 
    175 => "10111110110110011001000100100111", 
    176 => "00111101001011011011001000010010", 
    177 => "10111110110001101100110011011111", 
    178 => "10111110000010100101100101011100", 
    179 => "00111100010100100000101011010111", 
    180 => "10111110100001101100111011100001", 
    181 => "00111110100111001110110110110110", 
    182 => "00111110000110011011010001011011", 
    183 => "10111110000001110000000001000011", 
    184 => "10111110111000100101101010100111", 
    185 => "00111101100100010101000110101000", 
    186 => "00111100110110111011111001101100", 
    187 => "10111110000011111101100011101110", 
    188 => "00111110011100000110101000010101", 
    189 => "00111101011110001110101100001011", 
    190 => "00111101010101011101000100111101", 
    191 => "00111110000000000111110111001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibSr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibSr is
    component conv_2_conv_2_weibSr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibSr_rom_U :  component conv_2_conv_2_weibSr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


