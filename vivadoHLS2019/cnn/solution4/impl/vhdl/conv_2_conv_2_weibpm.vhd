-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibpm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibpm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011010110011101100110011", 
    1 => "00111101110110100101001110101101", 
    2 => "10111110010100010101110100111010", 
    3 => "00111101011010111101001110100110", 
    4 => "00111110000111000100101000001100", 
    5 => "10111011101011000100101000001100", 
    6 => "00111101011110010001110101110101", 
    7 => "10111011000100000010001100101001", 
    8 => "00111110000001101111000000010010", 
    9 => "10111101101100011110101101100100", 
    10 => "00111110000110010110010100110110", 
    11 => "00111100011000001100001011011000", 
    12 => "00111110011000101011111010101111", 
    13 => "00111110000110111011010101101100", 
    14 => "00111100001101001001100001010001", 
    15 => "00111100101011111100010011000010", 
    16 => "00111101001000010100000000001010", 
    17 => "10111101101110101010000111110000", 
    18 => "00111101011111110111100100110100", 
    19 => "10111110111001110010111101001001", 
    20 => "00111110000111011110111110111100", 
    21 => "00111101010110001000011111000001", 
    22 => "10111101010001101110110010001000", 
    23 => "00111101000011010011100111001100", 
    24 => "00111100111010110111100010100010", 
    25 => "10111100100100111101110010101011", 
    26 => "10111110000010101010111001010110", 
    27 => "10111101111111110010100000100111", 
    28 => "00111101111000001000001100001111", 
    29 => "10111110011101111110011100010001", 
    30 => "00111100101010010010010100001001", 
    31 => "10111110111010111111111000010011", 
    32 => "00111101100000011010001010010010", 
    33 => "10111011010100001100100000100000", 
    34 => "10111101101000100101000001110010", 
    35 => "00111101101100001010010100101000", 
    36 => "10111110010000011110000111100010", 
    37 => "00111110010110111101010011110000", 
    38 => "00111101101111010000101111101001", 
    39 => "00111101110010100001001001111010", 
    40 => "10111110100101111000111000100000", 
    41 => "10111110011001101011010000111111", 
    42 => "10111100101000110101010100010010", 
    43 => "10111101010010000100010010101100", 
    44 => "00111011000010011011101001110111", 
    45 => "10111101011010000000000001101011", 
    46 => "00111101010101010001011001000001", 
    47 => "10111101111011101010000100111111", 
    48 => "10111110101100111110010101011110", 
    49 => "10111110000000101011000110110011", 
    50 => "00111110001101101010110001000101", 
    51 => "00111110100101000000111111001010", 
    52 => "10111101110100110101110010111001", 
    53 => "10111101101001000001111010011101", 
    54 => "10111101101001011011110010010000", 
    55 => "10111101000111011100000011101111", 
    56 => "00111110001000101011001001011100", 
    57 => "10111110011101111011111001111101", 
    58 => "10111101000000111001110000111000", 
    59 => "00111100111000000000011111111001", 
    60 => "10111101010100101010110101010011", 
    61 => "10111100100011101000101100111110", 
    62 => "00111110001111100001101110111110", 
    63 => "10111101100011101010110111110101", 
    64 => "10111101111000101000011011001001", 
    65 => "00111110010100111010111001001110", 
    66 => "00111101000001001111010111010111", 
    67 => "10111100111111000000111101110100", 
    68 => "00111101100100010000111101101001", 
    69 => "00111100111110001011111110001010", 
    70 => "00111101000001000111010100001001", 
    71 => "10111101101011011010111111100111", 
    72 => "00111101100110000101010001000011", 
    73 => "10111101011101001010111110101010", 
    74 => "00111110001110110000101011110111", 
    75 => "00111101000011000100101110010110", 
    76 => "00111110000100101101001010011111", 
    77 => "00111101100000101000000001100111", 
    78 => "10111100011100010011000000101100", 
    79 => "10111100110010111101011011111111", 
    80 => "10111101100001101100111111001100", 
    81 => "00111101010101011000101000001101", 
    82 => "00111100111110000000010011111000", 
    83 => "10111101011011110111110110011111", 
    84 => "00111100101100011000111110110010", 
    85 => "00111101101100110011011100100101", 
    86 => "00111100101111101010110100011001", 
    87 => "00111101101001010101000111110110", 
    88 => "10111101011000110101111110001011", 
    89 => "10111100101000101001000010011001", 
    90 => "10111101011000001101101100010001", 
    91 => "10111110000000101000001011100110", 
    92 => "00111101010110110010101101001111", 
    93 => "10111101101101110110101110000101", 
    94 => "00111101100010110010011000000101", 
    95 => "00111101001101110111101000000101", 
    96 => "00111101001101001010001101001100", 
    97 => "10111101000000111010011000111101", 
    98 => "00111101000111000110001010100100", 
    99 => "10111110010111100101100011011101", 
    100 => "10111100000110000000011011000000", 
    101 => "00111101100000100001100001110000", 
    102 => "00111110011100110011111010100011", 
    103 => "10111010111110001111011110110010", 
    104 => "10111101010101001001110011111111", 
    105 => "10111100110111110000000100011001", 
    106 => "00111011110010110110001000100110", 
    107 => "10111110010001000101010011001011", 
    108 => "00111101111101111110001111011011", 
    109 => "00111101110011011101010011110111", 
    110 => "00111110001011101000001011101100", 
    111 => "00111101001101010101001001100001", 
    112 => "00111110010100110011100001000011", 
    113 => "10111110100000010010011011111100", 
    114 => "00111110000001100000010101000101", 
    115 => "00111101101101011001000110010001", 
    116 => "10111101011100111101001100101110", 
    117 => "00111101010101011100000010000011", 
    118 => "10111101011110001001111011000010", 
    119 => "10111100010001110101110110111001", 
    120 => "10111110010100011101111001110111", 
    121 => "10111101100000010111000111001111", 
    122 => "00111110001001001100110111010011", 
    123 => "10111101101011011100001101000101", 
    124 => "00111101110101001111000001111110", 
    125 => "10111110001100000110010100100101", 
    126 => "10111101010001011001010011011001", 
    127 => "10111101100000010101111100101110", 
    128 => "00111100100100001111010100010010", 
    129 => "10111110001011011111110111000110", 
    130 => "10111101110110101000111011011110", 
    131 => "00111100111111000110100000010010", 
    132 => "00111101001110001110011100111011", 
    133 => "10111011011101000100011010101000", 
    134 => "00111101111110100111110110100111", 
    135 => "10111100110001011001011101011101", 
    136 => "10111101101111110111011101100100", 
    137 => "00111100000111111100101001111111", 
    138 => "10111110010011001100011000110100", 
    139 => "00111101100101011000100001100000", 
    140 => "00111110011101100110111100111001", 
    141 => "00111100111111110000111010110110", 
    142 => "10111101100101010101110011100110", 
    143 => "00111101000100101001010110101000", 
    144 => "10111110010001000111011100000101", 
    145 => "10111101100100011001111111100111", 
    146 => "10111101000111011101001101010110", 
    147 => "00111101011110101111001100010100", 
    148 => "10111110001001001100001100110101", 
    149 => "00111110001111000010111110111011", 
    150 => "10111101111011010010110101011011", 
    151 => "00111110000100011010111011101011", 
    152 => "00111100100010111010000111100011", 
    153 => "00111110011110110000100000011001", 
    154 => "10111100100001110001101001101000", 
    155 => "00111101111100011111100000100100", 
    156 => "10111101000001000111101001001011", 
    157 => "10111101101110101010101011100011", 
    158 => "10111101011011011111101100000111", 
    159 => "00111101100011010011010000011111", 
    160 => "00111101110111111011001010001011", 
    161 => "10111101100001110001101010101011", 
    162 => "00111101100100001101011011000001", 
    163 => "10111110100110100000000011111000", 
    164 => "00111110001100001000100000110000", 
    165 => "10111100100100010000011100000111", 
    166 => "00111101101110100001101100111010", 
    167 => "10111110010010000100111111010110", 
    168 => "10111100100001011100001000010101", 
    169 => "00111110000010010110000010000101", 
    170 => "00111100000011000000010011111111", 
    171 => "00111101101011001010101111000010", 
    172 => "00111100100010110111010001111011", 
    173 => "00111101010100011100011011110000", 
    174 => "00111101100110111001010110100011", 
    175 => "00111110000100010001000110101011", 
    176 => "00111101111000100011111100111100", 
    177 => "10111110000110001101010100101100", 
    178 => "00111110000111010101011101100100", 
    179 => "10111110000101100110010100000011", 
    180 => "00111101111010000101100111001111", 
    181 => "00111110000001011000010101111100", 
    182 => "00111110000011001000010100111100", 
    183 => "00111110011011111100101001011111", 
    184 => "10111110010001110110101010100110", 
    185 => "10111101000011100111000110110011", 
    186 => "00111110000110011111011100100101", 
    187 => "10111101011011011111001100001100", 
    188 => "00111110010100010000111100100000", 
    189 => "00111110011001111100110111011101", 
    190 => "10111110010110111110111110110000", 
    191 => "10111110000001101110110100000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibpm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibpm is
    component conv_2_conv_2_weibpm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibpm_rom_U :  component conv_2_conv_2_weibpm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


