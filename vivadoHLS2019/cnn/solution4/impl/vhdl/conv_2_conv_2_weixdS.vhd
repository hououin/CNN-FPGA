-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weixdS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weixdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000010001001001110010100", 
    1 => "10111110000100100001110001111010", 
    2 => "00111100011010000010100011110100", 
    3 => "00111101111011001010100100010010", 
    4 => "10111101000010010111100110101111", 
    5 => "10111101110111001110001010111001", 
    6 => "10111101111100000000111110001101", 
    7 => "10111101101010000100000111110101", 
    8 => "00111101110101111001110100111011", 
    9 => "10111101111100110110110000111100", 
    10 => "10111101010111001001100000001100", 
    11 => "10111110000100000001100011110001", 
    12 => "10111110001111011101010001011111", 
    13 => "10111101001101101011101100010100", 
    14 => "00111100110100100100000010111100", 
    15 => "10111101100011111001000111011010", 
    16 => "10111110100010011101111100001001", 
    17 => "00111011000010011000101000110101", 
    18 => "00111101111011001101011010010011", 
    19 => "00111110000011000111100000110010", 
    20 => "10111101100100111101110011110010", 
    21 => "10111101100001100111001111001011", 
    22 => "10111101100011010001010111010101", 
    23 => "10111100111111011010101010001001", 
    24 => "10111110010111001100001010101010", 
    25 => "10111110001110110000101101110101", 
    26 => "10111101101011010101001010111100", 
    27 => "00111100110100010011111110111111", 
    28 => "10111100001100011001110111100111", 
    29 => "10111101101100111001010101000100", 
    30 => "10111101100001010101001101110110", 
    31 => "00111110000001000011100000001111", 
    32 => "10111101101011000001001101011101", 
    33 => "10111101111101111010001001000001", 
    34 => "10111101110001001011010111101011", 
    35 => "00111110100000001101111100100110", 
    36 => "10111110011000011100011101101010", 
    37 => "10111100011001101101100110111000", 
    38 => "00111100110101101010111110100010", 
    39 => "10111100011110001100001111111110", 
    40 => "10111100101001011000111100001011", 
    41 => "10111101110001101110110010001111", 
    42 => "10111100000011100111101101111111", 
    43 => "00111101010101111011011100111100", 
    44 => "00111011001001011000010010110111", 
    45 => "10111110000100101011001000101010", 
    46 => "10111100100010100100011111000000", 
    47 => "10111101100110100001010010111110", 
    48 => "10111011110110010101000100101101", 
    49 => "10111110100101000010111011100110", 
    50 => "10111110011011000100110011111101", 
    51 => "10111110000100000101011111101111", 
    52 => "10111110001100100000111101011010", 
    53 => "00111110000100110111110110000111", 
    54 => "10111100010011110011100101000101", 
    55 => "10111101100010110101011011011001", 
    56 => "00111101010000010000111001110001", 
    57 => "10111110000011001100010000011101", 
    58 => "00111101100111111000000010110000", 
    59 => "00111101000001111001111110010010", 
    60 => "00111101111011111101000111011110", 
    61 => "00111101100111001001000101001110", 
    62 => "10111101101111010101110111000000", 
    63 => "00111011101111101101110101010010", 
    64 => "10111110011010001110111001000101", 
    65 => "10111101001000011101010011010101", 
    66 => "10111101101101001101000100101000", 
    67 => "10111101111111011000000110110000", 
    68 => "10111101101001010100110010100001", 
    69 => "10111101000001011011011011110010", 
    70 => "10111110100101101011011111100100", 
    71 => "10111101101111011010001010100000", 
    72 => "10111101110010101111010111111000", 
    73 => "00111101100110010110001011100101", 
    74 => "10111101010000111111000101010110", 
    75 => "10111101001001000010011001101001", 
    76 => "10111110010100010000011101011001", 
    77 => "10111110011110111111111010101011", 
    78 => "10111101010010101111011111010111", 
    79 => "10111101011000011100101010001110", 
    80 => "10111110100000001011110010111100", 
    81 => "10111110000111100101101101000100", 
    82 => "10111110100111001001001001010001", 
    83 => "10111101001000100101010000001011", 
    84 => "10111110001000110010101011001010", 
    85 => "10111101110010101011011010011000", 
    86 => "10111110111110011101000000110001", 
    87 => "00111101100111011100101111010010", 
    88 => "10111110110000110111110110101001", 
    89 => "10111101001100101000110101000011", 
    90 => "10111101011100010000111010001000", 
    91 => "00111101010010101101111100100011", 
    92 => "10111101100001101110001110111100", 
    93 => "00111101000111110010111111011111", 
    94 => "10111101110101100110111110101111", 
    95 => "00111110001010010111111001011001", 
    96 => "10111101100000011000001110000000", 
    97 => "10111110101010101011000001010011", 
    98 => "10111100101011111110101100100011", 
    99 => "00111101000100110010100100001001", 
    100 => "10111110011100101001111110101110", 
    101 => "00111100110001101010011101110101", 
    102 => "00111100000110000100110100101001", 
    103 => "10111101001000001011001100001101", 
    104 => "00111100110010010100000101100110", 
    105 => "10111110000100110111001110111000", 
    106 => "10111110101100011100000100001010", 
    107 => "10111110000011110001011101110111", 
    108 => "10111100100111011010101110010101", 
    109 => "10111101100111111111001011110101", 
    110 => "00111101001100011011100111111010", 
    111 => "00111101001100001101011110110101", 
    112 => "00111101110010111101011001100110", 
    113 => "10111101010101000000000001101111", 
    114 => "10111110110011000100010101010011", 
    115 => "00111101000110101101100001101010", 
    116 => "10111110000010010000010000111001", 
    117 => "00111110011010101011000100101001", 
    118 => "00111101000110100111100001110111", 
    119 => "10111101110111000100111000110101", 
    120 => "10111101011101111000000111100111", 
    121 => "10111101001011010001011000010011", 
    122 => "00111101101000111101010010010101", 
    123 => "10111101100010101001000010101001", 
    124 => "10111110010010111101101000111000", 
    125 => "10111110001100010100000100111001", 
    126 => "10111110001010001101011011000111", 
    127 => "10111101110000101011111100011100", 
    128 => "00111100100000000001000101110001", 
    129 => "10111100100010000101001100011010", 
    130 => "00111101100000111101010000001011", 
    131 => "00111101100111001100101101111011", 
    132 => "10111110101100001011100110110011", 
    133 => "10111101000011110110101010011011", 
    134 => "10111101100001101001010101010110", 
    135 => "10111110011101100110110010000000", 
    136 => "10111101101010100010100010110011", 
    137 => "10111100100010010100010101101101", 
    138 => "10111011101000010111101001011010", 
    139 => "10111101110010011101110100000001", 
    140 => "10111101110000000111111101101101", 
    141 => "10111110000111011010111101011101", 
    142 => "10111101111101010110011111010000", 
    143 => "10111101111001111011110010111000", 
    144 => "00111101000111001100100001110001", 
    145 => "10111100110001101111011010100101", 
    146 => "10111101110001001101100001110101", 
    147 => "10111101010110011101101010100111", 
    148 => "10111110001100001100011001110100", 
    149 => "00111110001010110100010000100100", 
    150 => "10111101011100111101100110011011", 
    151 => "10111101110101011001110100111011", 
    152 => "10111110001011101000100110100111", 
    153 => "10111011010001001110000001100100", 
    154 => "10111100101011001111000000011011", 
    155 => "10111100001111100010001111011001", 
    156 => "00111101001001101011100100101100", 
    157 => "00111101110011100100110101101000", 
    158 => "10111101101100000110000100001000", 
    159 => "00111110000101000000001010011001", 
    160 => "10111110000111010011001100111100", 
    161 => "10111101110001011110011101011011", 
    162 => "10111110001001110001000000001101", 
    163 => "10111110010100000110011001110010", 
    164 => "00111100000100011111111101111100", 
    165 => "00111100100110111100000010111100", 
    166 => "00111101000101000101000110001101", 
    167 => "10111101111010010000101100100011", 
    168 => "10111100110101101101001000110100", 
    169 => "00111101011000101100011110000010", 
    170 => "10111101000111011000100000001110", 
    171 => "10111100101110010100000011001011", 
    172 => "10111101011011010011011110010011", 
    173 => "10111101111011010100101011110100", 
    174 => "00111101001101011101110010000100", 
    175 => "00111101101100000010001000100111", 
    176 => "10111011111001110110001101110011", 
    177 => "10111110001000001000010011101011", 
    178 => "10111110111011000111111001001001", 
    179 => "00111101100100001000000011000010", 
    180 => "00111110001011010111100010111100", 
    181 => "10111011111010101100101010011101", 
    182 => "00111101111101010000001010101001", 
    183 => "00111101011010001001011011111010", 
    184 => "10111100011101110001111001001111", 
    185 => "00111101100111110001010111011111", 
    186 => "00111101111010010011000001001011", 
    187 => "00111101101110010110001011010001", 
    188 => "10111110101110010100011000000111", 
    189 => "10111110001100001100000011000010", 
    190 => "10111101100100111111011001001110", 
    191 => "10111101101111000111000111000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weixdS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weixdS is
    component conv_2_conv_2_weixdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weixdS_rom_U :  component conv_2_conv_2_weixdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


