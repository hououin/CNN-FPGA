-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weivdy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weivdy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100001110100010100101100", 
    1 => "00111101010010000000000000110110", 
    2 => "00111101101110000100100001111111", 
    3 => "00111010111111111000111100110011", 
    4 => "10111101111011011000111000110110", 
    5 => "10111101000100000111011000000000", 
    6 => "10111101100001101111101001110001", 
    7 => "10111100101100111001001100000100", 
    8 => "10111100111011001100001000010110", 
    9 => "10111100101010100101111001011100", 
    10 => "00111101100011001100111000100110", 
    11 => "00111101001011010110110110111001", 
    12 => "10111101110101100100010001011010", 
    13 => "10111110001111011010000111001000", 
    14 => "10111110000100011010001100000011", 
    15 => "10111101101111100111101110010111", 
    16 => "00111100100100000100010100010110", 
    17 => "00111100111100100100101010101010", 
    18 => "10111110010110001110110100001110", 
    19 => "10111101001001110001110100001100", 
    20 => "10111101111110001100011001100011", 
    21 => "10111110100010000100111101011000", 
    22 => "10111110001010110100011110001101", 
    23 => "10111100101110010111110010000101", 
    24 => "00111100101001010100100111111000", 
    25 => "10111100011001001110011010010011", 
    26 => "10111101111101001011010101011100", 
    27 => "00111110000000010000010111110010", 
    28 => "10111100011000001111111011110000", 
    29 => "00111101001101001000001011100010", 
    30 => "10111100001111111010000011100111", 
    31 => "10111110000111011001000001110101", 
    32 => "10111100101111110100101101011101", 
    33 => "10111110001100001101011111000001", 
    34 => "00111101100010011011110001111010", 
    35 => "00111110000111000011101011111100", 
    36 => "00111101100111001111000010100111", 
    37 => "00111110001001110001101110101001", 
    38 => "10111100100111101011111001101011", 
    39 => "00111110000010001000001111111110", 
    40 => "10111101100001111100000010110010", 
    41 => "00111101011101011100011010111111", 
    42 => "00111100011100010110011001100000", 
    43 => "00111100011110001101101100000011", 
    44 => "00111100101110000110000010110111", 
    45 => "10111100101110001100101101000010", 
    46 => "00111101101000101010100100010101", 
    47 => "00111100001011101000111001011000", 
    48 => "00111110000000111000100101100000", 
    49 => "10111110010101010001001100110100", 
    50 => "10111101001110010000110000011001", 
    51 => "10111101011011010101101011001011", 
    52 => "10111110100001001010101110100011", 
    53 => "00111100001011010001001011110111", 
    54 => "00111100111011111001010001111101", 
    55 => "10111101110110110111000101010111", 
    56 => "10111110000000100010001010001011", 
    57 => "00111100110111101100100010101110", 
    58 => "10111101110000111010111000100101", 
    59 => "00111101100011110101001100110111", 
    60 => "10111101011001001110110010001001", 
    61 => "10111101100000111100100111100100", 
    62 => "00111101101111100010000000111000", 
    63 => "10111100010010000010011000100000", 
    64 => "00111100101001011000100010101010", 
    65 => "10111100101100011101000110011100", 
    66 => "00111110000010110010100010001011", 
    67 => "10111101010100000001001100111101", 
    68 => "10111101101001011011100000001000", 
    69 => "00111101110000110000111100000011", 
    70 => "00111100101001010100000100101110", 
    71 => "00111100000100110001100011000001", 
    72 => "10111011111001011111000001100011", 
    73 => "00111101111010111001000011101001", 
    74 => "10111101001111011101010101101111", 
    75 => "00111101011010010001000011001001", 
    76 => "10111101101000111111011100111000", 
    77 => "10111110000000110111011111100011", 
    78 => "10111101101111100100001110111010", 
    79 => "00111101000110100100100001110001", 
    80 => "00111101010011010111011111101101", 
    81 => "00111101101101100000110011111110", 
    82 => "10111101110110000010000100110000", 
    83 => "00111101111001110100100100001110", 
    84 => "10111110011101111001100000110010", 
    85 => "10111110001101111101000010011001", 
    86 => "00111100111010101111100001111010", 
    87 => "10111110010000101000010110011100", 
    88 => "10111100110111111001100111010111", 
    89 => "10111101001010100001000010100001", 
    90 => "10111100100101101010001010011011", 
    91 => "10111110011010100110000010111110", 
    92 => "10111101110001101101111010110010", 
    93 => "00111101111001110110111110110011", 
    94 => "10111101110001000110001010000110", 
    95 => "00111100010001100101101111001111", 
    96 => "10111101110001111011001011010101", 
    97 => "10111100101111110010111101111011", 
    98 => "10111101000110100011101000101110", 
    99 => "00111100100110011000111110011001", 
    100 => "00111100100101110000111101100110", 
    101 => "00111011001110011111110000110010", 
    102 => "10111101011001100010100011001100", 
    103 => "00111100101100001101111010111010", 
    104 => "10111100000110010011100100100001", 
    105 => "00111101110100100001110111100011", 
    106 => "00111101001001010001100100100101", 
    107 => "10111100110111101001110010001001", 
    108 => "00111100110100010111110111100001", 
    109 => "10111100010111110110100010010010", 
    110 => "00111100001100111101101010111001", 
    111 => "10111101011010101110100010111011", 
    112 => "00111110000001001011001011111101", 
    113 => "10111110001010000101000100110101", 
    114 => "10111110000000101110110011011001", 
    115 => "00111101011110100100010011111010", 
    116 => "10111101011010101010100110001011", 
    117 => "10111110010101110010001011011111", 
    118 => "00111110000001111110111000001100", 
    119 => "10111100110011111101001101010011", 
    120 => "10111101010100111100110100010111", 
    121 => "10111101100000001100110010000111", 
    122 => "00111101000001000110101101000110", 
    123 => "10111011110010111010101111000010", 
    124 => "10111110010011100010010010000101", 
    125 => "10111101000010001111010101011111", 
    126 => "10111101010100001100100010000101", 
    127 => "00111010110111000110101001010110", 
    128 => "10111100001000000100111001101111", 
    129 => "10111100111100100111010110111001", 
    130 => "10111100101101010100001010101011", 
    131 => "10111101101110010101011100100100", 
    132 => "10111100011111100110101010000010", 
    133 => "10111100100110111111000000011100", 
    134 => "10111110011000110100100001111111", 
    135 => "10111101010111010010111100011010", 
    136 => "00111100000100111010111000101110", 
    137 => "10111101101101010110001001001011", 
    138 => "10111101100011111101111000001011", 
    139 => "10111101111001101010001110001001", 
    140 => "10111110011110110010011001111110", 
    141 => "10111101000011100011101100000100", 
    142 => "10111100001000101110011010000001", 
    143 => "00111110000101001000001010010000", 
    144 => "00111100010010110101111100110010", 
    145 => "10111101010001000001100000011011", 
    146 => "00111100101101110100111011110111", 
    147 => "10111101100100000111011100010011", 
    148 => "10111110001000011011100001001101", 
    149 => "10111100101011111100111110101111", 
    150 => "00111101010001111001001111110100", 
    151 => "10111101100010010111010101010011", 
    152 => "10111101000100111000011110000101", 
    153 => "10111011111110110010011111001010", 
    154 => "00111101100110110100101010100010", 
    155 => "10111110011100101100011101100100", 
    156 => "00111101110001010111010011001101", 
    157 => "00111101011001111001001000001111", 
    158 => "10111110000101010110001100011001", 
    159 => "00111101011011100100000101101100", 
    160 => "10111110100000100100011000110011", 
    161 => "00111110000000111101011001100001", 
    162 => "10111101101010100011000111101011", 
    163 => "10111101011111111100101000000001", 
    164 => "10111011000001001111110101001001", 
    165 => "10111011101010001011111001000010", 
    166 => "10111110000011110100110101110000", 
    167 => "00111101111101111101010101000010", 
    168 => "10111101100011001100001000101001", 
    169 => "10111101100000100000000000010001", 
    170 => "00111110001011001000011001010110", 
    171 => "00111101100110000110000010100010", 
    172 => "00111100111010101101000101010110", 
    173 => "10111110000010011000011000010001", 
    174 => "10111100111000000000001001011011", 
    175 => "10111101001010000001101110100101", 
    176 => "10111101111000010011000100101001", 
    177 => "00111101000010011101000111011010", 
    178 => "10111110001001000000001010111001", 
    179 => "10111101010111110011101000001100", 
    180 => "10111011101111111110011111100110", 
    181 => "10111110010000010110110111100101", 
    182 => "00111101100001001111101100110010", 
    183 => "10111011100011101101011011010010", 
    184 => "10111101100100011111111100100100", 
    185 => "10111101101101110010011011010010", 
    186 => "10111101110010001110010110100101", 
    187 => "00111101000110011111100000010001", 
    188 => "00111100111010010111110011010010", 
    189 => "00111101011000001001111011000011", 
    190 => "00111110000101100011001110111011", 
    191 => "10111001110111000101101111010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weivdy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weivdy is
    component conv_2_conv_2_weivdy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weivdy_rom_U :  component conv_2_conv_2_weivdy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


