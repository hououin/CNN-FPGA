-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiShg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiShg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000001001100101011011100", 
    1 => "00111100001000110111101001111011", 
    2 => "00111110001000000000000000110100", 
    3 => "00111101110000001011001110110110", 
    4 => "10111110000010101101111101010010", 
    5 => "00111011110011011110101101010100", 
    6 => "10111101001000100101010000010010", 
    7 => "10111100100111001011000101000001", 
    8 => "00111101010110011110111001001010", 
    9 => "00111101111000011000100110001100", 
    10 => "00111101100011101111010100011000", 
    11 => "00111110001100110000101111100110", 
    12 => "00111101110000010100010010110100", 
    13 => "10111110010000100110011100000111", 
    14 => "10111100100111111011100010100000", 
    15 => "00111100111000110111111011111010", 
    16 => "00111101100110000010000101000011", 
    17 => "10111101101100100001011110001011", 
    18 => "10111101000001010100010011111000", 
    19 => "00111101100010111101000000000011", 
    20 => "00111100111000001000001011000101", 
    21 => "10111110011001100111010101011001", 
    22 => "10111110011000111101011001001000", 
    23 => "10111011110111110011001101101001", 
    24 => "10111101111010000100101000011010", 
    25 => "00111101001010001101110110110100", 
    26 => "10111100100001000000011100010001", 
    27 => "00111110001001100010010010110110", 
    28 => "00111101101110100100100010110001", 
    29 => "00111101010010010101101101001110", 
    30 => "10111101001101000101001011111001", 
    31 => "10111101001000011010101000100100", 
    32 => "10111110000000110101110000001110", 
    33 => "10111110011011101001001100000100", 
    34 => "00111101110101110011010001000010", 
    35 => "00111101101111000100011010101010", 
    36 => "00111101111001111000111010011001", 
    37 => "00111110000101111101110001001011", 
    38 => "10111100001001000100111000100011", 
    39 => "10111101010000010011001001001011", 
    40 => "00111101101110001111000100111000", 
    41 => "00111110001100001000110110101000", 
    42 => "10111110001101111001010110100100", 
    43 => "10111101101011100111110101101111", 
    44 => "10111101011011001101111010101110", 
    45 => "00111101100001111101010100010000", 
    46 => "00111101011110000101000100001110", 
    47 => "10111101100111010011010000001111", 
    48 => "00111101100110000010100101110011", 
    49 => "10111110011001000111011101101111", 
    50 => "10111101101000011000001000011011", 
    51 => "00111101100011010110000010110100", 
    52 => "10111110010010001111101010111111", 
    53 => "00111101011001111110110101100010", 
    54 => "00111101010110100011000001111000", 
    55 => "10111101111001111001101000110000", 
    56 => "10111101100101111111100001100100", 
    57 => "10111010100011110001110010011010", 
    58 => "00111101101011001111011101100000", 
    59 => "10111100011111001101101001011110", 
    60 => "10111101111110100011110101010111", 
    61 => "10111110000101111000110110001101", 
    62 => "10111101001101001111111111001011", 
    63 => "10111110000000111001100111101100", 
    64 => "00111100010001100111110010100000", 
    65 => "10111101011000000000110000111000", 
    66 => "00111110000001100110010010010110", 
    67 => "00111101111111010101101011010001", 
    68 => "10111101101111100101101101000110", 
    69 => "00111101011010110011100100101001", 
    70 => "10111110000101101000010000001010", 
    71 => "00111101011000100011111000001000", 
    72 => "10111101001100111100010111101000", 
    73 => "00111101001101011000111101001001", 
    74 => "10111101100010100111010011010111", 
    75 => "10111110000011000001010110010000", 
    76 => "00111101011100010111101110101001", 
    77 => "10111110010001010000011111100000", 
    78 => "10111101101111010110101101110001", 
    79 => "10111101000101001111010010101111", 
    80 => "10111100100101000100000010001110", 
    81 => "00111110000111100100000100011100", 
    82 => "00111101101110101110011111011001", 
    83 => "00111110000110000110100011111110", 
    84 => "10111110100010110101010100001010", 
    85 => "10111110010110011101000001001101", 
    86 => "10111100100111000001000110000110", 
    87 => "10111110010010010101010010111000", 
    88 => "10111100100110001100000110010100", 
    89 => "00111100000010001010111101001001", 
    90 => "10111100011011001110101010100100", 
    91 => "10111110101011100001011000110010", 
    92 => "00111011100101111110101110010011", 
    93 => "00111101111001101010011111110100", 
    94 => "10111101101110101101101101101000", 
    95 => "10111101101011010101001011000100", 
    96 => "10111101101111010111001010001101", 
    97 => "00111101011010111010001000100100", 
    98 => "10111101000010111000010100100000", 
    99 => "10111101010001010101001111111010", 
    100 => "00111100101101000011101100101010", 
    101 => "10111101011111010101000000111010", 
    102 => "10111101011000010100010111010000", 
    103 => "00111101110000101000000100111011", 
    104 => "10111100111101100101111110000001", 
    105 => "10111101001011110001100100000101", 
    106 => "00111101010011100110101100010111", 
    107 => "00111110000010110100110111110010", 
    108 => "10111101010110010011001101001101", 
    109 => "00111101101010010001010010111101", 
    110 => "10111101111000011001010001111011", 
    111 => "10111100100100000001110100010001", 
    112 => "10111011110000001101111000000111", 
    113 => "10111110000010101001101101001110", 
    114 => "10111110010100100100111111101010", 
    115 => "00111110001100110010011001000100", 
    116 => "10111101001111100101011100001000", 
    117 => "10111110011111110101110110011000", 
    118 => "10111011010100010101111111010100", 
    119 => "10111100011110000000101011100010", 
    120 => "10111100111010011011011000110001", 
    121 => "00111101010110110000000011000101", 
    122 => "00111101011101001010010010010000", 
    123 => "00111101111110001011011100110100", 
    124 => "10111110001010010111100000100111", 
    125 => "00111100110101101011110111101001", 
    126 => "00111101111001100001001100111001", 
    127 => "00111101100110000001101111011010", 
    128 => "10111101110011110010100101010111", 
    129 => "00111101010111001101100111110000", 
    130 => "10111100100100110000010000001110", 
    131 => "00111011010010010101110110000000", 
    132 => "10111011001110111011101110100011", 
    133 => "10111110001000110011001101011110", 
    134 => "10111110010100011100111101001000", 
    135 => "00111101100001011101001001011001", 
    136 => "00111101100001011000000000101000", 
    137 => "00111101111110000010100110110000", 
    138 => "10111011111000111010000001100100", 
    139 => "10111101110010001101000001011111", 
    140 => "10111110000101010111011000011100", 
    141 => "00111101011111001100111000101011", 
    142 => "00111101110010010000000011101010", 
    143 => "00111110011010111010000000001001", 
    144 => "00111100011001101101000111100111", 
    145 => "10111101110101101100110010000011", 
    146 => "00111011001101011011101110011111", 
    147 => "10111110000100001101100010100100", 
    148 => "10111101110001111111101000111000", 
    149 => "10111101111001101010111001011111", 
    150 => "00111110000011100100011111111101", 
    151 => "10111110100010010000001111001011", 
    152 => "10111101101010111101011100110001", 
    153 => "10111011001001100000111110101110", 
    154 => "10111101010111000011100100010010", 
    155 => "10111110100111111001101011000101", 
    156 => "00111101001111011111110000111011", 
    157 => "00111101100111110010010001110100", 
    158 => "10111110011001000000111110110000", 
    159 => "10111100100001110010111001001010", 
    160 => "10111110100011100011010101101111", 
    161 => "00111100000000011010001110001110", 
    162 => "10111100110110111001010111110111", 
    163 => "10111101100100010000100011000010", 
    164 => "10111101110110110000011000011110", 
    165 => "10111101100000001010111001010011", 
    166 => "10111101011010001100111110000000", 
    167 => "00111011111010010100010001010000", 
    168 => "10111110000001000010100010111011", 
    169 => "10111110011100110001100101011000", 
    170 => "10111101010001011010111111100110", 
    171 => "00111101101010011100001101101100", 
    172 => "00111110001000111011111010000000", 
    173 => "10111011101110000011100111111000", 
    174 => "00111101011011010111001110000110", 
    175 => "10111011110101100101011110001011", 
    176 => "10111100100000101110111100001000", 
    177 => "00111101100100011100111101100100", 
    178 => "10111110010101000111111010100111", 
    179 => "10111101110111010110001100000011", 
    180 => "10111101100000100000111110011000", 
    181 => "10111110110111111001100111011000", 
    182 => "10111101011111010001010100101010", 
    183 => "00111100000111000001110000100110", 
    184 => "10111101110101110111100100000100", 
    185 => "10111101110111111110101001010011", 
    186 => "10111110010000001011100001001001", 
    187 => "10111101011111101010000011101000", 
    188 => "10111110011101100011001110011010", 
    189 => "10111101100011101111110000101110", 
    190 => "00111110000000110011111101110111", 
    191 => "10111100010000010100101110110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiShg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiShg is
    component conv_2_conv_2_weiShg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiShg_rom_U :  component conv_2_conv_2_weiShg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


