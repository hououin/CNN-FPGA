-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei5jm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei5jm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101111110000100111111110", 
    1 => "00111110010011011011000110100101", 
    2 => "10111010110101001111111000100100", 
    3 => "00111100101000000001000000100101", 
    4 => "00111101111000001111000010101100", 
    5 => "00111101110101000100100111101001", 
    6 => "00111101100110000010111010110011", 
    7 => "10111100100001001010101001101100", 
    8 => "10111100100101111101101110001010", 
    9 => "10111100110001010110011000110000", 
    10 => "00111101100011011111111110111111", 
    11 => "00111100110101100110010111011111", 
    12 => "00111101000111101001111101101110", 
    13 => "00111101101010001001100100001010", 
    14 => "00111110000000100100010001001001", 
    15 => "10111101000111110100111011010101", 
    16 => "00111110000000100001001100110000", 
    17 => "10111101011001010111010010011000", 
    18 => "00111110001001101011011010110101", 
    19 => "10111110010011101011100100101100", 
    20 => "00111101111011110011010000110100", 
    21 => "00111100100010000011110110010110", 
    22 => "10111110000001010000001010001001", 
    23 => "10111100100100101011110111100000", 
    24 => "00111100111001101000111111100101", 
    25 => "10111101110011010111101101011100", 
    26 => "10111101100001000101111010110111", 
    27 => "10111110010000000110100110000101", 
    28 => "00111101110000001110010100101100", 
    29 => "10111110000100111100001110110010", 
    30 => "00111101111101011000000000000101", 
    31 => "10111110100001101111001101010110", 
    32 => "10111101011111001111011011010011", 
    33 => "10111101001011110001011101111110", 
    34 => "10111101100111101000011001101110", 
    35 => "10111101101011110110001111001011", 
    36 => "10111110101001110000011100101010", 
    37 => "00111101100010101001011100100101", 
    38 => "00111100101010011001110011101110", 
    39 => "10111100101111010000001111001110", 
    40 => "10111110100110101101000110111100", 
    41 => "10111101110101100100101000001001", 
    42 => "00111101111101111000000010111110", 
    43 => "10111101010110001100110000111010", 
    44 => "10111100110000110100110100010110", 
    45 => "10111101101010001010110110011001", 
    46 => "00111101110010100011101111100011", 
    47 => "00111101001001100101111000111111", 
    48 => "10111101101000001100010100111101", 
    49 => "10111101110010011000111010111110", 
    50 => "00111100010011010101011101111000", 
    51 => "00111110110000000011010000101110", 
    52 => "10111101110010100000100011111100", 
    53 => "10111101000110011000111110000100", 
    54 => "10111101101010011011111000011010", 
    55 => "10111100101010101010101100110100", 
    56 => "00111101000011100000010110000100", 
    57 => "10111101010000111010010101110000", 
    58 => "10111100100100001111010001001111", 
    59 => "00111101110101010001011001111100", 
    60 => "00111101001111101110101011100000", 
    61 => "10111101101111010011100100100000", 
    62 => "00111101101001000010101010100000", 
    63 => "10111101100110000001011001101101", 
    64 => "00111100001110010101100011100100", 
    65 => "00111101111100101110000101010100", 
    66 => "10111101000100011100000000110101", 
    67 => "10111101110101001111010000000111", 
    68 => "00111101111111001111100000100010", 
    69 => "00111101010011010000111110111110", 
    70 => "10111100011001000010101100000000", 
    71 => "00111100100000110000101110010001", 
    72 => "10111100110110000011001010100110", 
    73 => "10111000110001111001101010100110", 
    74 => "00111101101111100011111001011000", 
    75 => "10111100110110100001000000000101", 
    76 => "00111100110111010100010011010000", 
    77 => "00111110000111000111011010110001", 
    78 => "00111101000000010101111011110110", 
    79 => "00111100110110001100001010000000", 
    80 => "10111101100000100001001101001011", 
    81 => "10111100111000000111010110010011", 
    82 => "10111101010001001110110101111110", 
    83 => "00111101000000001011011000101111", 
    84 => "10111100100011010010000101110001", 
    85 => "00111110000110011001111000101001", 
    86 => "00111101010100101110011100011000", 
    87 => "00111101011111100110010110001000", 
    88 => "10111101100001000111010110101110", 
    89 => "00111101100110110101101000100100", 
    90 => "10111110000101000101101000100110", 
    91 => "10111101011000111111110011101101", 
    92 => "10111101011111000000111101111101", 
    93 => "10111110001100111000001010000110", 
    94 => "00111101110011000011101010011000", 
    95 => "00111100010010010111110001100110", 
    96 => "00111101011000100011101101011100", 
    97 => "10111101011110011110100111111010", 
    98 => "00111010110000010010001010010100", 
    99 => "10111110010001101100101011001001", 
    100 => "00111101001111100101101101000111", 
    101 => "10111101100111001110111010011101", 
    102 => "00111110000000101100110111010110", 
    103 => "00111100101100011110110000101001", 
    104 => "00111101101100011100011101101010", 
    105 => "00111101001111010010011001111001", 
    106 => "00111101010010110010010110110101", 
    107 => "10111101110000100101100011100111", 
    108 => "10111100000011010010100001111000", 
    109 => "00111101111100101010010110011101", 
    110 => "00111110010001001010101000010011", 
    111 => "00111101111100011010010111111011", 
    112 => "00111110010010000001001011010100", 
    113 => "10111101111101000100011001101000", 
    114 => "00111101001000000000001001000010", 
    115 => "00111101101011010110101101111101", 
    116 => "00111101001100101010001101010101", 
    117 => "00111101110010101100011010010011", 
    118 => "10111101100010001101000000101000", 
    119 => "10111110010100111001111111111110", 
    120 => "10111100101101110001011000010100", 
    121 => "00111101010000011101101101001010", 
    122 => "00111101011000101000100010100111", 
    123 => "10111101001001011000001100110100", 
    124 => "00111101110101000100000101100110", 
    125 => "10111110011000000011011110001110", 
    126 => "00111101000001110111011000010011", 
    127 => "00111110000101011111111100101100", 
    128 => "00111101110001101100111001101010", 
    129 => "10111110011001111110110101000010", 
    130 => "10111110100101100011011100100001", 
    131 => "10111100011000111111010010000000", 
    132 => "00111101010011001101101110011110", 
    133 => "10111101100101101001111011001110", 
    134 => "00111101110101100110010001111001", 
    135 => "00111101011001111100111111111011", 
    136 => "10111100100111010000001000100001", 
    137 => "10111101101011001110100011010000", 
    138 => "10111110001000011011001001101010", 
    139 => "10111101111111011000110100111110", 
    140 => "00111101101100011011010101111000", 
    141 => "00111100101000010011111001101110", 
    142 => "10111100011011110010101000011011", 
    143 => "00111101110011111011100111100011", 
    144 => "10111101001000001111000011010001", 
    145 => "00111101101110101000100100110110", 
    146 => "10111110001010100111011000110101", 
    147 => "00111101100010010010101011111101", 
    148 => "10111101100101111000011011010011", 
    149 => "00111101000101001110100000100111", 
    150 => "10111101101101100011101011011010", 
    151 => "00111101101000111100010100010001", 
    152 => "00111101110101111000100111100010", 
    153 => "00111101000011110001110111100010", 
    154 => "10111101101111001101001111100110", 
    155 => "00111101111111101000101001110010", 
    156 => "00111100010101100101000001110010", 
    157 => "10111110000111111101101001000010", 
    158 => "10111101110000011000011100100011", 
    159 => "00111100101110100010101111010010", 
    160 => "10111101010111110010100011001011", 
    161 => "00111100110000000100011101011000", 
    162 => "10111101100010110000110110010001", 
    163 => "10111110100011110101111101110011", 
    164 => "00111110100000011010000100110100", 
    165 => "10111101001001100000001010010010", 
    166 => "00111100101011000011100100100110", 
    167 => "10111110001000111100111000001000", 
    168 => "00111110001011001110001101100011", 
    169 => "00111101111010010100110101111001", 
    170 => "00111101111101011101000001010100", 
    171 => "00111101100011010001011010110111", 
    172 => "00111101100011100011000110111010", 
    173 => "10111101101000010111101011110110", 
    174 => "00111100111110111110010100101101", 
    175 => "00111100101110100010011001110110", 
    176 => "00111101000011100111011110010011", 
    177 => "10111101111000100111111001100011", 
    178 => "10111100101011001101101011100100", 
    179 => "10111110011000101001000101111101", 
    180 => "00111101110010000011000100111000", 
    181 => "00111110001101110110110100110000", 
    182 => "00111100111101010111100101010101", 
    183 => "00111101101010001111001010110111", 
    184 => "10111110010100111111011010010011", 
    185 => "00111011101100010010100101110010", 
    186 => "00111101110101101111000000100010", 
    187 => "10111100101000011110110101100011", 
    188 => "00111101101011010000111100011111", 
    189 => "00111110001110110000001010011001", 
    190 => "10111101111101100111011110111110", 
    191 => "10111101000110110111100110011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei5jm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei5jm is
    component conv_2_conv_2_wei5jm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei5jm_rom_U :  component conv_2_conv_2_wei5jm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


