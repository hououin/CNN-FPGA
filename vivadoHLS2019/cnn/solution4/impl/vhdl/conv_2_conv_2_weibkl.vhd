-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibkl_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibkl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010111001001111000001", 
    1 => "00111101000011110111011010110001", 
    2 => "00111011011000100111101111100011", 
    3 => "10111110001010101110110111111100", 
    4 => "00111101101100001100101110010011", 
    5 => "10111101101010110001110100001110", 
    6 => "00111110000000000011100101111000", 
    7 => "00111100001000101011010000101000", 
    8 => "10111101100111111100110101100101", 
    9 => "10111011110101001011000000110111", 
    10 => "00111101001100101010001001010110", 
    11 => "00111101110000100111110000110010", 
    12 => "00111101111000100001110111101010", 
    13 => "10111100111110000111101110000011", 
    14 => "00111101100101000000100101111100", 
    15 => "10111100000101000100110101100001", 
    16 => "00111101001101110101100000111111", 
    17 => "10111101101010100100110001110001", 
    18 => "10111101000010001101001000101100", 
    19 => "10111100100110001011000101001000", 
    20 => "10111001011101001110101101110000", 
    21 => "10111101111010000010111110011011", 
    22 => "10111110000001000001001000010101", 
    23 => "10111100100101010001110101011000", 
    24 => "00111010111000001000111111111110", 
    25 => "00111101100110111111101110110100", 
    26 => "00111101001010111000001101111101", 
    27 => "10111110011110100011110100100101", 
    28 => "10111011010010001011110110001011", 
    29 => "00111101110001110001011001110110", 
    30 => "00111011100000101100011101110000", 
    31 => "10111101001101101011001001011100", 
    32 => "00111100111010011000011011111110", 
    33 => "00111101000101010100100101101001", 
    34 => "00111101000101000010011010110111", 
    35 => "10111110000101110100010100111101", 
    36 => "10111101100101001111111001101100", 
    37 => "10111101101110000111101011001101", 
    38 => "00111100110011100111100100010111", 
    39 => "00111101101010000000001000111001", 
    40 => "00111011001100100101111101110111", 
    41 => "00111101111001110011110101010101", 
    42 => "00111101111101001001000000011110", 
    43 => "10111101111101000000110101010101", 
    44 => "00111101110001001100000010101100", 
    45 => "10111100100101011101110010001111", 
    46 => "00111100101011001100100001101000", 
    47 => "00111100110000011110101010011010", 
    48 => "00111110000011011100111101010000", 
    49 => "10111100111100011000001000011100", 
    50 => "00111101101110110000110101011101", 
    51 => "00111101111011011000010110000110", 
    52 => "10111110000000111110101001111010", 
    53 => "10111101111011100000001111101010", 
    54 => "10111101110001110111010101101100", 
    55 => "10111110000101110001111010111101", 
    56 => "10111101100110010011010101011110", 
    57 => "00111100101111111000001011001100", 
    58 => "10111101100001000010111101000100", 
    59 => "00111110000111111000111000101001", 
    60 => "10111101100101001010110111111000", 
    61 => "10111101111101000000000111111110", 
    62 => "10111100101001101101011110000100", 
    63 => "10111101101011011101000101011111", 
    64 => "00111100100011001010010001111110", 
    65 => "00111011010110010001101111010010", 
    66 => "00110111101010001001110010111110", 
    67 => "00111101110100010010010101110101", 
    68 => "00111100101110010101101010111101", 
    69 => "00111101100100101100000001101011", 
    70 => "00111100110001100111001010001100", 
    71 => "00111100001000001000010010100011", 
    72 => "00111101110000100101110001010010", 
    73 => "00111101111110001000111100100010", 
    74 => "10111100011011011000110100101001", 
    75 => "10111101110101011110111100011100", 
    76 => "00111011110011111000110011111101", 
    77 => "10111100101001000001100100111111", 
    78 => "00111011111011100110011011101001", 
    79 => "00111101000011100111110011011011", 
    80 => "00111100000100111010011101000101", 
    81 => "00111101011010101011001100110100", 
    82 => "10111101010010101010010110110001", 
    83 => "00111101100111100001011110111010", 
    84 => "10111110001111111100101100010000", 
    85 => "10111101000001001000101101011001", 
    86 => "00111101101001110011011000011100", 
    87 => "10111110001111001101010100001011", 
    88 => "10111101010001001000010011000000", 
    89 => "00111101100101110110111000000010", 
    90 => "00111110000000000111000001011001", 
    91 => "10111101101101010000001101110010", 
    92 => "10111101100000010001101001011100", 
    93 => "10111100000111110011100100010110", 
    94 => "10111110000110000110110101110110", 
    95 => "00111100111111000101110100111010", 
    96 => "00111101000011111101111010011101", 
    97 => "00111101100000100100111011100101", 
    98 => "00111101101001101101100101001110", 
    99 => "10111110000100101100000111011111", 
    100 => "00111110000111110110011111110001", 
    101 => "10111110010111111000011000111010", 
    102 => "10111110000000101101110100101001", 
    103 => "00111101000001011000111111111101", 
    104 => "00111101101001111110100000010001", 
    105 => "00111110001001111111011011001011", 
    106 => "00111100010010101100101100101110", 
    107 => "00111101110011000011011011010001", 
    108 => "10111101010011101000100000101110", 
    109 => "10111101000100101011011011100001", 
    110 => "00111100110101000010011110101110", 
    111 => "10111110001000000100011111010001", 
    112 => "00111101101011101100111101010010", 
    113 => "00111011100010111110110101010000", 
    114 => "00111101100110001111011111010000", 
    115 => "10111011100010100010100110101010", 
    116 => "00111011001101011111111110111001", 
    117 => "10111110010000100000000010011111", 
    118 => "10111101110111011111110111100011", 
    119 => "10111100111100100101101000101000", 
    120 => "10111101110000101100000000110100", 
    121 => "10111100110000111001110111110011", 
    122 => "10111101100000001110101010101011", 
    123 => "00111101001001001111001100011101", 
    124 => "10111101110010010011110011100011", 
    125 => "10111101110111100000111010100000", 
    126 => "00111101100100000011000001110011", 
    127 => "00111101001011001000100100010111", 
    128 => "10111110010001010110011000010001", 
    129 => "10111110000101010110111000111110", 
    130 => "10111110000000100101011101100110", 
    131 => "10111101011011100100100001000110", 
    132 => "00111100010111000000111110110100", 
    133 => "10111101111000011010111110001110", 
    134 => "10111100110000001000011010110100", 
    135 => "10111100100111110111100111100001", 
    136 => "00111110100000001101010000110101", 
    137 => "10111110100011001010001111111001", 
    138 => "10111110100110100110110001101110", 
    139 => "10111110100100101010111000011100", 
    140 => "00111101110010000001000111011000", 
    141 => "10111010111001101000101001100000", 
    142 => "00111110001011010011101101011101", 
    143 => "00111110010110010100110010110011", 
    144 => "10111100011100010110010010100000", 
    145 => "10111101010101000100100101001100", 
    146 => "10111101000111111110010011101010", 
    147 => "00111101110001001010010011100100", 
    148 => "10111101100001110110001001001110", 
    149 => "00111101100011111100110011110110", 
    150 => "00111101100001100000101111100001", 
    151 => "10111110011001110101100000101010", 
    152 => "00111101101101110001011011000011", 
    153 => "00111101101010110000100001110000", 
    154 => "00111100101010100110010101111100", 
    155 => "10111101010110010111101001011100", 
    156 => "00111101100101111001100011111001", 
    157 => "10111101010011001011010101001000", 
    158 => "10111101111001111101110110010100", 
    159 => "00111101010000000010011010010000", 
    160 => "10111110001100001000001000001000", 
    161 => "00111101100001101001111011011011", 
    162 => "10111110100010000100000001001101", 
    163 => "10111101010010111110010011001001", 
    164 => "00111101011001011011000000110101", 
    165 => "10111101101100110001010100101110", 
    166 => "10111110000000011001111100010011", 
    167 => "00111101111010101000010110010101", 
    168 => "00111100000001110011101010110000", 
    169 => "00111101010110010010000000100111", 
    170 => "10111011100001001000100011001101", 
    171 => "00111101100001100111010001000100", 
    172 => "10111100010001101110100001100000", 
    173 => "10111101101111001111000010110101", 
    174 => "10111101101011101001000011111011", 
    175 => "10111110010011000001110001110110", 
    176 => "10111101111010011110100101010001", 
    177 => "10111100100101100111010100100000", 
    178 => "00111110000101010111110000101011", 
    179 => "10111110000110100011001111011100", 
    180 => "00111101001110010111101101101111", 
    181 => "10111101010001101100111000110001", 
    182 => "10111101101000001000110100011011", 
    183 => "00111100110100000011001111001101", 
    184 => "10111100101011000111010001111111", 
    185 => "00111110000010101000000010100011", 
    186 => "10111110000111010000101111010000", 
    187 => "10111110001010011000100100010011", 
    188 => "00111101110101010010011001101100", 
    189 => "00111110010010011100001000000011", 
    190 => "00111100000110101100101101000110", 
    191 => "00111101000100010010011100100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibkl is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibkl is
    component conv_2_conv_2_weibkl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibkl_rom_U :  component conv_2_conv_2_weibkl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


