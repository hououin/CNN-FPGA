-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei4jc_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei4jc_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100011001001001111111", 
    1 => "10111101011101111101010000100000", 
    2 => "10111110000000100100110111010110", 
    3 => "00111101110011100001000001110001", 
    4 => "10111000100100001110011001001010", 
    5 => "00111101000110100100011000000111", 
    6 => "10111010011011001100011101101001", 
    7 => "10111110001001101111000111100001", 
    8 => "00111110001110000100100001011001", 
    9 => "00111101001000101010011011010011", 
    10 => "10111100010011100110111001010000", 
    11 => "10111101101101011010100000010101", 
    12 => "00111101000110001101101011011111", 
    13 => "10111101010111111110110010100110", 
    14 => "00111100110110000010010100100000", 
    15 => "00111100100101110010000010111100", 
    16 => "10111101010101001100100000100111", 
    17 => "10111101010110110100001100010101", 
    18 => "10111100100100011001010110101011", 
    19 => "10111110000110000100010011101000", 
    20 => "00111101101011110011010111100111", 
    21 => "10111110000110001111001110010101", 
    22 => "10111101011111010100100111000100", 
    23 => "00111100010000101011111101100001", 
    24 => "10111100100100000001101000110011", 
    25 => "00111101000001011011110101011101", 
    26 => "00111110000101001101011110110011", 
    27 => "10111100100010101101100011000101", 
    28 => "00111100101100100000111101010010", 
    29 => "10111100110011100101100011000101", 
    30 => "10111011111010010101001111001000", 
    31 => "10111110010010011010111011011011", 
    32 => "00111101010001111100011100000001", 
    33 => "10111110010111110101010011001100", 
    34 => "00111101101100000010010100010100", 
    35 => "00111101110101111101010000100101", 
    36 => "10111110011101011110110111001000", 
    37 => "00111101100000000011100101100000", 
    38 => "00111101011101000000000100001000", 
    39 => "00111100100000010001000000010000", 
    40 => "10111101011010110010101110000110", 
    41 => "00111110001101100010110010010001", 
    42 => "10111110000011100010111000001001", 
    43 => "00111101010001101110111010011110", 
    44 => "00111101101001000111011101000000", 
    45 => "00111101100101001101010101000111", 
    46 => "00111101101100010010100100111011", 
    47 => "00111110001001000011010011100111", 
    48 => "10111101100101100111101000100111", 
    49 => "10111110101001010010111000100000", 
    50 => "00111100000100001010001101111000", 
    51 => "00111101101001111001100011011101", 
    52 => "10111110001110010100100001100111", 
    53 => "10111110000010001100011000011111", 
    54 => "00111100101011010001000111001011", 
    55 => "10111110001010111110100010111000", 
    56 => "10111100011111101000101011100010", 
    57 => "10111101110011101011100000111011", 
    58 => "00111011110111000000100011100111", 
    59 => "00111100110011010011111001100101", 
    60 => "10111011000110001110110011111101", 
    61 => "00111101100010011100001101110100", 
    62 => "00111101010001101010110101101111", 
    63 => "10111011111001000011100101101010", 
    64 => "10111101100100110110100000111100", 
    65 => "00111101111111000110011111110101", 
    66 => "10111101000111010111010100011010", 
    67 => "10111101111001111101111110001011", 
    68 => "00111101110100000001000001110110", 
    69 => "00111101010001011101101001111101", 
    70 => "00111101110100010111100111010001", 
    71 => "10111110000101000001011111111010", 
    72 => "00111101000010011100001111001110", 
    73 => "10111101011101000010000000100010", 
    74 => "00111110000011000111011001011100", 
    75 => "10111101100001101001111110010000", 
    76 => "00111100110000001111110001000110", 
    77 => "00111101010011110111110110000110", 
    78 => "00111101111010101010011010101100", 
    79 => "00111100101101100110010100101100", 
    80 => "10111100110101101011011010000100", 
    81 => "10111101111010010111111000110000", 
    82 => "00111101100000101110011000010100", 
    83 => "00111101001101100011001000100110", 
    84 => "10111101110001000000000111101101", 
    85 => "10111101011101011010010011000011", 
    86 => "00111101110100111010011010010111", 
    87 => "10111101100110101100101001000101", 
    88 => "00111101101010101000110001100001", 
    89 => "00111101011111001101111101010011", 
    90 => "10111101101000011101001100001110", 
    91 => "10111110100101111111110011001100", 
    92 => "00111101011111011101110001010110", 
    93 => "00111101100000100110011101001110", 
    94 => "10111101110100100111111110111001", 
    95 => "10111011000111101100001001111111", 
    96 => "10111101000001111001111010110010", 
    97 => "10111101101001100000011010101010", 
    98 => "10111101100000010000111010101010", 
    99 => "00111100100001111110000110101110", 
    100 => "00111100100100110100110000100100", 
    101 => "10111101011100101100000001110100", 
    102 => "00111100100101110100000101000000", 
    103 => "10111110000110011101110000100011", 
    104 => "10111101110011100010000110110101", 
    105 => "10111011110110010110011011101111", 
    106 => "10111101000111101011011010010101", 
    107 => "10111101101111011101001111000010", 
    108 => "10111101010111010010001010100001", 
    109 => "10111100101100010010110001101100", 
    110 => "00111101011000101110111100001001", 
    111 => "00111011110101110101010000001111", 
    112 => "10111101011111001001011011010011", 
    113 => "10111110010110100110011001101100", 
    114 => "00111110000101011000111011010111", 
    115 => "00111110001001100010100000111010", 
    116 => "10111101101111011110001110001111", 
    117 => "10111101001010111110011001100001", 
    118 => "00111100001010100001100010001111", 
    119 => "10111110010110101010001100100110", 
    120 => "00111101111000111011010100100111", 
    121 => "00111100110111101100011101010000", 
    122 => "10111110011100011111010111010111", 
    123 => "10111010100100000101001000101100", 
    124 => "00111101110001110101101101011010", 
    125 => "10111101000010010110000011001101", 
    126 => "10111101111111100111001101000110", 
    127 => "10111101011100010100111101110001", 
    128 => "00111010100001010101011010001000", 
    129 => "00111110000110101011111111101101", 
    130 => "00111110000100100111010011011111", 
    131 => "10111101100000001101100100111101", 
    132 => "00111101100101111111100001000010", 
    133 => "10111101010101100010011000001001", 
    134 => "10111110000000010000100100111101", 
    135 => "10111101010001100111101011010000", 
    136 => "10111101001111101110100101000111", 
    137 => "10111110000110110100000001110110", 
    138 => "10111101111000111001001101010101", 
    139 => "10111101100000011101111111000111", 
    140 => "10111101000110110010111001011101", 
    141 => "00111101110000110000000100111010", 
    142 => "10111011000110000010011100111101", 
    143 => "00111101100000101111011101100100", 
    144 => "00111100101001001000100101000100", 
    145 => "10111101101110011011010111100100", 
    146 => "00111101100111111011110101000101", 
    147 => "10111100110001100011011100010110", 
    148 => "10111110010000110111110111010011", 
    149 => "00111101100111001001101110111010", 
    150 => "00111101001001101000101001111100", 
    151 => "10111101110101000100011111001011", 
    152 => "10111100100111101100011110101000", 
    153 => "10111101111011110101001110110111", 
    154 => "00111100001011110001001110001001", 
    155 => "00111100001110011100000000110101", 
    156 => "00111100001000110010010011111010", 
    157 => "00111101101001001001011111001001", 
    158 => "00111100101001011111000100110011", 
    159 => "10111101100111010000011110111101", 
    160 => "10111110100101001011110000011000", 
    161 => "00111110000000111101111011001000", 
    162 => "10111101110010111011101010000000", 
    163 => "10111101011100110101110111011101", 
    164 => "00111101000111100001111011001111", 
    165 => "10111101110011100101011111100111", 
    166 => "10111010111100110111100011010010", 
    167 => "10111100100000001100001110001101", 
    168 => "00111110000010011011101000010010", 
    169 => "10111101100010110001100010101011", 
    170 => "00111101101111011111111001001101", 
    171 => "10111101111010110011100000101011", 
    172 => "10111101111010100101110010110110", 
    173 => "10111110100011001111101100011011", 
    174 => "10111101111110011100111001001011", 
    175 => "10111110010000111101101101111011", 
    176 => "10111101100101100001111111100101", 
    177 => "00111101011100010101000101101110", 
    178 => "00111011111001000111001101011010", 
    179 => "10111100101101001101111111010101", 
    180 => "10111101010011010010110010000111", 
    181 => "00111101101001101000010010010100", 
    182 => "10111100101000001001101011010110", 
    183 => "00111101110000100100110011111100", 
    184 => "00111100110000001000110110010000", 
    185 => "10111101110111111101110110000000", 
    186 => "10111101101101101010111010101011", 
    187 => "00111100001111111011000101111010", 
    188 => "00111101110110110011100101001100", 
    189 => "00111101011111001000010011010010", 
    190 => "00111101111100111001101110110101", 
    191 => "10111100010110111011100001101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei4jc is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei4jc is
    component conv_2_conv_2_wei4jc_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei4jc_rom_U :  component conv_2_conv_2_wei4jc_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


