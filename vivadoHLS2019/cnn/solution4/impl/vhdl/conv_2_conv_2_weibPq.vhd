-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibPq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibPq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110110100111110100111110011", 
    1 => "10111110100001100000110111011010", 
    2 => "10111100101000011101110010100110", 
    3 => "00111110001001011001010011110110", 
    4 => "10111100001100100110001100011000", 
    5 => "10111101111101100111001101101000", 
    6 => "00111101100011100101011101001111", 
    7 => "00111110011101001000010000101110", 
    8 => "00111100011011001100111011000001", 
    9 => "00111101001110010101010011011111", 
    10 => "00111101111111001001111100110010", 
    11 => "00111101110011100000001100101010", 
    12 => "10111101010000010000011100011000", 
    13 => "00111101011000001110101011000101", 
    14 => "00111101100000010001010011100110", 
    15 => "00111101111001110111011100011011", 
    16 => "10111110011110011011011101111100", 
    17 => "10111110100100010100000001100011", 
    18 => "10111101101110101000111110010111", 
    19 => "10111101100110100010010100010111", 
    20 => "00111110000001110000010010001010", 
    21 => "10111110011010000011000011011010", 
    22 => "00111110000000000101010001110101", 
    23 => "10111101101001110001110010101110", 
    24 => "10111101110011101101000101111010", 
    25 => "00111110010100110010011011100000", 
    26 => "10111110011010011011111000101100", 
    27 => "10111110000000110111001010000100", 
    28 => "00111110000010001111100111111111", 
    29 => "10111110001011011101111000001100", 
    30 => "10111101100010110100111001011001", 
    31 => "10111101011011111000011001001110", 
    32 => "00111101101001000111111000010011", 
    33 => "00111110101101011100110010000011", 
    34 => "00111110010101101110101011011010", 
    35 => "10111101101100011010001010010111", 
    36 => "00111101101011000110010000111001", 
    37 => "10111100100011011110100100010110", 
    38 => "00111101100011100011101100011001", 
    39 => "10111110011011001111010110000111", 
    40 => "10111111000011011010111000111110", 
    41 => "00111110010010010001011011000111", 
    42 => "10111110101011001111111111111100", 
    43 => "00111110100011011110001011010010", 
    44 => "00111101000111110000100100100110", 
    45 => "10111100101101011011110100001001", 
    46 => "00111110001010111100011101000111", 
    47 => "00111110001101010100110101101011", 
    48 => "00111101110000010111110001101010", 
    49 => "00111110001001110011001110001101", 
    50 => "10111110000001111011100010110011", 
    51 => "10111110001110100001101100000010", 
    52 => "10111100111011010101011011110101", 
    53 => "10111110010010111101110000001000", 
    54 => "10111110010100101010101011010001", 
    55 => "00111011111011100111111001100010", 
    56 => "00111110001110010101010101110100", 
    57 => "00111110010100001100101100110010", 
    58 => "10111111000101100000011011010100", 
    59 => "00111101100111111111111001010100", 
    60 => "00111110001001100100101110110111", 
    61 => "10111101110100111100110001100101", 
    62 => "00111101011100100100111010110000", 
    63 => "10111100011000000111001001010000", 
    64 => "00111101001111110101001100100000", 
    65 => "10111110001100011000111000100001", 
    66 => "10111110100100110110000001100011", 
    67 => "00111110001110111101111011111111", 
    68 => "10111110010101000010110100001100", 
    69 => "00111110000001100100010110010100", 
    70 => "10111110111101010010100001110001", 
    71 => "10111101100110011110001110011001", 
    72 => "10111101100100100110011001011101", 
    73 => "00111011001001101111000011011110", 
    74 => "10111101110011100100011001010111", 
    75 => "00111110000001011101100100010010", 
    76 => "10111111000000000001111011001110", 
    77 => "10111110001101111110100001010111", 
    78 => "10111100001000111001000101110101", 
    79 => "10111110000011011000110001011100", 
    80 => "00111101010111111101111010011110", 
    81 => "00111101100010111111011110010010", 
    82 => "00111101101000110011101101110100", 
    83 => "10111101100110001001010110110010", 
    84 => "10111101111001010100010100010001", 
    85 => "10111110011110000100011001001110", 
    86 => "00111101010001100111100100111001", 
    87 => "10111110101111011100011000110101", 
    88 => "10111101111101000111001010001111", 
    89 => "00111101010001001110001000110001", 
    90 => "00111101011010101100110000011110", 
    91 => "00111111000100110110100001100111", 
    92 => "10111101100101101010100111111010", 
    93 => "10111101101000110000011111011100", 
    94 => "00111011001011100000000010001001", 
    95 => "10111100010110010000001111101111", 
    96 => "00111101101110011100101101011000", 
    97 => "10111101110001111010110011101000", 
    98 => "00111101101111000110000011111001", 
    99 => "10111101111111111111011001110000", 
    100 => "10111110100101010000001110110101", 
    101 => "10111110001111100101111001111010", 
    102 => "10111101110001001100101101011101", 
    103 => "10111101101010101011001110000001", 
    104 => "00111101001101001100011010110011", 
    105 => "00111110000010100000011101100110", 
    106 => "10111110101101100010010110010110", 
    107 => "00111110010101100100010001110110", 
    108 => "10111100100000000001100110011111", 
    109 => "00111110100110001010000111100001", 
    110 => "10111110000001010000110000000111", 
    111 => "10111101000000101000000100001110", 
    112 => "10111110100110110000101111100001", 
    113 => "10111011100100110010101100100100", 
    114 => "00111101001100101101011100010011", 
    115 => "10111110100101010010100110101111", 
    116 => "00111101111010001100000011101101", 
    117 => "10111101000001100111000110011011", 
    118 => "10111101100110010011111111011000", 
    119 => "10111101100011010011100010001001", 
    120 => "00111100110000001110100101101101", 
    121 => "00111101001110000001110011101010", 
    122 => "10111110011010101100101101010011", 
    123 => "00111101010101101100001110101001", 
    124 => "00111101101100100111001010101001", 
    125 => "00111101101101100011110110101111", 
    126 => "00111100110001010010000000110001", 
    127 => "00111110010100011011001010000101", 
    128 => "00111110100100111001111111010011", 
    129 => "10111101010101110001111011010111", 
    130 => "10111101110011001110101011101010", 
    131 => "00111110100001001010011000000101", 
    132 => "10111110001011011001100001001111", 
    133 => "00111101100011111010000111001101", 
    134 => "00111101011101010100101100101110", 
    135 => "00111110011100011000111110110110", 
    136 => "00111110001110001100110011111001", 
    137 => "00111101010101100101101000100001", 
    138 => "10111101110000010001000011100110", 
    139 => "10111101101110100111100001110100", 
    140 => "00111101011100111111000010001010", 
    141 => "00111101111001111011011000000000", 
    142 => "00111110011101101111110101101001", 
    143 => "00111110011100001100101001000110", 
    144 => "10111011111100001101011001110101", 
    145 => "00111110101010110101000101011001", 
    146 => "00111101111001101010000010111111", 
    147 => "10111101111111100010100001011000", 
    148 => "10111101110100010101011101010100", 
    149 => "10111110001010010011100001010101", 
    150 => "10111101100001011100010000011011", 
    151 => "10111110000001011011110001000100", 
    152 => "00111101001100101011000110010001", 
    153 => "00111101110000001011001011010010", 
    154 => "00111101010101100011001110100100", 
    155 => "00111110100000000010110001011000", 
    156 => "00111101111001100111000000100111", 
    157 => "10111110100010111000000010101000", 
    158 => "00111110001001100110111000101101", 
    159 => "00111101100001000000010000111101", 
    160 => "00111110101101000111110110000111", 
    161 => "00111110001111110101000010010000", 
    162 => "00111110010011011111101000100001", 
    163 => "10111110010110011000010100111010", 
    164 => "10111111000011110100101111100000", 
    165 => "00111110100100100110101110011010", 
    166 => "10111101110110010111011001111101", 
    167 => "00111110011101001010110100101110", 
    168 => "10111110000101001010011110001111", 
    169 => "00111110001010111000111111010100", 
    170 => "10111100101100001100001100100011", 
    171 => "00111101110001111111100110010011", 
    172 => "00111101110010000010001100101100", 
    173 => "10111110100010110110011010100011", 
    174 => "00111110001011101001111010111101", 
    175 => "00111101111011011111110101001001", 
    176 => "10111101000111101101100110000011", 
    177 => "00111110110001000000000001010001", 
    178 => "00111110000001100011101111010110", 
    179 => "10111110000001000111011000000101", 
    180 => "00111100110100000101111111011000", 
    181 => "10111101111110010011011111000000", 
    182 => "10111110100111101000000110001101", 
    183 => "10111110011000110010101100010001", 
    184 => "00111110000100100110011011000100", 
    185 => "10111110100011111001000000100100", 
    186 => "10111110011110010000100100101111", 
    187 => "10111100110001011011110111000100", 
    188 => "10111110000001111011011011100000", 
    189 => "10111110100011101011101011110010", 
    190 => "00111110000110010010011111001010", 
    191 => "00111110001101101000111011010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibPq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibPq is
    component conv_2_conv_2_weibPq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibPq_rom_U :  component conv_2_conv_2_weibPq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


