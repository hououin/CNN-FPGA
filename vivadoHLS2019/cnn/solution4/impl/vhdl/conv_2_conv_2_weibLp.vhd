-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibLp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibLp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100001110001010001011101", 
    1 => "10111110101011011011101001100001", 
    2 => "00111101011010100101001011000010", 
    3 => "00111101010101010111100010010001", 
    4 => "00111100010101000000011111000010", 
    5 => "10111110100010000110000010110000", 
    6 => "10111110010101101011000000011000", 
    7 => "00111110100010010000101001011010", 
    8 => "10111101111011001101111101010101", 
    9 => "10111110000011110000011111000101", 
    10 => "10111101011110110000001001110101", 
    11 => "10111101011000110101111110110110", 
    12 => "10111110001010000110100011100110", 
    13 => "10111110001100111011100011101111", 
    14 => "00111101000010010000111011011001", 
    15 => "00111101101110110010111000101101", 
    16 => "10111101111010010000111100010001", 
    17 => "10111110100001101101011110001111", 
    18 => "10111101001011100101010001111111", 
    19 => "10111110100100000101110100001000", 
    20 => "10111101010111001100111101111100", 
    21 => "10111111000011111111100010011110", 
    22 => "10111110100001011010010110011011", 
    23 => "10111101101100010100011100011100", 
    24 => "10111110001110101110010100100000", 
    25 => "00111110000010011110001100110101", 
    26 => "10111110010101100110010111111110", 
    27 => "10111110011111000100110001001100", 
    28 => "10111110000110010100110111101001", 
    29 => "10111110000101110100001000010100", 
    30 => "00111100110010011010011100000111", 
    31 => "10111101111011010000010110001011", 
    32 => "10111101001110010110011000000010", 
    33 => "00111101011100101101010111110000", 
    34 => "10111110010000100000101010001110", 
    35 => "10111110010010100110111001101000", 
    36 => "00111101110111101100000011011100", 
    37 => "10111101000100000000001001010101", 
    38 => "10111101101101010010101110100000", 
    39 => "00111101001111001110100110100111", 
    40 => "10111111001100010110010111110001", 
    41 => "00111110000000000110111100110111", 
    42 => "10111110000111011010011011100011", 
    43 => "00111110010100010110101111110111", 
    44 => "10111100111010101100011111100000", 
    45 => "10111101111101110100010101100001", 
    46 => "00111101101111000010111110110001", 
    47 => "10111110100000011001100011000100", 
    48 => "10111100110000011101011110011010", 
    49 => "00111110000100001100110101111010", 
    50 => "10111101010111110010001000001110", 
    51 => "10111110001100111110001001110100", 
    52 => "10111101110101000110101100111010", 
    53 => "10111111000010000101110011001010", 
    54 => "10111110110000001011111100111111", 
    55 => "10111101001001101000110011011000", 
    56 => "10111100010101010101101101111110", 
    57 => "10111101111100010010010110101100", 
    58 => "10111110100010011100110011001101", 
    59 => "10111110000000000101101001000100", 
    60 => "00111101101110010110001000101101", 
    61 => "10111101100111000100010110010101", 
    62 => "00111101111100011001001010100010", 
    63 => "00111101111010001110100011010010", 
    64 => "00111101100101010000000100001011", 
    65 => "10111110100111001100110110000011", 
    66 => "10111101010101000010111000010111", 
    67 => "00111100110001101011111000010011", 
    68 => "00111011110000011010111101011001", 
    69 => "10111100111011010110100100011110", 
    70 => "10111110001111100100001100100000", 
    71 => "00111101010100101000111110110101", 
    72 => "00111101101011100111100100010001", 
    73 => "00111101100100010110000000111101", 
    74 => "10111011111110010001000011000111", 
    75 => "00111101101101110001101010000011", 
    76 => "10111101111110111010001111011100", 
    77 => "10111110000010001010000100100011", 
    78 => "00111101100100101101111000110110", 
    79 => "00111101000110001111000010100111", 
    80 => "00111101001001010000100111110111", 
    81 => "00111100110000110111111010111101", 
    82 => "10111110000010100100001110010101", 
    83 => "00111100101100111111101110111101", 
    84 => "10111110001011011000000101000001", 
    85 => "10111110100001111010001101000001", 
    86 => "10111101100100101111010011101010", 
    87 => "10111100101000111010101010101000", 
    88 => "10111101101110000110110010001101", 
    89 => "00111100000111001000001000010101", 
    90 => "00111100001110011010111001100000", 
    91 => "00111101101101010100011111100111", 
    92 => "10111011110000010011110001111101", 
    93 => "10111110011100110101010001101001", 
    94 => "00111110010000100100011110110100", 
    95 => "10111101100011001001101011010000", 
    96 => "00111110000010111000101101111100", 
    97 => "00111110011011111110001010010110", 
    98 => "00111101110101010111000000110010", 
    99 => "10111110000100011101011011111111", 
    100 => "10111110101000100110101010010110", 
    101 => "10111110101011000000100011001001", 
    102 => "10111100011010011110100100111011", 
    103 => "10111101100000100111001001011010", 
    104 => "10111111000000011011100110010011", 
    105 => "10111011111111110010001100100011", 
    106 => "10111110000001100011010111001010", 
    107 => "00111101100000010011110110010110", 
    108 => "00111110001111111111011001110011", 
    109 => "00111101001000111111001111110010", 
    110 => "10111100101111111101111000110100", 
    111 => "00111101011010001000100011110000", 
    112 => "00111011110111101000000110100111", 
    113 => "00111011101001010101010001111100", 
    114 => "00111011101001111110101100001001", 
    115 => "10111110011000100001001110101100", 
    116 => "00111100110101101001011011010111", 
    117 => "10111110101001011011010010100100", 
    118 => "10111101000100101000011110010001", 
    119 => "00111110101000010101001001100011", 
    120 => "00111011100010100010110110101111", 
    121 => "00111110100010010001011001010110", 
    122 => "10111110011010001110111001011100", 
    123 => "00111101110000011001000110000100", 
    124 => "00111101110000010010010100001110", 
    125 => "00111101111101110101010101111110", 
    126 => "10111110000001101000010101011101", 
    127 => "10111011110010000010101001100010", 
    128 => "00111101101010010000011010111010", 
    129 => "10111110011100011100101111010001", 
    130 => "10111101000111110000011000001000", 
    131 => "00111110011011011111111000111010", 
    132 => "10111101100111110110110011001000", 
    133 => "10111101010100100000110001101010", 
    134 => "00111101110101100011100111010101", 
    135 => "10111101100100011100100010100111", 
    136 => "00111101111011110001001101100000", 
    137 => "10111100100111111001111011001000", 
    138 => "10111101111010000010111011010000", 
    139 => "10111100100001001111001110010000", 
    140 => "00111110000010010111011010111011", 
    141 => "00111110000000100001011101000010", 
    142 => "00111110001001011000110011110100", 
    143 => "00111110000111101101001110010010", 
    144 => "00111110000111011111110100110111", 
    145 => "00111110010100001101101111101111", 
    146 => "00111101100101110001001110111101", 
    147 => "10111101010001000111000110000101", 
    148 => "10111110000110011010101011000010", 
    149 => "10111110011101001110111110011101", 
    150 => "10111101000000100011100011011011", 
    151 => "00111101100001011001001000010110", 
    152 => "10111100001010110010110001111100", 
    153 => "00111101110100101001110010000110", 
    154 => "10111101100011010110001100010001", 
    155 => "00111110010001000000011111011101", 
    156 => "00111101101000010110101100101101", 
    157 => "10111101010111111111110010000001", 
    158 => "10111100011100011110000110001000", 
    159 => "00111110001111110110000110000110", 
    160 => "00111101111110000000010001101100", 
    161 => "00111101011110111111101011010000", 
    162 => "00111101011111010011001101101000", 
    163 => "10111110001100001000101110000110", 
    164 => "10111110100011001010011001111001", 
    165 => "00111110000001001100000111110011", 
    166 => "10111101101110011101010011000110", 
    167 => "00111101000001100011010110101101", 
    168 => "10111110100010011000011110010011", 
    169 => "00111110010010110110010010110111", 
    170 => "00111101101010101110100110100110", 
    171 => "00111110000000100000001100001010", 
    172 => "10111101100110111001111011001010", 
    173 => "10111101011110101100101010000111", 
    174 => "00111110100100101011100110011010", 
    175 => "00111110100110100100010110000100", 
    176 => "00111101010010101100011011000100", 
    177 => "00111110011111101000100000010011", 
    178 => "00111100011001001000000011010011", 
    179 => "10111110100100011001000110000111", 
    180 => "10111101101011110110101100000100", 
    181 => "10111110000111111011110000000010", 
    182 => "10111101111100101100111011111101", 
    183 => "10111101101011000010000001100001", 
    184 => "00111101111011001000011001100001", 
    185 => "10111110001001000111010111110001", 
    186 => "10111101110001000010110001101100", 
    187 => "00111011101110110010100100101110", 
    188 => "10111101001010101111111101011010", 
    189 => "00111100110011110111101111100001", 
    190 => "00111101000110010010100000011000", 
    191 => "00111101001000010010111011111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibLp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibLp is
    component conv_2_conv_2_weibLp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibLp_rom_U :  component conv_2_conv_2_weibLp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


