-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weircU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weircU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100000011001100001011010111", 
    1 => "10111101000111001010111100111001", 
    2 => "00111101111010111000101100000111", 
    3 => "10111101111011001101011011111010", 
    4 => "10111110010011001010100111101011", 
    5 => "00111101110010001111001000000011", 
    6 => "10111101000100101110101110101101", 
    7 => "10111101100111111110111100100110", 
    8 => "10111100001001011001011101100111", 
    9 => "00111110010100110000010110111010", 
    10 => "00111101100100000101101111101011", 
    11 => "10111001011100110101100101110010", 
    12 => "00111101100011110001010100001011", 
    13 => "10111110100010010011111011101000", 
    14 => "00111100111001100110100111100010", 
    15 => "10111110000101011010100111100101", 
    16 => "00111100100100001010100000011111", 
    17 => "10111011100110101000011000000110", 
    18 => "10111110001000110111101011001110", 
    19 => "10111100101000010100000010000000", 
    20 => "10111101101000010011100000101110", 
    21 => "10111110010100010100001110110110", 
    22 => "10111101011010100100001110101001", 
    23 => "10111110000110011001100101010000", 
    24 => "00111101100001101101010101110000", 
    25 => "00111110000011010110110011110111", 
    26 => "10111101100110111110001010111011", 
    27 => "00111110001001010011000011110011", 
    28 => "10111101011110000100010110010101", 
    29 => "00111101110010001000001010111001", 
    30 => "00111101100000011011100110010010", 
    31 => "10111110010101001111000101101010", 
    32 => "10111101101000101011101101111111", 
    33 => "10111110000000101001010101111101", 
    34 => "00111110000000110101100001110100", 
    35 => "10111010000110011010010001000010", 
    36 => "00111101010001000000010010011111", 
    37 => "00111101010001001100110100000110", 
    38 => "10111101111011110100000111111100", 
    39 => "00111101101010001100101101101000", 
    40 => "10111101010001000011010011100000", 
    41 => "00111110010101110010000111011111", 
    42 => "10111101100101111001000011111010", 
    43 => "10111101111110010001011001001011", 
    44 => "00111101001111111101100000001010", 
    45 => "00111101100111110010100101110001", 
    46 => "00111101101101000100101101100010", 
    47 => "10111101100011010101111010111101", 
    48 => "00111101001110010110000001011110", 
    49 => "10111110011001001011000000011100", 
    50 => "10111010111000001101111110001011", 
    51 => "00111101000010101101000011010000", 
    52 => "10111110010100101000011000101110", 
    53 => "10111101101101111100110100100011", 
    54 => "00111110010110110110000111100100", 
    55 => "10111110011010000111010001101101", 
    56 => "10111101111111000010011010110110", 
    57 => "10111100101010001100100110011101", 
    58 => "10111101100011011000110010011100", 
    59 => "00111100101011100100000010100101", 
    60 => "10111110000101010000100010000000", 
    61 => "10111101110111011011010101010101", 
    62 => "10111100010010011101100000111001", 
    63 => "10111011100010011010011111100000", 
    64 => "10111101101101111011110010011111", 
    65 => "00111001100111000011001011001111", 
    66 => "00111110010000101001100000000001", 
    67 => "10111101100110010000101001011111", 
    68 => "10111101110101100111011000101001", 
    69 => "00111011101011111111010101110110", 
    70 => "10111101100111111011111101010101", 
    71 => "00111011100101100111001000111001", 
    72 => "00111110000010101100000001111011", 
    73 => "10111101000101000000000111010010", 
    74 => "00111100110011001011001001011110", 
    75 => "10111101110010000011101100100110", 
    76 => "10111100100111000100101100000011", 
    77 => "10111101101111000111011001010100", 
    78 => "10111100100001010101010100111100", 
    79 => "00111110001000010010000011001100", 
    80 => "00111101100001000110011010110110", 
    81 => "00111101100001101000111010001010", 
    82 => "10111101101010110011100010000010", 
    83 => "00111100100110100100010001011000", 
    84 => "10111110011011010010100001111101", 
    85 => "10111110010011111010010111010100", 
    86 => "00111101100010111100001101111010", 
    87 => "10111101111000001100110010010011", 
    88 => "00111101011011100011010011111110", 
    89 => "00111010111010100000110010101110", 
    90 => "00111100000111011001010111110111", 
    91 => "10111110100011001011111111010001", 
    92 => "10111110000001111100010001101110", 
    93 => "00111101101111000101011010101011", 
    94 => "10111110000000100011110010011000", 
    95 => "10111100110000101001011111010101", 
    96 => "10111110000001110011101101000000", 
    97 => "00111101110100100000001000000101", 
    98 => "00111101000101110100111011111111", 
    99 => "00111101010000001111110001000001", 
    100 => "00111110000001000000000001010010", 
    101 => "00111101110001001100010101101111", 
    102 => "10111101111100001001101110010101", 
    103 => "00111101111001010001100000011101", 
    104 => "00111101100101100110101100101111", 
    105 => "00111101101010000111110000010101", 
    106 => "00111101010101111110101100111111", 
    107 => "00111101110101111010100100111010", 
    108 => "10111101100000100101010010111111", 
    109 => "00111101001000011111111000001000", 
    110 => "10111110000111101101011011011010", 
    111 => "10111101110001010010001001100100", 
    112 => "10111100000111100001010100100110", 
    113 => "10111110001011110100010111010001", 
    114 => "10111101100011101001100010110110", 
    115 => "10111100100000001010001010101011", 
    116 => "10111101011011001001010010100001", 
    117 => "10111110101101100100011101111100", 
    118 => "00111110001110111101011010100010", 
    119 => "10111110001000011010111101100110", 
    120 => "10111101110111010101001101000000", 
    121 => "00111101001100110101001010100101", 
    122 => "00111101011100100100001111000011", 
    123 => "10111100100111100111100110111000", 
    124 => "10111101010100001100110101000101", 
    125 => "00111101101001111010011001001011", 
    126 => "10111100011011101000101100001010", 
    127 => "00111110001100000101010100101011", 
    128 => "10111110010010001100010100111101", 
    129 => "00111101011001010010011111011010", 
    130 => "00111011110000000101111010001001", 
    131 => "00111101010111011001010010001100", 
    132 => "00111101011010011011111001011000", 
    133 => "10111101110100011101111010000111", 
    134 => "10111110101011110001110011101000", 
    135 => "00111110001100010110010111111100", 
    136 => "00111101101000111001001111011101", 
    137 => "10111101010110011000100101101001", 
    138 => "10111101011000011001111010110111", 
    139 => "10111110100100110100100110000101", 
    140 => "10111101110111100110110001000000", 
    141 => "00111101100100111101100110111011", 
    142 => "00111110000110011011001101110111", 
    143 => "00111101111001110111001111110011", 
    144 => "00111101100100011001001101001110", 
    145 => "10111101101000110011111100111010", 
    146 => "00111101100011110110111110110110", 
    147 => "10111101100100001010100010101111", 
    148 => "10111100000111001101010110011010", 
    149 => "10111101011110101001101000010011", 
    150 => "00111101001000000100010100010010", 
    151 => "10111110100100100110011011101111", 
    152 => "10111101100111000101100001111001", 
    153 => "00111101011100110110000101001100", 
    154 => "10111100101001101011100110111110", 
    155 => "10111110000001111111010100111110", 
    156 => "00111101001011110000011100111000", 
    157 => "00111101110110001000110111000101", 
    158 => "10111110000011011001000001100001", 
    159 => "00111101000110001110111001000111", 
    160 => "10111110110101010101110001011101", 
    161 => "00111110001100000001110101101110", 
    162 => "10111110000100000001110110110110", 
    163 => "10111101101101101000001111001011", 
    164 => "10111101011001110000101010110110", 
    165 => "10111110000011011111101110111011", 
    166 => "10111110100010100000011100001110", 
    167 => "00111101111101011111010001010000", 
    168 => "00111100110111011001110101100010", 
    169 => "10111110000101101101010101100001", 
    170 => "00111100011001010110011000100101", 
    171 => "00111101110100011111000110011111", 
    172 => "00111101000011101111100011110011", 
    173 => "10111101110111001101101000000100", 
    174 => "00111100110111101101010010000100", 
    175 => "10111101111001000101101011100100", 
    176 => "10111101111001100011110111001001", 
    177 => "00111101010111010001100100001110", 
    178 => "00111101010011000010100100000011", 
    179 => "10111110000010010111110000000010", 
    180 => "10111101000010110010011000101101", 
    181 => "10111110101110110101011011111101", 
    182 => "10111011100110010000101000001010", 
    183 => "00111101110011111000001110000011", 
    184 => "10111100111100010001110100101110", 
    185 => "10111110001011011010010101111010", 
    186 => "10111010001110000101001000010100", 
    187 => "00111101010111100100111111110000", 
    188 => "10111100010001010001001000101100", 
    189 => "00111101110101111101010101001100", 
    190 => "00111101100110010001111001111000", 
    191 => "00111100100010111011100110111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weircU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weircU is
    component conv_2_conv_2_weircU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weircU_rom_U :  component conv_2_conv_2_weircU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


