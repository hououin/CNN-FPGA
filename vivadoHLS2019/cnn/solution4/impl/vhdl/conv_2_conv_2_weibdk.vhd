-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibdk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibdk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000010101100011110101110", 
    1 => "10111100111010011001001000000101", 
    2 => "00111101110010101100011010000101", 
    3 => "10111101100000101110010110010101", 
    4 => "10111101100101100010110010100110", 
    5 => "10111101100101111011110000101110", 
    6 => "00111101111101101001110001001011", 
    7 => "10111101100111010010010110000100", 
    8 => "00111101010110001100000000111010", 
    9 => "00111100111100111110100011101111", 
    10 => "00111101110111010100001110011110", 
    11 => "00111101011001110110000000100000", 
    12 => "00111100100110100100011000010001", 
    13 => "10111100110000111100001101110101", 
    14 => "00111100010100100000011110110001", 
    15 => "00111110000100100100011001111011", 
    16 => "00111101011001000111000000100110", 
    17 => "10111101010010001100000110000000", 
    18 => "00111101010011001111000010011110", 
    19 => "10111101011001110010100110111000", 
    20 => "00111101100110111001000110101000", 
    21 => "10111101110110100100010010010010", 
    22 => "10111101000111011001001001111110", 
    23 => "10111101100010111100001011111110", 
    24 => "00111101011111110000010110011110", 
    25 => "00111100110011001111110000011101", 
    26 => "10111100101101111110001110001101", 
    27 => "10111101110001001011010011000110", 
    28 => "10111011001001010111111111101001", 
    29 => "00111101100110011100010100110100", 
    30 => "00111110000000110101101101010100", 
    31 => "00111100011001111100000110010010", 
    32 => "00111100001001011101101000011001", 
    33 => "10111110001100000111010010001011", 
    34 => "10111100100100100111010110101100", 
    35 => "10111110011110110101001100101010", 
    36 => "00111101110000110111101101101010", 
    37 => "10111101100010100111101011101011", 
    38 => "00111101100010111100000111011000", 
    39 => "10111101000101101111111011111100", 
    40 => "10111101011010000111001010101101", 
    41 => "00111101110111110111010011111100", 
    42 => "00111110000000101000111110110011", 
    43 => "00111101111001101111000100101000", 
    44 => "00111101111010110011010111010010", 
    45 => "00111101010100101101010000010000", 
    46 => "00111101101101010101101011110111", 
    47 => "00111101001000110111110010110110", 
    48 => "00111101101100111111010001000110", 
    49 => "00111100100100110100111011100111", 
    50 => "00111110000010101111010011001000", 
    51 => "10111101101001101001101000101001", 
    52 => "10111110001001100110000110111011", 
    53 => "10111101101011001100100110100100", 
    54 => "10111110000000110000101000111010", 
    55 => "10111110000010101010010011100111", 
    56 => "00111101111011010010001001101000", 
    57 => "00111101100111101001101101011101", 
    58 => "10111101110100111010010110001011", 
    59 => "00111100110101110000101111101010", 
    60 => "10111100010010100111110110100111", 
    61 => "10111101101101001011101110100000", 
    62 => "00111100101000010010111011010010", 
    63 => "00111101011101111111111001011101", 
    64 => "00111101001001010000001101111101", 
    65 => "10111101110101111000010000000111", 
    66 => "10111101100001000001011110001001", 
    67 => "00111101101011011100100110110000", 
    68 => "10111100010110000010001111000000", 
    69 => "00111100001001000010001101101011", 
    70 => "10111100100110000101010110100101", 
    71 => "00111101010100101011111001101010", 
    72 => "00111101101001011011011010001000", 
    73 => "10111100111111001100001101100011", 
    74 => "10111110000110011001001111110111", 
    75 => "10111110000000101100111010100001", 
    76 => "10111101101110111100000000000110", 
    77 => "00111100100000101100010001000110", 
    78 => "10111110000001100000111101001111", 
    79 => "10111100101000000011110110110001", 
    80 => "00111101110001101001001010000010", 
    81 => "00111100011111001010100011000110", 
    82 => "00111101110101101001001100011111", 
    83 => "10111011010010000001110110110000", 
    84 => "00111101011010001001110000001110", 
    85 => "10111100100000100001011101100110", 
    86 => "00111101100001101100011010101010", 
    87 => "10111110011010001001110110101110", 
    88 => "10111100101011001010100111011000", 
    89 => "00111100110011100100010110111011", 
    90 => "00111110000101101111111000101011", 
    91 => "00111101010110000110111010100100", 
    92 => "10111110000101110001001001011001", 
    93 => "10111110000010101010111011110001", 
    94 => "10111101010000000101110001001100", 
    95 => "00111101111001011001111010110001", 
    96 => "00111101100010011010110001001100", 
    97 => "00111101111111000111011111011110", 
    98 => "00111101010101110111010011100001", 
    99 => "10111110000100010001000010100001", 
    100 => "00111100100000001010110101101101", 
    101 => "10111110000111110010000100000010", 
    102 => "10111110000110011110101110110001", 
    103 => "00111100101001011111000001110010", 
    104 => "10111100000001000010110110000000", 
    105 => "00111100110001111111000010010111", 
    106 => "00111110000000100101000111111101", 
    107 => "00111011011100111110001010100000", 
    108 => "10111110000101011110000101101010", 
    109 => "00111100100101100001011101100000", 
    110 => "10111110000001110000111110011100", 
    111 => "10111110001011001101010000101111", 
    112 => "00111101000000101100101001111001", 
    113 => "00111101010101011010001001110101", 
    114 => "00111101101111110010010000111110", 
    115 => "10111110001111000101010001011110", 
    116 => "10111101000010001001000101001011", 
    117 => "10111101110111110100000111011110", 
    118 => "10111101110101001100110101001010", 
    119 => "10111010000100101011011110000100", 
    120 => "10111100011010110110010000000100", 
    121 => "10111101100011000000100111111010", 
    122 => "10111100101011010011111111001111", 
    123 => "00111100100000011010001101110010", 
    124 => "10111101001100000010111000101011", 
    125 => "00111101001110110000010101001100", 
    126 => "00111110001100011011010100100011", 
    127 => "00111100010011001100001100101110", 
    128 => "10111110000001100010001101000111", 
    129 => "10111100110110000100010001010000", 
    130 => "10111101111001001000110110111001", 
    131 => "10111101100011001011001001100110", 
    132 => "10111101001000010100111011110110", 
    133 => "10111110010010010000001101010000", 
    134 => "10111101101011101110111101101011", 
    135 => "00111101111100001001101110111010", 
    136 => "00111110011000001101111000101011", 
    137 => "10111110100110000000011100000011", 
    138 => "10111110001011100110110110100101", 
    139 => "10111110010001011101001011011001", 
    140 => "10111101000100011101110011001000", 
    141 => "10111101101101100001111101001100", 
    142 => "00111110100101111001100011010011", 
    143 => "00111101011101010011001001011011", 
    144 => "00111011110001011001011000010001", 
    145 => "00111101001000100100001101011100", 
    146 => "00111101111001100001010101000100", 
    147 => "00111101001001000011101000001100", 
    148 => "00111011111011100110101110011001", 
    149 => "00111101100001010001111000110101", 
    150 => "00111101001011101010001000011101", 
    151 => "10111110100001110111011110000010", 
    152 => "00111011001000011111001101010010", 
    153 => "10111101000011010111001010010111", 
    154 => "00111101100101000001101001000100", 
    155 => "10111100101100100000111000101011", 
    156 => "00111101101001011100100111001110", 
    157 => "10111100110011100010110101000011", 
    158 => "10111100110110111010111011111100", 
    159 => "10111101010001111000110000110111", 
    160 => "10111101110100111100001111001101", 
    161 => "00111101001101110101001111110010", 
    162 => "10111110001000100001010010101000", 
    163 => "10111101000000101010010011010001", 
    164 => "10111101011001100001110011000101", 
    165 => "10111101100000001110111001000110", 
    166 => "10111101111101100000110010001000", 
    167 => "00111101100110101001011001010011", 
    168 => "00111110001001001111111011111010", 
    169 => "10111110000011011101000110000000", 
    170 => "10111100010010010101001011000111", 
    171 => "10111101010011100000001000110110", 
    172 => "00111100111111111110010101101011", 
    173 => "00111110000101100000100011010111", 
    174 => "10111101100111011011001101101100", 
    175 => "10111110010100010000011101001111", 
    176 => "10111101010101011110111111001000", 
    177 => "00111101111111010101101010101101", 
    178 => "00111101010010111011100011100010", 
    179 => "10111110000111000010111011010001", 
    180 => "00111101100101111010111001011011", 
    181 => "00111100110010011101111001011000", 
    182 => "10111101010000010100000110101110", 
    183 => "10111100110001000100110110001000", 
    184 => "10111100100010110010110110101010", 
    185 => "00111110001000011101101001000000", 
    186 => "00111100000110111101101101110001", 
    187 => "00111101000010000100000000010111", 
    188 => "00111101000001111110111100011100", 
    189 => "00111101100100110110001001101010", 
    190 => "00111101100010111010111010110111", 
    191 => "10111100110000101001100000100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibdk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibdk is
    component conv_2_conv_2_weibdk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibdk_rom_U :  component conv_2_conv_2_weibdk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


