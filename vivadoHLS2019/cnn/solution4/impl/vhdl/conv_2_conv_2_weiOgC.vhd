-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiOgC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiOgC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100010101000101111010100", 
    1 => "00111101011000011111101011101010", 
    2 => "00111101101100010101010011011001", 
    3 => "00111101110000010000000111001010", 
    4 => "00111101001110111111001100000110", 
    5 => "00111110000100000100101111111010", 
    6 => "00111001100001010111010110101010", 
    7 => "10111100111101110000100010100001", 
    8 => "00111101000000001010100001110001", 
    9 => "00111110001101010000011001111111", 
    10 => "10111101101111110011110011111011", 
    11 => "00111100100101000100000001101111", 
    12 => "10111101101111101111011001110011", 
    13 => "10111110000000110000111101101101", 
    14 => "10111101111001001001010001101011", 
    15 => "00111100100100000100110110011000", 
    16 => "00111110001101100111010100001111", 
    17 => "10111101111011110001010001110010", 
    18 => "10111101110110010001000001000111", 
    19 => "00111101111101000111101100011000", 
    20 => "10111010100001000000000001111010", 
    21 => "10111110001010011110110111111011", 
    22 => "10111110000101010101110110111010", 
    23 => "00111110001011010110110101100000", 
    24 => "10111100001001111001011110110001", 
    25 => "00111101000000111011010011011100", 
    26 => "10111101111101011100011010010110", 
    27 => "00111101101000000101111110011011", 
    28 => "00111100110000011001110111110100", 
    29 => "00111010011110101110001011100110", 
    30 => "10111100111001101110100010011001", 
    31 => "10111101011111011001011000100101", 
    32 => "10111110000010100011110011011110", 
    33 => "10111110000011101010100011100001", 
    34 => "00111101110101010111001111001011", 
    35 => "00111101110100010011110101111010", 
    36 => "00111101110001110101011101111000", 
    37 => "00111100100101100111110100100100", 
    38 => "10111101111111101011110101010111", 
    39 => "10111101001000110111100100001001", 
    40 => "00111101011111101101011110100000", 
    41 => "00111100111010011000000111010100", 
    42 => "10111100110011111001100000110010", 
    43 => "10111110000101110001000000010001", 
    44 => "10111101011101000000111100111111", 
    45 => "00111101000101101110010110000100", 
    46 => "00111101101000011110001101011101", 
    47 => "10111101101000100111000001101111", 
    48 => "00111110001000110110000101100101", 
    49 => "10111101100110010101100111001011", 
    50 => "10111110000010101111010010101111", 
    51 => "10111101011100011001010010001001", 
    52 => "10111110100011100011111011010001", 
    53 => "00111100011110101011110001001101", 
    54 => "00111100100010110110001011111100", 
    55 => "10111110000000011100101001100010", 
    56 => "10111101011101001101000101111001", 
    57 => "00111101111111011000011111100001", 
    58 => "10111101100100110111111111001101", 
    59 => "10111101011000110110100011011101", 
    60 => "10111101111110001000011001111011", 
    61 => "10111101100101011101001010000000", 
    62 => "00111100011010001010100011010100", 
    63 => "10111101100000111100001111000111", 
    64 => "00111101011011001011010101001000", 
    65 => "10111101001100111011111111110101", 
    66 => "00111101000110101101100010011011", 
    67 => "00111101010001101110000111110000", 
    68 => "00111101000100001101011100010111", 
    69 => "00111011101000010001111100011011", 
    70 => "10111100011100001000100101110111", 
    71 => "10111101010100000100100000001111", 
    72 => "00111101001010101111000011000001", 
    73 => "00111100110000100000010001000111", 
    74 => "00111011011101001111011110101000", 
    75 => "10111110000111110111101100011110", 
    76 => "00111100101101001000110110011110", 
    77 => "00111100000111010100100011000101", 
    78 => "10111101000110011000011001111101", 
    79 => "10111101010011000110001101111001", 
    80 => "10111100111100011001101011010001", 
    81 => "00111101011110001110110000000011", 
    82 => "00111101010111101100101000011000", 
    83 => "00111100001100110111001001010100", 
    84 => "10111101101001100001101100101010", 
    85 => "10111110011111111000110001111110", 
    86 => "00111110000000001110011011011010", 
    87 => "10111101111100010001010001100101", 
    88 => "10111101101010000000000111000100", 
    89 => "10111101100111110111111111000100", 
    90 => "00111101000011000000100101000001", 
    91 => "10111110100010010101011101000010", 
    92 => "00111101000001110010110100110011", 
    93 => "00111101001111000111010000100000", 
    94 => "10111110010001001111110010111111", 
    95 => "00111100101001111101110110010001", 
    96 => "10111110001110100011100100000011", 
    97 => "00111110001110101100111111100110", 
    98 => "00111101100011011011101110100000", 
    99 => "10111100110111100101011010110110", 
    100 => "00111101010111110110111001111100", 
    101 => "00111101110100000000100000001101", 
    102 => "10111110001011100011010101010001", 
    103 => "00111101101100110010100110000110", 
    104 => "10111101110011101111101111111101", 
    105 => "00111100000111000011011100101000", 
    106 => "00111101101010111011010100100011", 
    107 => "10111101001001001100110111111000", 
    108 => "10111110001000011111100011111100", 
    109 => "10111101110001101110100111111100", 
    110 => "10111110011100011011010011010001", 
    111 => "10111110011100001100110101100011", 
    112 => "10111101100001100010000010100010", 
    113 => "10111110000011100011000110000100", 
    114 => "10111110001111011101100011100110", 
    115 => "00111100100000010011100011101001", 
    116 => "00111100100011011101100100101001", 
    117 => "10111110010101000111101111100100", 
    118 => "00111101010111010101101001001011", 
    119 => "00111101010100111000111100011010", 
    120 => "10111101011011011001011011010101", 
    121 => "00111100101100100111001011110011", 
    122 => "10111101010001110101010011111011", 
    123 => "00111101110100010010100110101101", 
    124 => "10111110010100011010100100000111", 
    125 => "00111101010010000010100111000110", 
    126 => "00111101010110110111111010000101", 
    127 => "00111101110000100001111110011000", 
    128 => "10111101100000010010000000111110", 
    129 => "10111101000001001000100011011100", 
    130 => "00111101001001001100000110111011", 
    131 => "10111100001110100100010111101011", 
    132 => "10111101101100000001111100111111", 
    133 => "10111110001111010111101100110110", 
    134 => "10111110011001010100101111010101", 
    135 => "00111100101110100101011000110001", 
    136 => "00111110001011110101001011101110", 
    137 => "00111101001111011011111001110011", 
    138 => "00111011111101111011101011101000", 
    139 => "10111110001000001111011000101001", 
    140 => "10111101000001100111001101100010", 
    141 => "10111100111001011001110100001101", 
    142 => "00111101101110001000101010010110", 
    143 => "00111101110111000011101101001010", 
    144 => "10111011111100110111011011011001", 
    145 => "10111101010011000001100001110010", 
    146 => "00111101000110000000100001110010", 
    147 => "00111011100111100100100111110000", 
    148 => "00111101001111101111100101100111", 
    149 => "10111101100101001110100100101100", 
    150 => "00111110000000111101001000001111", 
    151 => "10111110101010100001001101111100", 
    152 => "10111101100111000001110100011100", 
    153 => "10111101111010001010010001100011", 
    154 => "00111101110010111110101100001101", 
    155 => "10111101111001010110110001111011", 
    156 => "00111101000100110101100100101011", 
    157 => "00111101011100101000010101001110", 
    158 => "10111101100111010110011011100001", 
    159 => "10111101100001111101110100101011", 
    160 => "10111110010100111010111010000001", 
    161 => "00111101011010001100011100100001", 
    162 => "00111101011000001100111000011000", 
    163 => "10111011000100010001011001110010", 
    164 => "10111101111000001011010001000101", 
    165 => "10111110010111110110011110010000", 
    166 => "00111101111000100101101111010010", 
    167 => "00111110010001011001001011011110", 
    168 => "10111100110001010000000001001101", 
    169 => "10111110001100011000110000011001", 
    170 => "00111010101001101101100100001001", 
    171 => "00111100001001000010001101100000", 
    172 => "00111101011110110111011010100010", 
    173 => "00111100100011110111110111011110", 
    174 => "00111110010000100001010011011111", 
    175 => "10111101111010111110001101100010", 
    176 => "10111101101000110111101110110111", 
    177 => "00111101100110010000001001000101", 
    178 => "10111110011101000111011101011111", 
    179 => "10111110001011010000000010001101", 
    180 => "00111100000111011101100100101010", 
    181 => "10111101110111010001001110100000", 
    182 => "10111110001001010011100110011001", 
    183 => "00111101101110111111111010000101", 
    184 => "00111101000101001100111001101111", 
    185 => "10111101110110110111011111100111", 
    186 => "10111101111000101001111010001101", 
    187 => "10111110100101011110001101010000", 
    188 => "10111110000001011001110111101111", 
    189 => "00111101110010001001000011010011", 
    190 => "00111110001101000001100100010101", 
    191 => "00111110001100010110101111000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiOgC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiOgC is
    component conv_2_conv_2_weiOgC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiOgC_rom_U :  component conv_2_conv_2_weiOgC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


