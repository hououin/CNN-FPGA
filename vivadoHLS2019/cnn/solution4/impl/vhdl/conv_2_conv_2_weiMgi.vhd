-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiMgi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiMgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100000100111001100001101", 
    1 => "10111101111110010010010110000110", 
    2 => "00111100001100101010011111010101", 
    3 => "10111100001110100011000111110101", 
    4 => "00111100000110000000111100101111", 
    5 => "00111100100100010100001111010000", 
    6 => "10111101101101100100101100000000", 
    7 => "10111101101000010000100100011011", 
    8 => "10111101011001001100011000101000", 
    9 => "10111101111011101101111111011011", 
    10 => "10111101110110001100011011111100", 
    11 => "00111101100000111100100011001110", 
    12 => "10111101011111010011110111010011", 
    13 => "10111110011100110001000011100111", 
    14 => "10111110010001010111000000010101", 
    15 => "10111101100010100011100000111000", 
    16 => "10111110010101010111101010101111", 
    17 => "10111101001001010100110001000011", 
    18 => "10111110001100101010010001110111", 
    19 => "00111101110011000000000000011111", 
    20 => "10111110001100100111010110100110", 
    21 => "10111110101110100001100010100111", 
    22 => "10111110010000001001101000111000", 
    23 => "10111101110010011000100001010010", 
    24 => "00111100010110010101000011101011", 
    25 => "00111110001010100111000011001111", 
    26 => "00111100001010000011001011000100", 
    27 => "00111101101011110011010010111000", 
    28 => "10111110001110011100110000000000", 
    29 => "00111110001001110101111111001110", 
    30 => "10111100101111100011001001001101", 
    31 => "10111110001000111011100111110110", 
    32 => "10111101110110000001101001101100", 
    33 => "10111110011101101111001001100000", 
    34 => "10111101101001110111011010011110", 
    35 => "00111110010001111100101100100000", 
    36 => "10111101011001100010001001101001", 
    37 => "00111101011001111111101111100101", 
    38 => "00111101100101101110000110011111", 
    39 => "00111101110001101110000100100010", 
    40 => "00111100110101110011000111100010", 
    41 => "00111101100010000111010110011010", 
    42 => "10111110000111100010010111010010", 
    43 => "00111110000010010010101101101100", 
    44 => "00111101101001101000100010011111", 
    45 => "10111101101010101110110101101100", 
    46 => "10111101100010100010011001101010", 
    47 => "00111101110101100111001010010111", 
    48 => "00111101101011011010100111110000", 
    49 => "10111110011100001001111010001110", 
    50 => "10111101100100001111100111101011", 
    51 => "10111101001111100101000100001011", 
    52 => "10111110100001111010000011101100", 
    53 => "00111101110100011110000000100000", 
    54 => "10111100110110011001010011010100", 
    55 => "10111110000110111011111000100100", 
    56 => "10111110010101100001001101100110", 
    57 => "00111101100110110100100101111001", 
    58 => "10111101110010000001000010010011", 
    59 => "00111011110000011111110110011000", 
    60 => "10111100110100011001000101001110", 
    61 => "10111101001010110101010011000111", 
    62 => "00111101011101000000000101100100", 
    63 => "00111011111101111100001101011100", 
    64 => "10111101010111101001100001000100", 
    65 => "10111101111010100011011000000010", 
    66 => "10111101110000111011001011101010", 
    67 => "00111011011000101110100011110010", 
    68 => "10111101000000110001011011011110", 
    69 => "10111101100100100001000011000000", 
    70 => "10111101100011110111011000111110", 
    71 => "10111101101010010011100100110110", 
    72 => "00111101000100100011101000100010", 
    73 => "00111101111001100001001001100001", 
    74 => "00111101100011001001000010000010", 
    75 => "00111101000001010010000100000101", 
    76 => "10111110010001001110000001101010", 
    77 => "10111110101001100011100001011110", 
    78 => "10111101011100001011011110111110", 
    79 => "10111101000110110000110111010111", 
    80 => "00111101000101111000101111001010", 
    81 => "10111101110011001010010010111001", 
    82 => "10111100100001100111111011010100", 
    83 => "00111101100010010110001101110000", 
    84 => "10111110001010000110010001111101", 
    85 => "10111110011110001100011100100010", 
    86 => "10111100111001000100010000011100", 
    87 => "10111100110010000000100110110111", 
    88 => "10111101100110011101110101000001", 
    89 => "00111100110011000110010011010010", 
    90 => "00111101010001111001001000110110", 
    91 => "10111110100001101110010011011111", 
    92 => "10111110000001100101001101110110", 
    93 => "00111101100110100111110101110100", 
    94 => "10111110010010110011101101000011", 
    95 => "00111110000001101000011100011101", 
    96 => "10111110001101000000000111111010", 
    97 => "10111110001001000100110001111011", 
    98 => "10111100111001011101011110100111", 
    99 => "00111100111000001101100101110110", 
    100 => "10111100011110011111100111101011", 
    101 => "00111101111101010011001111001101", 
    102 => "10111110000100100111101000111101", 
    103 => "10111101100110010100001100011010", 
    104 => "00111100111001110010110000011111", 
    105 => "00111100100010010101011001010011", 
    106 => "00111100100001001111010100000001", 
    107 => "10111110000001111011100000000101", 
    108 => "00111101100000010010011110001100", 
    109 => "00111011111100110011100001111110", 
    110 => "10111101011000011100110010001000", 
    111 => "00111101000111111010000100111111", 
    112 => "00111110001101001010000001000110", 
    113 => "10111101010010011011101011111100", 
    114 => "10111110001111100111100000101111", 
    115 => "10111101001001011001110001100100", 
    116 => "10111101000010100110111001110111", 
    117 => "10111100011100010110010100111111", 
    118 => "00111101101010001010011000100100", 
    119 => "10111110011001001111010010111011", 
    120 => "10111101010011001000000011011101", 
    121 => "00111101110110111011101011000010", 
    122 => "00111101001111010001001101110110", 
    123 => "10111100001000111001000111011000", 
    124 => "10111110100001101010011101111110", 
    125 => "00111101101000011011110111100010", 
    126 => "10111101101010001100001001011000", 
    127 => "10111100101000111111100101001001", 
    128 => "10111101110111010001110100111010", 
    129 => "00111110010011101010111000001100", 
    130 => "00111110000000001010001000001101", 
    131 => "00111101110101000110000101100010", 
    132 => "10111101101110111011110111001001", 
    133 => "10111110001000011010010100000111", 
    134 => "10111110010011111011100111000010", 
    135 => "00111101010100110001110111110001", 
    136 => "10111101100000110110100011110101", 
    137 => "00111011111001100001100011111000", 
    138 => "10111101110101110001101011011100", 
    139 => "10111110100001011011010100010001", 
    140 => "10111101101100101011100011000010", 
    141 => "00111101011111111000111100111000", 
    142 => "10111101010110011111110001101011", 
    143 => "10111100011001011111101101100001", 
    144 => "00111101110100101111001101001011", 
    145 => "10111101000100101000010111000111", 
    146 => "00111101111101100101000100001001", 
    147 => "10111100101010010010000010101101", 
    148 => "10111110010100011101100111001000", 
    149 => "10111110001011111100110101000000", 
    150 => "10111101000000110100011011010100", 
    151 => "10111110010111000010111000000101", 
    152 => "00111010001001110101100111001001", 
    153 => "10111101101110011101101100001110", 
    154 => "10111011011111111111011001111110", 
    155 => "10111110001001000110010000100000", 
    156 => "10111101010111110110001011000110", 
    157 => "00111110001010001010010110010111", 
    158 => "10111110011011111001010010100011", 
    159 => "10111010101000010011000010011101", 
    160 => "10111110010010000000001010110000", 
    161 => "00111101111001111000110010100010", 
    162 => "10111110000011111100011011010000", 
    163 => "10111101001101010110111110110110", 
    164 => "00111101110001000110110001101101", 
    165 => "10111101110110100111100001110101", 
    166 => "00111101101011010100011110001010", 
    167 => "00111100101101000010010101011010", 
    168 => "10111110011001010101001000010001", 
    169 => "10111101100000010011011110001111", 
    170 => "10111101001001010100111111001111", 
    171 => "00111100101110011110010101001110", 
    172 => "10111011100001001110000011010011", 
    173 => "10111110100011100100101110100101", 
    174 => "10111100000001010110111010010000", 
    175 => "10111110000100001010101111011000", 
    176 => "00111101101111110110000011001011", 
    177 => "10111110001011010001010100000111", 
    178 => "10111110100000110111010010101111", 
    179 => "10111101111111101000110110100100", 
    180 => "00111101100001100011011100111010", 
    181 => "10111110101010101100000110100110", 
    182 => "00111101011110111101001000011110", 
    183 => "10111101000011010100001000110000", 
    184 => "00111110000001111110001100101101", 
    185 => "00111101100000101111100110100010", 
    186 => "00111101010100110011100000011011", 
    187 => "10111101000001010111010011011110", 
    188 => "10111101100011101100110000101111", 
    189 => "00111100001011101001110000000100", 
    190 => "10111110000000110100000101001110", 
    191 => "10111110000010111011001001010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiMgi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiMgi is
    component conv_2_conv_2_weiMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiMgi_rom_U :  component conv_2_conv_2_weiMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


