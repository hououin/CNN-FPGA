-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weipcA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weipcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001010111111111110000100", 
    1 => "10111011100110101110110111101001", 
    2 => "00111110100001100011100100001100", 
    3 => "10111101100010100011000111001011", 
    4 => "00111101011011101001000011001101", 
    5 => "00111101011010000101011100110100", 
    6 => "10111110001101011001111101000111", 
    7 => "00111110010100100011011010011101", 
    8 => "00111011011000111001010010110010", 
    9 => "00111101011110010000010101100011", 
    10 => "10111101100010001101110001000101", 
    11 => "00111101101010010011110100110111", 
    12 => "10111101100110101010011010100011", 
    13 => "10111110000010001100010110011110", 
    14 => "10111110000010011100101100110110", 
    15 => "10111101010011111101101111101011", 
    16 => "00111110000001001000000100010100", 
    17 => "10111100100101001011010010001000", 
    18 => "00111101001000010010001011100111", 
    19 => "00111110001000110010111011001110", 
    20 => "10111101001100001101011001011101", 
    21 => "10111101001010001010010010111110", 
    22 => "10111110010110010111110110111010", 
    23 => "00111110001111100001010101001001", 
    24 => "10111110001101111010110010101000", 
    25 => "00111110001110001110010010000111", 
    26 => "10111101100001101001010010011001", 
    27 => "00111011100100011011110101001000", 
    28 => "00111101110010101010000011000100", 
    29 => "00111101110001110011110100001110", 
    30 => "10111110010110000101110000010101", 
    31 => "00111101011100101101100101000100", 
    32 => "10111101111111011101000110001100", 
    33 => "10111100100100011010000110111010", 
    34 => "00111110001111010000110011101000", 
    35 => "00111100111001010110011001100110", 
    36 => "00111110100010011010000101010001", 
    37 => "00111101110101010001010000001111", 
    38 => "10111110100010110100001011010101", 
    39 => "10111011011001000000001100001010", 
    40 => "10111110000011010000100111010100", 
    41 => "00111100111101101100110010100010", 
    42 => "00111110001000100110000010011111", 
    43 => "10111101010011100100110101100000", 
    44 => "10111101111010100001111100001001", 
    45 => "10111101111000100101011011001001", 
    46 => "10111101101110110111110011001001", 
    47 => "10111110010101011111110111010110", 
    48 => "10111100100101011101111110011111", 
    49 => "10111110011010010000110000010000", 
    50 => "10111101101111100001101100110010", 
    51 => "10111100001000101111100001000110", 
    52 => "10111110100011000101111010110011", 
    53 => "00111110001010000100011010011101", 
    54 => "00111110010000000001110000011100", 
    55 => "10111101011111001101111010000101", 
    56 => "00111101100001001110101011000000", 
    57 => "00111101111110101011011100100110", 
    58 => "00111101011000111100001001100100", 
    59 => "10111110001000100001011110000010", 
    60 => "10111110100000110110100101010100", 
    61 => "10111101011010101001001001010100", 
    62 => "10111101010000111110011100001110", 
    63 => "10111101111111101110111111111110", 
    64 => "10111101001100101000001101000011", 
    65 => "10111101001010010101110101001111", 
    66 => "00111011000010101101000110101100", 
    67 => "00111101111110001100001110001000", 
    68 => "10111101000011100101100111010000", 
    69 => "10111101100110000110000000100010", 
    70 => "10111101100000001001111010011000", 
    71 => "00111101111110000100001100011100", 
    72 => "10111101111100110100101010100110", 
    73 => "10111110000110000011101110110111", 
    74 => "10111110110111100100001100001111", 
    75 => "10111110000101100010100110010001", 
    76 => "10111101111111110001000101001110", 
    77 => "00111011010000001011000010111000", 
    78 => "10111110000111011010111001111101", 
    79 => "10111110000010111001110011110011", 
    80 => "10111100011100101111110111011001", 
    81 => "00111101111101011110101100110100", 
    82 => "00111110001000000011000100110001", 
    83 => "00111011101001110100101111011110", 
    84 => "00111101100001101111101000001101", 
    85 => "10111101110100010110111110111111", 
    86 => "00111101111000010010010011010101", 
    87 => "10111100110110101111010111000010", 
    88 => "10111101111000100001110110111100", 
    89 => "10111110100001111110110101011101", 
    90 => "00111010010000000110111011001100", 
    91 => "10111110110010100001101110010111", 
    92 => "00111101110101001010100111100101", 
    93 => "10111101110101010111111111100010", 
    94 => "10111110001001110101111111101101", 
    95 => "00111101111001110001000111100101", 
    96 => "10111110001110110101001010101001", 
    97 => "00111101010101111011100101111000", 
    98 => "10111110000011110110000011101000", 
    99 => "10111110001001101011001110001011", 
    100 => "00111101110110000001011011101010", 
    101 => "00111011000010100111110100001101", 
    102 => "10111101010010110111101010110010", 
    103 => "00111101101110010011101100101110", 
    104 => "10111101001101010011001000110000", 
    105 => "10111101100000111110000000100010", 
    106 => "00111110000001111111100001100111", 
    107 => "00111101000110100000101110011010", 
    108 => "10111110010011011100001001111011", 
    109 => "10111110101000110111000110001001", 
    110 => "10111110001010110001000011000001", 
    111 => "10111110101000111001010010110010", 
    112 => "10111100011001110010101010000001", 
    113 => "10111101100010000110110100010111", 
    114 => "10111110100000100010000011111101", 
    115 => "00111101001111111000100101010111", 
    116 => "10111101000110001000011111100011", 
    117 => "10111110000000010100101001100101", 
    118 => "10111100011110000111110101110001", 
    119 => "00111110000001010110001000110010", 
    120 => "00111101010101010011010010111000", 
    121 => "00111100011110011001110100110110", 
    122 => "00111100011010100010010111000101", 
    123 => "00111101101111100000100100000001", 
    124 => "10111110111010111100011110011001", 
    125 => "00111101111000010111000111110111", 
    126 => "00111100101101011001001100100010", 
    127 => "00111100101100101000000100111101", 
    128 => "10111110000111011001111001100011", 
    129 => "10111101001011100001101110101000", 
    130 => "10111110001010011010001011011100", 
    131 => "00111101011101110110011001011110", 
    132 => "00111101000110101100010110110010", 
    133 => "10111101101000110011011110111010", 
    134 => "00111101010110111000110011000000", 
    135 => "00111101111010011010010001001011", 
    136 => "00111110001100000000010110101101", 
    137 => "00111110000011001111011100010101", 
    138 => "10111110000010001111011110011100", 
    139 => "10111110100011111011000101000101", 
    140 => "10111101101010111101011011101010", 
    141 => "00111101000011001000010001111010", 
    142 => "00111110000010011011100010000011", 
    143 => "00111110000101110001110010100011", 
    144 => "00111101000011001101100111000110", 
    145 => "10111101111110101100110010011100", 
    146 => "10111100011001010000010100010011", 
    147 => "10111110011001010110001110101110", 
    148 => "00111101101001110010100100001010", 
    149 => "00111101000011000100101110110101", 
    150 => "00111101100110110011111011011011", 
    151 => "00111100011101001111001111001011", 
    152 => "10111110010011100100111000001000", 
    153 => "10111101000110111010000010100100", 
    154 => "00111101100110111100010000011001", 
    155 => "10111101111001001100101111010110", 
    156 => "10111101110101000001100010110101", 
    157 => "10111110001011110100000111100001", 
    158 => "10111110000101101111110001111100", 
    159 => "00111101000011010111010110111100", 
    160 => "00111110001100011011101010101100", 
    161 => "10111100100111111001010011101111", 
    162 => "00111110001110110010111001100011", 
    163 => "00111110000001000011110111110000", 
    164 => "10111110001011010000111011001110", 
    165 => "10111110101001010100100101101101", 
    166 => "00111110100000010111010110001001", 
    167 => "00111110010011100010001100000110", 
    168 => "00111101101110001101101100110101", 
    169 => "10111110100111011110010010001100", 
    170 => "10111101111100101010000110001100", 
    171 => "00111110000111001000110100111111", 
    172 => "00111110011001111110111011011000", 
    173 => "00111110000101000110110000011000", 
    174 => "00111110010001001110011011111110", 
    175 => "10111101001001011010101111010111", 
    176 => "00111110000010011011101001000100", 
    177 => "00111110000100011110011000100001", 
    178 => "10111110010110001111100010010110", 
    179 => "10111110100110101000001101001101", 
    180 => "00111101101010110011001011001100", 
    181 => "10111110001010011000110111010001", 
    182 => "10111110001101010011110100110011", 
    183 => "00111101100111111100010110111001", 
    184 => "00111101000011011111011111010000", 
    185 => "10111110010101111011100001011011", 
    186 => "10111110100000101010101011011100", 
    187 => "10111110110110000000011111101110", 
    188 => "10111110000110101000111010010111", 
    189 => "10111101111110000000000110110100", 
    190 => "00111110001010011110000110110000", 
    191 => "00111110001111011011011100101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weipcA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weipcA is
    component conv_2_conv_2_weipcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weipcA_rom_U :  component conv_2_conv_2_weipcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


