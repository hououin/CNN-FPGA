-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibFp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibFp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010100000110011101101000", 
    1 => "10111110000010111011111100011001", 
    2 => "10111110010110001110100010111000", 
    3 => "00111100101111001001010101110100", 
    4 => "00111011111011010111111010011111", 
    5 => "00111101010001010100011111101010", 
    6 => "00111100111010001011000011000001", 
    7 => "10111100100010001101101011010010", 
    8 => "00111101101111100010000010111010", 
    9 => "10111101110001000110001110001110", 
    10 => "10111100000000010000111111000010", 
    11 => "10111101111111001111110001000000", 
    12 => "00111100110000001011010001011001", 
    13 => "00111101001011000100010110110011", 
    14 => "00111100111001100111000100101111", 
    15 => "00111100101010011110011101100010", 
    16 => "10111100100101010010001101001111", 
    17 => "10111101110100101000011000110011", 
    18 => "10111101010110101001000101000110", 
    19 => "10111101001110111000001111010101", 
    20 => "10111101101000101001110010001101", 
    21 => "00111100101011100101011111101001", 
    22 => "10111101110100001000110011111010", 
    23 => "00111101001011001111110101011110", 
    24 => "10111101101000111000001111110111", 
    25 => "10111100000010001010111001011010", 
    26 => "10111100111000101101001011010001", 
    27 => "10111110001110111011000011001110", 
    28 => "00111100100010011111001000111111", 
    29 => "00111011101000011011100101000100", 
    30 => "00111100010001100111111100011001", 
    31 => "10111101110011100010111001010001", 
    32 => "00111010100100010000111101011001", 
    33 => "10111110000001100000011001110110", 
    34 => "10111100010111001000110111010000", 
    35 => "00111101100010000000000000101111", 
    36 => "10111110011001100001000010000011", 
    37 => "10111101100011110101110110011011", 
    38 => "10111100111100010101000101000101", 
    39 => "00111101101010101010011110000110", 
    40 => "10111100110000110000010101100010", 
    41 => "10111101011111110000000001011010", 
    42 => "00111100111101010001110000010100", 
    43 => "00111101110011101010001011111101", 
    44 => "00111101011001101011010001010010", 
    45 => "00111101101101001001001011010110", 
    46 => "10111101010111011110000000111010", 
    47 => "00111101000001100110100111000011", 
    48 => "10111110010001110101011001111111", 
    49 => "10111101100000101110011010100010", 
    50 => "10111101001101110010011110000110", 
    51 => "00111101100001001001011000011100", 
    52 => "10111110011110111111010011111100", 
    53 => "10111001001100001011001101001000", 
    54 => "10111110000101001110001101101110", 
    55 => "10111011100110011001010100100001", 
    56 => "10111100101001011001110110011111", 
    57 => "10111101110001110011101111100110", 
    58 => "00111101101001000010110001101100", 
    59 => "00111110000010101100011000100001", 
    60 => "00111011111100101110001010001011", 
    61 => "00111101100101000010011101110110", 
    62 => "00111100100101100100100110100001", 
    63 => "00111101100100100111001010001000", 
    64 => "10111101011010010101111000100111", 
    65 => "00111101111000010101010011110100", 
    66 => "00111100101010110001001001010001", 
    67 => "00111101101110111100100101101101", 
    68 => "00111100011111110000110111001001", 
    69 => "10111101101011010111010110001100", 
    70 => "10111011111101111110101001011111", 
    71 => "10111101110110101110110101100000", 
    72 => "10111101001100100110111111101011", 
    73 => "10111010010111110001011111100111", 
    74 => "00111101000000100011111010100100", 
    75 => "10111100110011010010100100100011", 
    76 => "00111101111001100110101000001011", 
    77 => "00111101100110111001111011101000", 
    78 => "10111100100000011100011101111000", 
    79 => "00111100100000010000101100100110", 
    80 => "00111101010010001100101101010011", 
    81 => "00111100111001011111000001100011", 
    82 => "00111011110010010110110000110010", 
    83 => "10111101010011111010101101111010", 
    84 => "10111110000011010001010001011101", 
    85 => "00111101101101111100100111011100", 
    86 => "10111101100000010100110111111000", 
    87 => "10111100101101110010001101001011", 
    88 => "00111101001100101000011011011001", 
    89 => "10111101000011101111100010000010", 
    90 => "00111101001000110111110000111111", 
    91 => "00111100110111000011011110100001", 
    92 => "00111101001100101100110100011010", 
    93 => "00111011000010001011011111010101", 
    94 => "00111100111001000110100000101101", 
    95 => "00111100111101011011110111101010", 
    96 => "10111101100010000000011111111101", 
    97 => "10111101101011111100010100111111", 
    98 => "10111100100100010111111110111001", 
    99 => "10111101101010001100100110010011", 
    100 => "00111101101010011001111110000000", 
    101 => "10111101011111011110010010000010", 
    102 => "00111101100101100011111101011110", 
    103 => "00111110001011001000000010000111", 
    104 => "00111100010111000111100101111011", 
    105 => "00111100010010010000110001101001", 
    106 => "00111101101100111010010101101001", 
    107 => "00111101010011010011011101100011", 
    108 => "00111101101101001101110000101101", 
    109 => "10111100110101111100100111010101", 
    110 => "10111011111100000111110011000011", 
    111 => "00111110000011100010011100000001", 
    112 => "00111101101100010111011110110000", 
    113 => "10111101101010100000011000000111", 
    114 => "10111101110111000100100001111001", 
    115 => "00111101111110110010001110111000", 
    116 => "10111101000011011111010110110110", 
    117 => "10111100111110101101010011001110", 
    118 => "10111101101001001000000010111000", 
    119 => "10111110010011110101111111110001", 
    120 => "00111100011000111000011100001000", 
    121 => "10111101000110010010101011000101", 
    122 => "00111101100100000011101101100000", 
    123 => "10111001000011111011011111000100", 
    124 => "10111101101110100001101100111100", 
    125 => "10111011001001000010101100100000", 
    126 => "10111101100000100010001010000011", 
    127 => "00111101001000011101000100010100", 
    128 => "10111101010000111000100000101001", 
    129 => "00111100110110101101000101010000", 
    130 => "10111100100110111001111111001101", 
    131 => "10111101010110000011010100101001", 
    132 => "00111101101011010011101101100111", 
    133 => "10111101101001110110011110001011", 
    134 => "00111101110100110110101100000000", 
    135 => "10111101000101101011110011111101", 
    136 => "10111101110110000110111110111011", 
    137 => "10111101111101100000011001101111", 
    138 => "10111110010001101101110011000000", 
    139 => "10111101100010100001100101001001", 
    140 => "00111101011100000001100100001110", 
    141 => "00111100110111111011111011000011", 
    142 => "10111101100101111010001100011111", 
    143 => "10111110001100001101001000000101", 
    144 => "10111101000111001010010110100111", 
    145 => "10111101100100011100110010001101", 
    146 => "10111101101101011010001011110001", 
    147 => "10111100100101001101000000111100", 
    148 => "10111101011010011001101110101001", 
    149 => "00111110001000101111010101110111", 
    150 => "10111100001001111110011110011100", 
    151 => "00111101110001011110011011000001", 
    152 => "00111101001101000110101000010100", 
    153 => "10111100001110100100000101110011", 
    154 => "10111010101011010110111101000100", 
    155 => "10111101011111001100010101011010", 
    156 => "10111110001100000010100110001111", 
    157 => "10111100101100001101010100111110", 
    158 => "10111101001100000110101011010101", 
    159 => "10111100100011000010000001100101", 
    160 => "10111101110010000000000100101000", 
    161 => "10111100001110111000011011110011", 
    162 => "10111110000101010100011111010011", 
    163 => "10111110011001101110011010001011", 
    164 => "00111110010001001111100101010110", 
    165 => "00111101001001110100000010000011", 
    166 => "00111100011110011010010010001110", 
    167 => "10111100100001111111010100011100", 
    168 => "00111101101101101101100110010010", 
    169 => "00111101110101010110111110010100", 
    170 => "00111010101001111110010101000101", 
    171 => "10111100011010000000110001111100", 
    172 => "00111110000011111001011100111100", 
    173 => "10111110100000010010100000010101", 
    174 => "00111101100100010011001000011001", 
    175 => "00111101100010000000100100010001", 
    176 => "00111101000001010000100110010001", 
    177 => "10111101100011110011001000111010", 
    178 => "10111011100101101001000011011101", 
    179 => "10111101100100110000011011011011", 
    180 => "00111100010011000101100100100110", 
    181 => "00111101101001010100000001011011", 
    182 => "00111100111100110000011100000000", 
    183 => "00111101101001010100100100110110", 
    184 => "10111110011100000000010100010001", 
    185 => "00111011100000010001011000100110", 
    186 => "10111100001111011000011110000100", 
    187 => "10111101000111001101110011101010", 
    188 => "00111100100001110000010100100100", 
    189 => "10111011000010011000100000101111", 
    190 => "10111101101000110001111101011010", 
    191 => "00111100100001110111011011011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibFp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibFp is
    component conv_2_conv_2_weibFp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibFp_rom_U :  component conv_2_conv_2_weibFp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


