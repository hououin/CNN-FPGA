-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibMq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibMq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100100100100001100101010", 
    1 => "10111110000100101111010011001111", 
    2 => "00111100111000011110000000001010", 
    3 => "00111110001101100111010101101110", 
    4 => "10111101101011000001000101011101", 
    5 => "10111101100100001010110101011001", 
    6 => "10111101100010011101101000100100", 
    7 => "00111101001101111100111110100100", 
    8 => "10111101101010100111011101000001", 
    9 => "00111101100010001101111001011111", 
    10 => "00111101111111001010000110000110", 
    11 => "10111100100001001001110101100010", 
    12 => "10111110000000011001011110100000", 
    13 => "00111110010111011000111111100011", 
    14 => "00111101110000111110001011101010", 
    15 => "00111101110100100000101111010111", 
    16 => "10111110101001111111101000010000", 
    17 => "10111101001101111111011110000001", 
    18 => "00111100101110011011101011101000", 
    19 => "10111110001111010111101100100101", 
    20 => "00111110001101010010100111110100", 
    21 => "00111100010110011011100100001010", 
    22 => "00111101101101011011101100011010", 
    23 => "10111101111010101111111100111101", 
    24 => "10111101110000000100110010111011", 
    25 => "00111100010110100010101100110000", 
    26 => "10111100001100101011101111111000", 
    27 => "10111101110010100111110101010010", 
    28 => "00111110010000000000010000000010", 
    29 => "10111110000111011010010001001011", 
    30 => "10111101101101010011011010000110", 
    31 => "10111110010001100101100010010010", 
    32 => "10111011110100101100011111000011", 
    33 => "00111110000001110101000100110011", 
    34 => "00111100111010001000011010100110", 
    35 => "10111110000100101101011011011101", 
    36 => "00111101100010110010010010111101", 
    37 => "00111101000111110010000110100011", 
    38 => "10111101011101011111110011001011", 
    39 => "10111110010111000001000001000110", 
    40 => "10111110110111011000000011010110", 
    41 => "00111110000001110111001100111110", 
    42 => "10111110000010000010111000000011", 
    43 => "00111110011011101111100010000100", 
    44 => "00111101000101000010011100011100", 
    45 => "00111101100010001111111111101001", 
    46 => "00111110001010000000001000000100", 
    47 => "00111110000110100001000000010110", 
    48 => "10111101011001000101001000110000", 
    49 => "00111100111011111010101001101000", 
    50 => "10111110010001010011000100111001", 
    51 => "10111110000111001011101001001101", 
    52 => "10111101111111111110000111110110", 
    53 => "10111101110000101101100011110110", 
    54 => "10111110010100011110001000010010", 
    55 => "10111101110100101001110110001000", 
    56 => "00111101100010010011001000110100", 
    57 => "10111110010000100111001100010000", 
    58 => "10111110010010100101001000000111", 
    59 => "00111010101001101001010001100111", 
    60 => "00111110000011100001111010000110", 
    61 => "00111101011000000000011010001101", 
    62 => "10111110001001111110111010001011", 
    63 => "10111110010000101110111011000011", 
    64 => "10111101111100101101010010001110", 
    65 => "10111101100011100111011101111010", 
    66 => "10111110001011001101111011001101", 
    67 => "10111101101010011001110111111101", 
    68 => "10111110010010010010010011001111", 
    69 => "00111101100011101110000101011001", 
    70 => "10111110100001000010101000011011", 
    71 => "10111100110001000001001010101110", 
    72 => "00111100100011111101111111001011", 
    73 => "10111101001000001011001100100010", 
    74 => "00111101111001000011011000000111", 
    75 => "00111110001001101100110111001100", 
    76 => "10111110101100010001111001110010", 
    77 => "00111101011101001010011110110010", 
    78 => "10111101001101000001011111001001", 
    79 => "10111100101111000110001100111000", 
    80 => "10111100001011111010011101110111", 
    81 => "00111100011001011111010010100100", 
    82 => "00111101100000100000010000011100", 
    83 => "10111101101001100011010001100111", 
    84 => "00111100110110111000001100001010", 
    85 => "10111100110100011000011010110100", 
    86 => "00111101111011001001111010110001", 
    87 => "10111101101011111111010110010111", 
    88 => "10111100110100011101001001011100", 
    89 => "10111100111100101110011100101011", 
    90 => "00111110000001001111100011011000", 
    91 => "00111110100000001110100001101110", 
    92 => "00111101010111111000011100111001", 
    93 => "10111100101110111010110010000101", 
    94 => "00111101100000110000110001010111", 
    95 => "10111110001010001001010111110001", 
    96 => "00111101111000101110101000001100", 
    97 => "00111101110010011011010000011101", 
    98 => "00111110001100000000110110011111", 
    99 => "10111110010001001110011111111000", 
    100 => "10111110100010010010000001000011", 
    101 => "10111110100001111011101111100110", 
    102 => "10111101011100101010110000100101", 
    103 => "10111101101000101110101100100111", 
    104 => "00111100110101111000010010111101", 
    105 => "10111101110001111111100000110110", 
    106 => "10111101110101001101001000111111", 
    107 => "00111100111110001100110010111000", 
    108 => "00111100011011100000110000111011", 
    109 => "00111101111000111100110000101011", 
    110 => "10111110000000100101010000000110", 
    111 => "10111110001101010001001010100000", 
    112 => "10111110011100011101110101100110", 
    113 => "10111110000101000010110100011011", 
    114 => "00111101100000010110001011111000", 
    115 => "10111110010010110101100011101110", 
    116 => "10111101111001110101101010001001", 
    117 => "00111101101100000011011010000101", 
    118 => "10111110010110110110000001000001", 
    119 => "10111101111010000111000000100000", 
    120 => "00111101110111011011001000100000", 
    121 => "10111101001000100001000110000011", 
    122 => "00111101011000100001111000011110", 
    123 => "10111100100111001100001000000011", 
    124 => "00111011100001010000101111001011", 
    125 => "00111101110111001110110110110101", 
    126 => "10111101010110100010111101100111", 
    127 => "00111100100000111000100000000100", 
    128 => "00111101101101101110011010011101", 
    129 => "10111101100111001110000010011010", 
    130 => "10111110010111001010011000100001", 
    131 => "00111110000000000010101011111011", 
    132 => "10111101110101110011110101110000", 
    133 => "00111110000100001010011101001110", 
    134 => "10111101111001001100110110001100", 
    135 => "00111100100001001011011010100010", 
    136 => "00111110000010111000010111011111", 
    137 => "00111101111011011010111101100111", 
    138 => "10111110000111001011011110000111", 
    139 => "00111011000100110110101001011110", 
    140 => "10111100111100101101111000000010", 
    141 => "00111100101101011010101011111001", 
    142 => "00111101110010101001111110000100", 
    143 => "00111101101101001011111111000010", 
    144 => "00111101000111111010011010001010", 
    145 => "00111110010001000101011110111010", 
    146 => "00111100111111111110111110001001", 
    147 => "10111110001111000101110100110101", 
    148 => "00111011111000101011011001100110", 
    149 => "00111100000001001000101011011101", 
    150 => "00111101101101111100001010100000", 
    151 => "10111101100111100101101011000010", 
    152 => "10111110010110100110000010011111", 
    153 => "10111011100011000100101101111001", 
    154 => "00111110001010001011101011101010", 
    155 => "00111110100001010100000111110101", 
    156 => "10111101110010110101110111000010", 
    157 => "10111101001010011101101010010111", 
    158 => "00111110011101100110101000000101", 
    159 => "10111100110111001100100011110111", 
    160 => "00111110001001001011011111011100", 
    161 => "00111101101101001001111110101001", 
    162 => "00111110001110010111000010001000", 
    163 => "10111110001110100011010100110111", 
    164 => "10111111000001110110111111000100", 
    165 => "00111110000000011010010010010011", 
    166 => "10111110011100011101000000100111", 
    167 => "00111101000110111110100010100100", 
    168 => "10111101100000000100000010010111", 
    169 => "10111101001110010000000100100100", 
    170 => "00111101110100010111111000010100", 
    171 => "10111100110110101110000001000001", 
    172 => "00111110000100010110100110100101", 
    173 => "10111110001000010100110111101000", 
    174 => "00111101010100100111100001110001", 
    175 => "00111101111000100100110011000000", 
    176 => "10111011000010110100001110100000", 
    177 => "00111101011001000011010000000101", 
    178 => "10111100001001110011001001010110", 
    179 => "10111101111011111101011011001101", 
    180 => "00111100101000111001100101001111", 
    181 => "00111101010111010110100000101100", 
    182 => "10111110011010101001101001011001", 
    183 => "10111110100011000010100110101011", 
    184 => "10111101110001001110001101101110", 
    185 => "10111110010000010010110000001111", 
    186 => "10111101100101011111111111000110", 
    187 => "10111100100101010100010001000111", 
    188 => "10111100011010010100000111111010", 
    189 => "10111110001010101001011010101010", 
    190 => "00111110000000001111000110011101", 
    191 => "00111101101101100111111001010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibMq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibMq is
    component conv_2_conv_2_weibMq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibMq_rom_U :  component conv_2_conv_2_weibMq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


