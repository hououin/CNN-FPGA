-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibTr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibTr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010110010111100010101", 
    1 => "10111110001111010000010011101010", 
    2 => "10111101101110111101100110110011", 
    3 => "10111100000101101000111010110111", 
    4 => "00111110010110011010110100110011", 
    5 => "10111101100001111000000101111101", 
    6 => "10111101111001011011101101110100", 
    7 => "00111101101101000110111010111100", 
    8 => "10111101100010011000010010101100", 
    9 => "10111101101010010100010000010100", 
    10 => "00111101100111010110011001010100", 
    11 => "10111101100000101100111000001000", 
    12 => "10111101000011111100100011000001", 
    13 => "00111101110100110111101001011000", 
    14 => "00111101001000000001111100100010", 
    15 => "10111001111010100110110010101100", 
    16 => "10111100110000011011010000001110", 
    17 => "10111101110100010101110110110111", 
    18 => "00111100111011010100010100100011", 
    19 => "10111110000111110100001001111101", 
    20 => "00111101110011000100101001101111", 
    21 => "00111101110011010001011100100100", 
    22 => "00111100101110100110110111111010", 
    23 => "00111101110111010101101010010111", 
    24 => "10111101000011010101110001011101", 
    25 => "10111101001101100000001100110110", 
    26 => "10111100100100010100001010111001", 
    27 => "10111110110011101011010010110011", 
    28 => "10111110000100000100110110101000", 
    29 => "10111110001110110001111110111000", 
    30 => "00111101101101011110001100100001", 
    31 => "10111110101101101101001100100100", 
    32 => "10111101111100011101001011001110", 
    33 => "00111010101100001010011001101001", 
    34 => "10111101111000111111000011100101", 
    35 => "10111101100100111001101101011110", 
    36 => "10111101111100101101111100101111", 
    37 => "00111011110111111101110010011100", 
    38 => "10111100101000010011110011010100", 
    39 => "00111101100000111101100011001001", 
    40 => "10111101111000111110010000010000", 
    41 => "10111101010111110000010100011111", 
    42 => "10111100100100001011100111100101", 
    43 => "00111101001111110001011011010100", 
    44 => "00111101011000011111100010011110", 
    45 => "00111101110111011100000100011001", 
    46 => "10111101000000111000011010101010", 
    47 => "10111100101000100000000100011000", 
    48 => "10111110001101001100000111100110", 
    49 => "10111101110001111100110110101101", 
    50 => "10111101100110010110001110011100", 
    51 => "10111101100110110110011011001101", 
    52 => "10111110010010011111111111000100", 
    53 => "00111011100100011111100101101011", 
    54 => "10111110001101111001001101111000", 
    55 => "10111100101001001100010111010010", 
    56 => "00111100100000001100001110011011", 
    57 => "00111100101110010101000100010110", 
    58 => "00111110000010001100101110010011", 
    59 => "00111101100101101011110110110111", 
    60 => "00111101100011011011010110110101", 
    61 => "10111100100110010110000110001010", 
    62 => "10111100100111110000100111000101", 
    63 => "00111101101101010000100010000001", 
    64 => "10111101011111111000101011110111", 
    65 => "10111110011111001010011010101000", 
    66 => "10111110011000010100000011101000", 
    67 => "10111110000011111100100100010010", 
    68 => "00111101100110010100011111110100", 
    69 => "00111101010101011111101100000111", 
    70 => "10111101111001110110100011100110", 
    71 => "10111101101100111011100011110000", 
    72 => "10111100001000101000100100110001", 
    73 => "10111101000101010110011111001001", 
    74 => "10111110000011011111111011100101", 
    75 => "00111101001000010111010101100011", 
    76 => "00111100101101111111010100111010", 
    77 => "00111110000011100011011011101010", 
    78 => "10111100011101000010010001101000", 
    79 => "10111100101100100110000010011000", 
    80 => "00111101010100010000011100000110", 
    81 => "00111101010101000100001110000011", 
    82 => "10111100101111111011110011001010", 
    83 => "00111101010101011011100000001111", 
    84 => "10111100110111100010011001010011", 
    85 => "00111101111010100011100000100101", 
    86 => "10111100100000110101001011111111", 
    87 => "00111101010111101011010011100011", 
    88 => "00111101100010001011100100000101", 
    89 => "10111101100110111101011100110000", 
    90 => "10111101010101100000010110000010", 
    91 => "10111101111110011000011010001001", 
    92 => "10111101001100000111001110011110", 
    93 => "10111101000010110111000010000000", 
    94 => "10111101100001011010001011100001", 
    95 => "10111101110010111000110000101011", 
    96 => "00111101111000101001111011010011", 
    97 => "10111110000011000100110010101101", 
    98 => "00111100101001010010001110101000", 
    99 => "10111101100100101001000011111110", 
    100 => "10111110010100101110110101010101", 
    101 => "10111101111001101100011001001101", 
    102 => "10111100000100000000110100011001", 
    103 => "10111101000100011011001110011001", 
    104 => "00111011101101000100110110110001", 
    105 => "10111101100000101100011101001001", 
    106 => "00111101000011111111111011000011", 
    107 => "00111100101101100111111000111110", 
    108 => "00111101110000100110110011010110", 
    109 => "00111101001111001111110010100111", 
    110 => "00111100000010110000101000011001", 
    111 => "00111101001000001110011101010110", 
    112 => "00111101001101101111010001111100", 
    113 => "10111110010011100001111001110011", 
    114 => "10111100110100010110111000110110", 
    115 => "10111101011001000111101011111111", 
    116 => "10111101100011000011101011011100", 
    117 => "00111101110100010001110100001110", 
    118 => "00111101111011111101110101101000", 
    119 => "10111101110100001000101001100110", 
    120 => "10111101010001011111000010000100", 
    121 => "00111110000001001011100001100100", 
    122 => "00111110001011001100100010101110", 
    123 => "00111101001100100000001000011110", 
    124 => "00111100011100011110111000100101", 
    125 => "00111101000110100100010001011000", 
    126 => "10111101100011000011000011001010", 
    127 => "10111101010010110111001111101001", 
    128 => "00111100110001100101000001101010", 
    129 => "10111110011101011111011101101101", 
    130 => "10111110000000110001011001111110", 
    131 => "00111100110100000111010010011111", 
    132 => "00111101010011011111001000110100", 
    133 => "10111101101001011001010000110001", 
    134 => "00111110000000111111100111111101", 
    135 => "00111100111000010011100101011100", 
    136 => "00111100101101100011001100000010", 
    137 => "10111110000010111000100100000000", 
    138 => "10111100010011011010100100001011", 
    139 => "10111110000111100101011110110111", 
    140 => "10111011101011001101111101110010", 
    141 => "00111101111000001011010100011011", 
    142 => "10111101000100010011111010011110", 
    143 => "00111100100010110111100110101011", 
    144 => "10111011101010010011101000001000", 
    145 => "10111101100100110110010101100100", 
    146 => "10111101010101100111010001100010", 
    147 => "00111100110110111001111100101010", 
    148 => "00111100110100010100100100010010", 
    149 => "00111101101101110100111011010100", 
    150 => "00111100011111011101111100000010", 
    151 => "00111101100110101101100101110010", 
    152 => "00111100111000000010100110000101", 
    153 => "00111101001001001001011010000011", 
    154 => "10111101001110011011101101011100", 
    155 => "00111101100111001010111011101100", 
    156 => "00111100000001011110101000101111", 
    157 => "10111100100011101110111011001010", 
    158 => "10111101111011001110011010001111", 
    159 => "00111011100100011011001111000110", 
    160 => "10111010101011010100011001010101", 
    161 => "10111100101001100101100011110111", 
    162 => "10111101011110110011100110001010", 
    163 => "10111101101111011100100010000110", 
    164 => "00111011111111001111111100011110", 
    165 => "00111101110111101010111111000101", 
    166 => "10111100110110101111110000101011", 
    167 => "00111101011011100110110111100110", 
    168 => "00111101100010111110011111101110", 
    169 => "00111101010110010010000100110101", 
    170 => "00111101101110001000110110000010", 
    171 => "00111101000000111101001010100011", 
    172 => "10111101001011101000111000100101", 
    173 => "10111110010000100100000000001001", 
    174 => "00111101000011101101001101101110", 
    175 => "10111011110110010010011111110100", 
    176 => "10111010110010101111010001011001", 
    177 => "00111101100101000000011100100111", 
    178 => "10111100010001110100101110011100", 
    179 => "10111100011011001001010011000101", 
    180 => "00111110000010010110001111010111", 
    181 => "10111100101010011100100101010000", 
    182 => "10111100011111011001001110000111", 
    183 => "10111110001110110000100110111010", 
    184 => "00111100001100010100110101110000", 
    185 => "10111101100001010110110101111000", 
    186 => "00111110010100100001001111011010", 
    187 => "00111101001011011100101100000010", 
    188 => "10111101100011101010111111100010", 
    189 => "10111100101011110111001010001010", 
    190 => "10111101100101001101100110001001", 
    191 => "00111101100101110001101001001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibTr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibTr is
    component conv_2_conv_2_weibTr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibTr_rom_U :  component conv_2_conv_2_weibTr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


