-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibun_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibun_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100010001010111110100011", 
    1 => "10111110000000000101011101111010", 
    2 => "00111110011001010110010111110010", 
    3 => "10111101100001011111011111110101", 
    4 => "10111101110001010100010000010110", 
    5 => "10111110001011000100001111001101", 
    6 => "10111101110100101100110100000000", 
    7 => "00111110010001010111001110100011", 
    8 => "10111110100111001110110100101011", 
    9 => "10111101101010101000000111001001", 
    10 => "00111101110111101111001100001111", 
    11 => "00111100000000101101001101100111", 
    12 => "10111110011001110000011100101011", 
    13 => "10111111000000011100000110000111", 
    14 => "10111110101110000100001101001110", 
    15 => "10111100111100011110101000011000", 
    16 => "10111110010100010000001011111010", 
    17 => "10111110011000010001111010100111", 
    18 => "10111110100010100110101001011100", 
    19 => "10111101101001100110100110001101", 
    20 => "00111101001100101110100110000111", 
    21 => "10111110111010001101011111111010", 
    22 => "10111110110011000001001100000111", 
    23 => "10111110100011111100110000110001", 
    24 => "10111110100100111110100100000100", 
    25 => "10111110001100101010010011100010", 
    26 => "10111110000011000100101110001011", 
    27 => "10111101101000111001111111000100", 
    28 => "10111101101010110111000100100101", 
    29 => "10111101101110111101001111001001", 
    30 => "10111101001101010111010001000111", 
    31 => "00111100000111101101001011111111", 
    32 => "00111110000010000110101110001010", 
    33 => "00111101110010011110011010011100", 
    34 => "00111101111110100011010001101011", 
    35 => "10111101110001111001111110110011", 
    36 => "00111101000011010001110110111100", 
    37 => "10111101101010010111111101001000", 
    38 => "10111101111001110001000110011111", 
    39 => "10111110011010101011011110010110", 
    40 => "10111110101010111011011011111110", 
    41 => "10111110001011011111000110101011", 
    42 => "10111110110001001101000010111110", 
    43 => "10111010010000111000110111000000", 
    44 => "10111101001011010010111000100111", 
    45 => "10111101001111110010001001111010", 
    46 => "10111110001101111111100100011100", 
    47 => "10111101100101011111011110000000", 
    48 => "10111100111111010110100000000000", 
    49 => "00111110011110000011101101011001", 
    50 => "10111101100001011001111011110100", 
    51 => "10111110011100101110111111010001", 
    52 => "10111101101011100001000011111000", 
    53 => "10111110101111111000011000001011", 
    54 => "10111110101110011000011001011011", 
    55 => "10111010110110110011000110110100", 
    56 => "10111101101001111111010011000010", 
    57 => "10111110010011110001100001110010", 
    58 => "10111110100001000100011011000101", 
    59 => "00111011101100101011010011011101", 
    60 => "00111101001111101010111111110010", 
    61 => "10111110001101011000101001000110", 
    62 => "00111101010000111000010100001110", 
    63 => "10111110011111000000000111000101", 
    64 => "10111100100000101110101010011101", 
    65 => "10111110101000010001001111101011", 
    66 => "00111011110100000001110111100111", 
    67 => "10111101101011101101011111101111", 
    68 => "10111110011000011111111001010100", 
    69 => "00111110000010010110100010111101", 
    70 => "10111110100110110011111010011011", 
    71 => "10111101110100010110010111110100", 
    72 => "10111110010110111010110010010100", 
    73 => "10111101101111100001001010000100", 
    74 => "00111010101011110111011001000111", 
    75 => "00111110001010011011100110101010", 
    76 => "10111110001100101011110001101001", 
    77 => "10111110001001001001000110001111", 
    78 => "10111110000110000101101101011001", 
    79 => "10111110010111010101101011000000", 
    80 => "00111100100101111011000001001101", 
    81 => "10111100101111110100000110010100", 
    82 => "00111100001000100011111111010000", 
    83 => "10111110100010100000110010010111", 
    84 => "10111101011111010100011011001000", 
    85 => "10111110110110100000001011100001", 
    86 => "10111101011111011100001100001000", 
    87 => "10111110011101001000110001100100", 
    88 => "10111110100101100001011011011110", 
    89 => "10111110001001010010011011000001", 
    90 => "00111100010000111110100100110011", 
    91 => "00111110000111100100010101110001", 
    92 => "10111101110101100101000011010001", 
    93 => "10111101010000100001010011010011", 
    94 => "00111110011001111101001111010010", 
    95 => "10111110001100001001010111011011", 
    96 => "00111110001001001011100101011111", 
    97 => "00111110000001000001111000000000", 
    98 => "00111101001111101110111110110000", 
    99 => "10111110000101100000001110011001", 
    100 => "10111101111010110011110010111110", 
    101 => "10111110001001001010000111101001", 
    102 => "10111110010010111111111000011011", 
    103 => "10111110000111101101100101000111", 
    104 => "10111110111100001111101001000000", 
    105 => "10111101101101000100101110101111", 
    106 => "10111110101011001110111101110010", 
    107 => "10111100111101011010110010001111", 
    108 => "10111101001110011111011110010100", 
    109 => "00111110010010100010111101010001", 
    110 => "10111101100111100001101010101011", 
    111 => "00111101111000100100011101010011", 
    112 => "10111110001111010010111100111110", 
    113 => "00111101101011110101111111001100", 
    114 => "10111101001011011100110111110111", 
    115 => "10111101111100110000001101111001", 
    116 => "10111110001100111110110101110001", 
    117 => "10111110101010010001001110101001", 
    118 => "10111101100101101010010101100010", 
    119 => "00111100101100110010101011110100", 
    120 => "00111101101111000000111001101110", 
    121 => "00111101110001010101000000110100", 
    122 => "10111110100011001101110001011000", 
    123 => "00111101111101011100110000101011", 
    124 => "00111101001100001111100100111001", 
    125 => "10111110000000001000000010001110", 
    126 => "10111110000101110001010001101111", 
    127 => "10111101110100010011100000111111", 
    128 => "00111101100100111101010110011001", 
    129 => "10111110010010011001110100000100", 
    130 => "10111101110100100110110111111001", 
    131 => "00111101101110111110001000100110", 
    132 => "10111110010100110110100101110110", 
    133 => "10111011010010011110101101000011", 
    134 => "00111100001011100010010000100000", 
    135 => "10111101001101010000110010001101", 
    136 => "00111101000001110100101010001001", 
    137 => "00111110001111011111010011100010", 
    138 => "10111110100010010001010010101011", 
    139 => "00111101101100100010110001011001", 
    140 => "00111110000000110110010000101000", 
    141 => "10111101100110011000010110011101", 
    142 => "00111110011001010101010110100110", 
    143 => "00111110100000000010010110011110", 
    144 => "00111101110110110101001001001011", 
    145 => "00111110011111011000110010101110", 
    146 => "10111101110010100110010100000010", 
    147 => "10111110001111011000001000100110", 
    148 => "10111110011010100110111101111011", 
    149 => "10111110110100011111110011111111", 
    150 => "10111101111111101010011110001010", 
    151 => "10111101101010111001101101100010", 
    152 => "10111110000000001001010100100010", 
    153 => "10111100010111001010100010101100", 
    154 => "00111101110011000010100110011100", 
    155 => "00111110100011101001000100010010", 
    156 => "00111110001111000111100011000110", 
    157 => "10111100111101011110000101010010", 
    158 => "00111110000101101001001111001110", 
    159 => "00111101101101110100011010100110", 
    160 => "00111110101100010100111110011000", 
    161 => "10111101010101010101000010101100", 
    162 => "00111101011101011110101110111001", 
    163 => "00111101000101010101100110000111", 
    164 => "10111110101101000111010010010110", 
    165 => "00111101110100000000101010000001", 
    166 => "10111110001110000010001101100010", 
    167 => "10111101101010010000110010001111", 
    168 => "10111110100010011110010010001011", 
    169 => "00111110001100010111010101011001", 
    170 => "10111110001110110110000001101100", 
    171 => "10111101011110010111000110000111", 
    172 => "00111100111010000001000110011101", 
    173 => "10111101001010010110111000110010", 
    174 => "00111110000100100001110101100010", 
    175 => "00111110101000000100100111101101", 
    176 => "10111110010001001100000010010110", 
    177 => "00111110011100010011100101110100", 
    178 => "00111101101001110011111000010000", 
    179 => "10111110000000000001001011010101", 
    180 => "10111101111001000111100011001111", 
    181 => "10111110001000000001000110101010", 
    182 => "10111101001100101001101111001011", 
    183 => "10111101001101011110010011000111", 
    184 => "00111101001100010101111111110111", 
    185 => "10111110001010010000011110101111", 
    186 => "10111110100000110110110001011010", 
    187 => "00111011111111000101000000101010", 
    188 => "10111110100111010100111011001000", 
    189 => "10111110010000000100011001100001", 
    190 => "00111110000011001001010111110111", 
    191 => "10111101010111110111001001000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibun is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibun is
    component conv_2_conv_2_weibun_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibun_rom_U :  component conv_2_conv_2_weibun_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


