-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibgk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibgk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110100011110001000100001", 
    1 => "10111101100001110001000011111001", 
    2 => "10111101110011101100000010011101", 
    3 => "00111100111111101000001000111110", 
    4 => "10111101110001101111001010010001", 
    5 => "10111100101000001101010000000010", 
    6 => "10111110011110110010001011111101", 
    7 => "10111101111011111010110101101100", 
    8 => "00111101100100111000010100101010", 
    9 => "00111100101101110011001010110001", 
    10 => "00111100101111011011010001001111", 
    11 => "00111100101110000011000001001000", 
    12 => "10111110101000101011100100111101", 
    13 => "10111110000001001100011000100011", 
    14 => "00111101111001110001000110001011", 
    15 => "00111101110001010111100100110111", 
    16 => "10111101110100111011011100000111", 
    17 => "10111101101110000101101011100110", 
    18 => "00111101100111101000001000111010", 
    19 => "00111100001000110101000101110111", 
    20 => "00111100011100010100010011010000", 
    21 => "10111110100010110001010010001001", 
    22 => "10111110100111110110110100100010", 
    23 => "00111101100011101101101100111101", 
    24 => "10111110001110100110101000111111", 
    25 => "00111110010001001111010000100111", 
    26 => "10111101100000110011101010010101", 
    27 => "00111101001010110100000110101111", 
    28 => "10111110011101100111110011100011", 
    29 => "10111101110001001111011110111111", 
    30 => "00111100001010000100000001000001", 
    31 => "10111110100011011011010100110010", 
    32 => "00111101100101110111111110101111", 
    33 => "00111101000010010001101010101001", 
    34 => "10111101011111000110000110011101", 
    35 => "00111101011101110111001100010011", 
    36 => "00111011101111111100110101111010", 
    37 => "00111100010001010010101100111100", 
    38 => "10111110001111110101100100101111", 
    39 => "10111101001110001110010111011100", 
    40 => "10111101010011011111100010000010", 
    41 => "00111110010000000110000101011111", 
    42 => "10111110100011100100100111100011", 
    43 => "00111110000100110111000101001110", 
    44 => "00111101111010000111110001000101", 
    45 => "10111101100010010100111111110011", 
    46 => "10111110000110001000110111010100", 
    47 => "10111110001010100100100100100000", 
    48 => "10111101101000011000011101101110", 
    49 => "10111101100010000011111010110000", 
    50 => "10111110100100011000101000110000", 
    51 => "00111101100111110110101111101011", 
    52 => "00111100101111110110110000110110", 
    53 => "10111110000110100010101011010001", 
    54 => "10111101010110101110011101110110", 
    55 => "10111100011000110110110101101110", 
    56 => "10111110001000001001100100011001", 
    57 => "10111100111111011000111111001101", 
    58 => "10111101111110101010111101000000", 
    59 => "10111110000001000000010111101011", 
    60 => "10111101000011110011000111000110", 
    61 => "00111101110100001010111111011110", 
    62 => "10111101010011101101000111000100", 
    63 => "00111110001000111101010001000110", 
    64 => "10111101111100100101110000101111", 
    65 => "10111101100000101100110110100101", 
    66 => "10111110001100101101011001011111", 
    67 => "10111110010001110110000101001101", 
    68 => "10111110000011001001100110110101", 
    69 => "10111101010110001110001101101111", 
    70 => "10111110100011110000001101111100", 
    71 => "10111110000100110010011100111000", 
    72 => "00111101001111010011101100111011", 
    73 => "00111100101111110001011011010111", 
    74 => "00111110000000010111111010100010", 
    75 => "10111101000110000111100001100000", 
    76 => "10111110011000100000101001010110", 
    77 => "10111101001010100100001001111010", 
    78 => "00111101001110001011101010011001", 
    79 => "00111101101110101111100010100000", 
    80 => "10111101100100100100110000010010", 
    81 => "10111011011010010110100011011001", 
    82 => "00111101010001011110011111000111", 
    83 => "00111101010001101001110110101000", 
    84 => "00111110001000111110001110001001", 
    85 => "10111110101111111011100001111011", 
    86 => "00111010001010011100000001000100", 
    87 => "10111101001011011100011100010101", 
    88 => "10111110000000100111110101111000", 
    89 => "10111110000110000001010011000110", 
    90 => "10111101100001101100110101101001", 
    91 => "10111110100010010101100111111001", 
    92 => "00111100110111010011000011001001", 
    93 => "00111101001101101111111110011010", 
    94 => "00111101100011001100001101001100", 
    95 => "00111101101100111001100110011010", 
    96 => "00111101010100010001010011010000", 
    97 => "00111110000010111000110011111101", 
    98 => "10111100001110101111010101000110", 
    99 => "10111100011000110111100101000100", 
    100 => "10111110101011010111111101000101", 
    101 => "10111001100001101111011010111111", 
    102 => "10111110011100001101010010111100", 
    103 => "10111110100100111000101101000100", 
    104 => "10111101100000011000000001110010", 
    105 => "10111110000001011111011001000100", 
    106 => "10111110010110111100011010110000", 
    107 => "10111110001000001110001001000110", 
    108 => "00111101001111111110101100110000", 
    109 => "00111110001010101111100001100001", 
    110 => "10111101100100000100010100101110", 
    111 => "10111101110000001101011000000100", 
    112 => "10111100010111010101101011100000", 
    113 => "10111110101000110001010101000011", 
    114 => "10111101000010011111000000001000", 
    115 => "00111101111000111100101100011001", 
    116 => "10111101100111001010000111101111", 
    117 => "10111101110001111100101111010011", 
    118 => "10111101101001011001001011110100", 
    119 => "10111101110000010000010111000011", 
    120 => "00111110010010001011111101011001", 
    121 => "00111110010001111100011011100000", 
    122 => "10111110101011000001011100110110", 
    123 => "00111101010011101100100011001010", 
    124 => "10111101110010100000011100111110", 
    125 => "00111101110101101010010101010011", 
    126 => "10111101101001011100011001111000", 
    127 => "10111110000000100100101000100110", 
    128 => "00111101100011001010110111010110", 
    129 => "00111110000010000001011010011110", 
    130 => "00111100001111001001100001101101", 
    131 => "00111110000001010100110000001110", 
    132 => "10111110010100100000101000010110", 
    133 => "00111110010000100110101100100001", 
    134 => "10111110000011101011010001000110", 
    135 => "10111101100011110110011101001011", 
    136 => "00111101011110011101001101000111", 
    137 => "10111101000110111000001000010001", 
    138 => "00111101111101111101011110011010", 
    139 => "10111101101001100000100111101110", 
    140 => "10111110000101100000100011101010", 
    141 => "10111101111000011100011110011010", 
    142 => "10111100110110101110011101000001", 
    143 => "00111101001001111111011101011110", 
    144 => "00111110001001111010100011100100", 
    145 => "00111101110101001110011001110010", 
    146 => "00111101111010000110100001110101", 
    147 => "00111000011100101110100010100000", 
    148 => "10111110100011111110110110001000", 
    149 => "10111110101111110001001011100101", 
    150 => "00111100100000000100111000010110", 
    151 => "10111101111001111001110110111101", 
    152 => "10111110000101101001001000010000", 
    153 => "10111011110101011111110101101100", 
    154 => "00111110010100111011101110001001", 
    155 => "00111101101010100111101100011101", 
    156 => "00111100101101000011000010111101", 
    157 => "00111101110100011110010001100111", 
    158 => "00111101100011111000110011010001", 
    159 => "10111101000000100011100100101110", 
    160 => "00111101001110111101110001100101", 
    161 => "00111100000110100111001111100111", 
    162 => "00111101011011010111100110011110", 
    163 => "10111110100010100110000100110000", 
    164 => "10111110100111001110111001001100", 
    165 => "10111110110001011110101001000111", 
    166 => "10111110010111000001110101000111", 
    167 => "00111110000000100000100101111111", 
    168 => "10111110100111001011101101111110", 
    169 => "00111101010010101011101101100010", 
    170 => "10111100101011010101001010011011", 
    171 => "10111101100110000001000000010011", 
    172 => "10111110011011001110101000111111", 
    173 => "00111110000101100001111000100111", 
    174 => "00111011100000111111011111010010", 
    175 => "10111101101110110000110001011011", 
    176 => "10111101000110101101111100001001", 
    177 => "00111101111001101100101001000001", 
    178 => "10111110010010111001010001101010", 
    179 => "10111100101100100110100010000100", 
    180 => "10111100110101011001001100101010", 
    181 => "10111101000101000001100110001100", 
    182 => "10111110010010101110111101110101", 
    183 => "10111100111100000011000111110110", 
    184 => "00111110010101100101000011100101", 
    185 => "00111101010111000000011010010100", 
    186 => "10111110101011000111001011101100", 
    187 => "00111101110000000010010101101000", 
    188 => "10111101100111100110101111110001", 
    189 => "10111110010011010101100110100100", 
    190 => "00111101100100011111001111011010", 
    191 => "00111101010101001000000100100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibgk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibgk is
    component conv_2_conv_2_weibgk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibgk_rom_U :  component conv_2_conv_2_weibgk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


