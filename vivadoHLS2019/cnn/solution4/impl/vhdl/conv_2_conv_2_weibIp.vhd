-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibIp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibIp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001110110011011110110010", 
    1 => "10111110101101110010000100101011", 
    2 => "00111101011101011010001111110101", 
    3 => "10111101101101110011101110010111", 
    4 => "10111101101101111011001111001011", 
    5 => "00111110001100101111100010011111", 
    6 => "00111101110000011100100111110100", 
    7 => "10111110010110011101100011100010", 
    8 => "10111101000000010100100110011000", 
    9 => "00111101001101000100111101100010", 
    10 => "00111100100010000010010111000011", 
    11 => "00111110011011110101110101001000", 
    12 => "10111101110010000010011000101100", 
    13 => "00111100101011001000011101100011", 
    14 => "00111110010010100100011010101100", 
    15 => "00111110010001111010110100010011", 
    16 => "00111101100011011101000100100110", 
    17 => "00111101100011101010111011000101", 
    18 => "00111110000011100101010011011100", 
    19 => "00111110001000011101101101111101", 
    20 => "10111110000111110010000100001100", 
    21 => "10111101111101011010001000001111", 
    22 => "00111101100110111001111011000111", 
    23 => "10111101101010101111100011100000", 
    24 => "00111110011101010001001101111011", 
    25 => "00111101100010011011000011110010", 
    26 => "10111101101101001001101110010110", 
    27 => "00111101111111010001111010000000", 
    28 => "00111101101110101001100101110000", 
    29 => "00111101110000110101111111110000", 
    30 => "10111100000000101101100001010101", 
    31 => "10111110001010111000111000101100", 
    32 => "00111110100011110000000101011000", 
    33 => "10111110101100011000001101001100", 
    34 => "00111110001101111100101110010010", 
    35 => "10111110100010111010010011110000", 
    36 => "10111110001010000011010010100000", 
    37 => "10111101110100001000010010001111", 
    38 => "00111110000111010011000000111010", 
    39 => "10111101101101001110110101010001", 
    40 => "00111110100011001010000100011011", 
    41 => "00111110011100001000000000100001", 
    42 => "10111101111000010001011011001010", 
    43 => "10111110000100111101100111111001", 
    44 => "00111101100100100101001001000011", 
    45 => "10111100001110001111111000001101", 
    46 => "00111110001011011010000011100011", 
    47 => "00111101011111100101110000010100", 
    48 => "00111101101000000100100111011111", 
    49 => "10111110110110000011011100110110", 
    50 => "00111101100111101101000010100111", 
    51 => "10111110111000111110011001100110", 
    52 => "10111101111010101010000101011000", 
    53 => "10111110000111110011100100011111", 
    54 => "00111110010011101100100101001101", 
    55 => "10111101101111011110001101011011", 
    56 => "10111100001101010000100000011001", 
    57 => "00111110101001000111000010001100", 
    58 => "00111100111010000000110100101000", 
    59 => "00111101111100000010111100100110", 
    60 => "00111101001011000111001110010100", 
    61 => "00111101111100000111111000101001", 
    62 => "10111110011011100101010110001001", 
    63 => "10111110100010100101110001100110", 
    64 => "00111101110001000011000111100000", 
    65 => "10111110110010111100111111011000", 
    66 => "10111110010110010011100100001100", 
    67 => "00111110001001110001011111010111", 
    68 => "10111110010111100110110010101000", 
    69 => "10111101101001011000101000001011", 
    70 => "00111101000110100010001110010010", 
    71 => "00111101010010100001000100111110", 
    72 => "00111110010010000011100010111100", 
    73 => "00111101011001001110111001101110", 
    74 => "10111110000101000010110111010000", 
    75 => "00111010001010011111111100001110", 
    76 => "10111100110011110111001111011010", 
    77 => "10111110011101100001011000111000", 
    78 => "00111110001110011000001101110100", 
    79 => "00111110100001110001010111111100", 
    80 => "10111110100101000011011011010000", 
    81 => "00111101100110111001010110111111", 
    82 => "10111110001010000101101111010010", 
    83 => "00111101100011000010000100000001", 
    84 => "00111110101110110100101110011110", 
    85 => "10111101101101110111100111011100", 
    86 => "00111101110001111110101001100100", 
    87 => "10111110110101011111010101011001", 
    88 => "00111101001001011000000000000001", 
    89 => "00111100111111011110001110101010", 
    90 => "00111101101100110110111110111111", 
    91 => "00111110100101101101101010100000", 
    92 => "00111110001110110001001001100110", 
    93 => "10111011111101100100101000011111", 
    94 => "10111110100111111011111101000100", 
    95 => "10111101100100010011000011100101", 
    96 => "00111101110001100000011010011001", 
    97 => "10111100010100110000010110010110", 
    98 => "00111110011001010110001010110101", 
    99 => "10111101111101111101000100101100", 
    100 => "10111100001011101001010110111000", 
    101 => "00111110011001001110010110010100", 
    102 => "10111101110000101001010011010110", 
    103 => "10111110001100111000010011110010", 
    104 => "00111110011111111000100000011010", 
    105 => "00111101100011101010110101110110", 
    106 => "10111100000011000111111111010111", 
    107 => "00111101010001100011100000110100", 
    108 => "10111110010100101000110111000100", 
    109 => "10111110000000100101101001010001", 
    110 => "10111110011001100000010101111011", 
    111 => "00111100101001000000111100101111", 
    112 => "10111101001111100111110001100011", 
    113 => "00111101011110110101110000010010", 
    114 => "00111101100111111100001001100000", 
    115 => "00111100000100000101000011001110", 
    116 => "00111110000111101100011011111010", 
    117 => "10111101011101110111011101000110", 
    118 => "00111100100101101001010010010010", 
    119 => "10111110110100001101010101111110", 
    120 => "00111101101110101110101011110100", 
    121 => "10111110101001001001000110001110", 
    122 => "10111100011110110111111001001101", 
    123 => "10111110100111110100010000011011", 
    124 => "10111101111110110010100111111100", 
    125 => "00111110001010110110011110100010", 
    126 => "00111110000101010011001101000100", 
    127 => "10111101010100100011111011001011", 
    128 => "10111110001001010000110010100010", 
    129 => "00111101001101001001010000010010", 
    130 => "10111110011000001111011100011101", 
    131 => "10111100100000010110011100001011", 
    132 => "10111110101010111111010000101000", 
    133 => "00111100000101111010110100111100", 
    134 => "00111101001101101011001010000010", 
    135 => "00111110011101001000111000100011", 
    136 => "00111110010010011101100111011100", 
    137 => "10111110110100111000011101010110", 
    138 => "00111110001000111100010100110101", 
    139 => "10111101110011101000011010111110", 
    140 => "00111101100010110001000110011010", 
    141 => "00111101110010101111101010100011", 
    142 => "00111110110011000001110100001001", 
    143 => "00111011001010010111001111100010", 
    144 => "10111101111111000011110110110010", 
    145 => "00111101100110001010101011101000", 
    146 => "00111101110101101100010010110100", 
    147 => "10111110000110111110010100100010", 
    148 => "00111101010011011100010001100011", 
    149 => "10111110011011011011110011011001", 
    150 => "10111101111100101011001000111111", 
    151 => "10111110111110100010111010101100", 
    152 => "00111110000100111110000100001011", 
    153 => "00111101110101110011110110001001", 
    154 => "10111110000101111011101001111010", 
    155 => "00111110000100101010100001011011", 
    156 => "00111101100110101001001101001100", 
    157 => "10111101100011101000001100101001", 
    158 => "00111100110010100000000011111101", 
    159 => "10111100101101100001001111100000", 
    160 => "00111100100000110111011101110110", 
    161 => "00111101011110000101110010110101", 
    162 => "10111110110100011101001111000100", 
    163 => "10111111000001011000111000011001", 
    164 => "10111101101000111000011110011010", 
    165 => "00111101100100000110100100101101", 
    166 => "10111110000110001001111110000111", 
    167 => "00111110100011100000101000011111", 
    168 => "00111100010010010111000010111111", 
    169 => "00111101001001110000000100001100", 
    170 => "10111110011101110101110111110110", 
    171 => "00111101011000110001101111000001", 
    172 => "00111100001011010000001010100010", 
    173 => "00111110101000111111000110111001", 
    174 => "00111110100010100010001110010101", 
    175 => "00111100110001010111011000111111", 
    176 => "10111110011101001010000100111001", 
    177 => "00111110000110101010001001111101", 
    178 => "00111110011011101100101101010010", 
    179 => "10111100101111010001000101101111", 
    180 => "00111101101101011100001110100101", 
    181 => "10111110000101000111111101110001", 
    182 => "10111110011010110101000010110010", 
    183 => "10111110010000110100110100001001", 
    184 => "00111100100000010101100100111000", 
    185 => "00111110010001011011101100111100", 
    186 => "10111110001111010101111100100001", 
    187 => "00111110001001000110010001101101", 
    188 => "00111101010000010011010011010110", 
    189 => "00111101000111010110010001101110", 
    190 => "10111100010001101010010000111101", 
    191 => "00111101111110001100010001110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibIp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibIp is
    component conv_2_conv_2_weibIp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibIp_rom_U :  component conv_2_conv_2_weibIp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


