-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weitde_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weitde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011010111000100101001101", 
    1 => "10111101110110010001111001000101", 
    2 => "10111101010101101100100010011001", 
    3 => "00111101010101010110100100100110", 
    4 => "00111101101101000100101100101010", 
    5 => "00111101111001000111001100001001", 
    6 => "00111101101011011101110111001110", 
    7 => "10111100101000011101110011101100", 
    8 => "00111101100010001100011100000001", 
    9 => "00111010110011100100011001101110", 
    10 => "00111101010100000110000101111011", 
    11 => "00111100101010000000001110110100", 
    12 => "00111100100001111000011100010110", 
    13 => "00111100100110100001101110011010", 
    14 => "00111100011101110110000001100111", 
    15 => "00111101101110110101111000110100", 
    16 => "10111101010111001110111010111101", 
    17 => "00111100111101111110111010111010", 
    18 => "10111101111000000011110101101111", 
    19 => "10111100011000011111111111000000", 
    20 => "10111101101111100000011011110001", 
    21 => "10111101100001111001010100101110", 
    22 => "00111001100110001111110100000000", 
    23 => "10111100011010110101000011011001", 
    24 => "00111100111111100011110011011001", 
    25 => "00111101011100000000110111001000", 
    26 => "00111101000101001000011011111000", 
    27 => "10111110000010000010011000110111", 
    28 => "10111101100011100110011000001001", 
    29 => "00111110000011111111011010100111", 
    30 => "10111101110101110111001110100111", 
    31 => "10111101101110011011000111111110", 
    32 => "10111110001001110001000110111110", 
    33 => "10111110011000100110000110110000", 
    34 => "10111001111000001001100000101010", 
    35 => "00111110001001101111000111011100", 
    36 => "10111101100110010011111010110010", 
    37 => "00111100010110101011010000100100", 
    38 => "10111100000101101101110001011111", 
    39 => "10111100011001101110111111110110", 
    40 => "10111101100111010100001111100110", 
    41 => "00111101011100110010101111101011", 
    42 => "10111101101001101110011010100110", 
    43 => "00111101101010111010110011101100", 
    44 => "00111101100010001011001101011100", 
    45 => "00111101101000110101111011011001", 
    46 => "10111100110100010000000110011001", 
    47 => "10111011111101010000110010101111", 
    48 => "00111100110110000110110101000000", 
    49 => "10111110011111001110111110000000", 
    50 => "10111101101011000010010100100010", 
    51 => "00111101101010001000111111111000", 
    52 => "10111110011110111100101100000000", 
    53 => "10111000000111001000111110001110", 
    54 => "00111101100001111110010001111010", 
    55 => "10111110000111110000000100000011", 
    56 => "10111101111011000000010000101100", 
    57 => "10111010101101000010110111000000", 
    58 => "00111101011010001011110000010001", 
    59 => "00111100110111000111111101110111", 
    60 => "00111101011111011111100111110110", 
    61 => "00111101100000101011011111000110", 
    62 => "10111101100110011110100011010111", 
    63 => "00111101100000100010111000011011", 
    64 => "10111101000101111011111100011100", 
    65 => "00111101000000000001111111110111", 
    66 => "10111101011001001000111100100110", 
    67 => "00111100110001000101011010011010", 
    68 => "00111100010010100011100111101011", 
    69 => "00111101100000001101000000100101", 
    70 => "10111101110000110101111000111101", 
    71 => "10111101010101111001111000010011", 
    72 => "00111101110110100110111001000111", 
    73 => "10111100100100110010011011111011", 
    74 => "10111010111100111110010111001001", 
    75 => "10111100101000001111100101100101", 
    76 => "00111101000111010100111111001001", 
    77 => "10111101000101010110001010001100", 
    78 => "10111101010110001101001001010100", 
    79 => "00111101101001011001011011011100", 
    80 => "00111101100111001010010000100110", 
    81 => "10111101001001001111001110111001", 
    82 => "10111101110000100111001000111101", 
    83 => "00111101100110001100100000101001", 
    84 => "10111110100100110100011000110111", 
    85 => "10111101001110010110000110100010", 
    86 => "10111101100010011000000001001100", 
    87 => "10111110000010111001001111110110", 
    88 => "10111101100100100001110010001111", 
    89 => "00111101010001111101011111101000", 
    90 => "00111101001001010110000000100101", 
    91 => "10111110101110101001111101100100", 
    92 => "10111100101100101110110110010111", 
    93 => "00111101111100110010001011110111", 
    94 => "10111110010110101010010011011110", 
    95 => "00111101001010011101010011001110", 
    96 => "10111110010101001001010101011100", 
    97 => "10111100011100101000001111101001", 
    98 => "10111101101000101111011111011010", 
    99 => "10111100001111110111101111000011", 
    100 => "00111101101110100110011111101011", 
    101 => "00111001011001001110101111110101", 
    102 => "10111100111000111000001100100100", 
    103 => "10111101100000110001100111000110", 
    104 => "10111101110111001100001110011011", 
    105 => "00111100010110100101110111110110", 
    106 => "00111101101110101010111111001110", 
    107 => "10111100011000111011000010010001", 
    108 => "10111101100000110110001001010101", 
    109 => "10111101000010011111010000101000", 
    110 => "10111101100111010010110001110111", 
    111 => "00111101000111110010011110101000", 
    112 => "00111100110111111100000001000010", 
    113 => "10111110000010101100010111101001", 
    114 => "10111101010110110011000010000000", 
    115 => "00111010110001011011100001110010", 
    116 => "10111101101111110000100000011000", 
    117 => "10111110010010001000001101011001", 
    118 => "10111011101010111000001000010110", 
    119 => "10111101100101000010101011010010", 
    120 => "00111011110101001011101011001011", 
    121 => "10111100110001110101000000110100", 
    122 => "10111101011000101001101001111011", 
    123 => "00111110000101000101001111010000", 
    124 => "00111011110001000001001010001100", 
    125 => "00111101100000001100010111110100", 
    126 => "10111101110010110011110101101100", 
    127 => "00111011011111111100101011011010", 
    128 => "10111110001001100100100101011111", 
    129 => "00111101100110000000010101111010", 
    130 => "00111101100101110111100100010010", 
    131 => "00111101110000111111101011001101", 
    132 => "00111101010011010001010000100110", 
    133 => "10111110001101011001111010101010", 
    134 => "10111110000110000011011011000011", 
    135 => "00111101001011101011001001110010", 
    136 => "00111110000000101111001011101111", 
    137 => "10111101010110010010110010111010", 
    138 => "10111110010110111111000110011111", 
    139 => "10111110100100101100011010101101", 
    140 => "10111100000111100101100110111110", 
    141 => "00111101100000111010011110110110", 
    142 => "10111100110111100100010100011110", 
    143 => "10111101000100110111010010000011", 
    144 => "00111101101000110101001001110101", 
    145 => "10111110001001100001010110000011", 
    146 => "00111101101001100010000100100000", 
    147 => "10111100010110000000100010100100", 
    148 => "10111101111000011000011000100111", 
    149 => "00111101010011100101100001111101", 
    150 => "00111101100010100001010101010111", 
    151 => "10111110001111011111101010011011", 
    152 => "00111101001111101101110111100010", 
    153 => "10111110001100110111001001111000", 
    154 => "10111100100010001001100010011010", 
    155 => "10111110010010011100101001111101", 
    156 => "00111101100001010000011110011000", 
    157 => "00111100101010011101011101000101", 
    158 => "10111101011100110100001001001110", 
    159 => "10111101100001100110111011101001", 
    160 => "10111110101011000111111011111011", 
    161 => "00111101101100001111101000010001", 
    162 => "10111101011000010000100110101100", 
    163 => "00111101010001110100011010001001", 
    164 => "00111100111101001110101100111001", 
    165 => "10111110100111000111110010100101", 
    166 => "10111101100011111101110111100111", 
    167 => "00111100101111000111000110010100", 
    168 => "10111101011100010111010011100101", 
    169 => "10111100100100011101100100011111", 
    170 => "00111100111001010000110000101011", 
    171 => "00111101100111001111100010010110", 
    172 => "00111101100000001111101011011010", 
    173 => "10111110001011011010101101101110", 
    174 => "10111101000001011101000011010100", 
    175 => "10111110010011111111111011101101", 
    176 => "10111101100101000100100010111011", 
    177 => "00111101010010110001010001000101", 
    178 => "10111101101000001011000010000010", 
    179 => "10111110010011101110000000100000", 
    180 => "00111101101000110100001110010101", 
    181 => "10111101100001011111000111110001", 
    182 => "00111101001011101000101011001101", 
    183 => "10111010110001001000010100110001", 
    184 => "00111101001110101000001000010010", 
    185 => "10111101100010111101100110101001", 
    186 => "10111101111010000111011101101111", 
    187 => "10111101100000111101000000000100", 
    188 => "10111101000011000101110110010000", 
    189 => "00111100110010110101010110101011", 
    190 => "00111100100110000100101010111100", 
    191 => "10111101000000001000000100111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weitde is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weitde is
    component conv_2_conv_2_weitde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weitde_rom_U :  component conv_2_conv_2_weitde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


