-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiEe0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiEe0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111111100001000000111001", 
    1 => "10111100101001101111010010000011", 
    2 => "00111101101101110101111010001010", 
    3 => "00111101000110101100011000000011", 
    4 => "10111110000110011111001001101011", 
    5 => "00111110001000100001111000101000", 
    6 => "00111011100001000111010011110110", 
    7 => "10111110000100101111111000011001", 
    8 => "00111101101000001010011000001011", 
    9 => "00111100101001011110100110100010", 
    10 => "00111101011111101100000011101011", 
    11 => "00111101011010110110101010100000", 
    12 => "00111101101001111100100010011001", 
    13 => "10111110001101001010000010111110", 
    14 => "10111101000010001001111111101000", 
    15 => "10111110010100001101010110001111", 
    16 => "00111101110110011101111100101011", 
    17 => "00111110000000110010000011110110", 
    18 => "10111101100100101010001101001011", 
    19 => "10111101011000101011011001110010", 
    20 => "10111110000001011011011000110011", 
    21 => "00111100111000011111000010101001", 
    22 => "00111101000011011111111011001100", 
    23 => "10111110100110110110011010000010", 
    24 => "00111101010011101010000001101010", 
    25 => "00111110001100110101001011111011", 
    26 => "10111101101000010101101000000111", 
    27 => "00111101110111000100011010100100", 
    28 => "10111011110010110010101011101110", 
    29 => "00111110010010000001111011000000", 
    30 => "10111101100001010011010111100001", 
    31 => "10111110001001001010110010101001", 
    32 => "00111100011111111011010101010011", 
    33 => "10111110101011010110101000100011", 
    34 => "00111110000001000000110101110111", 
    35 => "00111110000010001010111100011100", 
    36 => "00111110001100011001101101000011", 
    37 => "00111110000001000010000011011111", 
    38 => "10111101000101011101110001111111", 
    39 => "00111101111101011001111011010010", 
    40 => "10111101000010100110101010010100", 
    41 => "00111110000010001100011000000011", 
    42 => "10111110011001010101011111000110", 
    43 => "10111110000001110010000010000111", 
    44 => "10111011010000111111100011100000", 
    45 => "00111100011110000100011000110101", 
    46 => "00111101010101011101011110101000", 
    47 => "10111101101011111000111101000011", 
    48 => "00111101100001011011000000010110", 
    49 => "10111110101100100011000100100000", 
    50 => "00111100101010010010100010000011", 
    51 => "00111110000110110101000000010101", 
    52 => "10111110101011010010001000011111", 
    53 => "10111101101100110001010100100001", 
    54 => "00111110000101010010010101000001", 
    55 => "10111110101010000101110010110000", 
    56 => "10111101101101010010001111011100", 
    57 => "00111101011100001011001101111001", 
    58 => "00111101100111101101001011000000", 
    59 => "00111101011000110010100110001110", 
    60 => "10111101110100110010011111001100", 
    61 => "00111101011000000010101101111000", 
    62 => "00111101111010100000001010111100", 
    63 => "10111100000110000101111111101011", 
    64 => "00111101111010100011111111010100", 
    65 => "10111101000000110110011100001100", 
    66 => "00111110000011010100110101000110", 
    67 => "10111100001001101011000001100011", 
    68 => "10111110011010101110101000001011", 
    69 => "00111101100101001010110001111000", 
    70 => "10111101110101101110100000111101", 
    71 => "00111011110110111100000011010110", 
    72 => "10111011111111011011100010110110", 
    73 => "00111101000000111000001011001111", 
    74 => "00111100110101000100101001010011", 
    75 => "10111101111010100011111100001101", 
    76 => "00111100111001001101111100011011", 
    77 => "10111110010100010011110001010011", 
    78 => "10111101000110100110101101100101", 
    79 => "00111110001101101111100000010110", 
    80 => "10111101110101001011001000011011", 
    81 => "00111110001001111111100010001010", 
    82 => "10111110011111000101110010111011", 
    83 => "10111110000000110010001000001001", 
    84 => "10111110101100001101101000011110", 
    85 => "10111101011010110011100011000011", 
    86 => "00111101010110010111010011010001", 
    87 => "10111110101011011100001110010111", 
    88 => "10111101101111000000000111001001", 
    89 => "00111101111110010101110110000110", 
    90 => "00111101111011111010101110010110", 
    91 => "10111110100011101011100011100000", 
    92 => "10111101110101101110011101101101", 
    93 => "00111110000101001111010100011100", 
    94 => "10111110000000000010011110010011", 
    95 => "10111101110001100100110100000110", 
    96 => "10111110100100010111100011000100", 
    97 => "10111100010001011100010110000010", 
    98 => "10111101011011111111011011010110", 
    99 => "10111110000000111001101100100110", 
    100 => "00111100110011010100000110111101", 
    101 => "00111101110101111011100011001011", 
    102 => "00111101000101011011101111100001", 
    103 => "00111101111100010111001001011100", 
    104 => "10111101100110000100010001011101", 
    105 => "00111110000010010110100111101011", 
    106 => "10111101010000110001000110011001", 
    107 => "00111101100010101110000101011000", 
    108 => "00111101011110010001011011111110", 
    109 => "10111110001011111001010111110101", 
    110 => "00111100011010101001011110000010", 
    111 => "00111101011011000111010000101110", 
    112 => "10111100101110100001100001011000", 
    113 => "10111110010101000110110101011010", 
    114 => "10111110001111101011000111110110", 
    115 => "00111101101110100001101010000000", 
    116 => "10111110010101000010110001011110", 
    117 => "10111101101111100100010101101110", 
    118 => "00111110001100000011011110101010", 
    119 => "10111101110000001000000001111001", 
    120 => "10111110000000011111001111011000", 
    121 => "10111110010101110110110100111110", 
    122 => "00111101101010100111000011101011", 
    123 => "10111101011000101010111001001110", 
    124 => "10111110010010010001011100101000", 
    125 => "00111110010101110010100010101111", 
    126 => "00111101111101110011100111011001", 
    127 => "00111110001010000000100000111010", 
    128 => "10111101011010001100001100010001", 
    129 => "00111110000010010101000000111000", 
    130 => "00111110001011011100000101111100", 
    131 => "00111100100111000000001110110011", 
    132 => "10111110000111001110010101110010", 
    133 => "10111101000111110001011010010111", 
    134 => "10111110010100001110110110011010", 
    135 => "00111100010110100111111111010100", 
    136 => "00111101110000000111111101101111", 
    137 => "10111100000101101001101110001000", 
    138 => "10111101101100101111101010100001", 
    139 => "10111110011000001011011001000111", 
    140 => "10111110100000111010100100010000", 
    141 => "10111101001111110011101011110111", 
    142 => "00111110010011001111010101100011", 
    143 => "00111101101011011000001110000111", 
    144 => "00111101111100001011101001101000", 
    145 => "00111100111101000011011010111110", 
    146 => "00111110000011101111100001100110", 
    147 => "10111101010100010001101011001110", 
    148 => "10111110001000100110000111101011", 
    149 => "00111100110111110110010010100001", 
    150 => "00111101110001110010110111110001", 
    151 => "10111110000011011001110010100000", 
    152 => "10111110010000011011000110000101", 
    153 => "00111100100101100001010011110101", 
    154 => "10111101010011010100000111101000", 
    155 => "10111110011011110100010011000111", 
    156 => "00111101101011100000000101011100", 
    157 => "00111101100101001000111000001010", 
    158 => "10111110011010001000000110000001", 
    159 => "00111100110011101001110100011101", 
    160 => "10111110101011000100011111000001", 
    161 => "00111101111100001011000111111011", 
    162 => "00111101101000000011011010011111", 
    163 => "00111011111111011011000011001110", 
    164 => "00111101110001100101011001111011", 
    165 => "00111000101111001010110000000010", 
    166 => "00111101001101001110111100001011", 
    167 => "10111101101001100001110000101100", 
    168 => "00111100011110011111100000101010", 
    169 => "10111110011000011010100010001100", 
    170 => "10111101110111111011000000011000", 
    171 => "10111011111110010101000111010110", 
    172 => "00111101111111000101111001010000", 
    173 => "10111110011111100000100111010011", 
    174 => "00111110010000001001111100100010", 
    175 => "00111101101011111110101110011110", 
    176 => "10111101010011101100111100100110", 
    177 => "10111011100110101010101111100000", 
    178 => "10111101100011100110000110010101", 
    179 => "10111110000000000011000000110111", 
    180 => "00111101101110111101001011111111", 
    181 => "10111110100010000110010101000001", 
    182 => "00111101100010010000110111100000", 
    183 => "00111110001110101001011111100111", 
    184 => "00111101100000111101101111010101", 
    185 => "10111110000110110001100100011000", 
    186 => "00111101010110101011000011100010", 
    187 => "10111101110000011110101010010111", 
    188 => "10111110000111100011101101111101", 
    189 => "10111101101011101000100001100111", 
    190 => "00111100100111110010111110010011", 
    191 => "00111101001001011101001000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiEe0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiEe0 is
    component conv_2_conv_2_weiEe0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiEe0_rom_U :  component conv_2_conv_2_weiEe0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


