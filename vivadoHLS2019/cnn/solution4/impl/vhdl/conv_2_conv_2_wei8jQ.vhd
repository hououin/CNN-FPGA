-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei8jQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei8jQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011100101001110000000001010", 
    1 => "00111100100100110010001111011001", 
    2 => "10111101100101000011110011000011", 
    3 => "10111101011111011111111110011110", 
    4 => "00111101111010100111110001111100", 
    5 => "10111101001110110100001010101001", 
    6 => "00111101101111010010110101100111", 
    7 => "10111101000000001010110101001100", 
    8 => "10111100111100010011011011100011", 
    9 => "00111100011011100001011010100011", 
    10 => "00111101011111010111000001100010", 
    11 => "10111100000010110100100001100011", 
    12 => "00111101000111011001110011110010", 
    13 => "00111101100101111001111101001110", 
    14 => "00111101100110000100111011000000", 
    15 => "00111101101001101011000010110111", 
    16 => "10111011000000001110111010011011", 
    17 => "10111101111011101110100110101000", 
    18 => "10111110000101111100011101010101", 
    19 => "10111101110011010110100001001001", 
    20 => "00111101101001110101010100100110", 
    21 => "00111101100010001001001000110000", 
    22 => "10111100000110011011000111011001", 
    23 => "00111101000001100111100101010101", 
    24 => "00111100100011101110100011010110", 
    25 => "10111110000100100010101001001111", 
    26 => "00111101010111110111011111010101", 
    27 => "10111110011010101000001011011101", 
    28 => "10111101111111110011111110111101", 
    29 => "10111101001011000000110111100011", 
    30 => "10111100100011100001111111011110", 
    31 => "10111110001110111111010100011111", 
    32 => "10111101100000011111110011010100", 
    33 => "00111101011100101110100110011111", 
    34 => "10111101010111011101110100000111", 
    35 => "10111100111100110011110110011001", 
    36 => "10111110010100101110110110101001", 
    37 => "00111101010110011001101010101110", 
    38 => "10111101100101010000100000101101", 
    39 => "10111101111000111100111110000101", 
    40 => "10111101111011100110001111111110", 
    41 => "10111101001100001001010101111000", 
    42 => "00111101100011110000011010011100", 
    43 => "00111101010100011101010000001110", 
    44 => "00111101010111011010011011101011", 
    45 => "10111011100100101110111101001100", 
    46 => "00111100011100101010010111110100", 
    47 => "10111100101000000001100010010001", 
    48 => "10111101101110100110100011010011", 
    49 => "10111110010100111010000000001101", 
    50 => "10111101000000001110001111110100", 
    51 => "00111101100000011110011110111001", 
    52 => "10111110010100101110100111110000", 
    53 => "00111100011111011110011001010100", 
    54 => "10111101100010010010001110011011", 
    55 => "10111110000000000000001100001100", 
    56 => "10111101110010010101110101101001", 
    57 => "10111010111110110000101101101011", 
    58 => "00111101000011000010000110101101", 
    59 => "00111100010101001101000110011000", 
    60 => "00111101010011011011101011010111", 
    61 => "10111101110100000110001110111000", 
    62 => "10111101001001000110101110000000", 
    63 => "10111101101111111001000110101101", 
    64 => "00111101110010100011111010100011", 
    65 => "10111011001001101110001100110110", 
    66 => "10111011001110011011110100010000", 
    67 => "10111101110011101110001001100011", 
    68 => "00111101101100100000110000010111", 
    69 => "00111101100100010110001000011110", 
    70 => "10111100101000000000001110100101", 
    71 => "10111101100110011010101011011000", 
    72 => "10111110000100000101010001111001", 
    73 => "10111101011000000001110100001001", 
    74 => "10111100011101110000010001011100", 
    75 => "10111101010001100110100111010111", 
    76 => "00111101101101111100000001111110", 
    77 => "00111110000010111010011001100100", 
    78 => "10111101100101011111110111101110", 
    79 => "10111110000100111000010101001110", 
    80 => "00111101000100001000001000010100", 
    81 => "10111100100001100000010011100100", 
    82 => "10111101000000001000001101100000", 
    83 => "10111100101001101001011110011000", 
    84 => "10111110001010110110000001010011", 
    85 => "00111101100011011000110111011000", 
    86 => "10111101000110010011000011100111", 
    87 => "10111011000010000111000011111011", 
    88 => "00111101101111101111010000000010", 
    89 => "00111100000101110001001100101110", 
    90 => "00111101010100100101111000001011", 
    91 => "10111101101111100010000010100001", 
    92 => "10111100101100000100001100100000", 
    93 => "10111101100110010011010000010100", 
    94 => "10111100111011001011010000110110", 
    95 => "00111100110101101010101110011001", 
    96 => "10111101100001110010001100001010", 
    97 => "10111101010011011010110000001001", 
    98 => "00111101011011100111101111100100", 
    99 => "10111100011101110100011111101101", 
    100 => "00111101100101101010000111100011", 
    101 => "10111110100000110101101111011000", 
    102 => "00111011000001101000011111000010", 
    103 => "10111100111110010011110010011011", 
    104 => "00111101110000111010011111010100", 
    105 => "10111101100100111000110111100010", 
    106 => "00111101101110010100100101011000", 
    107 => "10111101111010100100110011000100", 
    108 => "10111101101001000011111100001110", 
    109 => "00111100100111101001101111000011", 
    110 => "00111101010100110111011110001000", 
    111 => "10111100101001110111001000110001", 
    112 => "00111101001100110110110011101100", 
    113 => "10111101000011000101000101010100", 
    114 => "10111011100111010110100101010110", 
    115 => "10111101011110110001001010101111", 
    116 => "10111101110110111101101100111011", 
    117 => "00111011001010000000111100101001", 
    118 => "10111101111101011011110001000110", 
    119 => "10111110000010110000010101101010", 
    120 => "10111101110000001101110110001110", 
    121 => "10111101001000000011001111010000", 
    122 => "00111101100110010100110001010101", 
    123 => "10111101000000000111001110010010", 
    124 => "00111101110000101110010001011100", 
    125 => "10111101111101011101011011000111", 
    126 => "10111101110011110010000110100011", 
    127 => "10111101010011010101111111001001", 
    128 => "10111101111001111001001000111100", 
    129 => "10111100000010111010010111111100", 
    130 => "10111110000001010001011111001011", 
    131 => "00111100101100010001011001011110", 
    132 => "00111110000111100011010001011010", 
    133 => "10111110001100001111011101100011", 
    134 => "00111101010011111101100110001001", 
    135 => "10111100010100100100111111010010", 
    136 => "00111100110110110110011111000111", 
    137 => "10111110000111001011101010011111", 
    138 => "10111110100000110100101101010100", 
    139 => "10111110011011011100111101011010", 
    140 => "00111101101010010111000110010111", 
    141 => "00111110000001011110101111100101", 
    142 => "10111100100111000110010001001111", 
    143 => "10111101100000000111111100001010", 
    144 => "10111101101010111101111100101100", 
    145 => "10111110000010101110110000001100", 
    146 => "10111101001001101111100010010110", 
    147 => "10111101000101010110100011011010", 
    148 => "10111101100100000100010011101010", 
    149 => "00111110000101000010111001011110", 
    150 => "00111101010111001000011101101000", 
    151 => "10111101001111010110010001010110", 
    152 => "00111101111011010001111001101000", 
    153 => "00111100111100101110000110110001", 
    154 => "10111101101111110001000111100110", 
    155 => "00111101011010100100010001010011", 
    156 => "10111110000110110001010010010111", 
    157 => "10111101101011111111100001010011", 
    158 => "10111101110001110010001111011000", 
    159 => "00111011111111100110111010001110", 
    160 => "10111110100000100100000001001111", 
    161 => "10111101010010110111101001111001", 
    162 => "10111110010000101010000100010001", 
    163 => "10111101010110111100001110110100", 
    164 => "00111101110001010000110000111000", 
    165 => "10111100001111111000010110110001", 
    166 => "10111011100101110101010001010000", 
    167 => "10111101100011010011100001111111", 
    168 => "00111110000100010111101110111000", 
    169 => "10111101111011111010110011111011", 
    170 => "00111110000010111011011100000110", 
    171 => "00111101000001000000100001101010", 
    172 => "10111110001010111110011010110001", 
    173 => "10111110010000000111010010011101", 
    174 => "10111101111000000110110001010101", 
    175 => "10111101100110011111010010001111", 
    176 => "10111101100110101100011101001110", 
    177 => "00111101100101110101101110110000", 
    178 => "10111011010111101011001110000101", 
    179 => "10111101100010110111000100011100", 
    180 => "00111101011011100101001111010111", 
    181 => "00111101100011100011100110010000", 
    182 => "10111101001101010101011000101000", 
    183 => "00111101110000100011000100010101", 
    184 => "10111110000010100011111001111110", 
    185 => "10111101101010110100110101111001", 
    186 => "10111100001001001001001110100011", 
    187 => "10111011100011110001101110111010", 
    188 => "00111101101001010000101100110010", 
    189 => "00111101100011000100100110011111", 
    190 => "00111101000101000101000100010111", 
    191 => "00111100001101110110000000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei8jQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei8jQ is
    component conv_2_conv_2_wei8jQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei8jQ_rom_U :  component conv_2_conv_2_wei8jQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


