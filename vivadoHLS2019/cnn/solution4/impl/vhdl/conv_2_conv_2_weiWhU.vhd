-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiWhU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiWhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000010110111011101111110", 
    1 => "00111100001011100111101011010101", 
    2 => "10111101111001110010011010001010", 
    3 => "00111110000110010011100010000011", 
    4 => "10111101100110011111001000100100", 
    5 => "10111100000010001110010000001001", 
    6 => "10111101100011011101000110111001", 
    7 => "00111110000000010111100010110101", 
    8 => "00111101100110111000111001000000", 
    9 => "00111101100111110010101111101010", 
    10 => "10111101010011101001000111101110", 
    11 => "00111101110011010010010010110010", 
    12 => "10111110000001100100011101000010", 
    13 => "10111101111111110101111110111111", 
    14 => "00111101111110110001110011101110", 
    15 => "00111110000101000111101111001100", 
    16 => "00111101000100111101110110000010", 
    17 => "10111100011011001001010011101111", 
    18 => "10111100000110110100110001011110", 
    19 => "00111100101011010001110101101100", 
    20 => "00111101111110101110110101000111", 
    21 => "10111101011001111001000011100010", 
    22 => "10111110001100111110010000001000", 
    23 => "00111101111000110101010110011100", 
    24 => "10111101110010000111101000101110", 
    25 => "00111110011100111111011110011010", 
    26 => "00111101100111100001010011001000", 
    27 => "10111110100011001011100011001101", 
    28 => "00111110011010111110011000110111", 
    29 => "10111110001111101101101011111101", 
    30 => "10111110000001111111010001010000", 
    31 => "00111110011010101100111010111111", 
    32 => "00111100100110010000001011011000", 
    33 => "10111110010101111100111111010000", 
    34 => "00111101110010101011101110100100", 
    35 => "00111101001110100011100010000011", 
    36 => "00111110000000110011110101000111", 
    37 => "10111101110110101101001111110000", 
    38 => "10111110011010111101101110100111", 
    39 => "10111101111011010100100100111011", 
    40 => "10111110010100110111100110010100", 
    41 => "00111101100011010011100011010110", 
    42 => "00111101100011000001000100000000", 
    43 => "00111110011110100011011001010001", 
    44 => "00111101101101011110001110100010", 
    45 => "00111101110100011001010111111110", 
    46 => "10111101101000111000101000011011", 
    47 => "10111100100011000000100011110000", 
    48 => "00111100011110100010011001100111", 
    49 => "10111110001101010111100110100001", 
    50 => "10111101111111001011010010000111", 
    51 => "10111110101000001001010011100110", 
    52 => "10111101101011100110001011100110", 
    53 => "10111101010101110111110101111100", 
    54 => "10111110101111000100101001001010", 
    55 => "10111110101100101001100001101010", 
    56 => "00111101110001110100111011010100", 
    57 => "00111101110101011000001110111100", 
    58 => "10111110001000111001111000111111", 
    59 => "00111100100111000010100010111011", 
    60 => "10111110011111110011111000001100", 
    61 => "00111110000011011001100111001001", 
    62 => "00111101111000001010001111110100", 
    63 => "10111011111001110010011011110111", 
    64 => "00111101111111000101110010001011", 
    65 => "10111100011101100000110100001011", 
    66 => "10111101101111100001100000100101", 
    67 => "00111101100000010000101101110111", 
    68 => "10111110000011010011110000101101", 
    69 => "00111101001001011011111011100101", 
    70 => "10111110000100100000100011011010", 
    71 => "00111011010111000001010010111000", 
    72 => "10111101110010011001011101010101", 
    73 => "00111101010110011000111010111110", 
    74 => "10111110001100100010011001110100", 
    75 => "10111101110001110100010010011000", 
    76 => "10111110001100101001111011011000", 
    77 => "10111110000001100011101011100011", 
    78 => "10111110000100101101010110111111", 
    79 => "10111110000011100100110000100000", 
    80 => "00111101100000101000101011010011", 
    81 => "00111101101010111111000111101111", 
    82 => "00111110001101011001111001001111", 
    83 => "00111110000001000000111111011101", 
    84 => "00111101101110011000000110010110", 
    85 => "10111101001011011100000110111000", 
    86 => "00111101111110011101001001010110", 
    87 => "10111101001011100110110100110000", 
    88 => "10111100100001111010111010111011", 
    89 => "10111100001000011010111110001100", 
    90 => "10111101011101111010110100001111", 
    91 => "00111101001110011010110011011100", 
    92 => "00111101101111110101110111111011", 
    93 => "10111110110001000001101100111111", 
    94 => "10111110010001001001011010011111", 
    95 => "00111110001101110011000101000001", 
    96 => "00111101011000100101101100000101", 
    97 => "00111110001111011010100100001110", 
    98 => "00111101110101101111110111100001", 
    99 => "10111110010010101000111101001110", 
    100 => "00111101000101110010011101111111", 
    101 => "10111110100101000010011010111111", 
    102 => "10111110010000110111010010000111", 
    103 => "10111101101010001100110100111100", 
    104 => "00111101001000100110110111111001", 
    105 => "10111101011011101111110100111111", 
    106 => "00111101100101100011101000101011", 
    107 => "00111100110111111000101001001111", 
    108 => "10111110100101010101000010000011", 
    109 => "10111101111001111011101100110011", 
    110 => "10111110100001111100101101101011", 
    111 => "10111110010100111011101000001100", 
    112 => "10111110000100011000110010110100", 
    113 => "00111100101101101001100111111001", 
    114 => "10111100110011010000101000010110", 
    115 => "10111110100110001011001100010111", 
    116 => "00111101001010101100001100100000", 
    117 => "10111101100111010100111111011101", 
    118 => "10111101010000011001110010100000", 
    119 => "00111110001001001110011100011011", 
    120 => "00111110011011111010110101010011", 
    121 => "00111100011101010001000001000011", 
    122 => "00111100110011101010101010100001", 
    123 => "00111101101010111011010011110000", 
    124 => "10111101111101000111100111011010", 
    125 => "00111110001010011000101100001010", 
    126 => "00111100111001001111100111011100", 
    127 => "00111100100111000110010111111101", 
    128 => "10111110001010101110111000101011", 
    129 => "10111110010000000100011100101111", 
    130 => "10111110101010010100100101100101", 
    131 => "00111101010100110101000011010111", 
    132 => "10111101111111010100011100001001", 
    133 => "10111110110011110110010011001011", 
    134 => "10111110010010101101101011111000", 
    135 => "00111101001001110110011011011111", 
    136 => "00111100110111011001101111100110", 
    137 => "10111111000011011111100010000010", 
    138 => "10111110011001011100101101100011", 
    139 => "10111110100111001010010101011101", 
    140 => "10111110100001100101000100100001", 
    141 => "10111101110101111110111100000010", 
    142 => "10111100010110011100100110101000", 
    143 => "10111101101101001100110010001011", 
    144 => "10111110010111100011111100001100", 
    145 => "10111010000101111000001000100100", 
    146 => "10111110000101001011011011000000", 
    147 => "10111110001001110000011001110101", 
    148 => "00111110001111110100110111010110", 
    149 => "10111101100011001010111101010101", 
    150 => "00111101011110110010110010001000", 
    151 => "10111110001011111001010100001110", 
    152 => "10111110100000011000011111101001", 
    153 => "10111110000111111100001000010111", 
    154 => "00111101101011000100111101010010", 
    155 => "00111101110011010001111010110000", 
    156 => "10111110000001011011001110000011", 
    157 => "10111110100010011100111111001010", 
    158 => "00111110000110000111100001110010", 
    159 => "10111100111001110110100000000100", 
    160 => "10111110100111101001000010101001", 
    161 => "00111100010011101011010101010101", 
    162 => "10111110110010011100101001110000", 
    163 => "10111101100010110011000011001011", 
    164 => "10111110010110100110110011110110", 
    165 => "10111110000101000111000001001010", 
    166 => "10111110000100001101110101101110", 
    167 => "00111110011000111011001001111100", 
    168 => "00111110001011111100111011101001", 
    169 => "10111110100110000010001100011111", 
    170 => "10111101111001011100001111010110", 
    171 => "10111101111001010000110111100110", 
    172 => "00111100101000011110001110100111", 
    173 => "00111110100110101000000111000000", 
    174 => "10111110011010100001000111010010", 
    175 => "10111110100010111010100100000101", 
    176 => "00111110010101100001111010011110", 
    177 => "00111101110100011000001111001010", 
    178 => "10111110100011101011010100011100", 
    179 => "10111110010100011110101111100101", 
    180 => "00111101100001010111101101100101", 
    181 => "00111101110110010110000100011101", 
    182 => "10111101101101111100111010010101", 
    183 => "00111100000010100011010111111001", 
    184 => "00111101110100011101101110111011", 
    185 => "00111011110001001110011111110010", 
    186 => "00111100110010000100001100101101", 
    187 => "10111110010000110111100101010111", 
    188 => "10111110010000100110011000010001", 
    189 => "00111100100110010001011110001011", 
    190 => "00111110010101010100001011000010", 
    191 => "00111110000000111101011101101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiWhU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiWhU is
    component conv_2_conv_2_weiWhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiWhU_rom_U :  component conv_2_conv_2_weiWhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


