-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiudo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiudo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001100010111111011110", 
    1 => "00111101001110011000110011001010", 
    2 => "00111101101101111111101000101000", 
    3 => "10111110001000100101010100110110", 
    4 => "00111110000001101001000101101010", 
    5 => "10111100000110001100111011100111", 
    6 => "10111101111110001101101110000001", 
    7 => "00111110010111101101010111001010", 
    8 => "10111110100010101000110010011001", 
    9 => "00111101111001101110101100100111", 
    10 => "00111100111101011000101110111110", 
    11 => "10111101000111111111000010010001", 
    12 => "10111101110101011100110100001100", 
    13 => "00111011100101100011011011001000", 
    14 => "10111110000011011011010101110010", 
    15 => "10111110001100111101010010110110", 
    16 => "00111100101110010110000101001101", 
    17 => "10111110000011011010100110111111", 
    18 => "00111011010101110101100001000011", 
    19 => "10111100010010111111110010111110", 
    20 => "00111101111001110000110101111111", 
    21 => "00111101100100011101110111000100", 
    22 => "10111101111001101011100100110100", 
    23 => "00111110001110100110110110101010", 
    24 => "10111101111110010100110101111100", 
    25 => "10111110100000000000101011000101", 
    26 => "00111100001011011101100110001100", 
    27 => "10111101111000011100111100110111", 
    28 => "10111100001110101100110001010100", 
    29 => "10111100111010110110100010100011", 
    30 => "10111110100011001111001000100010", 
    31 => "10111100101100111000000110011010", 
    32 => "10111110001001011101000111001011", 
    33 => "00111110100010010110011100100011", 
    34 => "00111100100000111110101011011010", 
    35 => "00111110000101111001010000000100", 
    36 => "00111110011111111001110110111011", 
    37 => "00111000110011111011100110111000", 
    38 => "10111110001100011010110000011101", 
    39 => "00111100000001000011001011111111", 
    40 => "10111101110011010100100110000110", 
    41 => "10111110111000001100011011010000", 
    42 => "00111101101110110000011111101001", 
    43 => "10111110100010011110100110000111", 
    44 => "10111110001101101000001001100110", 
    45 => "10111110000100101100000101010100", 
    46 => "10111110001100111111101001100001", 
    47 => "10111110100101101100100010001111", 
    48 => "10111101110100110001101010011110", 
    49 => "00111100101101111111010101100100", 
    50 => "10111110011000000001011100110000", 
    51 => "10111101001010011011100111000010", 
    52 => "00111100100100100101111010010101", 
    53 => "00111101010101010101000111010100", 
    54 => "00111101000101111011010001011111", 
    55 => "00111100111111100100110011001001", 
    56 => "00111101000101011110111000100010", 
    57 => "00111101100010001010011110101000", 
    58 => "00111101001011010110010010010100", 
    59 => "10111110000011010010110010001000", 
    60 => "00111100010001000110100110010111", 
    61 => "00111101010011110011101001010011", 
    62 => "10111110001011110101010001011111", 
    63 => "10111110100000010000101111101111", 
    64 => "10111110001101001110100010101110", 
    65 => "00111011110001100010001111010000", 
    66 => "00111100000011110100100111001010", 
    67 => "10111100011011111011000101011001", 
    68 => "10111011101101100011001010010010", 
    69 => "10111100001001101001000101001100", 
    70 => "10111101111110101101110001011010", 
    71 => "00111101111101111101111011111110", 
    72 => "10111110110100101101010111101011", 
    73 => "10111110010011001111001110110100", 
    74 => "10111110001001010010011111111100", 
    75 => "10111101000100100011011110000010", 
    76 => "00111101000001101010000101010100", 
    77 => "00111101100011110100110100001101", 
    78 => "10111110110011011110100100011011", 
    79 => "10111110111001101110111111111011", 
    80 => "10111110011111010011011001100100", 
    81 => "00111101010100001010000100100100", 
    82 => "10111101101110001110100111011010", 
    83 => "10111101010000011001110111110110", 
    84 => "00111110011000101101000101010100", 
    85 => "00111110001111010001011111111111", 
    86 => "00111101111001110101011011110110", 
    87 => "10111101111001011100001101000110", 
    88 => "10111101001110000101000100101001", 
    89 => "10111110101110111011000111011011", 
    90 => "10111101101010110011000010110101", 
    91 => "10111110000010101110101110011100", 
    92 => "10111100000000011101001110010001", 
    93 => "10111101110111111011011000111110", 
    94 => "00111100100010111111101100101010", 
    95 => "00111101010010100110011100101101", 
    96 => "10111110001010011001100010110001", 
    97 => "00111110010101111001010111100101", 
    98 => "10111101111010011010001011000010", 
    99 => "10111011100000110101111110000111", 
    100 => "00111101100000010110110001101000", 
    101 => "00111101100011100100100000101101", 
    102 => "10111110000110010011111111110001", 
    103 => "10111110001110010001110010100100", 
    104 => "10111101100000111010110101011000", 
    105 => "10111110011011111110111100010111", 
    106 => "10111101001010111001101010110101", 
    107 => "10111110001011110111110111110001", 
    108 => "10111110000011011001011111001100", 
    109 => "10111110001001100000010011011110", 
    110 => "10111101011000110010110000010010", 
    111 => "10111110011010100110101001110110", 
    112 => "10111110100011011101010110001101", 
    113 => "10111110001101000101101111001000", 
    114 => "10111100010100011001111110000000", 
    115 => "00111101011010001100100101000100", 
    116 => "10111101000101100111011110111011", 
    117 => "00111101101011111000111111001010", 
    118 => "10111100101010010001010110001000", 
    119 => "00111110011000110010010110111000", 
    120 => "10111101110000100101111010011011", 
    121 => "10111110010010001110110001000100", 
    122 => "10111101001011110100001010010001", 
    123 => "10111110000001011001100011001110", 
    124 => "10111110010111101100011100001111", 
    125 => "10111101100001101000110010100000", 
    126 => "10111110011111101001001011010101", 
    127 => "10111101111110000010010110111000", 
    128 => "10111101101100010100110001100001", 
    129 => "10111110011010010100010011011100", 
    130 => "10111110100100101110001111001111", 
    131 => "10111110010000101110111011101011", 
    132 => "00111101110001101011000111010001", 
    133 => "00111110010110011101000111010001", 
    134 => "00111110001011101011110001111111", 
    135 => "00111100111110011100000000110101", 
    136 => "10111110100001111101110101000010", 
    137 => "00111101111110110110010001111101", 
    138 => "00111100110011001001010100110011", 
    139 => "10111101011010011111010100100010", 
    140 => "00111101111001011000110011111100", 
    141 => "10111101011011101111011000111011", 
    142 => "10111110011011011011100101100000", 
    143 => "10111110101100111011011001101011", 
    144 => "10111110001000011000001000000001", 
    145 => "00111100110010110110110100001101", 
    146 => "10111110011100110111000001110110", 
    147 => "10111111000000110111011000111001", 
    148 => "00111101101110111111100000000111", 
    149 => "00111110001011000010010000010010", 
    150 => "10111100111000101001001001100001", 
    151 => "00111101111110111001011100001000", 
    152 => "10111101100000111011011101000011", 
    153 => "10111110100001010001000011111100", 
    154 => "00111110010000010011110010111110", 
    155 => "10111101110010010101010000000110", 
    156 => "10111110100110000000001101111001", 
    157 => "10111110101101111011110000001001", 
    158 => "10111101010111111111110000110110", 
    159 => "10111101011111101110110010011111", 
    160 => "00111110011001110000001111000110", 
    161 => "10111101110011101111100100000100", 
    162 => "00111110010000001110001111111011", 
    163 => "00111110011101101001101010101111", 
    164 => "10111110101000110100000011100000", 
    165 => "10111110100011000110000111110010", 
    166 => "00111110010101110010100101010100", 
    167 => "10111100000010110010000110001001", 
    168 => "00111101010101111101111111011100", 
    169 => "10111110001100101101011111000000", 
    170 => "10111101110101001000110101111110", 
    171 => "00111101000110000000111111001111", 
    172 => "00111110100010100100111001010011", 
    173 => "00111110010011101111011101001011", 
    174 => "00111110001000001101111010100101", 
    175 => "10111100001011010110000001011100", 
    176 => "10111110101001100111001011111001", 
    177 => "00111110011101101011010110110101", 
    178 => "10111101111101100010101010100110", 
    179 => "10111100110001110000101000110110", 
    180 => "00111110000011101011101010111111", 
    181 => "10111101010000011000011001000011", 
    182 => "10111110100000000000011000010011", 
    183 => "00111101001000011100101101011011", 
    184 => "10111110000000101110000100010110", 
    185 => "10111101110110110101000111100000", 
    186 => "10111110000010001000111000100000", 
    187 => "10111110101111001011010010101000", 
    188 => "10111101110011000110111111110010", 
    189 => "10111110001011110101111111100100", 
    190 => "00111101011100100100001010010101", 
    191 => "00111110010000001100000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiudo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiudo is
    component conv_2_conv_2_weiudo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiudo_rom_U :  component conv_2_conv_2_weiudo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


