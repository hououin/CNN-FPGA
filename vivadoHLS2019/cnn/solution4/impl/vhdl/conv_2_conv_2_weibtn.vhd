-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibtn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibtn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111111111110011101110", 
    1 => "10111110010101100110001010101011", 
    2 => "10111110011010100100100100101011", 
    3 => "10111100101110101110010001100111", 
    4 => "00111101101010100010111100100001", 
    5 => "00111100110111010001110010100101", 
    6 => "10111101111110101010001111000010", 
    7 => "00111110001001110001001000111000", 
    8 => "00111110000011100001011010011010", 
    9 => "00111100111100010100111001101100", 
    10 => "00111100101000000010101111011000", 
    11 => "00111101100011111100010111011101", 
    12 => "10111100011010001100100110001100", 
    13 => "00111100111100101000000011011110", 
    14 => "10111101000000100101001011111111", 
    15 => "00111101101110110100010001111110", 
    16 => "00111101100101001101001001111000", 
    17 => "10111101110100110011111101001111", 
    18 => "10111100100110101011000001111011", 
    19 => "00111101010001010011010001101100", 
    20 => "10111110000100000111110110010101", 
    21 => "00111101010011010011011100100011", 
    22 => "10111100100011011011011011110010", 
    23 => "10111100100110000011001010001111", 
    24 => "10111101000010111110111001111000", 
    25 => "00111101110010001111010000001100", 
    26 => "00111001101000000100000000100110", 
    27 => "10111110000111010110110110001111", 
    28 => "10111011111100010101111000110111", 
    29 => "10111101100011010001110110011000", 
    30 => "00111101100001111011100100010110", 
    31 => "10111110010100111011001100110100", 
    32 => "00111011110011001110010000000001", 
    33 => "00111011101111111010100110101100", 
    34 => "10111101100100111101111110010010", 
    35 => "10111100101010000011001010101110", 
    36 => "10111110100010101110111000110100", 
    37 => "10111110000001010100110010011111", 
    38 => "10111100001101011101011010100101", 
    39 => "00111101100110011000001101011100", 
    40 => "10111110011100011111110100111110", 
    41 => "10111110010111100000001000110111", 
    42 => "00111100101000010100110001010110", 
    43 => "10111100100111011000000111100001", 
    44 => "00111101100010110101010100010110", 
    45 => "10111101100110001001001010001101", 
    46 => "10111101110111011000101011100101", 
    47 => "10111101100010000010000001011000", 
    48 => "10111110001001100100100100010010", 
    49 => "10111110000001101101111001010111", 
    50 => "10111101100011011011000011100010", 
    51 => "10111101110101010110011101010010", 
    52 => "10111110011000101011001011001101", 
    53 => "10111101110010011110111000111001", 
    54 => "10111110001101011010000110000100", 
    55 => "10111110001000000010110110100010", 
    56 => "00111100001000010011011101011010", 
    57 => "00111101001000000000010101011000", 
    58 => "10111101011001001000000111111010", 
    59 => "00111110000000011001000011000101", 
    60 => "10111101111001001011101001011011", 
    61 => "00111100000001001001101110000001", 
    62 => "00111101010000000111010001110000", 
    63 => "00111110001101011111010000000011", 
    64 => "10111101010110011010110010110111", 
    65 => "10111101110111011110111100011101", 
    66 => "10111110001111001001110100010010", 
    67 => "00111101111011010101111101001111", 
    68 => "00111101001111110100010011000110", 
    69 => "10111110000001010111011010011010", 
    70 => "10111101010001001110110010101100", 
    71 => "00111101110000101000110000101001", 
    72 => "00111101000111100110001101010000", 
    73 => "10111100001010010011001010001111", 
    74 => "10111101100000011110011010010010", 
    75 => "10111101111001011110100010100000", 
    76 => "00111101100111110101000110011100", 
    77 => "00111100011101101001110000001000", 
    78 => "10111100110001101100010111101010", 
    79 => "00111101110100111001100101011110", 
    80 => "00111101000001000100111001110000", 
    81 => "10111101010111011110110100001011", 
    82 => "10111101100011100001110110111100", 
    83 => "00111101010000011101000110001111", 
    84 => "10111101011010010101001100111010", 
    85 => "00111101110010101001001001111011", 
    86 => "00111100101001011010011010001111", 
    87 => "00111101111111000011010100101010", 
    88 => "00111101101101110000111000010001", 
    89 => "10111101010110111011011110100011", 
    90 => "10111101011000110111001110100100", 
    91 => "10111101000100010001100000010100", 
    92 => "10111100010101010101010101011010", 
    93 => "10111110011111000101001101000011", 
    94 => "00111101110110101000011001000110", 
    95 => "00111011111111001100010001010100", 
    96 => "00111101001001110011101001111110", 
    97 => "00111101011101111110110101101100", 
    98 => "10111101100000110011000111110111", 
    99 => "10111100011011101011010110101000", 
    100 => "10111101100010000010100101101101", 
    101 => "10111101111011011010011100010010", 
    102 => "00111110001110000010101101111100", 
    103 => "10111101100110101110111001010100", 
    104 => "10111001111010010001110010010110", 
    105 => "00111101010101010011101111001101", 
    106 => "00111110000001000101101101110100", 
    107 => "00111100001111010111010101101010", 
    108 => "00111101111101000100001110001101", 
    109 => "10111101101010111000100100111100", 
    110 => "00111100100011100100001100001001", 
    111 => "00111101101111111010000101111011", 
    112 => "00111110000011111110010001000010", 
    113 => "00111011111100010110110011011011", 
    114 => "10111101010110111011010000100011", 
    115 => "10111101111010010101010100110010", 
    116 => "00111101001100111011100001011001", 
    117 => "00111100010011100101011100000001", 
    118 => "10111100010010111110011110110101", 
    119 => "10111101110101011110100101001100", 
    120 => "10111101111000010001100000010111", 
    121 => "00111101110111010011010101100110", 
    122 => "00111101111110011011110111100010", 
    123 => "00111100000000100001000010011111", 
    124 => "00111010111000100000110101101011", 
    125 => "10111100100110011111111010100001", 
    126 => "10111101110001110111001111110101", 
    127 => "10111100101001011011010101111000", 
    128 => "10111110100100101101111111000111", 
    129 => "10111110100001001110111111101100", 
    130 => "10111110001001010000000011011110", 
    131 => "10111101110110010011111100111110", 
    132 => "00111101110010100010011101101100", 
    133 => "10111110100110101111111101011111", 
    134 => "00111110011010010110011100001110", 
    135 => "10111101111110101111011000100010", 
    136 => "00111100110110100100101000010000", 
    137 => "10111110011001111010000100110100", 
    138 => "10111110010010011000010111100010", 
    139 => "10111110000110001001101101000001", 
    140 => "00111110001001110001001100010100", 
    141 => "00111101101100101110001111001100", 
    142 => "00111100110110011100011010100010", 
    143 => "10111100011001100010010011011010", 
    144 => "10111100000101100001011101101100", 
    145 => "10111101101010011010010110110011", 
    146 => "00111101001100001100100110110110", 
    147 => "00111101010010101000111000000000", 
    148 => "00111100101111100011101010111111", 
    149 => "00111110000010010111110010001100", 
    150 => "00111101001101110100100011110101", 
    151 => "00111110100100000001110000111001", 
    152 => "00111110001001001110000001001100", 
    153 => "10111100001111101110011000111100", 
    154 => "10111110011110110101011011111001", 
    155 => "10111110001000011101011011001000", 
    156 => "00111101100001100001011011001111", 
    157 => "10111101100010111110110011010010", 
    158 => "10111101101011100101001000010011", 
    159 => "00111101110100010001010111100100", 
    160 => "10111101100111000000000001100111", 
    161 => "00111101101010110000001110000011", 
    162 => "10111110011110100111000111001110", 
    163 => "10111110000111101110010011101101", 
    164 => "00111101110001000010001110011011", 
    165 => "10111100011010100011010011110000", 
    166 => "00111101011000100111000100000101", 
    167 => "10111101010010010010100001100100", 
    168 => "00111100001100101011011111101111", 
    169 => "00111101001101011010101000001010", 
    170 => "00111101111001111101101001010100", 
    171 => "00111101000011011000001010000101", 
    172 => "10111110001111001001011000011111", 
    173 => "10111110001110001101010000001110", 
    174 => "00111110001001110000011101111101", 
    175 => "00111110000101001001010101011011", 
    176 => "00111101110001000010100100111001", 
    177 => "00111101100111110110110111101011", 
    178 => "10111100001010000011100011010101", 
    179 => "10111101000110100011111110000100", 
    180 => "00111100110001011010001001100111", 
    181 => "00111101101011000001110100011010", 
    182 => "10111101100010100101111010110101", 
    183 => "00111110001100110101010101001111", 
    184 => "10111101111000011110001011000010", 
    185 => "10111100100011011110110110101011", 
    186 => "00111101110011010111011110011110", 
    187 => "10111101100010111100101101010100", 
    188 => "00111101101100100000111111100111", 
    189 => "10111100011110111100011111011000", 
    190 => "10111101101000000111110010001000", 
    191 => "10111101110010001011101101110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibtn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibtn is
    component conv_2_conv_2_weibtn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibtn_rom_U :  component conv_2_conv_2_weibtn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


