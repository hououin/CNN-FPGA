-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibqm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibqm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010101001001100001010101101", 
    1 => "00111101100011011001010101011000", 
    2 => "10111110011110000011111010010011", 
    3 => "00111110010011011111001011000110", 
    4 => "00111110000111110000001100111001", 
    5 => "00111101010110100001101100110001", 
    6 => "00111110000011000011111100011011", 
    7 => "00111100101111101110010001000000", 
    8 => "00111101111010101110010011110101", 
    9 => "10111110000100111100110111110010", 
    10 => "00111110010110100101100010101110", 
    11 => "10111101111011001001100010010000", 
    12 => "00111101000101110000110100111100", 
    13 => "00111110000001011000001111000100", 
    14 => "00111101101100010110001101111001", 
    15 => "00111101011001111111101011110101", 
    16 => "00111101101000101101100001011101", 
    17 => "10111011111111001100000110010101", 
    18 => "00111100110000010010110011101111", 
    19 => "10111101001111100000010101111010", 
    20 => "00111110000011100111110010010010", 
    21 => "00111110011010011110011110100001", 
    22 => "10111101000110110000000011101101", 
    23 => "00111101000101000001000000011100", 
    24 => "00111100101000000111001100101101", 
    25 => "00111101101101110100110001000001", 
    26 => "10111100010101110011011111111101", 
    27 => "10111101100101110100001010001101", 
    28 => "00111101001101100000101101011101", 
    29 => "10111110100101011110101011101001", 
    30 => "10111101100001001111111111010000", 
    31 => "10111110000110001010110111011111", 
    32 => "00111110000111000010010111100000", 
    33 => "10111110000010110110101110100101", 
    34 => "00111101001110100010100111111111", 
    35 => "10111100110011100101100001010101", 
    36 => "10111110001101010100000100101101", 
    37 => "00111110001010110001001111010010", 
    38 => "10111011101000111001011111111100", 
    39 => "00111100000000101100011111111110", 
    40 => "10111110001001000111110111101010", 
    41 => "00111101100001111101000100000100", 
    42 => "00111100101111011100001111001000", 
    43 => "00111101101101001110110011010100", 
    44 => "00111101001001100001010011010110", 
    45 => "00111101101100100000111100111111", 
    46 => "10111100111010101111111001100010", 
    47 => "10111110000101001001000111000000", 
    48 => "10111101101011101110111010100001", 
    49 => "10111101100001011111101001101001", 
    50 => "00111100100010010111101011001100", 
    51 => "00111110100011100101100101000010", 
    52 => "10111110000011101111000010101000", 
    53 => "10111100110011101110101001001001", 
    54 => "10111101110000110010110001110001", 
    55 => "10111110100001111010011111101001", 
    56 => "00111101011010001110110011000000", 
    57 => "10111101000101111011111000010000", 
    58 => "00111010001011110100111000101110", 
    59 => "00111100110100101100010000100010", 
    60 => "00111101101100101101100101011100", 
    61 => "00111101100100001101000010010000", 
    62 => "10111101011011111011110100010111", 
    63 => "00111101100001110100001000101000", 
    64 => "10111100110001100010100100100100", 
    65 => "00111101111111111100011011000001", 
    66 => "10111110100101010010011001101001", 
    67 => "10111101010101100101011000100100", 
    68 => "00111101011010100000110110100100", 
    69 => "00111101101000111101001010001001", 
    70 => "00111101110111001111010100010010", 
    71 => "10111101101111101111111101101111", 
    72 => "10111110000101101100111001110110", 
    73 => "10111101110000111001000111001101", 
    74 => "00111100101001111110010101000101", 
    75 => "10111100110011101010000010110001", 
    76 => "00111110001000000000011101000110", 
    77 => "00111101111011000010111010111001", 
    78 => "00111101000101100001011101101010", 
    79 => "10111101111010110001100011100000", 
    80 => "10111100111010001001000010100101", 
    81 => "00111100011110011101001000111100", 
    82 => "00111101010010010001101100011110", 
    83 => "10111101000100101010101000000000", 
    84 => "10111110000000100100100001010111", 
    85 => "00111101010111100100000110111110", 
    86 => "00111100101110011111100101100110", 
    87 => "00111110000010001100110101110011", 
    88 => "00111101100100111001111101111011", 
    89 => "10111101101010110111000101100100", 
    90 => "10111101100011000011101010101001", 
    91 => "00111101110110110110100110110010", 
    92 => "00111101110001101101001110110111", 
    93 => "10111101100001101100000000111010", 
    94 => "00111101100011101011100110011111", 
    95 => "10111101110000111100110111101101", 
    96 => "00111101011111001100010101011000", 
    97 => "00111101010111011000000101101111", 
    98 => "10111110000101010010000101000100", 
    99 => "10111110011000001111110100110100", 
    100 => "10111101111001001000101000110011", 
    101 => "10111100000001000100111001110011", 
    102 => "10111100010000000110010011100000", 
    103 => "00111100010110000011100001000111", 
    104 => "00111110000011011000111100110100", 
    105 => "00111011110010010011101011111000", 
    106 => "10111011100101010101110001100100", 
    107 => "10111110001000000110000011010001", 
    108 => "10111011100101000101000010000011", 
    109 => "10111100101001100110111101101111", 
    110 => "10111101010000101000110011010101", 
    111 => "00111101010101100000011101111101", 
    112 => "10111101101000000000110110001110", 
    113 => "10111101100010111010001011101010", 
    114 => "10111011110110010110000000100000", 
    115 => "00111110000111101110110010111101", 
    116 => "00111101110011110010110000101011", 
    117 => "00111110000100110101001001100100", 
    118 => "10111100000110000111110110100101", 
    119 => "10111101101011100111100111101011", 
    120 => "10111100011101000001000100010111", 
    121 => "10111110100101100000100000010111", 
    122 => "00111101010000110011100011111100", 
    123 => "10111110000011110011000011101111", 
    124 => "00111101111110101100111011110111", 
    125 => "10111100111010100111000111101110", 
    126 => "00111101111010001000111100101101", 
    127 => "10111101101001001110111101010101", 
    128 => "10111101101010001010000111110110", 
    129 => "00111100110110100010111011011011", 
    130 => "10111101111101000110011101110110", 
    131 => "10111110000101110110010100000100", 
    132 => "00111011011110000110010001001000", 
    133 => "10111110100010010001010100111010", 
    134 => "00111101110000010100000111010011", 
    135 => "00111100100110011111010000100110", 
    136 => "10111110010000101000001000001001", 
    137 => "10111110011010010110100000100110", 
    138 => "10111110010011101000110010111110", 
    139 => "10111101101001110000101011110001", 
    140 => "00111110000110011010001111101011", 
    141 => "00111101101101011001101011010010", 
    142 => "00111100101111000100100101111001", 
    143 => "10111101110101000010111001001011", 
    144 => "10111110100100000000001001000111", 
    145 => "10111110001010100001001111001111", 
    146 => "10111101110001010011111000110001", 
    147 => "10111101010110001001101001010110", 
    148 => "00111110000101010110101110110010", 
    149 => "00111110010011011110000111100110", 
    150 => "00111110001111100100001110010111", 
    151 => "00111101111111111010110111100101", 
    152 => "10111011010111101011111101101110", 
    153 => "10111101000001001000001100000001", 
    154 => "10111110011000101010101000111000", 
    155 => "00111101010010000011010111001100", 
    156 => "10111101111011001001110110111110", 
    157 => "00111101101101011000011011111111", 
    158 => "10111101101011000101110010000010", 
    159 => "10111100100100101101011001100100", 
    160 => "10111110011010010000100011101111", 
    161 => "00111100110000010111000010010110", 
    162 => "10111110101110011111101000000000", 
    163 => "10111110101011111111010010100111", 
    164 => "00111110000011110010100111000110", 
    165 => "00111100110111100001110010000010", 
    166 => "00111100101101100011001110100111", 
    167 => "10111011000100000000110111011010", 
    168 => "00111110001010001111000010110011", 
    169 => "10111100110111110000001110011111", 
    170 => "10111011111111111000000010100010", 
    171 => "10111101011111100110110111010111", 
    172 => "00111101001110100000110110000111", 
    173 => "10111110000000111110110100000001", 
    174 => "00111101110110000001111010000110", 
    175 => "00111100000111100010111011111010", 
    176 => "00111110000110100111110110110000", 
    177 => "10111100110100111000001110001000", 
    178 => "10111101011010101111110010110010", 
    179 => "00111100001001010011001111000111", 
    180 => "00111101111010010000011111001000", 
    181 => "00111110000000110010111001011101", 
    182 => "00111101011011100101101110110010", 
    183 => "00111101010110111110011011010111", 
    184 => "10111110100011011100101111100100", 
    185 => "00111100100101111010100111001100", 
    186 => "00111101100101110111010101110101", 
    187 => "10111101001100110010000101110001", 
    188 => "00111101011010010000000011010000", 
    189 => "00111101011111100100000000111101", 
    190 => "10111101001011011011100110010111", 
    191 => "10111101111010001000101000111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibqm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibqm is
    component conv_2_conv_2_weibqm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibqm_rom_U :  component conv_2_conv_2_weibqm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


