-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibDo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibDo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101100000111100011000101", 
    1 => "00111101100101011000000111111100", 
    2 => "10111110001011101010010010101000", 
    3 => "00111110100000011101000100000110", 
    4 => "00111011010111000000101110011001", 
    5 => "10111110000100111101110011000000", 
    6 => "00111011000101001110101010000101", 
    7 => "00111011100101011000110110000000", 
    8 => "10111101100101010101101100010100", 
    9 => "00111101110000000001010011110001", 
    10 => "00111101111100010011110101101101", 
    11 => "10111101111011001011010010100000", 
    12 => "00111100110111100010000110110001", 
    13 => "00111110010000100110001111111111", 
    14 => "00111101110011000010000000011011", 
    15 => "00111110001100111011000100111101", 
    16 => "10111110010110001010010001010101", 
    17 => "00111101001011011011101101111100", 
    18 => "00111100100111001110011010001000", 
    19 => "10111101110111000111010110000011", 
    20 => "00111110100101110111010110001010", 
    21 => "00111101001010010011111000001001", 
    22 => "00111101110110000100001010101101", 
    23 => "00111100111000111000100000110111", 
    24 => "10111101011111000001101001011111", 
    25 => "00111101111101010101100111000111", 
    26 => "00111101010011010101011100101000", 
    27 => "10111101101101011110110010110001", 
    28 => "00111110011100011101010001110100", 
    29 => "00111100101101001101110000100001", 
    30 => "10111101001101101001100011111010", 
    31 => "10111110100110010001101111111000", 
    32 => "00111110010100000001011111110100", 
    33 => "00111101111101110010110111001100", 
    34 => "00111110010001001010101010101100", 
    35 => "00111101000010001010001001000000", 
    36 => "10111101010101110111101001111010", 
    37 => "00111110010000101101011110001010", 
    38 => "00111100010110110010000101001110", 
    39 => "10111101001111110011011010101001", 
    40 => "10111110010111000110001010000001", 
    41 => "00111101111111111111110111001100", 
    42 => "10111110100011101110011011011010", 
    43 => "00111100001110010100111000101101", 
    44 => "00111100100111011001101011001111", 
    45 => "00111101100001100111100111001010", 
    46 => "00111101100010000001000011111001", 
    47 => "00111110100100001101000100101111", 
    48 => "00111100100010111111010111010111", 
    49 => "00111011111010010111010011001010", 
    50 => "10111110001110001000001111011011", 
    51 => "10111101100000100111111111010010", 
    52 => "10111101111101111100001111011101", 
    53 => "10111100110010110101101001011000", 
    54 => "10111101010010001111010111011000", 
    55 => "10111101000110111010100011010101", 
    56 => "00111101101011011111010101111010", 
    57 => "10111110001010100001111011101001", 
    58 => "10111101010000110011100100100110", 
    59 => "10111101100100101001101010000101", 
    60 => "00111110000010111011111001110000", 
    61 => "00111110001111000110111001110100", 
    62 => "00111011100011001101111001101110", 
    63 => "10111101101001101001001110010001", 
    64 => "10111110000101011001111100011011", 
    65 => "00111101111001001000011010100101", 
    66 => "10111101000111100000101101011101", 
    67 => "10111101111011000101000011100001", 
    68 => "00111101011011010010011111101110", 
    69 => "00111110010000001101100110011011", 
    70 => "10111101110000111010000110111111", 
    71 => "10111101100011100011011111010101", 
    72 => "10111101101101100110010100010100", 
    73 => "10111101001000100101101010011000", 
    74 => "00111110100111010101000101100001", 
    75 => "00111101011110001111110001010100", 
    76 => "00111101000100011011101011110011", 
    77 => "00111110000001111001010010001110", 
    78 => "10111101101010000110110110101011", 
    79 => "10111011111101100101100101010001", 
    80 => "00111101101011101010000100101001", 
    81 => "10111101101001001011000010011000", 
    82 => "00111110100001010001110111100000", 
    83 => "10111101010111010100101010010001", 
    84 => "00111101001010011111010000010001", 
    85 => "00111101101000010010101011010001", 
    86 => "00111110001110110000110000100000", 
    87 => "00111011111110101111111001101111", 
    88 => "00111100101111100110000111100000", 
    89 => "10111101101001101100100100101101", 
    90 => "10111110000000101101001100110001", 
    91 => "10111110011010011000111101010100", 
    92 => "00111101011101000000011110100110", 
    93 => "10111100001011111001011011111000", 
    94 => "00111011100011111000001110000010", 
    95 => "10111110011100001011101110111010", 
    96 => "00111110000100010101100100011000", 
    97 => "10111101000010001010001000101110", 
    98 => "10111101101100100111010110100001", 
    99 => "10111101110101111101111101100100", 
    100 => "00111101100110111011111010010101", 
    101 => "10111110000110011001011111100011", 
    102 => "00111101100000111000101101111111", 
    103 => "00111101010100111001110101011001", 
    104 => "10111101001111001111000001011000", 
    105 => "00111100101000010110101111010110", 
    106 => "10111110010111000101010010100000", 
    107 => "10111010101111011010001001001001", 
    108 => "10111110101010100101010001001101", 
    109 => "00111110011011100001110001100101", 
    110 => "00111100101101001010101011100110", 
    111 => "00111100101000111000011011101010", 
    112 => "10111110011010011010100010100110", 
    113 => "10111110100110110010010000100000", 
    114 => "10111101111000110101001111010101", 
    115 => "00111101101011110000100101010100", 
    116 => "10111110000100111010100110001011", 
    117 => "00111110011000111000100000001011", 
    118 => "10111110110011100100010011100010", 
    119 => "10111110001011011100111101110000", 
    120 => "10111100110111010001010111100111", 
    121 => "10111110100001101001111000100000", 
    122 => "00111011001001011110010111111000", 
    123 => "10111101111101100010100110010000", 
    124 => "00111101110000011011011101100000", 
    125 => "00111101001000001111000101111110", 
    126 => "10111101011011110010000011110010", 
    127 => "10111101100001011011101000111001", 
    128 => "00111100111000010110100101010010", 
    129 => "00111101011111111011110010101100", 
    130 => "00111100110101010110010001110011", 
    131 => "10111110010000010110100011110011", 
    132 => "10111100011010111010010111010101", 
    133 => "00111110001111110101001000100101", 
    134 => "10111110001011100011000101011011", 
    135 => "00111101011101000100100011100011", 
    136 => "00111011100101111110001110110001", 
    137 => "00111101100100101010000110010010", 
    138 => "10111110011001010100111100000101", 
    139 => "00111110000010001010101000010001", 
    140 => "10111101100100111111000101100000", 
    141 => "00111101111001101000011101000100", 
    142 => "10111101110001111111010001111111", 
    143 => "00111101110101000000010100101101", 
    144 => "00111101011010011010001000100001", 
    145 => "10111101110110110010101001001110", 
    146 => "10111101111011100100100000101001", 
    147 => "10111101000010101100010100110110", 
    148 => "10111110010010111100110110011010", 
    149 => "00111101111101101001011001110100", 
    150 => "00111110000000100001011011010110", 
    151 => "10111100111000101101110111110101", 
    152 => "10111101111100101000001111001010", 
    153 => "10111101110111000010000100011111", 
    154 => "00111110011111101010000010011010", 
    155 => "10111101101010100000001101001001", 
    156 => "10111110001101001011110100001100", 
    157 => "10111010110111001100001010000110", 
    158 => "00111110000101011010001001101011", 
    159 => "10111110100001001010100001000101", 
    160 => "00111101000110000001111010101100", 
    161 => "10111110101110011011110101111010", 
    162 => "00111100101111001011011101011100", 
    163 => "10111110011101111111010010011101", 
    164 => "10111100100111010110100001011101", 
    165 => "10111110001100111101000011000110", 
    166 => "10111101010011111010111001100100", 
    167 => "10111110000001100100010111010110", 
    168 => "00111110001101011100011110010001", 
    169 => "10111110010011000100101000010011", 
    170 => "00111100110010100001001011111010", 
    171 => "10111110011101010000101001010010", 
    172 => "10111100000001101100011111001011", 
    173 => "10111101001101101001110011101011", 
    174 => "10111110011011101111111001011100", 
    175 => "10111101101010000100011111111001", 
    176 => "10111110000101100000000101000011", 
    177 => "10111110010111101001101001110100", 
    178 => "10111101101001000100111100001011", 
    179 => "00111101110100000110100011000010", 
    180 => "10111101111110111010010000010000", 
    181 => "00111110001000110010110001101011", 
    182 => "10111101011100011100101111111100", 
    183 => "00111100011011111111100110101110", 
    184 => "10111110101001110111011100001111", 
    185 => "10111101101000100100010111111100", 
    186 => "10111100010101000011000100000010", 
    187 => "10111110011011101011110110000110", 
    188 => "00111101010010001111100101111100", 
    189 => "00111101111001111111101111000111", 
    190 => "00111100100111111101111110100001", 
    191 => "10111100000011111111110111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibDo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibDo is
    component conv_2_conv_2_weibDo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibDo_rom_U :  component conv_2_conv_2_weibDo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


