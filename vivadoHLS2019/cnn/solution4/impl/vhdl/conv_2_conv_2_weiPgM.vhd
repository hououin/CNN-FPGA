-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiPgM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiPgM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000100101010110110010010", 
    1 => "00111101000101000100011001100000", 
    2 => "00111100111101110100001010011111", 
    3 => "00111101000000101110000011111100", 
    4 => "10111101111111001100001110101010", 
    5 => "00111100110000000110110001111011", 
    6 => "10111101110000011010110100000011", 
    7 => "10111100100110001111001010101000", 
    8 => "00111101111001011100010100010010", 
    9 => "10111110000101101110001011101001", 
    10 => "10111101111001110001011100101001", 
    11 => "00111101000100010101010010110010", 
    12 => "10111110001111101010110011100010", 
    13 => "10111101000010101000101101010010", 
    14 => "00111101100000111101110111011011", 
    15 => "10111011110011001000000000011100", 
    16 => "10111110100001110011000111110101", 
    17 => "00111101110000111000101011010010", 
    18 => "10110110110001000101101110100000", 
    19 => "00111101101000011010110011111101", 
    20 => "10111101100100110011011101101001", 
    21 => "10111110000001000010011010101111", 
    22 => "10111101101001001100010000101110", 
    23 => "10111100110010000110011100010101", 
    24 => "10111110011001010001101000111011", 
    25 => "10111101011101010111010100011011", 
    26 => "10111101101100111111110110110111", 
    27 => "00111110000110111001010100011011", 
    28 => "10111011110010000100110011111000", 
    29 => "10111101011101000001011101001010", 
    30 => "00111101110001111000011000001011", 
    31 => "00111110001011000111110111101101", 
    32 => "00111011110010011100001001110100", 
    33 => "10111110011101011110000010010110", 
    34 => "10111100110000000100111001110101", 
    35 => "00111110011010100010111100110011", 
    36 => "10111100100110100111111011100001", 
    37 => "10111100111101001110100000110110", 
    38 => "00111100101100111011100101110100", 
    39 => "00111100100011010010110011011000", 
    40 => "10111100110110111001011100101110", 
    41 => "10111100101100101011111100111001", 
    42 => "00111100001111111100011111110010", 
    43 => "00111101101100011010001111011011", 
    44 => "00111101101100110000101110101100", 
    45 => "10111101111011001011010010100001", 
    46 => "10111101111110100010110001000010", 
    47 => "00111101111000110100011001000101", 
    48 => "00111101101000010100011110011011", 
    49 => "10111110110010011010000000101001", 
    50 => "10111110011110001110110011000100", 
    51 => "10111100100011010011101011001000", 
    52 => "10111110100010000111100000010011", 
    53 => "00111110000100111100110111011000", 
    54 => "00111101000010011000011111000100", 
    55 => "10111101100000010101101100000110", 
    56 => "10111101000000111000101101110001", 
    57 => "00111101011000011111000001111100", 
    58 => "10111101011001000001111000111011", 
    59 => "00111110000011000100010010101000", 
    60 => "00111101001001000010010111110011", 
    61 => "10111101010110001011000000010010", 
    62 => "00111100100111000101011011011000", 
    63 => "00111101101111101011111001010110", 
    64 => "00111100000111110111101010000110", 
    65 => "10111101000011100101001110110011", 
    66 => "10111101101010001101000100010011", 
    67 => "10111101111010100100110011101111", 
    68 => "00111100100101100101011000100001", 
    69 => "10111101000110101111100011101010", 
    70 => "10111110011000111100111010110100", 
    71 => "10111101101010010110000110100110", 
    72 => "10111110001001101000000111011111", 
    73 => "00111100101010000001100000101111", 
    74 => "10111101011000010011110011000110", 
    75 => "10111100100011111011101101100111", 
    76 => "10111110000010011011000101100011", 
    77 => "10111110011101010101100011000000", 
    78 => "00111101010110111001000010100111", 
    79 => "10111101000100011101101001010010", 
    80 => "10111110100001111010011110111010", 
    81 => "10111101100100101110100011100001", 
    82 => "10111110001101011110001001101111", 
    83 => "00111101010001111101110110101101", 
    84 => "10111110010001101100000001110101", 
    85 => "10111110011011000000110111001010", 
    86 => "10111110111000111000111110111101", 
    87 => "00111110000011000111111010100010", 
    88 => "10111110010010110110110100001000", 
    89 => "00111101011111001001000110001110", 
    90 => "00111010000110001010010101100110", 
    91 => "00111101100110110101011110010001", 
    92 => "00111101100010110110000010111000", 
    93 => "00111101011101111011110101111110", 
    94 => "10111101100001101011110100111110", 
    95 => "00111110001101111111000001000010", 
    96 => "10111101101001101101101011001001", 
    97 => "10111110100110010000101001110001", 
    98 => "00111011100010110110010010001001", 
    99 => "00111101110011111000000001011011", 
    100 => "00111100101001111000011000000001", 
    101 => "00111101100001010111001011111001", 
    102 => "10111101001010010101101011010010", 
    103 => "10111100010001001110000100101100", 
    104 => "00111100110111011100000111111111", 
    105 => "10111011010110010001111000011010", 
    106 => "10111110000000000110000010110100", 
    107 => "10111011000010011001000111000100", 
    108 => "10111011111001000101000100101000", 
    109 => "00111100111011001010100000000001", 
    110 => "00111101010100101100110011110001", 
    111 => "00111101101111100000111011110001", 
    112 => "00111110001101101010011010111100", 
    113 => "10111101110101111010000101001100", 
    114 => "10111110101111100100001111111100", 
    115 => "10111100110000100100000111100110", 
    116 => "10111101101100100111001011110111", 
    117 => "00111110000111000100011011000110", 
    118 => "00111101111110111000000001111101", 
    119 => "10111110001111101111000111100011", 
    120 => "10111100111110100110110100101010", 
    121 => "00111100100011011110010001100110", 
    122 => "00111101100101001110000100101010", 
    123 => "10111101001110100011110000000101", 
    124 => "10111110101110011110101110011101", 
    125 => "10111110010101111011111101110100", 
    126 => "10111100100111110010011101100100", 
    127 => "10111101111000100111010000001101", 
    128 => "00111011010100000111011111101100", 
    129 => "00111110000001010100000100000100", 
    130 => "00111101101111011110101100011101", 
    131 => "00111100001000111010011010100100", 
    132 => "10111110110001010001001001101000", 
    133 => "00111100000101100100011110110010", 
    134 => "10111011100111101010000010101101", 
    135 => "10111100101001010011101100111101", 
    136 => "10111011011100010001101110001111", 
    137 => "00111100100010110011111111110000", 
    138 => "00111100100011110101011010010001", 
    139 => "10111110000101001111100101001010", 
    140 => "10111110000000011000010001011110", 
    141 => "10111101111111000100100110001000", 
    142 => "10111101101000011010110000101000", 
    143 => "10111110000001110100101011000000", 
    144 => "10111101001111000000111001010111", 
    145 => "00111101111000110001101100101010", 
    146 => "00111101100101111000110111001011", 
    147 => "00111101001100011011010011011000", 
    148 => "10111110010001111100010111010011", 
    149 => "00111101000111010100101110111100", 
    150 => "10111101100010000001100101011101", 
    151 => "10111110001000000111000101000111", 
    152 => "10111110100010100100010101010001", 
    153 => "10111101100000101011010000110010", 
    154 => "00111101111110100100100100101100", 
    155 => "10111110010001100100110100110101", 
    156 => "00111101000011001111000100110111", 
    157 => "00111101001111111111001001001111", 
    158 => "10111110001001101110001111110111", 
    159 => "00111110000000101010010000101111", 
    160 => "10111101110011111110001011011010", 
    161 => "10111010000100101101011100111101", 
    162 => "10111110001100001011101110101010", 
    163 => "10111110001100110101011110000110", 
    164 => "00111110000100011010010011101110", 
    165 => "10111101101010111011000011011100", 
    166 => "00111101000101111001000001111111", 
    167 => "00111101010100000001101011100101", 
    168 => "10111110000011011011000011101011", 
    169 => "10111101000001011000101111010010", 
    170 => "00111100101011101100001110011101", 
    171 => "00111101100101100000110000011011", 
    172 => "10111101101111001011100101010000", 
    173 => "10111110000101101011000000100110", 
    174 => "00111011110000000001011000010010", 
    175 => "10111100100100010100101000001110", 
    176 => "00111101101010010110000101111001", 
    177 => "10111101000011011111001010011110", 
    178 => "10111110110110100010101111000000", 
    179 => "10111011101110100100001101001100", 
    180 => "00111101110000010001100111010100", 
    181 => "10111101101011101101001001110101", 
    182 => "00111101110110111010100011101011", 
    183 => "10111100000011111100110110001001", 
    184 => "00111101000001001101011101010011", 
    185 => "00111101010101000101100001010010", 
    186 => "00111101100110101010100001001111", 
    187 => "00111101101011110110000100100001", 
    188 => "10111110110111000110001011011101", 
    189 => "10111100000101000001001000011010", 
    190 => "00111101100011110100001110011011", 
    191 => "10111101100010000010100111100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiPgM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiPgM is
    component conv_2_conv_2_weiPgM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiPgM_rom_U :  component conv_2_conv_2_weiPgM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


