-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibvn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibvn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111001100001010110101011", 
    1 => "10111110001110011000001001000011", 
    2 => "10111101001100011010011100100111", 
    3 => "10111101110011101100101000010001", 
    4 => "00111101010001100110010110100111", 
    5 => "00111100010110101011001001001001", 
    6 => "00111100101101001010000110111011", 
    7 => "10111101000000000101011001100101", 
    8 => "00111011011001100001101010010010", 
    9 => "10111100011010011110111000110010", 
    10 => "00111100111011011001011111000010", 
    11 => "10111001100111010100001000111011", 
    12 => "10111100100001000100011010110110", 
    13 => "00111110000101011110110101110111", 
    14 => "10111101101001001011101111010001", 
    15 => "00111101011000100001000110011111", 
    16 => "00111101100111111001101111101001", 
    17 => "00111101100011001011101111000111", 
    18 => "00111011100010011010111010000101", 
    19 => "10111110000010000110000011100110", 
    20 => "10111100111101100010111000100000", 
    21 => "00111011110110101101001110100111", 
    22 => "00111011111001110100111011100100", 
    23 => "10111100001111111010000010101011", 
    24 => "10111100100101010100110011001101", 
    25 => "10111101111111001000110000011100", 
    26 => "10111110000101001001111000000010", 
    27 => "10111110011101010111011011110100", 
    28 => "00111100110101100101111110000111", 
    29 => "10111110011000101110001001111110", 
    30 => "00111101101000000010001101110111", 
    31 => "10111110011000010010010110100101", 
    32 => "00111101000000101000101110101100", 
    33 => "00111100000110000011110011001000", 
    34 => "00111101100111001000000011010000", 
    35 => "10111101110111100011111011000010", 
    36 => "10111110000111011001110011101001", 
    37 => "10111101110111000010000100001100", 
    38 => "10111100110011111011010110101011", 
    39 => "00111100100110110010000010100101", 
    40 => "10111100010001101010010100001000", 
    41 => "00111101010110000110101001000011", 
    42 => "00111100101100010100011001000000", 
    43 => "10111101010111000110100101010001", 
    44 => "00111100111110111001011000011011", 
    45 => "00111110001000010011011100001000", 
    46 => "00111101101010100001111000010110", 
    47 => "00111010001110011100101101110001", 
    48 => "10111101100111000100111011111011", 
    49 => "10111101111111100010100001100011", 
    50 => "00111101001100000110010001101101", 
    51 => "10111110001111101100100110011111", 
    52 => "10111110000001010011001111100101", 
    53 => "00111101111010010010000010000101", 
    54 => "10111101000101011101010101110011", 
    55 => "00111101110000111010101001011000", 
    56 => "00111100100101000010100001001001", 
    57 => "00111101000111011010011110001110", 
    58 => "00111101100111101011101100011010", 
    59 => "00111101110000111001100101001010", 
    60 => "10111100100011100010011000111010", 
    61 => "00111100111001001001111001000000", 
    62 => "10111110000111111101110101111011", 
    63 => "10111101101001011111111101010001", 
    64 => "00111101001110100011001011001110", 
    65 => "10111101101011010101010100010011", 
    66 => "10111101101101111000000001100010", 
    67 => "00111100110000010100001110101000", 
    68 => "00111101111010011110110011010001", 
    69 => "10111101001111010101111100001010", 
    70 => "10111101011101001010001001100000", 
    71 => "10111101011011001010110100001110", 
    72 => "10111101011001010010010110101100", 
    73 => "00111101011011111011011000101101", 
    74 => "10111110010010100110111001001100", 
    75 => "00111100100011010010101011011001", 
    76 => "10111101110000011100010111000100", 
    77 => "10111100111101000011011110011011", 
    78 => "10111011111000111111001111101101", 
    79 => "10111101100111101111101010011100", 
    80 => "00111101101101110100111110111100", 
    81 => "10111101001010111010100110111100", 
    82 => "10111100011001011001100110011001", 
    83 => "00111100101110100110101111011100", 
    84 => "10111110000010010100111111110000", 
    85 => "00111011010101110001000111111010", 
    86 => "00111011101011110101100000000001", 
    87 => "00111100101000101001110101101111", 
    88 => "10111100110010011011010100011011", 
    89 => "10111101101011001100000100011101", 
    90 => "00111101111011000011100110010000", 
    91 => "00111101011010001100011100100000", 
    92 => "10111110010001110110110110111101", 
    93 => "10111101010111110100101100100101", 
    94 => "10111101010011111000001010100011", 
    95 => "10111101101110100111001001110011", 
    96 => "00111011100000101111110000000111", 
    97 => "10111101111110010111001100100011", 
    98 => "00111101100100111000010101100011", 
    99 => "10111101001110010001110110110110", 
    100 => "10111101100010100111110001101011", 
    101 => "10111110000001000001100001000111", 
    102 => "10111101101010010010001001100000", 
    103 => "10111100100010110000000110110001", 
    104 => "00111110000010101001000101011001", 
    105 => "10111101111011001101101110000000", 
    106 => "00111110001010000100011110110101", 
    107 => "10111101100100011100011101111111", 
    108 => "00111101101010101011010101000100", 
    109 => "00111101011000011010011001011010", 
    110 => "00111100110101010101010100010110", 
    111 => "10111101100000111011110010000110", 
    112 => "00111101000010000101110001010100", 
    113 => "00111100101100000001011001100011", 
    114 => "00111101010010010110100100000110", 
    115 => "10111101101001011110000111001010", 
    116 => "10111100111011000001101011001110", 
    117 => "00111101010001101001111011010110", 
    118 => "00111110000010111100111101111010", 
    119 => "10111101100011101001111010010110", 
    120 => "10111101101011101110000101000110", 
    121 => "00111101101010001000011111001110", 
    122 => "00111101101010110011101111110100", 
    123 => "00111100111001000000101000101011", 
    124 => "10111101111000010110011110101011", 
    125 => "10111101110010010100111111011100", 
    126 => "00111101011100011010101001010110", 
    127 => "10111101011001000000000001100011", 
    128 => "00111101010001010000011011100111", 
    129 => "10111110101000110101000111101010", 
    130 => "00111100101110111011001010001101", 
    131 => "10111011101101010000001110000011", 
    132 => "00111101111111100111100101001110", 
    133 => "10111110011100101110100010100111", 
    134 => "00111100110100001000111001000000", 
    135 => "00111101101001100000000111011000", 
    136 => "00111101111101011101111011111100", 
    137 => "10111110011110001001110111101001", 
    138 => "10111101101100110101100001111111", 
    139 => "10111101100100000010111010000000", 
    140 => "00111101010001001011110010000101", 
    141 => "10111100101100010011101100100010", 
    142 => "00111101100100011110111000011000", 
    143 => "10111101011111001100010001010001", 
    144 => "10111101101011010100110011111011", 
    145 => "10111101100110110110111101110101", 
    146 => "10111110100110001110111100000111", 
    147 => "00111101100001110000101111110110", 
    148 => "00111101001011101110010100010000", 
    149 => "00111101011000100111110001001101", 
    150 => "10111100101011010010001101001011", 
    151 => "00111011110010100110110001110010", 
    152 => "00111101001011111111101010000110", 
    153 => "10111011001100100110101010110001", 
    154 => "10111110010000101010000110101110", 
    155 => "00111101010110111010000111100011", 
    156 => "00111100111101110111101011000010", 
    157 => "10111100110000100100110111010110", 
    158 => "10111110010011110110101000101110", 
    159 => "10111101010000001010011101011001", 
    160 => "10111110011110000001100010101001", 
    161 => "10111101010111011011101111010111", 
    162 => "10111110001100000001010010011001", 
    163 => "10111110100011001000011101110101", 
    164 => "10111100111011111100001000000111", 
    165 => "00111110010000000110011110100010", 
    166 => "00111101101100110011101111101000", 
    167 => "00111100110101101000010111001111", 
    168 => "00111101010011000001001101000010", 
    169 => "00111100000001001000011011001011", 
    170 => "00111101011110010000000111010110", 
    171 => "10111100110111010101111111001110", 
    172 => "00111101010111010001100010110100", 
    173 => "10111110010000101000000111111110", 
    174 => "00111101101101011010001111111101", 
    175 => "10111101101010110100000100101101", 
    176 => "00111011111001000010100101111010", 
    177 => "00111101110010111011111111011000", 
    178 => "00111100100110101100111111101011", 
    179 => "10111101101010010110000001000111", 
    180 => "00111101101111011011011000101100", 
    181 => "00111101101110001000110000111001", 
    182 => "00111100111000010111101110110001", 
    183 => "10111110001001011111101001001100", 
    184 => "10111101000100000001000111110100", 
    185 => "00111100100011101111001011000010", 
    186 => "00111110001110110111010011011011", 
    187 => "00111101010111010011000010101001", 
    188 => "10111101100100011101100100010000", 
    189 => "10111101100100001100100100010110", 
    190 => "00111101011001101000101110110110", 
    191 => "10111100111011110001111111100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibvn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibvn is
    component conv_2_conv_2_weibvn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibvn_rom_U :  component conv_2_conv_2_weibvn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


