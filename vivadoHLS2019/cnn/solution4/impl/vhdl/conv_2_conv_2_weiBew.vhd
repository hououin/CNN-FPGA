-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiBew_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiBew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010111000011000000001", 
    1 => "10111110010110010111101110100100", 
    2 => "10111101100011101101110100000110", 
    3 => "00111101000010010100001101010111", 
    4 => "10111100111101010010001011000000", 
    5 => "10111110001001100001110000110011", 
    6 => "10111101011101001010000100101010", 
    7 => "10111110000110111010011011110110", 
    8 => "00111110001111010101111101101111", 
    9 => "10111110010001101001000000011001", 
    10 => "10111101011011010011111011001000", 
    11 => "10111110010001011011100001000110", 
    12 => "10111101010101010010110011011011", 
    13 => "10111101000101000001011111010000", 
    14 => "00111110011001011010100001100111", 
    15 => "10111101010000011010001011010010", 
    16 => "10111110011001001111100110101100", 
    17 => "00111110000100000110000010001100", 
    18 => "00111101101111111010010101101000", 
    19 => "10111011100010011111011100001010", 
    20 => "10111110010011110111001100100111", 
    21 => "10111100100100011100100010101110", 
    22 => "10111110001101111000001110101011", 
    23 => "10111110000100000101010011001100", 
    24 => "10111101001110001011111111101110", 
    25 => "00111110000000101111010000110001", 
    26 => "00111100011001011010001110110011", 
    27 => "00111101110110001011110011010011", 
    28 => "00111100110010011010011000011100", 
    29 => "00111101101101100100011010000100", 
    30 => "10111101010011100110110111111100", 
    31 => "10111100101011001100101001101100", 
    32 => "10111101000101110001001010011111", 
    33 => "10111110011110111000101110110110", 
    34 => "10111101101101110000100001010110", 
    35 => "00111110001110010100110110111100", 
    36 => "10111110001001100110100001011110", 
    37 => "00111100000000110010000000000011", 
    38 => "00111101010010011010011000000101", 
    39 => "00111100111110110011000101001011", 
    40 => "00111100110101001111001110000000", 
    41 => "00111101100110111110011101001101", 
    42 => "10111110010100111000010101001000", 
    43 => "00111101111101001011001001101101", 
    44 => "00111100101101010010011011100100", 
    45 => "10111110001111100101100010000100", 
    46 => "10111100100000010100111111000101", 
    47 => "00111110000001111111101000000010", 
    48 => "10111110011001010101100100001111", 
    49 => "10111110111001110011111101110001", 
    50 => "10111110011111100001110100010101", 
    51 => "10111101010110110101011111011011", 
    52 => "10111110101000010100010001101110", 
    53 => "00111110000011001011001111101000", 
    54 => "00111101011001101000100000010101", 
    55 => "10111110010101010111000011111011", 
    56 => "00111101000110001010111100111011", 
    57 => "10111101111011101100011010100000", 
    58 => "00111101100100011101101110010111", 
    59 => "10111100101100011111001000001110", 
    60 => "00111101100001110000101101111000", 
    61 => "00111101101010000110001011000111", 
    62 => "00111101111011111001100001011110", 
    63 => "00111101100110111100000111101110", 
    64 => "10111110000001011110011110010011", 
    65 => "10111101111001111000001111010001", 
    66 => "00111101001100001111101000101011", 
    67 => "10111110001000010101100000010101", 
    68 => "10111110001000100101111111011110", 
    69 => "10111110001110010100001100000010", 
    70 => "10111110110000001101110001010001", 
    71 => "10111101101001000010001010110100", 
    72 => "00111101101010000111010111101110", 
    73 => "10111101010111010000100011011100", 
    74 => "00111011110001011110000100110110", 
    75 => "10111100001101111111100010111110", 
    76 => "10111110011011100010001011111110", 
    77 => "10111110110000011011101101101001", 
    78 => "00111110010110110000010101001101", 
    79 => "00111101100100101111010011110111", 
    80 => "10111110100101100011011000101101", 
    81 => "10111110000010001101101111111110", 
    82 => "10111110100011000110110000000101", 
    83 => "10111101011110001001000111101011", 
    84 => "10111110100001101001010111111001", 
    85 => "10111100011001001010110001011001", 
    86 => "10111110100101000010001001100011", 
    87 => "00111011101100101111111101110110", 
    88 => "10111110010101001000100010000010", 
    89 => "10111101111110100110111111100011", 
    90 => "10111101100100000101110000010000", 
    91 => "00111101111101111000010001000101", 
    92 => "10111011100011011111001100000111", 
    93 => "00111100110111100110101011011100", 
    94 => "10111110000000010110001110000001", 
    95 => "00111011100001100010111011101110", 
    96 => "10111110100001000100110100011011", 
    97 => "10111110100001001111101110001011", 
    98 => "10111101011100011011111101010001", 
    99 => "10111011010010111001011110010010", 
    100 => "10111110100101110001010011101110", 
    101 => "00111101100101011110111100110010", 
    102 => "10111101010101101010101111010001", 
    103 => "00111101011001101101011001111111", 
    104 => "00111101001100010111101001101111", 
    105 => "10111110000000101000000111001011", 
    106 => "10111110110100010010101001010010", 
    107 => "10111101001011100001010100110001", 
    108 => "10111100100111111101101110000101", 
    109 => "10111101101011101101010111100101", 
    110 => "00111101010011010100111000010110", 
    111 => "00111110001010011110100001100010", 
    112 => "10111110000100100110001100111110", 
    113 => "10111110100011001101000001001000", 
    114 => "10111110110010111011100101111000", 
    115 => "00111010100001010000100101000011", 
    116 => "10111110001011001000001001011110", 
    117 => "00111110000000101110000110011101", 
    118 => "00111110001010010010111110000100", 
    119 => "10111101111100100011110011000111", 
    120 => "10111101011100100010001001111010", 
    121 => "10111110001000110110110100100000", 
    122 => "00111110001010001111001110011011", 
    123 => "10111110001000101100000101101010", 
    124 => "10111101100111101011110001100001", 
    125 => "10111101010010001101010000011110", 
    126 => "10111110000101111111011111100011", 
    127 => "10111101100100110000101000110110", 
    128 => "10111101100000111000001111000010", 
    129 => "00111110001111101101100000101011", 
    130 => "00111110001010011001000011101000", 
    131 => "10111101001101000000101010101100", 
    132 => "10111111000011101000000110110011", 
    133 => "10111101001001000111100011100001", 
    134 => "10111110101000000110110101010010", 
    135 => "10111110000100011010001010100111", 
    136 => "10111110100000000101000010100111", 
    137 => "10111010001011101111111000110101", 
    138 => "00111011101010011001010001100001", 
    139 => "10111100110100110110100001111100", 
    140 => "10111110110010000001110111101000", 
    141 => "10111110010000111010110000000010", 
    142 => "10111101101010110000110000100001", 
    143 => "10111101011011110000111111111000", 
    144 => "00111101100110101000001010010000", 
    145 => "10111101110001001010011110100111", 
    146 => "10111100011010011011100000010000", 
    147 => "00111101101001001100000111010001", 
    148 => "10111110100101101111010010110111", 
    149 => "00111110000010110110110011010000", 
    150 => "10111101111011001110011111100001", 
    151 => "10111101100110011110011110000010", 
    152 => "10111110100001000100111011010000", 
    153 => "10111110010110101000011100000011", 
    154 => "10111011001101011000001000001110", 
    155 => "10111101111000101000011110000100", 
    156 => "00111100110011001110011110010010", 
    157 => "00111101111010110001110100110011", 
    158 => "10111110000011001011110011010100", 
    159 => "00111100001110111011010110011000", 
    160 => "10111110011001110010000000101100", 
    161 => "10111011010101111010100111100001", 
    162 => "10111110001011000110110101100001", 
    163 => "10111110011111101100110110001111", 
    164 => "00111110000101100010100100000110", 
    165 => "10111101010101101000011001000010", 
    166 => "10111100100001110111000110010100", 
    167 => "10111110010011111011010001100001", 
    168 => "10111101010011001001010001111010", 
    169 => "10111110001100011101110100100101", 
    170 => "10111101110011001100101110101101", 
    171 => "10111110010100000101010001010110", 
    172 => "00111101010001100010010110100011", 
    173 => "10111110010010101010101111001000", 
    174 => "00111101101011011011001110011110", 
    175 => "00111101011010110001001000001000", 
    176 => "00111101111011011111000101111100", 
    177 => "10111101111010010001010000101001", 
    178 => "10111110111010000011011100010010", 
    179 => "10111011001111101111000111001010", 
    180 => "00111110001111001101110011101110", 
    181 => "10111101100001010111000101011000", 
    182 => "00111110011101100111000000010100", 
    183 => "00111100011001101000000110000010", 
    184 => "00111100110000001110011111100000", 
    185 => "10111101001010010101110001101001", 
    186 => "00111110000010011101110100101101", 
    187 => "00111101110101001100100011010001", 
    188 => "10111110100001001100010001001111", 
    189 => "10111110011111110010110110110100", 
    190 => "10111110001100010001000010000010", 
    191 => "10111110100010100110000000011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiBew is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiBew is
    component conv_2_conv_2_weiBew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiBew_rom_U :  component conv_2_conv_2_weiBew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


