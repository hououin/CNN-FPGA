-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiqcK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiqcK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110011001011000101101", 
    1 => "10111110001100000100101010011010", 
    2 => "10111110010000101010010010010100", 
    3 => "00111110001110011001100110000110", 
    4 => "00111110010001001100001111101010", 
    5 => "10111100111011010011000000010010", 
    6 => "10111110100100001110001000100110", 
    7 => "00111110110011000100101010010010", 
    8 => "10111101011100110101101110100111", 
    9 => "00111101101111001011010111111010", 
    10 => "10111101111100010111110000101110", 
    11 => "10111101001110110000101011001100", 
    12 => "10111110100011011011110110001000", 
    13 => "10111101101100010001101011010011", 
    14 => "10111101101010110110000010001011", 
    15 => "00111101100010011110111110101000", 
    16 => "10111100110010101111111100000101", 
    17 => "10111101000101011000110011011000", 
    18 => "10111110100101111010110010011000", 
    19 => "00111110010111110100010011001000", 
    20 => "00111100011000011011100011100000", 
    21 => "10111110001011110010111111011100", 
    22 => "10111110010111010001111011110100", 
    23 => "00111110100101111001000111110101", 
    24 => "10111110101010101010010110111000", 
    25 => "00111100111101110000100011111100", 
    26 => "00111110011000101101010110100100", 
    27 => "10111110101000001010110001101111", 
    28 => "10111010000111000010011110110110", 
    29 => "10111110001011100111010110110000", 
    30 => "10111110110001001111000111001010", 
    31 => "00111110001001010010010111011111", 
    32 => "10111110010010100110000001011101", 
    33 => "00111101100101110110011100100011", 
    34 => "10111100000001100111100011000000", 
    35 => "10111101000000101110110010111011", 
    36 => "00111110011011111001100011100101", 
    37 => "10111101101011110001110111100110", 
    38 => "10111110010101101111110100111110", 
    39 => "00111101011011111100000100011011", 
    40 => "10111110100101110001010110010010", 
    41 => "10111101100011100001100001011011", 
    42 => "00111101111111100110100000100111", 
    43 => "00111110100110110111011011011001", 
    44 => "00111110010110010101101010000000", 
    45 => "10111110001010011001010110111100", 
    46 => "10111101100001111110110110001101", 
    47 => "10111101111100110101000110101100", 
    48 => "00111101001111110100110100000101", 
    49 => "10111101111011010001000100110110", 
    50 => "10111110100001110110101001100111", 
    51 => "10111100100000000011101011010101", 
    52 => "10111101101001011000011001101110", 
    53 => "00111101001110000011001111101110", 
    54 => "10111101010111111001000001011110", 
    55 => "10111110100001010100110001010101", 
    56 => "10111101101111101010101011001111", 
    57 => "00111101100101000101011001010100", 
    58 => "10111100010000010000010100100110", 
    59 => "10111110100000100101111100111111", 
    60 => "10111100111110110011000001010001", 
    61 => "00111110010100110000111101000001", 
    62 => "00111110001010100010100101011001", 
    63 => "00111110000000100000010010011110", 
    64 => "10111110001011000001101011001000", 
    65 => "00111100011100011001111101101100", 
    66 => "10111110001100000110001001100101", 
    67 => "10111101100000001010110101110111", 
    68 => "10111101100111110100001001001110", 
    69 => "10111110011010111011111011101111", 
    70 => "10111110001001101111010010101101", 
    71 => "00111101101110101100001010010011", 
    72 => "00111011010011010111101100110001", 
    73 => "00111101011110001001000000011011", 
    74 => "10111110110101100110100010011110", 
    75 => "10111110001111011100000000010001", 
    76 => "10111110010111111100001100111101", 
    77 => "00111101101101110010000100001100", 
    78 => "00111011011101110010111000100001", 
    79 => "00111100100001110110010111100100", 
    80 => "00111101100100111100100101010000", 
    81 => "10111100000110010011010001010010", 
    82 => "00111101101000111111101111000110", 
    83 => "00111100011010001110011001111001", 
    84 => "10111110000100000100000100110010", 
    85 => "10111100000110011000011000111100", 
    86 => "00111100011101111011010001001011", 
    87 => "10111101001010111110010011010001", 
    88 => "10111101000101111110111011100100", 
    89 => "10111110100011001011111100011011", 
    90 => "00111101101011001010110111111111", 
    91 => "10111110011010010100101101010011", 
    92 => "00111110010011110100110001000110", 
    93 => "10111101100111100001110000100100", 
    94 => "10111110000100101101101111111100", 
    95 => "00111110001011011110111011110101", 
    96 => "10111110010110011000100010010100", 
    97 => "00111110011110001110111111001011", 
    98 => "10111110001110100011101010000000", 
    99 => "10111110110101010110111100110001", 
    100 => "10111101001100111111110010010010", 
    101 => "10111110010111010101101001100010", 
    102 => "10111110000010101010110000001111", 
    103 => "10111110000100100010000110011001", 
    104 => "10111101100100010011001010011100", 
    105 => "10111101111100110001001110110000", 
    106 => "00111110000110011111010110001111", 
    107 => "00111100111101101110101001110110", 
    108 => "10111101101100111010010100101010", 
    109 => "10111111000001010010111000000100", 
    110 => "10111110000100011000111011000011", 
    111 => "10111110010100001111111111100000", 
    112 => "00111011100111111011111101100001", 
    113 => "10111101111011101110010111000100", 
    114 => "10111110001110001010111010110100", 
    115 => "10111110011001001111111010010011", 
    116 => "00111101101010000000100100100111", 
    117 => "10111101110010010001010111101100", 
    118 => "10111101110100111100101011101011", 
    119 => "00111110100010000000101010110111", 
    120 => "00111100100101101011011111010001", 
    121 => "00111100100011000010001100010011", 
    122 => "10111100111100100101011011000001", 
    123 => "00111101010010001001001110100101", 
    124 => "10111110100110110011010001000100", 
    125 => "00111101111000010001100111110111", 
    126 => "10111110100111100001111101101111", 
    127 => "10111110000010100110001000001110", 
    128 => "10111110100101000111111011101111", 
    129 => "00111110100100000000111111001110", 
    130 => "10111100110111111010000101110111", 
    131 => "00111101011000101111010101100011", 
    132 => "00111011000000011100110111111000", 
    133 => "10111111000100011010010111010111", 
    134 => "10111110000000100011010110000100", 
    135 => "10111101010100100000111110100101", 
    136 => "10111110010100101100011000000000", 
    137 => "10111110011000111110100000110011", 
    138 => "10111101111111101110001010111100", 
    139 => "10111110011000100010011100110010", 
    140 => "10111110010001011111111100111101", 
    141 => "00111110001010111100011010001000", 
    142 => "00111101000011111100100011111100", 
    143 => "10111110010001000110111100001001", 
    144 => "00111100001000010000011000101110", 
    145 => "10111110010010001101010000111000", 
    146 => "00111101110111010000100101010001", 
    147 => "00111100000001000011011111111010", 
    148 => "00111101101001101010011101000101", 
    149 => "00111101000010001110110110111011", 
    150 => "00111110010000000011001100101100", 
    151 => "00111101100010101011110110110011", 
    152 => "10111101111111011101100000011001", 
    153 => "10111110010101011001001011001001", 
    154 => "10111101110101010100000000000010", 
    155 => "10111101100011010101101110111011", 
    156 => "10111100100010011100010011100010", 
    157 => "10111110101000011001111000001110", 
    158 => "10111101010100100000100101110000", 
    159 => "00111101111101000101011111010001", 
    160 => "10111101000011111010000010000101", 
    161 => "10111100100001010001001100001101", 
    162 => "10111110110010011010010000101011", 
    163 => "00111101010111000011111000001110", 
    164 => "00111101001000000100010001001000", 
    165 => "10111110110111011110011100100101", 
    166 => "00111110010110010010000110000011", 
    167 => "00111100110100101001011001011110", 
    168 => "10111101101101010101110011100110", 
    169 => "10111110001101000110010000100000", 
    170 => "10111101010011110100111110011011", 
    171 => "00111110001110110111111001111111", 
    172 => "00111101101001011001001011011011", 
    173 => "00111101110110011110111100011001", 
    174 => "00111011100100000101100100111001", 
    175 => "10111101111001100101011101101011", 
    176 => "00111110000110011001110100111011", 
    177 => "00111101101011111100100110011110", 
    178 => "10111110001111011000010000001111", 
    179 => "10111111001000100111110111011001", 
    180 => "00111110101000000100010010100110", 
    181 => "10111101011110101110011111101101", 
    182 => "10111110011011000011001110100000", 
    183 => "00111010011000100110001101101010", 
    184 => "00111110000010101001101111000111", 
    185 => "10111110011111111000000010110001", 
    186 => "10111110110000000101101101011100", 
    187 => "10111110010101010011011010101111", 
    188 => "10111101111000111001001010100000", 
    189 => "10111110011101011110000101110000", 
    190 => "00111101000011111001010101100110", 
    191 => "00111101110110100011000011000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiqcK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiqcK is
    component conv_2_conv_2_weiqcK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiqcK_rom_U :  component conv_2_conv_2_weiqcK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


