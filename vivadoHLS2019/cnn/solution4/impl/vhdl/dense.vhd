-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_EN_A : OUT STD_LOGIC;
    prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    flat_array_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    flat_array_ce0 : OUT STD_LOGIC;
    flat_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv14_3E80 : STD_LOGIC_VECTOR (13 downto 0) := "11111010000000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv11_640 : STD_LOGIC_VECTOR (10 downto 0) := "11001000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_weights_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_weights_ce0 : STD_LOGIC;
    signal dense_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten_reg_116 : STD_LOGIC_VECTOR (13 downto 0);
    signal d_0_reg_127 : STD_LOGIC_VECTOR (3 downto 0);
    signal w_sum_0_reg_138 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_0_reg_150 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln29_fu_180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_reg_292 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln29_reg_292_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln29_fu_186_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln29_reg_296 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln33_fu_198_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln35_1_fu_204_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_1_reg_306 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln35_2_fu_212_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_reg_311 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln35_2_reg_311_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal f_fu_270_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_reg_337 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln33_1_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_168_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_ce0 : STD_LOGIC;
    signal dense_array_we0 : STD_LOGIC;
    signal dense_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_161_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_161_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_161_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_161_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_161_dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_161_dense_array_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_161_prediction_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_161_prediction_EN_A : STD_LOGIC;
    signal grp_soft_max_fu_161_prediction_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_161_prediction_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_120_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_d_0_phi_fu_131_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_f_0_phi_fu_154_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_soft_max_fu_161_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal zext_ln35_9_fu_265_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_3_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_288_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal grp_fu_168_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_192_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_25_fu_229_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_26_fu_241_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln35_8_fu_249_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln35_7_fu_237_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln35_fu_253_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln34_fu_220_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln35_4_fu_259_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_ce0 : OUT STD_LOGIC;
        dense_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_EN_A : OUT STD_LOGIC;
        prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fadd_32ns_32nkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32nlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_dense_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_dense_array IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_weights_U : component dense_dense_weights
    generic map (
        DataWidth => 32,
        AddressRange => 16000,
        AddressWidth => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_weights_address0,
        ce0 => dense_weights_ce0,
        q0 => dense_weights_q0);

    dense_array_U : component dense_dense_array
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_address0,
        ce0 => dense_array_ce0,
        we0 => dense_array_we0,
        d0 => grp_fu_168_p2,
        q0 => dense_array_q0);

    grp_soft_max_fu_161 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_161_ap_start,
        ap_done => grp_soft_max_fu_161_ap_done,
        ap_idle => grp_soft_max_fu_161_ap_idle,
        ap_ready => grp_soft_max_fu_161_ap_ready,
        dense_array_address0 => grp_soft_max_fu_161_dense_array_address0,
        dense_array_ce0 => grp_soft_max_fu_161_dense_array_ce0,
        dense_array_q0 => dense_array_q0,
        prediction_Addr_A => grp_soft_max_fu_161_prediction_Addr_A,
        prediction_EN_A => grp_soft_max_fu_161_prediction_EN_A,
        prediction_WEN_A => grp_soft_max_fu_161_prediction_WEN_A,
        prediction_Din_A => grp_soft_max_fu_161_prediction_Din_A,
        prediction_Dout_A => ap_const_lv32_0);

    cnn_fadd_32ns_32nkbM_U145 : component cnn_fadd_32ns_32nkbM
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_168_p0,
        din1 => grp_fu_173_p2,
        ce => ap_const_logic_1,
        dout => grp_fu_168_p2);

    cnn_fmul_32ns_32nlbW_U146 : component cnn_fmul_32ns_32nlbW
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_weights_q0,
        din1 => flat_array_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_173_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_161_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_161_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_soft_max_fu_161_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_161_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_161_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_127_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                d_0_reg_127 <= select_ln35_2_reg_311;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_0_reg_127 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_150 <= f_reg_337;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_150 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_116 <= add_ln29_reg_296;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_116 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln29_reg_292_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                w_sum_0_reg_138 <= grp_fu_168_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_0_reg_138 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln29_reg_296 <= add_ln29_fu_186_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                f_reg_337 <= f_fu_270_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln29_reg_292 <= icmp_ln29_fu_180_p2;
                icmp_ln29_reg_292_pp0_iter1_reg <= icmp_ln29_reg_292;
                select_ln35_2_reg_311_pp0_iter1_reg <= select_ln35_2_reg_311;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln33_1_reg_353 <= icmp_ln33_1_fu_283_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_fu_180_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln33_reg_301 <= icmp_ln33_fu_198_p2;
                select_ln35_1_reg_306 <= select_ln35_1_fu_204_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln29_fu_180_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln35_2_reg_311 <= select_ln35_2_fu_212_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln29_fu_180_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone, grp_soft_max_fu_161_ap_done, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln29_fu_180_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln29_fu_180_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_soft_max_fu_161_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln29_fu_186_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_120_p4) + unsigned(ap_const_lv14_1));
    add_ln35_4_fu_259_p2 <= std_logic_vector(unsigned(add_ln35_fu_253_p2) + unsigned(zext_ln34_fu_220_p1));
    add_ln35_fu_253_p2 <= std_logic_vector(unsigned(zext_ln35_8_fu_249_p1) + unsigned(zext_ln35_7_fu_237_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(4);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln29_fu_180_p2)
    begin
        if ((icmp_ln29_fu_180_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_161_ap_done, ap_CS_fsm_state7)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_soft_max_fu_161_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_d_0_phi_fu_131_p4_assign_proc : process(d_0_reg_127, icmp_ln29_reg_292, ap_CS_fsm_pp0_stage0, select_ln35_2_reg_311, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_d_0_phi_fu_131_p4 <= select_ln35_2_reg_311;
        else 
            ap_phi_mux_d_0_phi_fu_131_p4 <= d_0_reg_127;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_154_p4_assign_proc : process(f_0_reg_150, icmp_ln29_reg_292, ap_CS_fsm_pp0_stage0, f_reg_337, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_154_p4 <= f_reg_337;
        else 
            ap_phi_mux_f_0_phi_fu_154_p4 <= f_0_reg_150;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_120_p4_assign_proc : process(indvar_flatten_reg_116, icmp_ln29_reg_292, ap_CS_fsm_pp0_stage0, add_ln29_reg_296, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln29_reg_292 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_120_p4 <= add_ln29_reg_296;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_120_p4 <= indvar_flatten_reg_116;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_soft_max_fu_161_ap_done, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (grp_soft_max_fu_161_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_192_p2 <= std_logic_vector(unsigned(ap_phi_mux_d_0_phi_fu_131_p4) + unsigned(ap_const_lv4_1));

    dense_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, grp_soft_max_fu_161_dense_array_address0, ap_CS_fsm_state7, zext_ln35_fu_288_p1, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            dense_array_address0 <= zext_ln35_fu_288_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_address0 <= grp_soft_max_fu_161_dense_array_address0;
        else 
            dense_array_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1, grp_soft_max_fu_161_dense_array_ce0, ap_CS_fsm_state7)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dense_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_array_ce0 <= grp_soft_max_fu_161_dense_array_ce0;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln33_1_reg_353, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln33_1_reg_353 = ap_const_lv1_1))) then 
            dense_array_we0 <= ap_const_logic_1;
        else 
            dense_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_weights_address0 <= zext_ln35_9_fu_265_p1(14 - 1 downto 0);

    dense_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_weights_ce0 <= ap_const_logic_1;
        else 
            dense_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_270_p2 <= std_logic_vector(unsigned(select_ln35_1_reg_306) + unsigned(ap_const_lv11_1));
    flat_array_address0 <= zext_ln35_3_fu_224_p1(11 - 1 downto 0);

    flat_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            flat_array_ce0 <= ap_const_logic_1;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_168_p0 <= 
        ap_const_lv32_0 when (icmp_ln33_reg_301(0) = '1') else 
        w_sum_0_reg_138;
    grp_soft_max_fu_161_ap_start <= grp_soft_max_fu_161_ap_start_reg;
    icmp_ln29_fu_180_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_120_p4 = ap_const_lv14_3E80) else "0";
    icmp_ln33_1_fu_283_p2 <= "1" when (f_reg_337 = ap_const_lv11_640) else "0";
    icmp_ln33_fu_198_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_154_p4 = ap_const_lv11_640) else "0";
    prediction_Addr_A <= grp_soft_max_fu_161_prediction_Addr_A;
    prediction_Din_A <= grp_soft_max_fu_161_prediction_Din_A;
    prediction_EN_A <= grp_soft_max_fu_161_prediction_EN_A;
    prediction_WEN_A <= grp_soft_max_fu_161_prediction_WEN_A;
    select_ln35_1_fu_204_p3 <= 
        ap_const_lv11_0 when (icmp_ln33_fu_198_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_154_p4;
    select_ln35_2_fu_212_p3 <= 
        d_fu_192_p2 when (icmp_ln33_fu_198_p2(0) = '1') else 
        ap_phi_mux_d_0_phi_fu_131_p4;
    tmp_25_fu_229_p3 <= (select_ln35_1_fu_204_p3 & ap_const_lv3_0);
    tmp_26_fu_241_p3 <= (select_ln35_1_fu_204_p3 & ap_const_lv1_0);
    zext_ln34_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_fu_212_p3),15));
    zext_ln35_3_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_1_fu_204_p3),64));
    zext_ln35_7_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_229_p3),15));
    zext_ln35_8_fu_249_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_241_p3),15));
    zext_ln35_9_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_4_fu_259_p2),64));
    zext_ln35_fu_288_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln35_2_reg_311_pp0_iter1_reg),64));
end behav;
