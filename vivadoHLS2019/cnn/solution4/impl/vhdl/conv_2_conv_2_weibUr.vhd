-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibUr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 8; 
             MEM_SIZE    : integer := 192
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibUr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100101100000111101010", 
    1 => "10111101100101101101111100101001", 
    2 => "10111100111111011010100011011010", 
    3 => "10111101110000001100100001100011", 
    4 => "00111101111010111000110001010100", 
    5 => "10111010100011101011101111111010", 
    6 => "10111101100000011101001111110001", 
    7 => "00111110000001110111111000000111", 
    8 => "10111101011101101111101000010010", 
    9 => "00111100000110101011100111011110", 
    10 => "00111101011000001011100000111000", 
    11 => "00111100110100101100001000101011", 
    12 => "00111101000100011010001111100101", 
    13 => "10111101000000011111011100001011", 
    14 => "10111101101101001010011001011100", 
    15 => "10111101101010110100111010010000", 
    16 => "10111010110000001000001011111110", 
    17 => "10111101111110000011010111111001", 
    18 => "10111101001011001010101000000100", 
    19 => "00111100001111010101011001001111", 
    20 => "10111101110100110010110010010101", 
    21 => "00111100100011011000010010100111", 
    22 => "10111100111001001110001100001101", 
    23 => "10111100011100001110011111100001", 
    24 => "10111101100000011011101001001110", 
    25 => "10111101101101110100101100100011", 
    26 => "10111101111010011111010000101101", 
    27 => "10111110101101011000101011010001", 
    28 => "10111110000100110010110101100100", 
    29 => "00111101110110100100001100101011", 
    30 => "00111101100100110100101100010010", 
    31 => "10111110010101011110001110100000", 
    32 => "00111101010011111111101010000000", 
    33 => "00111100011100111001001101110001", 
    34 => "00111100110110100101111100101001", 
    35 => "10111101111100001110011110000100", 
    36 => "10111110011111011100100000000101", 
    37 => "10111101100011010011101011000011", 
    38 => "10111101110101100111000110000011", 
    39 => "10111101001001101110100101110010", 
    40 => "10111100101101010000001110011101", 
    41 => "10111110000010011011000010111001", 
    42 => "00111100100101100111001111000000", 
    43 => "00111100100000111111110101010111", 
    44 => "10111100001110011111000110100010", 
    45 => "10111110000001011000001001101011", 
    46 => "10111110001111000101001100000001", 
    47 => "10111101010001000101110111000001", 
    48 => "10111101101001011110110010100110", 
    49 => "10111110011111010110111010100011", 
    50 => "10111101101011001001110110111011", 
    51 => "00111101011101001110011000110000", 
    52 => "10111110010100010101010010111111", 
    53 => "10111101000111100100011011001100", 
    54 => "10111110001110110011000100110100", 
    55 => "00111100101010010011110000010001", 
    56 => "10111101101101000010000111100010", 
    57 => "00111100011010101011110011010110", 
    58 => "10111101110111110101001110111000", 
    59 => "00111101010101001011110101000001", 
    60 => "10111101000110101000000100011011", 
    61 => "00111101000100100000000111010000", 
    62 => "00111101110011111101101100111000", 
    63 => "00111100100100111010110000001011", 
    64 => "10111101001101000001100100011000", 
    65 => "00111101100101100011000010011010", 
    66 => "10111101100000110101011101000111", 
    67 => "00111110000000101110000110000110", 
    68 => "00111101110000101011010001001111", 
    69 => "10111101000110111101111111011001", 
    70 => "00111101100001101111101000001010", 
    71 => "00111010000110100111111100010001", 
    72 => "10111101101101011110111101001100", 
    73 => "10111101001110001111001010011000", 
    74 => "10111110001010010001100001000010", 
    75 => "10111100011111111110010000010111", 
    76 => "00111101101100101110100000000001", 
    77 => "10111101000101010110111110000101", 
    78 => "00111101110111010010011011001001", 
    79 => "10111101001001011001101010100000", 
    80 => "10111100100010100001101111101100", 
    81 => "10111110000001101110010011000000", 
    82 => "10111110000110101001110110000100", 
    83 => "00111101001100100101010010000101", 
    84 => "10111110010101101001010010011101", 
    85 => "00111100101001010110111000100001", 
    86 => "10111101100000100011001111111100", 
    87 => "10111101111011001101100111101101", 
    88 => "10111100101000011111001111101001", 
    89 => "10111100111100000111010011100011", 
    90 => "00111100000011101000000101101110", 
    91 => "00111101100110111101111001101110", 
    92 => "00111110001000110011011010111011", 
    93 => "10111110000000101011000010011111", 
    94 => "00111110000000011110000000001100", 
    95 => "00111101100100101100110100011000", 
    96 => "00111100010001111101110000010101", 
    97 => "00111100110100101001010110010001", 
    98 => "10111101100000110011000101010111", 
    99 => "10111110000100111111101110010010", 
    100 => "10111100111101001101011101111101", 
    101 => "10111101110011011100001111111101", 
    102 => "00111110000100010100100100001100", 
    103 => "10111101001111000111010000010011", 
    104 => "10111101111111011011100111000001", 
    105 => "00111101010110111100110100110111", 
    106 => "00111101100111111011001110101110", 
    107 => "10111101000001100111101101110000", 
    108 => "00111110001011001000011110000110", 
    109 => "00111100111010100010100100110101", 
    110 => "00111101010100010000010010001100", 
    111 => "00111101000000111011100111000010", 
    112 => "10111101010011000001000100100111", 
    113 => "00111101100010111110011110100010", 
    114 => "10111101000101110000100010111110", 
    115 => "10111100100011000111000011111111", 
    116 => "00111100111111001110001100000000", 
    117 => "00111011011111111010010101011110", 
    118 => "00111100111111011110101010100000", 
    119 => "10111101101110100111101011000110", 
    120 => "10111100101010100111010001010001", 
    121 => "00111011100000000000100101110110", 
    122 => "00111101011100000001100010001001", 
    123 => "10111101100010011000011100111010", 
    124 => "10111110000001110100100011010000", 
    125 => "10111110000101000111010110101011", 
    126 => "00111100011100000111010110001101", 
    127 => "10111101100100001101100111101010", 
    128 => "10111101100110100010111000000111", 
    129 => "10111101111101010100001100001000", 
    130 => "10111101010010110001100100100010", 
    131 => "10111101000011100001011101111100", 
    132 => "00111110000100100011101010010011", 
    133 => "10111110100100000111000111011101", 
    134 => "00111110001011000101101101110000", 
    135 => "10111011000001101110101000001000", 
    136 => "10111100110011101011001011100110", 
    137 => "10111110000111001010011000001000", 
    138 => "10111110011010110110100111110010", 
    139 => "10111110000111010100010011001000", 
    140 => "00111110001000001000100100011000", 
    141 => "00111110000100110011011001101001", 
    142 => "00111100101100001110101000011111", 
    143 => "10111101000001101110011100010011", 
    144 => "00111100100111101100111111101100", 
    145 => "10111101101111111101101011011001", 
    146 => "10111100110010110001011011010101", 
    147 => "00111101101000101001110001101100", 
    148 => "00111100101011110110111110001010", 
    149 => "00111100010010101001100010011010", 
    150 => "00111101011010001011111010001110", 
    151 => "00111101100011101011111001001110", 
    152 => "00111110000010101111100110001001", 
    153 => "00111101001101101001101101101100", 
    154 => "10111110010001100001000101000101", 
    155 => "10111101010011000111100101111000", 
    156 => "10111100100000011010000110010010", 
    157 => "10111110001010111110011000101000", 
    158 => "10111101100001001111011100110101", 
    159 => "00111101101010110101001101100001", 
    160 => "10111101010111101011010011010011", 
    161 => "00111100111111101010000000110100", 
    162 => "10111110010110101010010110010011", 
    163 => "10111110011000110000010000011110", 
    164 => "00111110001000010111101110000100", 
    165 => "00111101100011111000111010010100", 
    166 => "00111101111111111101110001011111", 
    167 => "00111011110000101101000111000110", 
    168 => "00111101101001110101110000000110", 
    169 => "00111110001101111000010001001011", 
    170 => "00111101101111000010100011010010", 
    171 => "00111101011000101001111101101100", 
    172 => "10111101011100001010010011110101", 
    173 => "10111101101001000001100101000001", 
    174 => "00111110010010111101100000110010", 
    175 => "00111101010100100110111111001111", 
    176 => "10111101100101000100000111001101", 
    177 => "00111100101111011101011100110100", 
    178 => "00111101110110100011111111111000", 
    179 => "10111101111010110010011001101001", 
    180 => "00111101101000001111000010001000", 
    181 => "10111011100001110001010101101000", 
    182 => "00111101001110010110010011101101", 
    183 => "00111101110101010100000111011000", 
    184 => "10111110001000001010110111110101", 
    185 => "00111101101010011011100111001110", 
    186 => "00111100000001000110001101111010", 
    187 => "10111100111011001010111001010100", 
    188 => "00111101101000000011011110100101", 
    189 => "00111101110011011011100001011111", 
    190 => "10111110001001000000011111110100", 
    191 => "10111101000111110111001111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibUr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 192;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibUr is
    component conv_2_conv_2_weibUr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibUr_rom_U :  component conv_2_conv_2_weibUr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


