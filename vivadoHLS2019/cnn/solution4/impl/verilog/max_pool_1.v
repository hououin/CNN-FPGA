// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_address0,
        conv_out_ce0,
        conv_out_q0,
        conv_out_address1,
        conv_out_ce1,
        conv_out_q1,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [14:0] conv_out_address0;
output   conv_out_ce0;
input  [31:0] conv_out_q0;
output  [14:0] conv_out_address1;
output   conv_out_ce1;
input  [31:0] conv_out_q1;
output  [12:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[14:0] conv_out_address0;
reg conv_out_ce0;
reg[14:0] conv_out_address1;
reg conv_out_ce1;
reg max_pool_out_ce0;
reg max_pool_out_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [12:0] indvar_flatten23_reg_146;
reg   [5:0] f_0_reg_157;
reg   [7:0] indvar_flatten_reg_168;
reg   [3:0] r_0_reg_179;
reg   [3:0] c_0_reg_190;
wire   [0:0] icmp_ln9_fu_226_p2;
reg   [0:0] icmp_ln9_reg_937;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [12:0] add_ln9_fu_232_p2;
reg   [12:0] add_ln9_reg_941;
reg    ap_enable_reg_pp0_iter0;
wire   [5:0] select_ln28_9_fu_258_p3;
reg   [5:0] select_ln28_9_reg_946;
wire   [15:0] zext_ln28_10_fu_266_p1;
reg   [15:0] zext_ln28_10_reg_953;
wire   [3:0] select_ln12_fu_316_p3;
reg   [3:0] select_ln12_reg_958;
wire   [3:0] select_ln12_5_fu_332_p3;
reg   [3:0] select_ln12_5_reg_964;
wire   [4:0] select_ln12_7_fu_364_p3;
reg   [4:0] select_ln12_7_reg_970;
wire   [9:0] zext_ln28_13_fu_380_p1;
reg   [9:0] zext_ln28_13_reg_975;
wire   [9:0] zext_ln28_16_fu_437_p1;
reg   [9:0] zext_ln28_16_reg_985;
wire   [7:0] select_ln12_8_fu_476_p3;
reg   [7:0] select_ln12_8_reg_995;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln28_4_fu_700_p3;
reg   [31:0] select_ln28_4_reg_1010;
wire   [3:0] c_fu_708_p2;
reg   [3:0] c_reg_1017;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [12:0] ap_phi_mux_indvar_flatten23_phi_fu_150_p4;
wire    ap_block_pp0_stage0;
reg   [5:0] ap_phi_mux_f_0_phi_fu_161_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_172_p4;
reg   [3:0] ap_phi_mux_r_0_phi_fu_183_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_194_p4;
wire   [63:0] zext_ln28_14_fu_426_p1;
wire   [63:0] zext_ln28_18_fu_465_p1;
wire   [63:0] zext_ln28_15_fu_533_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_20_fu_611_p1;
wire   [63:0] zext_ln35_6_fu_923_p1;
reg   [31:0] grp_fu_201_p1;
reg   [31:0] grp_fu_207_p1;
wire   [31:0] select_ln28_fu_580_p3;
wire   [31:0] select_ln28_5_fu_802_p3;
wire   [4:0] shl_ln_fu_212_p3;
wire   [0:0] icmp_ln12_fu_244_p2;
wire   [5:0] f_fu_238_p2;
wire   [4:0] or_ln25_fu_220_p2;
wire   [0:0] icmp_ln15_fu_292_p2;
wire   [0:0] xor_ln28_fu_286_p2;
wire   [3:0] select_ln28_8_fu_250_p3;
wire   [0:0] and_ln28_13_fu_298_p2;
wire   [0:0] or_ln12_fu_310_p2;
wire   [3:0] r_fu_304_p2;
wire   [4:0] shl_ln25_mid1_fu_324_p3;
wire   [4:0] select_ln28_10_fu_270_p3;
wire   [4:0] select_ln12_6_fu_340_p3;
wire   [4:0] mul_ln28_fu_352_p1;
wire   [4:0] or_ln25_2_fu_358_p2;
wire   [4:0] select_ln28_11_fu_278_p3;
wire   [4:0] shl_ln2_fu_372_p3;
wire   [9:0] mul_ln28_fu_352_p2;
wire   [9:0] add_ln28_fu_384_p2;
wire   [0:0] trunc_ln28_fu_390_p1;
wire   [5:0] tmp_12_fu_394_p3;
wire   [8:0] tmp_fu_408_p4;
wire   [5:0] or_ln28_13_fu_402_p2;
wire   [14:0] tmp_1_fu_418_p3;
wire   [4:0] or_ln26_fu_431_p2;
wire   [9:0] add_ln28_9_fu_441_p2;
wire   [14:0] tmp_4_fu_447_p3;
wire   [15:0] zext_ln28_17_fu_455_p1;
wire   [15:0] add_ln28_10_fu_459_p2;
wire   [7:0] add_ln12_fu_470_p2;
wire   [4:0] mul_ln28_2_fu_487_p1;
wire   [9:0] mul_ln28_2_fu_487_p2;
wire   [9:0] add_ln28_8_fu_493_p2;
wire   [0:0] trunc_ln28_7_fu_498_p1;
wire   [5:0] tmp_23_fu_502_p3;
wire   [8:0] tmp_2_fu_515_p4;
wire   [5:0] or_ln28_14_fu_510_p2;
wire   [14:0] tmp_3_fu_525_p3;
wire   [31:0] bitcast_ln28_fu_538_p1;
wire   [7:0] tmp_s_fu_542_p4;
wire   [22:0] trunc_ln28_8_fu_552_p1;
wire   [0:0] icmp_ln28_14_fu_562_p2;
wire   [0:0] icmp_ln28_fu_556_p2;
wire   [0:0] or_ln28_fu_568_p2;
wire   [0:0] grp_fu_201_p2;
wire   [0:0] and_ln28_fu_574_p2;
wire   [9:0] add_ln28_11_fu_589_p2;
wire   [14:0] tmp_5_fu_594_p3;
wire   [15:0] zext_ln28_19_fu_602_p1;
wire   [15:0] add_ln28_12_fu_606_p2;
wire   [31:0] bitcast_ln28_7_fu_616_p1;
wire   [31:0] bitcast_ln28_8_fu_634_p1;
wire   [7:0] tmp_14_fu_620_p4;
wire   [22:0] trunc_ln28_9_fu_630_p1;
wire   [0:0] icmp_ln28_16_fu_658_p2;
wire   [0:0] icmp_ln28_15_fu_652_p2;
wire   [7:0] tmp_15_fu_638_p4;
wire   [22:0] trunc_ln28_10_fu_648_p1;
wire   [0:0] icmp_ln28_18_fu_676_p2;
wire   [0:0] icmp_ln28_17_fu_670_p2;
wire   [0:0] or_ln28_7_fu_664_p2;
wire   [0:0] or_ln28_8_fu_682_p2;
wire   [0:0] and_ln28_7_fu_688_p2;
wire   [0:0] grp_fu_207_p2;
wire   [0:0] and_ln28_8_fu_694_p2;
wire   [31:0] bitcast_ln28_9_fu_719_p1;
wire   [31:0] bitcast_ln28_10_fu_737_p1;
wire   [7:0] tmp_17_fu_723_p4;
wire   [22:0] trunc_ln28_11_fu_733_p1;
wire   [0:0] icmp_ln28_20_fu_760_p2;
wire   [0:0] icmp_ln28_19_fu_754_p2;
wire   [7:0] tmp_18_fu_740_p4;
wire   [22:0] trunc_ln28_12_fu_750_p1;
wire   [0:0] icmp_ln28_22_fu_778_p2;
wire   [0:0] icmp_ln28_21_fu_772_p2;
wire   [0:0] or_ln28_9_fu_766_p2;
wire   [0:0] or_ln28_10_fu_784_p2;
wire   [0:0] and_ln28_9_fu_790_p2;
wire   [0:0] and_ln28_10_fu_796_p2;
wire   [31:0] bitcast_ln28_11_fu_810_p1;
wire   [31:0] bitcast_ln28_12_fu_828_p1;
wire   [7:0] tmp_20_fu_814_p4;
wire   [22:0] trunc_ln28_13_fu_824_p1;
wire   [0:0] icmp_ln28_24_fu_852_p2;
wire   [0:0] icmp_ln28_23_fu_846_p2;
wire   [7:0] tmp_21_fu_832_p4;
wire   [22:0] trunc_ln28_14_fu_842_p1;
wire   [0:0] icmp_ln28_26_fu_870_p2;
wire   [0:0] icmp_ln28_25_fu_864_p2;
wire   [0:0] or_ln28_11_fu_858_p2;
wire   [0:0] or_ln28_12_fu_876_p2;
wire   [0:0] and_ln28_11_fu_882_p2;
wire   [0:0] and_ln28_12_fu_888_p2;
wire   [7:0] grp_fu_928_p3;
wire   [12:0] tmp_6_fu_906_p3;
wire   [13:0] zext_ln28_fu_713_p1;
wire   [13:0] zext_ln35_5_fu_913_p1;
wire   [13:0] add_ln35_3_fu_917_p2;
wire   [4:0] grp_fu_928_p0;
wire   [3:0] grp_fu_928_p1;
wire   [3:0] grp_fu_928_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_928_p10;
wire   [7:0] grp_fu_928_p20;
wire   [9:0] mul_ln28_2_fu_487_p10;
wire   [9:0] mul_ln28_fu_352_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_fcmp_32ns_32nmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nmb6_U23(
    .din0(conv_out_q0),
    .din1(grp_fu_201_p1),
    .opcode(5'd2),
    .dout(grp_fu_201_p2)
);

cnn_fcmp_32ns_32nmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nmb6_U24(
    .din0(conv_out_q1),
    .din1(grp_fu_207_p1),
    .opcode(5'd2),
    .dout(grp_fu_207_p2)
);

cnn_mac_muladd_5nocq #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_5nocq_U25(
    .din0(grp_fu_928_p0),
    .din1(grp_fu_928_p1),
    .din2(grp_fu_928_p2),
    .dout(grp_fu_928_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_190 <= c_reg_1017;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_190 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_157 <= select_ln28_9_reg_946;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_157 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten23_reg_146 <= add_ln9_reg_941;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_146 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_168 <= select_ln12_8_reg_995;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_168 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_179 <= select_ln12_5_reg_964;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_179 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln9_reg_941 <= add_ln9_fu_232_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_reg_1017 <= c_fu_708_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln9_reg_937 <= icmp_ln9_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_226_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln12_5_reg_964 <= select_ln12_5_fu_332_p3;
        select_ln12_8_reg_995 <= select_ln12_8_fu_476_p3;
        select_ln28_9_reg_946 <= select_ln28_9_fu_258_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_226_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln12_7_reg_970[4 : 1] <= select_ln12_7_fu_364_p3[4 : 1];
        select_ln12_reg_958 <= select_ln12_fu_316_p3;
        zext_ln28_10_reg_953[5 : 0] <= zext_ln28_10_fu_266_p1[5 : 0];
        zext_ln28_13_reg_975[4 : 1] <= zext_ln28_13_fu_380_p1[4 : 1];
        zext_ln28_16_reg_985[4 : 1] <= zext_ln28_16_fu_437_p1[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_4_reg_1010 <= select_ln28_4_fu_700_p3;
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_226_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_194_p4 = c_reg_1017;
    end else begin
        ap_phi_mux_c_0_phi_fu_194_p4 = c_0_reg_190;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_161_p4 = select_ln28_9_reg_946;
    end else begin
        ap_phi_mux_f_0_phi_fu_161_p4 = f_0_reg_157;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_150_p4 = add_ln9_reg_941;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_150_p4 = indvar_flatten23_reg_146;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_172_p4 = select_ln12_8_reg_995;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_172_p4 = indvar_flatten_reg_168;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_183_p4 = select_ln12_5_reg_964;
    end else begin
        ap_phi_mux_r_0_phi_fu_183_p4 = r_0_reg_179;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_out_address0 = zext_ln28_15_fu_533_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_out_address0 = zext_ln28_14_fu_426_p1;
        end else begin
            conv_out_address0 = 'bx;
        end
    end else begin
        conv_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_out_address1 = zext_ln28_20_fu_611_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_out_address1 = zext_ln28_18_fu_465_p1;
        end else begin
            conv_out_address1 = 'bx;
        end
    end else begin
        conv_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_out_ce1 = 1'b1;
    end else begin
        conv_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_201_p1 = select_ln28_4_reg_1010;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_201_p1 = 32'd8388608;
    end else begin
        grp_fu_201_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_207_p1 = select_ln28_5_fu_802_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_207_p1 = select_ln28_fu_580_p3;
    end else begin
        grp_fu_207_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_937 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln9_fu_226_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln9_fu_226_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_470_p2 = (8'd1 + ap_phi_mux_indvar_flatten_phi_fu_172_p4);

assign add_ln28_10_fu_459_p2 = (zext_ln28_10_fu_266_p1 + zext_ln28_17_fu_455_p1);

assign add_ln28_11_fu_589_p2 = (zext_ln28_16_reg_985 + mul_ln28_2_fu_487_p2);

assign add_ln28_12_fu_606_p2 = (zext_ln28_10_reg_953 + zext_ln28_19_fu_602_p1);

assign add_ln28_8_fu_493_p2 = (zext_ln28_13_reg_975 + mul_ln28_2_fu_487_p2);

assign add_ln28_9_fu_441_p2 = (zext_ln28_16_fu_437_p1 + mul_ln28_fu_352_p2);

assign add_ln28_fu_384_p2 = (zext_ln28_13_fu_380_p1 + mul_ln28_fu_352_p2);

assign add_ln35_3_fu_917_p2 = (zext_ln28_fu_713_p1 + zext_ln35_5_fu_913_p1);

assign add_ln9_fu_232_p2 = (ap_phi_mux_indvar_flatten23_phi_fu_150_p4 + 13'd1);

assign and_ln28_10_fu_796_p2 = (grp_fu_201_p2 & and_ln28_9_fu_790_p2);

assign and_ln28_11_fu_882_p2 = (or_ln28_12_fu_876_p2 & or_ln28_11_fu_858_p2);

assign and_ln28_12_fu_888_p2 = (grp_fu_207_p2 & and_ln28_11_fu_882_p2);

assign and_ln28_13_fu_298_p2 = (xor_ln28_fu_286_p2 & icmp_ln15_fu_292_p2);

assign and_ln28_7_fu_688_p2 = (or_ln28_8_fu_682_p2 & or_ln28_7_fu_664_p2);

assign and_ln28_8_fu_694_p2 = (grp_fu_207_p2 & and_ln28_7_fu_688_p2);

assign and_ln28_9_fu_790_p2 = (or_ln28_9_fu_766_p2 & or_ln28_10_fu_784_p2);

assign and_ln28_fu_574_p2 = (or_ln28_fu_568_p2 & grp_fu_201_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_10_fu_737_p1 = select_ln28_4_reg_1010;

assign bitcast_ln28_11_fu_810_p1 = conv_out_q1;

assign bitcast_ln28_12_fu_828_p1 = select_ln28_5_fu_802_p3;

assign bitcast_ln28_7_fu_616_p1 = conv_out_q1;

assign bitcast_ln28_8_fu_634_p1 = select_ln28_fu_580_p3;

assign bitcast_ln28_9_fu_719_p1 = conv_out_q0;

assign bitcast_ln28_fu_538_p1 = conv_out_q0;

assign c_fu_708_p2 = (4'd1 + select_ln12_reg_958);

assign f_fu_238_p2 = (6'd1 + ap_phi_mux_f_0_phi_fu_161_p4);

assign grp_fu_928_p0 = 8'd13;

assign grp_fu_928_p1 = grp_fu_928_p10;

assign grp_fu_928_p10 = select_ln12_5_reg_964;

assign grp_fu_928_p2 = grp_fu_928_p20;

assign grp_fu_928_p20 = select_ln12_reg_958;

assign icmp_ln12_fu_244_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_172_p4 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_292_p2 = ((ap_phi_mux_c_0_phi_fu_194_p4 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln28_14_fu_562_p2 = ((trunc_ln28_8_fu_552_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_15_fu_652_p2 = ((tmp_14_fu_620_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_16_fu_658_p2 = ((trunc_ln28_9_fu_630_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_17_fu_670_p2 = ((tmp_15_fu_638_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_18_fu_676_p2 = ((trunc_ln28_10_fu_648_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_19_fu_754_p2 = ((tmp_17_fu_723_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_20_fu_760_p2 = ((trunc_ln28_11_fu_733_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_21_fu_772_p2 = ((tmp_18_fu_740_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_22_fu_778_p2 = ((trunc_ln28_12_fu_750_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_23_fu_846_p2 = ((tmp_20_fu_814_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_24_fu_852_p2 = ((trunc_ln28_13_fu_824_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_25_fu_864_p2 = ((tmp_21_fu_832_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_26_fu_870_p2 = ((trunc_ln28_14_fu_842_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_556_p2 = ((tmp_s_fu_542_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_226_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_150_p4 == 13'd5408) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln35_6_fu_923_p1;

assign max_pool_out_d0 = ((and_ln28_12_fu_888_p2[0:0] === 1'b1) ? conv_out_q1 : select_ln28_5_fu_802_p3);

assign mul_ln28_2_fu_487_p1 = mul_ln28_2_fu_487_p10;

assign mul_ln28_2_fu_487_p10 = select_ln12_7_reg_970;

assign mul_ln28_2_fu_487_p2 = (10'd26 * mul_ln28_2_fu_487_p1);

assign mul_ln28_fu_352_p1 = mul_ln28_fu_352_p10;

assign mul_ln28_fu_352_p10 = select_ln12_6_fu_340_p3;

assign mul_ln28_fu_352_p2 = (10'd26 * mul_ln28_fu_352_p1);

assign or_ln12_fu_310_p2 = (icmp_ln12_fu_244_p2 | and_ln28_13_fu_298_p2);

assign or_ln25_2_fu_358_p2 = (shl_ln25_mid1_fu_324_p3 | 5'd1);

assign or_ln25_fu_220_p2 = (shl_ln_fu_212_p3 | 5'd1);

assign or_ln26_fu_431_p2 = (shl_ln2_fu_372_p3 | 5'd1);

assign or_ln28_10_fu_784_p2 = (icmp_ln28_22_fu_778_p2 | icmp_ln28_21_fu_772_p2);

assign or_ln28_11_fu_858_p2 = (icmp_ln28_24_fu_852_p2 | icmp_ln28_23_fu_846_p2);

assign or_ln28_12_fu_876_p2 = (icmp_ln28_26_fu_870_p2 | icmp_ln28_25_fu_864_p2);

assign or_ln28_13_fu_402_p2 = (tmp_12_fu_394_p3 | select_ln28_9_fu_258_p3);

assign or_ln28_14_fu_510_p2 = (tmp_23_fu_502_p3 | select_ln28_9_reg_946);

assign or_ln28_7_fu_664_p2 = (icmp_ln28_16_fu_658_p2 | icmp_ln28_15_fu_652_p2);

assign or_ln28_8_fu_682_p2 = (icmp_ln28_18_fu_676_p2 | icmp_ln28_17_fu_670_p2);

assign or_ln28_9_fu_766_p2 = (icmp_ln28_20_fu_760_p2 | icmp_ln28_19_fu_754_p2);

assign or_ln28_fu_568_p2 = (icmp_ln28_fu_556_p2 | icmp_ln28_14_fu_562_p2);

assign r_fu_304_p2 = (4'd1 + select_ln28_8_fu_250_p3);

assign select_ln12_5_fu_332_p3 = ((and_ln28_13_fu_298_p2[0:0] === 1'b1) ? r_fu_304_p2 : select_ln28_8_fu_250_p3);

assign select_ln12_6_fu_340_p3 = ((and_ln28_13_fu_298_p2[0:0] === 1'b1) ? shl_ln25_mid1_fu_324_p3 : select_ln28_10_fu_270_p3);

assign select_ln12_7_fu_364_p3 = ((and_ln28_13_fu_298_p2[0:0] === 1'b1) ? or_ln25_2_fu_358_p2 : select_ln28_11_fu_278_p3);

assign select_ln12_8_fu_476_p3 = ((icmp_ln12_fu_244_p2[0:0] === 1'b1) ? 8'd1 : add_ln12_fu_470_p2);

assign select_ln12_fu_316_p3 = ((or_ln12_fu_310_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_194_p4);

assign select_ln28_10_fu_270_p3 = ((icmp_ln12_fu_244_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_212_p3);

assign select_ln28_11_fu_278_p3 = ((icmp_ln12_fu_244_p2[0:0] === 1'b1) ? 5'd1 : or_ln25_fu_220_p2);

assign select_ln28_4_fu_700_p3 = ((and_ln28_8_fu_694_p2[0:0] === 1'b1) ? conv_out_q1 : select_ln28_fu_580_p3);

assign select_ln28_5_fu_802_p3 = ((and_ln28_10_fu_796_p2[0:0] === 1'b1) ? conv_out_q0 : select_ln28_4_reg_1010);

assign select_ln28_8_fu_250_p3 = ((icmp_ln12_fu_244_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_183_p4);

assign select_ln28_9_fu_258_p3 = ((icmp_ln12_fu_244_p2[0:0] === 1'b1) ? f_fu_238_p2 : ap_phi_mux_f_0_phi_fu_161_p4);

assign select_ln28_fu_580_p3 = ((and_ln28_fu_574_p2[0:0] === 1'b1) ? conv_out_q0 : 32'd8388608);

assign shl_ln25_mid1_fu_324_p3 = {{r_fu_304_p2}, {1'd0}};

assign shl_ln2_fu_372_p3 = {{select_ln12_fu_316_p3}, {1'd0}};

assign shl_ln_fu_212_p3 = {{ap_phi_mux_r_0_phi_fu_183_p4}, {1'd0}};

assign tmp_12_fu_394_p3 = {{trunc_ln28_fu_390_p1}, {5'd0}};

assign tmp_14_fu_620_p4 = {{bitcast_ln28_7_fu_616_p1[30:23]}};

assign tmp_15_fu_638_p4 = {{bitcast_ln28_8_fu_634_p1[30:23]}};

assign tmp_17_fu_723_p4 = {{bitcast_ln28_9_fu_719_p1[30:23]}};

assign tmp_18_fu_740_p4 = {{bitcast_ln28_10_fu_737_p1[30:23]}};

assign tmp_1_fu_418_p3 = {{tmp_fu_408_p4}, {or_ln28_13_fu_402_p2}};

assign tmp_20_fu_814_p4 = {{bitcast_ln28_11_fu_810_p1[30:23]}};

assign tmp_21_fu_832_p4 = {{bitcast_ln28_12_fu_828_p1[30:23]}};

assign tmp_23_fu_502_p3 = {{trunc_ln28_7_fu_498_p1}, {5'd0}};

assign tmp_2_fu_515_p4 = {{add_ln28_8_fu_493_p2[9:1]}};

assign tmp_3_fu_525_p3 = {{tmp_2_fu_515_p4}, {or_ln28_14_fu_510_p2}};

assign tmp_4_fu_447_p3 = {{add_ln28_9_fu_441_p2}, {5'd0}};

assign tmp_5_fu_594_p3 = {{add_ln28_11_fu_589_p2}, {5'd0}};

assign tmp_6_fu_906_p3 = {{grp_fu_928_p3}, {5'd0}};

assign tmp_fu_408_p4 = {{add_ln28_fu_384_p2[9:1]}};

assign tmp_s_fu_542_p4 = {{bitcast_ln28_fu_538_p1[30:23]}};

assign trunc_ln28_10_fu_648_p1 = bitcast_ln28_8_fu_634_p1[22:0];

assign trunc_ln28_11_fu_733_p1 = bitcast_ln28_9_fu_719_p1[22:0];

assign trunc_ln28_12_fu_750_p1 = bitcast_ln28_10_fu_737_p1[22:0];

assign trunc_ln28_13_fu_824_p1 = bitcast_ln28_11_fu_810_p1[22:0];

assign trunc_ln28_14_fu_842_p1 = bitcast_ln28_12_fu_828_p1[22:0];

assign trunc_ln28_7_fu_498_p1 = add_ln28_8_fu_493_p2[0:0];

assign trunc_ln28_8_fu_552_p1 = bitcast_ln28_fu_538_p1[22:0];

assign trunc_ln28_9_fu_630_p1 = bitcast_ln28_7_fu_616_p1[22:0];

assign trunc_ln28_fu_390_p1 = add_ln28_fu_384_p2[0:0];

assign xor_ln28_fu_286_p2 = (icmp_ln12_fu_244_p2 ^ 1'd1);

assign zext_ln28_10_fu_266_p1 = select_ln28_9_fu_258_p3;

assign zext_ln28_13_fu_380_p1 = shl_ln2_fu_372_p3;

assign zext_ln28_14_fu_426_p1 = tmp_1_fu_418_p3;

assign zext_ln28_15_fu_533_p1 = tmp_3_fu_525_p3;

assign zext_ln28_16_fu_437_p1 = or_ln26_fu_431_p2;

assign zext_ln28_17_fu_455_p1 = tmp_4_fu_447_p3;

assign zext_ln28_18_fu_465_p1 = add_ln28_10_fu_459_p2;

assign zext_ln28_19_fu_602_p1 = tmp_5_fu_594_p3;

assign zext_ln28_20_fu_611_p1 = add_ln28_12_fu_606_p2;

assign zext_ln28_fu_713_p1 = select_ln28_9_reg_946;

assign zext_ln35_5_fu_913_p1 = tmp_6_fu_906_p3;

assign zext_ln35_6_fu_923_p1 = add_ln35_3_fu_917_p2;

always @ (posedge ap_clk) begin
    zext_ln28_10_reg_953[15:6] <= 10'b0000000000;
    select_ln12_7_reg_970[0] <= 1'b1;
    zext_ln28_13_reg_975[0] <= 1'b0;
    zext_ln28_13_reg_975[9:5] <= 5'b00000;
    zext_ln28_16_reg_985[0] <= 1'b1;
    zext_ln28_16_reg_985[9:5] <= 5'b00000;
end

endmodule //max_pool_1
