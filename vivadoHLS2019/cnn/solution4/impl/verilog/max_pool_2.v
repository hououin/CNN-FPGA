// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_2_out_address0,
        conv_2_out_ce0,
        conv_2_out_q0,
        conv_2_out_address1,
        conv_2_out_ce1,
        conv_2_out_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state5 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [12:0] conv_2_out_address0;
output   conv_2_out_ce0;
input  [31:0] conv_2_out_q0;
output  [12:0] conv_2_out_address1;
output   conv_2_out_ce1;
input  [31:0] conv_2_out_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg[12:0] conv_2_out_address0;
reg conv_2_out_ce0;
reg[12:0] conv_2_out_address1;
reg conv_2_out_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten23_reg_140;
reg   [6:0] f_0_reg_151;
reg   [5:0] indvar_flatten_reg_162;
reg   [2:0] r_0_reg_173;
reg   [2:0] c_0_reg_184;
wire   [0:0] icmp_ln9_fu_220_p2;
reg   [0:0] icmp_ln9_reg_890;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [10:0] add_ln9_fu_226_p2;
reg   [10:0] add_ln9_reg_894;
reg    ap_enable_reg_pp0_iter0;
wire   [6:0] select_ln28_5_fu_252_p3;
reg   [6:0] select_ln28_5_reg_899;
wire   [13:0] zext_ln28_1_fu_260_p1;
reg   [13:0] zext_ln28_1_reg_905;
wire   [2:0] select_ln12_fu_310_p3;
reg   [2:0] select_ln12_reg_911;
wire   [2:0] select_ln12_1_fu_326_p3;
reg   [2:0] select_ln12_1_reg_917;
wire   [3:0] select_ln12_3_fu_358_p3;
reg   [3:0] select_ln12_3_reg_924;
wire   [7:0] zext_ln28_4_fu_374_p1;
reg   [7:0] zext_ln28_4_reg_929;
wire   [7:0] zext_ln28_7_fu_409_p1;
reg   [7:0] zext_ln28_7_reg_939;
wire   [5:0] select_ln12_4_fu_444_p3;
reg   [5:0] select_ln12_4_reg_949;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] select_ln28_1_fu_642_p3;
reg   [31:0] select_ln28_1_reg_964;
wire   [2:0] c_fu_650_p2;
reg   [2:0] c_reg_971;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage1_subdone;
reg   [10:0] ap_phi_mux_indvar_flatten23_phi_fu_144_p4;
wire    ap_block_pp0_stage0;
reg   [6:0] ap_phi_mux_f_0_phi_fu_155_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_166_p4;
reg   [2:0] ap_phi_mux_r_0_phi_fu_177_p4;
reg   [2:0] ap_phi_mux_c_0_phi_fu_188_p4;
wire   [63:0] zext_ln28_5_fu_398_p1;
wire   [63:0] zext_ln28_8_fu_433_p1;
wire   [63:0] zext_ln28_6_fu_479_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln28_9_fu_553_p1;
wire   [63:0] zext_ln35_3_fu_885_p1;
reg   [31:0] grp_fu_195_p1;
reg   [31:0] grp_fu_201_p1;
wire   [31:0] select_ln28_fu_526_p3;
wire   [31:0] select_ln28_2_fu_761_p3;
wire   [3:0] shl_ln_fu_206_p3;
wire   [0:0] icmp_ln12_fu_238_p2;
wire   [6:0] f_fu_232_p2;
wire   [3:0] or_ln25_fu_214_p2;
wire   [0:0] icmp_ln15_fu_286_p2;
wire   [0:0] xor_ln28_fu_280_p2;
wire   [2:0] select_ln28_4_fu_244_p3;
wire   [0:0] and_ln28_7_fu_292_p2;
wire   [0:0] or_ln12_fu_304_p2;
wire   [2:0] r_fu_298_p2;
wire   [3:0] shl_ln25_mid1_fu_318_p3;
wire   [3:0] select_ln28_6_fu_264_p3;
wire   [3:0] select_ln12_2_fu_334_p3;
wire   [3:0] mul_ln28_fu_346_p1;
wire   [3:0] or_ln25_1_fu_352_p2;
wire   [3:0] select_ln28_7_fu_272_p3;
wire   [3:0] shl_ln1_fu_366_p3;
wire   [7:0] mul_ln28_fu_346_p2;
wire   [7:0] add_ln28_fu_378_p2;
wire   [13:0] tmp_14_cast_fu_384_p3;
wire   [13:0] add_ln28_1_fu_392_p2;
wire   [3:0] or_ln26_fu_403_p2;
wire   [7:0] add_ln28_4_fu_413_p2;
wire   [13:0] tmp_18_cast_fu_419_p3;
wire   [13:0] add_ln28_5_fu_427_p2;
wire   [5:0] add_ln12_fu_438_p2;
wire   [3:0] mul_ln28_1_fu_455_p1;
wire   [7:0] mul_ln28_1_fu_455_p2;
wire   [7:0] add_ln28_2_fu_461_p2;
wire   [13:0] tmp_16_cast_fu_466_p3;
wire   [13:0] add_ln28_3_fu_474_p2;
wire   [31:0] bitcast_ln28_fu_484_p1;
wire   [7:0] tmp_1_fu_488_p4;
wire   [22:0] trunc_ln28_fu_498_p1;
wire   [0:0] icmp_ln28_1_fu_508_p2;
wire   [0:0] icmp_ln28_fu_502_p2;
wire   [0:0] or_ln28_fu_514_p2;
wire   [0:0] grp_fu_195_p2;
wire   [0:0] and_ln28_fu_520_p2;
wire   [7:0] add_ln28_6_fu_535_p2;
wire   [13:0] tmp_20_cast_fu_540_p3;
wire   [13:0] add_ln28_7_fu_548_p2;
wire   [31:0] bitcast_ln28_1_fu_558_p1;
wire   [31:0] bitcast_ln28_2_fu_576_p1;
wire   [7:0] tmp_3_fu_562_p4;
wire   [22:0] trunc_ln28_1_fu_572_p1;
wire   [0:0] icmp_ln28_3_fu_600_p2;
wire   [0:0] icmp_ln28_2_fu_594_p2;
wire   [7:0] tmp_4_fu_580_p4;
wire   [22:0] trunc_ln28_2_fu_590_p1;
wire   [0:0] icmp_ln28_5_fu_618_p2;
wire   [0:0] icmp_ln28_4_fu_612_p2;
wire   [0:0] or_ln28_1_fu_606_p2;
wire   [0:0] or_ln28_2_fu_624_p2;
wire   [0:0] and_ln28_1_fu_630_p2;
wire   [0:0] grp_fu_201_p2;
wire   [0:0] and_ln28_2_fu_636_p2;
wire   [4:0] tmp_fu_661_p3;
wire   [5:0] zext_ln35_fu_658_p1;
wire   [5:0] zext_ln35_2_fu_668_p1;
wire   [31:0] bitcast_ln28_3_fu_678_p1;
wire   [31:0] bitcast_ln28_4_fu_696_p1;
wire   [7:0] tmp_8_fu_682_p4;
wire   [22:0] trunc_ln28_3_fu_692_p1;
wire   [0:0] icmp_ln28_7_fu_719_p2;
wire   [0:0] icmp_ln28_6_fu_713_p2;
wire   [7:0] tmp_9_fu_699_p4;
wire   [22:0] trunc_ln28_4_fu_709_p1;
wire   [0:0] icmp_ln28_9_fu_737_p2;
wire   [0:0] icmp_ln28_8_fu_731_p2;
wire   [0:0] or_ln28_3_fu_725_p2;
wire   [0:0] or_ln28_4_fu_743_p2;
wire   [0:0] and_ln28_3_fu_749_p2;
wire   [0:0] and_ln28_4_fu_755_p2;
wire   [31:0] bitcast_ln28_5_fu_769_p1;
wire   [31:0] bitcast_ln28_6_fu_787_p1;
wire   [7:0] tmp_5_fu_773_p4;
wire   [22:0] trunc_ln28_5_fu_783_p1;
wire   [0:0] icmp_ln28_11_fu_811_p2;
wire   [0:0] icmp_ln28_10_fu_805_p2;
wire   [7:0] tmp_10_fu_791_p4;
wire   [22:0] trunc_ln28_6_fu_801_p1;
wire   [0:0] icmp_ln28_13_fu_829_p2;
wire   [0:0] icmp_ln28_12_fu_823_p2;
wire   [0:0] or_ln28_5_fu_817_p2;
wire   [0:0] or_ln28_6_fu_835_p2;
wire   [0:0] and_ln28_5_fu_841_p2;
wire   [0:0] and_ln28_6_fu_847_p2;
wire   [5:0] add_ln35_fu_672_p2;
wire   [5:0] zext_ln35_1_fu_862_p1;
wire   [5:0] add_ln35_1_fu_865_p2;
wire   [11:0] tmp_22_cast_fu_871_p3;
wire   [11:0] zext_ln28_fu_655_p1;
wire   [11:0] add_ln35_2_fu_879_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state5;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul_ln28_1_fu_455_p10;
wire   [7:0] mul_ln28_fu_346_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_fcmp_32ns_32nmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nmb6_U133(
    .din0(conv_2_out_q0),
    .din1(grp_fu_195_p1),
    .opcode(5'd2),
    .dout(grp_fu_195_p2)
);

cnn_fcmp_32ns_32nmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32nmb6_U134(
    .din0(conv_2_out_q1),
    .din1(grp_fu_201_p1),
    .opcode(5'd2),
    .dout(grp_fu_201_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_184 <= c_reg_971;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_184 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_151 <= select_ln28_5_reg_899;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_151 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten23_reg_140 <= add_ln9_reg_894;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_140 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_162 <= select_ln12_4_reg_949;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_162 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_173 <= select_ln12_1_reg_917;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_173 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln9_reg_894 <= add_ln9_fu_226_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        c_reg_971 <= c_fu_650_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln9_reg_890 <= icmp_ln9_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_220_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln12_1_reg_917 <= select_ln12_1_fu_326_p3;
        select_ln12_4_reg_949 <= select_ln12_4_fu_444_p3;
        select_ln28_5_reg_899 <= select_ln28_5_fu_252_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_fu_220_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln12_3_reg_924[3 : 1] <= select_ln12_3_fu_358_p3[3 : 1];
        select_ln12_reg_911 <= select_ln12_fu_310_p3;
        zext_ln28_1_reg_905[6 : 0] <= zext_ln28_1_fu_260_p1[6 : 0];
        zext_ln28_4_reg_929[3 : 1] <= zext_ln28_4_fu_374_p1[3 : 1];
        zext_ln28_7_reg_939[3 : 1] <= zext_ln28_7_fu_409_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        select_ln28_1_reg_964 <= select_ln28_1_fu_642_p3;
    end
end

always @ (*) begin
    if ((icmp_ln9_fu_220_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_188_p4 = c_reg_971;
    end else begin
        ap_phi_mux_c_0_phi_fu_188_p4 = c_0_reg_184;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_155_p4 = select_ln28_5_reg_899;
    end else begin
        ap_phi_mux_f_0_phi_fu_155_p4 = f_0_reg_151;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_144_p4 = add_ln9_reg_894;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_144_p4 = indvar_flatten23_reg_140;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = select_ln12_4_reg_949;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = indvar_flatten_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_177_p4 = select_ln12_1_reg_917;
    end else begin
        ap_phi_mux_r_0_phi_fu_177_p4 = r_0_reg_173;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_2_out_address0 = zext_ln28_6_fu_479_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_2_out_address0 = zext_ln28_5_fu_398_p1;
        end else begin
            conv_2_out_address0 = 'bx;
        end
    end else begin
        conv_2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_2_out_address1 = zext_ln28_9_fu_553_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_2_out_address1 = zext_ln28_8_fu_433_p1;
        end else begin
            conv_2_out_address1 = 'bx;
        end
    end else begin
        conv_2_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_2_out_ce0 = 1'b1;
    end else begin
        conv_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        conv_2_out_ce1 = 1'b1;
    end else begin
        conv_2_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_195_p1 = select_ln28_1_reg_964;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_195_p1 = 32'd8388608;
    end else begin
        grp_fu_195_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_201_p1 = select_ln28_2_fu_761_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_201_p1 = select_ln28_fu_526_p3;
    end else begin
        grp_fu_201_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln9_reg_890 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln9_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln9_fu_220_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_fu_438_p2 = (6'd1 + ap_phi_mux_indvar_flatten_phi_fu_166_p4);

assign add_ln28_1_fu_392_p2 = (tmp_14_cast_fu_384_p3 + zext_ln28_1_fu_260_p1);

assign add_ln28_2_fu_461_p2 = (mul_ln28_1_fu_455_p2 + zext_ln28_4_reg_929);

assign add_ln28_3_fu_474_p2 = (tmp_16_cast_fu_466_p3 + zext_ln28_1_reg_905);

assign add_ln28_4_fu_413_p2 = (mul_ln28_fu_346_p2 + zext_ln28_7_fu_409_p1);

assign add_ln28_5_fu_427_p2 = (tmp_18_cast_fu_419_p3 + zext_ln28_1_fu_260_p1);

assign add_ln28_6_fu_535_p2 = (mul_ln28_1_fu_455_p2 + zext_ln28_7_reg_939);

assign add_ln28_7_fu_548_p2 = (tmp_20_cast_fu_540_p3 + zext_ln28_1_reg_905);

assign add_ln28_fu_378_p2 = (mul_ln28_fu_346_p2 + zext_ln28_4_fu_374_p1);

assign add_ln35_1_fu_865_p2 = (add_ln35_fu_672_p2 + zext_ln35_1_fu_862_p1);

assign add_ln35_2_fu_879_p2 = (tmp_22_cast_fu_871_p3 + zext_ln28_fu_655_p1);

assign add_ln35_fu_672_p2 = (zext_ln35_fu_658_p1 + zext_ln35_2_fu_668_p1);

assign add_ln9_fu_226_p2 = (ap_phi_mux_indvar_flatten23_phi_fu_144_p4 + 11'd1);

assign and_ln28_1_fu_630_p2 = (or_ln28_2_fu_624_p2 & or_ln28_1_fu_606_p2);

assign and_ln28_2_fu_636_p2 = (grp_fu_201_p2 & and_ln28_1_fu_630_p2);

assign and_ln28_3_fu_749_p2 = (or_ln28_4_fu_743_p2 & or_ln28_3_fu_725_p2);

assign and_ln28_4_fu_755_p2 = (grp_fu_195_p2 & and_ln28_3_fu_749_p2);

assign and_ln28_5_fu_841_p2 = (or_ln28_6_fu_835_p2 & or_ln28_5_fu_817_p2);

assign and_ln28_6_fu_847_p2 = (grp_fu_201_p2 & and_ln28_5_fu_841_p2);

assign and_ln28_7_fu_292_p2 = (xor_ln28_fu_280_p2 & icmp_ln15_fu_286_p2);

assign and_ln28_fu_520_p2 = (or_ln28_fu_514_p2 & grp_fu_195_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln28_1_fu_558_p1 = conv_2_out_q1;

assign bitcast_ln28_2_fu_576_p1 = select_ln28_fu_526_p3;

assign bitcast_ln28_3_fu_678_p1 = conv_2_out_q0;

assign bitcast_ln28_4_fu_696_p1 = select_ln28_1_reg_964;

assign bitcast_ln28_5_fu_769_p1 = conv_2_out_q1;

assign bitcast_ln28_6_fu_787_p1 = select_ln28_2_fu_761_p3;

assign bitcast_ln28_fu_484_p1 = conv_2_out_q0;

assign c_fu_650_p2 = (3'd1 + select_ln12_reg_911);

assign f_fu_232_p2 = (7'd1 + ap_phi_mux_f_0_phi_fu_155_p4);

assign icmp_ln12_fu_238_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_166_p4 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_286_p2 = ((ap_phi_mux_c_0_phi_fu_188_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln28_10_fu_805_p2 = ((tmp_5_fu_773_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_11_fu_811_p2 = ((trunc_ln28_5_fu_783_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_12_fu_823_p2 = ((tmp_10_fu_791_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_13_fu_829_p2 = ((trunc_ln28_6_fu_801_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_1_fu_508_p2 = ((trunc_ln28_fu_498_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_2_fu_594_p2 = ((tmp_3_fu_562_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_3_fu_600_p2 = ((trunc_ln28_1_fu_572_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_4_fu_612_p2 = ((tmp_4_fu_580_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_5_fu_618_p2 = ((trunc_ln28_2_fu_590_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_6_fu_713_p2 = ((tmp_8_fu_682_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_7_fu_719_p2 = ((trunc_ln28_3_fu_692_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_8_fu_731_p2 = ((tmp_9_fu_699_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln28_9_fu_737_p2 = ((trunc_ln28_4_fu_709_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_502_p2 = ((tmp_1_fu_488_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_220_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_144_p4 == 11'd1600) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln35_3_fu_885_p1;

assign max_pool_out_d0 = ((and_ln28_6_fu_847_p2[0:0] === 1'b1) ? conv_2_out_q1 : select_ln28_2_fu_761_p3);

assign mul_ln28_1_fu_455_p1 = mul_ln28_1_fu_455_p10;

assign mul_ln28_1_fu_455_p10 = select_ln12_3_reg_924;

assign mul_ln28_1_fu_455_p2 = (8'd11 * mul_ln28_1_fu_455_p1);

assign mul_ln28_fu_346_p1 = mul_ln28_fu_346_p10;

assign mul_ln28_fu_346_p10 = select_ln12_2_fu_334_p3;

assign mul_ln28_fu_346_p2 = (8'd11 * mul_ln28_fu_346_p1);

assign or_ln12_fu_304_p2 = (icmp_ln12_fu_238_p2 | and_ln28_7_fu_292_p2);

assign or_ln25_1_fu_352_p2 = (shl_ln25_mid1_fu_318_p3 | 4'd1);

assign or_ln25_fu_214_p2 = (shl_ln_fu_206_p3 | 4'd1);

assign or_ln26_fu_403_p2 = (shl_ln1_fu_366_p3 | 4'd1);

assign or_ln28_1_fu_606_p2 = (icmp_ln28_3_fu_600_p2 | icmp_ln28_2_fu_594_p2);

assign or_ln28_2_fu_624_p2 = (icmp_ln28_5_fu_618_p2 | icmp_ln28_4_fu_612_p2);

assign or_ln28_3_fu_725_p2 = (icmp_ln28_7_fu_719_p2 | icmp_ln28_6_fu_713_p2);

assign or_ln28_4_fu_743_p2 = (icmp_ln28_9_fu_737_p2 | icmp_ln28_8_fu_731_p2);

assign or_ln28_5_fu_817_p2 = (icmp_ln28_11_fu_811_p2 | icmp_ln28_10_fu_805_p2);

assign or_ln28_6_fu_835_p2 = (icmp_ln28_13_fu_829_p2 | icmp_ln28_12_fu_823_p2);

assign or_ln28_fu_514_p2 = (icmp_ln28_fu_502_p2 | icmp_ln28_1_fu_508_p2);

assign r_fu_298_p2 = (3'd1 + select_ln28_4_fu_244_p3);

assign select_ln12_1_fu_326_p3 = ((and_ln28_7_fu_292_p2[0:0] === 1'b1) ? r_fu_298_p2 : select_ln28_4_fu_244_p3);

assign select_ln12_2_fu_334_p3 = ((and_ln28_7_fu_292_p2[0:0] === 1'b1) ? shl_ln25_mid1_fu_318_p3 : select_ln28_6_fu_264_p3);

assign select_ln12_3_fu_358_p3 = ((and_ln28_7_fu_292_p2[0:0] === 1'b1) ? or_ln25_1_fu_352_p2 : select_ln28_7_fu_272_p3);

assign select_ln12_4_fu_444_p3 = ((icmp_ln12_fu_238_p2[0:0] === 1'b1) ? 6'd1 : add_ln12_fu_438_p2);

assign select_ln12_fu_310_p3 = ((or_ln12_fu_304_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_c_0_phi_fu_188_p4);

assign select_ln28_1_fu_642_p3 = ((and_ln28_2_fu_636_p2[0:0] === 1'b1) ? conv_2_out_q1 : select_ln28_fu_526_p3);

assign select_ln28_2_fu_761_p3 = ((and_ln28_4_fu_755_p2[0:0] === 1'b1) ? conv_2_out_q0 : select_ln28_1_reg_964);

assign select_ln28_4_fu_244_p3 = ((icmp_ln12_fu_238_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_r_0_phi_fu_177_p4);

assign select_ln28_5_fu_252_p3 = ((icmp_ln12_fu_238_p2[0:0] === 1'b1) ? f_fu_232_p2 : ap_phi_mux_f_0_phi_fu_155_p4);

assign select_ln28_6_fu_264_p3 = ((icmp_ln12_fu_238_p2[0:0] === 1'b1) ? 4'd0 : shl_ln_fu_206_p3);

assign select_ln28_7_fu_272_p3 = ((icmp_ln12_fu_238_p2[0:0] === 1'b1) ? 4'd1 : or_ln25_fu_214_p2);

assign select_ln28_fu_526_p3 = ((and_ln28_fu_520_p2[0:0] === 1'b1) ? conv_2_out_q0 : 32'd8388608);

assign shl_ln1_fu_366_p3 = {{select_ln12_fu_310_p3}, {1'd0}};

assign shl_ln25_mid1_fu_318_p3 = {{r_fu_298_p2}, {1'd0}};

assign shl_ln_fu_206_p3 = {{ap_phi_mux_r_0_phi_fu_177_p4}, {1'd0}};

assign tmp_10_fu_791_p4 = {{bitcast_ln28_6_fu_787_p1[30:23]}};

assign tmp_14_cast_fu_384_p3 = {{add_ln28_fu_378_p2}, {6'd0}};

assign tmp_16_cast_fu_466_p3 = {{add_ln28_2_fu_461_p2}, {6'd0}};

assign tmp_18_cast_fu_419_p3 = {{add_ln28_4_fu_413_p2}, {6'd0}};

assign tmp_1_fu_488_p4 = {{bitcast_ln28_fu_484_p1[30:23]}};

assign tmp_20_cast_fu_540_p3 = {{add_ln28_6_fu_535_p2}, {6'd0}};

assign tmp_22_cast_fu_871_p3 = {{add_ln35_1_fu_865_p2}, {6'd0}};

assign tmp_3_fu_562_p4 = {{bitcast_ln28_1_fu_558_p1[30:23]}};

assign tmp_4_fu_580_p4 = {{bitcast_ln28_2_fu_576_p1[30:23]}};

assign tmp_5_fu_773_p4 = {{bitcast_ln28_5_fu_769_p1[30:23]}};

assign tmp_8_fu_682_p4 = {{bitcast_ln28_3_fu_678_p1[30:23]}};

assign tmp_9_fu_699_p4 = {{bitcast_ln28_4_fu_696_p1[30:23]}};

assign tmp_fu_661_p3 = {{select_ln12_1_reg_917}, {2'd0}};

assign trunc_ln28_1_fu_572_p1 = bitcast_ln28_1_fu_558_p1[22:0];

assign trunc_ln28_2_fu_590_p1 = bitcast_ln28_2_fu_576_p1[22:0];

assign trunc_ln28_3_fu_692_p1 = bitcast_ln28_3_fu_678_p1[22:0];

assign trunc_ln28_4_fu_709_p1 = bitcast_ln28_4_fu_696_p1[22:0];

assign trunc_ln28_5_fu_783_p1 = bitcast_ln28_5_fu_769_p1[22:0];

assign trunc_ln28_6_fu_801_p1 = bitcast_ln28_6_fu_787_p1[22:0];

assign trunc_ln28_fu_498_p1 = bitcast_ln28_fu_484_p1[22:0];

assign xor_ln28_fu_280_p2 = (icmp_ln12_fu_238_p2 ^ 1'd1);

assign zext_ln28_1_fu_260_p1 = select_ln28_5_fu_252_p3;

assign zext_ln28_4_fu_374_p1 = shl_ln1_fu_366_p3;

assign zext_ln28_5_fu_398_p1 = add_ln28_1_fu_392_p2;

assign zext_ln28_6_fu_479_p1 = add_ln28_3_fu_474_p2;

assign zext_ln28_7_fu_409_p1 = or_ln26_fu_403_p2;

assign zext_ln28_8_fu_433_p1 = add_ln28_5_fu_427_p2;

assign zext_ln28_9_fu_553_p1 = add_ln28_7_fu_548_p2;

assign zext_ln28_fu_655_p1 = select_ln28_5_reg_899;

assign zext_ln35_1_fu_862_p1 = select_ln12_reg_911;

assign zext_ln35_2_fu_668_p1 = tmp_fu_661_p3;

assign zext_ln35_3_fu_885_p1 = add_ln35_2_fu_879_p2;

assign zext_ln35_fu_658_p1 = select_ln12_1_reg_917;

always @ (posedge ap_clk) begin
    zext_ln28_1_reg_905[13:7] <= 7'b0000000;
    select_ln12_3_reg_924[0] <= 1'b1;
    zext_ln28_4_reg_929[0] <= 1'b0;
    zext_ln28_4_reg_929[7:4] <= 4'b0000;
    zext_ln28_7_reg_939[0] <= 1'b1;
    zext_ln28_7_reg_939[7:4] <= 4'b0000;
end

endmodule //max_pool_2
