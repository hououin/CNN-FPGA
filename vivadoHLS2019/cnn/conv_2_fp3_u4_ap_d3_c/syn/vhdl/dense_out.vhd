-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_EN_A : OUT STD_LOGIC;
    prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_2_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_ce0 : OUT STD_LOGIC;
    dense_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of dense_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (13 downto 0) := "00000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (13 downto 0) := "00000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (13 downto 0) := "00000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (13 downto 0) := "00000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (13 downto 0) := "00000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (13 downto 0) := "00000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (13 downto 0) := "00001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (13 downto 0) := "00010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (13 downto 0) := "00100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (13 downto 0) := "01000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (13 downto 0) := "10000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_out_weights_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_ce0 : STD_LOGIC;
    signal dense_out_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_out_bias_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_ce0 : STD_LOGIC;
    signal dense_out_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal d_fu_175_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_249 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal zext_ln38_fu_181_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_reg_254 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln31_fu_169_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln36_fu_185_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln36_reg_260 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_195_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_268 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln36_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_298 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_ce0 : STD_LOGIC;
    signal dense_array_we0 : STD_LOGIC;
    signal dense_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_149_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_149_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_149_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_149_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_149_dense_array_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_149_dense_array_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_149_prediction_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_soft_max_fu_149_prediction_EN_A : STD_LOGIC;
    signal grp_soft_max_fu_149_prediction_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_149_prediction_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal d_0_reg_115 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal w_sum_0_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal f_0_reg_138 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_soft_max_fu_149_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln38_4_fu_241_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_1_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_1_fu_206_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_218_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln38_3_fu_226_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln38_2_fu_214_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_fu_230_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln38_1_fu_236_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (13 downto 0);

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_ce0 : OUT STD_LOGIC;
        dense_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_EN_A : OUT STD_LOGIC;
        prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_obak IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_obbk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out_dense_abck IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    dense_out_weights_U : component dense_out_dense_obak
    generic map (
        DataWidth => 32,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_address0,
        ce0 => dense_out_weights_ce0,
        q0 => dense_out_weights_q0);

    dense_out_bias_U : component dense_out_dense_obbk
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_address0,
        ce0 => dense_out_bias_ce0,
        q0 => dense_out_bias_q0);

    dense_array_U : component dense_out_dense_abck
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_address0,
        ce0 => dense_array_ce0,
        we0 => dense_array_we0,
        d0 => grp_fu_156_p2,
        q0 => dense_array_q0);

    grp_soft_max_fu_149 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_149_ap_start,
        ap_done => grp_soft_max_fu_149_ap_done,
        ap_idle => grp_soft_max_fu_149_ap_idle,
        ap_ready => grp_soft_max_fu_149_ap_ready,
        dense_array_address0 => grp_soft_max_fu_149_dense_array_address0,
        dense_array_ce0 => grp_soft_max_fu_149_dense_array_ce0,
        dense_array_q0 => dense_array_q0,
        prediction_Addr_A => grp_soft_max_fu_149_prediction_Addr_A,
        prediction_EN_A => grp_soft_max_fu_149_prediction_EN_A,
        prediction_WEN_A => grp_soft_max_fu_149_prediction_WEN_A,
        prediction_Din_A => grp_soft_max_fu_149_prediction_Din_A,
        prediction_Dout_A => ap_const_lv32_0);

    cnn_fadd_32ns_32ncud_U183 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => w_sum_0_reg_126,
        din1 => grp_fu_156_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_156_p2);

    cnn_fmul_32ns_32ndEe_U184 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => dense_out_weights_q0,
        din1 => dense_2_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_163_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_soft_max_fu_149_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_149_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln31_fu_169_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_soft_max_fu_149_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_149_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_149_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                d_0_reg_115 <= d_reg_249;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_0_reg_115 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                f_0_reg_138 <= f_reg_268;
            elsif (((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                f_0_reg_138 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    w_sum_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                w_sum_0_reg_126 <= grp_fu_156_p2;
            elsif (((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                w_sum_0_reg_126 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                d_reg_249 <= d_fu_175_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                f_reg_268 <= f_fu_195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                tmp_4_reg_298 <= grp_fu_163_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln36_reg_260(3 downto 0) <= zext_ln36_fu_185_p1(3 downto 0);
                    zext_ln38_reg_254(3 downto 0) <= zext_ln38_fu_181_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln38_reg_254(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln36_reg_260(8 downto 4) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_169_p2, ap_CS_fsm_state3, icmp_ln36_fu_189_p2, grp_soft_max_fu_149_ap_done, ap_CS_fsm_state14)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_169_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln36_fu_189_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_soft_max_fu_149_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln38_1_fu_236_p2 <= std_logic_vector(unsigned(add_ln38_fu_230_p2) + unsigned(zext_ln36_reg_260));
    add_ln38_fu_230_p2 <= std_logic_vector(unsigned(zext_ln38_3_fu_226_p1) + unsigned(zext_ln38_2_fu_214_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_149_ap_done, ap_CS_fsm_state14)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_soft_max_fu_149_ap_done = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_soft_max_fu_149_ap_done, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) and (grp_soft_max_fu_149_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_175_p2 <= std_logic_vector(unsigned(d_0_reg_115) + unsigned(ap_const_lv4_1));
    dense_2_out_address0 <= zext_ln38_1_fu_201_p1(5 - 1 downto 0);

    dense_2_out_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_2_out_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_address0_assign_proc : process(zext_ln38_reg_254, grp_soft_max_fu_149_dense_array_address0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dense_array_address0 <= zext_ln38_reg_254(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_array_address0 <= grp_soft_max_fu_149_dense_array_address0;
        else 
            dense_array_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_ce0_assign_proc : process(grp_soft_max_fu_149_dense_array_ce0, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dense_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_array_ce0 <= grp_soft_max_fu_149_dense_array_ce0;
        else 
            dense_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dense_array_we0 <= ap_const_logic_1;
        else 
            dense_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_address0 <= zext_ln38_reg_254(4 - 1 downto 0);

    dense_out_bias_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_out_bias_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_address0 <= zext_ln38_4_fu_241_p1(9 - 1 downto 0);

    dense_out_weights_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_out_weights_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_195_p2 <= std_logic_vector(unsigned(f_0_reg_138) + unsigned(ap_const_lv5_1));

    grp_fu_156_p1_assign_proc : process(dense_out_bias_q0, tmp_4_reg_298, ap_CS_fsm_state10, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_156_p1 <= dense_out_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_fu_156_p1 <= tmp_4_reg_298;
        else 
            grp_fu_156_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_soft_max_fu_149_ap_start <= grp_soft_max_fu_149_ap_start_reg;
    icmp_ln31_fu_169_p2 <= "1" when (d_0_reg_115 = ap_const_lv4_A) else "0";
    icmp_ln36_fu_189_p2 <= "1" when (f_0_reg_138 = ap_const_lv5_1E) else "0";
    prediction_Addr_A <= grp_soft_max_fu_149_prediction_Addr_A;
    prediction_Din_A <= grp_soft_max_fu_149_prediction_Din_A;
    prediction_EN_A <= grp_soft_max_fu_149_prediction_EN_A;
    prediction_WEN_A <= grp_soft_max_fu_149_prediction_WEN_A;
    tmp_1_fu_206_p3 <= (f_0_reg_138 & ap_const_lv3_0);
    tmp_2_fu_218_p3 <= (f_0_reg_138 & ap_const_lv1_0);
    zext_ln36_fu_185_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_115),9));
    zext_ln38_1_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_138),64));
    zext_ln38_2_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_206_p3),9));
    zext_ln38_3_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_218_p3),9));
    zext_ln38_4_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln38_1_fu_236_p2),64));
    zext_ln38_fu_181_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_115),64));
end behav;
