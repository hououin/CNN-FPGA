// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _soft_max_HH_
#define _soft_max_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cnn_fadd_32ns_32ncud.h"
#include "cnn_fdiv_32ns_32n8jQ.h"
#include "cnn_fexp_32ns_32n9j0.h"

namespace ap_rtl {

struct soft_max : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<4> > dense_array_address0;
    sc_out< sc_logic > dense_array_ce0;
    sc_in< sc_lv<32> > dense_array_q0;
    sc_out< sc_lv<32> > prediction_Addr_A;
    sc_out< sc_logic > prediction_EN_A;
    sc_out< sc_lv<4> > prediction_WEN_A;
    sc_out< sc_lv<32> > prediction_Din_A;
    sc_in< sc_lv<32> > prediction_Dout_A;
    sc_signal< sc_logic > ap_var_for_const0;
    sc_signal< sc_lv<32> > ap_var_for_const1;


    // Module declarations
    soft_max(sc_module_name name);
    SC_HAS_PROCESS(soft_max);

    ~soft_max();

    sc_trace_file* mVcdFile;

    cnn_fadd_32ns_32ncud<1,4,32,32,32>* cnn_fadd_32ns_32ncud_U116;
    cnn_fdiv_32ns_32n8jQ<1,8,32,32,32>* cnn_fdiv_32ns_32n8jQ_U117;
    cnn_fexp_32ns_32n9j0<1,5,32,32,32>* cnn_fexp_32ns_32n9j0_U118;
    sc_signal< sc_lv<26> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<32> > grp_fu_112_p2;
    sc_signal< sc_lv<32> > reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_lv<4> > i_fu_135_p2;
    sc_signal< sc_lv<4> > i_reg_166;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<1> > icmp_ln11_fu_129_p2;
    sc_signal< sc_lv<32> > grp_fu_102_p2;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<4> > j_fu_152_p2;
    sc_signal< sc_lv<4> > j_reg_184;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<64> > zext_ln19_fu_158_p1;
    sc_signal< sc_lv<64> > zext_ln19_reg_189;
    sc_signal< sc_lv<1> > icmp_ln17_fu_146_p2;
    sc_signal< sc_lv<32> > grp_fu_107_p2;
    sc_signal< sc_lv<32> > tmp_3_reg_199;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_lv<32> > sum_0_reg_68;
    sc_signal< sc_lv<4> > i_0_reg_80;
    sc_signal< sc_lv<4> > j_0_reg_91;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<64> > zext_ln13_fu_141_p1;
    sc_signal< sc_lv<32> > prediction_Addr_A_orig;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_lv<26> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<26> ap_ST_fsm_state1;
    static const sc_lv<26> ap_ST_fsm_state2;
    static const sc_lv<26> ap_ST_fsm_state3;
    static const sc_lv<26> ap_ST_fsm_state4;
    static const sc_lv<26> ap_ST_fsm_state5;
    static const sc_lv<26> ap_ST_fsm_state6;
    static const sc_lv<26> ap_ST_fsm_state7;
    static const sc_lv<26> ap_ST_fsm_state8;
    static const sc_lv<26> ap_ST_fsm_state9;
    static const sc_lv<26> ap_ST_fsm_state10;
    static const sc_lv<26> ap_ST_fsm_state11;
    static const sc_lv<26> ap_ST_fsm_state12;
    static const sc_lv<26> ap_ST_fsm_state13;
    static const sc_lv<26> ap_ST_fsm_state14;
    static const sc_lv<26> ap_ST_fsm_state15;
    static const sc_lv<26> ap_ST_fsm_state16;
    static const sc_lv<26> ap_ST_fsm_state17;
    static const sc_lv<26> ap_ST_fsm_state18;
    static const sc_lv<26> ap_ST_fsm_state19;
    static const sc_lv<26> ap_ST_fsm_state20;
    static const sc_lv<26> ap_ST_fsm_state21;
    static const sc_lv<26> ap_ST_fsm_state22;
    static const sc_lv<26> ap_ST_fsm_state23;
    static const sc_lv<26> ap_ST_fsm_state24;
    static const sc_lv<26> ap_ST_fsm_state25;
    static const sc_lv<26> ap_ST_fsm_state26;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_19;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<4> ap_const_lv4_F;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<4> ap_const_lv4_A;
    static const sc_lv<4> ap_const_lv4_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_var_for_const1();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_dense_array_address0();
    void thread_dense_array_ce0();
    void thread_i_fu_135_p2();
    void thread_icmp_ln11_fu_129_p2();
    void thread_icmp_ln17_fu_146_p2();
    void thread_j_fu_152_p2();
    void thread_prediction_Addr_A();
    void thread_prediction_Addr_A_orig();
    void thread_prediction_Din_A();
    void thread_prediction_EN_A();
    void thread_prediction_WEN_A();
    void thread_zext_ln13_fu_141_p1();
    void thread_zext_ln19_fu_158_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
