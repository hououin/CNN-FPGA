// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_2_out_0_address0,
        conv_2_out_0_ce0,
        conv_2_out_0_q0,
        conv_2_out_0_address1,
        conv_2_out_0_ce1,
        conv_2_out_0_q1,
        conv_2_out_1_address0,
        conv_2_out_1_ce0,
        conv_2_out_1_q0,
        conv_2_out_1_address1,
        conv_2_out_1_ce1,
        conv_2_out_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state8 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [10:0] conv_2_out_0_address0;
output   conv_2_out_0_ce0;
input  [31:0] conv_2_out_0_q0;
output  [10:0] conv_2_out_0_address1;
output   conv_2_out_0_ce1;
input  [31:0] conv_2_out_0_q1;
output  [9:0] conv_2_out_1_address0;
output   conv_2_out_1_ce0;
input  [31:0] conv_2_out_1_q0;
output  [9:0] conv_2_out_1_address1;
output   conv_2_out_1_ce1;
input  [31:0] conv_2_out_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg conv_2_out_0_ce0;
reg conv_2_out_0_ce1;
reg conv_2_out_1_ce0;
reg conv_2_out_1_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten13_reg_151;
reg   [4:0] f_0_reg_162;
reg   [5:0] indvar_flatten_reg_173;
reg   [2:0] r_0_reg_184;
reg   [2:0] c_0_reg_195;
wire   [0:0] icmp_ln10_fu_227_p2;
reg   [0:0] icmp_ln10_reg_792;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_792_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_792_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_792_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_792_pp0_iter4_reg;
wire   [8:0] add_ln10_fu_233_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln29_5_fu_259_p3;
reg   [4:0] select_ln29_5_reg_801;
wire   [2:0] select_ln36_fu_301_p3;
reg   [2:0] select_ln36_reg_807;
wire   [2:0] select_ln36_1_fu_309_p3;
reg   [2:0] select_ln36_1_reg_812;
wire   [63:0] zext_ln29_3_fu_363_p1;
reg   [63:0] zext_ln29_3_reg_819;
reg   [63:0] zext_ln29_3_reg_819_pp0_iter1_reg;
wire   [11:0] add_ln29_3_fu_396_p2;
reg   [11:0] add_ln29_3_reg_829;
wire   [2:0] c_fu_402_p2;
wire   [5:0] select_ln13_fu_414_p3;
reg   [31:0] conv_2_out_0_load_reg_844;
reg    ap_enable_reg_pp0_iter1;
wire   [63:0] zext_ln29_6_fu_445_p1;
reg   [63:0] zext_ln29_6_reg_851;
reg   [63:0] zext_ln29_6_reg_851_pp0_iter2_reg;
wire   [9:0] add_ln36_2_fu_466_p2;
reg   [9:0] add_ln36_2_reg_861;
reg   [9:0] add_ln36_2_reg_861_pp0_iter2_reg;
reg   [9:0] add_ln36_2_reg_861_pp0_iter3_reg;
reg   [9:0] add_ln36_2_reg_861_pp0_iter4_reg;
wire   [31:0] select_ln29_fu_513_p3;
reg   [31:0] select_ln29_reg_871;
reg   [31:0] conv_2_out_0_load_1_reg_878;
reg    ap_enable_reg_pp0_iter2;
wire   [31:0] select_ln29_1_fu_603_p3;
reg   [31:0] select_ln29_1_reg_890;
reg   [31:0] conv_2_out_1_load_reg_897;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] select_ln29_2_fu_692_p3;
reg   [31:0] select_ln29_2_reg_904;
reg   [31:0] conv_2_out_1_load_1_reg_911;
reg    ap_enable_reg_pp0_iter4;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter5;
reg   [4:0] ap_phi_mux_f_0_phi_fu_166_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_r_0_phi_fu_188_p4;
wire   [63:0] zext_ln36_5_fu_788_p1;
wire   [31:0] grp_fu_212_p1;
wire   [31:0] grp_fu_217_p1;
wire   [31:0] grp_fu_222_p1;
wire   [0:0] icmp_ln13_fu_245_p2;
wire   [4:0] f_fu_239_p2;
wire   [0:0] icmp_ln16_fu_277_p2;
wire   [0:0] xor_ln29_fu_271_p2;
wire   [2:0] select_ln29_4_fu_251_p3;
wire   [0:0] and_ln29_7_fu_283_p2;
wire   [0:0] or_ln36_fu_295_p2;
wire   [2:0] r_fu_289_p2;
wire   [2:0] mul_ln29_fu_321_p1;
wire   [3:0] shl_ln_fu_327_p3;
wire   [6:0] zext_ln29_1_fu_335_p1;
wire   [6:0] mul_ln29_fu_321_p2;
wire   [6:0] add_ln29_fu_339_p2;
wire   [10:0] tmp_1_fu_345_p3;
wire   [11:0] zext_ln36_2_fu_267_p1;
wire   [11:0] zext_ln29_2_fu_353_p1;
wire   [11:0] add_ln29_1_fu_357_p2;
wire   [3:0] or_ln27_fu_368_p2;
wire   [6:0] zext_ln29_4_fu_374_p1;
wire   [6:0] add_ln29_2_fu_378_p2;
wire   [10:0] tmp_13_fu_384_p3;
wire   [11:0] zext_ln29_5_fu_392_p1;
wire   [5:0] add_ln13_fu_408_p2;
wire   [4:0] tmp_fu_428_p3;
wire   [5:0] zext_ln36_4_fu_435_p1;
wire   [5:0] zext_ln36_3_fu_425_p1;
wire   [5:0] zext_ln36_1_fu_449_p1;
wire   [5:0] add_ln36_fu_439_p2;
wire   [5:0] add_ln36_1_fu_452_p2;
wire   [9:0] zext_ln36_fu_422_p1;
wire   [9:0] tmp_18_cast_fu_458_p3;
wire   [31:0] bitcast_ln29_fu_472_p1;
wire   [7:0] tmp_3_fu_475_p4;
wire   [22:0] trunc_ln29_fu_485_p1;
wire   [0:0] icmp_ln29_1_fu_495_p2;
wire   [0:0] icmp_ln29_fu_489_p2;
wire   [0:0] or_ln29_fu_501_p2;
wire   [0:0] grp_fu_206_p2;
wire   [0:0] and_ln29_fu_507_p2;
wire   [31:0] bitcast_ln29_1_fu_521_p1;
wire   [31:0] bitcast_ln29_2_fu_538_p1;
wire   [7:0] tmp_5_fu_524_p4;
wire   [22:0] trunc_ln29_1_fu_534_p1;
wire   [0:0] icmp_ln29_3_fu_561_p2;
wire   [0:0] icmp_ln29_2_fu_555_p2;
wire   [7:0] tmp_6_fu_541_p4;
wire   [22:0] trunc_ln29_2_fu_551_p1;
wire   [0:0] icmp_ln29_5_fu_579_p2;
wire   [0:0] icmp_ln29_4_fu_573_p2;
wire   [0:0] or_ln29_1_fu_567_p2;
wire   [0:0] or_ln29_2_fu_585_p2;
wire   [0:0] and_ln29_1_fu_591_p2;
wire   [0:0] grp_fu_212_p2;
wire   [0:0] and_ln29_2_fu_597_p2;
wire   [31:0] bitcast_ln29_3_fu_610_p1;
wire   [31:0] bitcast_ln29_4_fu_627_p1;
wire   [7:0] tmp_8_fu_613_p4;
wire   [22:0] trunc_ln29_3_fu_623_p1;
wire   [0:0] icmp_ln29_7_fu_650_p2;
wire   [0:0] icmp_ln29_6_fu_644_p2;
wire   [7:0] tmp_9_fu_630_p4;
wire   [22:0] trunc_ln29_4_fu_640_p1;
wire   [0:0] icmp_ln29_9_fu_668_p2;
wire   [0:0] icmp_ln29_8_fu_662_p2;
wire   [0:0] or_ln29_3_fu_656_p2;
wire   [0:0] or_ln29_4_fu_674_p2;
wire   [0:0] and_ln29_3_fu_680_p2;
wire   [0:0] grp_fu_217_p2;
wire   [0:0] and_ln29_4_fu_686_p2;
wire   [31:0] bitcast_ln29_5_fu_699_p1;
wire   [31:0] bitcast_ln29_6_fu_716_p1;
wire   [7:0] tmp_10_fu_702_p4;
wire   [22:0] trunc_ln29_5_fu_712_p1;
wire   [0:0] icmp_ln29_11_fu_739_p2;
wire   [0:0] icmp_ln29_10_fu_733_p2;
wire   [7:0] tmp_11_fu_719_p4;
wire   [22:0] trunc_ln29_6_fu_729_p1;
wire   [0:0] icmp_ln29_13_fu_757_p2;
wire   [0:0] icmp_ln29_12_fu_751_p2;
wire   [0:0] or_ln29_5_fu_745_p2;
wire   [0:0] or_ln29_6_fu_763_p2;
wire   [0:0] and_ln29_5_fu_769_p2;
wire   [0:0] grp_fu_222_p2;
wire   [0:0] and_ln29_6_fu_775_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state8;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [6:0] mul_ln29_fu_321_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U107(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_out_0_q0),
    .din1(32'd8388608),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_206_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U108(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_out_0_q1),
    .din1(grp_fu_212_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_212_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U109(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_out_1_q0),
    .din1(grp_fu_217_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_217_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U110(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_out_1_q1),
    .din1(grp_fu_222_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_222_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_195 <= c_fu_402_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_195 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_162 <= select_ln29_5_reg_801;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_162 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_151 <= add_ln10_fu_233_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_151 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_173 <= select_ln13_fu_414_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_173 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_184 <= select_ln36_1_reg_812;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_184 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln29_3_reg_829 <= add_ln29_3_fu_396_p2;
        select_ln36_reg_807 <= select_ln36_fu_301_p3;
        zext_ln29_3_reg_819[11 : 0] <= zext_ln29_3_fu_363_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_2_reg_861 <= add_ln36_2_fu_466_p2;
        zext_ln29_6_reg_851[11 : 0] <= zext_ln29_6_fu_445_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln36_2_reg_861_pp0_iter2_reg <= add_ln36_2_reg_861;
        add_ln36_2_reg_861_pp0_iter3_reg <= add_ln36_2_reg_861_pp0_iter2_reg;
        add_ln36_2_reg_861_pp0_iter4_reg <= add_ln36_2_reg_861_pp0_iter3_reg;
        icmp_ln10_reg_792_pp0_iter2_reg <= icmp_ln10_reg_792_pp0_iter1_reg;
        icmp_ln10_reg_792_pp0_iter3_reg <= icmp_ln10_reg_792_pp0_iter2_reg;
        icmp_ln10_reg_792_pp0_iter4_reg <= icmp_ln10_reg_792_pp0_iter3_reg;
        zext_ln29_6_reg_851_pp0_iter2_reg[11 : 0] <= zext_ln29_6_reg_851[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_2_out_0_load_1_reg_878 <= conv_2_out_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_2_out_0_load_reg_844 <= conv_2_out_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_792_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        conv_2_out_1_load_1_reg_911 <= conv_2_out_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_792_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        conv_2_out_1_load_reg_897 <= conv_2_out_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_792 <= icmp_ln10_fu_227_p2;
        icmp_ln10_reg_792_pp0_iter1_reg <= icmp_ln10_reg_792;
        zext_ln29_3_reg_819_pp0_iter1_reg[11 : 0] <= zext_ln29_3_reg_819[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_792_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_1_reg_890 <= select_ln29_1_fu_603_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_792_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_2_reg_904 <= select_ln29_2_fu_692_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_5_reg_801 <= select_ln29_5_fu_259_p3;
        select_ln36_1_reg_812 <= select_ln36_1_fu_309_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_792_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_871 <= select_ln29_fu_513_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_227_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_166_p4 = select_ln29_5_reg_801;
    end else begin
        ap_phi_mux_f_0_phi_fu_166_p4 = f_0_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_792 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_188_p4 = select_ln36_1_reg_812;
    end else begin
        ap_phi_mux_r_0_phi_fu_188_p4 = r_0_reg_184;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_2_out_0_ce0 = 1'b1;
    end else begin
        conv_2_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_2_out_0_ce1 = 1'b1;
    end else begin
        conv_2_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        conv_2_out_1_ce0 = 1'b1;
    end else begin
        conv_2_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        conv_2_out_1_ce1 = 1'b1;
    end else begin
        conv_2_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_792_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter4 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_233_p2 = (indvar_flatten13_reg_151 + 9'd1);

assign add_ln13_fu_408_p2 = (6'd1 + indvar_flatten_reg_173);

assign add_ln29_1_fu_357_p2 = (zext_ln36_2_fu_267_p1 + zext_ln29_2_fu_353_p1);

assign add_ln29_2_fu_378_p2 = (zext_ln29_4_fu_374_p1 + mul_ln29_fu_321_p2);

assign add_ln29_3_fu_396_p2 = (zext_ln36_2_fu_267_p1 + zext_ln29_5_fu_392_p1);

assign add_ln29_fu_339_p2 = (zext_ln29_1_fu_335_p1 + mul_ln29_fu_321_p2);

assign add_ln36_1_fu_452_p2 = (zext_ln36_1_fu_449_p1 + add_ln36_fu_439_p2);

assign add_ln36_2_fu_466_p2 = (zext_ln36_fu_422_p1 + tmp_18_cast_fu_458_p3);

assign add_ln36_fu_439_p2 = (zext_ln36_4_fu_435_p1 + zext_ln36_3_fu_425_p1);

assign and_ln29_1_fu_591_p2 = (or_ln29_2_fu_585_p2 & or_ln29_1_fu_567_p2);

assign and_ln29_2_fu_597_p2 = (grp_fu_212_p2 & and_ln29_1_fu_591_p2);

assign and_ln29_3_fu_680_p2 = (or_ln29_4_fu_674_p2 & or_ln29_3_fu_656_p2);

assign and_ln29_4_fu_686_p2 = (grp_fu_217_p2 & and_ln29_3_fu_680_p2);

assign and_ln29_5_fu_769_p2 = (or_ln29_6_fu_763_p2 & or_ln29_5_fu_745_p2);

assign and_ln29_6_fu_775_p2 = (grp_fu_222_p2 & and_ln29_5_fu_769_p2);

assign and_ln29_7_fu_283_p2 = (xor_ln29_fu_271_p2 & icmp_ln16_fu_277_p2);

assign and_ln29_fu_507_p2 = (or_ln29_fu_501_p2 & grp_fu_206_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_521_p1 = conv_2_out_0_load_1_reg_878;

assign bitcast_ln29_2_fu_538_p1 = select_ln29_reg_871;

assign bitcast_ln29_3_fu_610_p1 = conv_2_out_1_load_reg_897;

assign bitcast_ln29_4_fu_627_p1 = select_ln29_1_reg_890;

assign bitcast_ln29_5_fu_699_p1 = conv_2_out_1_load_1_reg_911;

assign bitcast_ln29_6_fu_716_p1 = select_ln29_2_reg_904;

assign bitcast_ln29_fu_472_p1 = conv_2_out_0_load_reg_844;

assign c_fu_402_p2 = (3'd1 + select_ln36_fu_301_p3);

assign conv_2_out_0_address0 = zext_ln29_3_fu_363_p1;

assign conv_2_out_0_address1 = zext_ln29_6_fu_445_p1;

assign conv_2_out_1_address0 = zext_ln29_3_reg_819_pp0_iter1_reg;

assign conv_2_out_1_address1 = zext_ln29_6_reg_851_pp0_iter2_reg;

assign f_fu_239_p2 = (5'd1 + ap_phi_mux_f_0_phi_fu_166_p4);

assign grp_fu_212_p1 = ((and_ln29_fu_507_p2[0:0] === 1'b1) ? conv_2_out_0_load_reg_844 : 32'd8388608);

assign grp_fu_217_p1 = ((and_ln29_2_fu_597_p2[0:0] === 1'b1) ? conv_2_out_0_load_1_reg_878 : select_ln29_reg_871);

assign grp_fu_222_p1 = ((and_ln29_4_fu_686_p2[0:0] === 1'b1) ? conv_2_out_1_load_reg_897 : select_ln29_1_reg_890);

assign icmp_ln10_fu_227_p2 = ((indvar_flatten13_reg_151 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_245_p2 = ((indvar_flatten_reg_173 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_277_p2 = ((c_0_reg_195 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_733_p2 = ((tmp_10_fu_702_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_739_p2 = ((trunc_ln29_5_fu_712_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_751_p2 = ((tmp_11_fu_719_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_757_p2 = ((trunc_ln29_6_fu_729_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_495_p2 = ((trunc_ln29_fu_485_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_555_p2 = ((tmp_5_fu_524_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_561_p2 = ((trunc_ln29_1_fu_534_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_573_p2 = ((tmp_6_fu_541_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_579_p2 = ((trunc_ln29_2_fu_551_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_644_p2 = ((tmp_8_fu_613_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_650_p2 = ((trunc_ln29_3_fu_623_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_662_p2 = ((tmp_9_fu_630_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_668_p2 = ((trunc_ln29_4_fu_640_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_489_p2 = ((tmp_3_fu_475_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_5_fu_788_p1;

assign max_pool_out_d0 = ((and_ln29_6_fu_775_p2[0:0] === 1'b1) ? conv_2_out_1_load_1_reg_911 : select_ln29_2_reg_904);

assign mul_ln29_fu_321_p1 = mul_ln29_fu_321_p10;

assign mul_ln29_fu_321_p10 = select_ln36_1_fu_309_p3;

assign mul_ln29_fu_321_p2 = (7'd11 * mul_ln29_fu_321_p1);

assign or_ln27_fu_368_p2 = (shl_ln_fu_327_p3 | 4'd1);

assign or_ln29_1_fu_567_p2 = (icmp_ln29_3_fu_561_p2 | icmp_ln29_2_fu_555_p2);

assign or_ln29_2_fu_585_p2 = (icmp_ln29_5_fu_579_p2 | icmp_ln29_4_fu_573_p2);

assign or_ln29_3_fu_656_p2 = (icmp_ln29_7_fu_650_p2 | icmp_ln29_6_fu_644_p2);

assign or_ln29_4_fu_674_p2 = (icmp_ln29_9_fu_668_p2 | icmp_ln29_8_fu_662_p2);

assign or_ln29_5_fu_745_p2 = (icmp_ln29_11_fu_739_p2 | icmp_ln29_10_fu_733_p2);

assign or_ln29_6_fu_763_p2 = (icmp_ln29_13_fu_757_p2 | icmp_ln29_12_fu_751_p2);

assign or_ln29_fu_501_p2 = (icmp_ln29_fu_489_p2 | icmp_ln29_1_fu_495_p2);

assign or_ln36_fu_295_p2 = (icmp_ln13_fu_245_p2 | and_ln29_7_fu_283_p2);

assign r_fu_289_p2 = (3'd1 + select_ln29_4_fu_251_p3);

assign select_ln13_fu_414_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? 6'd1 : add_ln13_fu_408_p2);

assign select_ln29_1_fu_603_p3 = ((and_ln29_2_fu_597_p2[0:0] === 1'b1) ? conv_2_out_0_load_1_reg_878 : select_ln29_reg_871);

assign select_ln29_2_fu_692_p3 = ((and_ln29_4_fu_686_p2[0:0] === 1'b1) ? conv_2_out_1_load_reg_897 : select_ln29_1_reg_890);

assign select_ln29_4_fu_251_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_r_0_phi_fu_188_p4);

assign select_ln29_5_fu_259_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? f_fu_239_p2 : ap_phi_mux_f_0_phi_fu_166_p4);

assign select_ln29_fu_513_p3 = ((and_ln29_fu_507_p2[0:0] === 1'b1) ? conv_2_out_0_load_reg_844 : 32'd8388608);

assign select_ln36_1_fu_309_p3 = ((and_ln29_7_fu_283_p2[0:0] === 1'b1) ? r_fu_289_p2 : select_ln29_4_fu_251_p3);

assign select_ln36_fu_301_p3 = ((or_ln36_fu_295_p2[0:0] === 1'b1) ? 3'd0 : c_0_reg_195);

assign shl_ln_fu_327_p3 = {{select_ln36_fu_301_p3}, {1'd0}};

assign tmp_10_fu_702_p4 = {{bitcast_ln29_5_fu_699_p1[30:23]}};

assign tmp_11_fu_719_p4 = {{bitcast_ln29_6_fu_716_p1[30:23]}};

assign tmp_13_fu_384_p3 = {{add_ln29_2_fu_378_p2}, {4'd0}};

assign tmp_18_cast_fu_458_p3 = {{add_ln36_1_fu_452_p2}, {4'd0}};

assign tmp_1_fu_345_p3 = {{add_ln29_fu_339_p2}, {4'd0}};

assign tmp_3_fu_475_p4 = {{bitcast_ln29_fu_472_p1[30:23]}};

assign tmp_5_fu_524_p4 = {{bitcast_ln29_1_fu_521_p1[30:23]}};

assign tmp_6_fu_541_p4 = {{bitcast_ln29_2_fu_538_p1[30:23]}};

assign tmp_8_fu_613_p4 = {{bitcast_ln29_3_fu_610_p1[30:23]}};

assign tmp_9_fu_630_p4 = {{bitcast_ln29_4_fu_627_p1[30:23]}};

assign tmp_fu_428_p3 = {{select_ln36_1_reg_812}, {2'd0}};

assign trunc_ln29_1_fu_534_p1 = bitcast_ln29_1_fu_521_p1[22:0];

assign trunc_ln29_2_fu_551_p1 = bitcast_ln29_2_fu_538_p1[22:0];

assign trunc_ln29_3_fu_623_p1 = bitcast_ln29_3_fu_610_p1[22:0];

assign trunc_ln29_4_fu_640_p1 = bitcast_ln29_4_fu_627_p1[22:0];

assign trunc_ln29_5_fu_712_p1 = bitcast_ln29_5_fu_699_p1[22:0];

assign trunc_ln29_6_fu_729_p1 = bitcast_ln29_6_fu_716_p1[22:0];

assign trunc_ln29_fu_485_p1 = bitcast_ln29_fu_472_p1[22:0];

assign xor_ln29_fu_271_p2 = (icmp_ln13_fu_245_p2 ^ 1'd1);

assign zext_ln29_1_fu_335_p1 = shl_ln_fu_327_p3;

assign zext_ln29_2_fu_353_p1 = tmp_1_fu_345_p3;

assign zext_ln29_3_fu_363_p1 = add_ln29_1_fu_357_p2;

assign zext_ln29_4_fu_374_p1 = or_ln27_fu_368_p2;

assign zext_ln29_5_fu_392_p1 = tmp_13_fu_384_p3;

assign zext_ln29_6_fu_445_p1 = add_ln29_3_reg_829;

assign zext_ln36_1_fu_449_p1 = select_ln36_reg_807;

assign zext_ln36_2_fu_267_p1 = select_ln29_5_fu_259_p3;

assign zext_ln36_3_fu_425_p1 = select_ln36_1_reg_812;

assign zext_ln36_4_fu_435_p1 = tmp_fu_428_p3;

assign zext_ln36_5_fu_788_p1 = add_ln36_2_reg_861_pp0_iter4_reg;

assign zext_ln36_fu_422_p1 = select_ln29_5_reg_801;

always @ (posedge ap_clk) begin
    zext_ln29_3_reg_819[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_3_reg_819_pp0_iter1_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_6_reg_851[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_6_reg_851_pp0_iter2_reg[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_2
