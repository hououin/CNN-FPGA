-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
generic (
    C_S_AXI_CRTL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CRTL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    cnn_input_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_EN_A : OUT STD_LOGIC;
    cnn_input_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    cnn_input_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    cnn_input_Clk_A : OUT STD_LOGIC;
    cnn_input_Rst_A : OUT STD_LOGIC;
    prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_EN_A : OUT STD_LOGIC;
    prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
    prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_Clk_A : OUT STD_LOGIC;
    prediction_Rst_A : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CRTL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CRTL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CRTL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CRTL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CRTL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CRTL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CRTL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CRTL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.393000,HLS_SYN_LAT=494360,HLS_SYN_TPT=none,HLS_SYN_MEM=102,HLS_SYN_DSP=80,HLS_SYN_FF=18892,HLS_SYN_LUT=23380,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (39 downto 0) := "0000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (39 downto 0) := "0000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (39 downto 0) := "0000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (39 downto 0) := "0000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (39 downto 0) := "0000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (39 downto 0) := "0000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (39 downto 0) := "0000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (39 downto 0) := "0001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (39 downto 0) := "0010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (39 downto 0) := "0100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (39 downto 0) := "1000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (39 downto 0) := "0000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal conv_1_out_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_ce0 : STD_LOGIC;
    signal conv_1_out_we0 : STD_LOGIC;
    signal conv_1_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_1_out_0_ce0 : STD_LOGIC;
    signal max_pool_1_out_0_we0 : STD_LOGIC;
    signal max_pool_1_out_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_0_ce1 : STD_LOGIC;
    signal max_pool_1_out_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_1_out_1_ce0 : STD_LOGIC;
    signal max_pool_1_out_1_we0 : STD_LOGIC;
    signal max_pool_1_out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_1_ce1 : STD_LOGIC;
    signal max_pool_1_out_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_1_out_2_ce0 : STD_LOGIC;
    signal max_pool_1_out_2_we0 : STD_LOGIC;
    signal max_pool_1_out_2_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_2_ce1 : STD_LOGIC;
    signal max_pool_1_out_2_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_1_out_3_ce0 : STD_LOGIC;
    signal max_pool_1_out_3_we0 : STD_LOGIC;
    signal max_pool_1_out_3_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_3_ce1 : STD_LOGIC;
    signal max_pool_1_out_3_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_1_out_4_ce0 : STD_LOGIC;
    signal max_pool_1_out_4_we0 : STD_LOGIC;
    signal max_pool_1_out_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_4_ce1 : STD_LOGIC;
    signal max_pool_1_out_4_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal max_pool_1_out_5_ce0 : STD_LOGIC;
    signal max_pool_1_out_5_we0 : STD_LOGIC;
    signal max_pool_1_out_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_1_out_5_ce1 : STD_LOGIC;
    signal max_pool_1_out_5_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_0_ce0 : STD_LOGIC;
    signal conv_2_out_0_we0 : STD_LOGIC;
    signal conv_2_out_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_0_ce1 : STD_LOGIC;
    signal conv_2_out_0_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_out_1_ce0 : STD_LOGIC;
    signal conv_2_out_1_we0 : STD_LOGIC;
    signal conv_2_out_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_1_ce1 : STD_LOGIC;
    signal conv_2_out_1_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal max_pool_2_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_ce0 : STD_LOGIC;
    signal max_pool_2_out_we0 : STD_LOGIC;
    signal max_pool_2_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal flat_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_ce0 : STD_LOGIC;
    signal flat_array_we0 : STD_LOGIC;
    signal flat_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_weights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_ce0 : STD_LOGIC;
    signal dense_1_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_ce0 : STD_LOGIC;
    signal dense_1_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_out_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_ce0 : STD_LOGIC;
    signal dense_1_out_we0 : STD_LOGIC;
    signal dense_1_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_weights_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_ce0 : STD_LOGIC;
    signal dense_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_bias_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_ce0 : STD_LOGIC;
    signal dense_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_out_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_ce0 : STD_LOGIC;
    signal dense_2_out_we0 : STD_LOGIC;
    signal dense_2_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_out_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_717_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_731 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal grp_fu_709_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal i_fu_753_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1066 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_759_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_1071 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln27_fu_789_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln27_reg_1076 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_fu_801_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_1084 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal icmp_ln25_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_816_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln27_reg_1094 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln28_fu_821_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_1099 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_1_fu_837_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_1107 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal zext_ln14_fu_843_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_1112 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_847_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_1118 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_1_fu_857_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_1_reg_1126 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln14_4_fu_868_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln14_4_reg_1131 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_2_fu_941_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_2_reg_1169 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal zext_ln14_4_fu_947_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_4_reg_1174 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_1_fu_935_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_1_fu_951_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_1_reg_1180 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_2_fu_961_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_2_reg_1188 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln13_1_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal conv_1_input_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_ce0 : STD_LOGIC;
    signal conv_1_input_we0 : STD_LOGIC;
    signal conv_1_input_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_2_fu_520_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_520_ap_done : STD_LOGIC;
    signal grp_conv_2_fu_520_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_520_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_520_conv_out_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_520_conv_out_0_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_conv_out_0_we0 : STD_LOGIC;
    signal grp_conv_2_fu_520_conv_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_2_fu_520_conv_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_520_conv_out_1_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_conv_out_1_we0 : STD_LOGIC;
    signal grp_conv_2_fu_520_conv_out_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_0_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_0_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_0_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_1_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_1_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_1_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_2_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_2_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_2_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_3_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_3_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_3_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_4_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_4_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_4_ce1 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_5_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_520_max_pool_1_out_5_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_conv_2_fu_520_max_pool_1_out_5_ce1 : STD_LOGIC;
    signal grp_dense_out_fu_650_ap_start : STD_LOGIC;
    signal grp_dense_out_fu_650_ap_done : STD_LOGIC;
    signal grp_dense_out_fu_650_ap_idle : STD_LOGIC;
    signal grp_dense_out_fu_650_ap_ready : STD_LOGIC;
    signal grp_dense_out_fu_650_prediction_Addr_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_out_fu_650_prediction_EN_A : STD_LOGIC;
    signal grp_dense_out_fu_650_prediction_WEN_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_dense_out_fu_650_prediction_Din_A : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_dense_out_fu_650_dense_2_out_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_dense_out_fu_650_dense_2_out_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_662_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_662_ap_done : STD_LOGIC;
    signal grp_max_pool_2_fu_662_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_662_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_662_max_pool_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_662_max_pool_out_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_662_max_pool_out_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_662_max_pool_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_2_fu_662_conv_2_out_0_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_662_conv_2_out_0_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_662_conv_2_out_0_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_662_conv_2_out_0_ce1 : STD_LOGIC;
    signal grp_max_pool_2_fu_662_conv_2_out_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_2_fu_662_conv_2_out_1_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_662_conv_2_out_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_2_fu_662_conv_2_out_1_ce1 : STD_LOGIC;
    signal grp_conv_1_fu_672_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_672_ap_done : STD_LOGIC;
    signal grp_conv_1_fu_672_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_672_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_672_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_672_input_r_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_672_conv_1_out_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_672_conv_1_out_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_672_conv_1_out_we0 : STD_LOGIC;
    signal grp_conv_1_fu_672_conv_1_out_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_683_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_683_ap_done : STD_LOGIC;
    signal grp_max_pool_1_fu_683_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_683_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_683_conv_out_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_683_conv_out_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_0_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_0_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_1_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_1_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_2_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_2_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_2_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_3_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_3_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_3_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_4_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_4_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_max_pool_1_fu_683_max_pool_out_5_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_5_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_683_max_pool_out_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flat_fu_701_ap_start : STD_LOGIC;
    signal grp_flat_fu_701_ap_done : STD_LOGIC;
    signal grp_flat_fu_701_ap_idle : STD_LOGIC;
    signal grp_flat_fu_701_ap_ready : STD_LOGIC;
    signal grp_flat_fu_701_flat_array_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_701_flat_array_ce0 : STD_LOGIC;
    signal grp_flat_fu_701_flat_array_we0 : STD_LOGIC;
    signal grp_flat_fu_701_flat_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_flat_fu_701_max_pool_2_out_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_701_max_pool_2_out_ce0 : STD_LOGIC;
    signal ix_in_0_reg_397 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_409 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_420 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_0_reg_430 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_0_i_reg_441 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal sum_0_i_reg_452 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i_reg_464 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_475 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i7_reg_486 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal sum_0_i11_reg_497 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_0_i12_reg_509 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_conv_2_fu_520_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal grp_dense_out_fu_650_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_max_pool_2_fu_662_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_conv_1_fu_672_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_max_pool_1_fu_683_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_flat_fu_701_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln27_1_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln27_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_7_fu_879_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_5_fu_863_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_fu_1007_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_6_fu_967_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal cnn_input_Addr_A_orig : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_709_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_709_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal grp_fu_717_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_fu_765_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_777_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln27_fu_773_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln27_2_fu_785_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln27_3_fu_812_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_fu_874_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal bitcast_ln19_fu_884_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_888_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_fu_898_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln19_1_fu_908_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_902_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_914_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_725_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_920_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_972_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_22_fu_984_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln14_8_fu_980_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_9_fu_992_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln14_fu_996_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln14_3_fu_1002_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln19_1_fu_1012_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_1016_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln19_1_fu_1026_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln19_3_fu_1036_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_2_fu_1030_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_1_fu_1042_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_1_fu_1048_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (39 downto 0);

    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_0_ce0 : OUT STD_LOGIC;
        conv_out_0_we0 : OUT STD_LOGIC;
        conv_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_out_1_ce0 : OUT STD_LOGIC;
        conv_out_1_we0 : OUT STD_LOGIC;
        conv_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_0_ce0 : OUT STD_LOGIC;
        max_pool_1_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_0_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_0_ce1 : OUT STD_LOGIC;
        max_pool_1_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_1_ce0 : OUT STD_LOGIC;
        max_pool_1_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_1_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_1_ce1 : OUT STD_LOGIC;
        max_pool_1_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_2_ce0 : OUT STD_LOGIC;
        max_pool_1_out_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_2_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_2_ce1 : OUT STD_LOGIC;
        max_pool_1_out_2_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_3_ce0 : OUT STD_LOGIC;
        max_pool_1_out_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_3_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_3_ce1 : OUT STD_LOGIC;
        max_pool_1_out_3_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_4_ce0 : OUT STD_LOGIC;
        max_pool_1_out_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_4_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_4_ce1 : OUT STD_LOGIC;
        max_pool_1_out_4_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_5_ce0 : OUT STD_LOGIC;
        max_pool_1_out_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_1_out_5_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_1_out_5_ce1 : OUT STD_LOGIC;
        max_pool_1_out_5_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component dense_out IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        prediction_Addr_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_EN_A : OUT STD_LOGIC;
        prediction_WEN_A : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_Din_A : OUT STD_LOGIC_VECTOR (31 downto 0);
        prediction_Dout_A : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_2_out_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        dense_2_out_ce0 : OUT STD_LOGIC;
        dense_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_ce0 : OUT STD_LOGIC;
        max_pool_out_we0 : OUT STD_LOGIC;
        max_pool_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        conv_2_out_0_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_2_out_0_ce0 : OUT STD_LOGIC;
        conv_2_out_0_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_2_out_0_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_2_out_0_ce1 : OUT STD_LOGIC;
        conv_2_out_0_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_2_out_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_2_out_1_ce0 : OUT STD_LOGIC;
        conv_2_out_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_2_out_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        conv_2_out_1_ce1 : OUT STD_LOGIC;
        conv_2_out_1_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        conv_1_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_1_out_ce0 : OUT STD_LOGIC;
        conv_1_out_we0 : OUT STD_LOGIC;
        conv_1_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_ce0 : OUT STD_LOGIC;
        conv_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_out_0_ce0 : OUT STD_LOGIC;
        max_pool_out_0_we0 : OUT STD_LOGIC;
        max_pool_out_0_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_out_1_ce0 : OUT STD_LOGIC;
        max_pool_out_1_we0 : OUT STD_LOGIC;
        max_pool_out_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_out_2_ce0 : OUT STD_LOGIC;
        max_pool_out_2_we0 : OUT STD_LOGIC;
        max_pool_out_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_out_3_ce0 : OUT STD_LOGIC;
        max_pool_out_3_we0 : OUT STD_LOGIC;
        max_pool_out_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_out_4_ce0 : OUT STD_LOGIC;
        max_pool_out_4_we0 : OUT STD_LOGIC;
        max_pool_out_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_out_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        max_pool_out_5_ce0 : OUT STD_LOGIC;
        max_pool_out_5_we0 : OUT STD_LOGIC;
        max_pool_out_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        flat_array_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_ce0 : OUT STD_LOGIC;
        flat_array_we0 : OUT STD_LOGIC;
        flat_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        max_pool_2_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_2_out_ce0 : OUT STD_LOGIC;
        max_pool_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fadd_32ns_32ncud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fmul_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_fcmp_32ns_32neOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_conv_1_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_max_pool_1_oubdk IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_conv_2_out_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_conv_2_out_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_max_pool_2_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_1_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_1_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_1_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_2_weights IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_dense_2_out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_conv_1_input IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cnn_CRTL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;



begin
    conv_1_out_U : component cnn_conv_1_out
    generic map (
        DataWidth => 32,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_out_address0,
        ce0 => conv_1_out_ce0,
        we0 => conv_1_out_we0,
        d0 => grp_conv_1_fu_672_conv_1_out_d0,
        q0 => conv_1_out_q0);

    max_pool_1_out_0_U : component cnn_max_pool_1_oubdk
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_0_address0,
        ce0 => max_pool_1_out_0_ce0,
        we0 => max_pool_1_out_0_we0,
        d0 => grp_max_pool_1_fu_683_max_pool_out_0_d0,
        q0 => max_pool_1_out_0_q0,
        address1 => grp_conv_2_fu_520_max_pool_1_out_0_address1,
        ce1 => max_pool_1_out_0_ce1,
        q1 => max_pool_1_out_0_q1);

    max_pool_1_out_1_U : component cnn_max_pool_1_oubdk
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_1_address0,
        ce0 => max_pool_1_out_1_ce0,
        we0 => max_pool_1_out_1_we0,
        d0 => grp_max_pool_1_fu_683_max_pool_out_1_d0,
        q0 => max_pool_1_out_1_q0,
        address1 => grp_conv_2_fu_520_max_pool_1_out_1_address1,
        ce1 => max_pool_1_out_1_ce1,
        q1 => max_pool_1_out_1_q1);

    max_pool_1_out_2_U : component cnn_max_pool_1_oubdk
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_2_address0,
        ce0 => max_pool_1_out_2_ce0,
        we0 => max_pool_1_out_2_we0,
        d0 => grp_max_pool_1_fu_683_max_pool_out_2_d0,
        q0 => max_pool_1_out_2_q0,
        address1 => grp_conv_2_fu_520_max_pool_1_out_2_address1,
        ce1 => max_pool_1_out_2_ce1,
        q1 => max_pool_1_out_2_q1);

    max_pool_1_out_3_U : component cnn_max_pool_1_oubdk
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_3_address0,
        ce0 => max_pool_1_out_3_ce0,
        we0 => max_pool_1_out_3_we0,
        d0 => grp_max_pool_1_fu_683_max_pool_out_3_d0,
        q0 => max_pool_1_out_3_q0,
        address1 => grp_conv_2_fu_520_max_pool_1_out_3_address1,
        ce1 => max_pool_1_out_3_ce1,
        q1 => max_pool_1_out_3_q1);

    max_pool_1_out_4_U : component cnn_max_pool_1_oubdk
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_4_address0,
        ce0 => max_pool_1_out_4_ce0,
        we0 => max_pool_1_out_4_we0,
        d0 => grp_max_pool_1_fu_683_max_pool_out_4_d0,
        q0 => max_pool_1_out_4_q0,
        address1 => grp_conv_2_fu_520_max_pool_1_out_4_address1,
        ce1 => max_pool_1_out_4_ce1,
        q1 => max_pool_1_out_4_q1);

    max_pool_1_out_5_U : component cnn_max_pool_1_oubdk
    generic map (
        DataWidth => 32,
        AddressRange => 169,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_1_out_5_address0,
        ce0 => max_pool_1_out_5_ce0,
        we0 => max_pool_1_out_5_we0,
        d0 => grp_max_pool_1_fu_683_max_pool_out_5_d0,
        q0 => max_pool_1_out_5_q0,
        address1 => grp_conv_2_fu_520_max_pool_1_out_5_address1,
        ce1 => max_pool_1_out_5_ce1,
        q1 => max_pool_1_out_5_q1);

    conv_2_out_0_U : component cnn_conv_2_out_0
    generic map (
        DataWidth => 32,
        AddressRange => 1056,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_2_out_0_address0,
        ce0 => conv_2_out_0_ce0,
        we0 => conv_2_out_0_we0,
        d0 => grp_conv_2_fu_520_conv_out_0_d0,
        q0 => conv_2_out_0_q0,
        address1 => grp_max_pool_2_fu_662_conv_2_out_0_address1,
        ce1 => conv_2_out_0_ce1,
        q1 => conv_2_out_0_q1);

    conv_2_out_1_U : component cnn_conv_2_out_1
    generic map (
        DataWidth => 32,
        AddressRange => 880,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_2_out_1_address0,
        ce0 => conv_2_out_1_ce0,
        we0 => conv_2_out_1_we0,
        d0 => grp_conv_2_fu_520_conv_out_1_d0,
        q0 => conv_2_out_1_q0,
        address1 => grp_max_pool_2_fu_662_conv_2_out_1_address1,
        ce1 => conv_2_out_1_ce1,
        q1 => conv_2_out_1_q1);

    max_pool_2_out_U : component cnn_max_pool_2_out
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => max_pool_2_out_address0,
        ce0 => max_pool_2_out_ce0,
        we0 => max_pool_2_out_we0,
        d0 => grp_max_pool_2_fu_662_max_pool_out_d0,
        q0 => max_pool_2_out_q0);

    flat_array_U : component cnn_max_pool_2_out
    generic map (
        DataWidth => 32,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => flat_array_address0,
        ce0 => flat_array_ce0,
        we0 => flat_array_we0,
        d0 => grp_flat_fu_701_flat_array_d0,
        q0 => flat_array_q0);

    dense_1_weights_U : component cnn_dense_1_weights
    generic map (
        DataWidth => 32,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_weights_address0,
        ce0 => dense_1_weights_ce0,
        q0 => dense_1_weights_q0);

    dense_1_bias_U : component cnn_dense_1_bias
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_bias_address0,
        ce0 => dense_1_bias_ce0,
        q0 => dense_1_bias_q0);

    dense_1_out_U : component cnn_dense_1_out
    generic map (
        DataWidth => 32,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_1_out_address0,
        ce0 => dense_1_out_ce0,
        we0 => dense_1_out_we0,
        d0 => dense_1_out_d0,
        q0 => dense_1_out_q0);

    dense_2_weights_U : component cnn_dense_2_weights
    generic map (
        DataWidth => 32,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_weights_address0,
        ce0 => dense_2_weights_ce0,
        q0 => dense_2_weights_q0);

    dense_2_bias_U : component cnn_dense_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_bias_address0,
        ce0 => dense_2_bias_ce0,
        q0 => dense_2_bias_q0);

    dense_2_out_U : component cnn_dense_2_out
    generic map (
        DataWidth => 32,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => dense_2_out_address0,
        ce0 => dense_2_out_ce0,
        we0 => dense_2_out_we0,
        d0 => dense_2_out_d0,
        q0 => dense_2_out_q0);

    cnn_CRTL_BUS_s_axi_U : component cnn_CRTL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CRTL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CRTL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CRTL_BUS_AWVALID,
        AWREADY => s_axi_CRTL_BUS_AWREADY,
        AWADDR => s_axi_CRTL_BUS_AWADDR,
        WVALID => s_axi_CRTL_BUS_WVALID,
        WREADY => s_axi_CRTL_BUS_WREADY,
        WDATA => s_axi_CRTL_BUS_WDATA,
        WSTRB => s_axi_CRTL_BUS_WSTRB,
        ARVALID => s_axi_CRTL_BUS_ARVALID,
        ARREADY => s_axi_CRTL_BUS_ARREADY,
        ARADDR => s_axi_CRTL_BUS_ARADDR,
        RVALID => s_axi_CRTL_BUS_RVALID,
        RREADY => s_axi_CRTL_BUS_RREADY,
        RDATA => s_axi_CRTL_BUS_RDATA,
        RRESP => s_axi_CRTL_BUS_RRESP,
        BVALID => s_axi_CRTL_BUS_BVALID,
        BREADY => s_axi_CRTL_BUS_BREADY,
        BRESP => s_axi_CRTL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    conv_1_input_U : component cnn_conv_1_input
    generic map (
        DataWidth => 32,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => conv_1_input_address0,
        ce0 => conv_1_input_ce0,
        we0 => conv_1_input_we0,
        d0 => cnn_input_Dout_A,
        q0 => conv_1_input_q0);

    grp_conv_2_fu_520 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_2_fu_520_ap_start,
        ap_done => grp_conv_2_fu_520_ap_done,
        ap_idle => grp_conv_2_fu_520_ap_idle,
        ap_ready => grp_conv_2_fu_520_ap_ready,
        conv_out_0_address0 => grp_conv_2_fu_520_conv_out_0_address0,
        conv_out_0_ce0 => grp_conv_2_fu_520_conv_out_0_ce0,
        conv_out_0_we0 => grp_conv_2_fu_520_conv_out_0_we0,
        conv_out_0_d0 => grp_conv_2_fu_520_conv_out_0_d0,
        conv_out_1_address0 => grp_conv_2_fu_520_conv_out_1_address0,
        conv_out_1_ce0 => grp_conv_2_fu_520_conv_out_1_ce0,
        conv_out_1_we0 => grp_conv_2_fu_520_conv_out_1_we0,
        conv_out_1_d0 => grp_conv_2_fu_520_conv_out_1_d0,
        max_pool_1_out_0_address0 => grp_conv_2_fu_520_max_pool_1_out_0_address0,
        max_pool_1_out_0_ce0 => grp_conv_2_fu_520_max_pool_1_out_0_ce0,
        max_pool_1_out_0_q0 => max_pool_1_out_0_q0,
        max_pool_1_out_0_address1 => grp_conv_2_fu_520_max_pool_1_out_0_address1,
        max_pool_1_out_0_ce1 => grp_conv_2_fu_520_max_pool_1_out_0_ce1,
        max_pool_1_out_0_q1 => max_pool_1_out_0_q1,
        max_pool_1_out_1_address0 => grp_conv_2_fu_520_max_pool_1_out_1_address0,
        max_pool_1_out_1_ce0 => grp_conv_2_fu_520_max_pool_1_out_1_ce0,
        max_pool_1_out_1_q0 => max_pool_1_out_1_q0,
        max_pool_1_out_1_address1 => grp_conv_2_fu_520_max_pool_1_out_1_address1,
        max_pool_1_out_1_ce1 => grp_conv_2_fu_520_max_pool_1_out_1_ce1,
        max_pool_1_out_1_q1 => max_pool_1_out_1_q1,
        max_pool_1_out_2_address0 => grp_conv_2_fu_520_max_pool_1_out_2_address0,
        max_pool_1_out_2_ce0 => grp_conv_2_fu_520_max_pool_1_out_2_ce0,
        max_pool_1_out_2_q0 => max_pool_1_out_2_q0,
        max_pool_1_out_2_address1 => grp_conv_2_fu_520_max_pool_1_out_2_address1,
        max_pool_1_out_2_ce1 => grp_conv_2_fu_520_max_pool_1_out_2_ce1,
        max_pool_1_out_2_q1 => max_pool_1_out_2_q1,
        max_pool_1_out_3_address0 => grp_conv_2_fu_520_max_pool_1_out_3_address0,
        max_pool_1_out_3_ce0 => grp_conv_2_fu_520_max_pool_1_out_3_ce0,
        max_pool_1_out_3_q0 => max_pool_1_out_3_q0,
        max_pool_1_out_3_address1 => grp_conv_2_fu_520_max_pool_1_out_3_address1,
        max_pool_1_out_3_ce1 => grp_conv_2_fu_520_max_pool_1_out_3_ce1,
        max_pool_1_out_3_q1 => max_pool_1_out_3_q1,
        max_pool_1_out_4_address0 => grp_conv_2_fu_520_max_pool_1_out_4_address0,
        max_pool_1_out_4_ce0 => grp_conv_2_fu_520_max_pool_1_out_4_ce0,
        max_pool_1_out_4_q0 => max_pool_1_out_4_q0,
        max_pool_1_out_4_address1 => grp_conv_2_fu_520_max_pool_1_out_4_address1,
        max_pool_1_out_4_ce1 => grp_conv_2_fu_520_max_pool_1_out_4_ce1,
        max_pool_1_out_4_q1 => max_pool_1_out_4_q1,
        max_pool_1_out_5_address0 => grp_conv_2_fu_520_max_pool_1_out_5_address0,
        max_pool_1_out_5_ce0 => grp_conv_2_fu_520_max_pool_1_out_5_ce0,
        max_pool_1_out_5_q0 => max_pool_1_out_5_q0,
        max_pool_1_out_5_address1 => grp_conv_2_fu_520_max_pool_1_out_5_address1,
        max_pool_1_out_5_ce1 => grp_conv_2_fu_520_max_pool_1_out_5_ce1,
        max_pool_1_out_5_q1 => max_pool_1_out_5_q1);

    grp_dense_out_fu_650 : component dense_out
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_dense_out_fu_650_ap_start,
        ap_done => grp_dense_out_fu_650_ap_done,
        ap_idle => grp_dense_out_fu_650_ap_idle,
        ap_ready => grp_dense_out_fu_650_ap_ready,
        prediction_Addr_A => grp_dense_out_fu_650_prediction_Addr_A,
        prediction_EN_A => grp_dense_out_fu_650_prediction_EN_A,
        prediction_WEN_A => grp_dense_out_fu_650_prediction_WEN_A,
        prediction_Din_A => grp_dense_out_fu_650_prediction_Din_A,
        prediction_Dout_A => ap_const_lv32_0,
        dense_2_out_address0 => grp_dense_out_fu_650_dense_2_out_address0,
        dense_2_out_ce0 => grp_dense_out_fu_650_dense_2_out_ce0,
        dense_2_out_q0 => dense_2_out_q0);

    grp_max_pool_2_fu_662 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_2_fu_662_ap_start,
        ap_done => grp_max_pool_2_fu_662_ap_done,
        ap_idle => grp_max_pool_2_fu_662_ap_idle,
        ap_ready => grp_max_pool_2_fu_662_ap_ready,
        max_pool_out_address0 => grp_max_pool_2_fu_662_max_pool_out_address0,
        max_pool_out_ce0 => grp_max_pool_2_fu_662_max_pool_out_ce0,
        max_pool_out_we0 => grp_max_pool_2_fu_662_max_pool_out_we0,
        max_pool_out_d0 => grp_max_pool_2_fu_662_max_pool_out_d0,
        conv_2_out_0_address0 => grp_max_pool_2_fu_662_conv_2_out_0_address0,
        conv_2_out_0_ce0 => grp_max_pool_2_fu_662_conv_2_out_0_ce0,
        conv_2_out_0_q0 => conv_2_out_0_q0,
        conv_2_out_0_address1 => grp_max_pool_2_fu_662_conv_2_out_0_address1,
        conv_2_out_0_ce1 => grp_max_pool_2_fu_662_conv_2_out_0_ce1,
        conv_2_out_0_q1 => conv_2_out_0_q1,
        conv_2_out_1_address0 => grp_max_pool_2_fu_662_conv_2_out_1_address0,
        conv_2_out_1_ce0 => grp_max_pool_2_fu_662_conv_2_out_1_ce0,
        conv_2_out_1_q0 => conv_2_out_1_q0,
        conv_2_out_1_address1 => grp_max_pool_2_fu_662_conv_2_out_1_address1,
        conv_2_out_1_ce1 => grp_max_pool_2_fu_662_conv_2_out_1_ce1,
        conv_2_out_1_q1 => conv_2_out_1_q1);

    grp_conv_1_fu_672 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_conv_1_fu_672_ap_start,
        ap_done => grp_conv_1_fu_672_ap_done,
        ap_idle => grp_conv_1_fu_672_ap_idle,
        ap_ready => grp_conv_1_fu_672_ap_ready,
        input_r_address0 => grp_conv_1_fu_672_input_r_address0,
        input_r_ce0 => grp_conv_1_fu_672_input_r_ce0,
        input_r_q0 => conv_1_input_q0,
        conv_1_out_address0 => grp_conv_1_fu_672_conv_1_out_address0,
        conv_1_out_ce0 => grp_conv_1_fu_672_conv_1_out_ce0,
        conv_1_out_we0 => grp_conv_1_fu_672_conv_1_out_we0,
        conv_1_out_d0 => grp_conv_1_fu_672_conv_1_out_d0);

    grp_max_pool_1_fu_683 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_max_pool_1_fu_683_ap_start,
        ap_done => grp_max_pool_1_fu_683_ap_done,
        ap_idle => grp_max_pool_1_fu_683_ap_idle,
        ap_ready => grp_max_pool_1_fu_683_ap_ready,
        conv_out_address0 => grp_max_pool_1_fu_683_conv_out_address0,
        conv_out_ce0 => grp_max_pool_1_fu_683_conv_out_ce0,
        conv_out_q0 => conv_1_out_q0,
        max_pool_out_0_address0 => grp_max_pool_1_fu_683_max_pool_out_0_address0,
        max_pool_out_0_ce0 => grp_max_pool_1_fu_683_max_pool_out_0_ce0,
        max_pool_out_0_we0 => grp_max_pool_1_fu_683_max_pool_out_0_we0,
        max_pool_out_0_d0 => grp_max_pool_1_fu_683_max_pool_out_0_d0,
        max_pool_out_1_address0 => grp_max_pool_1_fu_683_max_pool_out_1_address0,
        max_pool_out_1_ce0 => grp_max_pool_1_fu_683_max_pool_out_1_ce0,
        max_pool_out_1_we0 => grp_max_pool_1_fu_683_max_pool_out_1_we0,
        max_pool_out_1_d0 => grp_max_pool_1_fu_683_max_pool_out_1_d0,
        max_pool_out_2_address0 => grp_max_pool_1_fu_683_max_pool_out_2_address0,
        max_pool_out_2_ce0 => grp_max_pool_1_fu_683_max_pool_out_2_ce0,
        max_pool_out_2_we0 => grp_max_pool_1_fu_683_max_pool_out_2_we0,
        max_pool_out_2_d0 => grp_max_pool_1_fu_683_max_pool_out_2_d0,
        max_pool_out_3_address0 => grp_max_pool_1_fu_683_max_pool_out_3_address0,
        max_pool_out_3_ce0 => grp_max_pool_1_fu_683_max_pool_out_3_ce0,
        max_pool_out_3_we0 => grp_max_pool_1_fu_683_max_pool_out_3_we0,
        max_pool_out_3_d0 => grp_max_pool_1_fu_683_max_pool_out_3_d0,
        max_pool_out_4_address0 => grp_max_pool_1_fu_683_max_pool_out_4_address0,
        max_pool_out_4_ce0 => grp_max_pool_1_fu_683_max_pool_out_4_ce0,
        max_pool_out_4_we0 => grp_max_pool_1_fu_683_max_pool_out_4_we0,
        max_pool_out_4_d0 => grp_max_pool_1_fu_683_max_pool_out_4_d0,
        max_pool_out_5_address0 => grp_max_pool_1_fu_683_max_pool_out_5_address0,
        max_pool_out_5_ce0 => grp_max_pool_1_fu_683_max_pool_out_5_ce0,
        max_pool_out_5_we0 => grp_max_pool_1_fu_683_max_pool_out_5_we0,
        max_pool_out_5_d0 => grp_max_pool_1_fu_683_max_pool_out_5_d0);

    grp_flat_fu_701 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_flat_fu_701_ap_start,
        ap_done => grp_flat_fu_701_ap_done,
        ap_idle => grp_flat_fu_701_ap_idle,
        ap_ready => grp_flat_fu_701_ap_ready,
        flat_array_address0 => grp_flat_fu_701_flat_array_address0,
        flat_array_ce0 => grp_flat_fu_701_flat_array_ce0,
        flat_array_we0 => grp_flat_fu_701_flat_array_we0,
        flat_array_d0 => grp_flat_fu_701_flat_array_d0,
        max_pool_2_out_address0 => grp_flat_fu_701_max_pool_2_out_address0,
        max_pool_2_out_ce0 => grp_flat_fu_701_max_pool_2_out_ce0,
        max_pool_2_out_q0 => max_pool_2_out_q0);

    cnn_fadd_32ns_32ncud_U128 : component cnn_fadd_32ns_32ncud
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_709_p0,
        din1 => grp_fu_709_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_709_p2);

    cnn_fmul_32ns_32ndEe_U129 : component cnn_fmul_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_717_p0,
        din1 => grp_fu_717_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_717_p2);

    cnn_fcmp_32ns_32neOg_U130 : component cnn_fcmp_32ns_32neOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_709_p2,
        din1 => ap_const_lv32_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_4,
        dout => grp_fu_725_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_conv_1_fu_672_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_1_fu_672_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln23_fu_747_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_conv_1_fu_672_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_672_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_672_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_520_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_conv_2_fu_520_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    grp_conv_2_fu_520_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_520_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_520_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_out_fu_650_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_dense_out_fu_650_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln9_1_fu_935_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                    grp_dense_out_fu_650_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_out_fu_650_ap_ready = ap_const_logic_1)) then 
                    grp_dense_out_fu_650_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_701_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_flat_fu_701_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_flat_fu_701_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_701_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_701_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_683_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_1_fu_683_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                    grp_max_pool_1_fu_683_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_683_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_683_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_662_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_max_pool_2_fu_662_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_max_pool_2_fu_662_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_662_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_662_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_i7_reg_486_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_0_i7_reg_486 <= ap_const_lv5_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_0_i7_reg_486 <= i_2_reg_1169;
            end if; 
        end if;
    end process;

    i_0_i_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
                i_0_i_reg_441 <= i_1_reg_1107;
            elsif (((grp_flat_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i_0_i_reg_441 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_409_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_409 <= i_reg_1066;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_409 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_397_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ix_in_0_reg_397 <= ix_in_reg_1071;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_397 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                ix_in_1_reg_420 <= add_ln28_reg_1099;
            elsif (((icmp_ln23_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                ix_in_1_reg_420 <= ix_in_0_reg_397;
            end if; 
        end if;
    end process;

    j_0_i12_reg_509_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_0_i12_reg_509 <= j_2_reg_1188;
            elsif (((icmp_ln9_1_fu_935_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                j_0_i12_reg_509 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_464_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                j_0_i_reg_464 <= j_1_reg_1126;
            elsif (((icmp_ln9_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                j_0_i_reg_464 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_430 <= j_reg_1084;
            elsif (((icmp_ln23_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_430 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_475_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                phi_mul_reg_475 <= add_ln14_4_reg_1131;
            elsif (((icmp_ln9_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                phi_mul_reg_475 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    sum_0_i11_reg_497_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                sum_0_i11_reg_497 <= grp_fu_709_p2;
            elsif (((icmp_ln9_1_fu_935_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then 
                sum_0_i11_reg_497 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    sum_0_i_reg_452_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                sum_0_i_reg_452 <= grp_fu_709_p2;
            elsif (((icmp_ln9_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                sum_0_i_reg_452 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_851_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                add_ln14_4_reg_1131 <= add_ln14_4_fu_868_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_795_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln27_reg_1094 <= add_ln27_fu_816_p2;
                add_ln28_reg_1099 <= add_ln28_fu_821_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                i_1_reg_1107 <= i_1_fu_837_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_2_reg_1169 <= i_2_fu_941_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1066 <= i_fu_753_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln23_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                ix_in_reg_1071 <= ix_in_fu_759_p2;
                    sub_ln27_reg_1076(10 downto 2) <= sub_ln27_fu_789_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                j_1_reg_1126 <= j_1_fu_857_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                j_2_reg_1188 <= j_2_fu_961_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_1084 <= j_fu_801_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state17))) then
                reg_731 <= grp_fu_717_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state25))) then
                reg_742 <= grp_fu_709_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_1_fu_935_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    zext_ln13_1_reg_1180(4 downto 0) <= zext_ln13_1_fu_951_p1(4 downto 0);
                    zext_ln14_4_reg_1174(4 downto 0) <= zext_ln14_4_fu_947_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_831_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    zext_ln13_reg_1118(5 downto 0) <= zext_ln13_fu_847_p1(5 downto 0);
                    zext_ln14_reg_1112(5 downto 0) <= zext_ln14_fu_843_p1(5 downto 0);
            end if;
        end if;
    end process;
    sub_ln27_reg_1076(1 downto 0) <= "00";
    zext_ln14_reg_1112(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_1118(14 downto 6) <= "000000000";
    zext_ln14_4_reg_1174(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_1_reg_1180(11 downto 5) <= "0000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_747_p2, ap_CS_fsm_state3, icmp_ln25_fu_795_p2, ap_CS_fsm_state14, icmp_ln9_fu_831_p2, ap_CS_fsm_state15, icmp_ln13_fu_851_p2, ap_CS_fsm_state27, icmp_ln9_1_fu_935_p2, ap_CS_fsm_state28, icmp_ln13_1_fu_955_p2, grp_conv_2_fu_520_ap_done, grp_dense_out_fu_650_ap_done, grp_max_pool_2_fu_662_ap_done, grp_conv_1_fu_672_ap_done, grp_max_pool_1_fu_683_ap_done, grp_flat_fu_701_ap_done, ap_CS_fsm_state13, ap_CS_fsm_state9, ap_CS_fsm_state40, ap_CS_fsm_state11, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln23_fu_747_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_fu_795_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((grp_conv_1_fu_672_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((grp_max_pool_1_fu_683_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((grp_conv_2_fu_520_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_max_pool_2_fu_662_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_flat_fu_701_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                if (((icmp_ln9_fu_831_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln13_fu_851_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state27 => 
                if (((icmp_ln9_1_fu_935_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln13_1_fu_955_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state40 => 
                if (((grp_dense_out_fu_650_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln14_3_fu_1002_p2 <= std_logic_vector(unsigned(sub_ln14_fu_996_p2) + unsigned(zext_ln13_1_reg_1180));
    add_ln14_4_fu_868_p2 <= std_logic_vector(unsigned(phi_mul_reg_475) + unsigned(ap_const_lv15_32));
    add_ln14_fu_874_p2 <= std_logic_vector(unsigned(zext_ln13_reg_1118) + unsigned(phi_mul_reg_475));
    add_ln27_fu_816_p2 <= std_logic_vector(unsigned(sub_ln27_reg_1076) + unsigned(zext_ln27_3_fu_812_p1));
    add_ln28_fu_821_p2 <= std_logic_vector(unsigned(ix_in_1_reg_420) + unsigned(ap_const_lv10_1));
    and_ln19_1_fu_1048_p2 <= (or_ln19_1_fu_1042_p2 and grp_fu_725_p2);
    and_ln19_fu_920_p2 <= (or_ln19_fu_914_p2 and grp_fu_725_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(grp_dense_out_fu_650_ap_done, ap_CS_fsm_state40)
    begin
        if (((grp_dense_out_fu_650_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_dense_out_fu_650_ap_done, ap_CS_fsm_state40)
    begin
        if (((grp_dense_out_fu_650_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln19_1_fu_1012_p1 <= reg_742;
    bitcast_ln19_fu_884_p1 <= reg_742;
    cnn_input_Addr_A <= std_logic_vector(shift_left(unsigned(cnn_input_Addr_A_orig),to_integer(unsigned('0' & ap_const_lv32_2(31-1 downto 0)))));
    cnn_input_Addr_A_orig <= zext_ln27_1_fu_807_p1(32 - 1 downto 0);
    cnn_input_Clk_A <= ap_clk;
    cnn_input_Din_A <= ap_const_lv32_0;

    cnn_input_EN_A_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_EN_A <= ap_const_logic_1;
        else 
            cnn_input_EN_A <= ap_const_logic_0;
        end if; 
    end process;

    cnn_input_Rst_A <= ap_rst_n_inv;
    cnn_input_WEN_A <= ap_const_lv4_0;

    conv_1_input_address0_assign_proc : process(grp_conv_1_fu_672_input_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state5, sext_ln27_fu_827_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_1_input_address0 <= sext_ln27_fu_827_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_input_address0 <= grp_conv_1_fu_672_input_r_address0;
        else 
            conv_1_input_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_ce0_assign_proc : process(grp_conv_1_fu_672_input_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_1_input_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_input_ce0 <= grp_conv_1_fu_672_input_r_ce0;
        else 
            conv_1_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_1_input_we0 <= ap_const_logic_1;
        else 
            conv_1_input_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_address0_assign_proc : process(grp_conv_1_fu_672_conv_1_out_address0, grp_max_pool_1_fu_683_conv_out_address0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_1_out_address0 <= grp_max_pool_1_fu_683_conv_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_address0 <= grp_conv_1_fu_672_conv_1_out_address0;
        else 
            conv_1_out_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_ce0_assign_proc : process(grp_conv_1_fu_672_conv_1_out_ce0, grp_max_pool_1_fu_683_conv_out_ce0, ap_CS_fsm_state5, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_1_out_ce0 <= grp_max_pool_1_fu_683_conv_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_ce0 <= grp_conv_1_fu_672_conv_1_out_ce0;
        else 
            conv_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_we0_assign_proc : process(grp_conv_1_fu_672_conv_1_out_we0, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_1_out_we0 <= grp_conv_1_fu_672_conv_1_out_we0;
        else 
            conv_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_address0_assign_proc : process(grp_conv_2_fu_520_conv_out_0_address0, grp_max_pool_2_fu_662_conv_2_out_0_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_out_0_address0 <= grp_max_pool_2_fu_662_conv_2_out_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_2_out_0_address0 <= grp_conv_2_fu_520_conv_out_0_address0;
        else 
            conv_2_out_0_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_0_ce0_assign_proc : process(grp_conv_2_fu_520_conv_out_0_ce0, grp_max_pool_2_fu_662_conv_2_out_0_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_out_0_ce0 <= grp_max_pool_2_fu_662_conv_2_out_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_2_out_0_ce0 <= grp_conv_2_fu_520_conv_out_0_ce0;
        else 
            conv_2_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_ce1_assign_proc : process(grp_max_pool_2_fu_662_conv_2_out_0_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_out_0_ce1 <= grp_max_pool_2_fu_662_conv_2_out_0_ce1;
        else 
            conv_2_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_0_we0_assign_proc : process(grp_conv_2_fu_520_conv_out_0_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_2_out_0_we0 <= grp_conv_2_fu_520_conv_out_0_we0;
        else 
            conv_2_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_address0_assign_proc : process(grp_conv_2_fu_520_conv_out_1_address0, grp_max_pool_2_fu_662_conv_2_out_1_address0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_out_1_address0 <= grp_max_pool_2_fu_662_conv_2_out_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_2_out_1_address0 <= grp_conv_2_fu_520_conv_out_1_address0;
        else 
            conv_2_out_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_1_ce0_assign_proc : process(grp_conv_2_fu_520_conv_out_1_ce0, grp_max_pool_2_fu_662_conv_2_out_1_ce0, ap_CS_fsm_state9, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_out_1_ce0 <= grp_max_pool_2_fu_662_conv_2_out_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_2_out_1_ce0 <= grp_conv_2_fu_520_conv_out_1_ce0;
        else 
            conv_2_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_ce1_assign_proc : process(grp_max_pool_2_fu_662_conv_2_out_1_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            conv_2_out_1_ce1 <= grp_max_pool_2_fu_662_conv_2_out_1_ce1;
        else 
            conv_2_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_1_we0_assign_proc : process(grp_conv_2_fu_520_conv_out_1_we0, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            conv_2_out_1_we0 <= grp_conv_2_fu_520_conv_out_1_we0;
        else 
            conv_2_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_bias_address0 <= zext_ln14_reg_1112(6 - 1 downto 0);

    dense_1_bias_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_1_bias_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_address0_assign_proc : process(zext_ln14_reg_1112, ap_CS_fsm_state28, ap_CS_fsm_state26, zext_ln14_6_fu_967_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_1_out_address0 <= zext_ln14_6_fu_967_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_1_out_address0 <= zext_ln14_reg_1112(6 - 1 downto 0);
        else 
            dense_1_out_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_ce0_assign_proc : process(ap_CS_fsm_state28, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            dense_1_out_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_d0 <= 
        ap_const_lv32_0 when (and_ln19_fu_920_p2(0) = '1') else 
        reg_742;

    dense_1_out_we0_assign_proc : process(ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_1_out_we0 <= ap_const_logic_1;
        else 
            dense_1_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_address0 <= zext_ln14_7_fu_879_p1(15 - 1 downto 0);

    dense_1_weights_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_1_weights_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_address0 <= zext_ln14_4_reg_1174(5 - 1 downto 0);

    dense_2_bias_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_2_bias_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_address0_assign_proc : process(zext_ln14_4_reg_1174, grp_dense_out_fu_650_dense_2_out_address0, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_2_out_address0 <= zext_ln14_4_reg_1174(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_2_out_address0 <= grp_dense_out_fu_650_dense_2_out_address0;
        else 
            dense_2_out_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_ce0_assign_proc : process(grp_dense_out_fu_650_dense_2_out_ce0, ap_CS_fsm_state39, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_2_out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_2_out_ce0 <= grp_dense_out_fu_650_dense_2_out_ce0;
        else 
            dense_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_out_d0 <= 
        ap_const_lv32_0 when (and_ln19_1_fu_1048_p2(0) = '1') else 
        reg_742;

    dense_2_out_we0_assign_proc : process(ap_CS_fsm_state39)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_2_out_we0 <= ap_const_logic_1;
        else 
            dense_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_address0 <= sext_ln14_fu_1007_p1(11 - 1 downto 0);

    dense_2_weights_ce0_assign_proc : process(ap_CS_fsm_state28)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_2_weights_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_address0_assign_proc : process(ap_CS_fsm_state15, grp_flat_fu_701_flat_array_address0, ap_CS_fsm_state13, zext_ln14_5_fu_863_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            flat_array_address0 <= zext_ln14_5_fu_863_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flat_array_address0 <= grp_flat_fu_701_flat_array_address0;
        else 
            flat_array_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_ce0_assign_proc : process(ap_CS_fsm_state15, grp_flat_fu_701_flat_array_ce0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            flat_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flat_array_ce0 <= grp_flat_fu_701_flat_array_ce0;
        else 
            flat_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_we0_assign_proc : process(grp_flat_fu_701_flat_array_we0, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            flat_array_we0 <= grp_flat_fu_701_flat_array_we0;
        else 
            flat_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_672_ap_start <= grp_conv_1_fu_672_ap_start_reg;
    grp_conv_2_fu_520_ap_start <= grp_conv_2_fu_520_ap_start_reg;
    grp_dense_out_fu_650_ap_start <= grp_dense_out_fu_650_ap_start_reg;
    grp_flat_fu_701_ap_start <= grp_flat_fu_701_ap_start_reg;

    grp_fu_709_p0_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state35, sum_0_i_reg_452, sum_0_i11_reg_497, ap_CS_fsm_state18, ap_CS_fsm_state31)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            grp_fu_709_p0 <= sum_0_i11_reg_497;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_709_p0 <= sum_0_i_reg_452;
        else 
            grp_fu_709_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_709_p1_assign_proc : process(dense_1_bias_q0, dense_2_bias_q0, reg_731, ap_CS_fsm_state22, ap_CS_fsm_state35, ap_CS_fsm_state18, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            grp_fu_709_p1 <= dense_2_bias_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_709_p1 <= dense_1_bias_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_fu_709_p1 <= reg_731;
        else 
            grp_fu_709_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_717_p0_assign_proc : process(flat_array_q0, dense_1_out_q0, ap_CS_fsm_state16, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_717_p0 <= dense_1_out_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_717_p0 <= flat_array_q0;
        else 
            grp_fu_717_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_717_p1_assign_proc : process(dense_1_weights_q0, dense_2_weights_q0, ap_CS_fsm_state16, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_fu_717_p1 <= dense_2_weights_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            grp_fu_717_p1 <= dense_1_weights_q0;
        else 
            grp_fu_717_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_max_pool_1_fu_683_ap_start <= grp_max_pool_1_fu_683_ap_start_reg;
    grp_max_pool_2_fu_662_ap_start <= grp_max_pool_2_fu_662_ap_start_reg;
    i_1_fu_837_p2 <= std_logic_vector(unsigned(i_0_i_reg_441) + unsigned(ap_const_lv6_1));
    i_2_fu_941_p2 <= std_logic_vector(unsigned(i_0_i7_reg_486) + unsigned(ap_const_lv5_1));
    i_fu_753_p2 <= std_logic_vector(unsigned(i_0_reg_409) + unsigned(ap_const_lv5_1));
    icmp_ln13_1_fu_955_p2 <= "1" when (j_0_i12_reg_509 = ap_const_lv6_32) else "0";
    icmp_ln13_fu_851_p2 <= "1" when (j_0_i_reg_464 = ap_const_lv9_190) else "0";
    icmp_ln19_1_fu_908_p2 <= "1" when (trunc_ln19_fu_898_p1 = ap_const_lv23_0) else "0";
    icmp_ln19_2_fu_1030_p2 <= "0" when (tmp_15_fu_1016_p4 = ap_const_lv8_FF) else "1";
    icmp_ln19_3_fu_1036_p2 <= "1" when (trunc_ln19_1_fu_1026_p1 = ap_const_lv23_0) else "0";
    icmp_ln19_fu_902_p2 <= "0" when (tmp_fu_888_p4 = ap_const_lv8_FF) else "1";
    icmp_ln23_fu_747_p2 <= "1" when (i_0_reg_409 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_795_p2 <= "1" when (j_0_reg_430 = ap_const_lv5_1C) else "0";
    icmp_ln9_1_fu_935_p2 <= "1" when (i_0_i7_reg_486 = ap_const_lv5_1E) else "0";
    icmp_ln9_fu_831_p2 <= "1" when (i_0_i_reg_441 = ap_const_lv6_32) else "0";
    ix_in_fu_759_p2 <= std_logic_vector(unsigned(ix_in_0_reg_397) + unsigned(ap_const_lv10_1C));
    j_1_fu_857_p2 <= std_logic_vector(unsigned(j_0_i_reg_464) + unsigned(ap_const_lv9_1));
    j_2_fu_961_p2 <= std_logic_vector(unsigned(j_0_i12_reg_509) + unsigned(ap_const_lv6_1));
    j_fu_801_p2 <= std_logic_vector(unsigned(j_0_reg_430) + unsigned(ap_const_lv5_1));

    max_pool_1_out_0_address0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_0_address0, grp_max_pool_1_fu_683_max_pool_out_0_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_0_address0 <= grp_max_pool_1_fu_683_max_pool_out_0_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_0_address0 <= grp_conv_2_fu_520_max_pool_1_out_0_address0;
        else 
            max_pool_1_out_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_0_ce0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_0_ce0, grp_max_pool_1_fu_683_max_pool_out_0_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_0_ce0 <= grp_max_pool_1_fu_683_max_pool_out_0_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_0_ce0 <= grp_conv_2_fu_520_max_pool_1_out_0_ce0;
        else 
            max_pool_1_out_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_0_ce1_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_0_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_0_ce1 <= grp_conv_2_fu_520_max_pool_1_out_0_ce1;
        else 
            max_pool_1_out_0_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_0_we0_assign_proc : process(grp_max_pool_1_fu_683_max_pool_out_0_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_0_we0 <= grp_max_pool_1_fu_683_max_pool_out_0_we0;
        else 
            max_pool_1_out_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_1_address0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_1_address0, grp_max_pool_1_fu_683_max_pool_out_1_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_1_address0 <= grp_max_pool_1_fu_683_max_pool_out_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_1_address0 <= grp_conv_2_fu_520_max_pool_1_out_1_address0;
        else 
            max_pool_1_out_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_1_ce0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_1_ce0, grp_max_pool_1_fu_683_max_pool_out_1_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_1_ce0 <= grp_max_pool_1_fu_683_max_pool_out_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_1_ce0 <= grp_conv_2_fu_520_max_pool_1_out_1_ce0;
        else 
            max_pool_1_out_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_1_ce1_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_1_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_1_ce1 <= grp_conv_2_fu_520_max_pool_1_out_1_ce1;
        else 
            max_pool_1_out_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_1_we0_assign_proc : process(grp_max_pool_1_fu_683_max_pool_out_1_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_1_we0 <= grp_max_pool_1_fu_683_max_pool_out_1_we0;
        else 
            max_pool_1_out_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_2_address0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_2_address0, grp_max_pool_1_fu_683_max_pool_out_2_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_2_address0 <= grp_max_pool_1_fu_683_max_pool_out_2_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_2_address0 <= grp_conv_2_fu_520_max_pool_1_out_2_address0;
        else 
            max_pool_1_out_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_2_ce0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_2_ce0, grp_max_pool_1_fu_683_max_pool_out_2_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_2_ce0 <= grp_max_pool_1_fu_683_max_pool_out_2_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_2_ce0 <= grp_conv_2_fu_520_max_pool_1_out_2_ce0;
        else 
            max_pool_1_out_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_2_ce1_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_2_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_2_ce1 <= grp_conv_2_fu_520_max_pool_1_out_2_ce1;
        else 
            max_pool_1_out_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_2_we0_assign_proc : process(grp_max_pool_1_fu_683_max_pool_out_2_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_2_we0 <= grp_max_pool_1_fu_683_max_pool_out_2_we0;
        else 
            max_pool_1_out_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_3_address0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_3_address0, grp_max_pool_1_fu_683_max_pool_out_3_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_3_address0 <= grp_max_pool_1_fu_683_max_pool_out_3_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_3_address0 <= grp_conv_2_fu_520_max_pool_1_out_3_address0;
        else 
            max_pool_1_out_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_3_ce0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_3_ce0, grp_max_pool_1_fu_683_max_pool_out_3_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_3_ce0 <= grp_max_pool_1_fu_683_max_pool_out_3_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_3_ce0 <= grp_conv_2_fu_520_max_pool_1_out_3_ce0;
        else 
            max_pool_1_out_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_3_ce1_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_3_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_3_ce1 <= grp_conv_2_fu_520_max_pool_1_out_3_ce1;
        else 
            max_pool_1_out_3_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_3_we0_assign_proc : process(grp_max_pool_1_fu_683_max_pool_out_3_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_3_we0 <= grp_max_pool_1_fu_683_max_pool_out_3_we0;
        else 
            max_pool_1_out_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_4_address0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_4_address0, grp_max_pool_1_fu_683_max_pool_out_4_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_4_address0 <= grp_max_pool_1_fu_683_max_pool_out_4_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_4_address0 <= grp_conv_2_fu_520_max_pool_1_out_4_address0;
        else 
            max_pool_1_out_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_4_ce0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_4_ce0, grp_max_pool_1_fu_683_max_pool_out_4_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_4_ce0 <= grp_max_pool_1_fu_683_max_pool_out_4_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_4_ce0 <= grp_conv_2_fu_520_max_pool_1_out_4_ce0;
        else 
            max_pool_1_out_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_4_ce1_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_4_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_4_ce1 <= grp_conv_2_fu_520_max_pool_1_out_4_ce1;
        else 
            max_pool_1_out_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_4_we0_assign_proc : process(grp_max_pool_1_fu_683_max_pool_out_4_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_4_we0 <= grp_max_pool_1_fu_683_max_pool_out_4_we0;
        else 
            max_pool_1_out_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_5_address0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_5_address0, grp_max_pool_1_fu_683_max_pool_out_5_address0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_5_address0 <= grp_max_pool_1_fu_683_max_pool_out_5_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_5_address0 <= grp_conv_2_fu_520_max_pool_1_out_5_address0;
        else 
            max_pool_1_out_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_5_ce0_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_5_ce0, grp_max_pool_1_fu_683_max_pool_out_5_ce0, ap_CS_fsm_state9, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_5_ce0 <= grp_max_pool_1_fu_683_max_pool_out_5_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_5_ce0 <= grp_conv_2_fu_520_max_pool_1_out_5_ce0;
        else 
            max_pool_1_out_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_5_ce1_assign_proc : process(grp_conv_2_fu_520_max_pool_1_out_5_ce1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            max_pool_1_out_5_ce1 <= grp_conv_2_fu_520_max_pool_1_out_5_ce1;
        else 
            max_pool_1_out_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_5_we0_assign_proc : process(grp_max_pool_1_fu_683_max_pool_out_5_we0, ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            max_pool_1_out_5_we0 <= grp_max_pool_1_fu_683_max_pool_out_5_we0;
        else 
            max_pool_1_out_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_address0_assign_proc : process(grp_max_pool_2_fu_662_max_pool_out_address0, grp_flat_fu_701_max_pool_2_out_address0, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            max_pool_2_out_address0 <= grp_flat_fu_701_max_pool_2_out_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_2_out_address0 <= grp_max_pool_2_fu_662_max_pool_out_address0;
        else 
            max_pool_2_out_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_ce0_assign_proc : process(grp_max_pool_2_fu_662_max_pool_out_ce0, grp_flat_fu_701_max_pool_2_out_ce0, ap_CS_fsm_state13, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            max_pool_2_out_ce0 <= grp_flat_fu_701_max_pool_2_out_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_2_out_ce0 <= grp_max_pool_2_fu_662_max_pool_out_ce0;
        else 
            max_pool_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_we0_assign_proc : process(grp_max_pool_2_fu_662_max_pool_out_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_2_out_we0 <= grp_max_pool_2_fu_662_max_pool_out_we0;
        else 
            max_pool_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_1_fu_1042_p2 <= (icmp_ln19_3_fu_1036_p2 or icmp_ln19_2_fu_1030_p2);
    or_ln19_fu_914_p2 <= (icmp_ln19_fu_902_p2 or icmp_ln19_1_fu_908_p2);
    prediction_Addr_A <= grp_dense_out_fu_650_prediction_Addr_A;
    prediction_Clk_A <= ap_clk;
    prediction_Din_A <= grp_dense_out_fu_650_prediction_Din_A;
    prediction_EN_A <= grp_dense_out_fu_650_prediction_EN_A;
    prediction_Rst_A <= ap_rst_n_inv;
    prediction_WEN_A <= grp_dense_out_fu_650_prediction_WEN_A;
        sext_ln14_fu_1007_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln14_3_fu_1002_p2),64));

        sext_ln27_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln27_reg_1094),64));

    sub_ln14_fu_996_p2 <= std_logic_vector(unsigned(zext_ln14_8_fu_980_p1) - unsigned(zext_ln14_9_fu_992_p1));
    sub_ln27_fu_789_p2 <= std_logic_vector(unsigned(zext_ln27_fu_773_p1) - unsigned(zext_ln27_2_fu_785_p1));
    tmp_15_fu_1016_p4 <= bitcast_ln19_1_fu_1012_p1(30 downto 23);
    tmp_19_fu_765_p3 <= (i_0_reg_409 & ap_const_lv5_0);
    tmp_20_fu_777_p3 <= (i_0_reg_409 & ap_const_lv2_0);
    tmp_21_fu_972_p3 <= (j_0_i12_reg_509 & ap_const_lv5_0);
    tmp_22_fu_984_p3 <= (j_0_i12_reg_509 & ap_const_lv1_0);
    tmp_fu_888_p4 <= bitcast_ln19_fu_884_p1(30 downto 23);
    trunc_ln19_1_fu_1026_p1 <= bitcast_ln19_1_fu_1012_p1(23 - 1 downto 0);
    trunc_ln19_fu_898_p1 <= bitcast_ln19_fu_884_p1(23 - 1 downto 0);
    zext_ln13_1_fu_951_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i7_reg_486),12));
    zext_ln13_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_441),15));
    zext_ln14_4_fu_947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i7_reg_486),64));
    zext_ln14_5_fu_863_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_464),64));
    zext_ln14_6_fu_967_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i12_reg_509),64));
    zext_ln14_7_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln14_fu_874_p2),64));
    zext_ln14_8_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_972_p3),12));
    zext_ln14_9_fu_992_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_984_p3),12));
    zext_ln14_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_441),64));
    zext_ln27_1_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_420),64));
    zext_ln27_2_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_777_p3),11));
    zext_ln27_3_fu_812_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_430),11));
    zext_ln27_fu_773_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_765_p3),11));
end behav;
