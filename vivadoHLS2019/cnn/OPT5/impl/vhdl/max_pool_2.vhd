-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_2_out_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_2_out_ce0 : OUT STD_LOGIC;
    max_pool_2_out_we0 : OUT STD_LOGIC;
    max_pool_2_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_2_out_ce0 : OUT STD_LOGIC;
    conv_2_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_2_out_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_2_out_ce1 : OUT STD_LOGIC;
    conv_2_out_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_800000 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_130 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_141 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten22_reg_152 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_0_reg_164 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_175 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_186 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_0_reg_197 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_0_reg_209 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_820 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln10_reg_820_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_245_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln10_reg_824 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_829 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_3_fu_271_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_3_reg_834 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln13_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_reg_840 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_2_fu_365_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_2_reg_845 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln16_1_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_reg_852 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_1_fu_425_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_1_reg_857 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_4_fu_471_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln16_4_reg_862 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln16_fu_549_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln16_reg_878 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_fu_555_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln16_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state5_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal conv_2_out_load_reg_890 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_out_load_1_reg_897 : STD_LOGIC_VECTOR (31 downto 0);
    signal mpr_fu_563_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_904 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_5_fu_568_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_5_reg_910 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_5_fu_580_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln13_5_reg_915 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_fu_692_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln29_reg_920 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln20_1_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_927 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_2_fu_721_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln36_2_reg_931 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln29_1_fu_809_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten59_phi_fu_134_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_145_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten22_phi_fu_156_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_r_0_phi_fu_168_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_179_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_c_0_phi_fu_190_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_max_0_phi_fu_201_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_phi_mux_mpr_0_phi_fu_213_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln29_1_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_2_fu_544_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln36_3_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln1_fu_225_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_fu_251_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_283_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln20_fu_305_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_263_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_5_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_329_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln26_mid1_fu_349_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_4_fu_291_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln27_fu_233_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln13_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_4_fu_311_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_395_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_341_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln13_fu_401_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_407_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln27_mid1_fu_433_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_3_fu_373_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_2_fu_441_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln27_1_fu_453_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_4_fu_381_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_3_fu_459_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln20_fu_479_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_1_fu_357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_483_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_493_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln29_fu_493_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln16_fu_449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln29_fu_499_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_505_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln26_1_fu_279_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_1_fu_513_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln16_1_fu_467_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln29_2_fu_524_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_cast_fu_530_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln29_3_fu_538_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln13_1_fu_574_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_593_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln36_fu_590_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_2_fu_600_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bitcast_ln29_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_1_fu_627_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_613_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_fu_623_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_1_fu_650_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_630_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_1_fu_640_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_3_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_2_fu_662_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_fu_656_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_1_fu_674_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_fu_686_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln36_fu_604_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln36_1_fu_704_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln36_1_fu_707_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_cast_fu_713_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_fu_587_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal bitcast_ln29_2_fu_727_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln29_3_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_730_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_2_fu_740_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_5_fu_767_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_4_fu_761_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_747_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln29_3_fu_757_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln29_7_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln29_6_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_2_fu_773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln29_3_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_2_fu_797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_3_fu_803_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln29_fu_493_p10 : STD_LOGIC_VECTOR (7 downto 0);

    component cnn_fcmp_32ns_32ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    cnn_fcmp_32ns_32ndEe_U128 : component cnn_fcmp_32ns_32ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_220_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_186 <= select_ln16_4_reg_862;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_186 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_141 <= select_ln29_3_reg_834;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_141 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten22_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten22_reg_152 <= select_ln13_5_reg_915;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_reg_152 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten59_reg_130 <= add_ln10_reg_824;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_130 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_175 <= select_ln16_5_reg_910;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_175 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    max_0_reg_197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_820_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                max_0_reg_197 <= select_ln29_1_fu_809_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_197 <= ap_const_lv32_800000;
            end if; 
        end if;
    end process;

    mpr_0_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_209 <= mpr_reg_904;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_209 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_164 <= select_ln13_2_reg_845;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_164 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_824 <= add_ln10_fu_245_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln16_reg_878 <= add_ln16_fu_549_p2;
                icmp_ln13_reg_829 <= icmp_ln13_fu_257_p2;
                or_ln13_reg_840 <= or_ln13_fu_335_p2;
                or_ln16_1_reg_852 <= or_ln16_1_fu_419_p2;
                select_ln16_1_reg_857 <= select_ln16_1_fu_425_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_1_fu_699_p2 = ap_const_lv1_1))) then
                add_ln36_2_reg_931 <= add_ln36_2_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                conv_2_out_load_1_reg_897 <= conv_2_out_q1;
                conv_2_out_load_reg_890 <= conv_2_out_q0;
                mpr_reg_904 <= mpr_fu_563_p2;
                select_ln13_5_reg_915 <= select_ln13_5_fu_580_p3;
                select_ln16_5_reg_910 <= select_ln16_5_fu_568_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_820 <= icmp_ln10_fu_239_p2;
                icmp_ln10_reg_820_pp0_iter1_reg <= icmp_ln10_reg_820;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_1_reg_927 <= icmp_ln20_1_fu_699_p2;
                select_ln29_reg_920 <= select_ln29_fu_692_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_239_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln13_2_reg_845 <= select_ln13_2_fu_365_p3;
                select_ln16_4_reg_862 <= select_ln16_4_fu_471_p3;
                select_ln29_3_reg_834 <= select_ln29_3_fu_271_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln16_reg_883 <= select_ln16_fu_555_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_239_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_239_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln10_fu_239_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_245_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten59_phi_fu_134_p4) + unsigned(ap_const_lv10_1));
    add_ln13_1_fu_574_p2 <= std_logic_vector(unsigned(indvar_flatten22_reg_152) + unsigned(ap_const_lv7_1));
    add_ln16_fu_549_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_179_p4) + unsigned(ap_const_lv5_1));
    add_ln29_1_fu_513_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_505_p3) + unsigned(zext_ln26_1_fu_279_p1));
    add_ln29_2_fu_524_p2 <= std_logic_vector(unsigned(mul_ln29_fu_493_p2) + unsigned(zext_ln16_1_fu_467_p1));
    add_ln29_3_fu_538_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_530_p3) + unsigned(zext_ln26_1_fu_279_p1));
    add_ln29_fu_499_p2 <= std_logic_vector(unsigned(mul_ln29_fu_493_p2) + unsigned(zext_ln16_fu_449_p1));
    add_ln36_1_fu_707_p2 <= std_logic_vector(unsigned(add_ln36_fu_604_p2) + unsigned(zext_ln36_1_fu_704_p1));
    add_ln36_2_fu_721_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_713_p3) + unsigned(zext_ln26_fu_587_p1));
    add_ln36_fu_604_p2 <= std_logic_vector(unsigned(zext_ln36_fu_590_p1) + unsigned(zext_ln36_2_fu_600_p1));
    and_ln13_fu_401_p2 <= (or_ln13_1_fu_395_p2 and and_ln29_4_fu_311_p2);
    and_ln29_1_fu_686_p2 <= (grp_fu_220_p2 and and_ln29_fu_680_p2);
    and_ln29_2_fu_797_p2 <= (or_ln29_3_fu_791_p2 and or_ln29_2_fu_773_p2);
    and_ln29_3_fu_803_p2 <= (grp_fu_220_p2 and and_ln29_2_fu_797_p2);
    and_ln29_4_fu_311_p2 <= (xor_ln29_fu_299_p2 and icmp_ln20_fu_305_p2);
    and_ln29_5_fu_323_p2 <= (xor_ln29_fu_299_p2 and icmp_ln16_fu_317_p2);
    and_ln29_fu_680_p2 <= (or_ln29_fu_656_p2 and or_ln29_1_fu_674_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_239_p2)
    begin
        if ((icmp_ln10_fu_239_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_190_p4_assign_proc : process(c_0_reg_186, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, select_ln16_4_reg_862, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_190_p4 <= select_ln16_4_reg_862;
        else 
            ap_phi_mux_c_0_phi_fu_190_p4 <= c_0_reg_186;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_145_p4_assign_proc : process(f_0_reg_141, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, select_ln29_3_reg_834, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_145_p4 <= select_ln29_3_reg_834;
        else 
            ap_phi_mux_f_0_phi_fu_145_p4 <= f_0_reg_141;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten22_phi_fu_156_p4_assign_proc : process(indvar_flatten22_reg_152, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, select_ln13_5_reg_915, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten22_phi_fu_156_p4 <= select_ln13_5_reg_915;
        else 
            ap_phi_mux_indvar_flatten22_phi_fu_156_p4 <= indvar_flatten22_reg_152;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten59_phi_fu_134_p4_assign_proc : process(indvar_flatten59_reg_130, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, add_ln10_reg_824, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten59_phi_fu_134_p4 <= add_ln10_reg_824;
        else 
            ap_phi_mux_indvar_flatten59_phi_fu_134_p4 <= indvar_flatten59_reg_130;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_179_p4_assign_proc : process(indvar_flatten_reg_175, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, select_ln16_5_reg_910, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_179_p4 <= select_ln16_5_reg_910;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_179_p4 <= indvar_flatten_reg_175;
        end if; 
    end process;


    ap_phi_mux_max_0_phi_fu_201_p4_assign_proc : process(max_0_reg_197, icmp_ln10_reg_820_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, select_ln29_1_fu_809_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln10_reg_820_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            ap_phi_mux_max_0_phi_fu_201_p4 <= select_ln29_1_fu_809_p3;
        else 
            ap_phi_mux_max_0_phi_fu_201_p4 <= max_0_reg_197;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_213_p4_assign_proc : process(mpr_0_reg_209, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, mpr_reg_904, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_213_p4 <= mpr_reg_904;
        else 
            ap_phi_mux_mpr_0_phi_fu_213_p4 <= mpr_0_reg_209;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_168_p4_assign_proc : process(r_0_reg_164, icmp_ln10_reg_820, ap_CS_fsm_pp0_stage0, select_ln13_2_reg_845, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_820 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_168_p4 <= select_ln13_2_reg_845;
        else 
            ap_phi_mux_r_0_phi_fu_168_p4 <= r_0_reg_164;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln29_1_fu_627_p1 <= select_ln16_reg_883;
    bitcast_ln29_2_fu_727_p1 <= conv_2_out_load_1_reg_897;
    bitcast_ln29_3_fu_744_p1 <= select_ln29_reg_920;
    bitcast_ln29_fu_610_p1 <= conv_2_out_load_reg_890;
    c_fu_407_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln13_fu_341_p3));
    conv_2_out_address0 <= zext_ln29_1_fu_519_p1(11 - 1 downto 0);
    conv_2_out_address1 <= zext_ln29_2_fu_544_p1(11 - 1 downto 0);

    conv_2_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_2_out_ce0 <= ap_const_logic_1;
        else 
            conv_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_2_out_ce1 <= ap_const_logic_1;
        else 
            conv_2_out_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_251_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_f_0_phi_fu_145_p4));

    grp_fu_220_p0_assign_proc : process(conv_2_out_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, conv_2_out_load_1_reg_897, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_220_p0 <= conv_2_out_load_1_reg_897;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_220_p0 <= conv_2_out_q0;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_220_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, select_ln16_fu_555_p3, ap_CS_fsm_pp0_stage1, select_ln29_fu_692_p3, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_220_p1 <= select_ln29_fu_692_p3;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_220_p1 <= select_ln16_fu_555_p3;
        else 
            grp_fu_220_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_483_p2 <= std_logic_vector(unsigned(zext_ln20_fu_479_p1) + unsigned(select_ln13_1_fu_357_p3));
    icmp_ln10_fu_239_p2 <= "1" when (ap_phi_mux_indvar_flatten59_phi_fu_134_p4 = ap_const_lv10_320) else "0";
    icmp_ln13_fu_257_p2 <= "1" when (ap_phi_mux_indvar_flatten22_phi_fu_156_p4 = ap_const_lv7_32) else "0";
    icmp_ln16_fu_317_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_179_p4 = ap_const_lv5_A) else "0";
    icmp_ln20_1_fu_699_p2 <= "1" when (mpr_reg_904 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_305_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_213_p4 = ap_const_lv2_2) else "0";
    icmp_ln29_1_fu_650_p2 <= "1" when (trunc_ln29_fu_623_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_2_fu_662_p2 <= "0" when (tmp_5_fu_630_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_3_fu_668_p2 <= "1" when (trunc_ln29_1_fu_640_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_4_fu_761_p2 <= "0" when (tmp_7_fu_730_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_5_fu_767_p2 <= "1" when (trunc_ln29_2_fu_740_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_6_fu_779_p2 <= "0" when (tmp_8_fu_747_p4 = ap_const_lv8_FF) else "1";
    icmp_ln29_7_fu_785_p2 <= "1" when (trunc_ln29_3_fu_757_p1 = ap_const_lv23_0) else "0";
    icmp_ln29_fu_644_p2 <= "0" when (tmp_1_fu_613_p4 = ap_const_lv8_FF) else "1";
    max_pool_2_out_address0 <= zext_ln36_3_fu_816_p1(9 - 1 downto 0);

    max_pool_2_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_2_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_2_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_2_out_d0 <= 
        conv_2_out_load_1_reg_897 when (and_ln29_3_fu_803_p2(0) = '1') else 
        select_ln29_reg_920;

    max_pool_2_out_we0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, icmp_ln20_1_reg_927, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln20_1_reg_927 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            max_pool_2_out_we0 <= ap_const_logic_1;
        else 
            max_pool_2_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_563_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln16_1_reg_857));
    mul_ln29_fu_493_p1 <= mul_ln29_fu_493_p10(4 - 1 downto 0);
    mul_ln29_fu_493_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_483_p2),8));
    mul_ln29_fu_493_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_B) * unsigned(mul_ln29_fu_493_p1), 8));
    or_ln13_1_fu_395_p2 <= (xor_ln13_fu_389_p2 or icmp_ln13_fu_257_p2);
    or_ln13_fu_335_p2 <= (icmp_ln13_fu_257_p2 or and_ln29_5_fu_323_p2);
    or_ln16_1_fu_419_p2 <= (or_ln16_fu_413_p2 or icmp_ln13_fu_257_p2);
    or_ln16_fu_413_p2 <= (and_ln29_5_fu_323_p2 or and_ln13_fu_401_p2);
    or_ln27_1_fu_453_p2 <= (shl_ln27_mid1_fu_433_p3 or ap_const_lv4_1);
    or_ln27_fu_233_p2 <= (shl_ln1_fu_225_p3 or ap_const_lv4_1);
    or_ln29_1_fu_674_p2 <= (icmp_ln29_3_fu_668_p2 or icmp_ln29_2_fu_662_p2);
    or_ln29_2_fu_773_p2 <= (icmp_ln29_5_fu_767_p2 or icmp_ln29_4_fu_761_p2);
    or_ln29_3_fu_791_p2 <= (icmp_ln29_7_fu_785_p2 or icmp_ln29_6_fu_779_p2);
    or_ln29_fu_656_p2 <= (icmp_ln29_fu_644_p2 or icmp_ln29_1_fu_650_p2);
    r_fu_329_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln29_2_fu_263_p3));
    select_ln13_1_fu_357_p3 <= 
        shl_ln26_mid1_fu_349_p3 when (and_ln29_5_fu_323_p2(0) = '1') else 
        select_ln29_4_fu_291_p3;
    select_ln13_2_fu_365_p3 <= 
        r_fu_329_p2 when (and_ln29_5_fu_323_p2(0) = '1') else 
        select_ln29_2_fu_263_p3;
    select_ln13_3_fu_373_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_335_p2(0) = '1') else 
        shl_ln1_fu_225_p3;
    select_ln13_4_fu_381_p3 <= 
        ap_const_lv4_1 when (or_ln13_fu_335_p2(0) = '1') else 
        or_ln27_fu_233_p2;
    select_ln13_5_fu_580_p3 <= 
        ap_const_lv7_1 when (icmp_ln13_reg_829(0) = '1') else 
        add_ln13_1_fu_574_p2;
    select_ln13_fu_341_p3 <= 
        ap_const_lv3_0 when (or_ln13_fu_335_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_190_p4;
    select_ln16_1_fu_425_p3 <= 
        ap_const_lv2_0 when (or_ln16_1_fu_419_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_213_p4;
    select_ln16_2_fu_441_p3 <= 
        shl_ln27_mid1_fu_433_p3 when (and_ln13_fu_401_p2(0) = '1') else 
        select_ln13_3_fu_373_p3;
    select_ln16_3_fu_459_p3 <= 
        or_ln27_1_fu_453_p2 when (and_ln13_fu_401_p2(0) = '1') else 
        select_ln13_4_fu_381_p3;
    select_ln16_4_fu_471_p3 <= 
        c_fu_407_p2 when (and_ln13_fu_401_p2(0) = '1') else 
        select_ln13_fu_341_p3;
    select_ln16_5_fu_568_p3 <= 
        ap_const_lv5_1 when (or_ln13_reg_840(0) = '1') else 
        add_ln16_reg_878;
    select_ln16_fu_555_p3 <= 
        ap_const_lv32_800000 when (or_ln16_1_reg_852(0) = '1') else 
        ap_phi_mux_max_0_phi_fu_201_p4;
    select_ln29_1_fu_809_p3 <= 
        conv_2_out_load_1_reg_897 when (and_ln29_3_fu_803_p2(0) = '1') else 
        select_ln29_reg_920;
    select_ln29_2_fu_263_p3 <= 
        ap_const_lv3_0 when (icmp_ln13_fu_257_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_168_p4;
    select_ln29_3_fu_271_p3 <= 
        f_fu_251_p2 when (icmp_ln13_fu_257_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_145_p4;
    select_ln29_4_fu_291_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_257_p2(0) = '1') else 
        shl_ln_fu_283_p3;
    select_ln29_fu_692_p3 <= 
        conv_2_out_load_reg_890 when (and_ln29_1_fu_686_p2(0) = '1') else 
        select_ln16_reg_883;
    shl_ln1_fu_225_p3 <= (ap_phi_mux_c_0_phi_fu_190_p4 & ap_const_lv1_0);
    shl_ln26_mid1_fu_349_p3 <= (r_fu_329_p2 & ap_const_lv1_0);
    shl_ln27_mid1_fu_433_p3 <= (c_fu_407_p2 & ap_const_lv1_0);
    shl_ln_fu_283_p3 <= (ap_phi_mux_r_0_phi_fu_168_p4 & ap_const_lv1_0);
    tmp_11_cast_fu_530_p3 <= (add_ln29_2_fu_524_p2 & ap_const_lv4_0);
    tmp_13_cast_fu_713_p3 <= (add_ln36_1_fu_707_p2 & ap_const_lv4_0);
    tmp_1_fu_613_p4 <= bitcast_ln29_fu_610_p1(30 downto 23);
    tmp_3_cast_fu_505_p3 <= (add_ln29_fu_499_p2 & ap_const_lv4_0);
    tmp_5_fu_630_p4 <= bitcast_ln29_1_fu_627_p1(30 downto 23);
    tmp_7_fu_730_p4 <= bitcast_ln29_2_fu_727_p1(30 downto 23);
    tmp_8_fu_747_p4 <= bitcast_ln29_3_fu_744_p1(30 downto 23);
    tmp_fu_593_p3 <= (select_ln13_2_reg_845 & ap_const_lv2_0);
    trunc_ln29_1_fu_640_p1 <= bitcast_ln29_1_fu_627_p1(23 - 1 downto 0);
    trunc_ln29_2_fu_740_p1 <= bitcast_ln29_2_fu_727_p1(23 - 1 downto 0);
    trunc_ln29_3_fu_757_p1 <= bitcast_ln29_3_fu_744_p1(23 - 1 downto 0);
    trunc_ln29_fu_623_p1 <= bitcast_ln29_fu_610_p1(23 - 1 downto 0);
    xor_ln13_fu_389_p2 <= (icmp_ln16_fu_317_p2 xor ap_const_lv1_1);
    xor_ln29_fu_299_p2 <= (icmp_ln13_fu_257_p2 xor ap_const_lv1_1);
    zext_ln16_1_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_3_fu_459_p3),8));
    zext_ln16_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_441_p3),8));
    zext_ln20_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_fu_425_p3),4));
    zext_ln26_1_fu_279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_fu_271_p3),12));
    zext_ln26_fu_587_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_reg_834),10));
    zext_ln29_1_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_1_fu_513_p2),64));
    zext_ln29_2_fu_544_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln29_3_fu_538_p2),64));
    zext_ln36_1_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_4_reg_862),6));
    zext_ln36_2_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_593_p3),6));
    zext_ln36_3_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln36_2_reg_931),64));
    zext_ln36_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_reg_845),6));
end behav;
