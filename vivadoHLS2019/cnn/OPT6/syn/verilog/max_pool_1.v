// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_0_address0,
        max_pool_out_0_ce0,
        max_pool_out_0_we0,
        max_pool_out_0_d0,
        max_pool_out_1_address0,
        max_pool_out_1_ce0,
        max_pool_out_1_we0,
        max_pool_out_1_d0,
        max_pool_out_2_address0,
        max_pool_out_2_ce0,
        max_pool_out_2_we0,
        max_pool_out_2_d0,
        max_pool_out_3_address0,
        max_pool_out_3_ce0,
        max_pool_out_3_we0,
        max_pool_out_3_d0,
        max_pool_out_4_address0,
        max_pool_out_4_ce0,
        max_pool_out_4_we0,
        max_pool_out_4_d0,
        max_pool_out_5_address0,
        max_pool_out_5_ce0,
        max_pool_out_5_we0,
        max_pool_out_5_d0,
        conv_1_out_0_address0,
        conv_1_out_0_ce0,
        conv_1_out_0_q0,
        conv_1_out_0_address1,
        conv_1_out_0_ce1,
        conv_1_out_0_q1,
        conv_1_out_1_address0,
        conv_1_out_1_ce0,
        conv_1_out_1_q0,
        conv_1_out_1_address1,
        conv_1_out_1_ce1,
        conv_1_out_1_q1
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state9 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] max_pool_out_0_address0;
output   max_pool_out_0_ce0;
output   max_pool_out_0_we0;
output  [31:0] max_pool_out_0_d0;
output  [7:0] max_pool_out_1_address0;
output   max_pool_out_1_ce0;
output   max_pool_out_1_we0;
output  [31:0] max_pool_out_1_d0;
output  [7:0] max_pool_out_2_address0;
output   max_pool_out_2_ce0;
output   max_pool_out_2_we0;
output  [31:0] max_pool_out_2_d0;
output  [7:0] max_pool_out_3_address0;
output   max_pool_out_3_ce0;
output   max_pool_out_3_we0;
output  [31:0] max_pool_out_3_d0;
output  [7:0] max_pool_out_4_address0;
output   max_pool_out_4_ce0;
output   max_pool_out_4_we0;
output  [31:0] max_pool_out_4_d0;
output  [7:0] max_pool_out_5_address0;
output   max_pool_out_5_ce0;
output   max_pool_out_5_we0;
output  [31:0] max_pool_out_5_d0;
output  [10:0] conv_1_out_0_address0;
output   conv_1_out_0_ce0;
input  [31:0] conv_1_out_0_q0;
output  [10:0] conv_1_out_0_address1;
output   conv_1_out_0_ce1;
input  [31:0] conv_1_out_0_q1;
output  [10:0] conv_1_out_1_address0;
output   conv_1_out_1_ce0;
input  [31:0] conv_1_out_1_q0;
output  [10:0] conv_1_out_1_address1;
output   conv_1_out_1_ce1;
input  [31:0] conv_1_out_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_0_ce0;
reg max_pool_out_0_we0;
reg max_pool_out_1_ce0;
reg max_pool_out_1_we0;
reg max_pool_out_2_ce0;
reg max_pool_out_2_we0;
reg max_pool_out_3_ce0;
reg max_pool_out_3_we0;
reg max_pool_out_4_ce0;
reg max_pool_out_4_we0;
reg max_pool_out_5_ce0;
reg max_pool_out_5_we0;
reg conv_1_out_0_ce0;
reg conv_1_out_0_ce1;
reg conv_1_out_1_ce0;
reg conv_1_out_1_ce1;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten23_reg_230;
reg   [2:0] f_0_reg_241;
reg   [7:0] indvar_flatten_reg_252;
reg   [3:0] r_0_reg_263;
reg   [3:0] c_0_reg_274;
wire   [4:0] shl_ln_fu_306_p3;
reg   [4:0] shl_ln_reg_913;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_state8_pp0_stage0_iter6;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] or_ln26_fu_314_p2;
reg   [4:0] or_ln26_reg_918;
wire   [0:0] icmp_ln10_fu_320_p2;
reg   [0:0] icmp_ln10_reg_923;
reg   [0:0] icmp_ln10_reg_923_pp0_iter1_reg;
reg   [0:0] icmp_ln10_reg_923_pp0_iter2_reg;
reg   [0:0] icmp_ln10_reg_923_pp0_iter3_reg;
reg   [0:0] icmp_ln10_reg_923_pp0_iter4_reg;
reg   [0:0] icmp_ln10_reg_923_pp0_iter5_reg;
wire   [9:0] add_ln10_fu_326_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_338_p2;
reg   [0:0] icmp_ln13_reg_932;
wire   [2:0] select_ln29_6_fu_352_p3;
reg   [2:0] select_ln29_6_reg_938;
reg   [2:0] select_ln29_6_reg_938_pp0_iter1_reg;
reg   [2:0] select_ln29_6_reg_938_pp0_iter2_reg;
reg   [2:0] select_ln29_6_reg_938_pp0_iter3_reg;
reg   [2:0] select_ln29_6_reg_938_pp0_iter4_reg;
reg   [2:0] select_ln29_6_reg_938_pp0_iter5_reg;
wire   [0:0] and_ln29_10_fu_372_p2;
reg   [0:0] and_ln29_10_reg_944;
wire   [3:0] r_fu_378_p2;
reg   [3:0] r_reg_950;
wire   [3:0] select_ln13_fu_390_p3;
reg   [3:0] select_ln13_reg_955;
reg   [3:0] select_ln13_reg_955_pp0_iter1_reg;
reg   [3:0] select_ln13_reg_955_pp0_iter2_reg;
reg   [3:0] select_ln13_reg_955_pp0_iter3_reg;
reg   [3:0] select_ln13_reg_955_pp0_iter4_reg;
reg   [3:0] select_ln13_reg_955_pp0_iter5_reg;
wire   [3:0] select_ln13_6_fu_398_p3;
reg   [3:0] select_ln13_6_reg_961;
reg   [3:0] select_ln13_6_reg_961_pp0_iter1_reg;
reg   [3:0] select_ln13_6_reg_961_pp0_iter2_reg;
reg   [3:0] select_ln13_6_reg_961_pp0_iter3_reg;
reg   [3:0] select_ln13_6_reg_961_pp0_iter4_reg;
reg   [3:0] select_ln13_6_reg_961_pp0_iter5_reg;
wire   [3:0] c_fu_406_p2;
wire   [7:0] select_ln13_9_fu_418_p3;
wire   [63:0] zext_ln29_8_fu_509_p1;
reg   [63:0] zext_ln29_8_reg_977;
wire   [11:0] add_ln29_6_fu_538_p2;
reg   [11:0] add_ln29_6_reg_987;
reg   [11:0] add_ln29_6_reg_987_pp0_iter2_reg;
reg   [31:0] conv_1_out_0_load_reg_997;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] zext_ln29_10_fu_544_p1;
reg   [63:0] zext_ln29_10_reg_1004;
wire   [31:0] select_ln29_fu_589_p3;
reg   [31:0] select_ln29_reg_1014;
reg   [31:0] conv_1_out_1_load_reg_1021;
reg    ap_enable_reg_pp0_iter3;
wire   [31:0] select_ln29_2_fu_679_p3;
reg   [31:0] select_ln29_2_reg_1033;
reg   [31:0] conv_1_out_0_load_1_reg_1040;
reg    ap_enable_reg_pp0_iter4;
wire   [31:0] select_ln29_3_fu_768_p3;
reg   [31:0] select_ln29_3_reg_1047;
reg   [31:0] conv_1_out_1_load_1_reg_1054;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter6;
reg   [2:0] ap_phi_mux_f_0_phi_fu_245_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_267_p4;
wire   [63:0] zext_ln36_4_fu_781_p1;
wire   [31:0] select_ln29_4_fu_872_p3;
wire   [31:0] grp_fu_291_p1;
wire   [31:0] grp_fu_296_p1;
wire   [31:0] grp_fu_301_p1;
wire   [2:0] f_fu_332_p2;
wire   [0:0] icmp_ln16_fu_366_p2;
wire   [0:0] xor_ln29_fu_360_p2;
wire   [3:0] select_ln29_5_fu_344_p3;
wire   [0:0] or_ln13_fu_384_p2;
wire   [7:0] add_ln13_fu_412_p2;
wire   [4:0] shl_ln26_mid1_fu_441_p3;
wire   [4:0] select_ln29_7_fu_429_p3;
wire   [4:0] select_ln13_7_fu_448_p3;
wire   [4:0] or_ln26_1_fu_459_p2;
wire   [4:0] select_ln29_8_fu_435_p3;
wire   [4:0] select_ln13_8_fu_465_p3;
wire   [8:0] grp_fu_884_p3;
wire   [9:0] tmp_fu_486_p3;
wire   [11:0] p_shl2_cast_fu_479_p3;
wire   [11:0] zext_ln29_7_fu_493_p1;
wire   [11:0] zext_ln29_fu_426_p1;
wire   [11:0] sub_ln29_fu_497_p2;
wire   [11:0] add_ln29_4_fu_503_p2;
wire   [8:0] grp_fu_894_p3;
wire   [9:0] tmp_12_fu_521_p3;
wire   [11:0] p_shl_cast_fu_514_p3;
wire   [11:0] zext_ln29_9_fu_528_p1;
wire   [11:0] sub_ln29_1_fu_532_p2;
wire   [31:0] bitcast_ln29_fu_548_p1;
wire   [7:0] tmp_s_fu_551_p4;
wire   [22:0] trunc_ln29_fu_561_p1;
wire   [0:0] icmp_ln29_8_fu_571_p2;
wire   [0:0] icmp_ln29_fu_565_p2;
wire   [0:0] or_ln29_fu_577_p2;
wire   [0:0] grp_fu_285_p2;
wire   [0:0] and_ln29_fu_583_p2;
wire   [31:0] bitcast_ln29_4_fu_597_p1;
wire   [31:0] bitcast_ln29_5_fu_614_p1;
wire   [7:0] tmp_2_fu_600_p4;
wire   [22:0] trunc_ln29_4_fu_610_p1;
wire   [0:0] icmp_ln29_10_fu_637_p2;
wire   [0:0] icmp_ln29_9_fu_631_p2;
wire   [7:0] tmp_3_fu_617_p4;
wire   [22:0] trunc_ln29_5_fu_627_p1;
wire   [0:0] icmp_ln29_12_fu_655_p2;
wire   [0:0] icmp_ln29_11_fu_649_p2;
wire   [0:0] or_ln29_4_fu_643_p2;
wire   [0:0] or_ln29_5_fu_661_p2;
wire   [0:0] and_ln29_4_fu_667_p2;
wire   [0:0] grp_fu_291_p2;
wire   [0:0] and_ln29_5_fu_673_p2;
wire   [31:0] bitcast_ln29_6_fu_686_p1;
wire   [31:0] bitcast_ln29_7_fu_703_p1;
wire   [7:0] tmp_5_fu_689_p4;
wire   [22:0] trunc_ln29_6_fu_699_p1;
wire   [0:0] icmp_ln29_14_fu_726_p2;
wire   [0:0] icmp_ln29_13_fu_720_p2;
wire   [7:0] tmp_6_fu_706_p4;
wire   [22:0] trunc_ln29_7_fu_716_p1;
wire   [0:0] icmp_ln29_16_fu_744_p2;
wire   [0:0] icmp_ln29_15_fu_738_p2;
wire   [0:0] or_ln29_6_fu_732_p2;
wire   [0:0] or_ln29_7_fu_750_p2;
wire   [0:0] and_ln29_6_fu_756_p2;
wire   [0:0] grp_fu_296_p2;
wire   [0:0] and_ln29_7_fu_762_p2;
wire   [7:0] grp_fu_904_p3;
wire   [31:0] bitcast_ln29_8_fu_790_p1;
wire   [31:0] bitcast_ln29_9_fu_807_p1;
wire   [7:0] tmp_9_fu_793_p4;
wire   [22:0] trunc_ln29_8_fu_803_p1;
wire   [0:0] icmp_ln29_18_fu_830_p2;
wire   [0:0] icmp_ln29_17_fu_824_p2;
wire   [7:0] tmp_10_fu_810_p4;
wire   [22:0] trunc_ln29_9_fu_820_p1;
wire   [0:0] icmp_ln29_20_fu_848_p2;
wire   [0:0] icmp_ln29_19_fu_842_p2;
wire   [0:0] or_ln29_8_fu_836_p2;
wire   [0:0] or_ln29_9_fu_854_p2;
wire   [0:0] and_ln29_8_fu_860_p2;
wire   [0:0] grp_fu_301_p2;
wire   [0:0] and_ln29_9_fu_866_p2;
wire   [4:0] grp_fu_884_p0;
wire   [4:0] grp_fu_884_p1;
wire   [3:0] grp_fu_884_p2;
wire   [8:0] zext_ln29_6_fu_476_p1;
wire   [4:0] grp_fu_894_p0;
wire   [4:0] grp_fu_894_p1;
wire   [3:0] grp_fu_894_p2;
wire   [4:0] grp_fu_904_p0;
wire   [3:0] grp_fu_904_p1;
wire   [3:0] grp_fu_904_p2;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state9;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [8:0] grp_fu_884_p10;
wire   [8:0] grp_fu_894_p10;
wire   [7:0] grp_fu_904_p10;
wire   [7:0] grp_fu_904_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
end

cnn_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ndEe_U34(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_0_q0),
    .din1(32'd8388608),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_285_p2)
);

cnn_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ndEe_U35(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_1_q0),
    .din1(grp_fu_291_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_291_p2)
);

cnn_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ndEe_U36(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_0_q1),
    .din1(grp_fu_296_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_296_p2)
);

cnn_fcmp_32ns_32ndEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32ndEe_U37(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_1_out_1_q1),
    .din1(grp_fu_301_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_301_p2)
);

cnn_mac_muladd_5neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
cnn_mac_muladd_5neOg_U38(
    .din0(grp_fu_884_p0),
    .din1(grp_fu_884_p1),
    .din2(grp_fu_884_p2),
    .dout(grp_fu_884_p3)
);

cnn_mac_muladd_5neOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 9 ))
cnn_mac_muladd_5neOg_U39(
    .din0(grp_fu_894_p0),
    .din1(grp_fu_894_p1),
    .din2(grp_fu_894_p2),
    .dout(grp_fu_894_p3)
);

cnn_mac_muladd_5nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
cnn_mac_muladd_5nfYi_U40(
    .din0(grp_fu_904_p0),
    .din1(grp_fu_904_p1),
    .din2(grp_fu_904_p2),
    .dout(grp_fu_904_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter6 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_320_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        c_0_reg_274 <= c_fu_406_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_274 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln10_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        f_0_reg_241 <= select_ln29_6_reg_938;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_241 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_320_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten23_reg_230 <= add_ln10_fu_326_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_230 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_320_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_252 <= select_ln13_9_fu_418_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_252 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln10_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        r_0_reg_263 <= select_ln13_6_reg_961;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_263 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_923 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln29_6_reg_987 <= add_ln29_6_fu_538_p2;
        zext_ln29_8_reg_977[11 : 0] <= zext_ln29_8_fu_509_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln29_6_reg_987_pp0_iter2_reg <= add_ln29_6_reg_987;
        icmp_ln10_reg_923_pp0_iter2_reg <= icmp_ln10_reg_923_pp0_iter1_reg;
        icmp_ln10_reg_923_pp0_iter3_reg <= icmp_ln10_reg_923_pp0_iter2_reg;
        icmp_ln10_reg_923_pp0_iter4_reg <= icmp_ln10_reg_923_pp0_iter3_reg;
        icmp_ln10_reg_923_pp0_iter5_reg <= icmp_ln10_reg_923_pp0_iter4_reg;
        select_ln13_6_reg_961_pp0_iter2_reg <= select_ln13_6_reg_961_pp0_iter1_reg;
        select_ln13_6_reg_961_pp0_iter3_reg <= select_ln13_6_reg_961_pp0_iter2_reg;
        select_ln13_6_reg_961_pp0_iter4_reg <= select_ln13_6_reg_961_pp0_iter3_reg;
        select_ln13_6_reg_961_pp0_iter5_reg <= select_ln13_6_reg_961_pp0_iter4_reg;
        select_ln13_reg_955_pp0_iter2_reg <= select_ln13_reg_955_pp0_iter1_reg;
        select_ln13_reg_955_pp0_iter3_reg <= select_ln13_reg_955_pp0_iter2_reg;
        select_ln13_reg_955_pp0_iter4_reg <= select_ln13_reg_955_pp0_iter3_reg;
        select_ln13_reg_955_pp0_iter5_reg <= select_ln13_reg_955_pp0_iter4_reg;
        select_ln29_6_reg_938_pp0_iter2_reg <= select_ln29_6_reg_938_pp0_iter1_reg;
        select_ln29_6_reg_938_pp0_iter3_reg <= select_ln29_6_reg_938_pp0_iter2_reg;
        select_ln29_6_reg_938_pp0_iter4_reg <= select_ln29_6_reg_938_pp0_iter3_reg;
        select_ln29_6_reg_938_pp0_iter5_reg <= select_ln29_6_reg_938_pp0_iter4_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_fu_320_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        and_ln29_10_reg_944 <= and_ln29_10_fu_372_p2;
        icmp_ln13_reg_932 <= icmp_ln13_fu_338_p2;
        r_reg_950 <= r_fu_378_p2;
        select_ln13_reg_955 <= select_ln13_fu_390_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (icmp_ln10_reg_923_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_load_1_reg_1040 <= conv_1_out_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_923_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_load_reg_997 <= conv_1_out_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (icmp_ln10_reg_923_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_load_1_reg_1054 <= conv_1_out_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (icmp_ln10_reg_923_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_load_reg_1021 <= conv_1_out_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_923 <= icmp_ln10_fu_320_p2;
        icmp_ln10_reg_923_pp0_iter1_reg <= icmp_ln10_reg_923;
        or_ln26_reg_918[4 : 1] <= or_ln26_fu_314_p2[4 : 1];
        select_ln13_6_reg_961_pp0_iter1_reg <= select_ln13_6_reg_961;
        select_ln13_reg_955_pp0_iter1_reg <= select_ln13_reg_955;
        select_ln29_6_reg_938_pp0_iter1_reg <= select_ln29_6_reg_938;
        shl_ln_reg_913[4 : 1] <= shl_ln_fu_306_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_320_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln13_6_reg_961 <= select_ln13_6_fu_398_p3;
        select_ln29_6_reg_938 <= select_ln29_6_fu_352_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_923_pp0_iter3_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_2_reg_1033 <= select_ln29_2_fu_679_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_923_pp0_iter4_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_3_reg_1047 <= select_ln29_3_fu_768_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_923_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln29_reg_1014 <= select_ln29_fu_589_p3;
        zext_ln29_10_reg_1004[11 : 0] <= zext_ln29_10_fu_544_p1[11 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_320_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln10_reg_923 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_245_p4 = select_ln29_6_reg_938;
    end else begin
        ap_phi_mux_f_0_phi_fu_245_p4 = f_0_reg_241;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln10_reg_923 == 1'd0))) begin
        ap_phi_mux_r_0_phi_fu_267_p4 = select_ln13_6_reg_961;
    end else begin
        ap_phi_mux_r_0_phi_fu_267_p4 = r_0_reg_263;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce0 = 1'b1;
    end else begin
        conv_1_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_0_ce1 = 1'b1;
    end else begin
        conv_1_out_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce0 = 1'b1;
    end else begin
        conv_1_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_1_out_1_ce1 = 1'b1;
    end else begin
        conv_1_out_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_ce0 = 1'b1;
    end else begin
        max_pool_out_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_6_reg_938_pp0_iter5_reg == 3'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_we0 = 1'b1;
    end else begin
        max_pool_out_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_ce0 = 1'b1;
    end else begin
        max_pool_out_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_6_reg_938_pp0_iter5_reg == 3'd1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_we0 = 1'b1;
    end else begin
        max_pool_out_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_2_ce0 = 1'b1;
    end else begin
        max_pool_out_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_6_reg_938_pp0_iter5_reg == 3'd2) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_2_we0 = 1'b1;
    end else begin
        max_pool_out_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_3_ce0 = 1'b1;
    end else begin
        max_pool_out_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_6_reg_938_pp0_iter5_reg == 3'd3) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_3_we0 = 1'b1;
    end else begin
        max_pool_out_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_4_ce0 = 1'b1;
    end else begin
        max_pool_out_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (select_ln29_6_reg_938_pp0_iter5_reg == 3'd4) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_4_we0 = 1'b1;
    end else begin
        max_pool_out_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_5_ce0 = 1'b1;
    end else begin
        max_pool_out_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter6 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & ((select_ln29_6_reg_938_pp0_iter5_reg == 3'd5) | ((select_ln29_6_reg_938_pp0_iter5_reg == 3'd6) | (select_ln29_6_reg_938_pp0_iter5_reg == 3'd7))))) begin
        max_pool_out_5_we0 = 1'b1;
    end else begin
        max_pool_out_5_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_320_p2 == 1'd1)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_320_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_326_p2 = (indvar_flatten23_reg_230 + 10'd1);

assign add_ln13_fu_412_p2 = (indvar_flatten_reg_252 + 8'd1);

assign add_ln29_4_fu_503_p2 = (zext_ln29_fu_426_p1 + sub_ln29_fu_497_p2);

assign add_ln29_6_fu_538_p2 = (zext_ln29_fu_426_p1 + sub_ln29_1_fu_532_p2);

assign and_ln29_10_fu_372_p2 = (xor_ln29_fu_360_p2 & icmp_ln16_fu_366_p2);

assign and_ln29_4_fu_667_p2 = (or_ln29_5_fu_661_p2 & or_ln29_4_fu_643_p2);

assign and_ln29_5_fu_673_p2 = (grp_fu_291_p2 & and_ln29_4_fu_667_p2);

assign and_ln29_6_fu_756_p2 = (or_ln29_7_fu_750_p2 & or_ln29_6_fu_732_p2);

assign and_ln29_7_fu_762_p2 = (grp_fu_296_p2 & and_ln29_6_fu_756_p2);

assign and_ln29_8_fu_860_p2 = (or_ln29_9_fu_854_p2 & or_ln29_8_fu_836_p2);

assign and_ln29_9_fu_866_p2 = (grp_fu_301_p2 & and_ln29_8_fu_860_p2);

assign and_ln29_fu_583_p2 = (or_ln29_fu_577_p2 & grp_fu_285_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_4_fu_597_p1 = conv_1_out_1_load_reg_1021;

assign bitcast_ln29_5_fu_614_p1 = select_ln29_reg_1014;

assign bitcast_ln29_6_fu_686_p1 = conv_1_out_0_load_1_reg_1040;

assign bitcast_ln29_7_fu_703_p1 = select_ln29_2_reg_1033;

assign bitcast_ln29_8_fu_790_p1 = conv_1_out_1_load_1_reg_1054;

assign bitcast_ln29_9_fu_807_p1 = select_ln29_3_reg_1047;

assign bitcast_ln29_fu_548_p1 = conv_1_out_0_load_reg_997;

assign c_fu_406_p2 = (select_ln13_fu_390_p3 + 4'd1);

assign conv_1_out_0_address0 = zext_ln29_8_fu_509_p1;

assign conv_1_out_0_address1 = zext_ln29_10_fu_544_p1;

assign conv_1_out_1_address0 = zext_ln29_8_reg_977;

assign conv_1_out_1_address1 = zext_ln29_10_reg_1004;

assign f_fu_332_p2 = (3'd1 + ap_phi_mux_f_0_phi_fu_245_p4);

assign grp_fu_291_p1 = ((and_ln29_fu_583_p2[0:0] === 1'b1) ? conv_1_out_0_load_reg_997 : 32'd8388608);

assign grp_fu_296_p1 = ((and_ln29_5_fu_673_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_1021 : select_ln29_reg_1014);

assign grp_fu_301_p1 = ((and_ln29_7_fu_762_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_1040 : select_ln29_2_reg_1033);

assign grp_fu_884_p0 = 9'd13;

assign grp_fu_884_p1 = grp_fu_884_p10;

assign grp_fu_884_p10 = select_ln13_7_fu_448_p3;

assign grp_fu_884_p2 = zext_ln29_6_fu_476_p1;

assign grp_fu_894_p0 = 9'd13;

assign grp_fu_894_p1 = grp_fu_894_p10;

assign grp_fu_894_p10 = select_ln13_8_fu_465_p3;

assign grp_fu_894_p2 = zext_ln29_6_fu_476_p1;

assign grp_fu_904_p0 = 8'd13;

assign grp_fu_904_p1 = grp_fu_904_p10;

assign grp_fu_904_p10 = select_ln13_6_reg_961_pp0_iter5_reg;

assign grp_fu_904_p2 = grp_fu_904_p20;

assign grp_fu_904_p20 = select_ln13_reg_955_pp0_iter5_reg;

assign icmp_ln10_fu_320_p2 = ((indvar_flatten23_reg_230 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_338_p2 = ((indvar_flatten_reg_252 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_366_p2 = ((c_0_reg_274 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_637_p2 = ((trunc_ln29_4_fu_610_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_649_p2 = ((tmp_3_fu_617_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_655_p2 = ((trunc_ln29_5_fu_627_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_720_p2 = ((tmp_5_fu_689_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_14_fu_726_p2 = ((trunc_ln29_6_fu_699_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_15_fu_738_p2 = ((tmp_6_fu_706_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_16_fu_744_p2 = ((trunc_ln29_7_fu_716_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_17_fu_824_p2 = ((tmp_9_fu_793_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_18_fu_830_p2 = ((trunc_ln29_8_fu_803_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_19_fu_842_p2 = ((tmp_10_fu_810_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_20_fu_848_p2 = ((trunc_ln29_9_fu_820_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_571_p2 = ((trunc_ln29_fu_561_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_631_p2 = ((tmp_2_fu_600_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_565_p2 = ((tmp_s_fu_551_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_0_address0 = zext_ln36_4_fu_781_p1;

assign max_pool_out_0_d0 = select_ln29_4_fu_872_p3;

assign max_pool_out_1_address0 = zext_ln36_4_fu_781_p1;

assign max_pool_out_1_d0 = select_ln29_4_fu_872_p3;

assign max_pool_out_2_address0 = zext_ln36_4_fu_781_p1;

assign max_pool_out_2_d0 = select_ln29_4_fu_872_p3;

assign max_pool_out_3_address0 = zext_ln36_4_fu_781_p1;

assign max_pool_out_3_d0 = select_ln29_4_fu_872_p3;

assign max_pool_out_4_address0 = zext_ln36_4_fu_781_p1;

assign max_pool_out_4_d0 = select_ln29_4_fu_872_p3;

assign max_pool_out_5_address0 = zext_ln36_4_fu_781_p1;

assign max_pool_out_5_d0 = select_ln29_4_fu_872_p3;

assign or_ln13_fu_384_p2 = (icmp_ln13_fu_338_p2 | and_ln29_10_fu_372_p2);

assign or_ln26_1_fu_459_p2 = (shl_ln26_mid1_fu_441_p3 | 5'd1);

assign or_ln26_fu_314_p2 = (shl_ln_fu_306_p3 | 5'd1);

assign or_ln29_4_fu_643_p2 = (icmp_ln29_9_fu_631_p2 | icmp_ln29_10_fu_637_p2);

assign or_ln29_5_fu_661_p2 = (icmp_ln29_12_fu_655_p2 | icmp_ln29_11_fu_649_p2);

assign or_ln29_6_fu_732_p2 = (icmp_ln29_14_fu_726_p2 | icmp_ln29_13_fu_720_p2);

assign or_ln29_7_fu_750_p2 = (icmp_ln29_16_fu_744_p2 | icmp_ln29_15_fu_738_p2);

assign or_ln29_8_fu_836_p2 = (icmp_ln29_18_fu_830_p2 | icmp_ln29_17_fu_824_p2);

assign or_ln29_9_fu_854_p2 = (icmp_ln29_20_fu_848_p2 | icmp_ln29_19_fu_842_p2);

assign or_ln29_fu_577_p2 = (icmp_ln29_fu_565_p2 | icmp_ln29_8_fu_571_p2);

assign p_shl2_cast_fu_479_p3 = {{grp_fu_884_p3}, {3'd0}};

assign p_shl_cast_fu_514_p3 = {{grp_fu_894_p3}, {3'd0}};

assign r_fu_378_p2 = (4'd1 + select_ln29_5_fu_344_p3);

assign select_ln13_6_fu_398_p3 = ((and_ln29_10_fu_372_p2[0:0] === 1'b1) ? r_fu_378_p2 : select_ln29_5_fu_344_p3);

assign select_ln13_7_fu_448_p3 = ((and_ln29_10_reg_944[0:0] === 1'b1) ? shl_ln26_mid1_fu_441_p3 : select_ln29_7_fu_429_p3);

assign select_ln13_8_fu_465_p3 = ((and_ln29_10_reg_944[0:0] === 1'b1) ? or_ln26_1_fu_459_p2 : select_ln29_8_fu_435_p3);

assign select_ln13_9_fu_418_p3 = ((icmp_ln13_fu_338_p2[0:0] === 1'b1) ? 8'd1 : add_ln13_fu_412_p2);

assign select_ln13_fu_390_p3 = ((or_ln13_fu_384_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_274);

assign select_ln29_2_fu_679_p3 = ((and_ln29_5_fu_673_p2[0:0] === 1'b1) ? conv_1_out_1_load_reg_1021 : select_ln29_reg_1014);

assign select_ln29_3_fu_768_p3 = ((and_ln29_7_fu_762_p2[0:0] === 1'b1) ? conv_1_out_0_load_1_reg_1040 : select_ln29_2_reg_1033);

assign select_ln29_4_fu_872_p3 = ((and_ln29_9_fu_866_p2[0:0] === 1'b1) ? conv_1_out_1_load_1_reg_1054 : select_ln29_3_reg_1047);

assign select_ln29_5_fu_344_p3 = ((icmp_ln13_fu_338_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_267_p4);

assign select_ln29_6_fu_352_p3 = ((icmp_ln13_fu_338_p2[0:0] === 1'b1) ? f_fu_332_p2 : ap_phi_mux_f_0_phi_fu_245_p4);

assign select_ln29_7_fu_429_p3 = ((icmp_ln13_reg_932[0:0] === 1'b1) ? 5'd0 : shl_ln_reg_913);

assign select_ln29_8_fu_435_p3 = ((icmp_ln13_reg_932[0:0] === 1'b1) ? 5'd1 : or_ln26_reg_918);

assign select_ln29_fu_589_p3 = ((and_ln29_fu_583_p2[0:0] === 1'b1) ? conv_1_out_0_load_reg_997 : 32'd8388608);

assign shl_ln26_mid1_fu_441_p3 = {{r_reg_950}, {1'd0}};

assign shl_ln_fu_306_p3 = {{ap_phi_mux_r_0_phi_fu_267_p4}, {1'd0}};

assign sub_ln29_1_fu_532_p2 = (p_shl_cast_fu_514_p3 - zext_ln29_9_fu_528_p1);

assign sub_ln29_fu_497_p2 = (p_shl2_cast_fu_479_p3 - zext_ln29_7_fu_493_p1);

assign tmp_10_fu_810_p4 = {{bitcast_ln29_9_fu_807_p1[30:23]}};

assign tmp_12_fu_521_p3 = {{grp_fu_894_p3}, {1'd0}};

assign tmp_2_fu_600_p4 = {{bitcast_ln29_4_fu_597_p1[30:23]}};

assign tmp_3_fu_617_p4 = {{bitcast_ln29_5_fu_614_p1[30:23]}};

assign tmp_5_fu_689_p4 = {{bitcast_ln29_6_fu_686_p1[30:23]}};

assign tmp_6_fu_706_p4 = {{bitcast_ln29_7_fu_703_p1[30:23]}};

assign tmp_9_fu_793_p4 = {{bitcast_ln29_8_fu_790_p1[30:23]}};

assign tmp_fu_486_p3 = {{grp_fu_884_p3}, {1'd0}};

assign tmp_s_fu_551_p4 = {{bitcast_ln29_fu_548_p1[30:23]}};

assign trunc_ln29_4_fu_610_p1 = bitcast_ln29_4_fu_597_p1[22:0];

assign trunc_ln29_5_fu_627_p1 = bitcast_ln29_5_fu_614_p1[22:0];

assign trunc_ln29_6_fu_699_p1 = bitcast_ln29_6_fu_686_p1[22:0];

assign trunc_ln29_7_fu_716_p1 = bitcast_ln29_7_fu_703_p1[22:0];

assign trunc_ln29_8_fu_803_p1 = bitcast_ln29_8_fu_790_p1[22:0];

assign trunc_ln29_9_fu_820_p1 = bitcast_ln29_9_fu_807_p1[22:0];

assign trunc_ln29_fu_561_p1 = bitcast_ln29_fu_548_p1[22:0];

assign xor_ln29_fu_360_p2 = (icmp_ln13_fu_338_p2 ^ 1'd1);

assign zext_ln29_10_fu_544_p1 = add_ln29_6_reg_987_pp0_iter2_reg;

assign zext_ln29_6_fu_476_p1 = select_ln13_reg_955;

assign zext_ln29_7_fu_493_p1 = tmp_fu_486_p3;

assign zext_ln29_8_fu_509_p1 = add_ln29_4_fu_503_p2;

assign zext_ln29_9_fu_528_p1 = tmp_12_fu_521_p3;

assign zext_ln29_fu_426_p1 = select_ln29_6_reg_938;

assign zext_ln36_4_fu_781_p1 = grp_fu_904_p3;

always @ (posedge ap_clk) begin
    shl_ln_reg_913[0] <= 1'b0;
    or_ln26_reg_918[0] <= 1'b1;
    zext_ln29_8_reg_977[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    zext_ln29_10_reg_1004[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_1
