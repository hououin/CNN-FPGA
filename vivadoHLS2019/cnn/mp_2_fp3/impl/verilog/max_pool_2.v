// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_address0,
        max_pool_out_ce0,
        max_pool_out_we0,
        max_pool_out_d0,
        conv_2_out_address0,
        conv_2_out_ce0,
        conv_2_out_q0,
        conv_2_out_address1,
        conv_2_out_ce1,
        conv_2_out_q1
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_pp0_stage0 = 4'd2;
parameter    ap_ST_fsm_pp0_stage1 = 4'd4;
parameter    ap_ST_fsm_state8 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_address0;
output   max_pool_out_ce0;
output   max_pool_out_we0;
output  [31:0] max_pool_out_d0;
output  [10:0] conv_2_out_address0;
output   conv_2_out_ce0;
input  [31:0] conv_2_out_q0;
output  [10:0] conv_2_out_address1;
output   conv_2_out_ce1;
input  [31:0] conv_2_out_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_ce0;
reg max_pool_out_we0;
reg[10:0] conv_2_out_address0;
reg conv_2_out_ce0;
reg[10:0] conv_2_out_address1;
reg conv_2_out_ce1;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten23_reg_140;
reg   [4:0] f_0_reg_151;
reg   [5:0] indvar_flatten_reg_162;
reg   [2:0] r_0_reg_173;
reg   [2:0] c_0_reg_184;
reg   [31:0] reg_206;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state5_pp0_stage1_iter1;
wire    ap_block_state7_pp0_stage1_iter2;
wire    ap_block_pp0_stage1_11001;
reg   [0:0] icmp_ln10_reg_886;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state6_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_886_pp0_iter1_reg;
wire   [0:0] icmp_ln10_fu_227_p2;
reg   [0:0] icmp_ln10_reg_886_pp0_iter2_reg;
wire   [8:0] add_ln10_fu_233_p2;
reg   [8:0] add_ln10_reg_890;
wire   [0:0] icmp_ln13_fu_245_p2;
reg   [0:0] icmp_ln13_reg_895;
wire   [4:0] select_ln29_5_fu_259_p3;
reg   [4:0] select_ln29_5_reg_900;
wire   [11:0] zext_ln29_1_fu_267_p1;
reg   [11:0] zext_ln29_1_reg_906;
wire   [2:0] select_ln13_fu_317_p3;
reg   [2:0] select_ln13_reg_912;
wire   [2:0] select_ln13_1_fu_333_p3;
reg   [2:0] select_ln13_1_reg_918;
wire   [3:0] select_ln13_3_fu_365_p3;
reg   [3:0] select_ln13_3_reg_925;
wire   [7:0] zext_ln29_4_fu_381_p1;
reg   [7:0] zext_ln29_4_reg_930;
wire   [7:0] zext_ln29_7_fu_416_p1;
reg   [7:0] zext_ln29_7_reg_940;
wire   [5:0] add_ln13_fu_445_p2;
reg   [5:0] add_ln13_reg_950;
wire   [11:0] add_ln29_7_fu_496_p2;
reg   [11:0] add_ln29_7_reg_960;
reg   [31:0] conv_2_out_load_1_reg_965;
wire   [2:0] c_fu_501_p2;
reg   [2:0] c_reg_972;
wire   [5:0] select_ln13_4_fu_506_p3;
reg   [5:0] select_ln13_4_reg_977;
wire   [31:0] select_ln29_fu_577_p3;
reg   [31:0] select_ln29_reg_982;
reg   [31:0] conv_2_out_load_2_reg_989;
reg    ap_enable_reg_pp0_iter1;
wire   [9:0] add_ln36_2_fu_603_p2;
reg   [9:0] add_ln36_2_reg_996;
reg   [9:0] add_ln36_2_reg_996_pp0_iter2_reg;
wire   [31:0] select_ln29_1_fu_695_p3;
reg   [31:0] select_ln29_1_reg_1006;
wire   [31:0] select_ln29_2_fu_784_p3;
reg   [31:0] select_ln29_2_reg_1013;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
wire    ap_block_pp0_stage1_subdone;
reg   [8:0] ap_phi_mux_indvar_flatten23_phi_fu_144_p4;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_f_0_phi_fu_155_p4;
reg   [5:0] ap_phi_mux_indvar_flatten_phi_fu_166_p4;
reg   [2:0] ap_phi_mux_r_0_phi_fu_177_p4;
reg   [2:0] ap_phi_mux_c_0_phi_fu_188_p4;
wire   [63:0] zext_ln29_5_fu_405_p1;
wire   [63:0] zext_ln29_8_fu_440_p1;
wire   [63:0] zext_ln29_6_fu_478_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln29_9_fu_609_p1;
wire   [63:0] zext_ln36_3_fu_882_p1;
reg   [31:0] grp_fu_195_p0;
reg   [31:0] grp_fu_195_p1;
reg   [31:0] grp_fu_201_p0;
reg   [31:0] grp_fu_201_p1;
wire   [3:0] shl_ln_fu_213_p3;
wire   [4:0] f_fu_239_p2;
wire   [3:0] or_ln26_fu_221_p2;
wire   [0:0] icmp_ln16_fu_293_p2;
wire   [0:0] xor_ln29_fu_287_p2;
wire   [2:0] select_ln29_4_fu_251_p3;
wire   [0:0] and_ln29_7_fu_299_p2;
wire   [0:0] or_ln13_fu_311_p2;
wire   [2:0] r_fu_305_p2;
wire   [3:0] shl_ln26_mid1_fu_325_p3;
wire   [3:0] select_ln29_6_fu_271_p3;
wire   [3:0] select_ln13_2_fu_341_p3;
wire   [3:0] mul_ln29_fu_353_p1;
wire   [3:0] or_ln26_1_fu_359_p2;
wire   [3:0] select_ln29_7_fu_279_p3;
wire   [3:0] shl_ln1_fu_373_p3;
wire   [7:0] mul_ln29_fu_353_p2;
wire   [7:0] add_ln29_fu_385_p2;
wire   [11:0] tmp_14_cast_fu_391_p3;
wire   [11:0] add_ln29_1_fu_399_p2;
wire   [3:0] or_ln27_fu_410_p2;
wire   [7:0] add_ln29_4_fu_420_p2;
wire   [11:0] tmp_18_cast_fu_426_p3;
wire   [11:0] add_ln29_5_fu_434_p2;
wire   [3:0] mul_ln29_1_fu_454_p1;
wire   [7:0] mul_ln29_1_fu_454_p2;
wire   [7:0] add_ln29_2_fu_460_p2;
wire   [11:0] tmp_16_cast_fu_465_p3;
wire   [11:0] add_ln29_3_fu_473_p2;
wire   [7:0] add_ln29_6_fu_483_p2;
wire   [11:0] tmp_20_cast_fu_488_p3;
wire   [4:0] tmp_fu_518_p3;
wire   [5:0] zext_ln36_fu_515_p1;
wire   [5:0] zext_ln36_2_fu_525_p1;
wire   [31:0] bitcast_ln29_fu_535_p1;
wire   [7:0] tmp_3_fu_539_p4;
wire   [22:0] trunc_ln29_fu_549_p1;
wire   [0:0] icmp_ln29_1_fu_559_p2;
wire   [0:0] icmp_ln29_fu_553_p2;
wire   [0:0] or_ln29_fu_565_p2;
wire   [0:0] grp_fu_195_p2;
wire   [0:0] and_ln29_fu_571_p2;
wire   [5:0] add_ln36_fu_529_p2;
wire   [5:0] zext_ln36_1_fu_586_p1;
wire   [5:0] add_ln36_1_fu_589_p2;
wire   [9:0] tmp_22_cast_fu_595_p3;
wire   [9:0] zext_ln29_fu_512_p1;
wire   [31:0] bitcast_ln29_1_fu_613_p1;
wire   [31:0] bitcast_ln29_2_fu_630_p1;
wire   [7:0] tmp_5_fu_616_p4;
wire   [22:0] trunc_ln29_1_fu_626_p1;
wire   [0:0] icmp_ln29_3_fu_653_p2;
wire   [0:0] icmp_ln29_2_fu_647_p2;
wire   [7:0] tmp_6_fu_633_p4;
wire   [22:0] trunc_ln29_2_fu_643_p1;
wire   [0:0] icmp_ln29_5_fu_671_p2;
wire   [0:0] icmp_ln29_4_fu_665_p2;
wire   [0:0] or_ln29_1_fu_659_p2;
wire   [0:0] or_ln29_2_fu_677_p2;
wire   [0:0] and_ln29_1_fu_683_p2;
wire   [0:0] and_ln29_2_fu_689_p2;
wire   [31:0] bitcast_ln29_3_fu_702_p1;
wire   [31:0] bitcast_ln29_4_fu_719_p1;
wire   [7:0] tmp_8_fu_705_p4;
wire   [22:0] trunc_ln29_3_fu_715_p1;
wire   [0:0] icmp_ln29_7_fu_742_p2;
wire   [0:0] icmp_ln29_6_fu_736_p2;
wire   [7:0] tmp_9_fu_722_p4;
wire   [22:0] trunc_ln29_4_fu_732_p1;
wire   [0:0] icmp_ln29_9_fu_760_p2;
wire   [0:0] icmp_ln29_8_fu_754_p2;
wire   [0:0] or_ln29_3_fu_748_p2;
wire   [0:0] or_ln29_4_fu_766_p2;
wire   [0:0] and_ln29_3_fu_772_p2;
wire   [0:0] grp_fu_201_p2;
wire   [0:0] and_ln29_4_fu_778_p2;
wire   [31:0] bitcast_ln29_5_fu_791_p1;
wire   [31:0] bitcast_ln29_6_fu_809_p1;
wire   [7:0] tmp_1_fu_795_p4;
wire   [22:0] trunc_ln29_5_fu_805_p1;
wire   [0:0] icmp_ln29_11_fu_832_p2;
wire   [0:0] icmp_ln29_10_fu_826_p2;
wire   [7:0] tmp_10_fu_812_p4;
wire   [22:0] trunc_ln29_6_fu_822_p1;
wire   [0:0] icmp_ln29_13_fu_850_p2;
wire   [0:0] icmp_ln29_12_fu_844_p2;
wire   [0:0] or_ln29_5_fu_838_p2;
wire   [0:0] or_ln29_6_fu_856_p2;
wire   [0:0] and_ln29_5_fu_862_p2;
wire   [0:0] and_ln29_6_fu_868_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_block_pp0_stage0_00001;
wire    ap_CS_fsm_state8;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul_ln29_1_fu_454_p10;
wire   [7:0] mul_ln29_fu_353_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_195_p0),
    .din1(grp_fu_195_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_195_p2)
);

cnn_fcmp_32ns_32neOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cnn_fcmp_32ns_32neOg_U22(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_201_p0),
    .din1(grp_fu_201_p1),
    .ce(1'b1),
    .opcode(5'd2),
    .dout(grp_fu_201_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_184 <= c_reg_972;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_184 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_151 <= select_ln29_5_reg_900;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_151 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten23_reg_140 <= add_ln10_reg_890;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten23_reg_140 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_162 <= select_ln13_4_reg_977;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_162 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_173 <= select_ln13_1_reg_918;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_173 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        reg_206 <= conv_2_out_q1;
    end else if (((icmp_ln10_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        reg_206 <= conv_2_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln10_reg_890 <= add_ln10_fu_233_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln13_reg_950 <= add_ln13_fu_445_p2;
        icmp_ln13_reg_895 <= icmp_ln13_fu_245_p2;
        select_ln13_3_reg_925[3 : 1] <= select_ln13_3_fu_365_p3[3 : 1];
        select_ln13_reg_912 <= select_ln13_fu_317_p3;
        zext_ln29_1_reg_906[4 : 0] <= zext_ln29_1_fu_267_p1[4 : 0];
        zext_ln29_4_reg_930[3 : 1] <= zext_ln29_4_fu_381_p1[3 : 1];
        zext_ln29_7_reg_940[3 : 1] <= zext_ln29_7_fu_416_p1[3 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        add_ln29_7_reg_960 <= add_ln29_7_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_2_reg_996 <= add_ln36_2_fu_603_p2;
        select_ln29_reg_982 <= select_ln29_fu_577_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln36_2_reg_996_pp0_iter2_reg <= add_ln36_2_reg_996;
        icmp_ln10_reg_886 <= icmp_ln10_fu_227_p2;
        icmp_ln10_reg_886_pp0_iter1_reg <= icmp_ln10_reg_886;
        icmp_ln10_reg_886_pp0_iter2_reg <= icmp_ln10_reg_886_pp0_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        c_reg_972 <= c_fu_501_p2;
        conv_2_out_load_1_reg_965 <= conv_2_out_q1;
        select_ln13_4_reg_977 <= select_ln13_4_fu_506_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_2_out_load_2_reg_989 <= conv_2_out_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_227_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln13_1_reg_918 <= select_ln13_1_fu_333_p3;
        select_ln29_5_reg_900 <= select_ln29_5_fu_259_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_886_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        select_ln29_1_reg_1006 <= select_ln29_1_fu_695_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_886_pp0_iter1_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_2_reg_1013 <= select_ln29_2_fu_784_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_227_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_188_p4 = c_reg_972;
    end else begin
        ap_phi_mux_c_0_phi_fu_188_p4 = c_0_reg_184;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_155_p4 = select_ln29_5_reg_900;
    end else begin
        ap_phi_mux_f_0_phi_fu_155_p4 = f_0_reg_151;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_144_p4 = add_ln10_reg_890;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_144_p4 = indvar_flatten23_reg_140;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = select_ln13_4_reg_977;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_166_p4 = indvar_flatten_reg_162;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_886 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_177_p4 = select_ln13_1_reg_918;
    end else begin
        ap_phi_mux_r_0_phi_fu_177_p4 = r_0_reg_173;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
            conv_2_out_address0 = zext_ln29_6_fu_478_p1;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
            conv_2_out_address0 = zext_ln29_5_fu_405_p1;
        end else begin
            conv_2_out_address0 = 'bx;
        end
    end else begin
        conv_2_out_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        conv_2_out_address1 = zext_ln29_9_fu_609_p1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        conv_2_out_address1 = zext_ln29_8_fu_440_p1;
    end else begin
        conv_2_out_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        conv_2_out_ce0 = 1'b1;
    end else begin
        conv_2_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1)))) begin
        conv_2_out_ce1 = 1'b1;
    end else begin
        conv_2_out_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_195_p0 = conv_2_out_load_1_reg_965;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_195_p0 = conv_2_out_q0;
    end else begin
        grp_fu_195_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_195_p1 = select_ln29_fu_577_p3;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_195_p1 = 32'd8388608;
    end else begin
        grp_fu_195_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_201_p0 = conv_2_out_q1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_201_p0 = conv_2_out_load_2_reg_989;
    end else begin
        grp_fu_201_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_201_p1 = select_ln29_2_fu_784_p3;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_201_p1 = select_ln29_1_fu_695_p3;
    end else begin
        grp_fu_201_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max_pool_out_ce0 = 1'b1;
    end else begin
        max_pool_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_886_pp0_iter2_reg == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        max_pool_out_we0 = 1'b1;
    end else begin
        max_pool_out_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln10_fu_227_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_233_p2 = (ap_phi_mux_indvar_flatten23_phi_fu_144_p4 + 9'd1);

assign add_ln13_fu_445_p2 = (6'd1 + ap_phi_mux_indvar_flatten_phi_fu_166_p4);

assign add_ln29_1_fu_399_p2 = (tmp_14_cast_fu_391_p3 + zext_ln29_1_fu_267_p1);

assign add_ln29_2_fu_460_p2 = (mul_ln29_1_fu_454_p2 + zext_ln29_4_reg_930);

assign add_ln29_3_fu_473_p2 = (tmp_16_cast_fu_465_p3 + zext_ln29_1_reg_906);

assign add_ln29_4_fu_420_p2 = (mul_ln29_fu_353_p2 + zext_ln29_7_fu_416_p1);

assign add_ln29_5_fu_434_p2 = (tmp_18_cast_fu_426_p3 + zext_ln29_1_fu_267_p1);

assign add_ln29_6_fu_483_p2 = (mul_ln29_1_fu_454_p2 + zext_ln29_7_reg_940);

assign add_ln29_7_fu_496_p2 = (tmp_20_cast_fu_488_p3 + zext_ln29_1_reg_906);

assign add_ln29_fu_385_p2 = (mul_ln29_fu_353_p2 + zext_ln29_4_fu_381_p1);

assign add_ln36_1_fu_589_p2 = (add_ln36_fu_529_p2 + zext_ln36_1_fu_586_p1);

assign add_ln36_2_fu_603_p2 = (tmp_22_cast_fu_595_p3 + zext_ln29_fu_512_p1);

assign add_ln36_fu_529_p2 = (zext_ln36_fu_515_p1 + zext_ln36_2_fu_525_p1);

assign and_ln29_1_fu_683_p2 = (or_ln29_2_fu_677_p2 & or_ln29_1_fu_659_p2);

assign and_ln29_2_fu_689_p2 = (grp_fu_195_p2 & and_ln29_1_fu_683_p2);

assign and_ln29_3_fu_772_p2 = (or_ln29_4_fu_766_p2 & or_ln29_3_fu_748_p2);

assign and_ln29_4_fu_778_p2 = (grp_fu_201_p2 & and_ln29_3_fu_772_p2);

assign and_ln29_5_fu_862_p2 = (or_ln29_6_fu_856_p2 & or_ln29_5_fu_838_p2);

assign and_ln29_6_fu_868_p2 = (grp_fu_201_p2 & and_ln29_5_fu_862_p2);

assign and_ln29_7_fu_299_p2 = (xor_ln29_fu_287_p2 & icmp_ln16_fu_293_p2);

assign and_ln29_fu_571_p2 = (or_ln29_fu_565_p2 & grp_fu_195_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln29_1_fu_613_p1 = conv_2_out_load_1_reg_965;

assign bitcast_ln29_2_fu_630_p1 = select_ln29_reg_982;

assign bitcast_ln29_3_fu_702_p1 = conv_2_out_load_2_reg_989;

assign bitcast_ln29_4_fu_719_p1 = select_ln29_1_reg_1006;

assign bitcast_ln29_5_fu_791_p1 = reg_206;

assign bitcast_ln29_6_fu_809_p1 = select_ln29_2_reg_1013;

assign bitcast_ln29_fu_535_p1 = reg_206;

assign c_fu_501_p2 = (3'd1 + select_ln13_reg_912);

assign f_fu_239_p2 = (5'd1 + ap_phi_mux_f_0_phi_fu_155_p4);

assign icmp_ln10_fu_227_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_144_p4 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_245_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_166_p4 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_293_p2 = ((ap_phi_mux_c_0_phi_fu_188_p4 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln29_10_fu_826_p2 = ((tmp_1_fu_795_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_11_fu_832_p2 = ((trunc_ln29_5_fu_805_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_12_fu_844_p2 = ((tmp_10_fu_812_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_13_fu_850_p2 = ((trunc_ln29_6_fu_822_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_1_fu_559_p2 = ((trunc_ln29_fu_549_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_2_fu_647_p2 = ((tmp_5_fu_616_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_3_fu_653_p2 = ((trunc_ln29_1_fu_626_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_4_fu_665_p2 = ((tmp_6_fu_633_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_5_fu_671_p2 = ((trunc_ln29_2_fu_643_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_6_fu_736_p2 = ((tmp_8_fu_705_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_7_fu_742_p2 = ((trunc_ln29_3_fu_715_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_8_fu_754_p2 = ((tmp_9_fu_722_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln29_9_fu_760_p2 = ((trunc_ln29_4_fu_732_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln29_fu_553_p2 = ((tmp_3_fu_539_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_out_address0 = zext_ln36_3_fu_882_p1;

assign max_pool_out_d0 = ((and_ln29_6_fu_868_p2[0:0] === 1'b1) ? reg_206 : select_ln29_2_reg_1013);

assign mul_ln29_1_fu_454_p1 = mul_ln29_1_fu_454_p10;

assign mul_ln29_1_fu_454_p10 = select_ln13_3_reg_925;

assign mul_ln29_1_fu_454_p2 = (8'd11 * mul_ln29_1_fu_454_p1);

assign mul_ln29_fu_353_p1 = mul_ln29_fu_353_p10;

assign mul_ln29_fu_353_p10 = select_ln13_2_fu_341_p3;

assign mul_ln29_fu_353_p2 = (8'd11 * mul_ln29_fu_353_p1);

assign or_ln13_fu_311_p2 = (icmp_ln13_fu_245_p2 | and_ln29_7_fu_299_p2);

assign or_ln26_1_fu_359_p2 = (shl_ln26_mid1_fu_325_p3 | 4'd1);

assign or_ln26_fu_221_p2 = (shl_ln_fu_213_p3 | 4'd1);

assign or_ln27_fu_410_p2 = (shl_ln1_fu_373_p3 | 4'd1);

assign or_ln29_1_fu_659_p2 = (icmp_ln29_3_fu_653_p2 | icmp_ln29_2_fu_647_p2);

assign or_ln29_2_fu_677_p2 = (icmp_ln29_5_fu_671_p2 | icmp_ln29_4_fu_665_p2);

assign or_ln29_3_fu_748_p2 = (icmp_ln29_7_fu_742_p2 | icmp_ln29_6_fu_736_p2);

assign or_ln29_4_fu_766_p2 = (icmp_ln29_9_fu_760_p2 | icmp_ln29_8_fu_754_p2);

assign or_ln29_5_fu_838_p2 = (icmp_ln29_11_fu_832_p2 | icmp_ln29_10_fu_826_p2);

assign or_ln29_6_fu_856_p2 = (icmp_ln29_13_fu_850_p2 | icmp_ln29_12_fu_844_p2);

assign or_ln29_fu_565_p2 = (icmp_ln29_fu_553_p2 | icmp_ln29_1_fu_559_p2);

assign r_fu_305_p2 = (3'd1 + select_ln29_4_fu_251_p3);

assign select_ln13_1_fu_333_p3 = ((and_ln29_7_fu_299_p2[0:0] === 1'b1) ? r_fu_305_p2 : select_ln29_4_fu_251_p3);

assign select_ln13_2_fu_341_p3 = ((and_ln29_7_fu_299_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_325_p3 : select_ln29_6_fu_271_p3);

assign select_ln13_3_fu_365_p3 = ((and_ln29_7_fu_299_p2[0:0] === 1'b1) ? or_ln26_1_fu_359_p2 : select_ln29_7_fu_279_p3);

assign select_ln13_4_fu_506_p3 = ((icmp_ln13_reg_895[0:0] === 1'b1) ? 6'd1 : add_ln13_reg_950);

assign select_ln13_fu_317_p3 = ((or_ln13_fu_311_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_c_0_phi_fu_188_p4);

assign select_ln29_1_fu_695_p3 = ((and_ln29_2_fu_689_p2[0:0] === 1'b1) ? conv_2_out_load_1_reg_965 : select_ln29_reg_982);

assign select_ln29_2_fu_784_p3 = ((and_ln29_4_fu_778_p2[0:0] === 1'b1) ? conv_2_out_load_2_reg_989 : select_ln29_1_reg_1006);

assign select_ln29_4_fu_251_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_r_0_phi_fu_177_p4);

assign select_ln29_5_fu_259_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? f_fu_239_p2 : ap_phi_mux_f_0_phi_fu_155_p4);

assign select_ln29_6_fu_271_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? 4'd0 : shl_ln_fu_213_p3);

assign select_ln29_7_fu_279_p3 = ((icmp_ln13_fu_245_p2[0:0] === 1'b1) ? 4'd1 : or_ln26_fu_221_p2);

assign select_ln29_fu_577_p3 = ((and_ln29_fu_571_p2[0:0] === 1'b1) ? reg_206 : 32'd8388608);

assign shl_ln1_fu_373_p3 = {{select_ln13_fu_317_p3}, {1'd0}};

assign shl_ln26_mid1_fu_325_p3 = {{r_fu_305_p2}, {1'd0}};

assign shl_ln_fu_213_p3 = {{ap_phi_mux_r_0_phi_fu_177_p4}, {1'd0}};

assign tmp_10_fu_812_p4 = {{bitcast_ln29_6_fu_809_p1[30:23]}};

assign tmp_14_cast_fu_391_p3 = {{add_ln29_fu_385_p2}, {4'd0}};

assign tmp_16_cast_fu_465_p3 = {{add_ln29_2_fu_460_p2}, {4'd0}};

assign tmp_18_cast_fu_426_p3 = {{add_ln29_4_fu_420_p2}, {4'd0}};

assign tmp_1_fu_795_p4 = {{bitcast_ln29_5_fu_791_p1[30:23]}};

assign tmp_20_cast_fu_488_p3 = {{add_ln29_6_fu_483_p2}, {4'd0}};

assign tmp_22_cast_fu_595_p3 = {{add_ln36_1_fu_589_p2}, {4'd0}};

assign tmp_3_fu_539_p4 = {{bitcast_ln29_fu_535_p1[30:23]}};

assign tmp_5_fu_616_p4 = {{bitcast_ln29_1_fu_613_p1[30:23]}};

assign tmp_6_fu_633_p4 = {{bitcast_ln29_2_fu_630_p1[30:23]}};

assign tmp_8_fu_705_p4 = {{bitcast_ln29_3_fu_702_p1[30:23]}};

assign tmp_9_fu_722_p4 = {{bitcast_ln29_4_fu_719_p1[30:23]}};

assign tmp_fu_518_p3 = {{select_ln13_1_reg_918}, {2'd0}};

assign trunc_ln29_1_fu_626_p1 = bitcast_ln29_1_fu_613_p1[22:0];

assign trunc_ln29_2_fu_643_p1 = bitcast_ln29_2_fu_630_p1[22:0];

assign trunc_ln29_3_fu_715_p1 = bitcast_ln29_3_fu_702_p1[22:0];

assign trunc_ln29_4_fu_732_p1 = bitcast_ln29_4_fu_719_p1[22:0];

assign trunc_ln29_5_fu_805_p1 = bitcast_ln29_5_fu_791_p1[22:0];

assign trunc_ln29_6_fu_822_p1 = bitcast_ln29_6_fu_809_p1[22:0];

assign trunc_ln29_fu_549_p1 = bitcast_ln29_fu_535_p1[22:0];

assign xor_ln29_fu_287_p2 = (icmp_ln13_fu_245_p2 ^ 1'd1);

assign zext_ln29_1_fu_267_p1 = select_ln29_5_fu_259_p3;

assign zext_ln29_4_fu_381_p1 = shl_ln1_fu_373_p3;

assign zext_ln29_5_fu_405_p1 = add_ln29_1_fu_399_p2;

assign zext_ln29_6_fu_478_p1 = add_ln29_3_fu_473_p2;

assign zext_ln29_7_fu_416_p1 = or_ln27_fu_410_p2;

assign zext_ln29_8_fu_440_p1 = add_ln29_5_fu_434_p2;

assign zext_ln29_9_fu_609_p1 = add_ln29_7_reg_960;

assign zext_ln29_fu_512_p1 = select_ln29_5_reg_900;

assign zext_ln36_1_fu_586_p1 = select_ln13_reg_912;

assign zext_ln36_2_fu_525_p1 = tmp_fu_518_p3;

assign zext_ln36_3_fu_882_p1 = add_ln36_2_reg_996_pp0_iter2_reg;

assign zext_ln36_fu_515_p1 = select_ln13_1_reg_918;

always @ (posedge ap_clk) begin
    zext_ln29_1_reg_906[11:5] <= 7'b0000000;
    select_ln13_3_reg_925[0] <= 1'b1;
    zext_ln29_4_reg_930[0] <= 1'b0;
    zext_ln29_4_reg_930[7:4] <= 4'b0000;
    zext_ln29_7_reg_940[0] <= 1'b1;
    zext_ln29_7_reg_940[7:4] <= 4'b0000;
end

endmodule //max_pool_2
