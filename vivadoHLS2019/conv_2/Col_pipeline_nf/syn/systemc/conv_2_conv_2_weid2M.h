// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid2M_H__
#define __conv_2_conv_2_weid2M_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid2M_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid2M_ram) {
        ram[0] = "0b00111011111010010001001111000100";
        ram[1] = "0b00111101010101100011010100010001";
        ram[2] = "0b00111101100101001101010100110000";
        ram[3] = "0b10111101010111101111000110110001";
        ram[4] = "0b00111011111010010001011010110010";
        ram[5] = "0b10111101111001011110101101110010";
        ram[6] = "0b10111101100000010010110001010011";
        ram[7] = "0b10111101100110101111110100101100";
        ram[8] = "0b10111100110111110111100111101011";
        ram[9] = "0b10111110001001101100001010011100";
        ram[10] = "0b10111110100000111011010101100101";
        ram[11] = "0b10111110001101111001110111010111";
        ram[12] = "0b00111110000011010000000101111101";
        ram[13] = "0b00111101101111000110010001110010";
        ram[14] = "0b00111100101111011101001110011011";
        ram[15] = "0b10111101011100110100100010010110";
        ram[16] = "0b00111100101100101111011101101000";
        ram[17] = "0b10111110001110110101011011110101";
        ram[18] = "0b00111101101000000001000111011100";
        ram[19] = "0b00111101110011101011001111001010";
        ram[20] = "0b10111110001110000010101000001010";
        ram[21] = "0b10111100111111100011011100000101";
        ram[22] = "0b00111100001100110011010111110011";
        ram[23] = "0b00111110000000100000000111101010";
        ram[24] = "0b00111101101101000011100101111111";
        ram[25] = "0b10111101101101000000101110001110";
        ram[26] = "0b10111110001000010000010000110101";
        ram[27] = "0b00111101100110101010111100100011";
        ram[28] = "0b00111100111100000011111110110111";
        ram[29] = "0b10111101001000011111110011101010";
        ram[30] = "0b00111101111111010000111000001001";
        ram[31] = "0b00111101110101010111000110000010";
        ram[32] = "0b10111110111011001010000011110001";
        ram[33] = "0b10111101010101010101001001001111";
        ram[34] = "0b10111110001001111000010000100110";
        ram[35] = "0b10111100100011111001111001100000";
        ram[36] = "0b00111110001011001010101100010000";
        ram[37] = "0b10111110011110101101000011100110";
        ram[38] = "0b10111100000111001000101110101000";
        ram[39] = "0b10111101111000011001001010011011";
        ram[40] = "0b00111101011111111101100101001000";
        ram[41] = "0b00111101111000010011010101110110";
        ram[42] = "0b10111110000001101000001100011001";
        ram[43] = "0b10111010010110101001011101101000";
        ram[44] = "0b10111101111100101011000110010010";
        ram[45] = "0b10111110100111100101110100101110";
        ram[46] = "0b10111101010111110100101101100010";
        ram[47] = "0b10111100101011001111000010011110";
        ram[48] = "0b00111100100001101100001001000010";
        ram[49] = "0b10111010110101100010010011101000";
        ram[50] = "0b00111110001101000011101100110110";
        ram[51] = "0b10111110000100000110101000001110";
        ram[52] = "0b10111101111100111100100101111010";
        ram[53] = "0b00111110001010001111111010000001";
        ram[54] = "0b00111011101011100110110000101000";
        ram[55] = "0b00111110100010100001110111111110";
        ram[56] = "0b10111101101001100011011000101000";
        ram[57] = "0b10111101011011101101110000111101";
        ram[58] = "0b10111110011000111101011010000010";
        ram[59] = "0b10111101011010101000010011010110";
        ram[60] = "0b00111110010110111111001100000111";
        ram[61] = "0b00111110011111100110100101111111";
        ram[62] = "0b10111101000000110000000110000001";
        ram[63] = "0b10111110001000010100001011011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid2M) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid2M_ram* meminst;


SC_CTOR(conv_2_conv_2_weid2M) {
meminst = new conv_2_conv_2_weid2M_ram("conv_2_conv_2_weid2M_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid2M() {
    delete meminst;
}


};//endmodule
#endif
