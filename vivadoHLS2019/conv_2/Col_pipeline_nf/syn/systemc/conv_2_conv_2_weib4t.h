// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib4t_H__
#define __conv_2_conv_2_weib4t_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib4t_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib4t_ram) {
        ram[0] = "0b10111101011101011001000110011010";
        ram[1] = "0b10111101000001111111011000100111";
        ram[2] = "0b10111110011000010010101110001011";
        ram[3] = "0b10111110000111010010111011000100";
        ram[4] = "0b10111101110010111000110110100010";
        ram[5] = "0b00111101100010100000001000000010";
        ram[6] = "0b10111101011111011000110100110100";
        ram[7] = "0b10111110000111110101110000001010";
        ram[8] = "0b10111110001101010100000111100100";
        ram[9] = "0b00111110001010101011001000100111";
        ram[10] = "0b00111101000111001100011110001111";
        ram[11] = "0b10111100101010101010111011010010";
        ram[12] = "0b10111101111011111010010001110011";
        ram[13] = "0b10111110011100001010000000100111";
        ram[14] = "0b10111101111010001000011000100101";
        ram[15] = "0b10111101010101100111111000101000";
        ram[16] = "0b10111110000010100011100101010111";
        ram[17] = "0b10111100111110110010111001111010";
        ram[18] = "0b10111110010010100011101101101101";
        ram[19] = "0b00111110001110110011000101111100";
        ram[20] = "0b10111110001110100001111111011000";
        ram[21] = "0b10111110001101001011111101111100";
        ram[22] = "0b10111110111100011111010101110100";
        ram[23] = "0b00111101101011100111110001111110";
        ram[24] = "0b10111110100110011011100100011011";
        ram[25] = "0b10111100001100111111010111101110";
        ram[26] = "0b00111011101011110110011101100111";
        ram[27] = "0b00111101011101000011100010000011";
        ram[28] = "0b10111100010101101000111111111111";
        ram[29] = "0b10111101000000111101000110110001";
        ram[30] = "0b10111110001000110110100111101100";
        ram[31] = "0b00111101111101011101110100111000";
        ram[32] = "0b10111101111110101101101001000111";
        ram[33] = "0b10111110100001001011111110110000";
        ram[34] = "0b10111101000000010111100111111100";
        ram[35] = "0b00111101101100110111001110100101";
        ram[36] = "0b10111100101011101110001101011001";
        ram[37] = "0b00111110000100101101001110011111";
        ram[38] = "0b10111110001001010000101010110110";
        ram[39] = "0b10111110001101011000101101111011";
        ram[40] = "0b00111011100101101110111110110011";
        ram[41] = "0b10111101001101001000101101110011";
        ram[42] = "0b10111110100101000110011001011100";
        ram[43] = "0b10111101100001011011011100101010";
        ram[44] = "0b00111101010101101111100000001001";
        ram[45] = "0b00111101101010101110111010010000";
        ram[46] = "0b00111101010111011000001101110000";
        ram[47] = "0b00111101000000111011011000000001";
        ram[48] = "0b00111101100101100111000111001010";
        ram[49] = "0b10111110000100100000110000110011";
        ram[50] = "0b10111110101100000000011000001000";
        ram[51] = "0b10111100011111001011010011000100";
        ram[52] = "0b10111110100000100010101110110001";
        ram[53] = "0b00111110011110011010101010100110";
        ram[54] = "0b00111011110101111101101111001001";
        ram[55] = "0b10111101111001001011111110011101";
        ram[56] = "0b00111101000011000110100011101010";
        ram[57] = "0b00111101000010111010100101101011";
        ram[58] = "0b00111100110100101110001101010110";
        ram[59] = "0b00111101100111000100110011111100";
        ram[60] = "0b10111110110111101010011110101000";
        ram[61] = "0b10111110001101100101101011100111";
        ram[62] = "0b10111110010101100101011010010010";
        ram[63] = "0b10111101011010111110100011101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib4t) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib4t_ram* meminst;


SC_CTOR(conv_2_conv_2_weib4t) {
meminst = new conv_2_conv_2_weib4t_ram("conv_2_conv_2_weib4t_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib4t() {
    delete meminst;
}


};//endmodule
#endif
