// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid6N_H__
#define __conv_2_conv_2_weid6N_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid6N_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid6N_ram) {
        ram[0] = "0b00111101011011011110001100001011";
        ram[1] = "0b00111110010011001010011000000000";
        ram[2] = "0b00111101010101011101001011010111";
        ram[3] = "0b10111100001101101000111001101111";
        ram[4] = "0b10111011110100001010011011010111";
        ram[5] = "0b10111110001010110100000000100000";
        ram[6] = "0b10111110011000001000111000110010";
        ram[7] = "0b00111100001101001011110111101000";
        ram[8] = "0b10111101101010010000100110011100";
        ram[9] = "0b10111110001001111001111100100011";
        ram[10] = "0b10111110011010111101011100000011";
        ram[11] = "0b10111110010100101010000100001010";
        ram[12] = "0b10111101110110010111000010010100";
        ram[13] = "0b00111101010000101011110101011100";
        ram[14] = "0b10111101010111001001111001101111";
        ram[15] = "0b10111101100010111011100110100001";
        ram[16] = "0b00111011111001111110100000010111";
        ram[17] = "0b10111101011101011011111111111111";
        ram[18] = "0b00111101110110000000000011000111";
        ram[19] = "0b00111101010011011010000010011001";
        ram[20] = "0b10111100010011000101000001010011";
        ram[21] = "0b00111101111100001010001101100101";
        ram[22] = "0b00111110000001001010111010010011";
        ram[23] = "0b10111110010100110111001000100110";
        ram[24] = "0b10111101011111011110111100110101";
        ram[25] = "0b10111101111111010101000010101100";
        ram[26] = "0b10111101111000101001001011011101";
        ram[27] = "0b00111100000111101101000110001101";
        ram[28] = "0b10111101011101111111000101000011";
        ram[29] = "0b00111101101110010000100110010001";
        ram[30] = "0b00111101111100000000011010011000";
        ram[31] = "0b10111101110011011000010100100110";
        ram[32] = "0b10111110011010111001010111000110";
        ram[33] = "0b00111101001000001100000011110011";
        ram[34] = "0b10111110100111100101001010011110";
        ram[35] = "0b10111101110101110010100111111001";
        ram[36] = "0b10111100101100100011101001010011";
        ram[37] = "0b10111110000100110100110001100110";
        ram[38] = "0b10111101010101111100011110110100";
        ram[39] = "0b00111011111101101101011001010001";
        ram[40] = "0b00111110010110000010001110001000";
        ram[41] = "0b10111110011011011101100101100011";
        ram[42] = "0b00111101011010001000010111000011";
        ram[43] = "0b10111101101100010001011110001101";
        ram[44] = "0b00111100001000011111110110001100";
        ram[45] = "0b10111110010110011110111101010001";
        ram[46] = "0b10111110001111001010010110100111";
        ram[47] = "0b10111101111001101010111101011000";
        ram[48] = "0b00111101101011010000001001111101";
        ram[49] = "0b00111101101100011000010110111100";
        ram[50] = "0b10111101000000111010111010101111";
        ram[51] = "0b00111011100011100111000001110001";
        ram[52] = "0b10111101000101000010101000000000";
        ram[53] = "0b00111101011011000111111000110001";
        ram[54] = "0b10111101111100011110100110011101";
        ram[55] = "0b00111101000001010110110011010011";
        ram[56] = "0b00111101011000110011111001010100";
        ram[57] = "0b10111101000011001001010001110011";
        ram[58] = "0b10111101110001101100010011111111";
        ram[59] = "0b10111101101011100010000001000011";
        ram[60] = "0b00111110001010000101000000100010";
        ram[61] = "0b10111101101010010111000111100101";
        ram[62] = "0b00111110001000110111110111001101";
        ram[63] = "0b00111101011100001001001100001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid6N) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid6N_ram* meminst;


SC_CTOR(conv_2_conv_2_weid6N) {
meminst = new conv_2_conv_2_weid6N_ram("conv_2_conv_2_weid6N_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid6N() {
    delete meminst;
}


};//endmodule
#endif
