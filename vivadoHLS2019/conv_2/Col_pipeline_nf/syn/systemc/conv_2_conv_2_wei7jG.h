// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei7jG_H__
#define __conv_2_conv_2_wei7jG_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei7jG_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei7jG_ram) {
        ram[0] = "0b00111100100101010100110000010111";
        ram[1] = "0b10111101101111111111110011101010";
        ram[2] = "0b10111101111110001101101111100110";
        ram[3] = "0b00111100011010101011110111111110";
        ram[4] = "0b10111101100111010001011000111011";
        ram[5] = "0b10111101100101111110011110111111";
        ram[6] = "0b10111110010100110111100010001111";
        ram[7] = "0b10111110000111110110100001000010";
        ram[8] = "0b00111110001011101011110011000101";
        ram[9] = "0b00111100110111010110011110110101";
        ram[10] = "0b00111101101010101001100010011101";
        ram[11] = "0b10111100010000010010010110001100";
        ram[12] = "0b10111110000101011100111110010100";
        ram[13] = "0b10111110001111010010001010000000";
        ram[14] = "0b00111101010011101001111111010110";
        ram[15] = "0b00111110010011000001101001100111";
        ram[16] = "0b10111110100111001001101100100101";
        ram[17] = "0b10111101100000011100011100110010";
        ram[18] = "0b00111101010100110100110010101101";
        ram[19] = "0b10111011001011101110001011010000";
        ram[20] = "0b00111101010000101001110000111111";
        ram[21] = "0b10111110010010000111001000001111";
        ram[22] = "0b10111110100000101001101010111111";
        ram[23] = "0b00111101101001101000111001000000";
        ram[24] = "0b10111110010111100010001100010110";
        ram[25] = "0b00111110010110001111001111010010";
        ram[26] = "0b00111100110001011010001101101000";
        ram[27] = "0b00111101010010111011101001100010";
        ram[28] = "0b10111110000000111010000110010011";
        ram[29] = "0b10111101100111011011110001000110";
        ram[30] = "0b00111011100100101110100000001111";
        ram[31] = "0b10111110011010110010010000010000";
        ram[32] = "0b00111100001100010100100101101011";
        ram[33] = "0b10111101110000001000010100100110";
        ram[34] = "0b00111101011100000101000101000111";
        ram[35] = "0b00111011111001101100111010000100";
        ram[36] = "0b10111101100111111100011100101011";
        ram[37] = "0b00111101100000010000011110010111";
        ram[38] = "0b10111110000110000111001001010000";
        ram[39] = "0b00111011100001110000010011101000";
        ram[40] = "0b10111101100011101111010010111010";
        ram[41] = "0b00111110100011111011100010101000";
        ram[42] = "0b10111110001101110011100001101101";
        ram[43] = "0b00111101110000000001111110110000";
        ram[44] = "0b00111101111010001110011011011100";
        ram[45] = "0b00111101010011001010000010001010";
        ram[46] = "0b10111110000101010100110100100110";
        ram[47] = "0b10111101101100010001110011010011";
        ram[48] = "0b10111110000011011100100110010011";
        ram[49] = "0b10111110010110111100100110111001";
        ram[50] = "0b00111100001111100110110101111100";
        ram[51] = "0b10111101100000011001100100010001";
        ram[52] = "0b10111101101011000111000101110111";
        ram[53] = "0b00111101000001100011111110111110";
        ram[54] = "0b10111101100101001000100000110001";
        ram[55] = "0b10111101110110011010101100100011";
        ram[56] = "0b10111110000100111111101110011001";
        ram[57] = "0b00111100011010011010000110000011";
        ram[58] = "0b10111011100111011011100011010101";
        ram[59] = "0b00111011010101001000011010110100";
        ram[60] = "0b00111101000110110100011100110001";
        ram[61] = "0b00111110001110010000101111100001";
        ram[62] = "0b00111101110100011010000110010010";
        ram[63] = "0b00111110010010111001110000010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei7jG) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei7jG_ram* meminst;


SC_CTOR(conv_2_conv_2_wei7jG) {
meminst = new conv_2_conv_2_wei7jG_ram("conv_2_conv_2_wei7jG_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei7jG() {
    delete meminst;
}


};//endmodule
#endif
