// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei1iI_H__
#define __conv_2_conv_2_wei1iI_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei1iI_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei1iI_ram) {
        ram[0] = "0b10111110010000101110000111011111";
        ram[1] = "0b00111101101001100101010011111011";
        ram[2] = "0b00111101100010010111000110110011";
        ram[3] = "0b10111110000111000011001010000001";
        ram[4] = "0b00111101100010100011001010011000";
        ram[5] = "0b10111101100111000111110001101111";
        ram[6] = "0b10111110000001110010101010111101";
        ram[7] = "0b00111101100010011000010011011101";
        ram[8] = "0b10111101001010110110101000111010";
        ram[9] = "0b10111011001101101101010011100011";
        ram[10] = "0b10111101111010101100011111010100";
        ram[11] = "0b00111101100110010101100001000101";
        ram[12] = "0b00111100100010101010000110011100";
        ram[13] = "0b10111110000111111100110011110001";
        ram[14] = "0b10111110100010000001000100011110";
        ram[15] = "0b10111110000000001100000101010000";
        ram[16] = "0b00111101100001010001011011111000";
        ram[17] = "0b10111110001011110000100011010110";
        ram[18] = "0b00111101100111001010111000011001";
        ram[19] = "0b10111110001010001001110101110010";
        ram[20] = "0b00111110001010111000111110101001";
        ram[21] = "0b10111110100111111010011011000010";
        ram[22] = "0b10111110101100111001001010101010";
        ram[23] = "0b00111101101110011000101010101100";
        ram[24] = "0b10111110100111001000010110110100";
        ram[25] = "0b10111101110100011010001011111001";
        ram[26] = "0b10111101111110100101110110111001";
        ram[27] = "0b10111101100111010011010010110010";
        ram[28] = "0b10111110010010111011011011100001";
        ram[29] = "0b10111110000100110010100111011100";
        ram[30] = "0b00111110100011000111010101011101";
        ram[31] = "0b10111110000111100110110011011001";
        ram[32] = "0b10111110000101110100111000010000";
        ram[33] = "0b00111101110010010001100111010000";
        ram[34] = "0b10111101000101000011011000000000";
        ram[35] = "0b00111100110111110100110010000010";
        ram[36] = "0b00111100000011010100100000101111";
        ram[37] = "0b10111010001110001100101000000000";
        ram[38] = "0b00111110001100010111000110111010";
        ram[39] = "0b00111100001010100000011100111011";
        ram[40] = "0b10111110100011111001111000110001";
        ram[41] = "0b10111110010000011000100000111110";
        ram[42] = "0b10111110001000110101010111001000";
        ram[43] = "0b10111101110100011000110010101001";
        ram[44] = "0b00111110000111101000011010110111";
        ram[45] = "0b10111110011001010011100111111110";
        ram[46] = "0b00111101010111011101110000010100";
        ram[47] = "0b10111101101001000110001110100011";
        ram[48] = "0b00111101101111000100000100001001";
        ram[49] = "0b10111101110010110110001011101000";
        ram[50] = "0b10111110101001011110110000001000";
        ram[51] = "0b00111101000000110001110000110101";
        ram[52] = "0b00111101010110100111101001110111";
        ram[53] = "0b10111110010101101000000111101011";
        ram[54] = "0b10111110000110101001000011100111";
        ram[55] = "0b00111101110001011001100100110000";
        ram[56] = "0b10111101010111110010100100000100";
        ram[57] = "0b00111100011000110110010100110001";
        ram[58] = "0b10111110001111001000100101111001";
        ram[59] = "0b00111101101110001101110001110110";
        ram[60] = "0b10111110000100110111000100001100";
        ram[61] = "0b10111101100011111001110111110000";
        ram[62] = "0b00111110001101110000000010001110";
        ram[63] = "0b00111101110001001011100001001101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei1iI) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei1iI_ram* meminst;


SC_CTOR(conv_2_conv_2_wei1iI) {
meminst = new conv_2_conv_2_wei1iI_ram("conv_2_conv_2_wei1iI_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei1iI() {
    delete meminst;
}


};//endmodule
#endif
