// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei5jm_H__
#define __conv_2_conv_2_wei5jm_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei5jm_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei5jm_ram) {
        ram[0] = "0b10111101111111111000001000100011";
        ram[1] = "0b10111110000100001100010100110100";
        ram[2] = "0b10111101010100111011011010000000";
        ram[3] = "0b10111101001110011110001111010000";
        ram[4] = "0b10111101101011010010100110100110";
        ram[5] = "0b10111101110101001001111010011000";
        ram[6] = "0b10111110001101101001011000010010";
        ram[7] = "0b00111110000111101111101100101000";
        ram[8] = "0b00111010101010000111111101001000";
        ram[9] = "0b00111110000101110100011011100001";
        ram[10] = "0b10111101001110111000110101100110";
        ram[11] = "0b00111110100000101010100011100001";
        ram[12] = "0b10111110010010010101111011111111";
        ram[13] = "0b10111110101111100101000001111101";
        ram[14] = "0b10111101101110010100001010111000";
        ram[15] = "0b00111101010111110000110111110111";
        ram[16] = "0b10111110010111001100100000010100";
        ram[17] = "0b10111110100110011110100101101110";
        ram[18] = "0b00111101001000100111101001111111";
        ram[19] = "0b00111100110000000111010110001010";
        ram[20] = "0b00111110100011010000010100100000";
        ram[21] = "0b10111111000000110000000010101100";
        ram[22] = "0b10111110100101101001110111000000";
        ram[23] = "0b00111110000001110100001011110100";
        ram[24] = "0b10111110100010110001101110100010";
        ram[25] = "0b00111110000001100001010000111101";
        ram[26] = "0b10111101000111011010010000010001";
        ram[27] = "0b00111110000001101110111101111100";
        ram[28] = "0b10111110100110101111111110111110";
        ram[29] = "0b10111110001011101100101010111100";
        ram[30] = "0b00111101011011000110100100000111";
        ram[31] = "0b10111101101111110111010001010100";
        ram[32] = "0b00111101100010100110110100100000";
        ram[33] = "0b00111110011111101011001000001111";
        ram[34] = "0b00111100100010011000000001010110";
        ram[35] = "0b10111101010011110111100110111010";
        ram[36] = "0b00111100101101001111111011110100";
        ram[37] = "0b00111110000001111010001101010011";
        ram[38] = "0b10111100111111110011000100101100";
        ram[39] = "0b10111100100001110111111011110001";
        ram[40] = "0b10111101100111110101111010101111";
        ram[41] = "0b00111110000001010100011000000001";
        ram[42] = "0b10111101111000001111111011001110";
        ram[43] = "0b00111101011001110001110010110100";
        ram[44] = "0b00111101000100011101010011100111";
        ram[45] = "0b10111110010010110011011011010000";
        ram[46] = "0b10111110000010000001111000101110";
        ram[47] = "0b10111100111011001110111010101101";
        ram[48] = "0b00111101101100010101100011100010";
        ram[49] = "0b10111101100010010000110110010011";
        ram[50] = "0b10111110110100000001001000101110";
        ram[51] = "0b10111101001000000101100111000100";
        ram[52] = "0b10111101111001011010110000010010";
        ram[53] = "0b10111101111011000101000110001000";
        ram[54] = "0b10111110100110010011011001011011";
        ram[55] = "0b10111101100110111110010001011001";
        ram[56] = "0b10111110000001100011111110001001";
        ram[57] = "0b00111110010010010011111110001011";
        ram[58] = "0b10111110010010110101110000111100";
        ram[59] = "0b10111100111000100101110001001001";
        ram[60] = "0b10111110011011010010111011100000";
        ram[61] = "0b00111011100111100000101110000110";
        ram[62] = "0b00111101000101010001011111010010";
        ram[63] = "0b00111101100110111110010010110001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei5jm) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei5jm_ram* meminst;


SC_CTOR(conv_2_conv_2_wei5jm) {
meminst = new conv_2_conv_2_wei5jm_ram("conv_2_conv_2_wei5jm_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei5jm() {
    delete meminst;
}


};//endmodule
#endif
