// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weimb6_H__
#define __conv_2_conv_2_weimb6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weimb6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weimb6_ram) {
        ram[0] = "0b10111101000000011010101111100011";
        ram[1] = "0b00111101111100000111001011111010";
        ram[2] = "0b10111101100000101111100011011010";
        ram[3] = "0b00111101101110101110110011000000";
        ram[4] = "0b10111100001000110100001110011010";
        ram[5] = "0b10111110001100110000001001110011";
        ram[6] = "0b10111101010001011000110110101100";
        ram[7] = "0b10111101000001100111110100110011";
        ram[8] = "0b10111110111010100110110101001111";
        ram[9] = "0b10111110100001111010001010001001";
        ram[10] = "0b10111110001101100101001001000001";
        ram[11] = "0b10111101101000000001101100101011";
        ram[12] = "0b10111101011111111000111001110001";
        ram[13] = "0b00111110001110101011110011110101";
        ram[14] = "0b10111101110011000111110011010011";
        ram[15] = "0b10111110010101111000110010110110";
        ram[16] = "0b10111110011001010100011110001010";
        ram[17] = "0b00111100100011010011001110010011";
        ram[18] = "0b00111101000100101000001011101100";
        ram[19] = "0b00111110000010100011011100010100";
        ram[20] = "0b10111101000001010011001110000000";
        ram[21] = "0b00111100101101101111000101001001";
        ram[22] = "0b10111110000010110100001001011101";
        ram[23] = "0b10111110000001001010111011001000";
        ram[24] = "0b10111101110111111010100100100001";
        ram[25] = "0b10111110100111011000011000001100";
        ram[26] = "0b10111110000010000001101110001101";
        ram[27] = "0b00111100110100101100000111101100";
        ram[28] = "0b10111010110101101110111101101110";
        ram[29] = "0b10111101110101110011110101100110";
        ram[30] = "0b00111101101001010011001011101000";
        ram[31] = "0b00111101101100011110100100100101";
        ram[32] = "0b10111110000110001011001100110111";
        ram[33] = "0b10111101100100011101111110110100";
        ram[34] = "0b10111110001000110110110110101001";
        ram[35] = "0b00111110010000000110100001011010";
        ram[36] = "0b10111101110000011110001111011110";
        ram[37] = "0b10111101111110011000110000010100";
        ram[38] = "0b10111101111110101010001011010110";
        ram[39] = "0b10111110100110011011010010011110";
        ram[40] = "0b00111101010011010110010000001001";
        ram[41] = "0b10111110100111011011011011001110";
        ram[42] = "0b00111101101101010111001110110100";
        ram[43] = "0b00111101110110111101100000000110";
        ram[44] = "0b00111101010110001100000011011010";
        ram[45] = "0b10111101000000010010010110000010";
        ram[46] = "0b10111101101111101011000111001101";
        ram[47] = "0b10111101001001111001100111010000";
        ram[48] = "0b10111110001101111011010111101110";
        ram[49] = "0b10111110001111001101111101111100";
        ram[50] = "0b10111110000110000000010011000010";
        ram[51] = "0b10111101110100100000001011110000";
        ram[52] = "0b00111101011011010010100001011111";
        ram[53] = "0b10111100000100000111111101100001";
        ram[54] = "0b10111101100001111110111101010110";
        ram[55] = "0b00111101100010000110100111100111";
        ram[56] = "0b00111100111111100101011001100011";
        ram[57] = "0b10111101001010011110001001110100";
        ram[58] = "0b00111101100011100000111110001011";
        ram[59] = "0b10111101101001110001011000110011";
        ram[60] = "0b00111100101011100110101000011100";
        ram[61] = "0b10111101000111101000011000010110";
        ram[62] = "0b10111110010000100110110010001111";
        ram[63] = "0b10111110000110100111000101110110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weimb6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weimb6_ram* meminst;


SC_CTOR(conv_2_conv_2_weimb6) {
meminst = new conv_2_conv_2_weimb6_ram("conv_2_conv_2_weimb6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weimb6() {
    delete meminst;
}


};//endmodule
#endif
