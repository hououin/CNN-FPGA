// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib6t_H__
#define __conv_2_conv_2_weib6t_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib6t_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib6t_ram) {
        ram[0] = "0b10111101010111101001100001000100";
        ram[1] = "0b10111101111010100011011000000010";
        ram[2] = "0b10111101110000111011001011101010";
        ram[3] = "0b00111011011000101110100011110010";
        ram[4] = "0b10111101000000110001011011011110";
        ram[5] = "0b10111101100100100001000011000000";
        ram[6] = "0b10111101100011110111011000111110";
        ram[7] = "0b10111101101010010011100100110110";
        ram[8] = "0b00111101000100100011101000100010";
        ram[9] = "0b00111101111001100001001001100001";
        ram[10] = "0b00111101100011001001000010000010";
        ram[11] = "0b00111101000001010010000100000101";
        ram[12] = "0b10111110010001001110000001101010";
        ram[13] = "0b10111110101001100011100001011110";
        ram[14] = "0b10111101011100001011011110111110";
        ram[15] = "0b10111101000110110000110111010111";
        ram[16] = "0b00111101000101111000101111001010";
        ram[17] = "0b10111101110011001010010010111001";
        ram[18] = "0b10111100100001100111111011010100";
        ram[19] = "0b00111101100010010110001101110000";
        ram[20] = "0b10111110001010000110010001111101";
        ram[21] = "0b10111110011110001100011100100010";
        ram[22] = "0b10111100111001000100010000011100";
        ram[23] = "0b10111100110010000000100110110111";
        ram[24] = "0b10111101100110011101110101000001";
        ram[25] = "0b00111100110011000110010011010010";
        ram[26] = "0b00111101010001111001001000110110";
        ram[27] = "0b10111110100001101110010011011111";
        ram[28] = "0b10111110000001100101001101110110";
        ram[29] = "0b00111101100110100111110101110100";
        ram[30] = "0b10111110010010110011101101000011";
        ram[31] = "0b00111110000001101000011100011101";
        ram[32] = "0b10111110001101000000000111111010";
        ram[33] = "0b10111110001001000100110001111011";
        ram[34] = "0b10111100111001011101011110100111";
        ram[35] = "0b00111100111000001101100101110110";
        ram[36] = "0b10111100011110011111100111101011";
        ram[37] = "0b00111101111101010011001111001101";
        ram[38] = "0b10111110000100100111101000111101";
        ram[39] = "0b10111101100110010100001100011010";
        ram[40] = "0b00111100111001110010110000011111";
        ram[41] = "0b00111100100010010101011001010011";
        ram[42] = "0b00111100100001001111010100000001";
        ram[43] = "0b10111110000001111011100000000101";
        ram[44] = "0b00111101100000010010011110001100";
        ram[45] = "0b00111011111100110011100001111110";
        ram[46] = "0b10111101011000011100110010001000";
        ram[47] = "0b00111101000111111010000100111111";
        ram[48] = "0b00111110001101001010000001000110";
        ram[49] = "0b10111101010010011011101011111100";
        ram[50] = "0b10111110001111100111100000101111";
        ram[51] = "0b10111101001001011001110001100100";
        ram[52] = "0b10111101000010100110111001110111";
        ram[53] = "0b10111100011100010110010100111111";
        ram[54] = "0b00111101101010001010011000100100";
        ram[55] = "0b10111110011001001111010010111011";
        ram[56] = "0b10111101010011001000000011011101";
        ram[57] = "0b00111101110110111011101011000010";
        ram[58] = "0b00111101001111010001001101110110";
        ram[59] = "0b10111100001000111001000111011000";
        ram[60] = "0b10111110100001101010011101111110";
        ram[61] = "0b00111101101000011011110111100010";
        ram[62] = "0b10111101101010001100001001011000";
        ram[63] = "0b10111100101000111111100101001001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib6t) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib6t_ram* meminst;


SC_CTOR(conv_2_conv_2_weib6t) {
meminst = new conv_2_conv_2_weib6t_ram("conv_2_conv_2_weib6t_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib6t() {
    delete meminst;
}


};//endmodule
#endif
