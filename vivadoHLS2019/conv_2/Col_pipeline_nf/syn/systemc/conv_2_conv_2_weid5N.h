// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid5N_H__
#define __conv_2_conv_2_weid5N_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid5N_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid5N_ram) {
        ram[0] = "0b10111110000001100010001101000111";
        ram[1] = "0b10111100110110000100010001010000";
        ram[2] = "0b10111101111001001000110110111001";
        ram[3] = "0b10111101100011001011001001100110";
        ram[4] = "0b10111101001000010100111011110110";
        ram[5] = "0b10111110010010010000001101010000";
        ram[6] = "0b10111101101011101110111101101011";
        ram[7] = "0b00111101111100001001101110111010";
        ram[8] = "0b00111110011000001101111000101011";
        ram[9] = "0b10111110100110000000011100000011";
        ram[10] = "0b10111110001011100110110110100101";
        ram[11] = "0b10111110010001011101001011011001";
        ram[12] = "0b10111101000100011101110011001000";
        ram[13] = "0b10111101101101100001111101001100";
        ram[14] = "0b00111110100101111001100011010011";
        ram[15] = "0b00111101011101010011001001011011";
        ram[16] = "0b00111011110001011001011000010001";
        ram[17] = "0b00111101001000100100001101011100";
        ram[18] = "0b00111101111001100001010101000100";
        ram[19] = "0b00111101001001000011101000001100";
        ram[20] = "0b00111011111011100110101110011001";
        ram[21] = "0b00111101100001010001111000110101";
        ram[22] = "0b00111101001011101010001000011101";
        ram[23] = "0b10111110100001110111011110000010";
        ram[24] = "0b00111011001000011111001101010010";
        ram[25] = "0b10111101000011010111001010010111";
        ram[26] = "0b00111101100101000001101001000100";
        ram[27] = "0b10111100101100100000111000101011";
        ram[28] = "0b00111101101001011100100111001110";
        ram[29] = "0b10111100110011100010110101000011";
        ram[30] = "0b10111100110110111010111011111100";
        ram[31] = "0b10111101010001111000110000110111";
        ram[32] = "0b10111101110100111100001111001101";
        ram[33] = "0b00111101001101110101001111110010";
        ram[34] = "0b10111110001000100001010010101000";
        ram[35] = "0b10111101000000101010010011010001";
        ram[36] = "0b10111101011001100001110011000101";
        ram[37] = "0b10111101100000001110111001000110";
        ram[38] = "0b10111101111101100000110010001000";
        ram[39] = "0b00111101100110101001011001010011";
        ram[40] = "0b00111110001001001111111011111010";
        ram[41] = "0b10111110000011011101000110000000";
        ram[42] = "0b10111100010010010101001011000111";
        ram[43] = "0b10111101010011100000001000110110";
        ram[44] = "0b00111100111111111110010101101011";
        ram[45] = "0b00111110000101100000100011010111";
        ram[46] = "0b10111101100111011011001101101100";
        ram[47] = "0b10111110010100010000011101001111";
        ram[48] = "0b10111101010101011110111111001000";
        ram[49] = "0b00111101111111010101101010101101";
        ram[50] = "0b00111101010010111011100011100010";
        ram[51] = "0b10111110000111000010111011010001";
        ram[52] = "0b00111101100101111010111001011011";
        ram[53] = "0b00111100110010011101111001011000";
        ram[54] = "0b10111101010000010100000110101110";
        ram[55] = "0b10111100110001000100110110001000";
        ram[56] = "0b10111100100010110010110110101010";
        ram[57] = "0b00111110001000011101101001000000";
        ram[58] = "0b00111100000110111101101101110001";
        ram[59] = "0b00111101000010000100000000010111";
        ram[60] = "0b00111101000001111110111100011100";
        ram[61] = "0b00111101100100110110001001101010";
        ram[62] = "0b00111101100010111010111010110111";
        ram[63] = "0b10111100110000101001100000100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid5N) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid5N_ram* meminst;


SC_CTOR(conv_2_conv_2_weid5N) {
meminst = new conv_2_conv_2_weid5N_ram("conv_2_conv_2_weid5N_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid5N() {
    delete meminst;
}


};//endmodule
#endif
