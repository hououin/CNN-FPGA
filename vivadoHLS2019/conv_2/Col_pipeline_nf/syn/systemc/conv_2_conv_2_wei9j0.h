// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei9j0_H__
#define __conv_2_conv_2_wei9j0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei9j0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei9j0_ram) {
        ram[0] = "0b10111110000010101110101100011000";
        ram[1] = "0b00111101000001111100011011011111";
        ram[2] = "0b10111101110011010111110111011110";
        ram[3] = "0b10111100000101001010001110101101";
        ram[4] = "0b00111110001111101001001001100101";
        ram[5] = "0b10111101011001111011111110111110";
        ram[6] = "0b00111101011100001010100000110111";
        ram[7] = "0b10111101100001101111011101011110";
        ram[8] = "0b10111101100011000010100101011000";
        ram[9] = "0b10111100011101111110100111110001";
        ram[10] = "0b00111011001101011110111000110101";
        ram[11] = "0b10111101011101111100101101100100";
        ram[12] = "0b00111101011001010011110010010110";
        ram[13] = "0b10111101000000000111110111110001";
        ram[14] = "0b00111101101011100001101101001000";
        ram[15] = "0b10111100110100010000110011110111";
        ram[16] = "0b00111100110100100100001100010001";
        ram[17] = "0b10111101110110110011010111111011";
        ram[18] = "0b10111101000110100011100111111111";
        ram[19] = "0b10111110011110100000000010100111";
        ram[20] = "0b00111110000101001010111000110101";
        ram[21] = "0b10111101111010100001101010000100";
        ram[22] = "0b10111110001100010010001100010000";
        ram[23] = "0b10111101011011011101001111011100";
        ram[24] = "0b10111101001010010101011000010100";
        ram[25] = "0b10111100011010010111111010000000";
        ram[26] = "0b00111100110101001111111111001011";
        ram[27] = "0b10111110001010011101110000110111";
        ram[28] = "0b00111100100111111100100111010101";
        ram[29] = "0b10111101010010101110000000101110";
        ram[30] = "0b00111110000010100011110011010100";
        ram[31] = "0b10111110100100111101011101000111";
        ram[32] = "0b00111100111010010111001110110000";
        ram[33] = "0b00111101011000010110111010111001";
        ram[34] = "0b10111101110001110010001000100111";
        ram[35] = "0b00111101010101111000101001111011";
        ram[36] = "0b10111110010000101001101001101101";
        ram[37] = "0b10111011000100010100111011010100";
        ram[38] = "0b10111011111100010011100101100110";
        ram[39] = "0b10111010001101111011100101001101";
        ram[40] = "0b10111110000100110110010011101101";
        ram[41] = "0b10111101100100011001110101111111";
        ram[42] = "0b10111100001010010111001110110001";
        ram[43] = "0b00111101000101100011111111010111";
        ram[44] = "0b00111101111110111110100010100000";
        ram[45] = "0b10111100111101001110010001000111";
        ram[46] = "0b10111011110101101100101101110011";
        ram[47] = "0b00111101101111000100000010101001";
        ram[48] = "0b10111001101001000101011010001000";
        ram[49] = "0b10111110011110010101101111100100";
        ram[50] = "0b00111110000011000110111100010000";
        ram[51] = "0b00111101100011011001011101100001";
        ram[52] = "0b10111110001110111010011100010000";
        ram[53] = "0b10111101100010101110001010011100";
        ram[54] = "0b10111101100100100101011101101000";
        ram[55] = "0b10111011101110100000000001010011";
        ram[56] = "0b10111101101110010111011001001110";
        ram[57] = "0b10111101101001101000101010110111";
        ram[58] = "0b10111110001011000011000111000001";
        ram[59] = "0b00111101010101011101010111011110";
        ram[60] = "0b00111101000101110001101001001000";
        ram[61] = "0b00111101010001011001101101000011";
        ram[62] = "0b10111100000110000111101100111011";
        ram[63] = "0b10111100001000111110011010111011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei9j0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei9j0_ram* meminst;


SC_CTOR(conv_2_conv_2_wei9j0) {
meminst = new conv_2_conv_2_wei9j0_ram("conv_2_conv_2_wei9j0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei9j0() {
    delete meminst;
}


};//endmodule
#endif
