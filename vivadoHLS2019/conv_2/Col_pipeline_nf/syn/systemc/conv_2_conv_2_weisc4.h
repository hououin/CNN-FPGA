// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weisc4_H__
#define __conv_2_conv_2_weisc4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weisc4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weisc4_ram) {
        ram[0] = "0b10111011011001010001011000000100";
        ram[1] = "0b00111100100001111100010010001000";
        ram[2] = "0b10111100101110101010011111100010";
        ram[3] = "0b00111101111011001000111001010100";
        ram[4] = "0b00111101111110010110001001010001";
        ram[5] = "0b00111101111011110101011100011010";
        ram[6] = "0b10111110010001111000101011010010";
        ram[7] = "0b00111110111000001100100001010111";
        ram[8] = "0b10111101001101001001011100001000";
        ram[9] = "0b00111110000001010011010100001101";
        ram[10] = "0b10111101111000010011001101001100";
        ram[11] = "0b00111101000000000110011111001010";
        ram[12] = "0b10111110011000111011001010101010";
        ram[13] = "0b10111110000101001100100010100000";
        ram[14] = "0b10111101000110101100100111001011";
        ram[15] = "0b00111110001110000001100001001011";
        ram[16] = "0b10111101100000110001011000100110";
        ram[17] = "0b10111101101101010001110110100011";
        ram[18] = "0b00111100011010011100011110011111";
        ram[19] = "0b00111110001000110111101110000001";
        ram[20] = "0b10111100101001110001010010111001";
        ram[21] = "0b10111101110111000110100011001110";
        ram[22] = "0b10111110010000101111000000000000";
        ram[23] = "0b00111110010110100010001001110110";
        ram[24] = "0b10111110100000000101010011101000";
        ram[25] = "0b00111110010100110100010111011001";
        ram[26] = "0b00111110011011011001101000110100";
        ram[27] = "0b10111110011101011101001011001011";
        ram[28] = "0b00111011000101101100000001010101";
        ram[29] = "0b10111110000110110101011010100101";
        ram[30] = "0b10111110100001000000110100010111";
        ram[31] = "0b00111101111101100011010001110011";
        ram[32] = "0b10111110010011100111001100110000";
        ram[33] = "0b00111100001001101100101110101000";
        ram[34] = "0b00111100001111110100111100001011";
        ram[35] = "0b10111101100101110101001000100101";
        ram[36] = "0b00111110000101001111000100010001";
        ram[37] = "0b10111110001100101010111001010101";
        ram[38] = "0b10111110101100011010001111001110";
        ram[39] = "0b00111101001100000011011100111000";
        ram[40] = "0b10111110010111111010111001010100";
        ram[41] = "0b10111110001000001110000101111100";
        ram[42] = "0b00111110010001010110101001110010";
        ram[43] = "0b00111110100000001010100100000111";
        ram[44] = "0b00111110000010111000111100110011";
        ram[45] = "0b10111110010001011110001010001010";
        ram[46] = "0b10111101101110001010100000101000";
        ram[47] = "0b10111101110100010001001101111111";
        ram[48] = "0b00111101010110111000001100101011";
        ram[49] = "0b10111110000010101110011010001111";
        ram[50] = "0b10111110000010000111000111011000";
        ram[51] = "0b10111110000101010100100000100111";
        ram[52] = "0b10111110000110010101011001011100";
        ram[53] = "0b10111011100001010100110110000001";
        ram[54] = "0b10111101111011010111111110111001";
        ram[55] = "0b10111110010011110000111100010110";
        ram[56] = "0b00111101000100010010011001010000";
        ram[57] = "0b00111110000111101111101100101000";
        ram[58] = "0b10111101101000100011100010010111";
        ram[59] = "0b10111110010110010111110111000001";
        ram[60] = "0b10111110000010101001000001100010";
        ram[61] = "0b00111101100111010111100010110000";
        ram[62] = "0b00111110010011001010000010001000";
        ram[63] = "0b00111101110011011101010000000001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weisc4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weisc4_ram* meminst;


SC_CTOR(conv_2_conv_2_weisc4) {
meminst = new conv_2_conv_2_weisc4_ram("conv_2_conv_2_weisc4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weisc4() {
    delete meminst;
}


};//endmodule
#endif
