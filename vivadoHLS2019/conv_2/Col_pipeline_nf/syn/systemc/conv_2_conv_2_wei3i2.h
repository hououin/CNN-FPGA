// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei3i2_H__
#define __conv_2_conv_2_wei3i2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei3i2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei3i2_ram) {
        ram[0] = "0b10111101101111110101000000101101";
        ram[1] = "0b00111101110001111100000100100001";
        ram[2] = "0b00111110001011011010111110010010";
        ram[3] = "0b00111100110101100111000100110011";
        ram[4] = "0b00111101101000011000010100101000";
        ram[5] = "0b10111100011110111010010001111110";
        ram[6] = "0b00111100100110101001000001010010";
        ram[7] = "0b00111101110000100000101001110110";
        ram[8] = "0b10111110000001110100100011000100";
        ram[9] = "0b00111100100110100110100100011110";
        ram[10] = "0b00111100000010110111100010010101";
        ram[11] = "0b00111101100100100101110111010011";
        ram[12] = "0b00111101110101101010000110010101";
        ram[13] = "0b00111101100011110100010111001110";
        ram[14] = "0b10111101101010110100010011101010";
        ram[15] = "0b10111110000011000001100111100010";
        ram[16] = "0b00111101110011011101101011001101";
        ram[17] = "0b10111101001001110000001101001001";
        ram[18] = "0b00111011000110000101111000111110";
        ram[19] = "0b10111110011100111101010011110101";
        ram[20] = "0b00111100110011111101110011010100";
        ram[21] = "0b10111101110101000010011011011011";
        ram[22] = "0b10111101110110100100010000111000";
        ram[23] = "0b00111101011000011000000100000011";
        ram[24] = "0b10111110000110100110110001011110";
        ram[25] = "0b10111101010001101100100100100110";
        ram[26] = "0b10111110001000101000100010100000";
        ram[27] = "0b10111101101110011110111110100101";
        ram[28] = "0b00111101111001111000111101110001";
        ram[29] = "0b10111101001000011101111110011101";
        ram[30] = "0b00111110011000001100010110011010";
        ram[31] = "0b10111110001010101001001000000001";
        ram[32] = "0b10111101101100110100110001100111";
        ram[33] = "0b10111101011010100111000101101101";
        ram[34] = "0b10111101100100100110000010111011";
        ram[35] = "0b10111101100000111101011010100110";
        ram[36] = "0b10111101111110101001011111000101";
        ram[37] = "0b00111101100110010110011101101100";
        ram[38] = "0b00111101101100100101100000111101";
        ram[39] = "0b00111100011010101101111100101100";
        ram[40] = "0b10111110100110010011000010110000";
        ram[41] = "0b10111110000010101001000100010101";
        ram[42] = "0b10111011101100100101010101100100";
        ram[43] = "0b10111101100001101011101011111101";
        ram[44] = "0b00111101001000001011100101000000";
        ram[45] = "0b00111100000001101101000000000101";
        ram[46] = "0b10111101110100101011011111101111";
        ram[47] = "0b10111101110100100000010100001100";
        ram[48] = "0b00111100100000100010101000001001";
        ram[49] = "0b10111101000111101010001011000100";
        ram[50] = "0b10111101001100000101111110110011";
        ram[51] = "0b00111101110001001000110001111110";
        ram[52] = "0b10111101101101001101010010001111";
        ram[53] = "0b10111110011000111001011011101011";
        ram[54] = "0b10111110100100111011000001010111";
        ram[55] = "0b10111101001001010111010101111100";
        ram[56] = "0b10111101010100000000011101111100";
        ram[57] = "0b00111100101011010100001100001010";
        ram[58] = "0b10111110000000110010100000001101";
        ram[59] = "0b10111100000111111010101101010011";
        ram[60] = "0b10111110010010110010111101010101";
        ram[61] = "0b10111101111110101110100001101010";
        ram[62] = "0b00111110010000010000111011111001";
        ram[63] = "0b10111101000110100000100011011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei3i2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei3i2_ram* meminst;


SC_CTOR(conv_2_conv_2_wei3i2) {
meminst = new conv_2_conv_2_wei3i2_ram("conv_2_conv_2_wei3i2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei3i2() {
    delete meminst;
}


};//endmodule
#endif
