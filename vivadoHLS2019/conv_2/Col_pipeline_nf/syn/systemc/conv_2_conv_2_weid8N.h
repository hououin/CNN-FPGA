// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid8N_H__
#define __conv_2_conv_2_weid8N_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid8N_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid8N_ram) {
        ram[0] = "0b00111101100011001010110111010110";
        ram[1] = "0b00111110000010000001011010011110";
        ram[2] = "0b00111100001111001001100001101101";
        ram[3] = "0b00111110000001010100110000001110";
        ram[4] = "0b10111110010100100000101000010110";
        ram[5] = "0b00111110010000100110101100100001";
        ram[6] = "0b10111110000011101011010001000110";
        ram[7] = "0b10111101100011110110011101001011";
        ram[8] = "0b00111101011110011101001101000111";
        ram[9] = "0b10111101000110111000001000010001";
        ram[10] = "0b00111101111101111101011110011010";
        ram[11] = "0b10111101101001100000100111101110";
        ram[12] = "0b10111110000101100000100011101010";
        ram[13] = "0b10111101111000011100011110011010";
        ram[14] = "0b10111100110110101110011101000001";
        ram[15] = "0b00111101001001111111011101011110";
        ram[16] = "0b00111110001001111010100011100100";
        ram[17] = "0b00111101110101001110011001110010";
        ram[18] = "0b00111101111010000110100001110101";
        ram[19] = "0b00111000011100101110100010100000";
        ram[20] = "0b10111110100011111110110110001000";
        ram[21] = "0b10111110101111110001001011100101";
        ram[22] = "0b00111100100000000100111000010110";
        ram[23] = "0b10111101111001111001110110111101";
        ram[24] = "0b10111110000101101001001000010000";
        ram[25] = "0b10111011110101011111110101101100";
        ram[26] = "0b00111110010100111011101110001001";
        ram[27] = "0b00111101101010100111101100011101";
        ram[28] = "0b00111100101101000011000010111101";
        ram[29] = "0b00111101110100011110010001100111";
        ram[30] = "0b00111101100011111000110011010001";
        ram[31] = "0b10111101000000100011100100101110";
        ram[32] = "0b00111101001110111101110001100101";
        ram[33] = "0b00111100000110100111001111100111";
        ram[34] = "0b00111101011011010111100110011110";
        ram[35] = "0b10111110100010100110000100110000";
        ram[36] = "0b10111110100111001110111001001100";
        ram[37] = "0b10111110110001011110101001000111";
        ram[38] = "0b10111110010111000001110101000111";
        ram[39] = "0b00111110000000100000100101111111";
        ram[40] = "0b10111110100111001011101101111110";
        ram[41] = "0b00111101010010101011101101100010";
        ram[42] = "0b10111100101011010101001010011011";
        ram[43] = "0b10111101100110000001000000010011";
        ram[44] = "0b10111110011011001110101000111111";
        ram[45] = "0b00111110000101100001111000100111";
        ram[46] = "0b00111011100000111111011111010010";
        ram[47] = "0b10111101101110110000110001011011";
        ram[48] = "0b10111101000110101101111100001001";
        ram[49] = "0b00111101111001101100101001000001";
        ram[50] = "0b10111110010010111001010001101010";
        ram[51] = "0b10111100101100100110100010000100";
        ram[52] = "0b10111100110101011001001100101010";
        ram[53] = "0b10111101000101000001100110001100";
        ram[54] = "0b10111110010010101110111101110101";
        ram[55] = "0b10111100111100000011000111110110";
        ram[56] = "0b00111110010101100101000011100101";
        ram[57] = "0b00111101010111000000011010010100";
        ram[58] = "0b10111110101011000111001011101100";
        ram[59] = "0b00111101110000000010010101101000";
        ram[60] = "0b10111101100111100110101111110001";
        ram[61] = "0b10111110010011010101100110100100";
        ram[62] = "0b00111101100100011111001111011010";
        ram[63] = "0b00111101010101001000000100100010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid8N) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid8N_ram* meminst;


SC_CTOR(conv_2_conv_2_weid8N) {
meminst = new conv_2_conv_2_weid8N_ram("conv_2_conv_2_weid8N_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid8N() {
    delete meminst;
}


};//endmodule
#endif
