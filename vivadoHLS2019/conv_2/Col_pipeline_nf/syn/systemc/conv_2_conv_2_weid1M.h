// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid1M_H__
#define __conv_2_conv_2_weid1M_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid1M_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid1M_ram) {
        ram[0] = "0b10111100110001101100000111010010";
        ram[1] = "0b00111110000011001111100010011000";
        ram[2] = "0b10111100100100111011000010010011";
        ram[3] = "0b10111101101010111110001000100101";
        ram[4] = "0b10111101100101100001011010111100";
        ram[5] = "0b10111110000011110101111100111100";
        ram[6] = "0b10111101111001010011100010101100";
        ram[7] = "0b10111101001100110110101100000001";
        ram[8] = "0b00111101100010011111010110101001";
        ram[9] = "0b10111101101110010100101111110100";
        ram[10] = "0b10111101101010000100110101101100";
        ram[11] = "0b10111101101110111111000101111000";
        ram[12] = "0b10111101010110111101011100011101";
        ram[13] = "0b00111101111010100111100111101101";
        ram[14] = "0b00111101001011010100011011110101";
        ram[15] = "0b10111101110111000111001100010101";
        ram[16] = "0b10111101010010100010110001000110";
        ram[17] = "0b10111100111010010111001100010111";
        ram[18] = "0b10111100010111101000101111100101";
        ram[19] = "0b10111101011010010111101110010000";
        ram[20] = "0b10111110100001111111111000100110";
        ram[21] = "0b10111101010101101111000101111000";
        ram[22] = "0b00111110000111001111010011010011";
        ram[23] = "0b10111110001011110000001011011001";
        ram[24] = "0b00111101001101100101110111000100";
        ram[25] = "0b00111101100000001011111011000101";
        ram[26] = "0b10111100110100101101001010000011";
        ram[27] = "0b10111101101111010000101011110111";
        ram[28] = "0b10111011110110000001101101000111";
        ram[29] = "0b10111101001001100100000010001001";
        ram[30] = "0b00111101100111010000001001110001";
        ram[31] = "0b00111100010101000010011111110101";
        ram[32] = "0b10111110101011011001011100000011";
        ram[33] = "0b10111100000111111001110110101110";
        ram[34] = "0b10111101110001110101100101001100";
        ram[35] = "0b10111101001110100110011100101011";
        ram[36] = "0b00111101101011111110011010011111";
        ram[37] = "0b10111101101101110111011100011010";
        ram[38] = "0b10111100101000000000110001001110";
        ram[39] = "0b10111110000011101010010101000011";
        ram[40] = "0b00111101010110001100110010001010";
        ram[41] = "0b10111100011101110100100100100011";
        ram[42] = "0b10111100111101000010100110011001";
        ram[43] = "0b00111100100111001100010110001001";
        ram[44] = "0b10111101011011110100101010111111";
        ram[45] = "0b10111110010011100000000111110101";
        ram[46] = "0b10111101101101100101100001111100";
        ram[47] = "0b10111101100011000010100101101000";
        ram[48] = "0b00111110000000111100110000000010";
        ram[49] = "0b10111101100001110010100111100010";
        ram[50] = "0b00111101101011110011011000001110";
        ram[51] = "0b10111110000110010011100000101010";
        ram[52] = "0b00111100100010011100011011010011";
        ram[53] = "0b00111100011010010011111111111100";
        ram[54] = "0b10111101011001100100001011110111";
        ram[55] = "0b00111101001100001001111101111101";
        ram[56] = "0b00111100110010001110000111101111";
        ram[57] = "0b00111101100110111111100111001001";
        ram[58] = "0b00111100110101111100000010101110";
        ram[59] = "0b00111100011001011011101011111010";
        ram[60] = "0b00111101110101100101011100110000";
        ram[61] = "0b00111101001001101100000001011100";
        ram[62] = "0b10111101100000001011000111011001";
        ram[63] = "0b10111100011011000010010101100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid1M) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid1M_ram* meminst;


SC_CTOR(conv_2_conv_2_weid1M) {
meminst = new conv_2_conv_2_weid1M_ram("conv_2_conv_2_weid1M_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid1M() {
    delete meminst;
}


};//endmodule
#endif
