// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic1C_H__
#define __conv_2_conv_2_weic1C_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic1C_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic1C_ram) {
        ram[0] = "0b10111101111101011001010111011011";
        ram[1] = "0b00111101111101000000000011100011";
        ram[2] = "0b00111100111001001001000001111010";
        ram[3] = "0b00111101111010000010101001011000";
        ram[4] = "0b00111101111101011000101110101010";
        ram[5] = "0b10111110100000011101011111001001";
        ram[6] = "0b00111110100000111010111000011001";
        ram[7] = "0b10111110000001011000101110101001";
        ram[8] = "0b10111100100111110000011100101010";
        ram[9] = "0b00111101000000011010011111001101";
        ram[10] = "0b00111101001001100000010111101001";
        ram[11] = "0b10111110101111011110111011010010";
        ram[12] = "0b00111110000100001010111100000100";
        ram[13] = "0b10111100010100110101001111000110";
        ram[14] = "0b00111101110000001010100111000110";
        ram[15] = "0b10111100100010000111001101000000";
        ram[16] = "0b00111100100101001110110100011010";
        ram[17] = "0b10111101100101100111001011011101";
        ram[18] = "0b10111100010001011000110111100000";
        ram[19] = "0b10111101101010110011010010100001";
        ram[20] = "0b10111110101001110001111010110001";
        ram[21] = "0b00111110000000010110010000100101";
        ram[22] = "0b10111101110110111001111101111110";
        ram[23] = "0b00111101001000001111111101111000";
        ram[24] = "0b10111101001001100100010110111001";
        ram[25] = "0b00111110001000000000100111000100";
        ram[26] = "0b10111101110111010010011010100000";
        ram[27] = "0b10111100110010001011110000101100";
        ram[28] = "0b00111110011110010101101101110001";
        ram[29] = "0b10111101111000010100001001101111";
        ram[30] = "0b10111101101010010100010000111001";
        ram[31] = "0b00111110100001101101001111010101";
        ram[32] = "0b00111011101000101000011100000101";
        ram[33] = "0b00111101100011001110111001010100";
        ram[34] = "0b10111110010111110010000100101100";
        ram[35] = "0b10111110000010001100101100011110";
        ram[36] = "0b00111110100001101011011011010101";
        ram[37] = "0b10111110100111100111100110000111";
        ram[38] = "0b00111110101000110100100110110010";
        ram[39] = "0b00111101111011101111011000000101";
        ram[40] = "0b10111110101000101000001100101110";
        ram[41] = "0b00111101110001000011100011010010";
        ram[42] = "0b00111101110001100110100001011101";
        ram[43] = "0b00111101100110100010111001000010";
        ram[44] = "0b10111100101000010010111110011101";
        ram[45] = "0b10111110011111110110000101101101";
        ram[46] = "0b00111110001111001010011011001010";
        ram[47] = "0b00111110100000110100101000011010";
        ram[48] = "0b00111110001110011000101011001110";
        ram[49] = "0b00111110010111100100100000000011";
        ram[50] = "0b10111101010000001100010100000100";
        ram[51] = "0b00111110001100110111010001010100";
        ram[52] = "0b00111101011101001111011000001110";
        ram[53] = "0b10111110100110111011011100110000";
        ram[54] = "0b10111101101111101000001101111111";
        ram[55] = "0b00111101101110101000101001001010";
        ram[56] = "0b00111101000100110010000010100010";
        ram[57] = "0b10111100100011011001111110011110";
        ram[58] = "0b10111101101110101100000111110010";
        ram[59] = "0b10111110101001110010101000000100";
        ram[60] = "0b00111011010010011100001001110000";
        ram[61] = "0b10111110010000001111000011010001";
        ram[62] = "0b10111101000010111001010010101110";
        ram[63] = "0b10111100000110101100110000110010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic1C) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic1C_ram* meminst;


SC_CTOR(conv_2_conv_2_weic1C) {
meminst = new conv_2_conv_2_weic1C_ram("conv_2_conv_2_weic1C_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic1C() {
    delete meminst;
}


};//endmodule
#endif
