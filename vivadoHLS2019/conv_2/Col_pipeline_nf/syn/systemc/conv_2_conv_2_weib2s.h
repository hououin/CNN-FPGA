// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib2s_H__
#define __conv_2_conv_2_weib2s_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib2s_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib2s_ram) {
        ram[0] = "0b00111100000011100110111010111100";
        ram[1] = "0b10111100011011101110011101010001";
        ram[2] = "0b00111101110000011000100111010011";
        ram[3] = "0b00111100111010100000110110010100";
        ram[4] = "0b10111101101010100110100101111010";
        ram[5] = "0b10111101101110111000000111000110";
        ram[6] = "0b10111110011000110000110001010111";
        ram[7] = "0b00111101110100010001001100111011";
        ram[8] = "0b10111101000110001010000111110000";
        ram[9] = "0b00111110000001101001101110110010";
        ram[10] = "0b10111101000000010100101010111110";
        ram[11] = "0b10111100000111000111010000110001";
        ram[12] = "0b10111110100001010101111110001011";
        ram[13] = "0b10111101101110100010000001000101";
        ram[14] = "0b00111011111001011101011000110011";
        ram[15] = "0b00111110001000011000000011110011";
        ram[16] = "0b00111100110101110101101101100000";
        ram[17] = "0b10111100101010111110000101100001";
        ram[18] = "0b10111100000000111101010111101001";
        ram[19] = "0b00111101011111010111100010010010";
        ram[20] = "0b10111110110000011100111100000001";
        ram[21] = "0b10111110100010100010100011001110";
        ram[22] = "0b10111101011000100010101111001011";
        ram[23] = "0b10111101100101001101001100110110";
        ram[24] = "0b10111100110011100100010001011001";
        ram[25] = "0b00111100111111000010010000011001";
        ram[26] = "0b00111101001001100001001010010111";
        ram[27] = "0b10111110010110111010000100101111";
        ram[28] = "0b00111101010001111010111000100001";
        ram[29] = "0b00111101100001111101111001111000";
        ram[30] = "0b10111110011000010001011001100011";
        ram[31] = "0b00111100110001000110111110101011";
        ram[32] = "0b10111110100001011111001011000110";
        ram[33] = "0b00111100111001000000101100101110";
        ram[34] = "0b10111110010011000100000110010010";
        ram[35] = "0b10111101100001010001110000100011";
        ram[36] = "0b10111101100100011111011001101001";
        ram[37] = "0b00111010100000100011100000101010";
        ram[38] = "0b10111110101110101000001011110010";
        ram[39] = "0b00111100101000010000101000010011";
        ram[40] = "0b10111110000000100010001111101011";
        ram[41] = "0b00111101101010100010110110010000";
        ram[42] = "0b00111010101000110010111000001110";
        ram[43] = "0b10111101000110110000101111111110";
        ram[44] = "0b10111101100100000001011000100010";
        ram[45] = "0b10111110100001001101111010011101";
        ram[46] = "0b00111101001010101010011101111110";
        ram[47] = "0b10111011110001111100111000000110";
        ram[48] = "0b00111101100101111001100010111100";
        ram[49] = "0b10111100110010101011111110111110";
        ram[50] = "0b10111110101000101110111011001110";
        ram[51] = "0b10111101000010101000010111000100";
        ram[52] = "0b10111101110100010100100001011001";
        ram[53] = "0b10111101001000000100010100111010";
        ram[54] = "0b00111110000001111111011100110100";
        ram[55] = "0b10111100010101101110000111101010";
        ram[56] = "0b00111100001001010000010001011010";
        ram[57] = "0b10111100001100100011000111010011";
        ram[58] = "0b00111100111101010000011000110001";
        ram[59] = "0b00111101100000001000010101011001";
        ram[60] = "0b10111110101011111000000010110010";
        ram[61] = "0b00111101111110110110100100110001";
        ram[62] = "0b10111101101000110001011010101010";
        ram[63] = "0b10111101110000100000011111100001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib2s) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib2s_ram* meminst;


SC_CTOR(conv_2_conv_2_weib2s) {
meminst = new conv_2_conv_2_weib2s_ram("conv_2_conv_2_weib2s_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib2s() {
    delete meminst;
}


};//endmodule
#endif
