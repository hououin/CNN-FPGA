// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib7t_H__
#define __conv_2_conv_2_weib7t_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib7t_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib7t_ram) {
        ram[0] = "0b10111110001001010001000100100100";
        ram[1] = "0b10111110001000010110100001001111";
        ram[2] = "0b10111110101101110110100101110100";
        ram[3] = "0b00111100100111111011011111111000";
        ram[4] = "0b10111101100111011000101001001001";
        ram[5] = "0b00111101010101110101001010100100";
        ram[6] = "0b10111101011000111101001011000000";
        ram[7] = "0b10111101100100011101111001110011";
        ram[8] = "0b10111110111000111111110001111011";
        ram[9] = "0b00111110001111010001100011010001";
        ram[10] = "0b00111011101110001110010010100011";
        ram[11] = "0b00111100111011011001011011000101";
        ram[12] = "0b10111101001110100111101001001010";
        ram[13] = "0b10111110100010101110001111001111";
        ram[14] = "0b10111101101110011100101101000001";
        ram[15] = "0b10111101111100000110110000011101";
        ram[16] = "0b10111110011011110101010000100111";
        ram[17] = "0b00111101011111111011111000000011";
        ram[18] = "0b10111101101010011010100110111110";
        ram[19] = "0b00111110010110101010000100011010";
        ram[20] = "0b10111110010010111110111110111100";
        ram[21] = "0b10111100001101110001110100101000";
        ram[22] = "0b10111110110010101110001101110011";
        ram[23] = "0b00111110000101100000101010001111";
        ram[24] = "0b10111101101101100101011100100100";
        ram[25] = "0b10111101001011110000010000110101";
        ram[26] = "0b10111101001010111000010001101011";
        ram[27] = "0b10111110010010111100000111110100";
        ram[28] = "0b10111110010011000001111001101000";
        ram[29] = "0b10111110001110011001100110101100";
        ram[30] = "0b10111110100000110011000101001001";
        ram[31] = "0b00111110100111011010001010011111";
        ram[32] = "0b10111101001000011100101110111110";
        ram[33] = "0b10111110010101101110001000010110";
        ram[34] = "0b10111011111110011101011010100010";
        ram[35] = "0b00111100000101001101100011010000";
        ram[36] = "0b10111110000000010100101110001011";
        ram[37] = "0b00111100010001001010101110100001";
        ram[38] = "0b10111110011011010010101101000110";
        ram[39] = "0b10111110010111101011110011110111";
        ram[40] = "0b10111100101000110010101011011000";
        ram[41] = "0b00111101110101100000000100110011";
        ram[42] = "0b10111101010010110011100111100100";
        ram[43] = "0b00111101100010011011110110010100";
        ram[44] = "0b00111101010100000101100100011000";
        ram[45] = "0b00111110000010110010000110001000";
        ram[46] = "0b00111101101110001111010000110101";
        ram[47] = "0b10111110000000111111111110000111";
        ram[48] = "0b00111101100010110100110000111000";
        ram[49] = "0b10111110011000000100011000001001";
        ram[50] = "0b10111110011000101111000001111110";
        ram[51] = "0b00111101100000001011100000001101";
        ram[52] = "0b10111101101011101100110001000101";
        ram[53] = "0b00111110001001101000101101000110";
        ram[54] = "0b10111110001010100010101001110101";
        ram[55] = "0b10111101010001011001011010111011";
        ram[56] = "0b10111110000011101100111010111000";
        ram[57] = "0b00111101001111110011110001100100";
        ram[58] = "0b10111101101110110010011111011011";
        ram[59] = "0b10111101001001000111001110100001";
        ram[60] = "0b10111110110010110101111001011011";
        ram[61] = "0b10111111000011111000101101011001";
        ram[62] = "0b10111110011000100110100110100010";
        ram[63] = "0b00111101111011110111110000000110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib7t) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib7t_ram* meminst;


SC_CTOR(conv_2_conv_2_weib7t) {
meminst = new conv_2_conv_2_weib7t_ram("conv_2_conv_2_weib7t_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib7t() {
    delete meminst;
}


};//endmodule
#endif
