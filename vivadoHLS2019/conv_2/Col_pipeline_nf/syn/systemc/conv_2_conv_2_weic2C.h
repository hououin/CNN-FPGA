// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic2C_H__
#define __conv_2_conv_2_weic2C_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic2C_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic2C_ram) {
        ram[0] = "0b00111101110001000011000111100000";
        ram[1] = "0b10111110110010111100111111011000";
        ram[2] = "0b10111110010110010011100100001100";
        ram[3] = "0b00111110001001110001011111010111";
        ram[4] = "0b10111110010111100110110010101000";
        ram[5] = "0b10111101101001011000101000001011";
        ram[6] = "0b00111101000110100010001110010010";
        ram[7] = "0b00111101010010100001000100111110";
        ram[8] = "0b00111110010010000011100010111100";
        ram[9] = "0b00111101011001001110111001101110";
        ram[10] = "0b10111110000101000010110111010000";
        ram[11] = "0b00111010001010011111111100001110";
        ram[12] = "0b10111100110011110111001111011010";
        ram[13] = "0b10111110011101100001011000111000";
        ram[14] = "0b00111110001110011000001101110100";
        ram[15] = "0b00111110100001110001010111111100";
        ram[16] = "0b10111110100101000011011011010000";
        ram[17] = "0b00111101100110111001010110111111";
        ram[18] = "0b10111110001010000101101111010010";
        ram[19] = "0b00111101100011000010000100000001";
        ram[20] = "0b00111110101110110100101110011110";
        ram[21] = "0b10111101101101110111100111011100";
        ram[22] = "0b00111101110001111110101001100100";
        ram[23] = "0b10111110110101011111010101011001";
        ram[24] = "0b00111101001001011000000000000001";
        ram[25] = "0b00111100111111011110001110101010";
        ram[26] = "0b00111101101100110110111110111111";
        ram[27] = "0b00111110100101101101101010100000";
        ram[28] = "0b00111110001110110001001001100110";
        ram[29] = "0b10111011111101100100101000011111";
        ram[30] = "0b10111110100111111011111101000100";
        ram[31] = "0b10111101100100010011000011100101";
        ram[32] = "0b00111101110001100000011010011001";
        ram[33] = "0b10111100010100110000010110010110";
        ram[34] = "0b00111110011001010110001010110101";
        ram[35] = "0b10111101111101111101000100101100";
        ram[36] = "0b10111100001011101001010110111000";
        ram[37] = "0b00111110011001001110010110010100";
        ram[38] = "0b10111101110000101001010011010110";
        ram[39] = "0b10111110001100111000010011110010";
        ram[40] = "0b00111110011111111000100000011010";
        ram[41] = "0b00111101100011101010110101110110";
        ram[42] = "0b10111100000011000111111111010111";
        ram[43] = "0b00111101010001100011100000110100";
        ram[44] = "0b10111110010100101000110111000100";
        ram[45] = "0b10111110000000100101101001010001";
        ram[46] = "0b10111110011001100000010101111011";
        ram[47] = "0b00111100101001000000111100101111";
        ram[48] = "0b10111101001111100111110001100011";
        ram[49] = "0b00111101011110110101110000010010";
        ram[50] = "0b00111101100111111100001001100000";
        ram[51] = "0b00111100000100000101000011001110";
        ram[52] = "0b00111110000111101100011011111010";
        ram[53] = "0b10111101011101110111011101000110";
        ram[54] = "0b00111100100101101001010010010010";
        ram[55] = "0b10111110110100001101010101111110";
        ram[56] = "0b00111101101110101110101011110100";
        ram[57] = "0b10111110101001001001000110001110";
        ram[58] = "0b10111100011110110111111001001101";
        ram[59] = "0b10111110100111110100010000011011";
        ram[60] = "0b10111101111110110010100111111100";
        ram[61] = "0b00111110001010110110011110100010";
        ram[62] = "0b00111110000101010011001101000100";
        ram[63] = "0b10111101010100100011111011001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic2C) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic2C_ram* meminst;


SC_CTOR(conv_2_conv_2_weic2C) {
meminst = new conv_2_conv_2_weic2C_ram("conv_2_conv_2_weic2C_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic2C() {
    delete meminst;
}


};//endmodule
#endif
