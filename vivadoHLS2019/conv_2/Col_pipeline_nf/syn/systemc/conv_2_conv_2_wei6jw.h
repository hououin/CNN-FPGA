// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei6jw_H__
#define __conv_2_conv_2_wei6jw_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei6jw_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei6jw_ram) {
        ram[0] = "0b00111101001010111001001111000001";
        ram[1] = "0b00111101000011110111011010110001";
        ram[2] = "0b00111011011000100111101111100011";
        ram[3] = "0b10111110001010101110110111111100";
        ram[4] = "0b00111101101100001100101110010011";
        ram[5] = "0b10111101101010110001110100001110";
        ram[6] = "0b00111110000000000011100101111000";
        ram[7] = "0b00111100001000101011010000101000";
        ram[8] = "0b10111101100111111100110101100101";
        ram[9] = "0b10111011110101001011000000110111";
        ram[10] = "0b00111101001100101010001001010110";
        ram[11] = "0b00111101110000100111110000110010";
        ram[12] = "0b00111101111000100001110111101010";
        ram[13] = "0b10111100111110000111101110000011";
        ram[14] = "0b00111101100101000000100101111100";
        ram[15] = "0b10111100000101000100110101100001";
        ram[16] = "0b00111101001101110101100000111111";
        ram[17] = "0b10111101101010100100110001110001";
        ram[18] = "0b10111101000010001101001000101100";
        ram[19] = "0b10111100100110001011000101001000";
        ram[20] = "0b10111001011101001110101101110000";
        ram[21] = "0b10111101111010000010111110011011";
        ram[22] = "0b10111110000001000001001000010101";
        ram[23] = "0b10111100100101010001110101011000";
        ram[24] = "0b00111010111000001000111111111110";
        ram[25] = "0b00111101100110111111101110110100";
        ram[26] = "0b00111101001010111000001101111101";
        ram[27] = "0b10111110011110100011110100100101";
        ram[28] = "0b10111011010010001011110110001011";
        ram[29] = "0b00111101110001110001011001110110";
        ram[30] = "0b00111011100000101100011101110000";
        ram[31] = "0b10111101001101101011001001011100";
        ram[32] = "0b00111100111010011000011011111110";
        ram[33] = "0b00111101000101010100100101101001";
        ram[34] = "0b00111101000101000010011010110111";
        ram[35] = "0b10111110000101110100010100111101";
        ram[36] = "0b10111101100101001111111001101100";
        ram[37] = "0b10111101101110000111101011001101";
        ram[38] = "0b00111100110011100111100100010111";
        ram[39] = "0b00111101101010000000001000111001";
        ram[40] = "0b00111011001100100101111101110111";
        ram[41] = "0b00111101111001110011110101010101";
        ram[42] = "0b00111101111101001001000000011110";
        ram[43] = "0b10111101111101000000110101010101";
        ram[44] = "0b00111101110001001100000010101100";
        ram[45] = "0b10111100100101011101110010001111";
        ram[46] = "0b00111100101011001100100001101000";
        ram[47] = "0b00111100110000011110101010011010";
        ram[48] = "0b00111110000011011100111101010000";
        ram[49] = "0b10111100111100011000001000011100";
        ram[50] = "0b00111101101110110000110101011101";
        ram[51] = "0b00111101111011011000010110000110";
        ram[52] = "0b10111110000000111110101001111010";
        ram[53] = "0b10111101111011100000001111101010";
        ram[54] = "0b10111101110001110111010101101100";
        ram[55] = "0b10111110000101110001111010111101";
        ram[56] = "0b10111101100110010011010101011110";
        ram[57] = "0b00111100101111111000001011001100";
        ram[58] = "0b10111101100001000010111101000100";
        ram[59] = "0b00111110000111111000111000101001";
        ram[60] = "0b10111101100101001010110111111000";
        ram[61] = "0b10111101111101000000000111111110";
        ram[62] = "0b10111100101001101101011110000100";
        ram[63] = "0b10111101101011011101000101011111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei6jw) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei6jw_ram* meminst;


SC_CTOR(conv_2_conv_2_wei6jw) {
meminst = new conv_2_conv_2_wei6jw_ram("conv_2_conv_2_wei6jw_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei6jw() {
    delete meminst;
}


};//endmodule
#endif
