// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid9N_H__
#define __conv_2_conv_2_weid9N_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid9N_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid9N_ram) {
        ram[0] = "0b00111101101000101011000000010100";
        ram[1] = "0b10111110100000111001101110001010";
        ram[2] = "0b10111110100100101100110001111000";
        ram[3] = "0b00111100101110100000110011100110";
        ram[4] = "0b10111100000110010000100101101010";
        ram[5] = "0b00111100000101000010100010000100";
        ram[6] = "0b00111110001011110001001011100010";
        ram[7] = "0b10111101001101111011111011111000";
        ram[8] = "0b00111011010001100000111001001011";
        ram[9] = "0b10111100101001100100010111101000";
        ram[10] = "0b00111101000011111100000010011011";
        ram[11] = "0b10111100111110100100000001001100";
        ram[12] = "0b00111110001100000011010100101000";
        ram[13] = "0b10111101110001001100101011000101";
        ram[14] = "0b00111110000000100111011001000011";
        ram[15] = "0b00111101111000110011111110110111";
        ram[16] = "0b00111101000111110111110010110010";
        ram[17] = "0b10111100000110001110111110101010";
        ram[18] = "0b00111100010010000011101011110100";
        ram[19] = "0b00111101101101001010000010110001";
        ram[20] = "0b10111110010111010100001110110010";
        ram[21] = "0b10111110001111010011100011001011";
        ram[22] = "0b10111101100011111111110010111110";
        ram[23] = "0b00111101010011111000010000111001";
        ram[24] = "0b00111100110111100001010001110111";
        ram[25] = "0b00111110001100001100001111110100";
        ram[26] = "0b00111101101000101011101000011010";
        ram[27] = "0b10111100111011001110100011101101";
        ram[28] = "0b10111100100111000001101100000011";
        ram[29] = "0b10111101110111010110011000100110";
        ram[30] = "0b10111110000000110001101011110011";
        ram[31] = "0b00111101111010110111000100001011";
        ram[32] = "0b00111101101001000000100110010111";
        ram[33] = "0b00111101100101110010000001101110";
        ram[34] = "0b00111101111000101111000111000011";
        ram[35] = "0b10111101011000010011000110001011";
        ram[36] = "0b10111011101000000111000001110101";
        ram[37] = "0b10111110100011100011000110000011";
        ram[38] = "0b00111101010100000011010001010101";
        ram[39] = "0b00111011111110010010010001110110";
        ram[40] = "0b10111110001101011100111000100111";
        ram[41] = "0b00111110010000010011001001001000";
        ram[42] = "0b00111100111110111000100101111000";
        ram[43] = "0b00111110010110011001101011000000";
        ram[44] = "0b10111110010001111110011000010110";
        ram[45] = "0b00111100100011001000111000101101";
        ram[46] = "0b10111101000011011000011000010000";
        ram[47] = "0b10111100110000010000111101111000";
        ram[48] = "0b10111011110011001100011110001110";
        ram[49] = "0b10111101011011001001100010101111";
        ram[50] = "0b00111101100101100001111100100010";
        ram[51] = "0b10111110001111110001000011101111";
        ram[52] = "0b00111100011110110111101000110101";
        ram[53] = "0b10111101001110011010011000101100";
        ram[54] = "0b10111100001100000110100010000000";
        ram[55] = "0b00111110010010110001100010100101";
        ram[56] = "0b00111101100010101001111010011010";
        ram[57] = "0b10111110000111011100111100001110";
        ram[58] = "0b00111110001000001111000000100000";
        ram[59] = "0b10111101101111101001101000010101";
        ram[60] = "0b00111101100011100111011000100110";
        ram[61] = "0b00111110100001011100110101101101";
        ram[62] = "0b10111110001100000010010100001010";
        ram[63] = "0b10111101101010000110001000000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid9N) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid9N_ram* meminst;


SC_CTOR(conv_2_conv_2_weid9N) {
meminst = new conv_2_conv_2_weid9N_ram("conv_2_conv_2_weid9N_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid9N() {
    delete meminst;
}


};//endmodule
#endif
