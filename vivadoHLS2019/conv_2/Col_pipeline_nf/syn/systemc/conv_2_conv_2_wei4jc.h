// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei4jc_H__
#define __conv_2_conv_2_wei4jc_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei4jc_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei4jc_ram) {
        ram[0] = "0b10111011111110101101010000001010";
        ram[1] = "0b10111110010000010111110011100001";
        ram[2] = "0b10111101011100101101001000011101";
        ram[3] = "0b00111101110110000011011101000100";
        ram[4] = "0b00111101011011001011001011001111";
        ram[5] = "0b10111101101110001110011010110111";
        ram[6] = "0b10111101100100001110000010111000";
        ram[7] = "0b10111101101000101010110000110011";
        ram[8] = "0b00111110001101111111001001100100";
        ram[9] = "0b10111110000001001010001001000001";
        ram[10] = "0b10111100010001000010001101000010";
        ram[11] = "0b10111101110011000101110001111101";
        ram[12] = "0b00111100111011110001000110001001";
        ram[13] = "0b10111101001010000010001101000000";
        ram[14] = "0b00111011100011110001101101110000";
        ram[15] = "0b00111110001011110010110101101111";
        ram[16] = "0b10111110010010011011011000010100";
        ram[17] = "0b10111101110100110000000100101101";
        ram[18] = "0b10111110100000001000110100111110";
        ram[19] = "0b00111101001111111101110101110101";
        ram[20] = "0b00111101001110001000100000000010";
        ram[21] = "0b10111110011000101000010110001100";
        ram[22] = "0b10111110010001110100100100010101";
        ram[23] = "0b00111110000011011101101111111000";
        ram[24] = "0b00111100011100011101010100101000";
        ram[25] = "0b00111110000010000111010000011110";
        ram[26] = "0b00111100101000101101100100010001";
        ram[27] = "0b10111110000011111101010000001111";
        ram[28] = "0b00111100010000011000110110001100";
        ram[29] = "0b10111101010110011100111100101011";
        ram[30] = "0b10111011110010011101000001110100";
        ram[31] = "0b10111110100101101101101001101011";
        ram[32] = "0b10111101011010110110101010110111";
        ram[33] = "0b10111100011010111111000110000100";
        ram[34] = "0b10111101001011001010100010110010";
        ram[35] = "0b00111101100101100000010101101110";
        ram[36] = "0b10111101001111101000001011011001";
        ram[37] = "0b00111101100111101111010100000001";
        ram[38] = "0b10111101110000101111000111011100";
        ram[39] = "0b10111100100010101001110010111110";
        ram[40] = "0b10111110100011011001001110111010";
        ram[41] = "0b00111110010110001000000010100001";
        ram[42] = "0b10111110010001010001010001101101";
        ram[43] = "0b00111110010110111100011101111010";
        ram[44] = "0b00111101000001111111101011001000";
        ram[45] = "0b10111100100001100101111011010000";
        ram[46] = "0b10111101000001101010011000001011";
        ram[47] = "0b10111101000011010111001011001001";
        ram[48] = "0b10111101100110100110100011000100";
        ram[49] = "0b10111101100001100110111010000111";
        ram[50] = "0b10111100101000010001101011110100";
        ram[51] = "0b00111101101000000001010011011111";
        ram[52] = "0b10111110011001011011000111110110";
        ram[53] = "0b00111101000101001011010111111001";
        ram[54] = "0b10111101011101010010100010001000";
        ram[55] = "0b10111101101110111100110010011001";
        ram[56] = "0b10111101101000100101010111001101";
        ram[57] = "0b10111110001101010100110101011101";
        ram[58] = "0b10111110000011110110101101110111";
        ram[59] = "0b00111100001101100011010011010100";
        ram[60] = "0b00111100000011110001011000011110";
        ram[61] = "0b00111101011010110101101001001001";
        ram[62] = "0b00111101110000001111010101101010";
        ram[63] = "0b00111101101000011011000000011011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei4jc) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei4jc_ram* meminst;


SC_CTOR(conv_2_conv_2_wei4jc) {
meminst = new conv_2_conv_2_wei4jc_ram("conv_2_conv_2_wei4jc_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei4jc() {
    delete meminst;
}


};//endmodule
#endif
