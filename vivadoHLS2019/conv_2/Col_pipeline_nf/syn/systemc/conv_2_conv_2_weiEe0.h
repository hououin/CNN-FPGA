// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weiEe0_H__
#define __conv_2_conv_2_weiEe0_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weiEe0_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weiEe0_ram) {
        ram[0] = "0b10111101000001001100101011011100";
        ram[1] = "0b00111100001000110111101001111011";
        ram[2] = "0b00111110001000000000000000110100";
        ram[3] = "0b00111101110000001011001110110110";
        ram[4] = "0b10111110000010101101111101010010";
        ram[5] = "0b00111011110011011110101101010100";
        ram[6] = "0b10111101001000100101010000010010";
        ram[7] = "0b10111100100111001011000101000001";
        ram[8] = "0b00111101010110011110111001001010";
        ram[9] = "0b00111101111000011000100110001100";
        ram[10] = "0b00111101100011101111010100011000";
        ram[11] = "0b00111110001100110000101111100110";
        ram[12] = "0b00111101110000010100010010110100";
        ram[13] = "0b10111110010000100110011100000111";
        ram[14] = "0b10111100100111111011100010100000";
        ram[15] = "0b00111100111000110111111011111010";
        ram[16] = "0b00111101100110000010000101000011";
        ram[17] = "0b10111101101100100001011110001011";
        ram[18] = "0b10111101000001010100010011111000";
        ram[19] = "0b00111101100010111101000000000011";
        ram[20] = "0b00111100111000001000001011000101";
        ram[21] = "0b10111110011001100111010101011001";
        ram[22] = "0b10111110011000111101011001001000";
        ram[23] = "0b10111011110111110011001101101001";
        ram[24] = "0b10111101111010000100101000011010";
        ram[25] = "0b00111101001010001101110110110100";
        ram[26] = "0b10111100100001000000011100010001";
        ram[27] = "0b00111110001001100010010010110110";
        ram[28] = "0b00111101101110100100100010110001";
        ram[29] = "0b00111101010010010101101101001110";
        ram[30] = "0b10111101001101000101001011111001";
        ram[31] = "0b10111101001000011010101000100100";
        ram[32] = "0b10111110000000110101110000001110";
        ram[33] = "0b10111110011011101001001100000100";
        ram[34] = "0b00111101110101110011010001000010";
        ram[35] = "0b00111101101111000100011010101010";
        ram[36] = "0b00111101111001111000111010011001";
        ram[37] = "0b00111110000101111101110001001011";
        ram[38] = "0b10111100001001000100111000100011";
        ram[39] = "0b10111101010000010011001001001011";
        ram[40] = "0b00111101101110001111000100111000";
        ram[41] = "0b00111110001100001000110110101000";
        ram[42] = "0b10111110001101111001010110100100";
        ram[43] = "0b10111101101011100111110101101111";
        ram[44] = "0b10111101011011001101111010101110";
        ram[45] = "0b00111101100001111101010100010000";
        ram[46] = "0b00111101011110000101000100001110";
        ram[47] = "0b10111101100111010011010000001111";
        ram[48] = "0b00111101100110000010100101110011";
        ram[49] = "0b10111110011001000111011101101111";
        ram[50] = "0b10111101101000011000001000011011";
        ram[51] = "0b00111101100011010110000010110100";
        ram[52] = "0b10111110010010001111101010111111";
        ram[53] = "0b00111101011001111110110101100010";
        ram[54] = "0b00111101010110100011000001111000";
        ram[55] = "0b10111101111001111001101000110000";
        ram[56] = "0b10111101100101111111100001100100";
        ram[57] = "0b10111010100011110001110010011010";
        ram[58] = "0b00111101101011001111011101100000";
        ram[59] = "0b10111100011111001101101001011110";
        ram[60] = "0b10111101111110100011110101010111";
        ram[61] = "0b10111110000101111000110110001101";
        ram[62] = "0b10111101001101001111111111001011";
        ram[63] = "0b10111110000000111001100111101100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weiEe0) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weiEe0_ram* meminst;


SC_CTOR(conv_2_conv_2_weiEe0) {
meminst = new conv_2_conv_2_weiEe0_ram("conv_2_conv_2_weiEe0_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weiEe0() {
    delete meminst;
}


};//endmodule
#endif
