// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib3s_H__
#define __conv_2_conv_2_weib3s_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib3s_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib3s_ram) {
        ram[0] = "0b10111101111101001100110011000010";
        ram[1] = "0b10111101010111000011011001101111";
        ram[2] = "0b10111101011000111100011100110110";
        ram[3] = "0b10111100011010011110100011111101";
        ram[4] = "0b10111101101001110000101101001111";
        ram[5] = "0b00111101011001011000000011000111";
        ram[6] = "0b00111101110000111011100101100011";
        ram[7] = "0b00111101111000011011010011100111";
        ram[8] = "0b10111110000101111011011001100010";
        ram[9] = "0b00111101110111101000011000100111";
        ram[10] = "0b00111101111101001111010110100001";
        ram[11] = "0b00111100111010101010101100010000";
        ram[12] = "0b00111110000111000001111011000100";
        ram[13] = "0b10111110010111110001101110111000";
        ram[14] = "0b10111110001111111111101010111001";
        ram[15] = "0b10111110001001110010101011100111";
        ram[16] = "0b10111110001110000001111100101011";
        ram[17] = "0b00111101111101101001101110010111";
        ram[18] = "0b10111110100000101101111111001101";
        ram[19] = "0b00111101001111110100001000100110";
        ram[20] = "0b00111101011101010100011011001011";
        ram[21] = "0b10111110001001001101000111100011";
        ram[22] = "0b10111110100010110000011011000001";
        ram[23] = "0b00111110001100010000001110010010";
        ram[24] = "0b00111101000001100010101100111111";
        ram[25] = "0b00111101000111011111100011001011";
        ram[26] = "0b00111101100011000110011010101110";
        ram[27] = "0b10111101100011111010111110011101";
        ram[28] = "0b10111110100100100101010110011111";
        ram[29] = "0b10111101100100001100110010001111";
        ram[30] = "0b10111110000110100000100000111010";
        ram[31] = "0b00111101100111011110100100110000";
        ram[32] = "0b10111011101111000010100100000011";
        ram[33] = "0b10111110011010100100110011011011";
        ram[34] = "0b00111110000111010000000000100000";
        ram[35] = "0b00111110001101011010110101011111";
        ram[36] = "0b00111101110000101010000010100001";
        ram[37] = "0b00111110001000010001110010101111";
        ram[38] = "0b00111100100110000011110000001010";
        ram[39] = "0b10111101111000010110110100100101";
        ram[40] = "0b00111100010001011011101011100011";
        ram[41] = "0b00111101100001001100001101000001";
        ram[42] = "0b10111011001101110101110001101011";
        ram[43] = "0b00111101000001010111010100111000";
        ram[44] = "0b10111100001010111000110111000010";
        ram[45] = "0b00111101110100100010100101001000";
        ram[46] = "0b00111101110111010000111001000001";
        ram[47] = "0b10111100100100011110110000100101";
        ram[48] = "0b00111110000101111011111101101000";
        ram[49] = "0b10111110101010010111100110001101";
        ram[50] = "0b10111100110111101100101101101000";
        ram[51] = "0b00111101100000101110001000010010";
        ram[52] = "0b10111110101010111001111110100111";
        ram[53] = "0b00111101100101100111011000000000";
        ram[54] = "0b10111110001011110110101001010100";
        ram[55] = "0b10111110010010010100110001000011";
        ram[56] = "0b10111101111011110010000011010010";
        ram[57] = "0b00111100110001111111110110110001";
        ram[58] = "0b10111110000001010100001101110100";
        ram[59] = "0b10111101110010110111000101111110";
        ram[60] = "0b00111101011101110011010101000110";
        ram[61] = "0b10111110100000101101001111100100";
        ram[62] = "0b10111011111000011000111100010110";
        ram[63] = "0b00111101101010100011001001010001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib3s) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib3s_ram* meminst;


SC_CTOR(conv_2_conv_2_weib3s) {
meminst = new conv_2_conv_2_weib3s_ram("conv_2_conv_2_weib3s_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib3s() {
    delete meminst;
}


};//endmodule
#endif
