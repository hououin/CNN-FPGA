// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic6D_H__
#define __conv_2_conv_2_weic6D_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic6D_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic6D_ram) {
        ram[0] = "0b10111101111100101101010010001110";
        ram[1] = "0b10111101100011100111011101111010";
        ram[2] = "0b10111110001011001101111011001101";
        ram[3] = "0b10111101101010011001110111111101";
        ram[4] = "0b10111110010010010010010011001111";
        ram[5] = "0b00111101100011101110000101011001";
        ram[6] = "0b10111110100001000010101000011011";
        ram[7] = "0b10111100110001000001001010101110";
        ram[8] = "0b00111100100011111101111111001011";
        ram[9] = "0b10111101001000001011001100100010";
        ram[10] = "0b00111101111001000011011000000111";
        ram[11] = "0b00111110001001101100110111001100";
        ram[12] = "0b10111110101100010001111001110010";
        ram[13] = "0b00111101011101001010011110110010";
        ram[14] = "0b10111101001101000001011111001001";
        ram[15] = "0b10111100101111000110001100111000";
        ram[16] = "0b10111100001011111010011101110111";
        ram[17] = "0b00111100011001011111010010100100";
        ram[18] = "0b00111101100000100000010000011100";
        ram[19] = "0b10111101101001100011010001100111";
        ram[20] = "0b00111100110110111000001100001010";
        ram[21] = "0b10111100110100011000011010110100";
        ram[22] = "0b00111101111011001001111010110001";
        ram[23] = "0b10111101101011111111010110010111";
        ram[24] = "0b10111100110100011101001001011100";
        ram[25] = "0b10111100111100101110011100101011";
        ram[26] = "0b00111110000001001111100011011000";
        ram[27] = "0b00111110100000001110100001101110";
        ram[28] = "0b00111101010111111000011100111001";
        ram[29] = "0b10111100101110111010110010000101";
        ram[30] = "0b00111101100000110000110001010111";
        ram[31] = "0b10111110001010001001010111110001";
        ram[32] = "0b00111101111000101110101000001100";
        ram[33] = "0b00111101110010011011010000011101";
        ram[34] = "0b00111110001100000000110110011111";
        ram[35] = "0b10111110010001001110011111111000";
        ram[36] = "0b10111110100010010010000001000011";
        ram[37] = "0b10111110100001111011101111100110";
        ram[38] = "0b10111101011100101010110000100101";
        ram[39] = "0b10111101101000101110101100100111";
        ram[40] = "0b00111100110101111000010010111101";
        ram[41] = "0b10111101110001111111100000110110";
        ram[42] = "0b10111101110101001101001000111111";
        ram[43] = "0b00111100111110001100110010111000";
        ram[44] = "0b00111100011011100000110000111011";
        ram[45] = "0b00111101111000111100110000101011";
        ram[46] = "0b10111110000000100101010000000110";
        ram[47] = "0b10111110001101010001001010100000";
        ram[48] = "0b10111110011100011101110101100110";
        ram[49] = "0b10111110000101000010110100011011";
        ram[50] = "0b00111101100000010110001011111000";
        ram[51] = "0b10111110010010110101100011101110";
        ram[52] = "0b10111101111001110101101010001001";
        ram[53] = "0b00111101101100000011011010000101";
        ram[54] = "0b10111110010110110110000001000001";
        ram[55] = "0b10111101111010000111000000100000";
        ram[56] = "0b00111101110111011011001000100000";
        ram[57] = "0b10111101001000100001000110000011";
        ram[58] = "0b00111101011000100001111000011110";
        ram[59] = "0b10111100100111001100001000000011";
        ram[60] = "0b00111011100001010000101111001011";
        ram[61] = "0b00111101110111001110110110110101";
        ram[62] = "0b10111101010110100010111101100111";
        ram[63] = "0b00111100100000111000100000000100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic6D) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic6D_ram* meminst;


SC_CTOR(conv_2_conv_2_weic6D) {
meminst = new conv_2_conv_2_weic6D_ram("conv_2_conv_2_weic6D_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic6D() {
    delete meminst;
}


};//endmodule
#endif
