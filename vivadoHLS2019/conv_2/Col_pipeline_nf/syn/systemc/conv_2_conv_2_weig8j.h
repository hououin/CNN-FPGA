// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weig8j_H__
#define __conv_2_conv_2_weig8j_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weig8j_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weig8j_ram) {
        ram[0] = "0b10111101100001100010111111011110";
        ram[1] = "0b00111101001110011000110011001010";
        ram[2] = "0b00111101101101111111101000101000";
        ram[3] = "0b10111110001000100101010100110110";
        ram[4] = "0b00111110000001101001000101101010";
        ram[5] = "0b10111100000110001100111011100111";
        ram[6] = "0b10111101111110001101101110000001";
        ram[7] = "0b00111110010111101101010111001010";
        ram[8] = "0b10111110100010101000110010011001";
        ram[9] = "0b00111101111001101110101100100111";
        ram[10] = "0b00111100111101011000101110111110";
        ram[11] = "0b10111101000111111111000010010001";
        ram[12] = "0b10111101110101011100110100001100";
        ram[13] = "0b00111011100101100011011011001000";
        ram[14] = "0b10111110000011011011010101110010";
        ram[15] = "0b10111110001100111101010010110110";
        ram[16] = "0b00111100101110010110000101001101";
        ram[17] = "0b10111110000011011010100110111111";
        ram[18] = "0b00111011010101110101100001000011";
        ram[19] = "0b10111100010010111111110010111110";
        ram[20] = "0b00111101111001110000110101111111";
        ram[21] = "0b00111101100100011101110111000100";
        ram[22] = "0b10111101111001101011100100110100";
        ram[23] = "0b00111110001110100110110110101010";
        ram[24] = "0b10111101111110010100110101111100";
        ram[25] = "0b10111110100000000000101011000101";
        ram[26] = "0b00111100001011011101100110001100";
        ram[27] = "0b10111101111000011100111100110111";
        ram[28] = "0b10111100001110101100110001010100";
        ram[29] = "0b10111100111010110110100010100011";
        ram[30] = "0b10111110100011001111001000100010";
        ram[31] = "0b10111100101100111000000110011010";
        ram[32] = "0b10111110001001011101000111001011";
        ram[33] = "0b00111110100010010110011100100011";
        ram[34] = "0b00111100100000111110101011011010";
        ram[35] = "0b00111110000101111001010000000100";
        ram[36] = "0b00111110011111111001110110111011";
        ram[37] = "0b00111000110011111011100110111000";
        ram[38] = "0b10111110001100011010110000011101";
        ram[39] = "0b00111100000001000011001011111111";
        ram[40] = "0b10111101110011010100100110000110";
        ram[41] = "0b10111110111000001100011011010000";
        ram[42] = "0b00111101101110110000011111101001";
        ram[43] = "0b10111110100010011110100110000111";
        ram[44] = "0b10111110001101101000001001100110";
        ram[45] = "0b10111110000100101100000101010100";
        ram[46] = "0b10111110001100111111101001100001";
        ram[47] = "0b10111110100101101100100010001111";
        ram[48] = "0b10111101110100110001101010011110";
        ram[49] = "0b00111100101101111111010101100100";
        ram[50] = "0b10111110011000000001011100110000";
        ram[51] = "0b10111101001010011011100111000010";
        ram[52] = "0b00111100100100100101111010010101";
        ram[53] = "0b00111101010101010101000111010100";
        ram[54] = "0b00111101000101111011010001011111";
        ram[55] = "0b00111100111111100100110011001001";
        ram[56] = "0b00111101000101011110111000100010";
        ram[57] = "0b00111101100010001010011110101000";
        ram[58] = "0b00111101001011010110010010010100";
        ram[59] = "0b10111110000011010010110010001000";
        ram[60] = "0b00111100010001000110100110010111";
        ram[61] = "0b00111101010011110011101001010011";
        ram[62] = "0b10111110001011110101010001011111";
        ram[63] = "0b10111110100000010000101111101111";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weig8j) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weig8j_ram* meminst;


SC_CTOR(conv_2_conv_2_weig8j) {
meminst = new conv_2_conv_2_weig8j_ram("conv_2_conv_2_weig8j_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weig8j() {
    delete meminst;
}


};//endmodule
#endif
