// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei8jQ_H__
#define __conv_2_conv_2_wei8jQ_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei8jQ_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei8jQ_ram) {
        ram[0] = "0b00111110000010010100001100111000";
        ram[1] = "0b10111101011010101011000001100001";
        ram[2] = "0b10111110100001010101010100101010";
        ram[3] = "0b00111101111110101110001110011010";
        ram[4] = "0b10111110100011000101100100100011";
        ram[5] = "0b00111110001010011100000100010111";
        ram[6] = "0b10111010110111001011111011001111";
        ram[7] = "0b10111110010101010010000110111100";
        ram[8] = "0b00111110111100010110110110100011";
        ram[9] = "0b10111110000011111110000111000011";
        ram[10] = "0b00111110000010010110100111101101";
        ram[11] = "0b10111110001110110000100011000001";
        ram[12] = "0b00111101001111101101101011100000";
        ram[13] = "0b10111101001111100100101010011100";
        ram[14] = "0b00111110110011100001111101000100";
        ram[15] = "0b00111110110001111100010111101101";
        ram[16] = "0b10111101100011001011010111101100";
        ram[17] = "0b00111101001010110001100110101010";
        ram[18] = "0b10111101010100000010001110001110";
        ram[19] = "0b10111101111101011111011101010011";
        ram[20] = "0b10111101100000111001111100110000";
        ram[21] = "0b00111100010011110001110110110010";
        ram[22] = "0b10111100010000001110101000100101";
        ram[23] = "0b10111101100011010011000011100001";
        ram[24] = "0b00111110010111111110001011111000";
        ram[25] = "0b00111110101001111101011000101100";
        ram[26] = "0b10111100100111100001111111100000";
        ram[27] = "0b00111101111110011000110011000101";
        ram[28] = "0b00111110101010001000001110110111";
        ram[29] = "0b10111011111101010011010110111011";
        ram[30] = "0b10111101011101010111000101111111";
        ram[31] = "0b10111110010111110100111111111100";
        ram[32] = "0b00111110101100001011000001100111";
        ram[33] = "0b10111110000110101000010101000011";
        ram[34] = "0b00111101010111010010111010001001";
        ram[35] = "0b00111110000101011100100100101001";
        ram[36] = "0b10111110000111010111000100010111";
        ram[37] = "0b00111101010000111110010010011111";
        ram[38] = "0b00111101001100111100100111110110";
        ram[39] = "0b00111110000101011110100111101101";
        ram[40] = "0b10111011111001111110010110001110";
        ram[41] = "0b00111110100110110110110100001000";
        ram[42] = "0b10111101110101111110011101111011";
        ram[43] = "0b00111110100001110011101001111100";
        ram[44] = "0b10111101011100011100110110001100";
        ram[45] = "0b00111110000101111011111100101101";
        ram[46] = "0b10111110000100001010000011110101";
        ram[47] = "0b00111101111110010100011001101001";
        ram[48] = "0b10111110000100010011110001111101";
        ram[49] = "0b10111110001100010110100101110101";
        ram[50] = "0b00111110011111100010011010100101";
        ram[51] = "0b00111110000000111001011001100101";
        ram[52] = "0b10111110010100100110110000001000";
        ram[53] = "0b10111101110001111101110110101000";
        ram[54] = "0b00111101001011111110001101100011";
        ram[55] = "0b10111110011101100111111111110100";
        ram[56] = "0b00111101001001001111010111001100";
        ram[57] = "0b10111110100011110111010001110111";
        ram[58] = "0b00111110001100111101000110111010";
        ram[59] = "0b10111110000101111101111001101101";
        ram[60] = "0b00111101111000110011111110111001";
        ram[61] = "0b00111110100110000011110011110100";
        ram[62] = "0b00111100110110011000011100010110";
        ram[63] = "0b00111101101001101111110001101110";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei8jQ) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei8jQ_ram* meminst;


SC_CTOR(conv_2_conv_2_wei8jQ) {
meminst = new conv_2_conv_2_wei8jQ_ram("conv_2_conv_2_wei8jQ_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei8jQ() {
    delete meminst;
}


};//endmodule
#endif
