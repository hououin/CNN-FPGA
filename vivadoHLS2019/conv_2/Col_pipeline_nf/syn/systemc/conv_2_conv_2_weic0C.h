// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic0C_H__
#define __conv_2_conv_2_weic0C_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic0C_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic0C_ram) {
        ram[0] = "0b00111011110001111100111100011011";
        ram[1] = "0b00111100110000111101100011001000";
        ram[2] = "0b10111100001001101000101100111101";
        ram[3] = "0b00111001111111001110111100001010";
        ram[4] = "0b00111101010100111000110000100000";
        ram[5] = "0b10111101110101111000100011010001";
        ram[6] = "0b00111110001000001010110001110110";
        ram[7] = "0b10111110001100001100101110101101";
        ram[8] = "0b00111100101110110011001011110011";
        ram[9] = "0b00111100000100001110001110111111";
        ram[10] = "0b00111101110101010000101001011100";
        ram[11] = "0b10111110000011010110110011110110";
        ram[12] = "0b00111110000001111001000010111110";
        ram[13] = "0b00111110000100000000100101100110";
        ram[14] = "0b10111101010010100110000000101011";
        ram[15] = "0b10111100101010000100011110101000";
        ram[16] = "0b00111101110011111100111011100011";
        ram[17] = "0b10111101000010101110000001010001";
        ram[18] = "0b00111101101111011111100101111011";
        ram[19] = "0b00111101100100011100001110100100";
        ram[20] = "0b10111110000111100010111111100010";
        ram[21] = "0b00111110000100000100000111101011";
        ram[22] = "0b00111100101010010011101001011011";
        ram[23] = "0b00111101110010110111001010101111";
        ram[24] = "0b00111101001101110111111000101111";
        ram[25] = "0b00111101011111000010011000111001";
        ram[26] = "0b10111110000110001000001111110100";
        ram[27] = "0b10111110011111101100111110101100";
        ram[28] = "0b10111010101110000101001011000100";
        ram[29] = "0b10111110011000000010000010100001";
        ram[30] = "0b00111101011010101000110000110101";
        ram[31] = "0b00111100111011010100111011010000";
        ram[32] = "0b00111101000111000111010110110100";
        ram[33] = "0b00111101010010011001000001111010";
        ram[34] = "0b10111110000011101000011100110110";
        ram[35] = "0b10111110001110111100110000100001";
        ram[36] = "0b00111110011010101010111010101000";
        ram[37] = "0b10111110110010001001010111010010";
        ram[38] = "0b00111110000100011010011011010110";
        ram[39] = "0b00111101001010111011011000001000";
        ram[40] = "0b10111110000001001000101101101111";
        ram[41] = "0b00111100000101111100100001111000";
        ram[42] = "0b00111110000110011100001001010101";
        ram[43] = "0b00111101111100001010110100111011";
        ram[44] = "0b00111100000000111111101011001001";
        ram[45] = "0b10111101100011110100100011110111";
        ram[46] = "0b00111101011101111011010100010001";
        ram[47] = "0b00111101110110010111011010011010";
        ram[48] = "0b00111110000100111001001111101001";
        ram[49] = "0b00111101100001101001011100001010";
        ram[50] = "0b10111101111101110101110100111010";
        ram[51] = "0b00111101010100000010100101110010";
        ram[52] = "0b10111101100010000100010010111010";
        ram[53] = "0b00111011100001000001001010111010";
        ram[54] = "0b10111101100111111011010000011110";
        ram[55] = "0b10111101100100100010000001010010";
        ram[56] = "0b10111101100100001011000100001101";
        ram[57] = "0b00111100101111010001010000011100";
        ram[58] = "0b00111100110101011010100001010100";
        ram[59] = "0b10111110100000111100000100000011";
        ram[60] = "0b00111100011101011001001101010101";
        ram[61] = "0b10111110000000101000011010110011";
        ram[62] = "0b10111101111110111101101001010011";
        ram[63] = "0b10111101101011111110111011100100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic0C) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic0C_ram* meminst;


SC_CTOR(conv_2_conv_2_weic0C) {
meminst = new conv_2_conv_2_weic0C_ram("conv_2_conv_2_weic0C_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic0C() {
    delete meminst;
}


};//endmodule
#endif
