// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib1s_H__
#define __conv_2_conv_2_weib1s_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib1s_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib1s_ram) {
        ram[0] = "0b00111101001111111011001100110000";
        ram[1] = "0b00111101110111000111101100110010";
        ram[2] = "0b00111011111011000100110111110111";
        ram[3] = "0b00111101000001010001100100000001";
        ram[4] = "0b10111101100111001110100011001110";
        ram[5] = "0b10111101111110010001110011011010";
        ram[6] = "0b10111101100011110010100101001100";
        ram[7] = "0b10111101100010000000000110100011";
        ram[8] = "0b10111101001010010011110001101001";
        ram[9] = "0b10111100010011101111101110101010";
        ram[10] = "0b10111110010001011011011100001011";
        ram[11] = "0b10111110000100001100010000110111";
        ram[12] = "0b10111101110001111010101101110110";
        ram[13] = "0b10111101100111000000000111100001";
        ram[14] = "0b10111110000100110111011101111011";
        ram[15] = "0b10111101001010111110110010011111";
        ram[16] = "0b00111101001011110001101011101001";
        ram[17] = "0b10111101001011110001011000101110";
        ram[18] = "0b00111101100011111110100011000101";
        ram[19] = "0b00111100100010010001011000001101";
        ram[20] = "0b10111110101101000000101011011101";
        ram[21] = "0b10111110001111101010111011110000";
        ram[22] = "0b10111011101100111110010011110000";
        ram[23] = "0b10111101011101010110101100100001";
        ram[24] = "0b00111100111101010100000000110100";
        ram[25] = "0b10111101110000000001011010111010";
        ram[26] = "0b10111101010101010001011111111101";
        ram[27] = "0b10111110011100011011111001001001";
        ram[28] = "0b00111101100000111101001001000110";
        ram[29] = "0b10111101101101001011110110011010";
        ram[30] = "0b10111110000110001111101011010000";
        ram[31] = "0b00111101110101110000010100110100";
        ram[32] = "0b10111101101110111100110101111101";
        ram[33] = "0b00111101111101100110000001110001";
        ram[34] = "0b10111101101011111011101000101111";
        ram[35] = "0b10111101000011100110011100001111";
        ram[36] = "0b00111100100101010001011101110001";
        ram[37] = "0b10111100101111100110101010100011";
        ram[38] = "0b10111101100110101111010000011010";
        ram[39] = "0b10111101110000010000001011010010";
        ram[40] = "0b00111101000000010000010001110001";
        ram[41] = "0b00111101001011101100001011000010";
        ram[42] = "0b00111110001110011100000110100011";
        ram[43] = "0b10111101001000100010110111010001";
        ram[44] = "0b10111101110011101011101100110101";
        ram[45] = "0b10111101111011001000001011110101";
        ram[46] = "0b10111110000001011010010011001110";
        ram[47] = "0b10111110100000100101001010000011";
        ram[48] = "0b00111101100100111000010001111111";
        ram[49] = "0b10111110000000111111000100110010";
        ram[50] = "0b10111101110001100110111111001011";
        ram[51] = "0b10111011100011011110110000011110";
        ram[52] = "0b10111101100011100000110110000111";
        ram[53] = "0b10111100101100100010010011010101";
        ram[54] = "0b00111101000110000101001111100111";
        ram[55] = "0b10111011011010111100000111100110";
        ram[56] = "0b00111101111000001101111111110001";
        ram[57] = "0b00111101010010101110011000011010";
        ram[58] = "0b10111110001000011100110110101010";
        ram[59] = "0b00111101110001101111001001000011";
        ram[60] = "0b10111110001000001110010000100011";
        ram[61] = "0b00111101101011110101101001111010";
        ram[62] = "0b10111100111000110000111100001011";
        ram[63] = "0b00111101110001010011001011110011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib1s) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib1s_ram* meminst;


SC_CTOR(conv_2_conv_2_weib1s) {
meminst = new conv_2_conv_2_weib1s_ram("conv_2_conv_2_weib1s_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib1s() {
    delete meminst;
}


};//endmodule
#endif
