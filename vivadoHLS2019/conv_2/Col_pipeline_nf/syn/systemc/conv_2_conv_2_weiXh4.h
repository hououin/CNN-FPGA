// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weiXh4_H__
#define __conv_2_conv_2_weiXh4_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weiXh4_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weiXh4_ram) {
        ram[0] = "0b00111101110010111010110100001001";
        ram[1] = "0b00111110000101110111000110100101";
        ram[2] = "0b00111101100011001001001010111010";
        ram[3] = "0b10111101111001001111100101101010";
        ram[4] = "0b10111110001110100000111001010100";
        ram[5] = "0b00111101010010000110010000010011";
        ram[6] = "0b00111110001100001011101101111001";
        ram[7] = "0b00111101101110011111010010110000";
        ram[8] = "0b00111110001111101111101101000000";
        ram[9] = "0b00111101011010011111100100100101";
        ram[10] = "0b10111100000101011101111110100000";
        ram[11] = "0b00111110000000100010110011111110";
        ram[12] = "0b00111110001111000001101011101100";
        ram[13] = "0b10111110101110101110110111100001";
        ram[14] = "0b10111101110001011000010001110001";
        ram[15] = "0b10111110011010100010000011010110";
        ram[16] = "0b00111101111100000000010101010110";
        ram[17] = "0b10111101100001001000011011100110";
        ram[18] = "0b10111101111001111011111111101010";
        ram[19] = "0b10111101000000010101000010001001";
        ram[20] = "0b00111110010100100011111000100101";
        ram[21] = "0b10111110011111111011001000110000";
        ram[22] = "0b10111110110100110111101100011100";
        ram[23] = "0b10111110100011101100000100011110";
        ram[24] = "0b00111110000011010100001111101011";
        ram[25] = "0b10111100100001001110011011011110";
        ram[26] = "0b10111101101011011010001000101100";
        ram[27] = "0b10111101110001010001111100101001";
        ram[28] = "0b10111101111010011101010111001001";
        ram[29] = "0b00111110010001000100110101000001";
        ram[30] = "0b10111101101110010101010111001001";
        ram[31] = "0b00111100111011011101100100011001";
        ram[32] = "0b00111101100100001101001100000010";
        ram[33] = "0b00111101001111010000110011000110";
        ram[34] = "0b00111010100011110000001110100101";
        ram[35] = "0b00111101101001010101101110000111";
        ram[36] = "0b00111100111101111101101100100110";
        ram[37] = "0b00111100111001111111101101101100";
        ram[38] = "0b00111110001100100001100110001110";
        ram[39] = "0b00111110001000011110111000111011";
        ram[40] = "0b00111101100011000101010010111011";
        ram[41] = "0b10111101001011010001000101011001";
        ram[42] = "0b10111101101101111100101001001000";
        ram[43] = "0b10111110100100100001000010010101";
        ram[44] = "0b10111101110001010111101111110011";
        ram[45] = "0b10111110000011111000001111000011";
        ram[46] = "0b00111101100000000101110010000100";
        ram[47] = "0b10111110011000111110110010001101";
        ram[48] = "0b00111110100110001010100110110000";
        ram[49] = "0b10111100000111111011010010100101";
        ram[50] = "0b00111110010011111101001010110111";
        ram[51] = "0b00111110001101110111101100000000";
        ram[52] = "0b10111101011101110110000111001101";
        ram[53] = "0b10111110111111110110100010101110";
        ram[54] = "0b10111011011110010010001110010011";
        ram[55] = "0b10111101100110100000110000001011";
        ram[56] = "0b10111101111110111100001001101111";
        ram[57] = "0b00111101000000001010001010110010";
        ram[58] = "0b00111101001000001100011101001000";
        ram[59] = "0b00111101111001101011001000001001";
        ram[60] = "0b10111101000001000110001110111101";
        ram[61] = "0b10111110101011000100011010111010";
        ram[62] = "0b00111101101101111100000111110100";
        ram[63] = "0b10111001011111101100110010111100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weiXh4) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weiXh4_ram* meminst;


SC_CTOR(conv_2_conv_2_weiXh4) {
meminst = new conv_2_conv_2_weiXh4_ram("conv_2_conv_2_weiXh4_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weiXh4() {
    delete meminst;
}


};//endmodule
#endif
