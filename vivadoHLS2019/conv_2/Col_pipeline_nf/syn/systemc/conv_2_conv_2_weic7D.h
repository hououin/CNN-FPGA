// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic7D_H__
#define __conv_2_conv_2_weic7D_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic7D_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic7D_ram) {
        ram[0] = "0b00111101010111100001101111011011";
        ram[1] = "0b10111110110010010000101000101010";
        ram[2] = "0b10111100101011110001100011101011";
        ram[3] = "0b10111110000010010100110010101001";
        ram[4] = "0b00111101111100101110000111100100";
        ram[5] = "0b00111110000110111110000000100100";
        ram[6] = "0b10111101000101001111001100011100";
        ram[7] = "0b00111011101001111010011111101010";
        ram[8] = "0b00111101101000101111001100001111";
        ram[9] = "0b00111100110100110010001110110001";
        ram[10] = "0b10111101110001111101011101000111";
        ram[11] = "0b10111010011110111111101110000001";
        ram[12] = "0b10111101101101010010000001110000";
        ram[13] = "0b10111101100000000110000000100110";
        ram[14] = "0b10111101101000011101011010001010";
        ram[15] = "0b00111100100110101000011001111101";
        ram[16] = "0b10111100101110110011110100001001";
        ram[17] = "0b00111110000101100101100001010110";
        ram[18] = "0b00111100011100000111101110101101";
        ram[19] = "0b00111101010010110110000011000001";
        ram[20] = "0b10111110011000110110110001000011";
        ram[21] = "0b10111101110011010110100011111101";
        ram[22] = "0b10111011110110110100110010110010";
        ram[23] = "0b00111101101111010111001001010111";
        ram[24] = "0b10111101000110100110111111001101";
        ram[25] = "0b10111101011111001010010010011010";
        ram[26] = "0b00111100111010101110100011011001";
        ram[27] = "0b10111101100111000111000101101111";
        ram[28] = "0b10111101001100110011100011110010";
        ram[29] = "0b10111110001011011111000111000000";
        ram[30] = "0b00111101000001111000000111000001";
        ram[31] = "0b10111110010001000100011000101100";
        ram[32] = "0b00111101101011011000111010111101";
        ram[33] = "0b00111101000011110110110001101011";
        ram[34] = "0b00111101100100011101000001001001";
        ram[35] = "0b10111101110001100011001111110101";
        ram[36] = "0b10111110100100000111111010001111";
        ram[37] = "0b10111110100110001011101101000101";
        ram[38] = "0b00111101101010000101111001001100";
        ram[39] = "0b10111010111000011100010110010110";
        ram[40] = "0b10111110100010010111011001101001";
        ram[41] = "0b10111101111111101011111001000100";
        ram[42] = "0b10111101000100010011010011011110";
        ram[43] = "0b10111101111010101100100001001010";
        ram[44] = "0b10111100011111001111001111111000";
        ram[45] = "0b00111101100010111011110010011101";
        ram[46] = "0b00111101001100011011111011100111";
        ram[47] = "0b00111110000011011101000000111101";
        ram[48] = "0b00111100011110011110111111101110";
        ram[49] = "0b00111101010001111111010011011111";
        ram[50] = "0b00111100100010010111001100010010";
        ram[51] = "0b10111101111001110100100101011111";
        ram[52] = "0b10111101110010001000010111011000";
        ram[53] = "0b10111110001001010010000001001100";
        ram[54] = "0b00111110000000100111100001101011";
        ram[55] = "0b00111110010011111001110111011011";
        ram[56] = "0b00111101001011101100100100010111";
        ram[57] = "0b00111101100011100010001001000001";
        ram[58] = "0b10111100110110011100011010010111";
        ram[59] = "0b00111110001100101111100001110100";
        ram[60] = "0b00111100101110100100111110011001";
        ram[61] = "0b00111100001100110000110010111111";
        ram[62] = "0b10111101110000110001101001111110";
        ram[63] = "0b10111101100111100010000100111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic7D) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic7D_ram* meminst;


SC_CTOR(conv_2_conv_2_weic7D) {
meminst = new conv_2_conv_2_weic7D_ram("conv_2_conv_2_weic7D_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic7D() {
    delete meminst;
}


};//endmodule
#endif
