// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib5t_H__
#define __conv_2_conv_2_weib5t_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib5t_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib5t_ram) {
        ram[0] = "0b10111110000100100111000001011100";
        ram[1] = "0b10111011011110100011010011100011";
        ram[2] = "0b00111100101111001111000000010100";
        ram[3] = "0b00111101010100110001010101110100";
        ram[4] = "0b00111101100000011000111000000110";
        ram[5] = "0b10111011011110001011011011111110";
        ram[6] = "0b00111110000110110010101001100011";
        ram[7] = "0b10111100100011000111000011111101";
        ram[8] = "0b00111010111100011011110100101001";
        ram[9] = "0b00111101110000010101100001111010";
        ram[10] = "0b00111100110111001011100111001101";
        ram[11] = "0b00111101101000010111110101001011";
        ram[12] = "0b00111110001011010110110000110010";
        ram[13] = "0b00111100001010101100010000110110";
        ram[14] = "0b10111011101100111001101000011000";
        ram[15] = "0b10111101010100100101100110100000";
        ram[16] = "0b10111101101110000100011111111101";
        ram[17] = "0b00111101011000100110000110110110";
        ram[18] = "0b10111110011101001000010101111001";
        ram[19] = "0b00111101101110010100111101011110";
        ram[20] = "0b00111101110011010011100100110010";
        ram[21] = "0b00111100011000101111101010001000";
        ram[22] = "0b10111101101110010111100101101100";
        ram[23] = "0b00111011110100001101100111011010";
        ram[24] = "0b00111101010111101000000110011000";
        ram[25] = "0b10111100010010001011000011010011";
        ram[26] = "0b00111101100110101000101111010011";
        ram[27] = "0b10111110001111101011100111110000";
        ram[28] = "0b10111110100010111001001010111001";
        ram[29] = "0b00111101100110111000000000111110";
        ram[30] = "0b00111100001011110100101101010000";
        ram[31] = "0b10111100101011100110011100001000";
        ram[32] = "0b00111011000100101000001111110001";
        ram[33] = "0b10111110010101110100011001110011";
        ram[34] = "0b00111110000110011000111111010111";
        ram[35] = "0b00111101110000100011101000111101";
        ram[36] = "0b10111101101100001111001111111011";
        ram[37] = "0b00111110000101111110111000101110";
        ram[38] = "0b00111101101001011011000001100001";
        ram[39] = "0b10111100111110111000010111010001";
        ram[40] = "0b00111001111010010110000011110000";
        ram[41] = "0b00111110000100000010011100010110";
        ram[42] = "0b00111100110001111010001101100010";
        ram[43] = "0b00111101100110110001001011011101";
        ram[44] = "0b10111101001011000101010111011000";
        ram[45] = "0b00111110010101110100110000010101";
        ram[46] = "0b00111101111110011011010100110100";
        ram[47] = "0b00111101000011000101000111110101";
        ram[48] = "0b00111101111100001001111001110111";
        ram[49] = "0b10111110100011101101001000111111";
        ram[50] = "0b00111110000100010100101110001101";
        ram[51] = "0b00111110000100011010111001111100";
        ram[52] = "0b10111110001111001110100100000011";
        ram[53] = "0b00111101101100100101101111010011";
        ram[54] = "0b10111101101111011101011011010011";
        ram[55] = "0b10111110010000001110011001101000";
        ram[56] = "0b10111101010101000111011101010111";
        ram[57] = "0b00111101110001010010110000011101";
        ram[58] = "0b10111110011100010100001010110011";
        ram[59] = "0b00111100110001111110010100000010";
        ram[60] = "0b00111101110111101110100000100101";
        ram[61] = "0b10111110001001010000111001011111";
        ram[62] = "0b00111101001111110001011111000011";
        ram[63] = "0b00111011000111000101011100101001";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib5t) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib5t_ram* meminst;


SC_CTOR(conv_2_conv_2_weib5t) {
meminst = new conv_2_conv_2_weib5t_ram("conv_2_conv_2_weib5t_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib5t() {
    delete meminst;
}


};//endmodule
#endif
