// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib9t_H__
#define __conv_2_conv_2_weib9t_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib9t_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib9t_ram) {
        ram[0] = "0b00111100000111110111101010000110";
        ram[1] = "0b10111101000011100101001110110011";
        ram[2] = "0b10111101101010001101000100010011";
        ram[3] = "0b10111101111010100100110011101111";
        ram[4] = "0b00111100100101100101011000100001";
        ram[5] = "0b10111101000110101111100011101010";
        ram[6] = "0b10111110011000111100111010110100";
        ram[7] = "0b10111101101010010110000110100110";
        ram[8] = "0b10111110001001101000000111011111";
        ram[9] = "0b00111100101010000001100000101111";
        ram[10] = "0b10111101011000010011110011000110";
        ram[11] = "0b10111100100011111011101101100111";
        ram[12] = "0b10111110000010011011000101100011";
        ram[13] = "0b10111110011101010101100011000000";
        ram[14] = "0b00111101010110111001000010100111";
        ram[15] = "0b10111101000100011101101001010010";
        ram[16] = "0b10111110100001111010011110111010";
        ram[17] = "0b10111101100100101110100011100001";
        ram[18] = "0b10111110001101011110001001101111";
        ram[19] = "0b00111101010001111101110110101101";
        ram[20] = "0b10111110010001101100000001110101";
        ram[21] = "0b10111110011011000000110111001010";
        ram[22] = "0b10111110111000111000111110111101";
        ram[23] = "0b00111110000011000111111010100010";
        ram[24] = "0b10111110010010110110110100001000";
        ram[25] = "0b00111101011111001001000110001110";
        ram[26] = "0b00111010000110001010010101100110";
        ram[27] = "0b00111101100110110101011110010001";
        ram[28] = "0b00111101100010110110000010111000";
        ram[29] = "0b00111101011101111011110101111110";
        ram[30] = "0b10111101100001101011110100111110";
        ram[31] = "0b00111110001101111111000001000010";
        ram[32] = "0b10111101101001101101101011001001";
        ram[33] = "0b10111110100110010000101001110001";
        ram[34] = "0b00111011100010110110010010001001";
        ram[35] = "0b00111101110011111000000001011011";
        ram[36] = "0b00111100101001111000011000000001";
        ram[37] = "0b00111101100001010111001011111001";
        ram[38] = "0b10111101001010010101101011010010";
        ram[39] = "0b10111100010001001110000100101100";
        ram[40] = "0b00111100110111011100000111111111";
        ram[41] = "0b10111011010110010001111000011010";
        ram[42] = "0b10111110000000000110000010110100";
        ram[43] = "0b10111011000010011001000111000100";
        ram[44] = "0b10111011111001000101000100101000";
        ram[45] = "0b00111100111011001010100000000001";
        ram[46] = "0b00111101010100101100110011110001";
        ram[47] = "0b00111101101111100000111011110001";
        ram[48] = "0b00111110001101101010011010111100";
        ram[49] = "0b10111101110101111010000101001100";
        ram[50] = "0b10111110101111100100001111111100";
        ram[51] = "0b10111100110000100100000111100110";
        ram[52] = "0b10111101101100100111001011110111";
        ram[53] = "0b00111110000111000100011011000110";
        ram[54] = "0b00111101111110111000000001111101";
        ram[55] = "0b10111110001111101111000111100011";
        ram[56] = "0b10111100111110100110110100101010";
        ram[57] = "0b00111100100011011110010001100110";
        ram[58] = "0b00111101100101001110000100101010";
        ram[59] = "0b10111101001110100011110000000101";
        ram[60] = "0b10111110101110011110101110011101";
        ram[61] = "0b10111110010101111011111101110100";
        ram[62] = "0b10111100100111110010011101100100";
        ram[63] = "0b10111101111000100111010000001101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib9t) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib9t_ram* meminst;


SC_CTOR(conv_2_conv_2_weib9t) {
meminst = new conv_2_conv_2_weib9t_ram("conv_2_conv_2_weib9t_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib9t() {
    delete meminst;
}


};//endmodule
#endif
