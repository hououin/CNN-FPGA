// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic4D_H__
#define __conv_2_conv_2_weic4D_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic4D_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic4D_ram) {
        ram[0] = "0b00111101101011111101101100011001";
        ram[1] = "0b10111101110110001000001011001101";
        ram[2] = "0b10111110011111100100100110001100";
        ram[3] = "0b10111101010111010001010100010101";
        ram[4] = "0b00111101110101110110011001000010";
        ram[5] = "0b00111110010000100101100010101000";
        ram[6] = "0b00111101011001001110001001110100";
        ram[7] = "0b10111100010111010001101100110010";
        ram[8] = "0b10111100111100000101001010001011";
        ram[9] = "0b00111101010011000111001001011111";
        ram[10] = "0b00111101000100110011011110000001";
        ram[11] = "0b10111100100011000110111001001110";
        ram[12] = "0b10111101101110101010011100111100";
        ram[13] = "0b00111101100101000011100100110010";
        ram[14] = "0b10111101000101011111010000000100";
        ram[15] = "0b00111100000111010100100101010001";
        ram[16] = "0b00111101110001011111011101100000";
        ram[17] = "0b10111011000001001010001010110110";
        ram[18] = "0b00111101101101000101111010001000";
        ram[19] = "0b00111100101111100100010001100011";
        ram[20] = "0b10111100110110110100011111000010";
        ram[21] = "0b00111101111001010000010001001100";
        ram[22] = "0b00111101111001001000011101110000";
        ram[23] = "0b00111101100001101010010011001101";
        ram[24] = "0b00111110000011110110110101011100";
        ram[25] = "0b00111101110000110001111100101101";
        ram[26] = "0b10111011101000111100001111110100";
        ram[27] = "0b00111101001111011110101011110100";
        ram[28] = "0b10111101110100101011101110111011";
        ram[29] = "0b10111100000101100001101110100001";
        ram[30] = "0b10111101110100001101000110101011";
        ram[31] = "0b10111110010000110011001010001100";
        ram[32] = "0b00111100110100110101100010100010";
        ram[33] = "0b10111101101111001111110110111100";
        ram[34] = "0b00111101111101011010111100000001";
        ram[35] = "0b10111011000001000101101101110100";
        ram[36] = "0b00111101100110101000110000100101";
        ram[37] = "0b10111011010011100101110110010010";
        ram[38] = "0b00111101001010001110101110001001";
        ram[39] = "0b10111101011000111011100101000100";
        ram[40] = "0b00111110001101101011010110100100";
        ram[41] = "0b00111101110111101011101110000010";
        ram[42] = "0b00111101110110110101111110001001";
        ram[43] = "0b10111100100001001000000000011001";
        ram[44] = "0b10111101101011001010101000010110";
        ram[45] = "0b00111101011101001100001010011001";
        ram[46] = "0b00111100100100111000000101011010";
        ram[47] = "0b10111101010000011000000111000001";
        ram[48] = "0b10111101001001111011001111111101";
        ram[49] = "0b10111110000101110011101100001011";
        ram[50] = "0b00111101000001101101101001001001";
        ram[51] = "0b10111101000110000011100101010101";
        ram[52] = "0b10111110010000100110011110010001";
        ram[53] = "0b00111101110111101100001101110111";
        ram[54] = "0b10111100100100110011101100111001";
        ram[55] = "0b10111110101011000101011000100001";
        ram[56] = "0b10111101001000110101101000101110";
        ram[57] = "0b00111100101110101100000101110010";
        ram[58] = "0b00111101101101010010011110011000";
        ram[59] = "0b10111101000100101011001110001010";
        ram[60] = "0b00111101101010011111010111110001";
        ram[61] = "0b10111100001000110100011001011110";
        ram[62] = "0b00111110000110001001000100100110";
        ram[63] = "0b00111010001110011100100110010010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic4D) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic4D_ram* meminst;


SC_CTOR(conv_2_conv_2_weic4D) {
meminst = new conv_2_conv_2_weic4D_ram("conv_2_conv_2_weic4D_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic4D() {
    delete meminst;
}


};//endmodule
#endif
