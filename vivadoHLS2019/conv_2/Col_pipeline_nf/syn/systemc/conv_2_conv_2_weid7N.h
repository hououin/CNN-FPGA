// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid7N_H__
#define __conv_2_conv_2_weid7N_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid7N_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid7N_ram) {
        ram[0] = "0b00111110010011001001101000100111";
        ram[1] = "0b10111110000111001011011000110001";
        ram[2] = "0b10111110100010110010011000010111";
        ram[3] = "0b00111110000100100000111111010011";
        ram[4] = "0b10111101101000010111100111010001";
        ram[5] = "0b00111110011100110110001100111000";
        ram[6] = "0b00111110010001100110110110001000";
        ram[7] = "0b10111101110101110001110101101000";
        ram[8] = "0b00111110001111110000010011010100";
        ram[9] = "0b00111101001100001010000011101011";
        ram[10] = "0b00111010101100101011010000000100";
        ram[11] = "0b10111101001110010110110100010101";
        ram[12] = "0b00111101110101011001101111100100";
        ram[13] = "0b10111110010100010011101111011000";
        ram[14] = "0b00111101001011010000101110100000";
        ram[15] = "0b00111101101000011101111111011111";
        ram[16] = "0b00111110001101110001001001011000";
        ram[17] = "0b00111110000101110011100010010111";
        ram[18] = "0b00111101001111010110011011001100";
        ram[19] = "0b00111100110000101111011010101000";
        ram[20] = "0b10111110111101010101000100110010";
        ram[21] = "0b10111110111100110011101011101010";
        ram[22] = "0b10111110011100001100101110111001";
        ram[23] = "0b00111101110100011101010001111100";
        ram[24] = "0b00111100001011001001011101011011";
        ram[25] = "0b00111110100000110100011011110001";
        ram[26] = "0b00111110011011000101000001111010";
        ram[27] = "0b00111100011000101110011010110000";
        ram[28] = "0b00111101101110100001000010110011";
        ram[29] = "0b10111110000001110110110011111001";
        ram[30] = "0b10111110001111100000001001001110";
        ram[31] = "0b00111101110110001101110111100110";
        ram[32] = "0b00111110011010101111011000110000";
        ram[33] = "0b00111000111001010011111100000010";
        ram[34] = "0b00111101111101000111110010101110";
        ram[35] = "0b10111110000110100110011100100100";
        ram[36] = "0b10111100110000000100100110010100";
        ram[37] = "0b10111110101110011100001011011011";
        ram[38] = "0b10111101010111101101011111100110";
        ram[39] = "0b00111101111111011010010110010100";
        ram[40] = "0b10111110110010101111100010001011";
        ram[41] = "0b00111110010011010000000110001000";
        ram[42] = "0b10111100110001101110011010100110";
        ram[43] = "0b00111110001111110010001011000111";
        ram[44] = "0b10111110100110001011101110100011";
        ram[45] = "0b00111110011001011101111011101001";
        ram[46] = "0b00111101100010010011111110000111";
        ram[47] = "0b00111101111000100111011100100000";
        ram[48] = "0b10111101001101110001001101101001";
        ram[49] = "0b00111101101000111111101010101011";
        ram[50] = "0b00111101100010100000000100101000";
        ram[51] = "0b10111110010110010110000100000010";
        ram[52] = "0b10111100110101001000110111001100";
        ram[53] = "0b10111110000001111101101000111011";
        ram[54] = "0b10111110011110101001010001101100";
        ram[55] = "0b10111101000011010000010100100010";
        ram[56] = "0b00111110010011111100000001011110";
        ram[57] = "0b10111101110001000110000100001011";
        ram[58] = "0b10111100100010100111000000010010";
        ram[59] = "0b00111100101010000001111101011000";
        ram[60] = "0b10111100000011011110100111001110";
        ram[61] = "0b00111110000001011101110001100101";
        ram[62] = "0b10111100101111001100101010001010";
        ram[63] = "0b00111100101000011111011000111000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid7N) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid7N_ram* meminst;


SC_CTOR(conv_2_conv_2_weid7N) {
meminst = new conv_2_conv_2_weid7N_ram("conv_2_conv_2_weid7N_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid7N() {
    delete meminst;
}


};//endmodule
#endif
