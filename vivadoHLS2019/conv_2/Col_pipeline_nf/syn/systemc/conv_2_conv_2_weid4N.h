// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid4N_H__
#define __conv_2_conv_2_weid4N_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid4N_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid4N_ram) {
        ram[0] = "0b00111011000001011101101100010101";
        ram[1] = "0b10111110011111000101110000011000";
        ram[2] = "0b10111110101001010001101101000101";
        ram[3] = "0b10111101010110100111101110100111";
        ram[4] = "0b10111110011110101100101001001100";
        ram[5] = "0b10111110110000011100000101111011";
        ram[6] = "0b10111110100110000111001111010110";
        ram[7] = "0b00111110010011011001100110011001";
        ram[8] = "0b00111110000110110011000100001011";
        ram[9] = "0b10111111000011001101001010111011";
        ram[10] = "0b00111100010001101111110010001000";
        ram[11] = "0b10111110011100010111010001101111";
        ram[12] = "0b10111110010101110010010001010101";
        ram[13] = "0b10111110101110100101110010010000";
        ram[14] = "0b00111110101010000111001100000111";
        ram[15] = "0b00111110011111001001100100011011";
        ram[16] = "0b10111110001000010101000001010110";
        ram[17] = "0b00111100100000100111110110001110";
        ram[18] = "0b10111101100100101110101000011100";
        ram[19] = "0b10111101010001010101010011010010";
        ram[20] = "0b00111110000111001011011111000101";
        ram[21] = "0b00111100100001011011111010011110";
        ram[22] = "0b10111101000000100110100000001010";
        ram[23] = "0b10111110101010100001110000100101";
        ram[24] = "0b10111110011100110100111010011110";
        ram[25] = "0b10111101101101101101011010010011";
        ram[26] = "0b00111100101000000001011110110011";
        ram[27] = "0b00111110010101011111101001010100";
        ram[28] = "0b00111101110100010001001111100101";
        ram[29] = "0b10111100101100000100001111111111";
        ram[30] = "0b00111110001001111000110111011010";
        ram[31] = "0b10111101101001101001100000000111";
        ram[32] = "0b10111110001101001100010111100101";
        ram[33] = "0b10111011001010101111110000011000";
        ram[34] = "0b10111110001011111110010100011100";
        ram[35] = "0b10111110010011001110010011110111";
        ram[36] = "0b10111110001111110000100101100111";
        ram[37] = "0b10111100100000101000000111100011";
        ram[38] = "0b10111110000111101011011000011001";
        ram[39] = "0b00111110001111001010101101111111";
        ram[40] = "0b00111110011101100000011110000000";
        ram[41] = "0b10111110011101001000000011111101";
        ram[42] = "0b10111110100010010100011000110111";
        ram[43] = "0b00111101000010001011001011110110";
        ram[44] = "0b00111101001101111010111110011000";
        ram[45] = "0b00111110100100101100101010101010";
        ram[46] = "0b10111101110011000001000010001001";
        ram[47] = "0b10111110010010011100101110100110";
        ram[48] = "0b00111110010100101100101001110001";
        ram[49] = "0b00111110001111010101101101100011";
        ram[50] = "0b10111110010010110101100000101000";
        ram[51] = "0b10111110000010001111111001011110";
        ram[52] = "0b00111101111000111011110101000001";
        ram[53] = "0b10111101001110111000010101110010";
        ram[54] = "0b00111100101111010011000011011011";
        ram[55] = "0b00111100110011010010101011000100";
        ram[56] = "0b00111110011111000101011001000011";
        ram[57] = "0b00111110011010101010010001110111";
        ram[58] = "0b10111101000100011101010110000100";
        ram[59] = "0b00111101100111101110010100001100";
        ram[60] = "0b10111110000011001110011000010110";
        ram[61] = "0b10111101011100100100010000101000";
        ram[62] = "0b00111110011100110111110100000000";
        ram[63] = "0b00111110000100010001011111101011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid4N) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid4N_ram* meminst;


SC_CTOR(conv_2_conv_2_weid4N) {
meminst = new conv_2_conv_2_weid4N_ram("conv_2_conv_2_weid4N_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid4N() {
    delete meminst;
}


};//endmodule
#endif
