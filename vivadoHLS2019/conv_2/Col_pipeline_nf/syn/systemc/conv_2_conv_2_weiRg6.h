// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weiRg6_H__
#define __conv_2_conv_2_weiRg6_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weiRg6_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weiRg6_ram) {
        ram[0] = "0b10111101101111110000100111111110";
        ram[1] = "0b00111110010011011011000110100101";
        ram[2] = "0b10111010110101001111111000100100";
        ram[3] = "0b00111100101000000001000000100101";
        ram[4] = "0b00111101111000001111000010101100";
        ram[5] = "0b00111101110101000100100111101001";
        ram[6] = "0b00111101100110000010111010110011";
        ram[7] = "0b10111100100001001010101001101100";
        ram[8] = "0b10111100100101111101101110001010";
        ram[9] = "0b10111100110001010110011000110000";
        ram[10] = "0b00111101100011011111111110111111";
        ram[11] = "0b00111100110101100110010111011111";
        ram[12] = "0b00111101000111101001111101101110";
        ram[13] = "0b00111101101010001001100100001010";
        ram[14] = "0b00111110000000100100010001001001";
        ram[15] = "0b10111101000111110100111011010101";
        ram[16] = "0b00111110000000100001001100110000";
        ram[17] = "0b10111101011001010111010010011000";
        ram[18] = "0b00111110001001101011011010110101";
        ram[19] = "0b10111110010011101011100100101100";
        ram[20] = "0b00111101111011110011010000110100";
        ram[21] = "0b00111100100010000011110110010110";
        ram[22] = "0b10111110000001010000001010001001";
        ram[23] = "0b10111100100100101011110111100000";
        ram[24] = "0b00111100111001101000111111100101";
        ram[25] = "0b10111101110011010111101101011100";
        ram[26] = "0b10111101100001000101111010110111";
        ram[27] = "0b10111110010000000110100110000101";
        ram[28] = "0b00111101110000001110010100101100";
        ram[29] = "0b10111110000100111100001110110010";
        ram[30] = "0b00111101111101011000000000000101";
        ram[31] = "0b10111110100001101111001101010110";
        ram[32] = "0b10111101011111001111011011010011";
        ram[33] = "0b10111101001011110001011101111110";
        ram[34] = "0b10111101100111101000011001101110";
        ram[35] = "0b10111101101011110110001111001011";
        ram[36] = "0b10111110101001110000011100101010";
        ram[37] = "0b00111101100010101001011100100101";
        ram[38] = "0b00111100101010011001110011101110";
        ram[39] = "0b10111100101111010000001111001110";
        ram[40] = "0b10111110100110101101000110111100";
        ram[41] = "0b10111101110101100100101000001001";
        ram[42] = "0b00111101111101111000000010111110";
        ram[43] = "0b10111101010110001100110000111010";
        ram[44] = "0b10111100110000110100110100010110";
        ram[45] = "0b10111101101010001010110110011001";
        ram[46] = "0b00111101110010100011101111100011";
        ram[47] = "0b00111101001001100101111000111111";
        ram[48] = "0b10111101101000001100010100111101";
        ram[49] = "0b10111101110010011000111010111110";
        ram[50] = "0b00111100010011010101011101111000";
        ram[51] = "0b00111110110000000011010000101110";
        ram[52] = "0b10111101110010100000100011111100";
        ram[53] = "0b10111101000110011000111110000100";
        ram[54] = "0b10111101101010011011111000011010";
        ram[55] = "0b10111100101010101010101100110100";
        ram[56] = "0b00111101000011100000010110000100";
        ram[57] = "0b10111101010000111010010101110000";
        ram[58] = "0b10111100100100001111010001001111";
        ram[59] = "0b00111101110101010001011001111100";
        ram[60] = "0b00111101001111101110101011100000";
        ram[61] = "0b10111101101111010011100100100000";
        ram[62] = "0b00111101101001000010101010100000";
        ram[63] = "0b10111101100110000001011001101101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weiRg6) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weiRg6_ram* meminst;


SC_CTOR(conv_2_conv_2_weiRg6) {
meminst = new conv_2_conv_2_weiRg6_ram("conv_2_conv_2_weiRg6_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weiRg6() {
    delete meminst;
}


};//endmodule
#endif
