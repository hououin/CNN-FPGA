// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_wei0iy_H__
#define __conv_2_conv_2_wei0iy_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_wei0iy_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_wei0iy_ram) {
        ram[0] = "0b00111101011011110101010110100000";
        ram[1] = "0b10111100101001110100111110111111";
        ram[2] = "0b10111110010101010111001001101010";
        ram[3] = "0b00111110001101100010010001101100";
        ram[4] = "0b00111100110000001110101011010011";
        ram[5] = "0b00111101000100000101111010001010";
        ram[6] = "0b00111101000011010011110000011100";
        ram[7] = "0b10111110010101111001110101100110";
        ram[8] = "0b00111110001110000001010101100101";
        ram[9] = "0b00111101000001010011001000100111";
        ram[10] = "0b00111100110110100011100101010110";
        ram[11] = "0b10111101000001001100000011001010";
        ram[12] = "0b10111101000011000010011001110101";
        ram[13] = "0b00111100100111101110110101111110";
        ram[14] = "0b00111110001000110111001101010000";
        ram[15] = "0b00111110011101011010100111001111";
        ram[16] = "0b10111100111111110111100011111100";
        ram[17] = "0b10111100100100100110101110011110";
        ram[18] = "0b10111110000010000100011110101100";
        ram[19] = "0b10111101001111110111010111100000";
        ram[20] = "0b00111110000100010001100011101101";
        ram[21] = "0b10111101100111011110000001101111";
        ram[22] = "0b10111101100101111010010011011011";
        ram[23] = "0b00111101000111101101100011010111";
        ram[24] = "0b10111101111011000000010101001011";
        ram[25] = "0b00111101100000010010010001010001";
        ram[26] = "0b00111110001100101011010001011110";
        ram[27] = "0b10111101110000101011000110110101";
        ram[28] = "0b00111101001100111001101000010010";
        ram[29] = "0b10111101010011001110100101110000";
        ram[30] = "0b10111110000000100111010100001010";
        ram[31] = "0b10111101111100100101010001100101";
        ram[32] = "0b00111101110000100101000010100101";
        ram[33] = "0b10111110010010000101111011101010";
        ram[34] = "0b00111110001000000000110110101001";
        ram[35] = "0b00111110000011110001010000001011";
        ram[36] = "0b00111011100101110011001111010101";
        ram[37] = "0b00111101010111100101010000011100";
        ram[38] = "0b10111101110011100100100110011111";
        ram[39] = "0b00111100101010110111100011000110";
        ram[40] = "0b10111110100010101111011010000010";
        ram[41] = "0b00111110001001000010101110010100";
        ram[42] = "0b10111101110101001100011010101010";
        ram[43] = "0b00111110100010111111011000110011";
        ram[44] = "0b00111101101001000100001111101010";
        ram[45] = "0b00111101100010001111010100100011";
        ram[46] = "0b10111101101001000101000110100001";
        ram[47] = "0b10111100011001100000101101110100";
        ram[48] = "0b10111110000010110011000000110001";
        ram[49] = "0b10111110001010110010001111011000";
        ram[50] = "0b10111101010010110100110000010011";
        ram[51] = "0b10111011111111011010001011100000";
        ram[52] = "0b10111110010111001111100110110000";
        ram[53] = "0b00111101110010101100101000111100";
        ram[54] = "0b10111101100110011010111111010011";
        ram[55] = "0b10111110010101001010100010000101";
        ram[56] = "0b10111100100101010010100100100011";
        ram[57] = "0b10111101011000110000100000001011";
        ram[58] = "0b10111110000001000110110101011101";
        ram[59] = "0b10111101100000010000010001011110";
        ram[60] = "0b00111101000011111000100011111001";
        ram[61] = "0b00111101011100111101101110001000";
        ram[62] = "0b00111101101010111111101100111010";
        ram[63] = "0b00111110000111111101101000101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_wei0iy) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_wei0iy_ram* meminst;


SC_CTOR(conv_2_conv_2_wei0iy) {
meminst = new conv_2_conv_2_wei0iy_ram("conv_2_conv_2_wei0iy_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_wei0iy() {
    delete meminst;
}


};//endmodule
#endif
