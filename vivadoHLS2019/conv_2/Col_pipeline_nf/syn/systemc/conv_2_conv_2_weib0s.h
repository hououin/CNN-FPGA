// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib0s_H__
#define __conv_2_conv_2_weib0s_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib0s_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib0s_ram) {
        ram[0] = "0b10111101110100000110101001101110";
        ram[1] = "0b00111101100001000100011010011110";
        ram[2] = "0b10111101100000101011110111111110";
        ram[3] = "0b00111101011110011101100010110001";
        ram[4] = "0b10111110001001100011101110000000";
        ram[5] = "0b10111110010101101000000100110101";
        ram[6] = "0b10111110011101000110000010001100";
        ram[7] = "0b00111101011010111111011100110111";
        ram[8] = "0b10111110001011110011101001101110";
        ram[9] = "0b10111101100110100010100000010001";
        ram[10] = "0b10111110111000001011100001000111";
        ram[11] = "0b10111110010100111000110111101000";
        ram[12] = "0b10111110100000000011000010101001";
        ram[13] = "0b00111101101010111110111000101110";
        ram[14] = "0b10111101010000001110101110001001";
        ram[15] = "0b10111110000111011001111101110011";
        ram[16] = "0b00111101100011100110101011011011";
        ram[17] = "0b10111101100101101110010011111000";
        ram[18] = "0b00111110011000111000100001011000";
        ram[19] = "0b00111110001110011000100011011111";
        ram[20] = "0b10111110001100100000100001101011";
        ram[21] = "0b10111110000110000000011011100101";
        ram[22] = "0b00111010000111000010111010100101";
        ram[23] = "0b00111101000111101111011001111000";
        ram[24] = "0b10111101010111100100100111101111";
        ram[25] = "0b10111110101010010100001110100000";
        ram[26] = "0b10111101000100000000010000010000";
        ram[27] = "0b10111101101000110111110101000011";
        ram[28] = "0b00111101110110011100111011011101";
        ram[29] = "0b10111110010110011001111000111110";
        ram[30] = "0b10111110011001111101000010100010";
        ram[31] = "0b00111110000101111111100011001010";
        ram[32] = "0b10111110100001000010010101100010";
        ram[33] = "0b00111110001111011010011101110100";
        ram[34] = "0b10111110011001011000100100000011";
        ram[35] = "0b10111100101101011000111110000010";
        ram[36] = "0b10111110000111010111100000011110";
        ram[37] = "0b00111101001100001111010111000001";
        ram[38] = "0b10111110000100001111011010111111";
        ram[39] = "0b10111110000011101010110001010101";
        ram[40] = "0b10111101111000011101000011110110";
        ram[41] = "0b10111110000100011111101011000100";
        ram[42] = "0b00111101101011001101110010010111";
        ram[43] = "0b00111101101111100100111100101101";
        ram[44] = "0b10111100110000110101100001010010";
        ram[45] = "0b10111111000001111110001001000000";
        ram[46] = "0b10111101111110000101111101010110";
        ram[47] = "0b10111110100100011110011101000011";
        ram[48] = "0b00111101010111110011010010100000";
        ram[49] = "0b00111011010101010011010111010110";
        ram[50] = "0b10111110000010010001101011111011";
        ram[51] = "0b10111111000101111001111110011100";
        ram[52] = "0b00111100111011101110110010011000";
        ram[53] = "0b10111100010111100001010000100110";
        ram[54] = "0b10111101111100011011011011010011";
        ram[55] = "0b00111110001100110101101001010001";
        ram[56] = "0b00111110011000000101000101010110";
        ram[57] = "0b00111101001001001110000010000111";
        ram[58] = "0b10111110010111110001111111000010";
        ram[59] = "0b00111101111000111101110110111010";
        ram[60] = "0b10111110101011100010001110110100";
        ram[61] = "0b00111011111100011001100001111110";
        ram[62] = "0b10111101111011001011011001110101";
        ram[63] = "0b10111011000101100101001011001000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib0s) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib0s_ram* meminst;


SC_CTOR(conv_2_conv_2_weib0s) {
meminst = new conv_2_conv_2_weib0s_ram("conv_2_conv_2_weib0s_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib0s() {
    delete meminst;
}


};//endmodule
#endif
