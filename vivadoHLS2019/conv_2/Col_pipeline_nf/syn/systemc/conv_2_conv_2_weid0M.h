// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid0M_H__
#define __conv_2_conv_2_weid0M_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid0M_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid0M_ram) {
        ram[0] = "0b10111101111001111001001000111100";
        ram[1] = "0b10111100000010111010010111111100";
        ram[2] = "0b10111110000001010001011111001011";
        ram[3] = "0b00111100101100010001011001011110";
        ram[4] = "0b00111110000111100011010001011010";
        ram[5] = "0b10111110001100001111011101100011";
        ram[6] = "0b00111101010011111101100110001001";
        ram[7] = "0b10111100010100100100111111010010";
        ram[8] = "0b00111100110110110110011111000111";
        ram[9] = "0b10111110000111001011101010011111";
        ram[10] = "0b10111110100000110100101101010100";
        ram[11] = "0b10111110011011011100111101011010";
        ram[12] = "0b00111101101010010111000110010111";
        ram[13] = "0b00111110000001011110101111100101";
        ram[14] = "0b10111100100111000110010001001111";
        ram[15] = "0b10111101100000000111111100001010";
        ram[16] = "0b10111101101010111101111100101100";
        ram[17] = "0b10111110000010101110110000001100";
        ram[18] = "0b10111101001001101111100010010110";
        ram[19] = "0b10111101000101010110100011011010";
        ram[20] = "0b10111101100100000100010011101010";
        ram[21] = "0b00111110000101000010111001011110";
        ram[22] = "0b00111101010111001000011101101000";
        ram[23] = "0b10111101001111010110010001010110";
        ram[24] = "0b00111101111011010001111001101000";
        ram[25] = "0b00111100111100101110000110110001";
        ram[26] = "0b10111101101111110001000111100110";
        ram[27] = "0b00111101011010100100010001010011";
        ram[28] = "0b10111110000110110001010010010111";
        ram[29] = "0b10111101101011111111100001010011";
        ram[30] = "0b10111101110001110010001111011000";
        ram[31] = "0b00111011111111100110111010001110";
        ram[32] = "0b10111110100000100100000001001111";
        ram[33] = "0b10111101010010110111101001111001";
        ram[34] = "0b10111110010000101010000100010001";
        ram[35] = "0b10111101010110111100001110110100";
        ram[36] = "0b00111101110001010000110000111000";
        ram[37] = "0b10111100001111111000010110110001";
        ram[38] = "0b10111011100101110101010001010000";
        ram[39] = "0b10111101100011010011100001111111";
        ram[40] = "0b00111110000100010111101110111000";
        ram[41] = "0b10111101111011111010110011111011";
        ram[42] = "0b00111110000010111011011100000110";
        ram[43] = "0b00111101000001000000100001101010";
        ram[44] = "0b10111110001010111110011010110001";
        ram[45] = "0b10111110010000000111010010011101";
        ram[46] = "0b10111101111000000110110001010101";
        ram[47] = "0b10111101100110011111010010001111";
        ram[48] = "0b10111101100110101100011101001110";
        ram[49] = "0b00111101100101110101101110110000";
        ram[50] = "0b10111011010111101011001110000101";
        ram[51] = "0b10111101100010110111000100011100";
        ram[52] = "0b00111101011011100101001111010111";
        ram[53] = "0b00111101100011100011100110010000";
        ram[54] = "0b10111101001101010101011000101000";
        ram[55] = "0b00111101110000100011000100010101";
        ram[56] = "0b10111110000010100011111001111110";
        ram[57] = "0b10111101101010110100110101111001";
        ram[58] = "0b10111100001001001001001110100011";
        ram[59] = "0b10111011100011110001101110111010";
        ram[60] = "0b00111101101001010000101100110010";
        ram[61] = "0b00111101100011000100100110011111";
        ram[62] = "0b00111101000101000101000100010111";
        ram[63] = "0b00111100001101110110000000001011";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid0M) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid0M_ram* meminst;


SC_CTOR(conv_2_conv_2_weid0M) {
meminst = new conv_2_conv_2_weid0M_ram("conv_2_conv_2_weid0M_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid0M() {
    delete meminst;
}


};//endmodule
#endif
