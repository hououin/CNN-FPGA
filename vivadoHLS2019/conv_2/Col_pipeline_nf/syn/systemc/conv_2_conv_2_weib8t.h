// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weib8t_H__
#define __conv_2_conv_2_weib8t_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weib8t_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weib8t_ram) {
        ram[0] = "0b00111101011011001011010101001000";
        ram[1] = "0b10111101001100111011111111110101";
        ram[2] = "0b00111101000110101101100010011011";
        ram[3] = "0b00111101010001101110000111110000";
        ram[4] = "0b00111101000100001101011100010111";
        ram[5] = "0b00111011101000010001111100011011";
        ram[6] = "0b10111100011100001000100101110111";
        ram[7] = "0b10111101010100000100100000001111";
        ram[8] = "0b00111101001010101111000011000001";
        ram[9] = "0b00111100110000100000010001000111";
        ram[10] = "0b00111011011101001111011110101000";
        ram[11] = "0b10111110000111110111101100011110";
        ram[12] = "0b00111100101101001000110110011110";
        ram[13] = "0b00111100000111010100100011000101";
        ram[14] = "0b10111101000110011000011001111101";
        ram[15] = "0b10111101010011000110001101111001";
        ram[16] = "0b10111100111100011001101011010001";
        ram[17] = "0b00111101011110001110110000000011";
        ram[18] = "0b00111101010111101100101000011000";
        ram[19] = "0b00111100001100110111001001010100";
        ram[20] = "0b10111101101001100001101100101010";
        ram[21] = "0b10111110011111111000110001111110";
        ram[22] = "0b00111110000000001110011011011010";
        ram[23] = "0b10111101111100010001010001100101";
        ram[24] = "0b10111101101010000000000111000100";
        ram[25] = "0b10111101100111110111111111000100";
        ram[26] = "0b00111101000011000000100101000001";
        ram[27] = "0b10111110100010010101011101000010";
        ram[28] = "0b00111101000001110010110100110011";
        ram[29] = "0b00111101001111000111010000100000";
        ram[30] = "0b10111110010001001111110010111111";
        ram[31] = "0b00111100101001111101110110010001";
        ram[32] = "0b10111110001110100011100100000011";
        ram[33] = "0b00111110001110101100111111100110";
        ram[34] = "0b00111101100011011011101110100000";
        ram[35] = "0b10111100110111100101011010110110";
        ram[36] = "0b00111101010111110110111001111100";
        ram[37] = "0b00111101110100000000100000001101";
        ram[38] = "0b10111110001011100011010101010001";
        ram[39] = "0b00111101101100110010100110000110";
        ram[40] = "0b10111101110011101111101111111101";
        ram[41] = "0b00111100000111000011011100101000";
        ram[42] = "0b00111101101010111011010100100011";
        ram[43] = "0b10111101001001001100110111111000";
        ram[44] = "0b10111110001000011111100011111100";
        ram[45] = "0b10111101110001101110100111111100";
        ram[46] = "0b10111110011100011011010011010001";
        ram[47] = "0b10111110011100001100110101100011";
        ram[48] = "0b10111101100001100010000010100010";
        ram[49] = "0b10111110000011100011000110000100";
        ram[50] = "0b10111110001111011101100011100110";
        ram[51] = "0b00111100100000010011100011101001";
        ram[52] = "0b00111100100011011101100100101001";
        ram[53] = "0b10111110010101000111101111100100";
        ram[54] = "0b00111101010111010101101001001011";
        ram[55] = "0b00111101010100111000111100011010";
        ram[56] = "0b10111101011011011001011011010101";
        ram[57] = "0b00111100101100100111001011110011";
        ram[58] = "0b10111101010001110101010011111011";
        ram[59] = "0b00111101110100010010100110101101";
        ram[60] = "0b10111110010100011010100100000111";
        ram[61] = "0b00111101010010000010100111000110";
        ram[62] = "0b00111101010110110111111010000101";
        ram[63] = "0b00111101110000100001111110011000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weib8t) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weib8t_ram* meminst;


SC_CTOR(conv_2_conv_2_weib8t) {
meminst = new conv_2_conv_2_weib8t_ram("conv_2_conv_2_weib8t_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weib8t() {
    delete meminst;
}


};//endmodule
#endif
