// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weiyd2_H__
#define __conv_2_conv_2_weiyd2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weiyd2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weiyd2_ram) {
        ram[0] = "0b10111100100000100111001100001101";
        ram[1] = "0b10111101111110010010010110000110";
        ram[2] = "0b00111100001100101010011111010101";
        ram[3] = "0b10111100001110100011000111110101";
        ram[4] = "0b00111100000110000000111100101111";
        ram[5] = "0b00111100100100010100001111010000";
        ram[6] = "0b10111101101101100100101100000000";
        ram[7] = "0b10111101101000010000100100011011";
        ram[8] = "0b10111101011001001100011000101000";
        ram[9] = "0b10111101111011101101111111011011";
        ram[10] = "0b10111101110110001100011011111100";
        ram[11] = "0b00111101100000111100100011001110";
        ram[12] = "0b10111101011111010011110111010011";
        ram[13] = "0b10111110011100110001000011100111";
        ram[14] = "0b10111110010001010111000000010101";
        ram[15] = "0b10111101100010100011100000111000";
        ram[16] = "0b10111110010101010111101010101111";
        ram[17] = "0b10111101001001010100110001000011";
        ram[18] = "0b10111110001100101010010001110111";
        ram[19] = "0b00111101110011000000000000011111";
        ram[20] = "0b10111110001100100111010110100110";
        ram[21] = "0b10111110101110100001100010100111";
        ram[22] = "0b10111110010000001001101000111000";
        ram[23] = "0b10111101110010011000100001010010";
        ram[24] = "0b00111100010110010101000011101011";
        ram[25] = "0b00111110001010100111000011001111";
        ram[26] = "0b00111100001010000011001011000100";
        ram[27] = "0b00111101101011110011010010111000";
        ram[28] = "0b10111110001110011100110000000000";
        ram[29] = "0b00111110001001110101111111001110";
        ram[30] = "0b10111100101111100011001001001101";
        ram[31] = "0b10111110001000111011100111110110";
        ram[32] = "0b10111101110110000001101001101100";
        ram[33] = "0b10111110011101101111001001100000";
        ram[34] = "0b10111101101001110111011010011110";
        ram[35] = "0b00111110010001111100101100100000";
        ram[36] = "0b10111101011001100010001001101001";
        ram[37] = "0b00111101011001111111101111100101";
        ram[38] = "0b00111101100101101110000110011111";
        ram[39] = "0b00111101110001101110000100100010";
        ram[40] = "0b00111100110101110011000111100010";
        ram[41] = "0b00111101100010000111010110011010";
        ram[42] = "0b10111110000111100010010111010010";
        ram[43] = "0b00111110000010010010101101101100";
        ram[44] = "0b00111101101001101000100010011111";
        ram[45] = "0b10111101101010101110110101101100";
        ram[46] = "0b10111101100010100010011001101010";
        ram[47] = "0b00111101110101100111001010010111";
        ram[48] = "0b00111101101011011010100111110000";
        ram[49] = "0b10111110011100001001111010001110";
        ram[50] = "0b10111101100100001111100111101011";
        ram[51] = "0b10111101001111100101000100001011";
        ram[52] = "0b10111110100001111010000011101100";
        ram[53] = "0b00111101110100011110000000100000";
        ram[54] = "0b10111100110110011001010011010100";
        ram[55] = "0b10111110000110111011111000100100";
        ram[56] = "0b10111110010101100001001101100110";
        ram[57] = "0b00111101100110110100100101111001";
        ram[58] = "0b10111101110010000001000010010011";
        ram[59] = "0b00111011110000011111110110011000";
        ram[60] = "0b10111100110100011001000101001110";
        ram[61] = "0b10111101001010110101010011000111";
        ram[62] = "0b00111101011101000000000101100100";
        ram[63] = "0b00111011111101111100001101011100";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weiyd2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weiyd2_ram* meminst;


SC_CTOR(conv_2_conv_2_weiyd2) {
meminst = new conv_2_conv_2_weiyd2_ram("conv_2_conv_2_weiyd2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weiyd2() {
    delete meminst;
}


};//endmodule
#endif
