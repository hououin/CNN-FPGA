// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weic8D_H__
#define __conv_2_conv_2_weic8D_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weic8D_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weic8D_ram) {
        ram[0] = "0b00111100010100100111101000110110";
        ram[1] = "0b10111101110000111010011000101100";
        ram[2] = "0b10111110101010011101010100101100";
        ram[3] = "0b10111110001010011101110100000110";
        ram[4] = "0b00111011111111111101001111001000";
        ram[5] = "0b00111110001010110001101011010011";
        ram[6] = "0b10111101111011110011011011100101";
        ram[7] = "0b00111100100001111000100111001011";
        ram[8] = "0b10111011100001001001000000000111";
        ram[9] = "0b10111101010011100100111001010011";
        ram[10] = "0b10111101000000000101101100101101";
        ram[11] = "0b00111110000001101100101110110101";
        ram[12] = "0b10111101100101111010110000000101";
        ram[13] = "0b00111100101100010111001110011100";
        ram[14] = "0b10111101101110000110110111110101";
        ram[15] = "0b10111101111110001101010011101100";
        ram[16] = "0b00111100101000010101101101111010";
        ram[17] = "0b00111001001011100111011101101000";
        ram[18] = "0b10111100010010111011000010100011";
        ram[19] = "0b00111011110011110000011000111011";
        ram[20] = "0b00111101000010010101111100010100";
        ram[21] = "0b00111100100110111111001100001101";
        ram[22] = "0b00111110000001000111001001110000";
        ram[23] = "0b10111101010101101110110100111000";
        ram[24] = "0b00111110001011011001110110011000";
        ram[25] = "0b10111101100010010001110110101101";
        ram[26] = "0b10111101100010111110001101001110";
        ram[27] = "0b00111101101111101010011100011010";
        ram[28] = "0b10111110000110001101110110110110";
        ram[29] = "0b10111101110010011101001100111111";
        ram[30] = "0b10111101000000000111010011100011";
        ram[31] = "0b10111110001010110111010011010001";
        ram[32] = "0b00111101000111000111111011111000";
        ram[33] = "0b10111110000000001101111000100100";
        ram[34] = "0b00111101101101111001001000100101";
        ram[35] = "0b10111110000011110110100111100001";
        ram[36] = "0b10111110001001101010001110101010";
        ram[37] = "0b00111100110001001011011100001110";
        ram[38] = "0b10111101000101101101110111010000";
        ram[39] = "0b10111101101110001011110101101011";
        ram[40] = "0b00111110011010111010010100110011";
        ram[41] = "0b00111101011100001100011100011100";
        ram[42] = "0b10111101001000101100110011110011";
        ram[43] = "0b10111101110100100011001110110011";
        ram[44] = "0b10111100000111000110100111110011";
        ram[45] = "0b00111110000111000100010100111101";
        ram[46] = "0b00111101101001010000110100100100";
        ram[47] = "0b10111101111010001110111100101011";
        ram[48] = "0b10111110011101001000110100110011";
        ram[49] = "0b10111110100011010111011011001010";
        ram[50] = "0b00111110000101001101101100110001";
        ram[51] = "0b10111110000011110111000100000100";
        ram[52] = "0b10111101111111010110010011100110";
        ram[53] = "0b00111101111110100111110010011011";
        ram[54] = "0b00111101101101011101000011111111";
        ram[55] = "0b10111110001110010010110100011110";
        ram[56] = "0b00111101100010111100010101010000";
        ram[57] = "0b10111101000010011101101010001000";
        ram[58] = "0b00111101101010011010100111100100";
        ram[59] = "0b00111100000100100101110011010010";
        ram[60] = "0b00111101101111010100000101111000";
        ram[61] = "0b00111100011101011010001010010110";
        ram[62] = "0b00111101110111000101100110100101";
        ram[63] = "0b10111011100010101101111101010000";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weic8D) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weic8D_ram* meminst;


SC_CTOR(conv_2_conv_2_weic8D) {
meminst = new conv_2_conv_2_weic8D_ram("conv_2_conv_2_weic8D_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weic8D() {
    delete meminst;
}


};//endmodule
#endif
