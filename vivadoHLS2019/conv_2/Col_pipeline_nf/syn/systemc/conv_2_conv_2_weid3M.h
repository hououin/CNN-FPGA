// ==============================================================
// Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
// Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
// ==============================================================
#ifndef __conv_2_conv_2_weid3M_H__
#define __conv_2_conv_2_weid3M_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct conv_2_conv_2_weid3M_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 64;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(conv_2_conv_2_weid3M_ram) {
        ram[0] = "0b10111110010010100011000110011100";
        ram[1] = "0b10111101111011000111110101011001";
        ram[2] = "0b00111110000001101011101101000001";
        ram[3] = "0b10111101101110001001001111101011";
        ram[4] = "0b10111110010100010000010101110001";
        ram[5] = "0b10111101101100110101110100100101";
        ram[6] = "0b10111010101100011111000100101000";
        ram[7] = "0b10111001101100010001110010000101";
        ram[8] = "0b00111110001011011011101101001100";
        ram[9] = "0b10111100011010100110111000001110";
        ram[10] = "0b10111110010111101110111011000000";
        ram[11] = "0b10111110100101110000101001000100";
        ram[12] = "0b00111101101001111010000110011100";
        ram[13] = "0b00111100100001000001000010011010";
        ram[14] = "0b00111110011000110111100011010000";
        ram[15] = "0b00111110000011111011100101111101";
        ram[16] = "0b10111101110101101100011110000100";
        ram[17] = "0b10111110001010000110110001001011";
        ram[18] = "0b00111101011100000111011000101001";
        ram[19] = "0b10111101010001010000111010011000";
        ram[20] = "0b10111101111000000001000110010110";
        ram[21] = "0b10111101101101100100100110010011";
        ram[22] = "0b10111101100010010000100000100000";
        ram[23] = "0b00111110100001101001101111001101";
        ram[24] = "0b00111110010111100000001111100000";
        ram[25] = "0b00111110001101001110111110101100";
        ram[26] = "0b10111110100000100110000101101010";
        ram[27] = "0b10111011111111010101010101110000";
        ram[28] = "0b00111110011111100000100000000110";
        ram[29] = "0b10111101100101011010011011101100";
        ram[30] = "0b00111101101010100000110110110100";
        ram[31] = "0b10111100111110011100101110111101";
        ram[32] = "0b10111110100110010110101000001011";
        ram[33] = "0b10111100100100010001010111010001";
        ram[34] = "0b10111110000001000000110000000001";
        ram[35] = "0b10111101000101011010011100101000";
        ram[36] = "0b00111101100011000110110110100000";
        ram[37] = "0b10111110101010111010100110111101";
        ram[38] = "0b00111101101001010011111001011100";
        ram[39] = "0b00111100010110110111001101101000";
        ram[40] = "0b10111110010011101100100010000101";
        ram[41] = "0b00111100111100010100000010110111";
        ram[42] = "0b10111110100011111000111101100010";
        ram[43] = "0b00111101000001100000110001101101";
        ram[44] = "0b10111101100111111010100001111100";
        ram[45] = "0b10111110000110001011000000100111";
        ram[46] = "0b00111011010001001101101111010110";
        ram[47] = "0b00111101001011110001100010010010";
        ram[48] = "0b10111101100101111011110111111110";
        ram[49] = "0b10111100110000010110010100000101";
        ram[50] = "0b00111101110111100100000001000011";
        ram[51] = "0b10111101100000001001000001000110";
        ram[52] = "0b10111100111101010010100000001000";
        ram[53] = "0b10111101100110110001010010001100";
        ram[54] = "0b00111101011111000001011011101100";
        ram[55] = "0b00111110100000101101110000100011";
        ram[56] = "0b00111011111100000111000101000111";
        ram[57] = "0b10111101100111110001000111001100";
        ram[58] = "0b10111110100001101110100111011011";
        ram[59] = "0b10111110010010101000010001010100";
        ram[60] = "0b00111110010001011011101100010100";
        ram[61] = "0b00111110100010111010101001000000";
        ram[62] = "0b10111110101001011011101001101101";
        ram[63] = "0b10111110100000100111010001101010";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(conv_2_conv_2_weid3M) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 64;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


conv_2_conv_2_weid3M_ram* meminst;


SC_CTOR(conv_2_conv_2_weid3M) {
meminst = new conv_2_conv_2_weid3M_ram("conv_2_conv_2_weid3M_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~conv_2_conv_2_weid3M() {
    delete meminst;
}


};//endmodule
#endif
