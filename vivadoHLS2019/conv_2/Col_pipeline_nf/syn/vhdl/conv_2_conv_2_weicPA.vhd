-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicPA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicPA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001110100011001011001110", 
    1 => "10111101101011010101010100010011", 
    2 => "10111101101101111000000001100010", 
    3 => "00111100110000010100001110101000", 
    4 => "00111101111010011110110011010001", 
    5 => "10111101001111010101111100001010", 
    6 => "10111101011101001010001001100000", 
    7 => "10111101011011001010110100001110", 
    8 => "10111101011001010010010110101100", 
    9 => "00111101011011111011011000101101", 
    10 => "10111110010010100110111001001100", 
    11 => "00111100100011010010101011011001", 
    12 => "10111101110000011100010111000100", 
    13 => "10111100111101000011011110011011", 
    14 => "10111011111000111111001111101101", 
    15 => "10111101100111101111101010011100", 
    16 => "00111101101101110100111110111100", 
    17 => "10111101001010111010100110111100", 
    18 => "10111100011001011001100110011001", 
    19 => "00111100101110100110101111011100", 
    20 => "10111110000010010100111111110000", 
    21 => "00111011010101110001000111111010", 
    22 => "00111011101011110101100000000001", 
    23 => "00111100101000101001110101101111", 
    24 => "10111100110010011011010100011011", 
    25 => "10111101101011001100000100011101", 
    26 => "00111101111011000011100110010000", 
    27 => "00111101011010001100011100100000", 
    28 => "10111110010001110110110110111101", 
    29 => "10111101010111110100101100100101", 
    30 => "10111101010011111000001010100011", 
    31 => "10111101101110100111001001110011", 
    32 => "00111011100000101111110000000111", 
    33 => "10111101111110010111001100100011", 
    34 => "00111101100100111000010101100011", 
    35 => "10111101001110010001110110110110", 
    36 => "10111101100010100111110001101011", 
    37 => "10111110000001000001100001000111", 
    38 => "10111101101010010010001001100000", 
    39 => "10111100100010110000000110110001", 
    40 => "00111110000010101001000101011001", 
    41 => "10111101111011001101101110000000", 
    42 => "00111110001010000100011110110101", 
    43 => "10111101100100011100011101111111", 
    44 => "00111101101010101011010101000100", 
    45 => "00111101011000011010011001011010", 
    46 => "00111100110101010101010100010110", 
    47 => "10111101100000111011110010000110", 
    48 => "00111101000010000101110001010100", 
    49 => "00111100101100000001011001100011", 
    50 => "00111101010010010110100100000110", 
    51 => "10111101101001011110000111001010", 
    52 => "10111100111011000001101011001110", 
    53 => "00111101010001101001111011010110", 
    54 => "00111110000010111100111101111010", 
    55 => "10111101100011101001111010010110", 
    56 => "10111101101011101110000101000110", 
    57 => "00111101101010001000011111001110", 
    58 => "00111101101010110011101111110100", 
    59 => "00111100111001000000101000101011", 
    60 => "10111101111000010110011110101011", 
    61 => "10111101110010010100111111011100", 
    62 => "00111101011100011010101001010110", 
    63 => "10111101011001000000000001100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicPA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicPA is
    component conv_2_conv_2_weicPA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicPA_rom_U :  component conv_2_conv_2_weicPA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


