-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic7D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic7D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010111100001101111011011", 
    1 => "10111110110010010000101000101010", 
    2 => "10111100101011110001100011101011", 
    3 => "10111110000010010100110010101001", 
    4 => "00111101111100101110000111100100", 
    5 => "00111110000110111110000000100100", 
    6 => "10111101000101001111001100011100", 
    7 => "00111011101001111010011111101010", 
    8 => "00111101101000101111001100001111", 
    9 => "00111100110100110010001110110001", 
    10 => "10111101110001111101011101000111", 
    11 => "10111010011110111111101110000001", 
    12 => "10111101101101010010000001110000", 
    13 => "10111101100000000110000000100110", 
    14 => "10111101101000011101011010001010", 
    15 => "00111100100110101000011001111101", 
    16 => "10111100101110110011110100001001", 
    17 => "00111110000101100101100001010110", 
    18 => "00111100011100000111101110101101", 
    19 => "00111101010010110110000011000001", 
    20 => "10111110011000110110110001000011", 
    21 => "10111101110011010110100011111101", 
    22 => "10111011110110110100110010110010", 
    23 => "00111101101111010111001001010111", 
    24 => "10111101000110100110111111001101", 
    25 => "10111101011111001010010010011010", 
    26 => "00111100111010101110100011011001", 
    27 => "10111101100111000111000101101111", 
    28 => "10111101001100110011100011110010", 
    29 => "10111110001011011111000111000000", 
    30 => "00111101000001111000000111000001", 
    31 => "10111110010001000100011000101100", 
    32 => "00111101101011011000111010111101", 
    33 => "00111101000011110110110001101011", 
    34 => "00111101100100011101000001001001", 
    35 => "10111101110001100011001111110101", 
    36 => "10111110100100000111111010001111", 
    37 => "10111110100110001011101101000101", 
    38 => "00111101101010000101111001001100", 
    39 => "10111010111000011100010110010110", 
    40 => "10111110100010010111011001101001", 
    41 => "10111101111111101011111001000100", 
    42 => "10111101000100010011010011011110", 
    43 => "10111101111010101100100001001010", 
    44 => "10111100011111001111001111111000", 
    45 => "00111101100010111011110010011101", 
    46 => "00111101001100011011111011100111", 
    47 => "00111110000011011101000000111101", 
    48 => "00111100011110011110111111101110", 
    49 => "00111101010001111111010011011111", 
    50 => "00111100100010010111001100010010", 
    51 => "10111101111001110100100101011111", 
    52 => "10111101110010001000010111011000", 
    53 => "10111110001001010010000001001100", 
    54 => "00111110000000100111100001101011", 
    55 => "00111110010011111001110111011011", 
    56 => "00111101001011101100100100010111", 
    57 => "00111101100011100010001001000001", 
    58 => "10111100110110011100011010010111", 
    59 => "00111110001100101111100001110100", 
    60 => "00111100101110100100111110011001", 
    61 => "00111100001100110000110010111111", 
    62 => "10111101110000110001101001111110", 
    63 => "10111101100111100010000100111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic7D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic7D is
    component conv_2_conv_2_weic7D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic7D_rom_U :  component conv_2_conv_2_weic7D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


