-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicIz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicIz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011111011101101001011", 
    1 => "10111100110100000111111000000101", 
    2 => "00111100011100010110101011100101", 
    3 => "00111101010011110010110001111101", 
    4 => "10111101000111100000101110010001", 
    5 => "00111101111101010010010111000100", 
    6 => "00111101010011110101001110010101", 
    7 => "00111100110001011111011100000100", 
    8 => "00111110000011111100001000001101", 
    9 => "00111101110011110111111111110110", 
    10 => "00111101001101110101100101011010", 
    11 => "10111101011100100011100000010000", 
    12 => "10111100110110111100000011101101", 
    13 => "10111101011010010111000001011110", 
    14 => "00111011100100001111111010100001", 
    15 => "00111100001001101010010001000101", 
    16 => "00111101001100000110101101001000", 
    17 => "00111100011110000010101111101101", 
    18 => "10111110000001011110101101101001", 
    19 => "00111101001101111101010011110010", 
    20 => "10111110001101110100100011101010", 
    21 => "10111101001110100111110111101010", 
    22 => "10111100001000100011101011111110", 
    23 => "10111110010111110011111000010000", 
    24 => "10111100100000100100101111111101", 
    25 => "00111101100011110101100011111010", 
    26 => "00111110001000100110011000001000", 
    27 => "10111110011000001001000001000101", 
    28 => "10111101000111010011010101011001", 
    29 => "00111101011101100110000010001011", 
    30 => "00111101001101100000110111010001", 
    31 => "00111100111110101101000011000010", 
    32 => "10111100111101010100110100111100", 
    33 => "10111101000110001101110011110000", 
    34 => "00111110000111000110100001101111", 
    35 => "00111101000010010111110111100100", 
    36 => "00111100101110101110111101100000", 
    37 => "10111101100010000111111010101000", 
    38 => "10111100110101111001101010011100", 
    39 => "00111011110100101111011100110110", 
    40 => "00111101001000001100111111110110", 
    41 => "00111100000111110110100000001110", 
    42 => "10111100011011001001001110111110", 
    43 => "00111101100010101011100001111000", 
    44 => "10111101010000101111010001101000", 
    45 => "00111110010000010110111101010101", 
    46 => "00111011111011110111010011110111", 
    47 => "10111101011100100110111011111011", 
    48 => "00111101100100011011111111111000", 
    49 => "00111101110111110110101111100010", 
    50 => "00111101111000111011110110001110", 
    51 => "10111101001011011111101010000010", 
    52 => "10111101101000100100000010010000", 
    53 => "10111101110011111100110110010010", 
    54 => "10111101110001111011111010110100", 
    55 => "00111101001000011101001111100010", 
    56 => "10111101101100110000000001011000", 
    57 => "10111101000111011101110101001111", 
    58 => "10111110001011000000010010000110", 
    59 => "10111100110101010100110100000111", 
    60 => "00111010010110000001101010011101", 
    61 => "00111100001101001000010010000100", 
    62 => "10111100111111010000001000101011", 
    63 => "10111100101001010001100101000010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicIz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicIz is
    component conv_2_conv_2_weicIz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicIz_rom_U :  component conv_2_conv_2_weicIz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


