-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidcE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidcE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110101101101100110110111", 
    1 => "00111110101010110010001111100110", 
    2 => "00111110010100101010000111000000", 
    3 => "10111110000101011000000111100100", 
    4 => "10111110001101001000000110111110", 
    5 => "10111100100010111110111011011110", 
    6 => "00111110001010001101101001111101", 
    7 => "10111110010011101100011000011110", 
    8 => "00111101111000000110000001111011", 
    9 => "10111101111010000111001001100011", 
    10 => "00111110100101101101011110010011", 
    11 => "10111110000111111110011010100011", 
    12 => "00111101011110000000111000111100", 
    13 => "00111110000010011001001011100101", 
    14 => "00111101100010101110101011000111", 
    15 => "10111101101011001101011010100111", 
    16 => "00111101000101000110111001101101", 
    17 => "10111101110001100100101101001111", 
    18 => "00111110011001110100101011001001", 
    19 => "10111101100010011011111010111000", 
    20 => "00111100100010101111111111001000", 
    21 => "00111101110101011001000001101010", 
    22 => "10111101100010101011011110001100", 
    23 => "00111110011110011100110101100111", 
    24 => "00111110011011101000110001101101", 
    25 => "00111110001001101101100101011010", 
    26 => "10111110010101010010010111110001", 
    27 => "10111101100110110001110110011111", 
    28 => "00111110010101110101100110011011", 
    29 => "00111100101100000010101100000011", 
    30 => "10111110100111010011111100010000", 
    31 => "10111110011100110000001110101000", 
    32 => "10111101100010011100111010011010", 
    33 => "10111110110101100111001101011001", 
    34 => "10111101111001111000001110111011", 
    35 => "10111101111001100111111100110011", 
    36 => "10111101100011010101101100101000", 
    37 => "00111101100111010101111111010011", 
    38 => "00111110011110110111010010111110", 
    39 => "00111110001100010000110001110100", 
    40 => "10111100100000011100011101100101", 
    41 => "10111011000100010111111101100011", 
    42 => "10111110111010011000101100000111", 
    43 => "10111110101100000110111000100000", 
    44 => "10111110011000100010000111110110", 
    45 => "10111101100100101010000100011000", 
    46 => "10111101001111000110001100011011", 
    47 => "10111101110101010001010001001001", 
    48 => "10111110101011001011010111110000", 
    49 => "10111110001011000110011001010100", 
    50 => "00111101000010011010110001000100", 
    51 => "00111110101010001010110000010110", 
    52 => "10111101010011110010100010111010", 
    53 => "00111110011101101110110011111100", 
    54 => "00111101110101111010001000010010", 
    55 => "10111110100110101100001010101110", 
    56 => "10111110000000101010101011100010", 
    57 => "10111110101110110001001011010111", 
    58 => "00111110000000010001000110001001", 
    59 => "10111110000111111000010010111000", 
    60 => "00111110001100010001100000101000", 
    61 => "00111110100000011001101111111100", 
    62 => "10111100010011101110011001110110", 
    63 => "00111101101110111110101110101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidcE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidcE is
    component conv_2_conv_2_weidcE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidcE_rom_U :  component conv_2_conv_2_weidcE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


