-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibtn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibtn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100000011010001110010", 
    1 => "00111100101111100000111100010000", 
    2 => "10111110001100100001111100111110", 
    3 => "10111101010010011000001101110100", 
    4 => "00111101111101110110000000001101", 
    5 => "10111101110111001101000010010000", 
    6 => "10111110000001111111111111001110", 
    7 => "00111110011000100011111110011110", 
    8 => "10111110000000101001100000111001", 
    9 => "00111100100101110010000011101111", 
    10 => "10111110000101101110011100011000", 
    11 => "00111100000101101110110100000000", 
    12 => "10111101111001000101001110000101", 
    13 => "10111101110110111000111111111011", 
    14 => "10111100010011000001011101011000", 
    15 => "10111101010110111010111001100000", 
    16 => "10111011001111110111000000101001", 
    17 => "10111110000010001100010000101001", 
    18 => "10111101111010101011110010110110", 
    19 => "00111110000010111011010101100010", 
    20 => "10111110111010101010000100111010", 
    21 => "10111101110010110110101111110010", 
    22 => "10111110001000110001101110001011", 
    23 => "10111110100101000000110101101110", 
    24 => "10111101110001110100110011110110", 
    25 => "10111110001101110101001001101000", 
    26 => "10111101000000111001010011101111", 
    27 => "10111101000001100100011001011001", 
    28 => "10111011001111011011000101111011", 
    29 => "00111110011111001100100010000001", 
    30 => "00111101101110010101011110111001", 
    31 => "00111110000110010000010101110011", 
    32 => "10111101010110110101101001101100", 
    33 => "10111110100100000000100001001001", 
    34 => "10111110000011010000010110110101", 
    35 => "00111101100110000110110111101000", 
    36 => "10111110010101101100100010000011", 
    37 => "00111101000010100011000100010101", 
    38 => "00111110010101101011110100011101", 
    39 => "00111110101000001001000000110011", 
    40 => "10111110101101110001010110111010", 
    41 => "10111110000100001010111101011100", 
    42 => "10111101101001111101011011000101", 
    43 => "10111110000001010000011110011100", 
    44 => "00111110010010001001101010111100", 
    45 => "10111110110101000010010010111101", 
    46 => "10111110100000001100001001100010", 
    47 => "10111100101010001111001101010001", 
    48 => "00111110001101111010010111010010", 
    49 => "10111100101110001101011101001111", 
    50 => "10111110010101010101101001100110", 
    51 => "00111110010001011000110111100010", 
    52 => "00111101001101001000101100100001", 
    53 => "10111110111010000110111011001100", 
    54 => "00111101110000011001011010100010", 
    55 => "10111110000001010111111100000101", 
    56 => "10111101101001110111111001110110", 
    57 => "00111110000011000010001010001001", 
    58 => "10111110001100101100100000111000", 
    59 => "00111110000011010100011010010111", 
    60 => "10111101101010101001000111011010", 
    61 => "00111101100111111010011011110011", 
    62 => "00111101110110010101100111110100", 
    63 => "00111110100010001001101101010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibtn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibtn is
    component conv_2_conv_2_weibtn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibtn_rom_U :  component conv_2_conv_2_weibtn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


