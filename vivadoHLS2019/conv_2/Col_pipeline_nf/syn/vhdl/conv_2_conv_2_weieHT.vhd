-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieHT_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieHT_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110100100111001111111010011", 
    1 => "10111101010101110001111011010111", 
    2 => "10111101110011001110101011101010", 
    3 => "00111110100001001010011000000101", 
    4 => "10111110001011011001100001001111", 
    5 => "00111101100011111010000111001101", 
    6 => "00111101011101010100101100101110", 
    7 => "00111110011100011000111110110110", 
    8 => "00111110001110001100110011111001", 
    9 => "00111101010101100101101000100001", 
    10 => "10111101110000010001000011100110", 
    11 => "10111101101110100111100001110100", 
    12 => "00111101011100111111000010001010", 
    13 => "00111101111001111011011000000000", 
    14 => "00111110011101101111110101101001", 
    15 => "00111110011100001100101001000110", 
    16 => "10111011111100001101011001110101", 
    17 => "00111110101010110101000101011001", 
    18 => "00111101111001101010000010111111", 
    19 => "10111101111111100010100001011000", 
    20 => "10111101110100010101011101010100", 
    21 => "10111110001010010011100001010101", 
    22 => "10111101100001011100010000011011", 
    23 => "10111110000001011011110001000100", 
    24 => "00111101001100101011000110010001", 
    25 => "00111101110000001011001011010010", 
    26 => "00111101010101100011001110100100", 
    27 => "00111110100000000010110001011000", 
    28 => "00111101111001100111000000100111", 
    29 => "10111110100010111000000010101000", 
    30 => "00111110001001100110111000101101", 
    31 => "00111101100001000000010000111101", 
    32 => "00111110101101000111110110000111", 
    33 => "00111110001111110101000010010000", 
    34 => "00111110010011011111101000100001", 
    35 => "10111110010110011000010100111010", 
    36 => "10111111000011110100101111100000", 
    37 => "00111110100100100110101110011010", 
    38 => "10111101110110010111011001111101", 
    39 => "00111110011101001010110100101110", 
    40 => "10111110000101001010011110001111", 
    41 => "00111110001010111000111111010100", 
    42 => "10111100101100001100001100100011", 
    43 => "00111101110001111111100110010011", 
    44 => "00111101110010000010001100101100", 
    45 => "10111110100010110110011010100011", 
    46 => "00111110001011101001111010111101", 
    47 => "00111101111011011111110101001001", 
    48 => "10111101000111101101100110000011", 
    49 => "00111110110001000000000001010001", 
    50 => "00111110000001100011101111010110", 
    51 => "10111110000001000111011000000101", 
    52 => "00111100110100000101111111011000", 
    53 => "10111101111110010011011111000000", 
    54 => "10111110100111101000000110001101", 
    55 => "10111110011000110010101100010001", 
    56 => "00111110000100100110011011000100", 
    57 => "10111110100011111001000000100100", 
    58 => "10111110011110010000100100101111", 
    59 => "10111100110001011011110111000100", 
    60 => "10111110000001111011011011100000", 
    61 => "10111110100011101011101011110010", 
    62 => "00111110000110010010011111001010", 
    63 => "00111110001101101000111011010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieHT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieHT is
    component conv_2_conv_2_weieHT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieHT_rom_U :  component conv_2_conv_2_weieHT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


