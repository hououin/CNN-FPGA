-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicJz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicJz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111000101000011011001001", 
    1 => "00111110010100111010111001001110", 
    2 => "00111101000001001111010111010111", 
    3 => "10111100111111000000111101110100", 
    4 => "00111101100100010000111101101001", 
    5 => "00111100111110001011111110001010", 
    6 => "00111101000001000111010100001001", 
    7 => "10111101101011011010111111100111", 
    8 => "00111101100110000101010001000011", 
    9 => "10111101011101001010111110101010", 
    10 => "00111110001110110000101011110111", 
    11 => "00111101000011000100101110010110", 
    12 => "00111110000100101101001010011111", 
    13 => "00111101100000101000000001100111", 
    14 => "10111100011100010011000000101100", 
    15 => "10111100110010111101011011111111", 
    16 => "10111101100001101100111111001100", 
    17 => "00111101010101011000101000001101", 
    18 => "00111100111110000000010011111000", 
    19 => "10111101011011110111110110011111", 
    20 => "00111100101100011000111110110010", 
    21 => "00111101101100110011011100100101", 
    22 => "00111100101111101010110100011001", 
    23 => "00111101101001010101000111110110", 
    24 => "10111101011000110101111110001011", 
    25 => "10111100101000101001000010011001", 
    26 => "10111101011000001101101100010001", 
    27 => "10111110000000101000001011100110", 
    28 => "00111101010110110010101101001111", 
    29 => "10111101101101110110101110000101", 
    30 => "00111101100010110010011000000101", 
    31 => "00111101001101110111101000000101", 
    32 => "00111101001101001010001101001100", 
    33 => "10111101000000111010011000111101", 
    34 => "00111101000111000110001010100100", 
    35 => "10111110010111100101100011011101", 
    36 => "10111100000110000000011011000000", 
    37 => "00111101100000100001100001110000", 
    38 => "00111110011100110011111010100011", 
    39 => "10111010111110001111011110110010", 
    40 => "10111101010101001001110011111111", 
    41 => "10111100110111110000000100011001", 
    42 => "00111011110010110110001000100110", 
    43 => "10111110010001000101010011001011", 
    44 => "00111101111101111110001111011011", 
    45 => "00111101110011011101010011110111", 
    46 => "00111110001011101000001011101100", 
    47 => "00111101001101010101001001100001", 
    48 => "00111110010100110011100001000011", 
    49 => "10111110100000010010011011111100", 
    50 => "00111110000001100000010101000101", 
    51 => "00111101101101011001000110010001", 
    52 => "10111101011100111101001100101110", 
    53 => "00111101010101011100000010000011", 
    54 => "10111101011110001001111011000010", 
    55 => "10111100010001110101110110111001", 
    56 => "10111110010100011101111001110111", 
    57 => "10111101100000010111000111001111", 
    58 => "00111110001001001100110111010011", 
    59 => "10111101101011011100001101000101", 
    60 => "00111101110101001111000001111110", 
    61 => "10111110001100000110010100100101", 
    62 => "10111101010001011001010011011001", 
    63 => "10111101100000010101111100101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicJz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicJz is
    component conv_2_conv_2_weicJz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicJz_rom_U :  component conv_2_conv_2_weicJz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


