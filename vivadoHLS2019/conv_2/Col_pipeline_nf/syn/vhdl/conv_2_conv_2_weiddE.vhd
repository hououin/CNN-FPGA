-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiddE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiddE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111111000101011110111", 
    1 => "10111110011111001010011010101000", 
    2 => "10111110011000010100000011101000", 
    3 => "10111110000011111100100100010010", 
    4 => "00111101100110010100011111110100", 
    5 => "00111101010101011111101100000111", 
    6 => "10111101111001110110100011100110", 
    7 => "10111101101100111011100011110000", 
    8 => "10111100001000101000100100110001", 
    9 => "10111101000101010110011111001001", 
    10 => "10111110000011011111111011100101", 
    11 => "00111101001000010111010101100011", 
    12 => "00111100101101111111010100111010", 
    13 => "00111110000011100011011011101010", 
    14 => "10111100011101000010010001101000", 
    15 => "10111100101100100110000010011000", 
    16 => "00111101010100010000011100000110", 
    17 => "00111101010101000100001110000011", 
    18 => "10111100101111111011110011001010", 
    19 => "00111101010101011011100000001111", 
    20 => "10111100110111100010011001010011", 
    21 => "00111101111010100011100000100101", 
    22 => "10111100100000110101001011111111", 
    23 => "00111101010111101011010011100011", 
    24 => "00111101100010001011100100000101", 
    25 => "10111101100110111101011100110000", 
    26 => "10111101010101100000010110000010", 
    27 => "10111101111110011000011010001001", 
    28 => "10111101001100000111001110011110", 
    29 => "10111101000010110111000010000000", 
    30 => "10111101100001011010001011100001", 
    31 => "10111101110010111000110000101011", 
    32 => "00111101111000101001111011010011", 
    33 => "10111110000011000100110010101101", 
    34 => "00111100101001010010001110101000", 
    35 => "10111101100100101001000011111110", 
    36 => "10111110010100101110110101010101", 
    37 => "10111101111001101100011001001101", 
    38 => "10111100000100000000110100011001", 
    39 => "10111101000100011011001110011001", 
    40 => "00111011101101000100110110110001", 
    41 => "10111101100000101100011101001001", 
    42 => "00111101000011111111111011000011", 
    43 => "00111100101101100111111000111110", 
    44 => "00111101110000100110110011010110", 
    45 => "00111101001111001111110010100111", 
    46 => "00111100000010110000101000011001", 
    47 => "00111101001000001110011101010110", 
    48 => "00111101001101101111010001111100", 
    49 => "10111110010011100001111001110011", 
    50 => "10111100110100010110111000110110", 
    51 => "10111101011001000111101011111111", 
    52 => "10111101100011000011101011011100", 
    53 => "00111101110100010001110100001110", 
    54 => "00111101111011111101110101101000", 
    55 => "10111101110100001000101001100110", 
    56 => "10111101010001011111000010000100", 
    57 => "00111110000001001011100001100100", 
    58 => "00111110001011001100100010101110", 
    59 => "00111101001100100000001000011110", 
    60 => "00111100011100011110111000100101", 
    61 => "00111101000110100100010001011000", 
    62 => "10111101100011000011000011001010", 
    63 => "10111101010010110111001111101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiddE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiddE is
    component conv_2_conv_2_weiddE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiddE_rom_U :  component conv_2_conv_2_weiddE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


