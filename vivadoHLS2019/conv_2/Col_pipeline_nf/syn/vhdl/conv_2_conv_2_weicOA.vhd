-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicOA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicOA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100000101110101010011101", 
    1 => "10111110101000010001001111101011", 
    2 => "00111011110100000001110111100111", 
    3 => "10111101101011101101011111101111", 
    4 => "10111110011000011111111001010100", 
    5 => "00111110000010010110100010111101", 
    6 => "10111110100110110011111010011011", 
    7 => "10111101110100010110010111110100", 
    8 => "10111110010110111010110010010100", 
    9 => "10111101101111100001001010000100", 
    10 => "00111010101011110111011001000111", 
    11 => "00111110001010011011100110101010", 
    12 => "10111110001100101011110001101001", 
    13 => "10111110001001001001000110001111", 
    14 => "10111110000110000101101101011001", 
    15 => "10111110010111010101101011000000", 
    16 => "00111100100101111011000001001101", 
    17 => "10111100101111110100000110010100", 
    18 => "00111100001000100011111111010000", 
    19 => "10111110100010100000110010010111", 
    20 => "10111101011111010100011011001000", 
    21 => "10111110110110100000001011100001", 
    22 => "10111101011111011100001100001000", 
    23 => "10111110011101001000110001100100", 
    24 => "10111110100101100001011011011110", 
    25 => "10111110001001010010011011000001", 
    26 => "00111100010000111110100100110011", 
    27 => "00111110000111100100010101110001", 
    28 => "10111101110101100101000011010001", 
    29 => "10111101010000100001010011010011", 
    30 => "00111110011001111101001111010010", 
    31 => "10111110001100001001010111011011", 
    32 => "00111110001001001011100101011111", 
    33 => "00111110000001000001111000000000", 
    34 => "00111101001111101110111110110000", 
    35 => "10111110000101100000001110011001", 
    36 => "10111101111010110011110010111110", 
    37 => "10111110001001001010000111101001", 
    38 => "10111110010010111111111000011011", 
    39 => "10111110000111101101100101000111", 
    40 => "10111110111100001111101001000000", 
    41 => "10111101101101000100101110101111", 
    42 => "10111110101011001110111101110010", 
    43 => "10111100111101011010110010001111", 
    44 => "10111101001110011111011110010100", 
    45 => "00111110010010100010111101010001", 
    46 => "10111101100111100001101010101011", 
    47 => "00111101111000100100011101010011", 
    48 => "10111110001111010010111100111110", 
    49 => "00111101101011110101111111001100", 
    50 => "10111101001011011100110111110111", 
    51 => "10111101111100110000001101111001", 
    52 => "10111110001100111110110101110001", 
    53 => "10111110101010010001001110101001", 
    54 => "10111101100101101010010101100010", 
    55 => "00111100101100110010101011110100", 
    56 => "00111101101111000000111001101110", 
    57 => "00111101110001010101000000110100", 
    58 => "10111110100011001101110001011000", 
    59 => "00111101111101011100110000101011", 
    60 => "00111101001100001111100100111001", 
    61 => "10111110000000001000000010001110", 
    62 => "10111110000101110001010001101111", 
    63 => "10111101110100010011100000111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicOA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicOA is
    component conv_2_conv_2_weicOA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicOA_rom_U :  component conv_2_conv_2_weicOA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


