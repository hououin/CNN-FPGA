-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibom_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibom_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110011010011100110100", 
    1 => "10111101100101111000101010100101", 
    2 => "10111100101110110000100011111011", 
    3 => "10111101001000101101101110100101", 
    4 => "10111110000100001110001000011101", 
    5 => "10111101100111101000010110101010", 
    6 => "10111101101110010010101011001101", 
    7 => "00111100100000101010001101110001", 
    8 => "10111110010111110100001010011011", 
    9 => "00111101000001100010000001111100", 
    10 => "00111101101110100001101111110110", 
    11 => "10111101011001000000111001011001", 
    12 => "10111110001000011101000000110101", 
    13 => "10111100000000110001011111000001", 
    14 => "10111101011100101011000110000000", 
    15 => "10111101100000010011110010000100", 
    16 => "10111110100001100000111111101111", 
    17 => "10111101100111000000111111111111", 
    18 => "10111110010110001110100010101110", 
    19 => "10111110000101000110001011110001", 
    20 => "00111110100011000001011000101011", 
    21 => "00111101011100101101101000110100", 
    22 => "10111110001110001001001001011110", 
    23 => "10111110111011011000111011001101", 
    24 => "10111110010010001011101100001001", 
    25 => "10111101000110011110110110111001", 
    26 => "10111100001010101111011000010001", 
    27 => "00111101001101000111111011000101", 
    28 => "00111101110110001011110000001101", 
    29 => "00111101111110011101101101101111", 
    30 => "10111110010101000111011001110011", 
    31 => "00111100111011011001111011011000", 
    32 => "10111100000100110101001000001100", 
    33 => "00111110011010101010001110110111", 
    34 => "00111101111001101101110001110101", 
    35 => "00111101011000011000000101000110", 
    36 => "00111101011001111101010010000011", 
    37 => "00111101010111110010100001100000", 
    38 => "10111110000111001111110000111000", 
    39 => "10111110101000011100111001111101", 
    40 => "10111110001110100001101100101100", 
    41 => "00111100101110100001101100000011", 
    42 => "10111110101001010101101110101110", 
    43 => "10111100001011001010101001000101", 
    44 => "10111110010010001000100100001010", 
    45 => "10111100110000111100111111000111", 
    46 => "10111110000010101001100011110100", 
    47 => "10111100101110000011111010110110", 
    48 => "00111101100110011100100111011010", 
    49 => "00111110001100000010010001010000", 
    50 => "10111110011110101101011110110100", 
    51 => "10111101100110011000101000100010", 
    52 => "00111101100011010000101011011111", 
    53 => "10111101100001111010000001010100", 
    54 => "00111100110011101111100000000000", 
    55 => "10111101101110101100000111111010", 
    56 => "00111101010111111001100011100100", 
    57 => "10111110011011100010110011110111", 
    58 => "10111101111001110011011010010001", 
    59 => "10111101111111010000011011000111", 
    60 => "00111101100001010100000011011101", 
    61 => "10111100010111001010010011000001", 
    62 => "10111110000011011011100010110101", 
    63 => "10111110011000111111000011011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibom is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibom is
    component conv_2_conv_2_weibom_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibom_rom_U :  component conv_2_conv_2_weibom_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


