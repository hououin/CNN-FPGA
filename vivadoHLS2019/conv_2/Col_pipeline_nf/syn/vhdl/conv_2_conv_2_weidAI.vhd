-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidAI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidAI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101110100101110001011101", 
    1 => "00111110001101010010110110001010", 
    2 => "00111101111100100111000000010000", 
    3 => "00111101110010011001100110111111", 
    4 => "00111100010100101100010100011001", 
    5 => "10111110001110011011100011011010", 
    6 => "10111110010111000110010100010010", 
    7 => "00111101100011011011010110010010", 
    8 => "00111011111011111111001011011100", 
    9 => "10111110001100111111011111101101", 
    10 => "10111110001110110000100111001000", 
    11 => "10111110011000111101111011000011", 
    12 => "10111110011110000001110111001000", 
    13 => "00111101111100011011101101100001", 
    14 => "00111101001001110111110101111010", 
    15 => "10111101010010011111101000011000", 
    16 => "00111101111001010000010000011010", 
    17 => "10111110010110111100010101001101", 
    18 => "00111110000001011010111011010110", 
    19 => "00111101100001101111010101010100", 
    20 => "10111101001000000101011000111011", 
    21 => "10111110001011000110001000001101", 
    22 => "00111101101010000000000100100011", 
    23 => "10111110101111000011000101010100", 
    24 => "10111101001000010110111011011010", 
    25 => "10111101001101001011010011100000", 
    26 => "10111110000000001111110000100010", 
    27 => "10111101111001010101110011000100", 
    28 => "10111101010010001111111001000001", 
    29 => "00111101110011010011011000110111", 
    30 => "10111101000111111100111001011000", 
    31 => "00111100001101101100101001001000", 
    32 => "10111110101000110110110100111000", 
    33 => "00111011000010010011000101000100", 
    34 => "10111110010100001010100011100101", 
    35 => "00111101000110001011011000000110", 
    36 => "00111110000001011011000001010110", 
    37 => "10111110010000000010000111000001", 
    38 => "00111101100101110100011000101110", 
    39 => "10111100000110010000100000101111", 
    40 => "10111101111111100010001100110000", 
    41 => "10111101100111111100110001111101", 
    42 => "10111101101001110000000011100010", 
    43 => "00111100101100101100011100101110", 
    44 => "00111110000100111010001111011000", 
    45 => "10111110100101011110010001100001", 
    46 => "10111101110010011100101111110000", 
    47 => "10111110000111010100011011101010", 
    48 => "00111110011011110100100101101000", 
    49 => "10111100111000110010011100001111", 
    50 => "10111110010111010010100011001111", 
    51 => "10111110000111000110010001110100", 
    52 => "00111110001000100100000100110101", 
    53 => "10111110100000111101011111000011", 
    54 => "00111110000001100001011111011011", 
    55 => "00111101100101010110110111110011", 
    56 => "00111101100000010010011110111101", 
    57 => "00111101001100011100100001001001", 
    58 => "00111100100001110101010000110110", 
    59 => "00111101101101111101111001001000", 
    60 => "10111100100000011110111000100110", 
    61 => "10111101110001011011011101011101", 
    62 => "10111101110110101011111000110000", 
    63 => "10111101101101011101111101101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidAI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidAI is
    component conv_2_conv_2_weidAI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidAI_rom_U :  component conv_2_conv_2_weidAI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


