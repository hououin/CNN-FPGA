-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicjv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicjv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000011011010000010000101", 
    1 => "10111101100010000001010010010000", 
    2 => "10111101010011000011011000011000", 
    3 => "10111101001111000100010000001010", 
    4 => "00111110000001110011001010011111", 
    5 => "00111100111011101101011110010011", 
    6 => "10111100111110011110000101101110", 
    7 => "10111101100100000010100110100010", 
    8 => "10111101110000110000110010001010", 
    9 => "10111101101011101000000001110110", 
    10 => "10111101010011110010000010101010", 
    11 => "10111110000101110010000000010111", 
    12 => "00111101010000101101111100110101", 
    13 => "00111100101100101001001010100110", 
    14 => "00111101001101000100010111010011", 
    15 => "10111101001010100101111010001110", 
    16 => "00111100000111100000101000111011", 
    17 => "00111101101100011010011100100010", 
    18 => "10111100101000100000100001111110", 
    19 => "00111100101001111100111011011111", 
    20 => "10111101110101000010001110110110", 
    21 => "10111100101000110001111111001010", 
    22 => "00111100111101100111000001001000", 
    23 => "10111101011101011001100010011001", 
    24 => "00111011000111111010100000101000", 
    25 => "10111101110101110101110111110011", 
    26 => "10111100011101100010110010110110", 
    27 => "00111101000000101110111100101011", 
    28 => "10111101001110111111111100010001", 
    29 => "10111101111010000010000011100011", 
    30 => "10111100100001100100111001111110", 
    31 => "00111101101001011011110110001101", 
    32 => "00111100100110010100101001111101", 
    33 => "10111101100111011101101100010100", 
    34 => "00111101101110100110101010011011", 
    35 => "10111101110011011001000100101111", 
    36 => "10111101101110111011110111111010", 
    37 => "10111110100001111110101100111001", 
    38 => "10111101100110100111001000100011", 
    39 => "10111010110001010000010101110000", 
    40 => "10111011110001101100101101110110", 
    41 => "00111010110101111010011111100101", 
    42 => "00111101110101011001001000101000", 
    43 => "10111101011010110010110010101100", 
    44 => "10111101100100011111011001011000", 
    45 => "10111100101000000001100001011110", 
    46 => "10111101101001100011000000101010", 
    47 => "10111010111001101100101000001011", 
    48 => "00111101001111110100011100010001", 
    49 => "10111011000101010101001100110110", 
    50 => "00111101001101100000011110000111", 
    51 => "10111100001010111101100011010111", 
    52 => "00111100010100111010110000010110", 
    53 => "00111101001100000011101011000100", 
    54 => "10111110001011110110010100001111", 
    55 => "10111100101111001110111100010111", 
    56 => "00111101100001001001111010100100", 
    57 => "00111101000011001111010010100011", 
    58 => "10111101101001100000000101010000", 
    59 => "10111011100001011010000000000010", 
    60 => "00111101001100101100100000100101", 
    61 => "10111101101101110001101110011001", 
    62 => "10111100110101111000010110010001", 
    63 => "00111100000001110101101100100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicjv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicjv is
    component conv_2_conv_2_weicjv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicjv_rom_U :  component conv_2_conv_2_weicjv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


