-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibLp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibLp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101111011110010011111", 
    1 => "00111001100111000011001011001111", 
    2 => "00111110010000101001100000000001", 
    3 => "10111101100110010000101001011111", 
    4 => "10111101110101100111011000101001", 
    5 => "00111011101011111111010101110110", 
    6 => "10111101100111111011111101010101", 
    7 => "00111011100101100111001000111001", 
    8 => "00111110000010101100000001111011", 
    9 => "10111101000101000000000111010010", 
    10 => "00111100110011001011001001011110", 
    11 => "10111101110010000011101100100110", 
    12 => "10111100100111000100101100000011", 
    13 => "10111101101111000111011001010100", 
    14 => "10111100100001010101010100111100", 
    15 => "00111110001000010010000011001100", 
    16 => "00111101100001000110011010110110", 
    17 => "00111101100001101000111010001010", 
    18 => "10111101101010110011100010000010", 
    19 => "00111100100110100100010001011000", 
    20 => "10111110011011010010100001111101", 
    21 => "10111110010011111010010111010100", 
    22 => "00111101100010111100001101111010", 
    23 => "10111101111000001100110010010011", 
    24 => "00111101011011100011010011111110", 
    25 => "00111010111010100000110010101110", 
    26 => "00111100000111011001010111110111", 
    27 => "10111110100011001011111111010001", 
    28 => "10111110000001111100010001101110", 
    29 => "00111101101111000101011010101011", 
    30 => "10111110000000100011110010011000", 
    31 => "10111100110000101001011111010101", 
    32 => "10111110000001110011101101000000", 
    33 => "00111101110100100000001000000101", 
    34 => "00111101000101110100111011111111", 
    35 => "00111101010000001111110001000001", 
    36 => "00111110000001000000000001010010", 
    37 => "00111101110001001100010101101111", 
    38 => "10111101111100001001101110010101", 
    39 => "00111101111001010001100000011101", 
    40 => "00111101100101100110101100101111", 
    41 => "00111101101010000111110000010101", 
    42 => "00111101010101111110101100111111", 
    43 => "00111101110101111010100100111010", 
    44 => "10111101100000100101010010111111", 
    45 => "00111101001000011111111000001000", 
    46 => "10111110000111101101011011011010", 
    47 => "10111101110001010010001001100100", 
    48 => "10111100000111100001010100100110", 
    49 => "10111110001011110100010111010001", 
    50 => "10111101100011101001100010110110", 
    51 => "10111100100000001010001010101011", 
    52 => "10111101011011001001010010100001", 
    53 => "10111110101101100100011101111100", 
    54 => "00111110001110111101011010100010", 
    55 => "10111110001000011010111101100110", 
    56 => "10111101110111010101001101000000", 
    57 => "00111101001100110101001010100101", 
    58 => "00111101011100100100001111000011", 
    59 => "10111100100111100111100110111000", 
    60 => "10111101010100001100110101000101", 
    61 => "00111101101001111010011001001011", 
    62 => "10111100011011101000101100001010", 
    63 => "00111110001100000101010100101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibLp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibLp is
    component conv_2_conv_2_weibLp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibLp_rom_U :  component conv_2_conv_2_weibLp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


