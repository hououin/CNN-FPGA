-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicxx_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicxx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001010000001101111101", 
    1 => "10111101110101111000010000000111", 
    2 => "10111101100001000001011110001001", 
    3 => "00111101101011011100100110110000", 
    4 => "10111100010110000010001111000000", 
    5 => "00111100001001000010001101101011", 
    6 => "10111100100110000101010110100101", 
    7 => "00111101010100101011111001101010", 
    8 => "00111101101001011011011010001000", 
    9 => "10111100111111001100001101100011", 
    10 => "10111110000110011001001111110111", 
    11 => "10111110000000101100111010100001", 
    12 => "10111101101110111100000000000110", 
    13 => "00111100100000101100010001000110", 
    14 => "10111110000001100000111101001111", 
    15 => "10111100101000000011110110110001", 
    16 => "00111101110001101001001010000010", 
    17 => "00111100011111001010100011000110", 
    18 => "00111101110101101001001100011111", 
    19 => "10111011010010000001110110110000", 
    20 => "00111101011010001001110000001110", 
    21 => "10111100100000100001011101100110", 
    22 => "00111101100001101100011010101010", 
    23 => "10111110011010001001110110101110", 
    24 => "10111100101011001010100111011000", 
    25 => "00111100110011100100010110111011", 
    26 => "00111110000101101111111000101011", 
    27 => "00111101010110000110111010100100", 
    28 => "10111110000101110001001001011001", 
    29 => "10111110000010101010111011110001", 
    30 => "10111101010000000101110001001100", 
    31 => "00111101111001011001111010110001", 
    32 => "00111101100010011010110001001100", 
    33 => "00111101111111000111011111011110", 
    34 => "00111101010101110111010011100001", 
    35 => "10111110000100010001000010100001", 
    36 => "00111100100000001010110101101101", 
    37 => "10111110000111110010000100000010", 
    38 => "10111110000110011110101110110001", 
    39 => "00111100101001011111000001110010", 
    40 => "10111100000001000010110110000000", 
    41 => "00111100110001111111000010010111", 
    42 => "00111110000000100101000111111101", 
    43 => "00111011011100111110001010100000", 
    44 => "10111110000101011110000101101010", 
    45 => "00111100100101100001011101100000", 
    46 => "10111110000001110000111110011100", 
    47 => "10111110001011001101010000101111", 
    48 => "00111101000000101100101001111001", 
    49 => "00111101010101011010001001110101", 
    50 => "00111101101111110010010000111110", 
    51 => "10111110001111000101010001011110", 
    52 => "10111101000010001001000101001011", 
    53 => "10111101110111110100000111011110", 
    54 => "10111101110101001100110101001010", 
    55 => "10111010000100101011011110000100", 
    56 => "10111100011010110110010000000100", 
    57 => "10111101100011000000100111111010", 
    58 => "10111100101011010011111111001111", 
    59 => "00111100100000011010001101110010", 
    60 => "10111101001100000010111000101011", 
    61 => "00111101001110110000010101001100", 
    62 => "00111110001100011011010100100011", 
    63 => "00111100010011001100001100101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicxx is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicxx is
    component conv_2_conv_2_weicxx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicxx_rom_U :  component conv_2_conv_2_weicxx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


