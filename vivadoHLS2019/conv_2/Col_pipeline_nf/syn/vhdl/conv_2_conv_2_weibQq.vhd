-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibQq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibQq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110110111111011010111110", 
    1 => "10111110001001001101000001010010", 
    2 => "10111110010110000111001001111110", 
    3 => "00111101100010110110101101010000", 
    4 => "10111110001001101101111010010001", 
    5 => "00111110010100000110011100101110", 
    6 => "00111101110010010011110101111010", 
    7 => "00111101101101101101111010010110", 
    8 => "10111110100010111100101001101111", 
    9 => "00111110000101010011101101111101", 
    10 => "00111110000111011010000011010111", 
    11 => "00111101010001111110100001100001", 
    12 => "10111101000111111001111101011000", 
    13 => "10111110010101101111000111101101", 
    14 => "10111110100001100111001101001000", 
    15 => "10111110010110001000000010111010", 
    16 => "10111110011110111001000011111101", 
    17 => "00111110000011110110001100110001", 
    18 => "10111110100000000100001111011110", 
    19 => "00111110001111001010111011010101", 
    20 => "10111101101101001101000010011000", 
    21 => "10111101101101001010010001111111", 
    22 => "10111110101110101011000011111110", 
    23 => "00111110100001111101110010110001", 
    24 => "10111101011111110000001011101110", 
    25 => "00111101100111001111100001110001", 
    26 => "00111101110110110011111011010011", 
    27 => "10111101101000111011101101010111", 
    28 => "10111110101101001001001001011010", 
    29 => "10111101111011000110111101000101", 
    30 => "10111110001111101101011101011110", 
    31 => "00111110001101001011101011010111", 
    32 => "00111101111011101000000010010100", 
    33 => "10111110100111110000111001001101", 
    34 => "00111101000010110100000010110011", 
    35 => "00111110001001000111011101100000", 
    36 => "00111110000011010101001010001101", 
    37 => "00111110001010110001011101101101", 
    38 => "10111101100101100101111100101100", 
    39 => "10111101111101111111100010101010", 
    40 => "00111101111100010011010100111000", 
    41 => "00111110000011010100110111100110", 
    42 => "10111101101111010000001000111011", 
    43 => "00111101001011111011110011111010", 
    44 => "00111101101110100010100001110000", 
    45 => "00111110011001110111010100110010", 
    46 => "00111100010000000010100010000100", 
    47 => "10111110000000111010101001111000", 
    48 => "00111101111000001011011010010010", 
    49 => "10111110100011000100000001000000", 
    50 => "10111110001111111011000101110011", 
    51 => "10111100011001011001111100100000", 
    52 => "10111110100111010000101001111001", 
    53 => "00111110100001100110010000010101", 
    54 => "10111101110011011100010001111101", 
    55 => "10111110101001001001010000111010", 
    56 => "10111110100000101011011110001010", 
    57 => "10111010111100110111000101011011", 
    58 => "10111100101001000010001001100011", 
    59 => "10111101000111010111000001110000", 
    60 => "10111110000110100110000100110000", 
    61 => "10111110101000111101010100011011", 
    62 => "10111101100010111001100011000101", 
    63 => "00111101100000001110001110000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibQq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibQq is
    component conv_2_conv_2_weibQq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibQq_rom_U :  component conv_2_conv_2_weibQq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


