-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidUL_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidUL_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000101011100100011100100", 
    1 => "10111101111001110011000010101000", 
    2 => "10111110100001001101011001011010", 
    3 => "00111110001001110110101101110110", 
    4 => "10111110101111101110101011010010", 
    5 => "00111110100011100100100001110011", 
    6 => "00111101111100001111100101110110", 
    7 => "10111101101110100011010000101001", 
    8 => "00111110011010001001000001000010", 
    9 => "00111101111010100010001010001111", 
    10 => "00111101100010110111111110010110", 
    11 => "10111101110110111110101100110110", 
    12 => "10111101001100000000110000101101", 
    13 => "10111110001010101110001110110111", 
    14 => "00111101100101111010111000000001", 
    15 => "00111110001101111000001010101101", 
    16 => "00111101100100001001101110001000", 
    17 => "00111110011111100011010010100000", 
    18 => "00111110001001000111111010100111", 
    19 => "10111101110001110001011000001100", 
    20 => "10111110100001000011001101000001", 
    21 => "10111111001011011101000010111000", 
    22 => "10111110001101011100110010111101", 
    23 => "10111101111000100100111011101110", 
    24 => "10111011101101001100000110101011", 
    25 => "00111110010101011011100010001011", 
    26 => "00111110010001101011001001000110", 
    27 => "10111011011010001001111110101010", 
    28 => "00111100111110110010011000111111", 
    29 => "10111101110010111101111001010111", 
    30 => "10111101101011110001011000011110", 
    31 => "00111100001001011001101010111010", 
    32 => "00111110000000110100111010101111", 
    33 => "00111101000010111111000011011101", 
    34 => "00111110011001001101111111011101", 
    35 => "10111110001000110101011011011001", 
    36 => "10111101000001010000100101100000", 
    37 => "10111111000000100001110100110010", 
    38 => "10111110011100101100011001111001", 
    39 => "00111110010100101111000101010111", 
    40 => "10111110110001111001000100010000", 
    41 => "00111110011011110000101001111001", 
    42 => "10111110000001101001101100101000", 
    43 => "00111110001100110011001011110010", 
    44 => "10111110101100000100101010100101", 
    45 => "00111101100001100000001000101010", 
    46 => "00111101110000000001110000110101", 
    47 => "00111101110101100001010110100001", 
    48 => "10111101001011000010101111000010", 
    49 => "00111100111111100001000111011111", 
    50 => "10111011010011101101001111000101", 
    51 => "10111101110111100010111011000111", 
    52 => "00111101100001101011001011100111", 
    53 => "10111110001100000101101011111111", 
    54 => "10111110001110000011110001111011", 
    55 => "00111100110011000101011100100101", 
    56 => "00111110001001101000111100111110", 
    57 => "00111001100110011000010100001111", 
    58 => "10111110100001111011000110101011", 
    59 => "10111011110110000000001011111000", 
    60 => "10111110010011100100010001110101", 
    61 => "10111011101100011010000110110011", 
    62 => "10111100111111000111110010011010", 
    63 => "00111100111000000100001000010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidUL is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidUL is
    component conv_2_conv_2_weidUL_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidUL_rom_U :  component conv_2_conv_2_weidUL_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


