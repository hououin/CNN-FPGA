-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidLJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidLJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001000001011001101111100", 
    1 => "00111101011001011100110110000100", 
    2 => "00111101110011111111110000001100", 
    3 => "10111101101100111011111100001000", 
    4 => "00111110001001111100110100000100", 
    5 => "00111101100101000000100101111010", 
    6 => "10111011110001100101010111010111", 
    7 => "10111101110010001000101101111010", 
    8 => "10111101101010111000111011001100", 
    9 => "10111100110110111110001001011001", 
    10 => "10111100100001110111010111111001", 
    11 => "00111101000001101000010001110111", 
    12 => "00111101111011101001101100100101", 
    13 => "10111100101011001110000011001000", 
    14 => "00111101001101101101001111000110", 
    15 => "00111101101011001111111100110000", 
    16 => "10111110001011011111010000011000", 
    17 => "00111101110010011001011110110000", 
    18 => "00111100111010110111011010111100", 
    19 => "10111110001011101110100001111100", 
    20 => "10111110100100111111111011000100", 
    21 => "00111101000101001100100010000111", 
    22 => "00111100000000000011011111011101", 
    23 => "10111101011111100110000110000000", 
    24 => "00111011111100010100010111101111", 
    25 => "00111110000100011111001001111011", 
    26 => "10111101110100100011110101010100", 
    27 => "10111101001101010000110001110101", 
    28 => "10111110010111000001010000011101", 
    29 => "10111100100110101111010000011010", 
    30 => "00111101011110110010110001100101", 
    31 => "10111110011001011111000110111101", 
    32 => "10111100110011110011111100100100", 
    33 => "00111100101000110100111001000111", 
    34 => "00111110001100111011100110100101", 
    35 => "10111110101110001010110011110111", 
    36 => "00111101101011101011100111011001", 
    37 => "10111101011111110010001001011001", 
    38 => "10111101100101101111000100001010", 
    39 => "10111100111000111000011110010100", 
    40 => "00111101100001011101011100110110", 
    41 => "00111101011001011111011001000001", 
    42 => "00111110001000010010111011111000", 
    43 => "00111101000011111110011110101010", 
    44 => "00111100101101000101000111111100", 
    45 => "10111100100101101000000100010011", 
    46 => "10111110000001101011010011101101", 
    47 => "00111101001100100100001101000000", 
    48 => "10111101000001101100101111001000", 
    49 => "00111101000001011111110100001000", 
    50 => "00111110010110100001101100011001", 
    51 => "00111101011011100100000111011001", 
    52 => "10111101101011011100111110001101", 
    53 => "00111101101111010110100111110011", 
    54 => "10111110010001110011000110011000", 
    55 => "00111110010100110101001101001100", 
    56 => "10111101001111001011100100001010", 
    57 => "10111100110010101011001111011010", 
    58 => "10111110000010001001001101000100", 
    59 => "00111010011011001101011100001111", 
    60 => "00111101110100010001011110000111", 
    61 => "00111101100011011000011001000010", 
    62 => "10111100110011000011101011010011", 
    63 => "00111101000110000001100101101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidLJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidLJ is
    component conv_2_conv_2_weidLJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidLJ_rom_U :  component conv_2_conv_2_weidLJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


