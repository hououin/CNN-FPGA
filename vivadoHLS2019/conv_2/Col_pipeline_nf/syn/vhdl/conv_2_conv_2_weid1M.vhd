-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid1M_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid1M_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110001101100000111010010", 
    1 => "00111110000011001111100010011000", 
    2 => "10111100100100111011000010010011", 
    3 => "10111101101010111110001000100101", 
    4 => "10111101100101100001011010111100", 
    5 => "10111110000011110101111100111100", 
    6 => "10111101111001010011100010101100", 
    7 => "10111101001100110110101100000001", 
    8 => "00111101100010011111010110101001", 
    9 => "10111101101110010100101111110100", 
    10 => "10111101101010000100110101101100", 
    11 => "10111101101110111111000101111000", 
    12 => "10111101010110111101011100011101", 
    13 => "00111101111010100111100111101101", 
    14 => "00111101001011010100011011110101", 
    15 => "10111101110111000111001100010101", 
    16 => "10111101010010100010110001000110", 
    17 => "10111100111010010111001100010111", 
    18 => "10111100010111101000101111100101", 
    19 => "10111101011010010111101110010000", 
    20 => "10111110100001111111111000100110", 
    21 => "10111101010101101111000101111000", 
    22 => "00111110000111001111010011010011", 
    23 => "10111110001011110000001011011001", 
    24 => "00111101001101100101110111000100", 
    25 => "00111101100000001011111011000101", 
    26 => "10111100110100101101001010000011", 
    27 => "10111101101111010000101011110111", 
    28 => "10111011110110000001101101000111", 
    29 => "10111101001001100100000010001001", 
    30 => "00111101100111010000001001110001", 
    31 => "00111100010101000010011111110101", 
    32 => "10111110101011011001011100000011", 
    33 => "10111100000111111001110110101110", 
    34 => "10111101110001110101100101001100", 
    35 => "10111101001110100110011100101011", 
    36 => "00111101101011111110011010011111", 
    37 => "10111101101101110111011100011010", 
    38 => "10111100101000000000110001001110", 
    39 => "10111110000011101010010101000011", 
    40 => "00111101010110001100110010001010", 
    41 => "10111100011101110100100100100011", 
    42 => "10111100111101000010100110011001", 
    43 => "00111100100111001100010110001001", 
    44 => "10111101011011110100101010111111", 
    45 => "10111110010011100000000111110101", 
    46 => "10111101101101100101100001111100", 
    47 => "10111101100011000010100101101000", 
    48 => "00111110000000111100110000000010", 
    49 => "10111101100001110010100111100010", 
    50 => "00111101101011110011011000001110", 
    51 => "10111110000110010011100000101010", 
    52 => "00111100100010011100011011010011", 
    53 => "00111100011010010011111111111100", 
    54 => "10111101011001100100001011110111", 
    55 => "00111101001100001001111101111101", 
    56 => "00111100110010001110000111101111", 
    57 => "00111101100110111111100111001001", 
    58 => "00111100110101111100000010101110", 
    59 => "00111100011001011011101011111010", 
    60 => "00111101110101100101011100110000", 
    61 => "00111101001001101100000001011100", 
    62 => "10111101100000001011000111011001", 
    63 => "10111100011011000010010101100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid1M is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid1M is
    component conv_2_conv_2_weid1M_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid1M_rom_U :  component conv_2_conv_2_weid1M_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


