-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidEe_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidEe_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100000011001100001011010111", 
    1 => "10111101000111001010111100111001", 
    2 => "00111101111010111000101100000111", 
    3 => "10111101111011001101011011111010", 
    4 => "10111110010011001010100111101011", 
    5 => "00111101110010001111001000000011", 
    6 => "10111101000100101110101110101101", 
    7 => "10111101100111111110111100100110", 
    8 => "10111100001001011001011101100111", 
    9 => "00111110010100110000010110111010", 
    10 => "00111101100100000101101111101011", 
    11 => "10111001011100110101100101110010", 
    12 => "00111101100011110001010100001011", 
    13 => "10111110100010010011111011101000", 
    14 => "00111100111001100110100111100010", 
    15 => "10111110000101011010100111100101", 
    16 => "00111100100100001010100000011111", 
    17 => "10111011100110101000011000000110", 
    18 => "10111110001000110111101011001110", 
    19 => "10111100101000010100000010000000", 
    20 => "10111101101000010011100000101110", 
    21 => "10111110010100010100001110110110", 
    22 => "10111101011010100100001110101001", 
    23 => "10111110000110011001100101010000", 
    24 => "00111101100001101101010101110000", 
    25 => "00111110000011010110110011110111", 
    26 => "10111101100110111110001010111011", 
    27 => "00111110001001010011000011110011", 
    28 => "10111101011110000100010110010101", 
    29 => "00111101110010001000001010111001", 
    30 => "00111101100000011011100110010010", 
    31 => "10111110010101001111000101101010", 
    32 => "10111101101000101011101101111111", 
    33 => "10111110000000101001010101111101", 
    34 => "00111110000000110101100001110100", 
    35 => "10111010000110011010010001000010", 
    36 => "00111101010001000000010010011111", 
    37 => "00111101010001001100110100000110", 
    38 => "10111101111011110100000111111100", 
    39 => "00111101101010001100101101101000", 
    40 => "10111101010001000011010011100000", 
    41 => "00111110010101110010000111011111", 
    42 => "10111101100101111001000011111010", 
    43 => "10111101111110010001011001001011", 
    44 => "00111101001111111101100000001010", 
    45 => "00111101100111110010100101110001", 
    46 => "00111101101101000100101101100010", 
    47 => "10111101100011010101111010111101", 
    48 => "00111101001110010110000001011110", 
    49 => "10111110011001001011000000011100", 
    50 => "10111010111000001101111110001011", 
    51 => "00111101000010101101000011010000", 
    52 => "10111110010100101000011000101110", 
    53 => "10111101101101111100110100100011", 
    54 => "00111110010110110110000111100100", 
    55 => "10111110011010000111010001101101", 
    56 => "10111101111111000010011010110110", 
    57 => "10111100101010001100100110011101", 
    58 => "10111101100011011000110010011100", 
    59 => "00111100101011100100000010100101", 
    60 => "10111110000101010000100010000000", 
    61 => "10111101110111011011010101010101", 
    62 => "10111100010010011101100000111001", 
    63 => "10111011100010011010011111100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidEe is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidEe is
    component conv_2_conv_2_weidEe_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidEe_rom_U :  component conv_2_conv_2_weidEe_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


