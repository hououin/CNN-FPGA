-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicYC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicYC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011101001000001110011000", 
    1 => "10111110100000000111001111100010", 
    2 => "10111110000110101111001000010111", 
    3 => "10111101111000001000100001010110", 
    4 => "00111110010001001011101001011110", 
    5 => "00111100101000001111000010101110", 
    6 => "10111101011001101001100110011000", 
    7 => "10111110001100000001001100100101", 
    8 => "10111100010110101101100000101101", 
    9 => "10111100110010001100000010111000", 
    10 => "10111110010110101011101001001001", 
    11 => "00111101101000111011010011010010", 
    12 => "10111101101010110011000010101101", 
    13 => "00111100101101001010111100101001", 
    14 => "10111101100100111010001001011110", 
    15 => "10111101100111110010111100011101", 
    16 => "10111011110101101010111101011011", 
    17 => "10111101001110000011110000111100", 
    18 => "10111101110001000011011000001001", 
    19 => "00111100100000010111111100100011", 
    20 => "10111110001111101100101100001010", 
    21 => "00111101100011010111001001010100", 
    22 => "00111101101010010011111001001101", 
    23 => "00111101111100110110010101011111", 
    24 => "00111101101100010101101000100110", 
    25 => "10111101111110101011111011111100", 
    26 => "10111101101010111110111101111101", 
    27 => "00111101100101111010001010101110", 
    28 => "10111110000000001111000110010011", 
    29 => "00111100011000111101110100010000", 
    30 => "00111101000111111011110000111011", 
    31 => "00111100001011100000110010010010", 
    32 => "10111100110010101011010011110000", 
    33 => "10111110000110011101111000111001", 
    34 => "00111100011110110011100001011100", 
    35 => "10111101100000110010100110110111", 
    36 => "10111110011000010100110010111000", 
    37 => "00111100011100100100111000011001", 
    38 => "00111100101000011111010110101000", 
    39 => "10111101010111001111010011110110", 
    40 => "00111100111110000100011100110000", 
    41 => "10111101111001100111100000011110", 
    42 => "00111101001010011110010010101101", 
    43 => "10111101100000110100001110110011", 
    44 => "10111101010000111000110000100000", 
    45 => "00111011101111111010010010111110", 
    46 => "10111101111011001000010101111010", 
    47 => "10111101100011001011001100101111", 
    48 => "10111101111001110101111110101001", 
    49 => "10111110000000100111111100110001", 
    50 => "10111101101001110110100110110011", 
    51 => "10111101000011011000010001100011", 
    52 => "10111100001001101000000100010100", 
    53 => "00111110001010110100111001111110", 
    54 => "00111110001010010100110010010001", 
    55 => "10111110001111110101110000101101", 
    56 => "00111100010000100010010110111001", 
    57 => "00111100100010001101111100101001", 
    58 => "00111110010100011110011101011100", 
    59 => "00111101110011110101100010001000", 
    60 => "10111101100001001011100110001110", 
    61 => "10111101111001000100000001000010", 
    62 => "10111100110001110111111000001011", 
    63 => "00111101010101001011111011010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicYC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicYC is
    component conv_2_conv_2_weicYC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicYC_rom_U :  component conv_2_conv_2_weicYC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


