-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidhF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidhF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000111011001111001100011", 
    1 => "10111101001011100001101110101000", 
    2 => "10111110001010011010001011011100", 
    3 => "00111101011101110110011001011110", 
    4 => "00111101000110101100010110110010", 
    5 => "10111101101000110011011110111010", 
    6 => "00111101010110111000110011000000", 
    7 => "00111101111010011010010001001011", 
    8 => "00111110001100000000010110101101", 
    9 => "00111110000011001111011100010101", 
    10 => "10111110000010001111011110011100", 
    11 => "10111110100011111011000101000101", 
    12 => "10111101101010111101011011101010", 
    13 => "00111101000011001000010001111010", 
    14 => "00111110000010011011100010000011", 
    15 => "00111110000101110001110010100011", 
    16 => "00111101000011001101100111000110", 
    17 => "10111101111110101100110010011100", 
    18 => "10111100011001010000010100010011", 
    19 => "10111110011001010110001110101110", 
    20 => "00111101101001110010100100001010", 
    21 => "00111101000011000100101110110101", 
    22 => "00111101100110110011111011011011", 
    23 => "00111100011101001111001111001011", 
    24 => "10111110010011100100111000001000", 
    25 => "10111101000110111010000010100100", 
    26 => "00111101100110111100010000011001", 
    27 => "10111101111001001100101111010110", 
    28 => "10111101110101000001100010110101", 
    29 => "10111110001011110100000111100001", 
    30 => "10111110000101101111110001111100", 
    31 => "00111101000011010111010110111100", 
    32 => "00111110001100011011101010101100", 
    33 => "10111100100111111001010011101111", 
    34 => "00111110001110110010111001100011", 
    35 => "00111110000001000011110111110000", 
    36 => "10111110001011010000111011001110", 
    37 => "10111110101001010100100101101101", 
    38 => "00111110100000010111010110001001", 
    39 => "00111110010011100010001100000110", 
    40 => "00111101101110001101101100110101", 
    41 => "10111110100111011110010010001100", 
    42 => "10111101111100101010000110001100", 
    43 => "00111110000111001000110100111111", 
    44 => "00111110011001111110111011011000", 
    45 => "00111110000101000110110000011000", 
    46 => "00111110010001001110011011111110", 
    47 => "10111101001001011010101111010111", 
    48 => "00111110000010011011101001000100", 
    49 => "00111110000100011110011000100001", 
    50 => "10111110010110001111100010010110", 
    51 => "10111110100110101000001101001101", 
    52 => "00111101101010110011001011001100", 
    53 => "10111110001010011000110111010001", 
    54 => "10111110001101010011110100110011", 
    55 => "00111101100111111100010110111001", 
    56 => "00111101000011011111011111010000", 
    57 => "10111110010101111011100001011011", 
    58 => "10111110100000101010101011011100", 
    59 => "10111110110110000000011111101110", 
    60 => "10111110000110101000111010010111", 
    61 => "10111101111110000000000110110100", 
    62 => "00111110001010011110000110110000", 
    63 => "00111110001111011011011100101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidhF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidhF is
    component conv_2_conv_2_weidhF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidhF_rom_U :  component conv_2_conv_2_weidhF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


