-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weig8j_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weig8j_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001100010111111011110", 
    1 => "00111101001110011000110011001010", 
    2 => "00111101101101111111101000101000", 
    3 => "10111110001000100101010100110110", 
    4 => "00111110000001101001000101101010", 
    5 => "10111100000110001100111011100111", 
    6 => "10111101111110001101101110000001", 
    7 => "00111110010111101101010111001010", 
    8 => "10111110100010101000110010011001", 
    9 => "00111101111001101110101100100111", 
    10 => "00111100111101011000101110111110", 
    11 => "10111101000111111111000010010001", 
    12 => "10111101110101011100110100001100", 
    13 => "00111011100101100011011011001000", 
    14 => "10111110000011011011010101110010", 
    15 => "10111110001100111101010010110110", 
    16 => "00111100101110010110000101001101", 
    17 => "10111110000011011010100110111111", 
    18 => "00111011010101110101100001000011", 
    19 => "10111100010010111111110010111110", 
    20 => "00111101111001110000110101111111", 
    21 => "00111101100100011101110111000100", 
    22 => "10111101111001101011100100110100", 
    23 => "00111110001110100110110110101010", 
    24 => "10111101111110010100110101111100", 
    25 => "10111110100000000000101011000101", 
    26 => "00111100001011011101100110001100", 
    27 => "10111101111000011100111100110111", 
    28 => "10111100001110101100110001010100", 
    29 => "10111100111010110110100010100011", 
    30 => "10111110100011001111001000100010", 
    31 => "10111100101100111000000110011010", 
    32 => "10111110001001011101000111001011", 
    33 => "00111110100010010110011100100011", 
    34 => "00111100100000111110101011011010", 
    35 => "00111110000101111001010000000100", 
    36 => "00111110011111111001110110111011", 
    37 => "00111000110011111011100110111000", 
    38 => "10111110001100011010110000011101", 
    39 => "00111100000001000011001011111111", 
    40 => "10111101110011010100100110000110", 
    41 => "10111110111000001100011011010000", 
    42 => "00111101101110110000011111101001", 
    43 => "10111110100010011110100110000111", 
    44 => "10111110001101101000001001100110", 
    45 => "10111110000100101100000101010100", 
    46 => "10111110001100111111101001100001", 
    47 => "10111110100101101100100010001111", 
    48 => "10111101110100110001101010011110", 
    49 => "00111100101101111111010101100100", 
    50 => "10111110011000000001011100110000", 
    51 => "10111101001010011011100111000010", 
    52 => "00111100100100100101111010010101", 
    53 => "00111101010101010101000111010100", 
    54 => "00111101000101111011010001011111", 
    55 => "00111100111111100100110011001001", 
    56 => "00111101000101011110111000100010", 
    57 => "00111101100010001010011110101000", 
    58 => "00111101001011010110010010010100", 
    59 => "10111110000011010010110010001000", 
    60 => "00111100010001000110100110010111", 
    61 => "00111101010011110011101001010011", 
    62 => "10111110001011110101010001011111", 
    63 => "10111110100000010000101111101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weig8j is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weig8j is
    component conv_2_conv_2_weig8j_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weig8j_rom_U :  component conv_2_conv_2_weig8j_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


