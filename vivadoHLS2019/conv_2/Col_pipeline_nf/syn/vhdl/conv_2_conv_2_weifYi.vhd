-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weifYi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weifYi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011010111000100101001101", 
    1 => "10111101110110010001111001000101", 
    2 => "10111101010101101100100010011001", 
    3 => "00111101010101010110100100100110", 
    4 => "00111101101101000100101100101010", 
    5 => "00111101111001000111001100001001", 
    6 => "00111101101011011101110111001110", 
    7 => "10111100101000011101110011101100", 
    8 => "00111101100010001100011100000001", 
    9 => "00111010110011100100011001101110", 
    10 => "00111101010100000110000101111011", 
    11 => "00111100101010000000001110110100", 
    12 => "00111100100001111000011100010110", 
    13 => "00111100100110100001101110011010", 
    14 => "00111100011101110110000001100111", 
    15 => "00111101101110110101111000110100", 
    16 => "10111101010111001110111010111101", 
    17 => "00111100111101111110111010111010", 
    18 => "10111101111000000011110101101111", 
    19 => "10111100011000011111111111000000", 
    20 => "10111101101111100000011011110001", 
    21 => "10111101100001111001010100101110", 
    22 => "00111001100110001111110100000000", 
    23 => "10111100011010110101000011011001", 
    24 => "00111100111111100011110011011001", 
    25 => "00111101011100000000110111001000", 
    26 => "00111101000101001000011011111000", 
    27 => "10111110000010000010011000110111", 
    28 => "10111101100011100110011000001001", 
    29 => "00111110000011111111011010100111", 
    30 => "10111101110101110111001110100111", 
    31 => "10111101101110011011000111111110", 
    32 => "10111110001001110001000110111110", 
    33 => "10111110011000100110000110110000", 
    34 => "10111001111000001001100000101010", 
    35 => "00111110001001101111000111011100", 
    36 => "10111101100110010011111010110010", 
    37 => "00111100010110101011010000100100", 
    38 => "10111100000101101101110001011111", 
    39 => "10111100011001101110111111110110", 
    40 => "10111101100111010100001111100110", 
    41 => "00111101011100110010101111101011", 
    42 => "10111101101001101110011010100110", 
    43 => "00111101101010111010110011101100", 
    44 => "00111101100010001011001101011100", 
    45 => "00111101101000110101111011011001", 
    46 => "10111100110100010000000110011001", 
    47 => "10111011111101010000110010101111", 
    48 => "00111100110110000110110101000000", 
    49 => "10111110011111001110111110000000", 
    50 => "10111101101011000010010100100010", 
    51 => "00111101101010001000111111111000", 
    52 => "10111110011110111100101100000000", 
    53 => "10111000000111001000111110001110", 
    54 => "00111101100001111110010001111010", 
    55 => "10111110000111110000000100000011", 
    56 => "10111101111011000000010000101100", 
    57 => "10111010101101000010110111000000", 
    58 => "00111101011010001011110000010001", 
    59 => "00111100110111000111111101110111", 
    60 => "00111101011111011111100111110110", 
    61 => "00111101100000101011011111000110", 
    62 => "10111101100110011110100011010111", 
    63 => "00111101100000100010111000011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weifYi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weifYi is
    component conv_2_conv_2_weifYi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weifYi_rom_U :  component conv_2_conv_2_weifYi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


