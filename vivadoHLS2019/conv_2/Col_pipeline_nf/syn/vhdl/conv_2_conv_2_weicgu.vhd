-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicgu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicgu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111111000101110010001011", 
    1 => "10111100011101100000110100001011", 
    2 => "10111101101111100001100000100101", 
    3 => "00111101100000010000101101110111", 
    4 => "10111110000011010011110000101101", 
    5 => "00111101001001011011111011100101", 
    6 => "10111110000100100000100011011010", 
    7 => "00111011010111000001010010111000", 
    8 => "10111101110010011001011101010101", 
    9 => "00111101010110011000111010111110", 
    10 => "10111110001100100010011001110100", 
    11 => "10111101110001110100010010011000", 
    12 => "10111110001100101001111011011000", 
    13 => "10111110000001100011101011100011", 
    14 => "10111110000100101101010110111111", 
    15 => "10111110000011100100110000100000", 
    16 => "00111101100000101000101011010011", 
    17 => "00111101101010111111000111101111", 
    18 => "00111110001101011001111001001111", 
    19 => "00111110000001000000111111011101", 
    20 => "00111101101110011000000110010110", 
    21 => "10111101001011011100000110111000", 
    22 => "00111101111110011101001001010110", 
    23 => "10111101001011100110110100110000", 
    24 => "10111100100001111010111010111011", 
    25 => "10111100001000011010111110001100", 
    26 => "10111101011101111010110100001111", 
    27 => "00111101001110011010110011011100", 
    28 => "00111101101111110101110111111011", 
    29 => "10111110110001000001101100111111", 
    30 => "10111110010001001001011010011111", 
    31 => "00111110001101110011000101000001", 
    32 => "00111101011000100101101100000101", 
    33 => "00111110001111011010100100001110", 
    34 => "00111101110101101111110111100001", 
    35 => "10111110010010101000111101001110", 
    36 => "00111101000101110010011101111111", 
    37 => "10111110100101000010011010111111", 
    38 => "10111110010000110111010010000111", 
    39 => "10111101101010001100110100111100", 
    40 => "00111101001000100110110111111001", 
    41 => "10111101011011101111110100111111", 
    42 => "00111101100101100011101000101011", 
    43 => "00111100110111111000101001001111", 
    44 => "10111110100101010101000010000011", 
    45 => "10111101111001111011101100110011", 
    46 => "10111110100001111100101101101011", 
    47 => "10111110010100111011101000001100", 
    48 => "10111110000100011000110010110100", 
    49 => "00111100101101101001100111111001", 
    50 => "10111100110011010000101000010110", 
    51 => "10111110100110001011001100010111", 
    52 => "00111101001010101100001100100000", 
    53 => "10111101100111010100111111011101", 
    54 => "10111101010000011001110010100000", 
    55 => "00111110001001001110011100011011", 
    56 => "00111110011011111010110101010011", 
    57 => "00111100011101010001000001000011", 
    58 => "00111100110011101010101010100001", 
    59 => "00111101101010111011010011110000", 
    60 => "10111101111101000111100111011010", 
    61 => "00111110001010011000101100001010", 
    62 => "00111100111001001111100111011100", 
    63 => "00111100100111000110010111111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicgu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicgu is
    component conv_2_conv_2_weicgu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicgu_rom_U :  component conv_2_conv_2_weicgu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


