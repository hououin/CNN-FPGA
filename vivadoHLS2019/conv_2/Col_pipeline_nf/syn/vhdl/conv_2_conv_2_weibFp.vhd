-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibFp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibFp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010110010111100010101", 
    1 => "10111110001111010000010011101010", 
    2 => "10111101101110111101100110110011", 
    3 => "10111100000101101000111010110111", 
    4 => "00111110010110011010110100110011", 
    5 => "10111101100001111000000101111101", 
    6 => "10111101111001011011101101110100", 
    7 => "00111101101101000110111010111100", 
    8 => "10111101100010011000010010101100", 
    9 => "10111101101010010100010000010100", 
    10 => "00111101100111010110011001010100", 
    11 => "10111101100000101100111000001000", 
    12 => "10111101000011111100100011000001", 
    13 => "00111101110100110111101001011000", 
    14 => "00111101001000000001111100100010", 
    15 => "10111001111010100110110010101100", 
    16 => "10111100110000011011010000001110", 
    17 => "10111101110100010101110110110111", 
    18 => "00111100111011010100010100100011", 
    19 => "10111110000111110100001001111101", 
    20 => "00111101110011000100101001101111", 
    21 => "00111101110011010001011100100100", 
    22 => "00111100101110100110110111111010", 
    23 => "00111101110111010101101010010111", 
    24 => "10111101000011010101110001011101", 
    25 => "10111101001101100000001100110110", 
    26 => "10111100100100010100001010111001", 
    27 => "10111110110011101011010010110011", 
    28 => "10111110000100000100110110101000", 
    29 => "10111110001110110001111110111000", 
    30 => "00111101101101011110001100100001", 
    31 => "10111110101101101101001100100100", 
    32 => "10111101111100011101001011001110", 
    33 => "00111010101100001010011001101001", 
    34 => "10111101111000111111000011100101", 
    35 => "10111101100100111001101101011110", 
    36 => "10111101111100101101111100101111", 
    37 => "00111011110111111101110010011100", 
    38 => "10111100101000010011110011010100", 
    39 => "00111101100000111101100011001001", 
    40 => "10111101111000111110010000010000", 
    41 => "10111101010111110000010100011111", 
    42 => "10111100100100001011100111100101", 
    43 => "00111101001111110001011011010100", 
    44 => "00111101011000011111100010011110", 
    45 => "00111101110111011100000100011001", 
    46 => "10111101000000111000011010101010", 
    47 => "10111100101000100000000100011000", 
    48 => "10111110001101001100000111100110", 
    49 => "10111101110001111100110110101101", 
    50 => "10111101100110010110001110011100", 
    51 => "10111101100110110110011011001101", 
    52 => "10111110010010011111111111000100", 
    53 => "00111011100100011111100101101011", 
    54 => "10111110001101111001001101111000", 
    55 => "10111100101001001100010111010010", 
    56 => "00111100100000001100001110011011", 
    57 => "00111100101110010101000100010110", 
    58 => "00111110000010001100101110010011", 
    59 => "00111101100101101011110110110111", 
    60 => "00111101100011011011010110110101", 
    61 => "10111100100110010110000110001010", 
    62 => "10111100100111110000100111000101", 
    63 => "00111101101101010000100010000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibFp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibFp is
    component conv_2_conv_2_weibFp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibFp_rom_U :  component conv_2_conv_2_weibFp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


