-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib7t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib7t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001010001000100100100", 
    1 => "10111110001000010110100001001111", 
    2 => "10111110101101110110100101110100", 
    3 => "00111100100111111011011111111000", 
    4 => "10111101100111011000101001001001", 
    5 => "00111101010101110101001010100100", 
    6 => "10111101011000111101001011000000", 
    7 => "10111101100100011101111001110011", 
    8 => "10111110111000111111110001111011", 
    9 => "00111110001111010001100011010001", 
    10 => "00111011101110001110010010100011", 
    11 => "00111100111011011001011011000101", 
    12 => "10111101001110100111101001001010", 
    13 => "10111110100010101110001111001111", 
    14 => "10111101101110011100101101000001", 
    15 => "10111101111100000110110000011101", 
    16 => "10111110011011110101010000100111", 
    17 => "00111101011111111011111000000011", 
    18 => "10111101101010011010100110111110", 
    19 => "00111110010110101010000100011010", 
    20 => "10111110010010111110111110111100", 
    21 => "10111100001101110001110100101000", 
    22 => "10111110110010101110001101110011", 
    23 => "00111110000101100000101010001111", 
    24 => "10111101101101100101011100100100", 
    25 => "10111101001011110000010000110101", 
    26 => "10111101001010111000010001101011", 
    27 => "10111110010010111100000111110100", 
    28 => "10111110010011000001111001101000", 
    29 => "10111110001110011001100110101100", 
    30 => "10111110100000110011000101001001", 
    31 => "00111110100111011010001010011111", 
    32 => "10111101001000011100101110111110", 
    33 => "10111110010101101110001000010110", 
    34 => "10111011111110011101011010100010", 
    35 => "00111100000101001101100011010000", 
    36 => "10111110000000010100101110001011", 
    37 => "00111100010001001010101110100001", 
    38 => "10111110011011010010101101000110", 
    39 => "10111110010111101011110011110111", 
    40 => "10111100101000110010101011011000", 
    41 => "00111101110101100000000100110011", 
    42 => "10111101010010110011100111100100", 
    43 => "00111101100010011011110110010100", 
    44 => "00111101010100000101100100011000", 
    45 => "00111110000010110010000110001000", 
    46 => "00111101101110001111010000110101", 
    47 => "10111110000000111111111110000111", 
    48 => "00111101100010110100110000111000", 
    49 => "10111110011000000100011000001001", 
    50 => "10111110011000101111000001111110", 
    51 => "00111101100000001011100000001101", 
    52 => "10111101101011101100110001000101", 
    53 => "00111110001001101000101101000110", 
    54 => "10111110001010100010101001110101", 
    55 => "10111101010001011001011010111011", 
    56 => "10111110000011101100111010111000", 
    57 => "00111101001111110011110001100100", 
    58 => "10111101101110110010011111011011", 
    59 => "10111101001001000111001110100001", 
    60 => "10111110110010110101111001011011", 
    61 => "10111111000011111000101101011001", 
    62 => "10111110011000100110100110100010", 
    63 => "00111101111011110111110000000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib7t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib7t is
    component conv_2_conv_2_weib7t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib7t_rom_U :  component conv_2_conv_2_weib7t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


