-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiqcK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiqcK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111111100001000000111001", 
    1 => "10111100101001101111010010000011", 
    2 => "00111101101101110101111010001010", 
    3 => "00111101000110101100011000000011", 
    4 => "10111110000110011111001001101011", 
    5 => "00111110001000100001111000101000", 
    6 => "00111011100001000111010011110110", 
    7 => "10111110000100101111111000011001", 
    8 => "00111101101000001010011000001011", 
    9 => "00111100101001011110100110100010", 
    10 => "00111101011111101100000011101011", 
    11 => "00111101011010110110101010100000", 
    12 => "00111101101001111100100010011001", 
    13 => "10111110001101001010000010111110", 
    14 => "10111101000010001001111111101000", 
    15 => "10111110010100001101010110001111", 
    16 => "00111101110110011101111100101011", 
    17 => "00111110000000110010000011110110", 
    18 => "10111101100100101010001101001011", 
    19 => "10111101011000101011011001110010", 
    20 => "10111110000001011011011000110011", 
    21 => "00111100111000011111000010101001", 
    22 => "00111101000011011111111011001100", 
    23 => "10111110100110110110011010000010", 
    24 => "00111101010011101010000001101010", 
    25 => "00111110001100110101001011111011", 
    26 => "10111101101000010101101000000111", 
    27 => "00111101110111000100011010100100", 
    28 => "10111011110010110010101011101110", 
    29 => "00111110010010000001111011000000", 
    30 => "10111101100001010011010111100001", 
    31 => "10111110001001001010110010101001", 
    32 => "00111100011111111011010101010011", 
    33 => "10111110101011010110101000100011", 
    34 => "00111110000001000000110101110111", 
    35 => "00111110000010001010111100011100", 
    36 => "00111110001100011001101101000011", 
    37 => "00111110000001000010000011011111", 
    38 => "10111101000101011101110001111111", 
    39 => "00111101111101011001111011010010", 
    40 => "10111101000010100110101010010100", 
    41 => "00111110000010001100011000000011", 
    42 => "10111110011001010101011111000110", 
    43 => "10111110000001110010000010000111", 
    44 => "10111011010000111111100011100000", 
    45 => "00111100011110000100011000110101", 
    46 => "00111101010101011101011110101000", 
    47 => "10111101101011111000111101000011", 
    48 => "00111101100001011011000000010110", 
    49 => "10111110101100100011000100100000", 
    50 => "00111100101010010010100010000011", 
    51 => "00111110000110110101000000010101", 
    52 => "10111110101011010010001000011111", 
    53 => "10111101101100110001010100100001", 
    54 => "00111110000101010010010101000001", 
    55 => "10111110101010000101110010110000", 
    56 => "10111101101101010010001111011100", 
    57 => "00111101011100001011001101111001", 
    58 => "00111101100111101101001011000000", 
    59 => "00111101011000110010100110001110", 
    60 => "10111101110100110010011111001100", 
    61 => "00111101011000000010101101111000", 
    62 => "00111101111010100000001010111100", 
    63 => "10111100000110000101111111101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiqcK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiqcK is
    component conv_2_conv_2_weiqcK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiqcK_rom_U :  component conv_2_conv_2_weiqcK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


