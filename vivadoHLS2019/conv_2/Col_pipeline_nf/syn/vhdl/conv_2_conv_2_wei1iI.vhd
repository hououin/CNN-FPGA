-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei1iI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei1iI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010000101110000111011111", 
    1 => "00111101101001100101010011111011", 
    2 => "00111101100010010111000110110011", 
    3 => "10111110000111000011001010000001", 
    4 => "00111101100010100011001010011000", 
    5 => "10111101100111000111110001101111", 
    6 => "10111110000001110010101010111101", 
    7 => "00111101100010011000010011011101", 
    8 => "10111101001010110110101000111010", 
    9 => "10111011001101101101010011100011", 
    10 => "10111101111010101100011111010100", 
    11 => "00111101100110010101100001000101", 
    12 => "00111100100010101010000110011100", 
    13 => "10111110000111111100110011110001", 
    14 => "10111110100010000001000100011110", 
    15 => "10111110000000001100000101010000", 
    16 => "00111101100001010001011011111000", 
    17 => "10111110001011110000100011010110", 
    18 => "00111101100111001010111000011001", 
    19 => "10111110001010001001110101110010", 
    20 => "00111110001010111000111110101001", 
    21 => "10111110100111111010011011000010", 
    22 => "10111110101100111001001010101010", 
    23 => "00111101101110011000101010101100", 
    24 => "10111110100111001000010110110100", 
    25 => "10111101110100011010001011111001", 
    26 => "10111101111110100101110110111001", 
    27 => "10111101100111010011010010110010", 
    28 => "10111110010010111011011011100001", 
    29 => "10111110000100110010100111011100", 
    30 => "00111110100011000111010101011101", 
    31 => "10111110000111100110110011011001", 
    32 => "10111110000101110100111000010000", 
    33 => "00111101110010010001100111010000", 
    34 => "10111101000101000011011000000000", 
    35 => "00111100110111110100110010000010", 
    36 => "00111100000011010100100000101111", 
    37 => "10111010001110001100101000000000", 
    38 => "00111110001100010111000110111010", 
    39 => "00111100001010100000011100111011", 
    40 => "10111110100011111001111000110001", 
    41 => "10111110010000011000100000111110", 
    42 => "10111110001000110101010111001000", 
    43 => "10111101110100011000110010101001", 
    44 => "00111110000111101000011010110111", 
    45 => "10111110011001010011100111111110", 
    46 => "00111101010111011101110000010100", 
    47 => "10111101101001000110001110100011", 
    48 => "00111101101111000100000100001001", 
    49 => "10111101110010110110001011101000", 
    50 => "10111110101001011110110000001000", 
    51 => "00111101000000110001110000110101", 
    52 => "00111101010110100111101001110111", 
    53 => "10111110010101101000000111101011", 
    54 => "10111110000110101001000011100111", 
    55 => "00111101110001011001100100110000", 
    56 => "10111101010111110010100100000100", 
    57 => "00111100011000110110010100110001", 
    58 => "10111110001111001000100101111001", 
    59 => "00111101101110001101110001110110", 
    60 => "10111110000100110111000100001100", 
    61 => "10111101100011111001110111110000", 
    62 => "00111110001101110000000010001110", 
    63 => "00111101110001001011100001001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei1iI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei1iI is
    component conv_2_conv_2_wei1iI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei1iI_rom_U :  component conv_2_conv_2_wei1iI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


