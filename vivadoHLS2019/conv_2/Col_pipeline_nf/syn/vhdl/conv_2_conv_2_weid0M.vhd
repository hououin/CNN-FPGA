-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid0M_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid0M_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111001111001001000111100", 
    1 => "10111100000010111010010111111100", 
    2 => "10111110000001010001011111001011", 
    3 => "00111100101100010001011001011110", 
    4 => "00111110000111100011010001011010", 
    5 => "10111110001100001111011101100011", 
    6 => "00111101010011111101100110001001", 
    7 => "10111100010100100100111111010010", 
    8 => "00111100110110110110011111000111", 
    9 => "10111110000111001011101010011111", 
    10 => "10111110100000110100101101010100", 
    11 => "10111110011011011100111101011010", 
    12 => "00111101101010010111000110010111", 
    13 => "00111110000001011110101111100101", 
    14 => "10111100100111000110010001001111", 
    15 => "10111101100000000111111100001010", 
    16 => "10111101101010111101111100101100", 
    17 => "10111110000010101110110000001100", 
    18 => "10111101001001101111100010010110", 
    19 => "10111101000101010110100011011010", 
    20 => "10111101100100000100010011101010", 
    21 => "00111110000101000010111001011110", 
    22 => "00111101010111001000011101101000", 
    23 => "10111101001111010110010001010110", 
    24 => "00111101111011010001111001101000", 
    25 => "00111100111100101110000110110001", 
    26 => "10111101101111110001000111100110", 
    27 => "00111101011010100100010001010011", 
    28 => "10111110000110110001010010010111", 
    29 => "10111101101011111111100001010011", 
    30 => "10111101110001110010001111011000", 
    31 => "00111011111111100110111010001110", 
    32 => "10111110100000100100000001001111", 
    33 => "10111101010010110111101001111001", 
    34 => "10111110010000101010000100010001", 
    35 => "10111101010110111100001110110100", 
    36 => "00111101110001010000110000111000", 
    37 => "10111100001111111000010110110001", 
    38 => "10111011100101110101010001010000", 
    39 => "10111101100011010011100001111111", 
    40 => "00111110000100010111101110111000", 
    41 => "10111101111011111010110011111011", 
    42 => "00111110000010111011011100000110", 
    43 => "00111101000001000000100001101010", 
    44 => "10111110001010111110011010110001", 
    45 => "10111110010000000111010010011101", 
    46 => "10111101111000000110110001010101", 
    47 => "10111101100110011111010010001111", 
    48 => "10111101100110101100011101001110", 
    49 => "00111101100101110101101110110000", 
    50 => "10111011010111101011001110000101", 
    51 => "10111101100010110111000100011100", 
    52 => "00111101011011100101001111010111", 
    53 => "00111101100011100011100110010000", 
    54 => "10111101001101010101011000101000", 
    55 => "00111101110000100011000100010101", 
    56 => "10111110000010100011111001111110", 
    57 => "10111101101010110100110101111001", 
    58 => "10111100001001001001001110100011", 
    59 => "10111011100011110001101110111010", 
    60 => "00111101101001010000101100110010", 
    61 => "00111101100011000100100110011111", 
    62 => "00111101000101000101000100010111", 
    63 => "00111100001101110110000000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid0M is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid0M is
    component conv_2_conv_2_weid0M_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid0M_rom_U :  component conv_2_conv_2_weid0M_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


