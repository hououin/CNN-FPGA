-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic1C_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic1C_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111101011001010111011011", 
    1 => "00111101111101000000000011100011", 
    2 => "00111100111001001001000001111010", 
    3 => "00111101111010000010101001011000", 
    4 => "00111101111101011000101110101010", 
    5 => "10111110100000011101011111001001", 
    6 => "00111110100000111010111000011001", 
    7 => "10111110000001011000101110101001", 
    8 => "10111100100111110000011100101010", 
    9 => "00111101000000011010011111001101", 
    10 => "00111101001001100000010111101001", 
    11 => "10111110101111011110111011010010", 
    12 => "00111110000100001010111100000100", 
    13 => "10111100010100110101001111000110", 
    14 => "00111101110000001010100111000110", 
    15 => "10111100100010000111001101000000", 
    16 => "00111100100101001110110100011010", 
    17 => "10111101100101100111001011011101", 
    18 => "10111100010001011000110111100000", 
    19 => "10111101101010110011010010100001", 
    20 => "10111110101001110001111010110001", 
    21 => "00111110000000010110010000100101", 
    22 => "10111101110110111001111101111110", 
    23 => "00111101001000001111111101111000", 
    24 => "10111101001001100100010110111001", 
    25 => "00111110001000000000100111000100", 
    26 => "10111101110111010010011010100000", 
    27 => "10111100110010001011110000101100", 
    28 => "00111110011110010101101101110001", 
    29 => "10111101111000010100001001101111", 
    30 => "10111101101010010100010000111001", 
    31 => "00111110100001101101001111010101", 
    32 => "00111011101000101000011100000101", 
    33 => "00111101100011001110111001010100", 
    34 => "10111110010111110010000100101100", 
    35 => "10111110000010001100101100011110", 
    36 => "00111110100001101011011011010101", 
    37 => "10111110100111100111100110000111", 
    38 => "00111110101000110100100110110010", 
    39 => "00111101111011101111011000000101", 
    40 => "10111110101000101000001100101110", 
    41 => "00111101110001000011100011010010", 
    42 => "00111101110001100110100001011101", 
    43 => "00111101100110100010111001000010", 
    44 => "10111100101000010010111110011101", 
    45 => "10111110011111110110000101101101", 
    46 => "00111110001111001010011011001010", 
    47 => "00111110100000110100101000011010", 
    48 => "00111110001110011000101011001110", 
    49 => "00111110010111100100100000000011", 
    50 => "10111101010000001100010100000100", 
    51 => "00111110001100110111010001010100", 
    52 => "00111101011101001111011000001110", 
    53 => "10111110100110111011011100110000", 
    54 => "10111101101111101000001101111111", 
    55 => "00111101101110101000101001001010", 
    56 => "00111101000100110010000010100010", 
    57 => "10111100100011011001111110011110", 
    58 => "10111101101110101100000111110010", 
    59 => "10111110101001110010101000000100", 
    60 => "00111011010010011100001001110000", 
    61 => "10111110010000001111000011010001", 
    62 => "10111101000010111001010010101110", 
    63 => "10111100000110101100110000110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic1C is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic1C is
    component conv_2_conv_2_weic1C_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic1C_rom_U :  component conv_2_conv_2_weic1C_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


