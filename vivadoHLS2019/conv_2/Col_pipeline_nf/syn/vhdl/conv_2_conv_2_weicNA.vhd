-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicNA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicNA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010110011010110010110111", 
    1 => "10111101110111011110111100011101", 
    2 => "10111110001111001001110100010010", 
    3 => "00111101111011010101111101001111", 
    4 => "00111101001111110100010011000110", 
    5 => "10111110000001010111011010011010", 
    6 => "10111101010001001110110010101100", 
    7 => "00111101110000101000110000101001", 
    8 => "00111101000111100110001101010000", 
    9 => "10111100001010010011001010001111", 
    10 => "10111101100000011110011010010010", 
    11 => "10111101111001011110100010100000", 
    12 => "00111101100111110101000110011100", 
    13 => "00111100011101101001110000001000", 
    14 => "10111100110001101100010111101010", 
    15 => "00111101110100111001100101011110", 
    16 => "00111101000001000100111001110000", 
    17 => "10111101010111011110110100001011", 
    18 => "10111101100011100001110110111100", 
    19 => "00111101010000011101000110001111", 
    20 => "10111101011010010101001100111010", 
    21 => "00111101110010101001001001111011", 
    22 => "00111100101001011010011010001111", 
    23 => "00111101111111000011010100101010", 
    24 => "00111101101101110000111000010001", 
    25 => "10111101010110111011011110100011", 
    26 => "10111101011000110111001110100100", 
    27 => "10111101000100010001100000010100", 
    28 => "10111100010101010101010101011010", 
    29 => "10111110011111000101001101000011", 
    30 => "00111101110110101000011001000110", 
    31 => "00111011111111001100010001010100", 
    32 => "00111101001001110011101001111110", 
    33 => "00111101011101111110110101101100", 
    34 => "10111101100000110011000111110111", 
    35 => "10111100011011101011010110101000", 
    36 => "10111101100010000010100101101101", 
    37 => "10111101111011011010011100010010", 
    38 => "00111110001110000010101101111100", 
    39 => "10111101100110101110111001010100", 
    40 => "10111001111010010001110010010110", 
    41 => "00111101010101010011101111001101", 
    42 => "00111110000001000101101101110100", 
    43 => "00111100001111010111010101101010", 
    44 => "00111101111101000100001110001101", 
    45 => "10111101101010111000100100111100", 
    46 => "00111100100011100100001100001001", 
    47 => "00111101101111111010000101111011", 
    48 => "00111110000011111110010001000010", 
    49 => "00111011111100010110110011011011", 
    50 => "10111101010110111011010000100011", 
    51 => "10111101111010010101010100110010", 
    52 => "00111101001100111011100001011001", 
    53 => "00111100010011100101011100000001", 
    54 => "10111100010010111110011110110101", 
    55 => "10111101110101011110100101001100", 
    56 => "10111101111000010001100000010111", 
    57 => "00111101110111010011010101100110", 
    58 => "00111101111110011011110111100010", 
    59 => "00111100000000100001000010011111", 
    60 => "00111010111000100000110101101011", 
    61 => "10111100100110011111111010100001", 
    62 => "10111101110001110111001111110101", 
    63 => "10111100101001011011010101111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicNA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicNA is
    component conv_2_conv_2_weicNA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicNA_rom_U :  component conv_2_conv_2_weicNA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


