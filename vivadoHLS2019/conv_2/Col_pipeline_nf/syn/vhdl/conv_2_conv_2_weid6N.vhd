-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid6N_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid6N_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011011110001100001011", 
    1 => "00111110010011001010011000000000", 
    2 => "00111101010101011101001011010111", 
    3 => "10111100001101101000111001101111", 
    4 => "10111011110100001010011011010111", 
    5 => "10111110001010110100000000100000", 
    6 => "10111110011000001000111000110010", 
    7 => "00111100001101001011110111101000", 
    8 => "10111101101010010000100110011100", 
    9 => "10111110001001111001111100100011", 
    10 => "10111110011010111101011100000011", 
    11 => "10111110010100101010000100001010", 
    12 => "10111101110110010111000010010100", 
    13 => "00111101010000101011110101011100", 
    14 => "10111101010111001001111001101111", 
    15 => "10111101100010111011100110100001", 
    16 => "00111011111001111110100000010111", 
    17 => "10111101011101011011111111111111", 
    18 => "00111101110110000000000011000111", 
    19 => "00111101010011011010000010011001", 
    20 => "10111100010011000101000001010011", 
    21 => "00111101111100001010001101100101", 
    22 => "00111110000001001010111010010011", 
    23 => "10111110010100110111001000100110", 
    24 => "10111101011111011110111100110101", 
    25 => "10111101111111010101000010101100", 
    26 => "10111101111000101001001011011101", 
    27 => "00111100000111101101000110001101", 
    28 => "10111101011101111111000101000011", 
    29 => "00111101101110010000100110010001", 
    30 => "00111101111100000000011010011000", 
    31 => "10111101110011011000010100100110", 
    32 => "10111110011010111001010111000110", 
    33 => "00111101001000001100000011110011", 
    34 => "10111110100111100101001010011110", 
    35 => "10111101110101110010100111111001", 
    36 => "10111100101100100011101001010011", 
    37 => "10111110000100110100110001100110", 
    38 => "10111101010101111100011110110100", 
    39 => "00111011111101101101011001010001", 
    40 => "00111110010110000010001110001000", 
    41 => "10111110011011011101100101100011", 
    42 => "00111101011010001000010111000011", 
    43 => "10111101101100010001011110001101", 
    44 => "00111100001000011111110110001100", 
    45 => "10111110010110011110111101010001", 
    46 => "10111110001111001010010110100111", 
    47 => "10111101111001101010111101011000", 
    48 => "00111101101011010000001001111101", 
    49 => "00111101101100011000010110111100", 
    50 => "10111101000000111010111010101111", 
    51 => "00111011100011100111000001110001", 
    52 => "10111101000101000010101000000000", 
    53 => "00111101011011000111111000110001", 
    54 => "10111101111100011110100110011101", 
    55 => "00111101000001010110110011010011", 
    56 => "00111101011000110011111001010100", 
    57 => "10111101000011001001010001110011", 
    58 => "10111101110001101100010011111111", 
    59 => "10111101101011100010000001000011", 
    60 => "00111110001010000101000000100010", 
    61 => "10111101101010010111000111100101", 
    62 => "00111110001000110111110111001101", 
    63 => "00111101011100001001001100001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid6N is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid6N is
    component conv_2_conv_2_weid6N_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid6N_rom_U :  component conv_2_conv_2_weid6N_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


