-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiceu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiceu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101100001110001101001111", 
    1 => "00111101110001111111010101001010", 
    2 => "00111101111000010111111001110001", 
    3 => "10111101110000110110101011000010", 
    4 => "00111101111101111100110010000000", 
    5 => "10111101101000110100010000010110", 
    6 => "10111101001110011011101000110101", 
    7 => "10111101100110001101001110100010", 
    8 => "00111101011101001101100101001000", 
    9 => "10111101011010110011001001101001", 
    10 => "10111101010110111010011110001000", 
    11 => "10111101001011110101011100101101", 
    12 => "00111110000100000010011000101111", 
    13 => "00111110001100101110100011100010", 
    14 => "00111101001010000010000010010110", 
    15 => "10111101111000000100001100011111", 
    16 => "00111101101000001001011100010111", 
    17 => "00111011110000110010011110101001", 
    18 => "10111101001011100111101010000110", 
    19 => "10111110001111100000110001101110", 
    20 => "10111110011000011101010110100011", 
    21 => "00111101001100011010110111101011", 
    22 => "00111101010110101101110111111101", 
    23 => "10111101111011110100101100101001", 
    24 => "00111110000010101010001111000110", 
    25 => "10111101110110110010011011111101", 
    26 => "00111101111111000101011111000001", 
    27 => "10111110001100100100111011001000", 
    28 => "10111101011100010101000010111010", 
    29 => "00111101000101110101101110100000", 
    30 => "00111100110111011111111111000110", 
    31 => "10111100110000110010010100101001", 
    32 => "00111101011111111011010111111001", 
    33 => "10111101000110001111110101011011", 
    34 => "10111100110110001111111100101000", 
    35 => "10111110100101100010100101010001", 
    36 => "10111101111100000100001111000111", 
    37 => "00111100011100111011010001011100", 
    38 => "10111101110101011110111001010111", 
    39 => "10111101011010001110101010000000", 
    40 => "10111101100011010001001001010101", 
    41 => "10111110000101010001101010000010", 
    42 => "00111110000111110100001010111010", 
    43 => "10111110001010100010010110110011", 
    44 => "10111110100000101011111110010101", 
    45 => "10111101101010000011101101010000", 
    46 => "00111101000111001001100100011000", 
    47 => "10111110011110101010111000001110", 
    48 => "10111100000000111001101101000000", 
    49 => "00111101011010110110000101001001", 
    50 => "00111110010000110000000111101111", 
    51 => "10111101001111100000111110110000", 
    52 => "00111101101000010010010001000010", 
    53 => "10111101001000000010110101110100", 
    54 => "10111110001011100010011100111000", 
    55 => "00111101010100101011100101101110", 
    56 => "10111011100110111010110111011000", 
    57 => "00111101001001010011011101111000", 
    58 => "10111110000111010010001111001000", 
    59 => "00111101101100100000011011010111", 
    60 => "00111101000111110011010000011010", 
    61 => "10111101010101100001110000010110", 
    62 => "10111101110011010111101111010000", 
    63 => "10111101100110100010100011111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiceu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiceu is
    component conv_2_conv_2_weiceu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiceu_rom_U :  component conv_2_conv_2_weiceu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


