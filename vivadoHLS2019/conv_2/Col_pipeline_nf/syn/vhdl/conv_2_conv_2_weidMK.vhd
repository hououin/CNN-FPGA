-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidMK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidMK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000010011011011000010001", 
    1 => "00111110001011101110101001100110", 
    2 => "00111110100011110011001101011110", 
    3 => "10111100010000111111000001001011", 
    4 => "00111110001001010101001011100111", 
    5 => "10111110011010111111101100001001", 
    6 => "10111101111110010010101100111011", 
    7 => "00111101010000110000011111001011", 
    8 => "10111101100001010111110011101110", 
    9 => "10111110010010010110011110000111", 
    10 => "10111110001101101000100111100001", 
    11 => "10111110001011111101010110110010", 
    12 => "00111101010000000100010010100100", 
    13 => "00111101111011111111000001101100", 
    14 => "00111101111110001111111010100000", 
    15 => "00111101100100101101001000111011", 
    16 => "10111101011001100100101000101001", 
    17 => "10111100111011011110110001001100", 
    18 => "00111100101010100111010101010000", 
    19 => "10111110010000000101100100111010", 
    20 => "10111011000101101101100010101001", 
    21 => "00111110001011011101001010101101", 
    22 => "00111101111100110100110111010010", 
    23 => "10111110000100100010011100001100", 
    24 => "10111100100010111100001101110100", 
    25 => "10111100101110101001111010111100", 
    26 => "10111110011111001011011110001110", 
    27 => "00111101100110111011000001101111", 
    28 => "10111101000111000100110010100110", 
    29 => "10111101001100100000100110111100", 
    30 => "00111101101001000010100110110000", 
    31 => "10111110000011011100101110111001", 
    32 => "10111110000101000010101101100000", 
    33 => "00111100100001001110110111010011", 
    34 => "10111110010100001111010110011010", 
    35 => "10111110101101010111011011001000", 
    36 => "10111100011001011010100110000111", 
    37 => "00111011110100001001111000100011", 
    38 => "10111101111011111110001100010010", 
    39 => "10111110000110111111010011000111", 
    40 => "00111101101010001000001010010100", 
    41 => "10111101101100000100110111110000", 
    42 => "00111101100001100010001010110001", 
    43 => "10111101110100010010101011010010", 
    44 => "10111101101000010110111000101010", 
    45 => "10111101001001010100010000000110", 
    46 => "10111110000110011100011000011000", 
    47 => "10111101110111110101111110010100", 
    48 => "10111100010010100110001111110011", 
    49 => "00111101110001001011011100111010", 
    50 => "00111101100111100100001100001010", 
    51 => "10111101101111110010100110100001", 
    52 => "00111100100011100101000011001101", 
    53 => "00111110001111001011100011001100", 
    54 => "10111101110111101100011001001101", 
    55 => "00111110010101001011111110100111", 
    56 => "10111101000001010111111110111110", 
    57 => "10111110001000110111011010001000", 
    58 => "10111101100001001110000101000010", 
    59 => "10111011001010100011100100110100", 
    60 => "00111101100000011000111001100011", 
    61 => "10111110001001000111000001011101", 
    62 => "10111101100100010101001101010111", 
    63 => "10111101010100101001110110001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidMK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidMK is
    component conv_2_conv_2_weidMK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidMK_rom_U :  component conv_2_conv_2_weidMK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


