-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibXr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibXr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110011000000111111100011000", 
    1 => "10111101101110010001001111111011", 
    2 => "00111101001101010110011111111011", 
    3 => "00111101110001110110110101000101", 
    4 => "10111100110000100011000000101000", 
    5 => "00111101111111110110100001100001", 
    6 => "10111110001101110100110001011010", 
    7 => "10111101010101101000111110000001", 
    8 => "00111100111100000000001101001100", 
    9 => "00111011110001111101111110001001", 
    10 => "00111101100100110000000100100111", 
    11 => "10111101010011000011100001100010", 
    12 => "00111100101110110111010011011010", 
    13 => "10111110000110110000101010010001", 
    14 => "00111101111111111011000101110001", 
    15 => "00111100110100100011111000101001", 
    16 => "00111101101010001000000100001010", 
    17 => "00111101111111001101011001101100", 
    18 => "10111101110101101010110110000001", 
    19 => "10111101010000100011000000001011", 
    20 => "10111110101100101100010110101111", 
    21 => "10111110000011110101101000010100", 
    22 => "10111100101110010000100000101010", 
    23 => "10111110100110010110110101101000", 
    24 => "10111101101111101111011100001000", 
    25 => "10111101010100100000010010010101", 
    26 => "00111101100110110111101111110100", 
    27 => "10111110001101101011011010101110", 
    28 => "10111011011110010100000011001111", 
    29 => "00111101101100110111011010001001", 
    30 => "10111101101010000011110001001000", 
    31 => "10111101100010010101010001011100", 
    32 => "10111110001011000101000101110001", 
    33 => "10111101100111101001001001100101", 
    34 => "10111011100111110101000100111111", 
    35 => "10111101110111110001011111111100", 
    36 => "00111110000000110011000000010111", 
    37 => "00111101100011101011110101010111", 
    38 => "10111101111000111110000000100011", 
    39 => "00111101110110100111001100110010", 
    40 => "10111101101100011011000000111001", 
    41 => "10111101000111001000101010011100", 
    42 => "00111101011000111001000100011000", 
    43 => "10111101001010101100001011011010", 
    44 => "10111100110000001010110001001000", 
    45 => "10111101101011001011000011001101", 
    46 => "10111100011011111011101001100101", 
    47 => "00111101100101001101011100111011", 
    48 => "00111101100011011011100000000000", 
    49 => "10111110010000101010111011111011", 
    50 => "10111110011010011000101111111111", 
    51 => "00111101110000010110111001001010", 
    52 => "10111101011000001001010100000110", 
    53 => "10111101111101010010011001001000", 
    54 => "00111101111110010010010000101010", 
    55 => "10111110000111000111111000001010", 
    56 => "10111101001001100011011110000111", 
    57 => "00111101000101000111110000010110", 
    58 => "10111011110011110100110001010001", 
    59 => "00111100101110010001001111010100", 
    60 => "10111110010100000100001010000000", 
    61 => "00111101000011110101111110000001", 
    62 => "00111110001101010110000111000110", 
    63 => "00111101111011111110011001011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibXr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibXr is
    component conv_2_conv_2_weibXr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibXr_rom_U :  component conv_2_conv_2_weibXr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


