-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicpw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicpw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001110010101100011100100", 
    1 => "00111101111100101110000101010100", 
    2 => "10111101000100011100000000110101", 
    3 => "10111101110101001111010000000111", 
    4 => "00111101111111001111100000100010", 
    5 => "00111101010011010000111110111110", 
    6 => "10111100011001000010101100000000", 
    7 => "00111100100000110000101110010001", 
    8 => "10111100110110000011001010100110", 
    9 => "10111000110001111001101010100110", 
    10 => "00111101101111100011111001011000", 
    11 => "10111100110110100001000000000101", 
    12 => "00111100110111010100010011010000", 
    13 => "00111110000111000111011010110001", 
    14 => "00111101000000010101111011110110", 
    15 => "00111100110110001100001010000000", 
    16 => "10111101100000100001001101001011", 
    17 => "10111100111000000111010110010011", 
    18 => "10111101010001001110110101111110", 
    19 => "00111101000000001011011000101111", 
    20 => "10111100100011010010000101110001", 
    21 => "00111110000110011001111000101001", 
    22 => "00111101010100101110011100011000", 
    23 => "00111101011111100110010110001000", 
    24 => "10111101100001000111010110101110", 
    25 => "00111101100110110101101000100100", 
    26 => "10111110000101000101101000100110", 
    27 => "10111101011000111111110011101101", 
    28 => "10111101011111000000111101111101", 
    29 => "10111110001100111000001010000110", 
    30 => "00111101110011000011101010011000", 
    31 => "00111100010010010111110001100110", 
    32 => "00111101011000100011101101011100", 
    33 => "10111101011110011110100111111010", 
    34 => "00111010110000010010001010010100", 
    35 => "10111110010001101100101011001001", 
    36 => "00111101001111100101101101000111", 
    37 => "10111101100111001110111010011101", 
    38 => "00111110000000101100110111010110", 
    39 => "00111100101100011110110000101001", 
    40 => "00111101101100011100011101101010", 
    41 => "00111101001111010010011001111001", 
    42 => "00111101010010110010010110110101", 
    43 => "10111101110000100101100011100111", 
    44 => "10111100000011010010100001111000", 
    45 => "00111101111100101010010110011101", 
    46 => "00111110010001001010101000010011", 
    47 => "00111101111100011010010111111011", 
    48 => "00111110010010000001001011010100", 
    49 => "10111101111101000100011001101000", 
    50 => "00111101001000000000001001000010", 
    51 => "00111101101011010110101101111101", 
    52 => "00111101001100101010001101010101", 
    53 => "00111101110010101100011010010011", 
    54 => "10111101100010001101000000101000", 
    55 => "10111110010100111001111111111110", 
    56 => "10111100101101110001011000010100", 
    57 => "00111101010000011101101101001010", 
    58 => "00111101011000101000100010100111", 
    59 => "10111101001001011000001100110100", 
    60 => "00111101110101000100000101100110", 
    61 => "10111110011000000011011110001110", 
    62 => "00111101000001110111011000010011", 
    63 => "00111110000101011111111100101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicpw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicpw is
    component conv_2_conv_2_weicpw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicpw_rom_U :  component conv_2_conv_2_weicpw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


