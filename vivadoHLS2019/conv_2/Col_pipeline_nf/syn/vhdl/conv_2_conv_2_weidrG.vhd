-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidrG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidrG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101011110001011001110101", 
    1 => "00111100110101100001011101011111", 
    2 => "00111101011111111100110010010101", 
    3 => "10111101111010000000101101100000", 
    4 => "00111101011001110001111100001101", 
    5 => "00111101001010010101000010100000", 
    6 => "10111110001111101010110010001101", 
    7 => "00111101110001011101001101001010", 
    8 => "10111110000110011011010110000110", 
    9 => "00111010101011100001001011010010", 
    10 => "10111110010100001100110110111011", 
    11 => "10111110000100100001001110100101", 
    12 => "10111101100101011010010100101101", 
    13 => "00111100111100011000000010010001", 
    14 => "10111110001011111010010001111011", 
    15 => "00111101111001001101111110111111", 
    16 => "10111101110101011000101011100110", 
    17 => "00111100010000010010001100110001", 
    18 => "10111101101001100011011110101000", 
    19 => "00111101101001000100100000111110", 
    20 => "10111101001111011101101111111111", 
    21 => "00111110000001010001101110101000", 
    22 => "00111100101000001000000100100110", 
    23 => "10111110010100001111011110100001", 
    24 => "00111101101011000001010011111101", 
    25 => "00111100110110001011100100101000", 
    26 => "10111101101001101000101010100000", 
    27 => "00111101100001101100111101100010", 
    28 => "10111101111100011100011100010001", 
    29 => "10111101111011001011001111000110", 
    30 => "00111101110100011111011010000110", 
    31 => "00111101001010100001001001110000", 
    32 => "10111110101010110000010100100101", 
    33 => "00111101010011011101000010101110", 
    34 => "10111101011001110001101101010001", 
    35 => "10111101001101100010001100001010", 
    36 => "10111100111000010011111111010110", 
    37 => "10111110000111000011001010010111", 
    38 => "10111110000111100000100101111110", 
    39 => "10111100011110000011111101011110", 
    40 => "00111101110001010100101110010110", 
    41 => "10111101000100011011110001010010", 
    42 => "00111110001001110101110101001100", 
    43 => "10111101001111101010010111110110", 
    44 => "00111110000001011100001010100110", 
    45 => "10111101111100110001101011111101", 
    46 => "10111110100100000101101100001100", 
    47 => "10111101101001110101111110100111", 
    48 => "00111100100011100000000110100010", 
    49 => "00111100001000100001101110110010", 
    50 => "00111101111001100100010011011100", 
    51 => "00111101010111010111000010001001", 
    52 => "10111100100111100101011111001110", 
    53 => "10111100111010001111111100101001", 
    54 => "10111110001001001110000111011000", 
    55 => "00111110001010110101101111010110", 
    56 => "10111101111010001100011111101101", 
    57 => "10111101000010001001101011101101", 
    58 => "10111101100100011011010100100110", 
    59 => "00111101100010010101101011010000", 
    60 => "00111101110001101111111011100000", 
    61 => "00111101111010000110001011101011", 
    62 => "00111101010000000101001011101010", 
    63 => "10111100100000011001100011101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidrG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidrG is
    component conv_2_conv_2_weidrG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidrG_rom_U :  component conv_2_conv_2_weidrG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


