-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicBy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicBy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011101001010011110010", 
    1 => "00111101010111110011101111011110", 
    2 => "10111100011000010110001010110111", 
    3 => "00111110000101010011011001111011", 
    4 => "00111101010110100000000000001001", 
    5 => "00111101110001010101010010010110", 
    6 => "00111101000110111101000100110011", 
    7 => "00111101111101101100100111001111", 
    8 => "10111110010110101111111110101010", 
    9 => "00111101110101001001111110100110", 
    10 => "00111110000010110100110101110101", 
    11 => "00111101000111110001100011010110", 
    12 => "00111101110101010110000110000111", 
    13 => "10111101110111011110111111101001", 
    14 => "10111101101010100100111011001001", 
    15 => "10111101101000011000010110100101", 
    16 => "10111100101001100111011000111011", 
    17 => "10111100001111001000011010101010", 
    18 => "10111110000111010100000010010010", 
    19 => "00111110000010111000100101110011", 
    20 => "00111011011100101011001111011110", 
    21 => "00111100100011010101001000001010", 
    22 => "10111110000001100100111111000010", 
    23 => "10111100101100010111110000110010", 
    24 => "10111101001000011011110100110011", 
    25 => "00111100100000110011111100100101", 
    26 => "00111101110000101000111001000001", 
    27 => "10111110011011110101011100111000", 
    28 => "10111101110100101101010011011100", 
    29 => "10111101010000010000100101001110", 
    30 => "00111101111001011011100000101110", 
    31 => "00111101110101011000110100111011", 
    32 => "00111110000110010011100011001110", 
    33 => "00111101011010100100101110100110", 
    34 => "10111011111100110011011100111011", 
    35 => "10111110000000001100010000110110", 
    36 => "10111101000001101111010001011011", 
    37 => "10111100100100010111111100110000", 
    38 => "00111101111000101101110000111000", 
    39 => "10111110000101011111001010000110", 
    40 => "10111110000011001011000010000110", 
    41 => "00111101000001001101111001111011", 
    42 => "00111101111100000010000000100011", 
    43 => "10111100100010010110011000101110", 
    44 => "00111110000011100101110110001010", 
    45 => "00111110001000111110110100101011", 
    46 => "00111101111101100110010111011110", 
    47 => "00111110010000011011101001110001", 
    48 => "00111110010001000101001011000100", 
    49 => "10111110000111011001010101001010", 
    50 => "00111101011100001110111001100111", 
    51 => "10111100110001010010000011000110", 
    52 => "00111011000100010011100101011000", 
    53 => "00111101010000010111101101001100", 
    54 => "10111101001001010011011011110001", 
    55 => "00111101011101010000101111111100", 
    56 => "10111101011001000110111101111111", 
    57 => "00111101100001000001110100001101", 
    58 => "00111101001110000110110101101111", 
    59 => "10111011101010000100011000111100", 
    60 => "10111110000000101010100011111010", 
    61 => "10111101101010110110011110010111", 
    62 => "10111101010000000011101111001100", 
    63 => "00111101101001011111000001101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicBy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicBy is
    component conv_2_conv_2_weicBy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicBy_rom_U :  component conv_2_conv_2_weicBy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


