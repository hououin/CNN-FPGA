-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidDI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidDI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010000000110011101101", 
    1 => "10111101111100000110100101110011", 
    2 => "10111101000011010010001110101011", 
    3 => "10111101100010101001100001011011", 
    4 => "00111101111011101001010110100100", 
    5 => "00111101100011111000100010101101", 
    6 => "00111101101000001011100100101011", 
    7 => "10111101101110100101101100101110", 
    8 => "10111010101001010000010010111001", 
    9 => "00111101100101010011010110010111", 
    10 => "00111101011100001110011110110111", 
    11 => "10111101110100001110010101111010", 
    12 => "00111110000000100110111101001010", 
    13 => "10111101001011111000101101111001", 
    14 => "10111101010110100101000100011111", 
    15 => "00111110000111101101101111110010", 
    16 => "10111110000101110110100101011101", 
    17 => "00111100101001101001011010011000", 
    18 => "10111101001111001000001000000001", 
    19 => "10111101000011100001110011101010", 
    20 => "10111110111001101101110110111011", 
    21 => "00111101011100001111010010000001", 
    22 => "10111110000111111111001001100000", 
    23 => "00111101001000010111001101000101", 
    24 => "00111110000011100001011001110000", 
    25 => "00111100111000110110011111100111", 
    26 => "00111110001010100010010010000101", 
    27 => "10111110011011100111000111001011", 
    28 => "10111101110110001010110001101001", 
    29 => "10111011001101000101111001000100", 
    30 => "10111110011011100010110111101101", 
    31 => "00111101001111111010100011010001", 
    32 => "10111101101001001011110000001100", 
    33 => "00111101100101000111001010110100", 
    34 => "00111101111110111101100011100100", 
    35 => "10111101111001110011001111011011", 
    36 => "10111101000011110111100100000111", 
    37 => "00111100001001001100101110000001", 
    38 => "10111101110100000010001011000010", 
    39 => "00111011110001101000000100111011", 
    40 => "10111110100010111001010010100100", 
    41 => "00111101011111110110011000100100", 
    42 => "00111101111010011001100011011110", 
    43 => "00111101101110100110101010110000", 
    44 => "10111110100001110011110110001111", 
    45 => "10111101111110011000101011100100", 
    46 => "10111100000110100010011110101111", 
    47 => "10111100011010110011110010100000", 
    48 => "10111110010001110110001100100111", 
    49 => "10111101101001001001010110001111", 
    50 => "00111110010010101001100101001110", 
    51 => "00111101110100101110110010010110", 
    52 => "10111101101110111100010010010010", 
    53 => "10111101100010001010101110011001", 
    54 => "10111110011000100101001101110011", 
    55 => "00111100001101001100000010110111", 
    56 => "10111100100111001000111101011000", 
    57 => "10111100010010110100111011010101", 
    58 => "10111110001000011110100000100110", 
    59 => "10111100001011001011001011011111", 
    60 => "00111101011010000001010100110100", 
    61 => "00111101010111111100001001101100", 
    62 => "00111100110011111101010000111001", 
    63 => "00111101100101100011011011000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidDI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidDI is
    component conv_2_conv_2_weidDI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidDI_rom_U :  component conv_2_conv_2_weidDI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


