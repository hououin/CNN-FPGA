-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weixdS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weixdS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111011000000010100011010", 
    1 => "00111100011001111000100111011111", 
    2 => "00111011111010001111110101111111", 
    3 => "10111101010010010010101100101100", 
    4 => "00111110010010000010010110100110", 
    5 => "00111101100011001011101010011110", 
    6 => "00111110000101010011000101001101", 
    7 => "10111100101000110000000000011011", 
    8 => "00111101100001011011011101100101", 
    9 => "10111101100111001011100100111101", 
    10 => "10111101110000000111111110101101", 
    11 => "00111110000011011110101000111011", 
    12 => "00111110011110001010101100001011", 
    13 => "00111110000010000110011101010010", 
    14 => "00111011111000101110001101100001", 
    15 => "10111101101111000110001011101111", 
    16 => "00111101111111110001011000001001", 
    17 => "00111101000011100001101101110111", 
    18 => "00111101000111001010111000100101", 
    19 => "10111110001001101110000011111101", 
    20 => "00111101101110001011110001000100", 
    21 => "10111101010001100111000011011110", 
    22 => "00111101010011101100010001010100", 
    23 => "00111100111011110001110001001010", 
    24 => "10111101010101001110000100010101", 
    25 => "10111110100100101001111000000111", 
    26 => "10111110000101010000100000111110", 
    27 => "00111101001100101110100101110011", 
    28 => "10111101101110100011001001111100", 
    29 => "00111101010100000000001101111101", 
    30 => "00111101100011011101110001000101", 
    31 => "10111110100000110000010001111110", 
    32 => "00111000111010011001010000110100", 
    33 => "00111101010110100100111110010001", 
    34 => "00111101011011000000100001001011", 
    35 => "00111101000101101111000101010111", 
    36 => "10111110010001101001111001001100", 
    37 => "00111101110010101010110110000100", 
    38 => "00111101100001111111101000100011", 
    39 => "00111100111011011011111100011111", 
    40 => "10111010001110001110011011101000", 
    41 => "10111110100000000101010000001011", 
    42 => "00111011001100101010100101100010", 
    43 => "10111101110110011111111111001001", 
    44 => "10111101111101100011000000101101", 
    45 => "10111001110001111111001011011101", 
    46 => "00111101101000110011000111010100", 
    47 => "10111101100100011111000000000110", 
    48 => "00111101110110100011111001100110", 
    49 => "10111110101000000111000100010011", 
    50 => "00111110000000000111110011010011", 
    51 => "00111110001100101111111100000001", 
    52 => "00111100101001100001110001100100", 
    53 => "00111100001000111100011110100000", 
    54 => "00111011101000101011111100101000", 
    55 => "00111101101100110111011111011111", 
    56 => "00111100100000000000001101110101", 
    57 => "10111101110100100010010101111111", 
    58 => "10111110000100110101110100100100", 
    59 => "00111110000000110101000100000001", 
    60 => "00111100110111010011000111010100", 
    61 => "10111110010110001101100100110100", 
    62 => "10111101101110111100100010101100", 
    63 => "10111101111001000110111101001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weixdS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weixdS is
    component conv_2_conv_2_weixdS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weixdS_rom_U :  component conv_2_conv_2_weixdS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


