-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib3s_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib3s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111101001100110011000010", 
    1 => "10111101010111000011011001101111", 
    2 => "10111101011000111100011100110110", 
    3 => "10111100011010011110100011111101", 
    4 => "10111101101001110000101101001111", 
    5 => "00111101011001011000000011000111", 
    6 => "00111101110000111011100101100011", 
    7 => "00111101111000011011010011100111", 
    8 => "10111110000101111011011001100010", 
    9 => "00111101110111101000011000100111", 
    10 => "00111101111101001111010110100001", 
    11 => "00111100111010101010101100010000", 
    12 => "00111110000111000001111011000100", 
    13 => "10111110010111110001101110111000", 
    14 => "10111110001111111111101010111001", 
    15 => "10111110001001110010101011100111", 
    16 => "10111110001110000001111100101011", 
    17 => "00111101111101101001101110010111", 
    18 => "10111110100000101101111111001101", 
    19 => "00111101001111110100001000100110", 
    20 => "00111101011101010100011011001011", 
    21 => "10111110001001001101000111100011", 
    22 => "10111110100010110000011011000001", 
    23 => "00111110001100010000001110010010", 
    24 => "00111101000001100010101100111111", 
    25 => "00111101000111011111100011001011", 
    26 => "00111101100011000110011010101110", 
    27 => "10111101100011111010111110011101", 
    28 => "10111110100100100101010110011111", 
    29 => "10111101100100001100110010001111", 
    30 => "10111110000110100000100000111010", 
    31 => "00111101100111011110100100110000", 
    32 => "10111011101111000010100100000011", 
    33 => "10111110011010100100110011011011", 
    34 => "00111110000111010000000000100000", 
    35 => "00111110001101011010110101011111", 
    36 => "00111101110000101010000010100001", 
    37 => "00111110001000010001110010101111", 
    38 => "00111100100110000011110000001010", 
    39 => "10111101111000010110110100100101", 
    40 => "00111100010001011011101011100011", 
    41 => "00111101100001001100001101000001", 
    42 => "10111011001101110101110001101011", 
    43 => "00111101000001010111010100111000", 
    44 => "10111100001010111000110111000010", 
    45 => "00111101110100100010100101001000", 
    46 => "00111101110111010000111001000001", 
    47 => "10111100100100011110110000100101", 
    48 => "00111110000101111011111101101000", 
    49 => "10111110101010010111100110001101", 
    50 => "10111100110111101100101101101000", 
    51 => "00111101100000101110001000010010", 
    52 => "10111110101010111001111110100111", 
    53 => "00111101100101100111011000000000", 
    54 => "10111110001011110110101001010100", 
    55 => "10111110010010010100110001000011", 
    56 => "10111101111011110010000011010010", 
    57 => "00111100110001111111110110110001", 
    58 => "10111110000001010100001101110100", 
    59 => "10111101110010110111000101111110", 
    60 => "00111101011101110011010101000110", 
    61 => "10111110100000101101001111100100", 
    62 => "10111011111000011000111100010110", 
    63 => "00111101101010100011001001010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib3s is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib3s is
    component conv_2_conv_2_weib3s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib3s_rom_U :  component conv_2_conv_2_weib3s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


