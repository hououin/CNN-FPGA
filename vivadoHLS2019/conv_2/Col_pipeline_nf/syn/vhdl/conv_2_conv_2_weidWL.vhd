-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidWL_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidWL_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010100001010101011010001000", 
    1 => "00111110000110101011111111101101", 
    2 => "00111110000100100111010011011111", 
    3 => "10111101100000001101100100111101", 
    4 => "00111101100101111111100001000010", 
    5 => "10111101010101100010011000001001", 
    6 => "10111110000000010000100100111101", 
    7 => "10111101010001100111101011010000", 
    8 => "10111101001111101110100101000111", 
    9 => "10111110000110110100000001110110", 
    10 => "10111101111000111001001101010101", 
    11 => "10111101100000011101111111000111", 
    12 => "10111101000110110010111001011101", 
    13 => "00111101110000110000000100111010", 
    14 => "10111011000110000010011100111101", 
    15 => "00111101100000101111011101100100", 
    16 => "00111100101001001000100101000100", 
    17 => "10111101101110011011010111100100", 
    18 => "00111101100111111011110101000101", 
    19 => "10111100110001100011011100010110", 
    20 => "10111110010000110111110111010011", 
    21 => "00111101100111001001101110111010", 
    22 => "00111101001001101000101001111100", 
    23 => "10111101110101000100011111001011", 
    24 => "10111100100111101100011110101000", 
    25 => "10111101111011110101001110110111", 
    26 => "00111100001011110001001110001001", 
    27 => "00111100001110011100000000110101", 
    28 => "00111100001000110010010011111010", 
    29 => "00111101101001001001011111001001", 
    30 => "00111100101001011111000100110011", 
    31 => "10111101100111010000011110111101", 
    32 => "10111110100101001011110000011000", 
    33 => "00111110000000111101111011001000", 
    34 => "10111101110010111011101010000000", 
    35 => "10111101011100110101110111011101", 
    36 => "00111101000111100001111011001111", 
    37 => "10111101110011100101011111100111", 
    38 => "10111010111100110111100011010010", 
    39 => "10111100100000001100001110001101", 
    40 => "00111110000010011011101000010010", 
    41 => "10111101100010110001100010101011", 
    42 => "00111101101111011111111001001101", 
    43 => "10111101111010110011100000101011", 
    44 => "10111101111010100101110010110110", 
    45 => "10111110100011001111101100011011", 
    46 => "10111101111110011100111001001011", 
    47 => "10111110010000111101101101111011", 
    48 => "10111101100101100001111111100101", 
    49 => "00111101011100010101000101101110", 
    50 => "00111011111001000111001101011010", 
    51 => "10111100101101001101111111010101", 
    52 => "10111101010011010010110010000111", 
    53 => "00111101101001101000010010010100", 
    54 => "10111100101000001001101011010110", 
    55 => "00111101110000100100110011111100", 
    56 => "00111100110000001000110110010000", 
    57 => "10111101110111111101110110000000", 
    58 => "10111101101101101010111010101011", 
    59 => "00111100001111111011000101111010", 
    60 => "00111101110110110011100101001100", 
    61 => "00111101011111001000010011010010", 
    62 => "00111101111100111001101110110101", 
    63 => "10111100010110111011100001101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidWL is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidWL is
    component conv_2_conv_2_weidWL_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidWL_rom_U :  component conv_2_conv_2_weidWL_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


