-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidoG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidoG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100011111011101010011110010", 
    1 => "10111110100011101101100101010010", 
    2 => "10111110010000011101011111001001", 
    3 => "10111110000011110011100001010111", 
    4 => "10111110000110001000101001001111", 
    5 => "00111110101001111100101011001100", 
    6 => "00111011011000101101110111010101", 
    7 => "00111101101100101100011000000000", 
    8 => "10111101100100100111110100001001", 
    9 => "00111101101000011111110010011001", 
    10 => "10111011101011011100101111011010", 
    11 => "10111110001101000100010000000000", 
    12 => "00111101100100001111111011111001", 
    13 => "10111110101111100100011100100100", 
    14 => "10111101101100000000100001111101", 
    15 => "10111011001111100011101111011111", 
    16 => "10111011100101101010011011100011", 
    17 => "00111101100011111100000010000000", 
    18 => "10111110011011101111101000010010", 
    19 => "00111101000101011010101001010100", 
    20 => "10111111000100001111111001011111", 
    21 => "00111011111110011110001001110000", 
    22 => "10111110010111100110011001010001", 
    23 => "00111101100011001001001010110000", 
    24 => "10111101110111000100001101111001", 
    25 => "00111110001011010011100000001110", 
    26 => "00111110010110010001111001110100", 
    27 => "10111110010011111011110001110101", 
    28 => "10111100101001100101001011000000", 
    29 => "10111110010000100111000010000000", 
    30 => "10111110100100001100011011001100", 
    31 => "00111110010000010110111010011100", 
    32 => "10111101110110110111001011011010", 
    33 => "00111101011001110101110011110010", 
    34 => "00111101001110000110101000001100", 
    35 => "10111110011011010000100110010111", 
    36 => "10111101111001001010010111100100", 
    37 => "00111100110010000110010001011011", 
    38 => "10111100110100101100001111111000", 
    39 => "00111110001001011000011101001110", 
    40 => "10111110011011011001011011000110", 
    41 => "00111110001100010000110010111011", 
    42 => "00111100111101000010001110101000", 
    43 => "00111110001011000101001000011100", 
    44 => "10111110101001100110111110000000", 
    45 => "10111110011100010011010000001001", 
    46 => "00111101100100000111010000010110", 
    47 => "00111101101100011011100100010101", 
    48 => "10111110000000101001001011000000", 
    49 => "10111110001000101100110000100101", 
    50 => "10111101010111011100100011010011", 
    51 => "00111110001001100100101111110011", 
    52 => "10111101000111000011111100011111", 
    53 => "10111101110000010111101110010011", 
    54 => "10111110011111011100011111110010", 
    55 => "10111101101101000011000011100101", 
    56 => "00111011000101011000101010101000", 
    57 => "00111011111010001000011111010010", 
    58 => "10111101111001011111010111101110", 
    59 => "00111101110101111101001011001111", 
    60 => "10111110001110010100011110011011", 
    61 => "00111110001000000000110110100000", 
    62 => "00111101111010100001011101011000", 
    63 => "00111101111011011001100111010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidoG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidoG is
    component conv_2_conv_2_weidoG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidoG_rom_U :  component conv_2_conv_2_weidoG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


