-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic8D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic8D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100010100100111101000110110", 
    1 => "10111101110000111010011000101100", 
    2 => "10111110101010011101010100101100", 
    3 => "10111110001010011101110100000110", 
    4 => "00111011111111111101001111001000", 
    5 => "00111110001010110001101011010011", 
    6 => "10111101111011110011011011100101", 
    7 => "00111100100001111000100111001011", 
    8 => "10111011100001001001000000000111", 
    9 => "10111101010011100100111001010011", 
    10 => "10111101000000000101101100101101", 
    11 => "00111110000001101100101110110101", 
    12 => "10111101100101111010110000000101", 
    13 => "00111100101100010111001110011100", 
    14 => "10111101101110000110110111110101", 
    15 => "10111101111110001101010011101100", 
    16 => "00111100101000010101101101111010", 
    17 => "00111001001011100111011101101000", 
    18 => "10111100010010111011000010100011", 
    19 => "00111011110011110000011000111011", 
    20 => "00111101000010010101111100010100", 
    21 => "00111100100110111111001100001101", 
    22 => "00111110000001000111001001110000", 
    23 => "10111101010101101110110100111000", 
    24 => "00111110001011011001110110011000", 
    25 => "10111101100010010001110110101101", 
    26 => "10111101100010111110001101001110", 
    27 => "00111101101111101010011100011010", 
    28 => "10111110000110001101110110110110", 
    29 => "10111101110010011101001100111111", 
    30 => "10111101000000000111010011100011", 
    31 => "10111110001010110111010011010001", 
    32 => "00111101000111000111111011111000", 
    33 => "10111110000000001101111000100100", 
    34 => "00111101101101111001001000100101", 
    35 => "10111110000011110110100111100001", 
    36 => "10111110001001101010001110101010", 
    37 => "00111100110001001011011100001110", 
    38 => "10111101000101101101110111010000", 
    39 => "10111101101110001011110101101011", 
    40 => "00111110011010111010010100110011", 
    41 => "00111101011100001100011100011100", 
    42 => "10111101001000101100110011110011", 
    43 => "10111101110100100011001110110011", 
    44 => "10111100000111000110100111110011", 
    45 => "00111110000111000100010100111101", 
    46 => "00111101101001010000110100100100", 
    47 => "10111101111010001110111100101011", 
    48 => "10111110011101001000110100110011", 
    49 => "10111110100011010111011011001010", 
    50 => "00111110000101001101101100110001", 
    51 => "10111110000011110111000100000100", 
    52 => "10111101111111010110010011100110", 
    53 => "00111101111110100111110010011011", 
    54 => "00111101101101011101000011111111", 
    55 => "10111110001110010010110100011110", 
    56 => "00111101100010111100010101010000", 
    57 => "10111101000010011101101010001000", 
    58 => "00111101101010011010100111100100", 
    59 => "00111100000100100101110011010010", 
    60 => "00111101101111010100000101111000", 
    61 => "00111100011101011010001010010110", 
    62 => "00111101110111000101100110100101", 
    63 => "10111011100010101101111101010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic8D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic8D is
    component conv_2_conv_2_weic8D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic8D_rom_U :  component conv_2_conv_2_weic8D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


