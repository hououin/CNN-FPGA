-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic6D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic6D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111100101101010010001110", 
    1 => "10111101100011100111011101111010", 
    2 => "10111110001011001101111011001101", 
    3 => "10111101101010011001110111111101", 
    4 => "10111110010010010010010011001111", 
    5 => "00111101100011101110000101011001", 
    6 => "10111110100001000010101000011011", 
    7 => "10111100110001000001001010101110", 
    8 => "00111100100011111101111111001011", 
    9 => "10111101001000001011001100100010", 
    10 => "00111101111001000011011000000111", 
    11 => "00111110001001101100110111001100", 
    12 => "10111110101100010001111001110010", 
    13 => "00111101011101001010011110110010", 
    14 => "10111101001101000001011111001001", 
    15 => "10111100101111000110001100111000", 
    16 => "10111100001011111010011101110111", 
    17 => "00111100011001011111010010100100", 
    18 => "00111101100000100000010000011100", 
    19 => "10111101101001100011010001100111", 
    20 => "00111100110110111000001100001010", 
    21 => "10111100110100011000011010110100", 
    22 => "00111101111011001001111010110001", 
    23 => "10111101101011111111010110010111", 
    24 => "10111100110100011101001001011100", 
    25 => "10111100111100101110011100101011", 
    26 => "00111110000001001111100011011000", 
    27 => "00111110100000001110100001101110", 
    28 => "00111101010111111000011100111001", 
    29 => "10111100101110111010110010000101", 
    30 => "00111101100000110000110001010111", 
    31 => "10111110001010001001010111110001", 
    32 => "00111101111000101110101000001100", 
    33 => "00111101110010011011010000011101", 
    34 => "00111110001100000000110110011111", 
    35 => "10111110010001001110011111111000", 
    36 => "10111110100010010010000001000011", 
    37 => "10111110100001111011101111100110", 
    38 => "10111101011100101010110000100101", 
    39 => "10111101101000101110101100100111", 
    40 => "00111100110101111000010010111101", 
    41 => "10111101110001111111100000110110", 
    42 => "10111101110101001101001000111111", 
    43 => "00111100111110001100110010111000", 
    44 => "00111100011011100000110000111011", 
    45 => "00111101111000111100110000101011", 
    46 => "10111110000000100101010000000110", 
    47 => "10111110001101010001001010100000", 
    48 => "10111110011100011101110101100110", 
    49 => "10111110000101000010110100011011", 
    50 => "00111101100000010110001011111000", 
    51 => "10111110010010110101100011101110", 
    52 => "10111101111001110101101010001001", 
    53 => "00111101101100000011011010000101", 
    54 => "10111110010110110110000001000001", 
    55 => "10111101111010000111000000100000", 
    56 => "00111101110111011011001000100000", 
    57 => "10111101001000100001000110000011", 
    58 => "00111101011000100001111000011110", 
    59 => "10111100100111001100001000000011", 
    60 => "00111011100001010000101111001011", 
    61 => "00111101110111001110110110110101", 
    62 => "10111101010110100010111101100111", 
    63 => "00111100100000111000100000000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic6D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic6D is
    component conv_2_conv_2_weic6D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic6D_rom_U :  component conv_2_conv_2_weic6D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


