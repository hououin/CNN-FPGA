-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibyn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibyn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100100100100001100101010", 
    1 => "10111110000100101111010011001111", 
    2 => "00111100111000011110000000001010", 
    3 => "00111110001101100111010101101110", 
    4 => "10111101101011000001000101011101", 
    5 => "10111101100100001010110101011001", 
    6 => "10111101100010011101101000100100", 
    7 => "00111101001101111100111110100100", 
    8 => "10111101101010100111011101000001", 
    9 => "00111101100010001101111001011111", 
    10 => "00111101111111001010000110000110", 
    11 => "10111100100001001001110101100010", 
    12 => "10111110000000011001011110100000", 
    13 => "00111110010111011000111111100011", 
    14 => "00111101110000111110001011101010", 
    15 => "00111101110100100000101111010111", 
    16 => "10111110101001111111101000010000", 
    17 => "10111101001101111111011110000001", 
    18 => "00111100101110011011101011101000", 
    19 => "10111110001111010111101100100101", 
    20 => "00111110001101010010100111110100", 
    21 => "00111100010110011011100100001010", 
    22 => "00111101101101011011101100011010", 
    23 => "10111101111010101111111100111101", 
    24 => "10111101110000000100110010111011", 
    25 => "00111100010110100010101100110000", 
    26 => "10111100001100101011101111111000", 
    27 => "10111101110010100111110101010010", 
    28 => "00111110010000000000010000000010", 
    29 => "10111110000111011010010001001011", 
    30 => "10111101101101010011011010000110", 
    31 => "10111110010001100101100010010010", 
    32 => "10111011110100101100011111000011", 
    33 => "00111110000001110101000100110011", 
    34 => "00111100111010001000011010100110", 
    35 => "10111110000100101101011011011101", 
    36 => "00111101100010110010010010111101", 
    37 => "00111101000111110010000110100011", 
    38 => "10111101011101011111110011001011", 
    39 => "10111110010111000001000001000110", 
    40 => "10111110110111011000000011010110", 
    41 => "00111110000001110111001100111110", 
    42 => "10111110000010000010111000000011", 
    43 => "00111110011011101111100010000100", 
    44 => "00111101000101000010011100011100", 
    45 => "00111101100010001111111111101001", 
    46 => "00111110001010000000001000000100", 
    47 => "00111110000110100001000000010110", 
    48 => "10111101011001000101001000110000", 
    49 => "00111100111011111010101001101000", 
    50 => "10111110010001010011000100111001", 
    51 => "10111110000111001011101001001101", 
    52 => "10111101111111111110000111110110", 
    53 => "10111101110000101101100011110110", 
    54 => "10111110010100011110001000010010", 
    55 => "10111101110100101001110110001000", 
    56 => "00111101100010010011001000110100", 
    57 => "10111110010000100111001100010000", 
    58 => "10111110010010100101001000000111", 
    59 => "00111010101001101001010001100111", 
    60 => "00111110000011100001111010000110", 
    61 => "00111101011000000000011010001101", 
    62 => "10111110001001111110111010001011", 
    63 => "10111110010000101110111011000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibyn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibyn is
    component conv_2_conv_2_weibyn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibyn_rom_U :  component conv_2_conv_2_weibyn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


