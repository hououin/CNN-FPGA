-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiVhK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiVhK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100001110010011110110", 
    1 => "10111110000001110110101101000000", 
    2 => "10111110011001000010110111001101", 
    3 => "00111110000100010001101001111100", 
    4 => "00111101011000001101011111010000", 
    5 => "00111101011110001011111010110111", 
    6 => "00111010101100010001101111111010", 
    7 => "10111110000011001011101100000010", 
    8 => "00111101010110000111111001010100", 
    9 => "00111101010010010100010011110110", 
    10 => "00111100111110110100010000001100", 
    11 => "10111100111101000010100001101100", 
    12 => "00111100110010010110101001101010", 
    13 => "10111101000010110011110011010010", 
    14 => "10111100111010101111000011110110", 
    15 => "00111101100101101110000000111011", 
    16 => "10111100010110000000011110110000", 
    17 => "00111100101111000011001100110000", 
    18 => "10111101001101000010101110011000", 
    19 => "00111101011001111111011100010011", 
    20 => "10111101000101101011110101001000", 
    21 => "10111110001110111110011111010110", 
    22 => "10111110000001001100101111000100", 
    23 => "10111101101101101011011100011111", 
    24 => "00111101110110000110111001111111", 
    25 => "00111101011111101000000100101011", 
    26 => "00111100000111011011000001111001", 
    27 => "00111101100110010011011100001011", 
    28 => "10111101100110010111000001011001", 
    29 => "00111101010100001110101001101111", 
    30 => "10111100101000001000011101001101", 
    31 => "10111110010101111001011000101011", 
    32 => "00111100011100001110011111111110", 
    33 => "10111110000001111001100101100111", 
    34 => "00111101010001101111111101110110", 
    35 => "00111101000101011010100001101000", 
    36 => "10111110000100011011010100000011", 
    37 => "00111100101101001110001001010000", 
    38 => "00111100111111111010001001110111", 
    39 => "00111110001110111100101010101100", 
    40 => "00111101101011011101011101011100", 
    41 => "00111110000000100011001001010111", 
    42 => "00111101010100001110001101110111", 
    43 => "00111101111000110010100101010101", 
    44 => "10111101001011100100010001111100", 
    45 => "00111101111110111101100001111111", 
    46 => "10111101110101000110001011101011", 
    47 => "10111100110100000111110001001110", 
    48 => "00111101001001011011101110000010", 
    49 => "10111101011001100011001001001011", 
    50 => "00111100100110110111001110010000", 
    51 => "00111101000101010110001001110110", 
    52 => "10111110001100101111000010010111", 
    53 => "10111100110100010000101100000000", 
    54 => "10111101000000100100011100100110", 
    55 => "10111101110010101100001011010000", 
    56 => "10111101011011011000110110010111", 
    57 => "10111101101001111010011001000000", 
    58 => "00111100100101110110011101101111", 
    59 => "00111101100001001010111011100101", 
    60 => "00111011111001000001110000100011", 
    61 => "10111011111110110100010101011110", 
    62 => "00111101000010000101011101100000", 
    63 => "00111110000100110100110111010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiVhK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiVhK is
    component conv_2_conv_2_weiVhK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiVhK_rom_U :  component conv_2_conv_2_weiVhK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


