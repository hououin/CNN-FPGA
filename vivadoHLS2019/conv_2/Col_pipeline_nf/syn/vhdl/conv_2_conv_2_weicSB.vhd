-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicSB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicSB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010111100000000001010", 
    1 => "10111110011110001101100010000011", 
    2 => "10111110000100111111000101101110", 
    3 => "00111011110010010100100100111101", 
    4 => "10111101110110000001111111111100", 
    5 => "10111100101001111000010111110100", 
    6 => "10111110101010011010011001000101", 
    7 => "10111100111001101011000101111100", 
    8 => "00111100100100111111011010100100", 
    9 => "10111011110010101110010001001001", 
    10 => "00111100110011001001011100110000", 
    11 => "00111101000010100001111110110101", 
    12 => "10111110100111011010100010011001", 
    13 => "10111110000010010101110011110000", 
    14 => "10111100110101011100100011100010", 
    15 => "10111011000110100000111111000100", 
    16 => "10111101110111010110010100110010", 
    17 => "00111100000011000001100010111010", 
    18 => "10111110000101001110000000010111", 
    19 => "10111101011010111001110100110011", 
    20 => "10111110001100011010100011010011", 
    21 => "10111110101001001100011010101111", 
    22 => "10111101011011001000110100011111", 
    23 => "10111110001000000010010111111100", 
    24 => "10111101111110100001001100010111", 
    25 => "00111100111100101110011101011010", 
    26 => "00111101101011001101100111101011", 
    27 => "00111110111010010011101010010101", 
    28 => "10111101000011000001100000110000", 
    29 => "10111110000001100111101111011111", 
    30 => "00111101110010110110010111011101", 
    31 => "00111101101010001110010000001100", 
    32 => "00111100101001111001100011011000", 
    33 => "00111110010111001100110000011010", 
    34 => "10111101000011011110111101110001", 
    35 => "10111101110101101011100010111111", 
    36 => "10111110101001101110011100100111", 
    37 => "10111110001110110011011001011101", 
    38 => "10111101101001000110110010011111", 
    39 => "10111110001101010101000111110010", 
    40 => "10111110100101000110110100010101", 
    41 => "10111101100010111101001111000010", 
    42 => "10111110100011110011111001110101", 
    43 => "00111101101010111100010001110010", 
    44 => "00111110100000110111100111111011", 
    45 => "00111010111110001011011100100000", 
    46 => "00111100110111100110101000101110", 
    47 => "10111101000001011111000010100111", 
    48 => "10111110000010011110101110011100", 
    49 => "00111101011010100001100010011101", 
    50 => "00111001101111111101011000101010", 
    51 => "10111101100110111000110010001001", 
    52 => "00111110000010000111100110010101", 
    53 => "10111110010111100010011111000100", 
    54 => "10111100000110001001010011111010", 
    55 => "00111110011001000001011100010001", 
    56 => "00111101111101010011010110011001", 
    57 => "00111110001101011101010000010001", 
    58 => "10111110100110000010001101101010", 
    59 => "00111101001100010100110101110010", 
    60 => "00111101111001000101000101010000", 
    61 => "00111100001001100101101101001110", 
    62 => "10111101010111001101011001101000", 
    63 => "00111100101000101001111101100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicSB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicSB is
    component conv_2_conv_2_weicSB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicSB_rom_U :  component conv_2_conv_2_weicSB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


