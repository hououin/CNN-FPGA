-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weickv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weickv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100111010001101100011000", 
    1 => "00111100101111010010011100011000", 
    2 => "00111101100010001000111111000010", 
    3 => "10111101100010001110001011001001", 
    4 => "10111101100101001111000111100001", 
    5 => "10111011010000110110000101110000", 
    6 => "10111110001111010000001100101010", 
    7 => "10111011111110110000110000001010", 
    8 => "10111110000100010010011101110000", 
    9 => "00111101110011001011111111110010", 
    10 => "00111100101101101100111001101000", 
    11 => "00111101010011000100111001100000", 
    12 => "10111101100100110001000101011010", 
    13 => "10111110001011000100010011111101", 
    14 => "10111111001000101100011000000101", 
    15 => "10111110111101011111010010101110", 
    16 => "10111110101001011101001011101011", 
    17 => "00111100101000100101011011100110", 
    18 => "10111110000100010100100110110101", 
    19 => "00111100000101011000111011000101", 
    20 => "00111110000000100111000110001100", 
    21 => "00111100111110000111110001110011", 
    22 => "10111110000101100101101000111001", 
    23 => "10111110100011011110000111101110", 
    24 => "10111110011001000100111111010001", 
    25 => "00111101001011001111110001011110", 
    26 => "10111101000001100101110011101111", 
    27 => "10111110000001000100010101101010", 
    28 => "10111110111000100011001001000100", 
    29 => "10111101101000110100001001001100", 
    30 => "10111101101101011111000101010001", 
    31 => "00111101101100001111000100111000", 
    32 => "10111101101000111001001100100000", 
    33 => "00111110100000101011111111100010", 
    34 => "10111101101101111011101000010011", 
    35 => "00111101010001011100000101010001", 
    36 => "00111110011010110110111101111001", 
    37 => "10111101011110010111010110000111", 
    38 => "10111110011010010101101011010011", 
    39 => "10111101100010010110110000010000", 
    40 => "10111100010100110101000010001101", 
    41 => "10111110000110100011111111000010", 
    42 => "00111100000100000101100001111010", 
    43 => "10111011100001001100100100000001", 
    44 => "10111101100110010110010000011110", 
    45 => "10111110001100010111100001101000", 
    46 => "10111110101100011101110110111100", 
    47 => "10111110011101101110000011000100", 
    48 => "10111100110010011010111111111101", 
    49 => "00111101101110001001001110100010", 
    50 => "10111101111100111000111001000010", 
    51 => "10111110001001000100110100111100", 
    52 => "10111100111010011000111010011100", 
    53 => "00111101011011101001001111000011", 
    54 => "10111110001111110111110100111010", 
    55 => "00111101110011000011011010011100", 
    56 => "10111110100000000100111111000100", 
    57 => "00111101010101001001100101100101", 
    58 => "00111100011011010001000100011011", 
    59 => "10111110110100010101111011001110", 
    60 => "10111101000000001101100110101011", 
    61 => "00111101011010001010111101111001", 
    62 => "10111101110011111001101100001100", 
    63 => "10111101101000000111110110101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weickv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weickv is
    component conv_2_conv_2_weickv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weickv_rom_U :  component conv_2_conv_2_weickv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


