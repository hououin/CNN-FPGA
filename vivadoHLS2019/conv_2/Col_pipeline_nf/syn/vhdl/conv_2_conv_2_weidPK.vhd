-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidPK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidPK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110011001101101000111101", 
    1 => "10111101100001010001101101010111", 
    2 => "00111101010110001000010011011010", 
    3 => "10111011110100000001101100110101", 
    4 => "00111101101010110111110010001010", 
    5 => "10111110001001001010010101010010", 
    6 => "00111101101110011101010111000000", 
    7 => "10111110000000000011111000110100", 
    8 => "00111101110100101100110010111001", 
    9 => "10111110001010001001111101001111", 
    10 => "10111110101111100010111001010000", 
    11 => "10111110001001100011000100000000", 
    12 => "00111101100110010001010000101101", 
    13 => "00111100000001110111111111010110", 
    14 => "00111110000110111001100100011101", 
    15 => "00111101100100100110011010110110", 
    16 => "10111101010000001011000000001111", 
    17 => "00111100110101001010011111001010", 
    18 => "10111101010111101110100110101000", 
    19 => "00111110001010111000000101101100", 
    20 => "10111101101001111100110000011001", 
    21 => "00111011010101001000111000110010", 
    22 => "00111101001010100000111001011010", 
    23 => "10111101101001000111001011110101", 
    24 => "00111101111110001100111001000100", 
    25 => "00111101110010101010111010001100", 
    26 => "10111110001110101000000010110001", 
    27 => "00111101110100111111111101100101", 
    28 => "00111110000000110110101011111010", 
    29 => "10111101110010100011010111111011", 
    30 => "10111101010001100110001000101010", 
    31 => "00111101001111000000011011011010", 
    32 => "10111110011001001100010100000010", 
    33 => "10111101000110100001100010001001", 
    34 => "10111101000001000110000110111011", 
    35 => "10111110010111111000010011000110", 
    36 => "00111101100111011010001101011100", 
    37 => "10111110100001001011010000101100", 
    38 => "00111101110101110011011000101101", 
    39 => "10111101011011110010011000001001", 
    40 => "00111101010000010011000011010000", 
    41 => "00111101100000001101110000110001", 
    42 => "00111110000110100111100000001110", 
    43 => "00111100000110010111101010101001", 
    44 => "10111101101011101110100100101111", 
    45 => "10111110011101101110000011001001", 
    46 => "00111101111100101011110111000111", 
    47 => "10111100110100011010111001010110", 
    48 => "10111101101100001101001010011110", 
    49 => "10111101101011100100001010001100", 
    50 => "00111110011001110001000101001001", 
    51 => "10111110001011101011011110010100", 
    52 => "00111101100101011101101011100000", 
    53 => "00111110001011100111001101100000", 
    54 => "10111101101010000110000000011110", 
    55 => "00111110001100111111100101000111", 
    56 => "10111101110010101011010100001000", 
    57 => "10111100011000001101100000010110", 
    58 => "10111101010001101100011101001100", 
    59 => "10111101000010101101101110100110", 
    60 => "00111110010011100000010100001001", 
    61 => "00111110010111000100011101110111", 
    62 => "10111101111011000101111101001110", 
    63 => "10111110000110100000101110010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidPK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidPK is
    component conv_2_conv_2_weidPK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidPK_rom_U :  component conv_2_conv_2_weidPK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


