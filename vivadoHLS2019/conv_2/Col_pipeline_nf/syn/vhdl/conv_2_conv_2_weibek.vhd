-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibek_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibek_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111000101100011001001110", 
    1 => "10111110101011010011011111011100", 
    2 => "00111110000000001001110110101001", 
    3 => "10111101110100010000000001100010", 
    4 => "10111101101110000111111001111010", 
    5 => "00111101111101001101110110011010", 
    6 => "00111100110101011001101001111011", 
    7 => "00111100011000101110100111111101", 
    8 => "10111100100110100010100010001110", 
    9 => "10111100001010001110111000010011", 
    10 => "00111110000011101011001110010111", 
    11 => "00111110100000110100001000110000", 
    12 => "10111110000110100110010001011011", 
    13 => "10111101111111000000011100001010", 
    14 => "00111110010000101000000001000011", 
    15 => "00111110011000011101111110010110", 
    16 => "00111101011001011011000001111101", 
    17 => "10111100101010001010010101100000", 
    18 => "00111110000000100000111000100000", 
    19 => "00111101011101011101000111111111", 
    20 => "00111101111010000100111000100011", 
    21 => "10111100101101101101110011110100", 
    22 => "00111101011110001111000101101111", 
    23 => "00111011011000110011111000001110", 
    24 => "00111101110110010100001000001111", 
    25 => "00111110000110011011000010011101", 
    26 => "10111110010011111011101001001100", 
    27 => "10111110001110111000011111100100", 
    28 => "00111110001100010100011000010000", 
    29 => "00111101100101100101100101011101", 
    30 => "10111110000001100010110100001011", 
    31 => "10111101100010011001110111100110", 
    32 => "00111101110011011111001000101010", 
    33 => "10111110011111110010110000010100", 
    34 => "00111101111111101010100010010110", 
    35 => "10111110100011000100101011110100", 
    36 => "10111101101000001000100011001011", 
    37 => "10111110011101111110011001010011", 
    38 => "00111100001010101111001000100101", 
    39 => "00111011011110001111101001111000", 
    40 => "00111110000101100011100110000101", 
    41 => "00111110101011000011000111001010", 
    42 => "00111100000010100100001110101111", 
    43 => "00111100111001111101010001100010", 
    44 => "00111101110111001100011001111000", 
    45 => "00111101010000111010001001101011", 
    46 => "00111110000110100010010011100001", 
    47 => "00111101010010001101111010011100", 
    48 => "00111101101110011111100000000100", 
    49 => "10111110101110010101010000000111", 
    50 => "00111101001011101001010100100001", 
    51 => "10111111000000110100100101011010", 
    52 => "10111110000010111110000000000110", 
    53 => "10111101010111111011010000011011", 
    54 => "00111101100110011111000011100000", 
    55 => "10111101100010111101101010010111", 
    56 => "10111101010100100101101010111111", 
    57 => "00111110011000111011100000110111", 
    58 => "00111100111101101000100001001110", 
    59 => "00111110001011010010001110000110", 
    60 => "00111101001001011000101101011111", 
    61 => "10111101001000001000000100010111", 
    62 => "10111110001001100011011101111010", 
    63 => "10111110001101000010111110000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibek is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibek is
    component conv_2_conv_2_weibek_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibek_rom_U :  component conv_2_conv_2_weibek_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


