-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicVB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicVB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110011100100010000100110", 
    1 => "10111110111000000111000011001000", 
    2 => "00111101111011111111111010101011", 
    3 => "10111101111000110100110010100000", 
    4 => "00111100111100111111001011111101", 
    5 => "00111101100110110001010100111000", 
    6 => "10111101001100000110101110010111", 
    7 => "10111101110010100011000010010001", 
    8 => "00111110001010110001100010000101", 
    9 => "10111110000000100010010011010100", 
    10 => "10111110001000110010000001010101", 
    11 => "00111101011010100001001111010111", 
    12 => "10111101101101110111110000000010", 
    13 => "10111100001000101011100101110010", 
    14 => "00111101000110110011101110110110", 
    15 => "10111011110010101010101001101110", 
    16 => "00111100101110011100001010010000", 
    17 => "00111101001110111110100110001101", 
    18 => "10111101101100010010011110100000", 
    19 => "00111100100011001100101000000010", 
    20 => "10111110001000101111100010000000", 
    21 => "10111011010001000011000111011010", 
    22 => "10111101101000011000010001011000", 
    23 => "00111110001010011000011000010001", 
    24 => "10111100000111010001101001110101", 
    25 => "00111100010111011100111011110100", 
    26 => "10111101101011111010111100110011", 
    27 => "00111101100101110111111000100011", 
    28 => "10111101010011011110011111001101", 
    29 => "10111110000001100010111000111101", 
    30 => "10111101101111100111111110010110", 
    31 => "10111110000001100011100011111101", 
    32 => "00111100100110001011101000101100", 
    33 => "10111101111011100001000110100101", 
    34 => "10111101101111011100000101100011", 
    35 => "10111110000111010010111101101110", 
    36 => "10111101100000010011100010011011", 
    37 => "10111101000110010001111110001010", 
    38 => "00111110000101000001010110100011", 
    39 => "00111100110000010011101101011001", 
    40 => "00111101001001011000000010111000", 
    41 => "10111100100101111000110000100001", 
    42 => "10111100101101110010111111000110", 
    43 => "10111101100011101000101011110011", 
    44 => "00111101001101011110110010000110", 
    45 => "10111101110010000010011100001010", 
    46 => "10111101100010001111000000011100", 
    47 => "00111101110101111010011000111011", 
    48 => "00111101100000011100110110110010", 
    49 => "10111101100011110001111001011001", 
    50 => "10111101001111100010110110001011", 
    51 => "10111101100011001111010111000011", 
    52 => "00111101111010001010110011011101", 
    53 => "00111101011110000111010101100111", 
    54 => "00111101111101111100100010110011", 
    55 => "10111110010001101001101010110110", 
    56 => "10111101100101000000010000101011", 
    57 => "00111110000011011100101101001110", 
    58 => "00111101101101110010100101111110", 
    59 => "00111100110001110100010100111011", 
    60 => "10111101101001000010001100000100", 
    61 => "00111110000011011011100110111011", 
    62 => "10111011100110110011100011101010", 
    63 => "00111101101011100101001001101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicVB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicVB is
    component conv_2_conv_2_weicVB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicVB_rom_U :  component conv_2_conv_2_weicVB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


