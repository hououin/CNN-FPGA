-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibKp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibKp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001011000001101011001000", 
    1 => "00111100011100011001111101101100", 
    2 => "10111110001100000110001001100101", 
    3 => "10111101100000001010110101110111", 
    4 => "10111101100111110100001001001110", 
    5 => "10111110011010111011111011101111", 
    6 => "10111110001001101111010010101101", 
    7 => "00111101101110101100001010010011", 
    8 => "00111011010011010111101100110001", 
    9 => "00111101011110001001000000011011", 
    10 => "10111110110101100110100010011110", 
    11 => "10111110001111011100000000010001", 
    12 => "10111110010111111100001100111101", 
    13 => "00111101101101110010000100001100", 
    14 => "00111011011101110010111000100001", 
    15 => "00111100100001110110010111100100", 
    16 => "00111101100100111100100101010000", 
    17 => "10111100000110010011010001010010", 
    18 => "00111101101000111111101111000110", 
    19 => "00111100011010001110011001111001", 
    20 => "10111110000100000100000100110010", 
    21 => "10111100000110011000011000111100", 
    22 => "00111100011101111011010001001011", 
    23 => "10111101001010111110010011010001", 
    24 => "10111101000101111110111011100100", 
    25 => "10111110100011001011111100011011", 
    26 => "00111101101011001010110111111111", 
    27 => "10111110011010010100101101010011", 
    28 => "00111110010011110100110001000110", 
    29 => "10111101100111100001110000100100", 
    30 => "10111110000100101101101111111100", 
    31 => "00111110001011011110111011110101", 
    32 => "10111110010110011000100010010100", 
    33 => "00111110011110001110111111001011", 
    34 => "10111110001110100011101010000000", 
    35 => "10111110110101010110111100110001", 
    36 => "10111101001100111111110010010010", 
    37 => "10111110010111010101101001100010", 
    38 => "10111110000010101010110000001111", 
    39 => "10111110000100100010000110011001", 
    40 => "10111101100100010011001010011100", 
    41 => "10111101111100110001001110110000", 
    42 => "00111110000110011111010110001111", 
    43 => "00111100111101101110101001110110", 
    44 => "10111101101100111010010100101010", 
    45 => "10111111000001010010111000000100", 
    46 => "10111110000100011000111011000011", 
    47 => "10111110010100001111111111100000", 
    48 => "00111011100111111011111101100001", 
    49 => "10111101111011101110010111000100", 
    50 => "10111110001110001010111010110100", 
    51 => "10111110011001001111111010010011", 
    52 => "00111101101010000000100100100111", 
    53 => "10111101110010010001010111101100", 
    54 => "10111101110100111100101011101011", 
    55 => "00111110100010000000101010110111", 
    56 => "00111100100101101011011111010001", 
    57 => "00111100100011000010001100010011", 
    58 => "10111100111100100101011011000001", 
    59 => "00111101010010001001001110100101", 
    60 => "10111110100110110011010001000100", 
    61 => "00111101111000010001100111110111", 
    62 => "10111110100111100001111101101111", 
    63 => "10111110000010100110001000001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibKp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibKp is
    component conv_2_conv_2_weibKp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibKp_rom_U :  component conv_2_conv_2_weibKp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


