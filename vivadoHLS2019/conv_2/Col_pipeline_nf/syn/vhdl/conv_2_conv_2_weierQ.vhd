-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weierQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weierQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101111000101101010000001", 
    1 => "10111100001100010110101101000101", 
    2 => "10111101011011110111101100000111", 
    3 => "10111100110011000111111000000011", 
    4 => "10111101100001111101010101100110", 
    5 => "00111110010110001110101110100111", 
    6 => "10111110000110100100010110100100", 
    7 => "00111101111111000000111000101010", 
    8 => "00111101110110000010010010000011", 
    9 => "00111110000111110110111010010101", 
    10 => "10111110010000100100100100000110", 
    11 => "00111101001000111000011101101011", 
    12 => "10111100001001001110011010100010", 
    13 => "00111110000010101101001000000111", 
    14 => "10111101101100100101111101011011", 
    15 => "00111100101001110010000100001001", 
    16 => "00111100110110001100011100011101", 
    17 => "00111110001000101000101110100000", 
    18 => "10111101011000101011001111100111", 
    19 => "10111101110010001000000001010101", 
    20 => "10111110010011001100011101101001", 
    21 => "00111101101011010001000001000101", 
    22 => "00111101001110100010101001000011", 
    23 => "10111100110100111001001010011110", 
    24 => "10111110010110001101110011110011", 
    25 => "10111110000100111110000101110111", 
    26 => "00111110000111100011111001101011", 
    27 => "00111101001011001111111101100101", 
    28 => "10111101011011000101100001101010", 
    29 => "00111100000110000101111101010111", 
    30 => "00111110000100111001001001110010", 
    31 => "10111101101111010111011110111100", 
    32 => "00111110100000000111010000111101", 
    33 => "10111110010001001101100101000100", 
    34 => "00111110011110101000011001110101", 
    35 => "10111101111110001111101101110001", 
    36 => "10111110001100000001001000001011", 
    37 => "10111110001110110010111010100100", 
    38 => "10111110010101001011100011101000", 
    39 => "10111101101100110101101100110100", 
    40 => "10111101011000000100111100101011", 
    41 => "10111110000000010111110001101100", 
    42 => "10111011100001000110101111110111", 
    43 => "10111110011100101101110010000011", 
    44 => "00111110000110110110100110100101", 
    45 => "10111110000001100111111111111011", 
    46 => "10111101010111100101100000110101", 
    47 => "10111100100011101011010011000100", 
    48 => "10111110000110101101010001001110", 
    49 => "10111110000001001101010111100110", 
    50 => "10111101101000110011110100110110", 
    51 => "00111100100101110111100100100001", 
    52 => "10111110010001010111110011101100", 
    53 => "00111101101011010100000000010000", 
    54 => "10111110000100010110101011100100", 
    55 => "10111101001101111100110011110011", 
    56 => "10111101111101011111101110111110", 
    57 => "10111110011001011110011000110000", 
    58 => "10111101011100111001111011110100", 
    59 => "10111101001110000011110000101001", 
    60 => "00111101110010011110001011001001", 
    61 => "10111101111111101110001101110100", 
    62 => "10111101001111010111000011001001", 
    63 => "00111101001101111111110100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weierQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weierQ is
    component conv_2_conv_2_weierQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weierQ_rom_U :  component conv_2_conv_2_weierQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


