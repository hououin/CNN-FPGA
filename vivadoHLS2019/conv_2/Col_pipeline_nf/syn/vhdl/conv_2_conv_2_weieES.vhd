-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieES_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieES_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101101101110011010011101", 
    1 => "10111101100111001110000010011010", 
    2 => "10111110010111001010011000100001", 
    3 => "00111110000000000010101011111011", 
    4 => "10111101110101110011110101110000", 
    5 => "00111110000100001010011101001110", 
    6 => "10111101111001001100110110001100", 
    7 => "00111100100001001011011010100010", 
    8 => "00111110000010111000010111011111", 
    9 => "00111101111011011010111101100111", 
    10 => "10111110000111001011011110000111", 
    11 => "00111011000100110110101001011110", 
    12 => "10111100111100101101111000000010", 
    13 => "00111100101101011010101011111001", 
    14 => "00111101110010101001111110000100", 
    15 => "00111101101101001011111111000010", 
    16 => "00111101000111111010011010001010", 
    17 => "00111110010001000101011110111010", 
    18 => "00111100111111111110111110001001", 
    19 => "10111110001111000101110100110101", 
    20 => "00111011111000101011011001100110", 
    21 => "00111100000001001000101011011101", 
    22 => "00111101101101111100001010100000", 
    23 => "10111101100111100101101011000010", 
    24 => "10111110010110100110000010011111", 
    25 => "10111011100011000100101101111001", 
    26 => "00111110001010001011101011101010", 
    27 => "00111110100001010100000111110101", 
    28 => "10111101110010110101110111000010", 
    29 => "10111101001010011101101010010111", 
    30 => "00111110011101100110101000000101", 
    31 => "10111100110111001100100011110111", 
    32 => "00111110001001001011011111011100", 
    33 => "00111101101101001001111110101001", 
    34 => "00111110001110010111000010001000", 
    35 => "10111110001110100011010100110111", 
    36 => "10111111000001110110111111000100", 
    37 => "00111110000000011010010010010011", 
    38 => "10111110011100011101000000100111", 
    39 => "00111101000110111110100010100100", 
    40 => "10111101100000000100000010010111", 
    41 => "10111101001110010000000100100100", 
    42 => "00111101110100010111111000010100", 
    43 => "10111100110110101110000001000001", 
    44 => "00111110000100010110100110100101", 
    45 => "10111110001000010100110111101000", 
    46 => "00111101010100100111100001110001", 
    47 => "00111101111000100100110011000000", 
    48 => "10111011000010110100001110100000", 
    49 => "00111101011001000011010000000101", 
    50 => "10111100001001110011001001010110", 
    51 => "10111101111011111101011011001101", 
    52 => "00111100101000111001100101001111", 
    53 => "00111101010111010110100000101100", 
    54 => "10111110011010101001101001011001", 
    55 => "10111110100011000010100110101011", 
    56 => "10111101110001001110001101101110", 
    57 => "10111110010000010010110000001111", 
    58 => "10111101100101011111111111000110", 
    59 => "10111100100101010100010001000111", 
    60 => "10111100011010010100000111111010", 
    61 => "10111110001010101001011010101010", 
    62 => "00111110000000001111000110011101", 
    63 => "00111101101101100111111001010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieES is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieES is
    component conv_2_conv_2_weieES_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieES_rom_U :  component conv_2_conv_2_weieES_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


