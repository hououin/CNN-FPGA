-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidjF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidjF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010001100010100111101", 
    1 => "00111101011001010010011111011010", 
    2 => "00111011110000000101111010001001", 
    3 => "00111101010111011001010010001100", 
    4 => "00111101011010011011111001011000", 
    5 => "10111101110100011101111010000111", 
    6 => "10111110101011110001110011101000", 
    7 => "00111110001100010110010111111100", 
    8 => "00111101101000111001001111011101", 
    9 => "10111101010110011000100101101001", 
    10 => "10111101011000011001111010110111", 
    11 => "10111110100100110100100110000101", 
    12 => "10111101110111100110110001000000", 
    13 => "00111101100100111101100110111011", 
    14 => "00111110000110011011001101110111", 
    15 => "00111101111001110111001111110011", 
    16 => "00111101100100011001001101001110", 
    17 => "10111101101000110011111100111010", 
    18 => "00111101100011110110111110110110", 
    19 => "10111101100100001010100010101111", 
    20 => "10111100000111001101010110011010", 
    21 => "10111101011110101001101000010011", 
    22 => "00111101001000000100010100010010", 
    23 => "10111110100100100110011011101111", 
    24 => "10111101100111000101100001111001", 
    25 => "00111101011100110110000101001100", 
    26 => "10111100101001101011100110111110", 
    27 => "10111110000001111111010100111110", 
    28 => "00111101001011110000011100111000", 
    29 => "00111101110110001000110111000101", 
    30 => "10111110000011011001000001100001", 
    31 => "00111101000110001110111001000111", 
    32 => "10111110110101010101110001011101", 
    33 => "00111110001100000001110101101110", 
    34 => "10111110000100000001110110110110", 
    35 => "10111101101101101000001111001011", 
    36 => "10111101011001110000101010110110", 
    37 => "10111110000011011111101110111011", 
    38 => "10111110100010100000011100001110", 
    39 => "00111101111101011111010001010000", 
    40 => "00111100110111011001110101100010", 
    41 => "10111110000101101101010101100001", 
    42 => "00111100011001010110011000100101", 
    43 => "00111101110100011111000110011111", 
    44 => "00111101000011101111100011110011", 
    45 => "10111101110111001101101000000100", 
    46 => "00111100110111101101010010000100", 
    47 => "10111101111001000101101011100100", 
    48 => "10111101111001100011110111001001", 
    49 => "00111101010111010001100100001110", 
    50 => "00111101010011000010100100000011", 
    51 => "10111110000010010111110000000010", 
    52 => "10111101000010110010011000101101", 
    53 => "10111110101110110101011011111101", 
    54 => "10111011100110010000101000001010", 
    55 => "00111101110011111000001110000011", 
    56 => "10111100111100010001110100101110", 
    57 => "10111110001011011010010101111010", 
    58 => "10111010001110000101001000010100", 
    59 => "00111101010111100100111111110000", 
    60 => "10111100010001010001001000101100", 
    61 => "00111101110101111101010101001100", 
    62 => "00111101100110010001111001111000", 
    63 => "00111100100010111011100110111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidjF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidjF is
    component conv_2_conv_2_weidjF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidjF_rom_U :  component conv_2_conv_2_weidjF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


