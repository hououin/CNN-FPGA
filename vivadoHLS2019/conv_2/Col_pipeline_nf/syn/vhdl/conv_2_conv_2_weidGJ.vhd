-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidGJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidGJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100000010010000000111110", 
    1 => "10111101000001001000100011011100", 
    2 => "00111101001001001100000110111011", 
    3 => "10111100001110100100010111101011", 
    4 => "10111101101100000001111100111111", 
    5 => "10111110001111010111101100110110", 
    6 => "10111110011001010100101111010101", 
    7 => "00111100101110100101011000110001", 
    8 => "00111110001011110101001011101110", 
    9 => "00111101001111011011111001110011", 
    10 => "00111011111101111011101011101000", 
    11 => "10111110001000001111011000101001", 
    12 => "10111101000001100111001101100010", 
    13 => "10111100111001011001110100001101", 
    14 => "00111101101110001000101010010110", 
    15 => "00111101110111000011101101001010", 
    16 => "10111011111100110111011011011001", 
    17 => "10111101010011000001100001110010", 
    18 => "00111101000110000000100001110010", 
    19 => "00111011100111100100100111110000", 
    20 => "00111101001111101111100101100111", 
    21 => "10111101100101001110100100101100", 
    22 => "00111110000000111101001000001111", 
    23 => "10111110101010100001001101111100", 
    24 => "10111101100111000001110100011100", 
    25 => "10111101111010001010010001100011", 
    26 => "00111101110010111110101100001101", 
    27 => "10111101111001010110110001111011", 
    28 => "00111101000100110101100100101011", 
    29 => "00111101011100101000010101001110", 
    30 => "10111101100111010110011011100001", 
    31 => "10111101100001111101110100101011", 
    32 => "10111110010100111010111010000001", 
    33 => "00111101011010001100011100100001", 
    34 => "00111101011000001100111000011000", 
    35 => "10111011000100010001011001110010", 
    36 => "10111101111000001011010001000101", 
    37 => "10111110010111110110011110010000", 
    38 => "00111101111000100101101111010010", 
    39 => "00111110010001011001001011011110", 
    40 => "10111100110001010000000001001101", 
    41 => "10111110001100011000110000011001", 
    42 => "00111010101001101101100100001001", 
    43 => "00111100001001000010001101100000", 
    44 => "00111101011110110111011010100010", 
    45 => "00111100100011110111110111011110", 
    46 => "00111110010000100001010011011111", 
    47 => "10111101111010111110001101100010", 
    48 => "10111101101000110111101110110111", 
    49 => "00111101100110010000001001000101", 
    50 => "10111110011101000111011101011111", 
    51 => "10111110001011010000000010001101", 
    52 => "00111100000111011101100100101010", 
    53 => "10111101110111010001001110100000", 
    54 => "10111110001001010011100110011001", 
    55 => "00111101101110111111111010000101", 
    56 => "00111101000101001100111001101111", 
    57 => "10111101110110110111011111100111", 
    58 => "10111101111000101001111010001101", 
    59 => "10111110100101011110001101010000", 
    60 => "10111110000001011001110111101111", 
    61 => "00111101110010001001000011010011", 
    62 => "00111110001101000001100100010101", 
    63 => "00111110001100010110101111000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidGJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidGJ is
    component conv_2_conv_2_weidGJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidGJ_rom_U :  component conv_2_conv_2_weidGJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


