-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicKz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicKz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110001100010100100100100", 
    1 => "00111101111111111100011011000001", 
    2 => "10111110100101010010011001101001", 
    3 => "10111101010101100101011000100100", 
    4 => "00111101011010100000110110100100", 
    5 => "00111101101000111101001010001001", 
    6 => "00111101110111001111010100010010", 
    7 => "10111101101111101111111101101111", 
    8 => "10111110000101101100111001110110", 
    9 => "10111101110000111001000111001101", 
    10 => "00111100101001111110010101000101", 
    11 => "10111100110011101010000010110001", 
    12 => "00111110001000000000011101000110", 
    13 => "00111101111011000010111010111001", 
    14 => "00111101000101100001011101101010", 
    15 => "10111101111010110001100011100000", 
    16 => "10111100111010001001000010100101", 
    17 => "00111100011110011101001000111100", 
    18 => "00111101010010010001101100011110", 
    19 => "10111101000100101010101000000000", 
    20 => "10111110000000100100100001010111", 
    21 => "00111101010111100100000110111110", 
    22 => "00111100101110011111100101100110", 
    23 => "00111110000010001100110101110011", 
    24 => "00111101100100111001111101111011", 
    25 => "10111101101010110111000101100100", 
    26 => "10111101100011000011101010101001", 
    27 => "00111101110110110110100110110010", 
    28 => "00111101110001101101001110110111", 
    29 => "10111101100001101100000000111010", 
    30 => "00111101100011101011100110011111", 
    31 => "10111101110000111100110111101101", 
    32 => "00111101011111001100010101011000", 
    33 => "00111101010111011000000101101111", 
    34 => "10111110000101010010000101000100", 
    35 => "10111110011000001111110100110100", 
    36 => "10111101111001001000101000110011", 
    37 => "10111100000001000100111001110011", 
    38 => "10111100010000000110010011100000", 
    39 => "00111100010110000011100001000111", 
    40 => "00111110000011011000111100110100", 
    41 => "00111011110010010011101011111000", 
    42 => "10111011100101010101110001100100", 
    43 => "10111110001000000110000011010001", 
    44 => "10111011100101000101000010000011", 
    45 => "10111100101001100110111101101111", 
    46 => "10111101010000101000110011010101", 
    47 => "00111101010101100000011101111101", 
    48 => "10111101101000000000110110001110", 
    49 => "10111101100010111010001011101010", 
    50 => "10111011110110010110000000100000", 
    51 => "00111110000111101110110010111101", 
    52 => "00111101110011110010110000101011", 
    53 => "00111110000100110101001001100100", 
    54 => "10111100000110000111110110100101", 
    55 => "10111101101011100111100111101011", 
    56 => "10111100011101000001000100010111", 
    57 => "10111110100101100000100000010111", 
    58 => "00111101010000110011100011111100", 
    59 => "10111110000011110011000011101111", 
    60 => "00111101111110101100111011110111", 
    61 => "10111100111010100111000111101110", 
    62 => "00111101111010001000111100101101", 
    63 => "10111101101001001110111101010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicKz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicKz is
    component conv_2_conv_2_weicKz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicKz_rom_U :  component conv_2_conv_2_weicKz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


