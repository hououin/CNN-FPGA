-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidHJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidHJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010100000111011111101100", 
    1 => "00111110000001010100000100000100", 
    2 => "00111101101111011110101100011101", 
    3 => "00111100001000111010011010100100", 
    4 => "10111110110001010001001001101000", 
    5 => "00111100000101100100011110110010", 
    6 => "10111011100111101010000010101101", 
    7 => "10111100101001010011101100111101", 
    8 => "10111011011100010001101110001111", 
    9 => "00111100100010110011111111110000", 
    10 => "00111100100011110101011010010001", 
    11 => "10111110000101001111100101001010", 
    12 => "10111110000000011000010001011110", 
    13 => "10111101111111000100100110001000", 
    14 => "10111101101000011010110000101000", 
    15 => "10111110000001110100101011000000", 
    16 => "10111101001111000000111001010111", 
    17 => "00111101111000110001101100101010", 
    18 => "00111101100101111000110111001011", 
    19 => "00111101001100011011010011011000", 
    20 => "10111110010001111100010111010011", 
    21 => "00111101000111010100101110111100", 
    22 => "10111101100010000001100101011101", 
    23 => "10111110001000000111000101000111", 
    24 => "10111110100010100100010101010001", 
    25 => "10111101100000101011010000110010", 
    26 => "00111101111110100100100100101100", 
    27 => "10111110010001100100110100110101", 
    28 => "00111101000011001111000100110111", 
    29 => "00111101001111111111001001001111", 
    30 => "10111110001001101110001111110111", 
    31 => "00111110000000101010010000101111", 
    32 => "10111101110011111110001011011010", 
    33 => "10111010000100101101011100111101", 
    34 => "10111110001100001011101110101010", 
    35 => "10111110001100110101011110000110", 
    36 => "00111110000100011010010011101110", 
    37 => "10111101101010111011000011011100", 
    38 => "00111101000101111001000001111111", 
    39 => "00111101010100000001101011100101", 
    40 => "10111110000011011011000011101011", 
    41 => "10111101000001011000101111010010", 
    42 => "00111100101011101100001110011101", 
    43 => "00111101100101100000110000011011", 
    44 => "10111101101111001011100101010000", 
    45 => "10111110000101101011000000100110", 
    46 => "00111011110000000001011000010010", 
    47 => "10111100100100010100101000001110", 
    48 => "00111101101010010110000101111001", 
    49 => "10111101000011011111001010011110", 
    50 => "10111110110110100010101111000000", 
    51 => "10111011101110100100001101001100", 
    52 => "00111101110000010001100111010100", 
    53 => "10111101101011101101001001110101", 
    54 => "00111101110110111010100011101011", 
    55 => "10111100000011111100110110001001", 
    56 => "00111101000001001101011101010011", 
    57 => "00111101010101000101100001010010", 
    58 => "00111101100110101010100001001111", 
    59 => "00111101101011110110000100100001", 
    60 => "10111110110111000110001011011101", 
    61 => "10111100000101000001001000011010", 
    62 => "00111101100011110100001110011011", 
    63 => "10111101100010000010100111100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidHJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidHJ is
    component conv_2_conv_2_weidHJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidHJ_rom_U :  component conv_2_conv_2_weidHJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


