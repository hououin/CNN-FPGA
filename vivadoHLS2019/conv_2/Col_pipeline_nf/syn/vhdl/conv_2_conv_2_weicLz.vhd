-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicLz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicLz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100100101000111001100111", 
    1 => "10111110001010011011001110101011", 
    2 => "10111110000001101000000011000000", 
    3 => "00111101111100101001100110101000", 
    4 => "10111110001001111110010100111010", 
    5 => "10111110100100000011011001100110", 
    6 => "00111101100111110111001010101010", 
    7 => "00111101101011111110001010110000", 
    8 => "00111010101011110110000000100100", 
    9 => "00111011010101101110100010101010", 
    10 => "10111110011111100000111010011100", 
    11 => "10111110001001100111111110101000", 
    12 => "00111101111111111011100011011011", 
    13 => "10111110001000001100000001110001", 
    14 => "00111101011110001101100010110001", 
    15 => "10111101100010110110010100110110", 
    16 => "10111101101100010010100110010010", 
    17 => "10111101100010111100011000000111", 
    18 => "10111110101011010100000011101010", 
    19 => "10111011101111010111101100101001", 
    20 => "10111110001011001101001100011010", 
    21 => "10111101010100101111010101000101", 
    22 => "10111011000100010010100001101010", 
    23 => "10111110010010111111110110110110", 
    24 => "10111100000010010101111110000101", 
    25 => "00111100100000010010110111010010", 
    26 => "00111101000111101111110100110111", 
    27 => "00111110001010101100110011111110", 
    28 => "00111110000011010101000011100001", 
    29 => "10111110100001111100011011110000", 
    30 => "10111110000100011101110111001110", 
    31 => "00111110000001111111110000101011", 
    32 => "00111101011100001110011001011111", 
    33 => "00111110000001110000010110000110", 
    34 => "10111101100011001010111100010011", 
    35 => "10111110101000101111110101000001", 
    36 => "00111101100110111001001010111001", 
    37 => "00111101101111001010011111111011", 
    38 => "00111101110111011100001000111110", 
    39 => "10111101111110110110001001011010", 
    40 => "00111101110110111110100101110111", 
    41 => "10111100100111011101000001000110", 
    42 => "00111101101000011000110100000001", 
    43 => "00111110001101111100111001111100", 
    44 => "10111101010010100111110001011111", 
    45 => "10111110100001010111010011001000", 
    46 => "00111101001011000000101110000110", 
    47 => "00111110000110011011001111010000", 
    48 => "00111101110010101010101111100000", 
    49 => "00111110001000011011110000001110", 
    50 => "10111101110101000010100011011100", 
    51 => "10111110000001101000001111101100", 
    52 => "00111101100110000001100100100000", 
    53 => "10111101010011010101100000101000", 
    54 => "10111100010101001111011000000010", 
    55 => "10111110000110110111011000010100", 
    56 => "00111101011100110101101110101000", 
    57 => "10111101011011100100000000111001", 
    58 => "10111101011111011111010000011110", 
    59 => "10111110010001000101001011001010", 
    60 => "10111101111010111010110101010011", 
    61 => "10111101101010101001011000100101", 
    62 => "00111101011001001011100001010010", 
    63 => "10111100111100000101100110100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicLz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicLz is
    component conv_2_conv_2_weicLz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicLz_rom_U :  component conv_2_conv_2_weicLz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


