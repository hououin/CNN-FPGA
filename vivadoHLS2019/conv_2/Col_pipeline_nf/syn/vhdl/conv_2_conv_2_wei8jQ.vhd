-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei8jQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei8jQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000010010100001100111000", 
    1 => "10111101011010101011000001100001", 
    2 => "10111110100001010101010100101010", 
    3 => "00111101111110101110001110011010", 
    4 => "10111110100011000101100100100011", 
    5 => "00111110001010011100000100010111", 
    6 => "10111010110111001011111011001111", 
    7 => "10111110010101010010000110111100", 
    8 => "00111110111100010110110110100011", 
    9 => "10111110000011111110000111000011", 
    10 => "00111110000010010110100111101101", 
    11 => "10111110001110110000100011000001", 
    12 => "00111101001111101101101011100000", 
    13 => "10111101001111100100101010011100", 
    14 => "00111110110011100001111101000100", 
    15 => "00111110110001111100010111101101", 
    16 => "10111101100011001011010111101100", 
    17 => "00111101001010110001100110101010", 
    18 => "10111101010100000010001110001110", 
    19 => "10111101111101011111011101010011", 
    20 => "10111101100000111001111100110000", 
    21 => "00111100010011110001110110110010", 
    22 => "10111100010000001110101000100101", 
    23 => "10111101100011010011000011100001", 
    24 => "00111110010111111110001011111000", 
    25 => "00111110101001111101011000101100", 
    26 => "10111100100111100001111111100000", 
    27 => "00111101111110011000110011000101", 
    28 => "00111110101010001000001110110111", 
    29 => "10111011111101010011010110111011", 
    30 => "10111101011101010111000101111111", 
    31 => "10111110010111110100111111111100", 
    32 => "00111110101100001011000001100111", 
    33 => "10111110000110101000010101000011", 
    34 => "00111101010111010010111010001001", 
    35 => "00111110000101011100100100101001", 
    36 => "10111110000111010111000100010111", 
    37 => "00111101010000111110010010011111", 
    38 => "00111101001100111100100111110110", 
    39 => "00111110000101011110100111101101", 
    40 => "10111011111001111110010110001110", 
    41 => "00111110100110110110110100001000", 
    42 => "10111101110101111110011101111011", 
    43 => "00111110100001110011101001111100", 
    44 => "10111101011100011100110110001100", 
    45 => "00111110000101111011111100101101", 
    46 => "10111110000100001010000011110101", 
    47 => "00111101111110010100011001101001", 
    48 => "10111110000100010011110001111101", 
    49 => "10111110001100010110100101110101", 
    50 => "00111110011111100010011010100101", 
    51 => "00111110000000111001011001100101", 
    52 => "10111110010100100110110000001000", 
    53 => "10111101110001111101110110101000", 
    54 => "00111101001011111110001101100011", 
    55 => "10111110011101100111111111110100", 
    56 => "00111101001001001111010111001100", 
    57 => "10111110100011110111010001110111", 
    58 => "00111110001100111101000110111010", 
    59 => "10111110000101111101111001101101", 
    60 => "00111101111000110011111110111001", 
    61 => "00111110100110000011110011110100", 
    62 => "00111100110110011000011100010110", 
    63 => "00111101101001101111110001101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei8jQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei8jQ is
    component conv_2_conv_2_wei8jQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei8jQ_rom_U :  component conv_2_conv_2_wei8jQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


