-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weikbM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weikbM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000111100101111111000010", 
    1 => "10111101010011100110000000000101", 
    2 => "00111101101111100010000111000111", 
    3 => "10111100101001000100001111010011", 
    4 => "10111110001000111011110101011100", 
    5 => "00111101011110110111110011011001", 
    6 => "00111101110101110110000100011100", 
    7 => "10111101101111110101010111111010", 
    8 => "00111101111001010001010111111010", 
    9 => "00111101101110101110111111110111", 
    10 => "00111101111100111011101110010011", 
    11 => "10111101010011111011010000001001", 
    12 => "00111101100010000101001011010100", 
    13 => "10111110001001110000110110111101", 
    14 => "10111010011001001111100110000001", 
    15 => "10111101001011010100001001110111", 
    16 => "10111110011001111100101101010010", 
    17 => "00111100100011101111101111101100", 
    18 => "00111100000010011101011001010110", 
    19 => "00111101100000010010101100011001", 
    20 => "10111110100110011100001010001111", 
    21 => "10111110001111101110000010010011", 
    22 => "10111110001000111111010111001111", 
    23 => "10111110001100100010110110111011", 
    24 => "00111101000110010011000100111110", 
    25 => "00111110001001011111011111011000", 
    26 => "00111101101010000110011110101111", 
    27 => "00111101111011000101000110101110", 
    28 => "10111101010000011000011001101110", 
    29 => "00111110000010000100010001000100", 
    30 => "00111100111010110101111001111001", 
    31 => "10111101101010111111111011101101", 
    32 => "10111101000001100000000101010101", 
    33 => "10111110101111001111000000110000", 
    34 => "10111101001100110000110100010101", 
    35 => "00111110000001000100101000001110", 
    36 => "10111100000110110011000101110010", 
    37 => "00111101101001110100101000011000", 
    38 => "10111101100111010000101100100111", 
    39 => "00111101111001101111101010001110", 
    40 => "10111100010000100001111011111000", 
    41 => "00111110010010011011010111000000", 
    42 => "10111101110111010111100100011010", 
    43 => "00111101011100001101100111110111", 
    44 => "10111100111011010110101101001001", 
    45 => "00111100110011010001010001001100", 
    46 => "00111101101101111001010011010111", 
    47 => "00111110100001000101001011001111", 
    48 => "00111100100111101100110011000000", 
    49 => "10111110101101000100001101101000", 
    50 => "10111101111111100010101110000101", 
    51 => "00111101000110010111101000010111", 
    52 => "10111110101100001110110001001011", 
    53 => "00111101000011001000011100001110", 
    54 => "00111110000100101101111101001100", 
    55 => "10111110100011011011100001100101", 
    56 => "10111101101111011110000011100111", 
    57 => "00111100110101111111010111101111", 
    58 => "00111101010001100011110111101011", 
    59 => "10111100110010010100010111111000", 
    60 => "10111100111100000010101101011100", 
    61 => "10111101001100001101001101100111", 
    62 => "00111101010010111100001001101010", 
    63 => "00111100111100100000100111000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weikbM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weikbM is
    component conv_2_conv_2_weikbM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weikbM_rom_U :  component conv_2_conv_2_weikbM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


