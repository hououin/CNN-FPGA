-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic2C_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic2C_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110001000011000111100000", 
    1 => "10111110110010111100111111011000", 
    2 => "10111110010110010011100100001100", 
    3 => "00111110001001110001011111010111", 
    4 => "10111110010111100110110010101000", 
    5 => "10111101101001011000101000001011", 
    6 => "00111101000110100010001110010010", 
    7 => "00111101010010100001000100111110", 
    8 => "00111110010010000011100010111100", 
    9 => "00111101011001001110111001101110", 
    10 => "10111110000101000010110111010000", 
    11 => "00111010001010011111111100001110", 
    12 => "10111100110011110111001111011010", 
    13 => "10111110011101100001011000111000", 
    14 => "00111110001110011000001101110100", 
    15 => "00111110100001110001010111111100", 
    16 => "10111110100101000011011011010000", 
    17 => "00111101100110111001010110111111", 
    18 => "10111110001010000101101111010010", 
    19 => "00111101100011000010000100000001", 
    20 => "00111110101110110100101110011110", 
    21 => "10111101101101110111100111011100", 
    22 => "00111101110001111110101001100100", 
    23 => "10111110110101011111010101011001", 
    24 => "00111101001001011000000000000001", 
    25 => "00111100111111011110001110101010", 
    26 => "00111101101100110110111110111111", 
    27 => "00111110100101101101101010100000", 
    28 => "00111110001110110001001001100110", 
    29 => "10111011111101100100101000011111", 
    30 => "10111110100111111011111101000100", 
    31 => "10111101100100010011000011100101", 
    32 => "00111101110001100000011010011001", 
    33 => "10111100010100110000010110010110", 
    34 => "00111110011001010110001010110101", 
    35 => "10111101111101111101000100101100", 
    36 => "10111100001011101001010110111000", 
    37 => "00111110011001001110010110010100", 
    38 => "10111101110000101001010011010110", 
    39 => "10111110001100111000010011110010", 
    40 => "00111110011111111000100000011010", 
    41 => "00111101100011101010110101110110", 
    42 => "10111100000011000111111111010111", 
    43 => "00111101010001100011100000110100", 
    44 => "10111110010100101000110111000100", 
    45 => "10111110000000100101101001010001", 
    46 => "10111110011001100000010101111011", 
    47 => "00111100101001000000111100101111", 
    48 => "10111101001111100111110001100011", 
    49 => "00111101011110110101110000010010", 
    50 => "00111101100111111100001001100000", 
    51 => "00111100000100000101000011001110", 
    52 => "00111110000111101100011011111010", 
    53 => "10111101011101110111011101000110", 
    54 => "00111100100101101001010010010010", 
    55 => "10111110110100001101010101111110", 
    56 => "00111101101110101110101011110100", 
    57 => "10111110101001001001000110001110", 
    58 => "10111100011110110111111001001101", 
    59 => "10111110100111110100010000011011", 
    60 => "10111101111110110010100111111100", 
    61 => "00111110001010110110011110100010", 
    62 => "00111110000101010011001101000100", 
    63 => "10111101010100100011111011001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic2C is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic2C is
    component conv_2_conv_2_weic2C_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic2C_rom_U :  component conv_2_conv_2_weic2C_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


