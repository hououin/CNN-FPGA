-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid8N_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid8N_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100011001010110111010110", 
    1 => "00111110000010000001011010011110", 
    2 => "00111100001111001001100001101101", 
    3 => "00111110000001010100110000001110", 
    4 => "10111110010100100000101000010110", 
    5 => "00111110010000100110101100100001", 
    6 => "10111110000011101011010001000110", 
    7 => "10111101100011110110011101001011", 
    8 => "00111101011110011101001101000111", 
    9 => "10111101000110111000001000010001", 
    10 => "00111101111101111101011110011010", 
    11 => "10111101101001100000100111101110", 
    12 => "10111110000101100000100011101010", 
    13 => "10111101111000011100011110011010", 
    14 => "10111100110110101110011101000001", 
    15 => "00111101001001111111011101011110", 
    16 => "00111110001001111010100011100100", 
    17 => "00111101110101001110011001110010", 
    18 => "00111101111010000110100001110101", 
    19 => "00111000011100101110100010100000", 
    20 => "10111110100011111110110110001000", 
    21 => "10111110101111110001001011100101", 
    22 => "00111100100000000100111000010110", 
    23 => "10111101111001111001110110111101", 
    24 => "10111110000101101001001000010000", 
    25 => "10111011110101011111110101101100", 
    26 => "00111110010100111011101110001001", 
    27 => "00111101101010100111101100011101", 
    28 => "00111100101101000011000010111101", 
    29 => "00111101110100011110010001100111", 
    30 => "00111101100011111000110011010001", 
    31 => "10111101000000100011100100101110", 
    32 => "00111101001110111101110001100101", 
    33 => "00111100000110100111001111100111", 
    34 => "00111101011011010111100110011110", 
    35 => "10111110100010100110000100110000", 
    36 => "10111110100111001110111001001100", 
    37 => "10111110110001011110101001000111", 
    38 => "10111110010111000001110101000111", 
    39 => "00111110000000100000100101111111", 
    40 => "10111110100111001011101101111110", 
    41 => "00111101010010101011101101100010", 
    42 => "10111100101011010101001010011011", 
    43 => "10111101100110000001000000010011", 
    44 => "10111110011011001110101000111111", 
    45 => "00111110000101100001111000100111", 
    46 => "00111011100000111111011111010010", 
    47 => "10111101101110110000110001011011", 
    48 => "10111101000110101101111100001001", 
    49 => "00111101111001101100101001000001", 
    50 => "10111110010010111001010001101010", 
    51 => "10111100101100100110100010000100", 
    52 => "10111100110101011001001100101010", 
    53 => "10111101000101000001100110001100", 
    54 => "10111110010010101110111101110101", 
    55 => "10111100111100000011000111110110", 
    56 => "00111110010101100101000011100101", 
    57 => "00111101010111000000011010010100", 
    58 => "10111110101011000111001011101100", 
    59 => "00111101110000000010010101101000", 
    60 => "10111101100111100110101111110001", 
    61 => "10111110010011010101100110100100", 
    62 => "00111101100100011111001111011010", 
    63 => "00111101010101001000000100100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid8N is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid8N is
    component conv_2_conv_2_weid8N_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid8N_rom_U :  component conv_2_conv_2_weid8N_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


