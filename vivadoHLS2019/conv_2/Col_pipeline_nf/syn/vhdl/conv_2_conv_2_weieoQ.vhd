-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieoQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieoQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001011001000110111110011", 
    1 => "10111110101010010101101101001000", 
    2 => "10111110100000110000100110011000", 
    3 => "00111110000000111000011101011110", 
    4 => "10111110000111101111001110000001", 
    5 => "00111100001010101011100100100000", 
    6 => "00111110000011001100011111110110", 
    7 => "10111110000101011001101011011101", 
    8 => "00111101000110111111010101011010", 
    9 => "10111110011101001100011001101101", 
    10 => "10111101000001111111111100011010", 
    11 => "10111100101010110010101101101001", 
    12 => "00111101000011000101011110100101", 
    13 => "10111101110111011001001111011001", 
    14 => "00111101101110101011011110010110", 
    15 => "10111101100000101110011001010111", 
    16 => "10111110010110010100110000101011", 
    17 => "00111110100100000000010001100110", 
    18 => "10111101000011001100011011110010", 
    19 => "10111110011000001101011101101000", 
    20 => "00111110000100001100110111011101", 
    21 => "10111110100000000000111011110010", 
    22 => "10111110101101010011101101011001", 
    23 => "10111110100110100000101101001111", 
    24 => "10111101101111100100010000001010", 
    25 => "00111110001100111101001111011010", 
    26 => "10111101100100100111110111100111", 
    27 => "00111101001100001110011001011000", 
    28 => "00111101010010000001010001111100", 
    29 => "10111011011000001010100101000111", 
    30 => "00111101010010010010010110001010", 
    31 => "00111101101010010111100110110010", 
    32 => "00111101100100111101010010101000", 
    33 => "00111110000001100010110111011111", 
    34 => "10111110000101000100100010010111", 
    35 => "10111110001011010100000000111011", 
    36 => "00111110010011111011000101001011", 
    37 => "10111101111111011011011111011101", 
    38 => "10111110011011110111110000001000", 
    39 => "10111100101010011000010011011001", 
    40 => "10111110001011001000011000111011", 
    41 => "00111110010000000010001110100000", 
    42 => "10111110100001000100011101100001", 
    43 => "00111110001001101101101001000100", 
    44 => "10111110011101101101000101101011", 
    45 => "00111110010100100100100011111111", 
    46 => "00111100100110110001101001101101", 
    47 => "00111110001001001101001001000011", 
    48 => "10111110010101111001001010101110", 
    49 => "00111101110101111011010010010010", 
    50 => "00111101011000001101101000010000", 
    51 => "10111110001001001001001101001111", 
    52 => "00111101100011100101011101000000", 
    53 => "10111110100011111100000110101111", 
    54 => "10111110010101010010010001001000", 
    55 => "00111110001000010111001111111001", 
    56 => "10111101000100100111000100010111", 
    57 => "10111101100001111011001110000110", 
    58 => "10111110000001000110010010111110", 
    59 => "10111110101011001011111111001000", 
    60 => "00111011011011011010111001001101", 
    61 => "00111101001101011011001111101111", 
    62 => "10111101110011010000001110001100", 
    63 => "10111101000100110010000000110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieoQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieoQ is
    component conv_2_conv_2_weieoQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieoQ_rom_U :  component conv_2_conv_2_weieoQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


