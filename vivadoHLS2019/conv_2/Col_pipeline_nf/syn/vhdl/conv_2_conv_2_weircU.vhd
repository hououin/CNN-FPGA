-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weircU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weircU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010111111111111101010111", 
    1 => "10111100100001100101110110101110", 
    2 => "00111110100010110101001111001000", 
    3 => "10111100110011111010111100001110", 
    4 => "10111110000100110100100011101001", 
    5 => "00111110000011011111111110110000", 
    6 => "10111101001111001100100001111000", 
    7 => "10111101100110111110101100111000", 
    8 => "00111101110010100110010011110100", 
    9 => "00111110010100001111001110000110", 
    10 => "10111010100111111110001101111010", 
    11 => "00111110100000000100001000010010", 
    12 => "00111101011001100011100001101000", 
    13 => "10111110100100101111100101111111", 
    14 => "10111101010101011010110100101100", 
    15 => "10111110100111000010101101000110", 
    16 => "00111110010000101010010000001100", 
    17 => "10111100111000100101111101101110", 
    18 => "00111101100101000110000101101011", 
    19 => "00111101100010110001111010101011", 
    20 => "00111101100011110111010011000100", 
    21 => "00111101101011000100100100100000", 
    22 => "00111100100101100000011111011010", 
    23 => "00111101011010110110001110010110", 
    24 => "00111100111001001101100111111110", 
    25 => "00111110000010100010100111011001", 
    26 => "10111110000010011111011001011100", 
    27 => "00111110000111111101010111111110", 
    28 => "00111101100111011001000001111001", 
    29 => "00111101101101110010100110000110", 
    30 => "10111110010000011110010011100101", 
    31 => "10111101000110111101010100111100", 
    32 => "10111101010011001001010110110010", 
    33 => "10111110000011100000001011100111", 
    34 => "00111110000010011100010101100011", 
    35 => "00111101001010000111101001100000", 
    36 => "00111110100100001101001000111111", 
    37 => "00111101111111101000001111110000", 
    38 => "10111101100101010100111010011000", 
    39 => "00111101100100000101110100010001", 
    40 => "00111101111010100011001010000010", 
    41 => "10111101101000001100000111011000", 
    42 => "10111101101110000100011001110010", 
    43 => "10111110101111010110100110001010", 
    44 => "10111110000010100100011000110010", 
    45 => "00111101010111011000010111111010", 
    46 => "00111101010110101011011011011011", 
    47 => "10111110011000111100011110011011", 
    48 => "00111101100110001111010110001111", 
    49 => "10111110010111100101100100001000", 
    50 => "10111101000100100001111010111101", 
    51 => "00111011110101111000101110111010", 
    52 => "10111110100010110011101110111010", 
    53 => "00111110001101010111101100011110", 
    54 => "00111101111101011000011101101001", 
    55 => "10111110100001010010001111100001", 
    56 => "10111100101010100110110100110000", 
    57 => "00111110001100000000110111111110", 
    58 => "00111110000100011011110010000101", 
    59 => "10111101110011110001000110110000", 
    60 => "10111110011111011010101010100011", 
    61 => "10111101001011110111100111111101", 
    62 => "10111011100010111010110100101001", 
    63 => "10111101101101010110100000110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weircU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weircU is
    component conv_2_conv_2_weircU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weircU_rom_U :  component conv_2_conv_2_weircU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


