-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid2M_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid2M_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011111010010001001111000100", 
    1 => "00111101010101100011010100010001", 
    2 => "00111101100101001101010100110000", 
    3 => "10111101010111101111000110110001", 
    4 => "00111011111010010001011010110010", 
    5 => "10111101111001011110101101110010", 
    6 => "10111101100000010010110001010011", 
    7 => "10111101100110101111110100101100", 
    8 => "10111100110111110111100111101011", 
    9 => "10111110001001101100001010011100", 
    10 => "10111110100000111011010101100101", 
    11 => "10111110001101111001110111010111", 
    12 => "00111110000011010000000101111101", 
    13 => "00111101101111000110010001110010", 
    14 => "00111100101111011101001110011011", 
    15 => "10111101011100110100100010010110", 
    16 => "00111100101100101111011101101000", 
    17 => "10111110001110110101011011110101", 
    18 => "00111101101000000001000111011100", 
    19 => "00111101110011101011001111001010", 
    20 => "10111110001110000010101000001010", 
    21 => "10111100111111100011011100000101", 
    22 => "00111100001100110011010111110011", 
    23 => "00111110000000100000000111101010", 
    24 => "00111101101101000011100101111111", 
    25 => "10111101101101000000101110001110", 
    26 => "10111110001000010000010000110101", 
    27 => "00111101100110101010111100100011", 
    28 => "00111100111100000011111110110111", 
    29 => "10111101001000011111110011101010", 
    30 => "00111101111111010000111000001001", 
    31 => "00111101110101010111000110000010", 
    32 => "10111110111011001010000011110001", 
    33 => "10111101010101010101001001001111", 
    34 => "10111110001001111000010000100110", 
    35 => "10111100100011111001111001100000", 
    36 => "00111110001011001010101100010000", 
    37 => "10111110011110101101000011100110", 
    38 => "10111100000111001000101110101000", 
    39 => "10111101111000011001001010011011", 
    40 => "00111101011111111101100101001000", 
    41 => "00111101111000010011010101110110", 
    42 => "10111110000001101000001100011001", 
    43 => "10111010010110101001011101101000", 
    44 => "10111101111100101011000110010010", 
    45 => "10111110100111100101110100101110", 
    46 => "10111101010111110100101101100010", 
    47 => "10111100101011001111000010011110", 
    48 => "00111100100001101100001001000010", 
    49 => "10111010110101100010010011101000", 
    50 => "00111110001101000011101100110110", 
    51 => "10111110000100000110101000001110", 
    52 => "10111101111100111100100101111010", 
    53 => "00111110001010001111111010000001", 
    54 => "00111011101011100110110000101000", 
    55 => "00111110100010100001110111111110", 
    56 => "10111101101001100011011000101000", 
    57 => "10111101011011101101110000111101", 
    58 => "10111110011000111101011010000010", 
    59 => "10111101011010101000010011010110", 
    60 => "00111110010110111111001100000111", 
    61 => "00111110011111100110100101111111", 
    62 => "10111101000000110000000110000001", 
    63 => "10111110001000010100001011011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid2M is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid2M is
    component conv_2_conv_2_weid2M_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid2M_rom_U :  component conv_2_conv_2_weid2M_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


