-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibSr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibSr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010001100100000011110", 
    1 => "10111101100110110010011101101001", 
    2 => "00111100100010001011010111011110", 
    3 => "10111101011110101100011100000010", 
    4 => "10111011010010100001101001000100", 
    5 => "00111100001011110111011001100001", 
    6 => "10111110011010011011001111000111", 
    7 => "10111100101011101110011101011111", 
    8 => "00111101100000010100101100011011", 
    9 => "10111100111001111110000101110010", 
    10 => "00111101000110000010110011001101", 
    11 => "10111101111110011110100010111110", 
    12 => "10111101100110000110000001100101", 
    13 => "10111110000001111110001001101110", 
    14 => "00111100111001010100010101000110", 
    15 => "10111100111001001011000010000011", 
    16 => "10111110000101001011011010111011", 
    17 => "10111100101111010111101111010000", 
    18 => "10111101101111011011010111011001", 
    19 => "00111101000010111111011110001001", 
    20 => "10111110110010011000010010100101", 
    21 => "10111110001011100111100001000010", 
    22 => "10111101011110111010100100011011", 
    23 => "10111101100000001101001010010001", 
    24 => "10111101000111010000100101001000", 
    25 => "00111101111001111101110110010100", 
    26 => "10111100101001001011111111100110", 
    27 => "10111101111101100010000011110101", 
    28 => "10111101011010000111011111000111", 
    29 => "00111101110111101111101010010111", 
    30 => "10111110011001111100011111110010", 
    31 => "00111101000111000100101110011010", 
    32 => "10111110100011111011010010101000", 
    33 => "10111110000001001011100110111011", 
    34 => "10111101001010000101110110101111", 
    35 => "10111100110101101100111010101101", 
    36 => "10111100010010001111000001110110", 
    37 => "00111101111111001101000111100001", 
    38 => "10111110011010101010000000101100", 
    39 => "00111100010111111001111100011010", 
    40 => "00111101001000100000001011011001", 
    41 => "00111101000011111010100100000100", 
    42 => "10111101110110010110110110101101", 
    43 => "10111101110010001110101001011000", 
    44 => "10111101101101101111001011000001", 
    45 => "10111110010001101000001011110011", 
    46 => "10111101010101001110010000010100", 
    47 => "00111101100000011010111001001101", 
    48 => "00111101100101100111000010000100", 
    49 => "10111110100011110000011010111011", 
    50 => "10111110011110001001101011111111", 
    51 => "00111100011111001111010110000000", 
    52 => "10111101001101011010101110001101", 
    53 => "10111011100101000000001011001111", 
    54 => "00111101110101101100110010011101", 
    55 => "10111101000011111111011010100011", 
    56 => "10111110010000001001101110110100", 
    57 => "00111101011101110010111110111110", 
    58 => "00111100110101011001011100011101", 
    59 => "10111101100011111001001010000011", 
    60 => "10111110001001110000101000010100", 
    61 => "10111100101111000001100101010011", 
    62 => "00111101001011011100001110110010", 
    63 => "00111101011000101101101001000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibSr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibSr is
    component conv_2_conv_2_weibSr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibSr_rom_U :  component conv_2_conv_2_weibSr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


