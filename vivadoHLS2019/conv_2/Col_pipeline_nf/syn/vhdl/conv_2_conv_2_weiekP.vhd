-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiekP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiekP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100000110101100001011011", 
    1 => "10111110010011100011101011111101", 
    2 => "10111101110010110110111111101001", 
    3 => "10111101011010100100100100000110", 
    4 => "10111110011010101100010100000100", 
    5 => "10111110100011101001100010110111", 
    6 => "10111101101110111010111000110100", 
    7 => "00111110001100011010010111001010", 
    8 => "00111110010101100001011101111010", 
    9 => "10111110110110010011111111000000", 
    10 => "00111110000011100111000111100010", 
    11 => "10111101100001111110100001001000", 
    12 => "10111101010110101011101001011000", 
    13 => "10111100110010000010011001011101", 
    14 => "00111110100001000001001001111100", 
    15 => "00111101101011111100011010111101", 
    16 => "10111101100000001011000010111010", 
    17 => "10111101010101111001011110011111", 
    18 => "10111101100101111100001001100111", 
    19 => "10111101110110010001001100001000", 
    20 => "00111110010010110010000000010100", 
    21 => "10111110011110100100010001000011", 
    22 => "10111101101001000111011100011111", 
    23 => "10111110110110010111010111010110", 
    24 => "10111101000010101000010101000011", 
    25 => "10111101100100011110010010111011", 
    26 => "00111010101101110001011011011010", 
    27 => "00111101101010001001011001101000", 
    28 => "00111100111101010100001010011101", 
    29 => "00111101011110010011010100010111", 
    30 => "00111101001001011100111101101110", 
    31 => "00111011011000100111111101111100", 
    32 => "10111110000110001101010001000001", 
    33 => "00111101110001101011000010010100", 
    34 => "10111111000000110100001001111101", 
    35 => "10111110101001000010010000111001", 
    36 => "10111110011001101110001111001101", 
    37 => "00111100110100100011001000000000", 
    38 => "10111110010110110101110111111110", 
    39 => "00111110100001110111101101001110", 
    40 => "00111101010101000010010100111010", 
    41 => "10111100000100111110011011101111", 
    42 => "10111110010100110110001111011001", 
    43 => "10111101101111001000111000111110", 
    44 => "00111101010010111000011110000101", 
    45 => "00111110010001001111010001001001", 
    46 => "00111101101110011010111100011001", 
    47 => "10111011010000011100111110111111", 
    48 => "10111110010010100100001100111101", 
    49 => "00111110001010100100010000111100", 
    50 => "00111101111111111110000101001000", 
    51 => "00111010011101111011111100010001", 
    52 => "00111110010011011000111101100110", 
    53 => "10111101110010011001100101101101", 
    54 => "10111101010000110111001101000000", 
    55 => "10111101110100000011000010011000", 
    56 => "10111101100000011111111011111110", 
    57 => "00111101111011101010100011001111", 
    58 => "10111101011011000110001000111000", 
    59 => "00111110001100110111111111000000", 
    60 => "10111101110010101001100100000111", 
    61 => "10111011110000011100011111011110", 
    62 => "00111101111000010011100010010010", 
    63 => "00111010000100001100000110101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiekP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiekP is
    component conv_2_conv_2_weiekP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiekP_rom_U :  component conv_2_conv_2_weiekP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


