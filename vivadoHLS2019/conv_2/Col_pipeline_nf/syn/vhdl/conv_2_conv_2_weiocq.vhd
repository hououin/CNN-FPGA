-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiocq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiocq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100110101101011000011011", 
    1 => "10111101100011101011100101010101", 
    2 => "10111100110011111100000000010010", 
    3 => "00111101010110001000001000110111", 
    4 => "00111101101001100100110010110011", 
    5 => "00111101000101000101001000110000", 
    6 => "00111101110000100100110110010101", 
    7 => "10111110001101111100001110001110", 
    8 => "00111110000110110001111110110010", 
    9 => "10111100001001010010111111010110", 
    10 => "00111101111010010000000110110000", 
    11 => "10111011000001100110010010010100", 
    12 => "00111101000000101100001101011000", 
    13 => "10111100101100111110011111111100", 
    14 => "10111101101001001110101001111010", 
    15 => "00111011110111001000100000001111", 
    16 => "10111110000010111100100000100101", 
    17 => "10111110000110111110100101010111", 
    18 => "10111110100010111000111111000100", 
    19 => "10111100101011100010001010011011", 
    20 => "10111100100000100100010001110111", 
    21 => "10111110100001100001001110111100", 
    22 => "10111110001010001111000101100111", 
    23 => "10111101101010000010011110000110", 
    24 => "00111100100100110110111111100001", 
    25 => "00111101011001011100000011010101", 
    26 => "10111101010101111010100010110001", 
    27 => "10111110000000101111101011001101", 
    28 => "10111101100010100110111011001011", 
    29 => "00111110000100101110101110001111", 
    30 => "00111011000111111111110000110111", 
    31 => "10111110001000100110110011100000", 
    32 => "10111110000000010101000110100011", 
    33 => "10111110100000000111110001001011", 
    34 => "00111101000011100100100101101010", 
    35 => "00111101110011101111011000111110", 
    36 => "10111100100100110111101000011001", 
    37 => "00111101110001000001010100010100", 
    38 => "10111100100110001001000100000000", 
    39 => "10111100100101110001111010001111", 
    40 => "00111101010010001100100111111111", 
    41 => "00111101011101111000010010100101", 
    42 => "10111100001100111000011010110110", 
    43 => "00111101100110011111000011111000", 
    44 => "00111011101010101000101010010110", 
    45 => "00111101101010111001011010001100", 
    46 => "10111100101110101001000000101011", 
    47 => "10111101000111111110100001000011", 
    48 => "00111100100010100110001111111011", 
    49 => "10111110011110000001010110110001", 
    50 => "10111100001001001100111110100010", 
    51 => "00111110000101110000100010100001", 
    52 => "10111110100110100111110010101111", 
    53 => "10111101011111101011011101111011", 
    54 => "00111101100001011110000000011101", 
    55 => "10111110011100110111000100110101", 
    56 => "10111110010100001001000001000001", 
    57 => "00111100100001101011110001111011", 
    58 => "10111101110110110100000111010000", 
    59 => "00111101011001001011001001111001", 
    60 => "00111101011010111100011000111100", 
    61 => "10111101001010011110010111010010", 
    62 => "00111100011101011011100100110000", 
    63 => "00111101000010101010101010001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiocq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiocq is
    component conv_2_conv_2_weiocq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiocq_rom_U :  component conv_2_conv_2_weiocq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


