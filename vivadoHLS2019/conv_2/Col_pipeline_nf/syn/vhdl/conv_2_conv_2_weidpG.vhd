-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidpG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidpG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100000000001000101110001", 
    1 => "10111100100010000101001100011010", 
    2 => "00111101100000111101010000001011", 
    3 => "00111101100111001100101101111011", 
    4 => "10111110101100001011100110110011", 
    5 => "10111101000011110110101010011011", 
    6 => "10111101100001101001010101010110", 
    7 => "10111110011101100110110010000000", 
    8 => "10111101101010100010100010110011", 
    9 => "10111100100010010100010101101101", 
    10 => "10111011101000010111101001011010", 
    11 => "10111101110010011101110100000001", 
    12 => "10111101110000000111111101101101", 
    13 => "10111110000111011010111101011101", 
    14 => "10111101111101010110011111010000", 
    15 => "10111101111001111011110010111000", 
    16 => "00111101000111001100100001110001", 
    17 => "10111100110001101111011010100101", 
    18 => "10111101110001001101100001110101", 
    19 => "10111101010110011101101010100111", 
    20 => "10111110001100001100011001110100", 
    21 => "00111110001010110100010000100100", 
    22 => "10111101011100111101100110011011", 
    23 => "10111101110101011001110100111011", 
    24 => "10111110001011101000100110100111", 
    25 => "10111011010001001110000001100100", 
    26 => "10111100101011001111000000011011", 
    27 => "10111100001111100010001111011001", 
    28 => "00111101001001101011100100101100", 
    29 => "00111101110011100100110101101000", 
    30 => "10111101101100000110000100001000", 
    31 => "00111110000101000000001010011001", 
    32 => "10111110000111010011001100111100", 
    33 => "10111101110001011110011101011011", 
    34 => "10111110001001110001000000001101", 
    35 => "10111110010100000110011001110010", 
    36 => "00111100000100011111111101111100", 
    37 => "00111100100110111100000010111100", 
    38 => "00111101000101000101000110001101", 
    39 => "10111101111010010000101100100011", 
    40 => "10111100110101101101001000110100", 
    41 => "00111101011000101100011110000010", 
    42 => "10111101000111011000100000001110", 
    43 => "10111100101110010100000011001011", 
    44 => "10111101011011010011011110010011", 
    45 => "10111101111011010100101011110100", 
    46 => "00111101001101011101110010000100", 
    47 => "00111101101100000010001000100111", 
    48 => "10111011111001110110001101110011", 
    49 => "10111110001000001000010011101011", 
    50 => "10111110111011000111111001001001", 
    51 => "00111101100100001000000011000010", 
    52 => "00111110001011010111100010111100", 
    53 => "10111011111010101100101010011101", 
    54 => "00111101111101010000001010101001", 
    55 => "00111101011010001001011011111010", 
    56 => "10111100011101110001111001001111", 
    57 => "00111101100111110001010111011111", 
    58 => "00111101111010010011000001001011", 
    59 => "00111101101110010110001011010001", 
    60 => "10111110101110010100011000000111", 
    61 => "10111110001100001100000011000010", 
    62 => "10111101100100111111011001001110", 
    63 => "10111101101111000111000111000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidpG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidpG is
    component conv_2_conv_2_weidpG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidpG_rom_U :  component conv_2_conv_2_weidpG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


