-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicHz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicHz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100100000111001111110", 
    1 => "00111101011011101001111100100000", 
    2 => "10111101011110111100000010101111", 
    3 => "10111100000000010100010011000111", 
    4 => "00111011110000010101110011110001", 
    5 => "00111100010110011111000111000100", 
    6 => "00111101111010100001010101000000", 
    7 => "10111101111000000111100011011010", 
    8 => "00111101000011000000000010001011", 
    9 => "00111101101100111101001110011001", 
    10 => "00111101100101100010010011000000", 
    11 => "10111101100111111111100110001001", 
    12 => "10111011000110101010010111010000", 
    13 => "10111100110010111011000010000010", 
    14 => "00111010100111011110100000110101", 
    15 => "10111100101011011110010001000001", 
    16 => "00111101101111110100101110111100", 
    17 => "10111101000101100110011100110001", 
    18 => "00111101000001110110111010010111", 
    19 => "00111011111111101000001001110001", 
    20 => "10111101010101010011101010000100", 
    21 => "00111101111000010101010000110100", 
    22 => "10111101000000101001100000111001", 
    23 => "10111100101100101100010101101110", 
    24 => "00111101100001010010100111100111", 
    25 => "10111101101011111101100110110110", 
    26 => "10111101100100111100011100100010", 
    27 => "10111110011001011000101111111011", 
    28 => "10111101100000001100000100010100", 
    29 => "10111101000100011100000011111100", 
    30 => "00111110000011011101100101110010", 
    31 => "10111011000010110110111010101110", 
    32 => "00111110000011100000101100000111", 
    33 => "10111101111010011100111110100100", 
    34 => "10111100100111110111110010001000", 
    35 => "10111101111001011011010000000000", 
    36 => "10111101100010111101111111001000", 
    37 => "10111100110110100001110110110010", 
    38 => "10111100101011010001010011111000", 
    39 => "10111101110100011110101110011100", 
    40 => "10111101111010000000001011100010", 
    41 => "10111101100101100111010101101100", 
    42 => "00111101110100011011101100110101", 
    43 => "10111100110001011010111100110001", 
    44 => "10111011110110010111001101101110", 
    45 => "00111110001011000001001100011000", 
    46 => "10111101010010010011000011011101", 
    47 => "00111011111111101001011011001011", 
    48 => "00111101010100011001010110011111", 
    49 => "10111110000000010010101001001000", 
    50 => "00111100101101001110001110111101", 
    51 => "10111100110001001010101101001101", 
    52 => "10111101110101100110100101110111", 
    53 => "00111100111000111011011111100011", 
    54 => "10111100010010000011001100101111", 
    55 => "10111110100010000111111101010111", 
    56 => "10111101111011011110111110110000", 
    57 => "00111101011100101101010101011111", 
    58 => "10111011111111000100011101110100", 
    59 => "00111101101011011111100110010001", 
    60 => "00111101100000110101001110110001", 
    61 => "10111110000100110101110001111101", 
    62 => "10111101110111010001000110101101", 
    63 => "10111100111101001111010111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicHz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicHz is
    component conv_2_conv_2_weicHz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicHz_rom_U :  component conv_2_conv_2_weicHz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


