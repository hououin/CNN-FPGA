-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidbE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidbE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100001100101111100101111", 
    1 => "00111101011110100110000100110100", 
    2 => "10111101101110010110101101101011", 
    3 => "10111100000111100010000000111010", 
    4 => "00111011001011000001101010101101", 
    5 => "00111110001101001010010010101010", 
    6 => "10111110010001011100000000111010", 
    7 => "10111101011100101011011000000010", 
    8 => "10111100010011001011100001100001", 
    9 => "00111011100000001100011010000110", 
    10 => "00111110000000101010000111000101", 
    11 => "00111101100000100111001111011100", 
    12 => "10111110010010011111110110001110", 
    13 => "00111101010111011001101010010100", 
    14 => "00111101001000101010000000110110", 
    15 => "10111101000001100101011110010111", 
    16 => "00111101101110011100100110100100", 
    17 => "00111101001011000010011100001100", 
    18 => "00111110001000011000101001010111", 
    19 => "10111101110011100000100101010011", 
    20 => "10111101100000100101101000001111", 
    21 => "10111011100101010100111011001110", 
    22 => "00111101101000100001111011011111", 
    23 => "00111101001001001010011010101001", 
    24 => "00111101101110000111001001100110", 
    25 => "10111101110000110110111001101010", 
    26 => "00111101100010001011011111110111", 
    27 => "00111100110011100001011010000100", 
    28 => "10111101000000110011101100001101", 
    29 => "10111101111100100010010011101011", 
    30 => "00111100101110000010111011110001", 
    31 => "10111110000001111111001100010000", 
    32 => "00111101001001011110111111010011", 
    33 => "10111101111000100100000110111001", 
    34 => "00111110001011101111001101111010", 
    35 => "10111110001010001111111111011100", 
    36 => "10111110001010010011100000101101", 
    37 => "10111110001101000101001010111100", 
    38 => "00111100001000111010010011011011", 
    39 => "00111101000111010000110110110010", 
    40 => "00111100110001011000100001011111", 
    41 => "00111100111010110010111010100101", 
    42 => "10111100101100100001110000101001", 
    43 => "00111100101111011100110001011001", 
    44 => "10111101011101110010000001000111", 
    45 => "00111110011101101010100000010001", 
    46 => "10111100101001000111101001110011", 
    47 => "10111101101001000011111100011110", 
    48 => "10111110011010111101010101100101", 
    49 => "10111101101011111010011110111000", 
    50 => "10111100010010110000011001110010", 
    51 => "10111110000110100100100110110001", 
    52 => "10111101111111010010001001111011", 
    53 => "00111110000010000010100100000011", 
    54 => "10111110010101010100110000011010", 
    55 => "10111110001011101000000001101100", 
    56 => "00111100101110110110111101011001", 
    57 => "10111110000110011001101110010000", 
    58 => "10111101110010000111010001110011", 
    59 => "10111101000000111011011000010101", 
    60 => "00111101110001110001100011011000", 
    61 => "10111011001010001111100111000011", 
    62 => "10111101011110001001110001000100", 
    63 => "00111101101101001010010001111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidbE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidbE is
    component conv_2_conv_2_weidbE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidbE_rom_U :  component conv_2_conv_2_weidbE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


