-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid3M_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid3M_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010100011000110011100", 
    1 => "10111101111011000111110101011001", 
    2 => "00111110000001101011101101000001", 
    3 => "10111101101110001001001111101011", 
    4 => "10111110010100010000010101110001", 
    5 => "10111101101100110101110100100101", 
    6 => "10111010101100011111000100101000", 
    7 => "10111001101100010001110010000101", 
    8 => "00111110001011011011101101001100", 
    9 => "10111100011010100110111000001110", 
    10 => "10111110010111101110111011000000", 
    11 => "10111110100101110000101001000100", 
    12 => "00111101101001111010000110011100", 
    13 => "00111100100001000001000010011010", 
    14 => "00111110011000110111100011010000", 
    15 => "00111110000011111011100101111101", 
    16 => "10111101110101101100011110000100", 
    17 => "10111110001010000110110001001011", 
    18 => "00111101011100000111011000101001", 
    19 => "10111101010001010000111010011000", 
    20 => "10111101111000000001000110010110", 
    21 => "10111101101101100100100110010011", 
    22 => "10111101100010010000100000100000", 
    23 => "00111110100001101001101111001101", 
    24 => "00111110010111100000001111100000", 
    25 => "00111110001101001110111110101100", 
    26 => "10111110100000100110000101101010", 
    27 => "10111011111111010101010101110000", 
    28 => "00111110011111100000100000000110", 
    29 => "10111101100101011010011011101100", 
    30 => "00111101101010100000110110110100", 
    31 => "10111100111110011100101110111101", 
    32 => "10111110100110010110101000001011", 
    33 => "10111100100100010001010111010001", 
    34 => "10111110000001000000110000000001", 
    35 => "10111101000101011010011100101000", 
    36 => "00111101100011000110110110100000", 
    37 => "10111110101010111010100110111101", 
    38 => "00111101101001010011111001011100", 
    39 => "00111100010110110111001101101000", 
    40 => "10111110010011101100100010000101", 
    41 => "00111100111100010100000010110111", 
    42 => "10111110100011111000111101100010", 
    43 => "00111101000001100000110001101101", 
    44 => "10111101100111111010100001111100", 
    45 => "10111110000110001011000000100111", 
    46 => "00111011010001001101101111010110", 
    47 => "00111101001011110001100010010010", 
    48 => "10111101100101111011110111111110", 
    49 => "10111100110000010110010100000101", 
    50 => "00111101110111100100000001000011", 
    51 => "10111101100000001001000001000110", 
    52 => "10111100111101010010100000001000", 
    53 => "10111101100110110001010010001100", 
    54 => "00111101011111000001011011101100", 
    55 => "00111110100000101101110000100011", 
    56 => "00111011111100000111000101000111", 
    57 => "10111101100111110001000111001100", 
    58 => "10111110100001101110100111011011", 
    59 => "10111110010010101000010001010100", 
    60 => "00111110010001011011101100010100", 
    61 => "00111110100010111010101001000000", 
    62 => "10111110101001011011101001101101", 
    63 => "10111110100000100111010001101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid3M is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid3M is
    component conv_2_conv_2_weid3M_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid3M_rom_U :  component conv_2_conv_2_weid3M_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


