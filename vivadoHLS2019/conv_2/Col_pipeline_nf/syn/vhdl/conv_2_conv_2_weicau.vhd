-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicau_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicau_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000011010101010111110101", 
    1 => "00111110001101010101001111000101", 
    2 => "00111110010011100101010110111111", 
    3 => "10111101110110001011001001000011", 
    4 => "10111101011100001011010000101011", 
    5 => "10111110101001100011111111111010", 
    6 => "00111100100011010001000101001010", 
    7 => "10111110011101010110101000111111", 
    8 => "00111110100001001000000100101111", 
    9 => "10111110101000111010110011011001", 
    10 => "00111101100010010101000101111100", 
    11 => "10111110100101110110101001011000", 
    12 => "00111101001110100000001011100011", 
    13 => "00111100011101010101101111001000", 
    14 => "00111110101001111010110110011101", 
    15 => "00111110110001110100010010010010", 
    16 => "10111101011110001011111001111010", 
    17 => "10111110100100010011011111011101", 
    18 => "00111101111011010110000010000111", 
    19 => "10111101110110101101010101110000", 
    20 => "10111110110111011001111001010001", 
    21 => "00111101100000000101111010101110", 
    22 => "10111101101010001010011111001011", 
    23 => "10111110001111111110010110011010", 
    24 => "00111101111110010011110000101010", 
    25 => "00111101111001111011000100010100", 
    26 => "10111110000010011100011100011101", 
    27 => "00111110001001100111111011100101", 
    28 => "00111101110100000011011110101001", 
    29 => "00111101011111100000110011000100", 
    30 => "10111110000000100101010111110100", 
    31 => "10111110011000011010011011111011", 
    32 => "10111110001101001101100010000001", 
    33 => "10111110010001000100101110111100", 
    34 => "10111110100111100100101010101010", 
    35 => "10111101010010101010010101110010", 
    36 => "10111100110000101011101110110010", 
    37 => "00111110010110010011011111010001", 
    38 => "00111101011010110101110100111111", 
    39 => "10111101111001000011100111100111", 
    40 => "10111100111001000000111111000100", 
    41 => "10111110010010011111001010001001", 
    42 => "00111101000011001100101111101100", 
    43 => "10111110011110000111110110110100", 
    44 => "10111101010001111011001000101111", 
    45 => "10111110100001111010110101001011", 
    46 => "10111101011100011011110111100000", 
    47 => "00111110001110111100011110011011", 
    48 => "10111101001111001111111000011101", 
    49 => "10111101001100000101000111111001", 
    50 => "00111110100110100101011010101100", 
    51 => "00111101110110110101011110010100", 
    52 => "10111101011010000111001000101001", 
    53 => "00111110010110000001111111000000", 
    54 => "00111110000101111011011001010111", 
    55 => "10111110001001001111010001010001", 
    56 => "00111101010000101010010011001110", 
    57 => "10111110010011000110101100101100", 
    58 => "00111110011101101001110010100011", 
    59 => "10111101110011000110100010011101", 
    60 => "00111110001001111101010111001100", 
    61 => "00111101110001100110010100100101", 
    62 => "10111110000110111111100111000100", 
    63 => "10111110100000000011111111111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicau is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicau is
    component conv_2_conv_2_weicau_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicau_rom_U :  component conv_2_conv_2_weicau_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


