-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicMA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicMA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011000010101001001011", 
    1 => "10111110110000110101000000000110", 
    2 => "10111110000101010101011001000101", 
    3 => "00111110000010001110111100101111", 
    4 => "10111110001110111110001010000010", 
    5 => "00111100110100001101101010001001", 
    6 => "00111101100010010011010000110010", 
    7 => "00111101001011000100101011000000", 
    8 => "00111101101000010110001110110010", 
    9 => "00111101000100100010100010101001", 
    10 => "10111110110001111011001010011110", 
    11 => "00111101100110111100101100011010", 
    12 => "00111100100001100010111111010111", 
    13 => "10111110010110110001100111000110", 
    14 => "10111100100011010001100100100110", 
    15 => "00111100010110001010110010000001", 
    16 => "10111110010100010111100101001001", 
    17 => "00111100000011110011010111010101", 
    18 => "00111100100000101010001100010100", 
    19 => "00111101011010000000111111000110", 
    20 => "00111110010110101100100101100010", 
    21 => "10111101111100001110010011101101", 
    22 => "00111101110011001111011110100110", 
    23 => "10111110101011111100111111011100", 
    24 => "10111100111011111101001000100101", 
    25 => "00111011110010110111010101011010", 
    26 => "00111110001000100111110001011000", 
    27 => "00111110100010000000001011111001", 
    28 => "10111101010111111001011011101110", 
    29 => "00111100100011111100010110100111", 
    30 => "10111110011000010011111000100010", 
    31 => "10111100111111111111011001000100", 
    32 => "00111110000101110001111001110111", 
    33 => "10111101010010001001011011100001", 
    34 => "00111110011000000100100001110110", 
    35 => "10111101010111001111100011010101", 
    36 => "00111100001111010100111101010000", 
    37 => "00111101000000100110001101101010", 
    38 => "10111101111110101110000100010001", 
    39 => "10111101111100000100110111000110", 
    40 => "00111110001100011110011010110111", 
    41 => "00111100010111110110001010001100", 
    42 => "10111101101011110111011001010000", 
    43 => "00111101001010111011101100010001", 
    44 => "10111110010111110001110010010100", 
    45 => "10111110010000111110110001111000", 
    46 => "10111110000100000111101000001111", 
    47 => "10111101110110010010111001010111", 
    48 => "00111100011000011000111001101000", 
    49 => "00111101001101100000010001101100", 
    50 => "00111100011010011110101011011010", 
    51 => "00111100101100011000110000001010", 
    52 => "00111101010000001101001101001111", 
    53 => "00111101111110101111111001111100", 
    54 => "00111110001001011111001110111100", 
    55 => "10111110010101101001001101001101", 
    56 => "10111100111111001010001100001011", 
    57 => "10111110001011000000110111110011", 
    58 => "00111101001101001111001000111101", 
    59 => "10111110011101010000010101100011", 
    60 => "10111011110011011111001101011110", 
    61 => "00111101000111101100010011111010", 
    62 => "00111110000111000001101010011000", 
    63 => "00111101100000001011000101100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicMA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicMA is
    component conv_2_conv_2_weicMA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicMA_rom_U :  component conv_2_conv_2_weicMA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


