-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieeO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieeO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001000010111111101101010", 
    1 => "00111110000101101100011110101001", 
    2 => "00111110100000100000001100111100", 
    3 => "10111110101110000011010110001000", 
    4 => "10111110000111101001010001010010", 
    5 => "10111110010110100010111101011111", 
    6 => "10111110011011110110100100111000", 
    7 => "00111101101100110101100111011010", 
    8 => "10111101111011111010101100010011", 
    9 => "10111110100111110010110111111111", 
    10 => "10111101100000000110100010000111", 
    11 => "10111101100011110110100001001000", 
    12 => "10111110001000010111000010111101", 
    13 => "00111101010111100110010101100101", 
    14 => "10111110101010110011001111110000", 
    15 => "10111110110000001001110101010111", 
    16 => "00111011100001110000001001110101", 
    17 => "10111110011110101001101101010100", 
    18 => "00111110001001000100011001111000", 
    19 => "00111110100100001001011001101111", 
    20 => "00111101111100001000001100110111", 
    21 => "10111101100000100011010001011001", 
    22 => "00111110001010011100110000111111", 
    23 => "00111101000010010001100111011101", 
    24 => "10111101111110000000001010101011", 
    25 => "10111110101000001000111101010000", 
    26 => "10111110001100001111110010100001", 
    27 => "00111100110101011011000111000011", 
    28 => "10111101100101010100000110000010", 
    29 => "00111110010010001101101000110011", 
    30 => "00111101010010100101010101100100", 
    31 => "10111101111101000000100100110000", 
    32 => "10111110101001000111111100111001", 
    33 => "10111101111110111110010000010101", 
    34 => "10111110101101110101110110111011", 
    35 => "10111110010000100001111001001100", 
    36 => "00111110010011010100010001000111", 
    37 => "00111110000101100110000111001010", 
    38 => "00111101010111000001001010100100", 
    39 => "10111110010001010000011100101010", 
    40 => "00111110101011100000011111001111", 
    41 => "10111111000010000011010111011011", 
    42 => "10111110011100100100111001111000", 
    43 => "10111110101101111011011000111001", 
    44 => "00111101100010100110010000111010", 
    45 => "10111110110010100001111110110010", 
    46 => "10111110011111011011001000011000", 
    47 => "10111110000011100101101000010001", 
    48 => "00111110011110101001110101100110", 
    49 => "10111101110110010000100001011111", 
    50 => "00111101101011010000101011110001", 
    51 => "00111110000010110011001010100101", 
    52 => "00111110000110111111011001111111", 
    53 => "00111101111010001100110001001101", 
    54 => "00111110001101110010011101111011", 
    55 => "00111110000100010010110010001101", 
    56 => "10111110001101001001010110111110", 
    57 => "00111101000010011110011001110100", 
    58 => "00111110001001010110000110100011", 
    59 => "00111101010100100101111000110101", 
    60 => "00111110101111110000100011110101", 
    61 => "10111110100101010010100001110111", 
    62 => "10111110000011100011010011100000", 
    63 => "10111110011010101000100101100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieeO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieeO is
    component conv_2_conv_2_weieeO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieeO_rom_U :  component conv_2_conv_2_weieeO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


