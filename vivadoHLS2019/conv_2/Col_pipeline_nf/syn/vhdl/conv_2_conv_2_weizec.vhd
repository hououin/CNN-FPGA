-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weizec_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weizec_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010101100011001111111001", 
    1 => "10111011100011100001001101101110", 
    2 => "10111101111111101100011101000101", 
    3 => "00111100010000000001000110101011", 
    4 => "00111011100010010001101000101101", 
    5 => "10111101010100010111001100010000", 
    6 => "00111100100011001010100000010101", 
    7 => "00111101101000100000010011111100", 
    8 => "10111110010011010000111101010110", 
    9 => "00111101010001111001011010101000", 
    10 => "10111101100001000001010111010111", 
    11 => "00111101111011101110010000111001", 
    12 => "10111101101100111001110101100011", 
    13 => "00111101110101100001010110110110", 
    14 => "10111101111000011100110101111100", 
    15 => "10111101100101001001001010110000", 
    16 => "00111100110111101100001010000011", 
    17 => "00111100010101000001011011001101", 
    18 => "00111110010100101110111111111111", 
    19 => "00111110010111111010000011101000", 
    20 => "00111110000000001100000001101101", 
    21 => "10111110010010011100001100100111", 
    22 => "10111101111111010010000110000110", 
    23 => "00111101111001111000101011001010", 
    24 => "10111110000110110010010011100110", 
    25 => "10111110000001101110110001110010", 
    26 => "10111101001101010111100100111110", 
    27 => "00111110011100010001010010010100", 
    28 => "00111101101000010101001111111000", 
    29 => "10111110011101010111111010001111", 
    30 => "00111110000010110001010000001000", 
    31 => "10111101000011000110011001000011", 
    32 => "10111101101111101111111000000011", 
    33 => "00111110001110011110010101110001", 
    34 => "00111100101111100011100101100100", 
    35 => "00111110000111000110101101000101", 
    36 => "10111101110001000011011101011110", 
    37 => "10111101010110100110010100100100", 
    38 => "00111101101110100110111001111011", 
    39 => "10111101111010010100100010110100", 
    40 => "00111101101001101001000010110111", 
    41 => "10111110100000010010110001000101", 
    42 => "00111110010010001000001101110010", 
    43 => "00111101001000110000101101010101", 
    44 => "00111101101110011111110011110001", 
    45 => "10111101000110001100101001000001", 
    46 => "00111011010010001100000001010110", 
    47 => "00111101011111111110000110101100", 
    48 => "00111110011101100000110111111010", 
    49 => "10111110110010101100110001110011", 
    50 => "10111110001011000010010001011000", 
    51 => "10111110100001111110001010011000", 
    52 => "10111110001100011100110010011101", 
    53 => "00111110001001110011001000011111", 
    54 => "10111110011000110100010101011011", 
    55 => "00111101011110010111110000010001", 
    56 => "00111100101001110111000101100100", 
    57 => "00111101110001110101111011001011", 
    58 => "10111110000010010001101010011001", 
    59 => "00111101011110010100100011111001", 
    60 => "00111110000011101011000110001011", 
    61 => "10111110000100011110111100011001", 
    62 => "10111101110110110100111100011011", 
    63 => "10111100101000000100111010000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weizec is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weizec is
    component conv_2_conv_2_weizec_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weizec_rom_U :  component conv_2_conv_2_weizec_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


