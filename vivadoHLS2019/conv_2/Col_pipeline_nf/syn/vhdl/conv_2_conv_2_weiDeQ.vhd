-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiDeQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiDeQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010010010001100110100110", 
    1 => "10111101111010001010001111100011", 
    2 => "00111110000000011111100010111001", 
    3 => "10111101100000111110001100110011", 
    4 => "10111101000011101101101111000100", 
    5 => "10111101001011100100100101100010", 
    6 => "00111101000000110111111000111011", 
    7 => "10111101100001100011111110011001", 
    8 => "00111101100011001001110010000100", 
    9 => "10111100111110000101011001110001", 
    10 => "00111101101000110010110011101111", 
    11 => "00111011110001011110001001100000", 
    12 => "10111100110110000110011011010011", 
    13 => "10111110010111000011111111010101", 
    14 => "10111101010100001001000001010111", 
    15 => "00111100100110000001001001010111", 
    16 => "10111101010100101001110010111111", 
    17 => "10111110000101001001010010100010", 
    18 => "10111101110011110101110101101010", 
    19 => "10111101001011101011001101010101", 
    20 => "10111100100011101101001000011001", 
    21 => "10111110100111100101000110010011", 
    22 => "10111101100001100101110010000110", 
    23 => "10111101010011101000100101000000", 
    24 => "10111100100101111100110011010111", 
    25 => "10111011010011100001011110001011", 
    26 => "10111101101100011010111001011100", 
    27 => "00111101010010100110100110010011", 
    28 => "10111110011001110010111110101101", 
    29 => "00111110000001010011001011100111", 
    30 => "10111100000000101101011011100111", 
    31 => "10111110001111010001100001110011", 
    32 => "00111101001001111110101110000101", 
    33 => "10111110010010110011110110110010", 
    34 => "10111100101011011011101111011110", 
    35 => "00111110010001000010011111000111", 
    36 => "10111110000010010100110010011010", 
    37 => "00111100110011011100100010011101", 
    38 => "10111101101110011011011110010010", 
    39 => "00111101100010100000010000011110", 
    40 => "00111101101011100110110000010101", 
    41 => "00111101101111110111001110101101", 
    42 => "10111110000001111011101001001110", 
    43 => "10111101100011110101010111000010", 
    44 => "00111010001111000101000100001001", 
    45 => "00111101101100001000011011100001", 
    46 => "00111101101011111111011111101001", 
    47 => "00111101110010110000000010011000", 
    48 => "00111100100011011110000111100111", 
    49 => "10111110011001101001111101001101", 
    50 => "00111101101100100100110000111000", 
    51 => "00111110000000010010011110001000", 
    52 => "10111110011110110010100000010100", 
    53 => "00111100110010011011100100101001", 
    54 => "00111110000100110001101101001011", 
    55 => "10111101100001011111001101011010", 
    56 => "10111101111101011101100011010111", 
    57 => "00111011010101110101000111001110", 
    58 => "00111100001111101001011001110000", 
    59 => "00111101010011010001001111010001", 
    60 => "00111101110000101110010110110110", 
    61 => "10111101010010100010111111001100", 
    62 => "10111101110000000110010100111001", 
    63 => "00111011111110111001101000100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiDeQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiDeQ is
    component conv_2_conv_2_weiDeQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiDeQ_rom_U :  component conv_2_conv_2_weiDeQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


