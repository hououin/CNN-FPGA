-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidYM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidYM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101011010000000000100000", 
    1 => "00111110100001000101011100100101", 
    2 => "10111100111110111111110101001011", 
    3 => "00111101101011000001111110101101", 
    4 => "10111110011011000000100101110000", 
    5 => "00111110010011101100000001000110", 
    6 => "10111110011101011010100111101110", 
    7 => "00111101010001001100001000110100", 
    8 => "10111110010111100000111000111011", 
    9 => "00111010010001110001010111111100", 
    10 => "00111101111010100111001010101000", 
    11 => "00111100001111101010001001100000", 
    12 => "10111110101110000000110011100001", 
    13 => "10111101101111110011010000101111", 
    14 => "10111110101010100011110100011010", 
    15 => "10111110100000010011100100000011", 
    16 => "00111100111001011010010110101010", 
    17 => "00111101111011100111111100110011", 
    18 => "00111100101110011101110001000111", 
    19 => "10111110000110011000001000001011", 
    20 => "10111110001001001010011010000011", 
    21 => "10111110110010100110011100001101", 
    22 => "00111101000010111000111111111001", 
    23 => "10111100011110000000011000110011", 
    24 => "10111110101000101101100000000111", 
    25 => "10111110011100000000010110111000", 
    26 => "00111110000001010001111001101100", 
    27 => "00111100000010101011010100101110", 
    28 => "10111101100001010011001010001000", 
    29 => "00111101100011111000011110011100", 
    30 => "00111101001010010100011100011110", 
    31 => "10111101101100100101111110011100", 
    32 => "00111101101111000111100101101001", 
    33 => "10111101111100011001001010110111", 
    34 => "00111101000000111001001110100011", 
    35 => "00111100101010110101110110111110", 
    36 => "10111110111111101010001011100001", 
    37 => "10111011110010100101010110011000", 
    38 => "10111110011110001010101011100111", 
    39 => "10111101101010110111111001010100", 
    40 => "10111110001101111010011110111111", 
    41 => "10111011110011111001110001000111", 
    42 => "10111110011100110101100001110100", 
    43 => "10111101011011111001111101111111", 
    44 => "10111101111001101010111011011100", 
    45 => "00111110010101100110101100011010", 
    46 => "10111101111001010100000010100111", 
    47 => "10111101101000001000001000100001", 
    48 => "00111100100100010111001010101001", 
    49 => "10111101100001000110101111001101", 
    50 => "10111111000110011001000000000001", 
    51 => "00111101111100010110001000000100", 
    52 => "00111101010110110111101110000010", 
    53 => "10111110010001100001000011010111", 
    54 => "10111101111000101000001011010101", 
    55 => "10111101100110000111110001000001", 
    56 => "00111101111110110010111110010100", 
    57 => "10111110001011000110111011001110", 
    58 => "10111101101001100100101110101101", 
    59 => "10111101101001101010100111111001", 
    60 => "10111110110110110000010111010111", 
    61 => "10111110111001111100011010001011", 
    62 => "00111101110110101010100111101010", 
    63 => "00111100010010100111000100101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidYM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidYM is
    component conv_2_conv_2_weidYM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidYM_rom_U :  component conv_2_conv_2_weidYM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


