-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei2iS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei2iS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110100011110001000100001", 
    1 => "10111101100001110001000011111001", 
    2 => "10111101110011101100000010011101", 
    3 => "00111100111111101000001000111110", 
    4 => "10111101110001101111001010010001", 
    5 => "10111100101000001101010000000010", 
    6 => "10111110011110110010001011111101", 
    7 => "10111101111011111010110101101100", 
    8 => "00111101100100111000010100101010", 
    9 => "00111100101101110011001010110001", 
    10 => "00111100101111011011010001001111", 
    11 => "00111100101110000011000001001000", 
    12 => "10111110101000101011100100111101", 
    13 => "10111110000001001100011000100011", 
    14 => "00111101111001110001000110001011", 
    15 => "00111101110001010111100100110111", 
    16 => "10111101110100111011011100000111", 
    17 => "10111101101110000101101011100110", 
    18 => "00111101100111101000001000111010", 
    19 => "00111100001000110101000101110111", 
    20 => "00111100011100010100010011010000", 
    21 => "10111110100010110001010010001001", 
    22 => "10111110100111110110110100100010", 
    23 => "00111101100011101101101100111101", 
    24 => "10111110001110100110101000111111", 
    25 => "00111110010001001111010000100111", 
    26 => "10111101100000110011101010010101", 
    27 => "00111101001010110100000110101111", 
    28 => "10111110011101100111110011100011", 
    29 => "10111101110001001111011110111111", 
    30 => "00111100001010000100000001000001", 
    31 => "10111110100011011011010100110010", 
    32 => "00111101100101110111111110101111", 
    33 => "00111101000010010001101010101001", 
    34 => "10111101011111000110000110011101", 
    35 => "00111101011101110111001100010011", 
    36 => "00111011101111111100110101111010", 
    37 => "00111100010001010010101100111100", 
    38 => "10111110001111110101100100101111", 
    39 => "10111101001110001110010111011100", 
    40 => "10111101010011011111100010000010", 
    41 => "00111110010000000110000101011111", 
    42 => "10111110100011100100100111100011", 
    43 => "00111110000100110111000101001110", 
    44 => "00111101111010000111110001000101", 
    45 => "10111101100010010100111111110011", 
    46 => "10111110000110001000110111010100", 
    47 => "10111110001010100100100100100000", 
    48 => "10111101101000011000011101101110", 
    49 => "10111101100010000011111010110000", 
    50 => "10111110100100011000101000110000", 
    51 => "00111101100111110110101111101011", 
    52 => "00111100101111110110110000110110", 
    53 => "10111110000110100010101011010001", 
    54 => "10111101010110101110011101110110", 
    55 => "10111100011000110110110101101110", 
    56 => "10111110001000001001100100011001", 
    57 => "10111100111111011000111111001101", 
    58 => "10111101111110101010111101000000", 
    59 => "10111110000001000000010111101011", 
    60 => "10111101000011110011000111000110", 
    61 => "00111101110100001010111111011110", 
    62 => "10111101010011101101000111000100", 
    63 => "00111110001000111101010001000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei2iS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei2iS is
    component conv_2_conv_2_wei2iS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei2iS_rom_U :  component conv_2_conv_2_wei2iS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


