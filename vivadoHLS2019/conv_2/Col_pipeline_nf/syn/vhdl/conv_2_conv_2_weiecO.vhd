-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiecO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiecO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010001010110011000010001", 
    1 => "10111110000101010110111000111110", 
    2 => "10111110000000100101011101100110", 
    3 => "10111101011011100100100001000110", 
    4 => "00111100010111000000111110110100", 
    5 => "10111101111000011010111110001110", 
    6 => "10111100110000001000011010110100", 
    7 => "10111100100111110111100111100001", 
    8 => "00111110100000001101010000110101", 
    9 => "10111110100011001010001111111001", 
    10 => "10111110100110100110110001101110", 
    11 => "10111110100100101010111000011100", 
    12 => "00111101110010000001000111011000", 
    13 => "10111010111001101000101001100000", 
    14 => "00111110001011010011101101011101", 
    15 => "00111110010110010100110010110011", 
    16 => "10111100011100010110010010100000", 
    17 => "10111101010101000100100101001100", 
    18 => "10111101000111111110010011101010", 
    19 => "00111101110001001010010011100100", 
    20 => "10111101100001110110001001001110", 
    21 => "00111101100011111100110011110110", 
    22 => "00111101100001100000101111100001", 
    23 => "10111110011001110101100000101010", 
    24 => "00111101101101110001011011000011", 
    25 => "00111101101010110000100001110000", 
    26 => "00111100101010100110010101111100", 
    27 => "10111101010110010111101001011100", 
    28 => "00111101100101111001100011111001", 
    29 => "10111101010011001011010101001000", 
    30 => "10111101111001111101110110010100", 
    31 => "00111101010000000010011010010000", 
    32 => "10111110001100001000001000001000", 
    33 => "00111101100001101001111011011011", 
    34 => "10111110100010000100000001001101", 
    35 => "10111101010010111110010011001001", 
    36 => "00111101011001011011000000110101", 
    37 => "10111101101100110001010100101110", 
    38 => "10111110000000011001111100010011", 
    39 => "00111101111010101000010110010101", 
    40 => "00111100000001110011101010110000", 
    41 => "00111101010110010010000000100111", 
    42 => "10111011100001001000100011001101", 
    43 => "00111101100001100111010001000100", 
    44 => "10111100010001101110100001100000", 
    45 => "10111101101111001111000010110101", 
    46 => "10111101101011101001000011111011", 
    47 => "10111110010011000001110001110110", 
    48 => "10111101111010011110100101010001", 
    49 => "10111100100101100111010100100000", 
    50 => "00111110000101010111110000101011", 
    51 => "10111110000110100011001111011100", 
    52 => "00111101001110010111101101101111", 
    53 => "10111101010001101100111000110001", 
    54 => "10111101101000001000110100011011", 
    55 => "00111100110100000011001111001101", 
    56 => "10111100101011000111010001111111", 
    57 => "00111110000010101000000010100011", 
    58 => "10111110000111010000101111010000", 
    59 => "10111110001010011000100100010011", 
    60 => "00111101110101010010011001101100", 
    61 => "00111110010010011100001000000011", 
    62 => "00111100000110101100101101000110", 
    63 => "00111101000100010010011100100011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiecO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiecO is
    component conv_2_conv_2_weiecO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiecO_rom_U :  component conv_2_conv_2_weiecO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


