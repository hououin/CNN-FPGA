-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibTr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibTr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101101011011000101011100", 
    1 => "00111110000011111010000110101000", 
    2 => "00111110100001110111100111110001", 
    3 => "00111101010000100000010001001100", 
    4 => "00111101101001011010100010100110", 
    5 => "10111101001111011111000011010101", 
    6 => "00111101101101101011000101111100", 
    7 => "00111101011110101111000101000010", 
    8 => "00111101100010110111010000101011", 
    9 => "00111101001101011000010111000101", 
    10 => "00111110000000011010000111001011", 
    11 => "00111101101011111001100001101011", 
    12 => "10111100110001011100111100011011", 
    13 => "00111100010101100111100011111001", 
    14 => "10111101010000101001010010000000", 
    15 => "00111100101111110010011110110100", 
    16 => "10111101100111010101100000111111", 
    17 => "10111100101101100001111100111101", 
    18 => "00111101100001001111111100010100", 
    19 => "10111101001010010010010001001110", 
    20 => "10111101000011100011010100011000", 
    21 => "10111110000000000101000010010010", 
    22 => "10111011001100110110010101001100", 
    23 => "10111110000101101101010011111110", 
    24 => "00111110000100010110111111100100", 
    25 => "10111100101110111111101001010101", 
    26 => "10111100101011111101110000101000", 
    27 => "10111110000101111000011100100011", 
    28 => "10111101101001000011110101111110", 
    29 => "00111101101001001001001110000111", 
    30 => "10111101101110100111110010000100", 
    31 => "10111101111101000111001100111001", 
    32 => "00111101001001010110111110001100", 
    33 => "10111101000101010100100000110010", 
    34 => "00111110001010100101001111101111", 
    35 => "00111101010000100011011101101001", 
    36 => "00111100110110010100010110011010", 
    37 => "10111100100100111000011011100001", 
    38 => "10111100011101001111110000001010", 
    39 => "10111101101011010111101101001100", 
    40 => "10111101111100010110110001100001", 
    41 => "10111101010010101111101001001000", 
    42 => "00111101111101111000111011011101", 
    43 => "10111101101001100000101100000001", 
    44 => "10111101101100101110101001010001", 
    45 => "00111101100101011111101011000000", 
    46 => "10111101000011110110100110000001", 
    47 => "10111101111011000000100101110111", 
    48 => "10111101010110100001110010111110", 
    49 => "10111100111000000101010011000001", 
    50 => "00111110010011100011100000111101", 
    51 => "00111101000000001000100011110101", 
    52 => "00111101010111011111001100000100", 
    53 => "10111101100001111010110100000011", 
    54 => "10111101001001100011000110110010", 
    55 => "10111101111001001010111010001011", 
    56 => "10111101011001001000110001110111", 
    57 => "10111011100001010101001101111100", 
    58 => "10111110001110011100100010011111", 
    59 => "00111101110111110011010101110011", 
    60 => "00111100101011010010011111100100", 
    61 => "10111101010111101011001101011100", 
    62 => "10111100111110101101001110111000", 
    63 => "00111011010101101001111111100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibTr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibTr is
    component conv_2_conv_2_weibTr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibTr_rom_U :  component conv_2_conv_2_weibTr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


