-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieuR_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieuR_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010100100110000001011001", 
    1 => "00111110000101111101111000111111", 
    2 => "10111101111010101100010111100110", 
    3 => "00111100001001101010110001101101", 
    4 => "10111110101010011111101101001110", 
    5 => "00111110011001111011000110011010", 
    6 => "10111110011110100001000011110110", 
    7 => "00111110001111101101011010010101", 
    8 => "00111101001001100011111100011110", 
    9 => "00111110000001010111011100110000", 
    10 => "10111101110100000111100111001110", 
    11 => "00111101110101000100010001110100", 
    12 => "10111110100000001010101110011100", 
    13 => "10111110000111111011100111110010", 
    14 => "10111100110011010110101000101011", 
    15 => "00111010111101001111001001001000", 
    16 => "10111101001101011110000010001010", 
    17 => "00111100101110100101101010011000", 
    18 => "10111100100110110011111101110111", 
    19 => "10111110100111000101010010111001", 
    20 => "10111110000101000111100101001111", 
    21 => "10111101010100001100110110001000", 
    22 => "10111101001001110000001100010111", 
    23 => "10111110100110000100100001101100", 
    24 => "10111110110000011011111001010001", 
    25 => "10111110000110011100111100110001", 
    26 => "00111110001101111111000011010101", 
    27 => "00111101001010100001000011110110", 
    28 => "10111110100001001001000010001101", 
    29 => "00111101010001110101111000101000", 
    30 => "00111110100101001011001001101010", 
    31 => "00111100000000100100001101100111", 
    32 => "00111110101001011101111100000111", 
    33 => "10111101111101110101111001111100", 
    34 => "00111110001000100101010111100100", 
    35 => "00111101100000011111111101010000", 
    36 => "10111110110100010101111001001100", 
    37 => "10111110010100000001100000111101", 
    38 => "10111110111000100100100100011011", 
    39 => "10111101010101101000110011000010", 
    40 => "10111100000000110010111101110101", 
    41 => "10111110001010010011100111001111", 
    42 => "10111110011001110110011111110100", 
    43 => "10111110000111011101010100011010", 
    44 => "00111101101010001111110111011000", 
    45 => "00111101100011111100110100011111", 
    46 => "10111110001101110100001000110100", 
    47 => "10111101100100101101110101111010", 
    48 => "10111110000001001101001101111110", 
    49 => "00111100110101111111111010000111", 
    50 => "10111110001000110111101000110111", 
    51 => "10111100100010111110110101000000", 
    52 => "10111101001101011111101110100001", 
    53 => "00111101101011011100100001010001", 
    54 => "10111110001101101011000101110001", 
    55 => "10111101111111111010110001000111", 
    56 => "10111101101101001000010100111101", 
    57 => "10111110101001010000110111100101", 
    58 => "10111110001011100101111110110001", 
    59 => "10111101001000000001011010100100", 
    60 => "10111110001010011010111100011111", 
    61 => "10111110011000011101011000101111", 
    62 => "00111101101111110011010010101011", 
    63 => "00111101100111001010000011000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieuR is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieuR is
    component conv_2_conv_2_weieuR_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieuR_rom_U :  component conv_2_conv_2_weieuR_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


