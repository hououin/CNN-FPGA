-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidiF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidiF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100101000111111011101111", 
    1 => "00111110100100000000111111001110", 
    2 => "10111100110111111010000101110111", 
    3 => "00111101011000101111010101100011", 
    4 => "00111011000000011100110111111000", 
    5 => "10111111000100011010010111010111", 
    6 => "10111110000000100011010110000100", 
    7 => "10111101010100100000111110100101", 
    8 => "10111110010100101100011000000000", 
    9 => "10111110011000111110100000110011", 
    10 => "10111101111111101110001010111100", 
    11 => "10111110011000100010011100110010", 
    12 => "10111110010001011111111100111101", 
    13 => "00111110001010111100011010001000", 
    14 => "00111101000011111100100011111100", 
    15 => "10111110010001000110111100001001", 
    16 => "00111100001000010000011000101110", 
    17 => "10111110010010001101010000111000", 
    18 => "00111101110111010000100101010001", 
    19 => "00111100000001000011011111111010", 
    20 => "00111101101001101010011101000101", 
    21 => "00111101000010001110110110111011", 
    22 => "00111110010000000011001100101100", 
    23 => "00111101100010101011110110110011", 
    24 => "10111101111111011101100000011001", 
    25 => "10111110010101011001001011001001", 
    26 => "10111101110101010100000000000010", 
    27 => "10111101100011010101101110111011", 
    28 => "10111100100010011100010011100010", 
    29 => "10111110101000011001111000001110", 
    30 => "10111101010100100000100101110000", 
    31 => "00111101111101000101011111010001", 
    32 => "10111101000011111010000010000101", 
    33 => "10111100100001010001001100001101", 
    34 => "10111110110010011010010000101011", 
    35 => "00111101010111000011111000001110", 
    36 => "00111101001000000100010001001000", 
    37 => "10111110110111011110011100100101", 
    38 => "00111110010110010010000110000011", 
    39 => "00111100110100101001011001011110", 
    40 => "10111101101101010101110011100110", 
    41 => "10111110001101000110010000100000", 
    42 => "10111101010011110100111110011011", 
    43 => "00111110001110110111111001111111", 
    44 => "00111101101001011001001011011011", 
    45 => "00111101110110011110111100011001", 
    46 => "00111011100100000101100100111001", 
    47 => "10111101111001100101011101101011", 
    48 => "00111110000110011001110100111011", 
    49 => "00111101101011111100100110011110", 
    50 => "10111110001111011000010000001111", 
    51 => "10111111001000100111110111011001", 
    52 => "00111110101000000100010010100110", 
    53 => "10111101011110101110011111101101", 
    54 => "10111110011011000011001110100000", 
    55 => "00111010011000100110001101101010", 
    56 => "00111110000010101001101111000111", 
    57 => "10111110011111111000000010110001", 
    58 => "10111110110000000101101101011100", 
    59 => "10111110010101010011011010101111", 
    60 => "10111101111000111001001010100000", 
    61 => "10111110011101011110000101110000", 
    62 => "00111101000011111001010101100110", 
    63 => "00111101110110100011000011000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidiF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidiF is
    component conv_2_conv_2_weidiF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidiF_rom_U :  component conv_2_conv_2_weidiF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


