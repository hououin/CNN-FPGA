-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidkF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidkF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100101111100000100100101", 
    1 => "10111110100111111101100110110011", 
    2 => "10111110011010000011000000110100", 
    3 => "10111101111101000011000111000100", 
    4 => "10111110010000100011111101001011", 
    5 => "00111110001100101100000111000100", 
    6 => "00111110010011001001011000101100", 
    7 => "10111110001110111000101001000101", 
    8 => "10111101000010000101010010101111", 
    9 => "00111100000100011100000111000001", 
    10 => "00111100100101110010101100101010", 
    11 => "10111101001110110111101100110111", 
    12 => "00111101111111011000111010000111", 
    13 => "10111110100011000011111010110000", 
    14 => "10111101101111110011111010001110", 
    15 => "10111110001101101100000110011011", 
    16 => "10111110010101110111110101100101", 
    17 => "00111101000010100101001110100100", 
    18 => "10111110000001101111010000011110", 
    19 => "10111100100100100010101111011000", 
    20 => "10111110001010011110111110101111", 
    21 => "00111101111100110011000001000000", 
    22 => "10111110101001011001001011010101", 
    23 => "00111110000101100001111100110000", 
    24 => "00111110000011011000000111000110", 
    25 => "10111011100101001000011101110101", 
    26 => "00111110000010011000000101111101", 
    27 => "10111110100100010001000100110010", 
    28 => "10111110010100010101100111111000", 
    29 => "10111110011110111101010001001011", 
    30 => "10111110000100011010001111101000", 
    31 => "00111101000010010010100110110101", 
    32 => "00111110010000011001011010000110", 
    33 => "10111101110110101100100001011101", 
    34 => "00111101111111000011100110001000", 
    35 => "10111101100000011000001001111010", 
    36 => "10111110000101101010000100000100", 
    37 => "10111011111110100000001011100100", 
    38 => "10111110000001111001110001100100", 
    39 => "00111101110110010101110001110001", 
    40 => "10111101011001000010011011000000", 
    41 => "00111110010100010011110111110111", 
    42 => "00111101100011110001010000110110", 
    43 => "00111110001100111110000010100111", 
    44 => "10111110001001010011010011110100", 
    45 => "00111110000100001011010111101000", 
    46 => "10111101100101110111011111111011", 
    47 => "10111101010101010111101110101000", 
    48 => "10111101100001001111000110001100", 
    49 => "10111110011101101001010111000010", 
    50 => "10111101000110000010011000110001", 
    51 => "00111110011110110110000111000111", 
    52 => "00111100001111000000001001101010", 
    53 => "10111010101001100110000001011010", 
    54 => "10111110100001011101000011100111", 
    55 => "10111110000001010110001010100000", 
    56 => "10111100101111010110111001010111", 
    57 => "10111101100101010011110100010001", 
    58 => "10111101011001001101000101110100", 
    59 => "00111100111010110111010000000110", 
    60 => "10111110001011001110001001100010", 
    61 => "10111100100100100101110100011011", 
    62 => "10111100011000110010110101000111", 
    63 => "00111101111001110100010100010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidkF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidkF is
    component conv_2_conv_2_weidkF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidkF_rom_U :  component conv_2_conv_2_weidkF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


