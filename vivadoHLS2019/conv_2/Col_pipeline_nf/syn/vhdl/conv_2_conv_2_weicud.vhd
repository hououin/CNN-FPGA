-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicud_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110011001011000101101", 
    1 => "10111110001100000100101010011010", 
    2 => "10111110010000101010010010010100", 
    3 => "00111110001110011001100110000110", 
    4 => "00111110010001001100001111101010", 
    5 => "10111100111011010011000000010010", 
    6 => "10111110100100001110001000100110", 
    7 => "00111110110011000100101010010010", 
    8 => "10111101011100110101101110100111", 
    9 => "00111101101111001011010111111010", 
    10 => "10111101111100010111110000101110", 
    11 => "10111101001110110000101011001100", 
    12 => "10111110100011011011110110001000", 
    13 => "10111101101100010001101011010011", 
    14 => "10111101101010110110000010001011", 
    15 => "00111101100010011110111110101000", 
    16 => "10111100110010101111111100000101", 
    17 => "10111101000101011000110011011000", 
    18 => "10111110100101111010110010011000", 
    19 => "00111110010111110100010011001000", 
    20 => "00111100011000011011100011100000", 
    21 => "10111110001011110010111111011100", 
    22 => "10111110010111010001111011110100", 
    23 => "00111110100101111001000111110101", 
    24 => "10111110101010101010010110111000", 
    25 => "00111100111101110000100011111100", 
    26 => "00111110011000101101010110100100", 
    27 => "10111110101000001010110001101111", 
    28 => "10111010000111000010011110110110", 
    29 => "10111110001011100111010110110000", 
    30 => "10111110110001001111000111001010", 
    31 => "00111110001001010010010111011111", 
    32 => "10111110010010100110000001011101", 
    33 => "00111101100101110110011100100011", 
    34 => "10111100000001100111100011000000", 
    35 => "10111101000000101110110010111011", 
    36 => "00111110011011111001100011100101", 
    37 => "10111101101011110001110111100110", 
    38 => "10111110010101101111110100111110", 
    39 => "00111101011011111100000100011011", 
    40 => "10111110100101110001010110010010", 
    41 => "10111101100011100001100001011011", 
    42 => "00111101111111100110100000100111", 
    43 => "00111110100110110111011011011001", 
    44 => "00111110010110010101101010000000", 
    45 => "10111110001010011001010110111100", 
    46 => "10111101100001111110110110001101", 
    47 => "10111101111100110101000110101100", 
    48 => "00111101001111110100110100000101", 
    49 => "10111101111011010001000100110110", 
    50 => "10111110100001110110101001100111", 
    51 => "10111100100000000011101011010101", 
    52 => "10111101101001011000011001101110", 
    53 => "00111101001110000011001111101110", 
    54 => "10111101010111111001000001011110", 
    55 => "10111110100001010100110001010101", 
    56 => "10111101101111101010101011001111", 
    57 => "00111101100101000101011001010100", 
    58 => "10111100010000010000010100100110", 
    59 => "10111110100000100101111100111111", 
    60 => "10111100111110110011000001010001", 
    61 => "00111110010100110000111101000001", 
    62 => "00111110001010100010100101011001", 
    63 => "00111110000000100000010010011110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicud is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicud is
    component conv_2_conv_2_weicud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicud_rom_U :  component conv_2_conv_2_weicud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


