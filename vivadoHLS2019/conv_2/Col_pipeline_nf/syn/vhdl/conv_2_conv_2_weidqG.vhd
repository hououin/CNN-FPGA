-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidqG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidqG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101110100101011101001111", 
    1 => "00111110010001010100111010101101", 
    2 => "00111101101000100110001000111001", 
    3 => "00111101101001011100001100010011", 
    4 => "10111110010101000101011110001001", 
    5 => "10111101101111101100100000001110", 
    6 => "10111110011101101100100110011101", 
    7 => "10111100001000110001011100100101", 
    8 => "10111100110000000011101101010111", 
    9 => "00111100100100001101111011000000", 
    10 => "00111011110111111101001011011011", 
    11 => "10111110001100101110000101010000", 
    12 => "10111110110010000000100111100100", 
    13 => "00111110000001111010010011111110", 
    14 => "10111101100101010111001010001000", 
    15 => "00111101100110010110110000100111", 
    16 => "00111110000010110011011010011111", 
    17 => "10111101010110010101000001101110", 
    18 => "00111110000011100110001101100000", 
    19 => "00111101101101100000101110100000", 
    20 => "10111110001101101110111010110110", 
    21 => "10111110010000111101100001111011", 
    22 => "00111110000001001110000110011111", 
    23 => "10111110010101001001101011010000", 
    24 => "10111110000101100100001110100010", 
    25 => "00111100000101100111110000101100", 
    26 => "00111101000001010100101011011101", 
    27 => "10111101110110110111111001011011", 
    28 => "00111101101000111001101011100110", 
    29 => "00111101110011100110111101100111", 
    30 => "10111110100001011000010001001101", 
    31 => "00111101010110110010000011000110", 
    32 => "10111110111001110101001011101110", 
    33 => "00111110000001110100010111100100", 
    34 => "10111101111111100000101011110100", 
    35 => "10111110001100000010011110111110", 
    36 => "00111101110101111000000100001101", 
    37 => "00111100001000100010100111111100", 
    38 => "10111100110011001011100010000111", 
    39 => "10111101100001101111101010010111", 
    40 => "10111110001110001110110001001111", 
    41 => "10111101110000111100101010101100", 
    42 => "10111101101100110010101001000000", 
    43 => "00111101110011100001000011111100", 
    44 => "00111110001100001110101111001111", 
    45 => "10111110000100011110011110010011", 
    46 => "10111100111101001100010011110011", 
    47 => "10111100111101001001110111000011", 
    48 => "00111101100100111001100110100101", 
    49 => "10111101110111001101110111011100", 
    50 => "10111110100100011000000111010011", 
    51 => "10111101110000001011100110100001", 
    52 => "00111100101010011011100110110000", 
    53 => "10111110100010000100101110111001", 
    54 => "00111110010101101001111000001100", 
    55 => "00111110000110001011110100100111", 
    56 => "10111100001100000110001100000110", 
    57 => "10111100110101101110111000101110", 
    58 => "00111101101011101001001110010000", 
    59 => "10111100101011100000001011000101", 
    60 => "10111110001000101101110001100111", 
    61 => "10111101100001100111010101100101", 
    62 => "10111101010010111110010110100010", 
    63 => "10111101000101101101010000110000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidqG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidqG is
    component conv_2_conv_2_weidqG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidqG_rom_U :  component conv_2_conv_2_weidqG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


