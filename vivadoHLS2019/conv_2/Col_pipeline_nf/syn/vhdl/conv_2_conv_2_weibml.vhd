-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibml_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibml_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011100111010010111010111", 
    1 => "00111101011101011011100100100100", 
    2 => "10111110000110100110110101101010", 
    3 => "00111101010101111001001001001110", 
    4 => "00111110000001000100010010100101", 
    5 => "00111100100100001001110010000100", 
    6 => "10111011111011011000000000011011", 
    7 => "10111101011010100101110101001011", 
    8 => "10111100101100111110011011101100", 
    9 => "10111100011000001111110111001001", 
    10 => "00111101011111000010111001100011", 
    11 => "10111101101001011111001011101101", 
    12 => "00111110000000101011111101000111", 
    13 => "00111110001100101101001011010101", 
    14 => "00111110000010011111001100010101", 
    15 => "00111110000101111001010000000101", 
    16 => "10111101100010110001011001000111", 
    17 => "10111101100001000111110010010101", 
    18 => "00111101011101100100111111101110", 
    19 => "10111110001011100000111100110011", 
    20 => "00111110010001101110000101000001", 
    21 => "00111110000011000101000000001111", 
    22 => "00111101101110000011011001101111", 
    23 => "00111101000000101001011011001110", 
    24 => "00111101101000011001111010010011", 
    25 => "10111100111111011100110000010011", 
    26 => "00111100110001000001101000101100", 
    27 => "10111110011110111111111010001010", 
    28 => "00111110001100100001100001110000", 
    29 => "10111101110000111001011101110010", 
    30 => "00111101000010110101001010100101", 
    31 => "10111110011001000110000011001011", 
    32 => "00111101010110000010101101111111", 
    33 => "00111101100010110101111110010111", 
    34 => "00111101101100000001000110101101", 
    35 => "10111101000010110011100001010110", 
    36 => "10111110000011101001110110010110", 
    37 => "00111110000110110110010111001000", 
    38 => "10111101100011000111001110001001", 
    39 => "00111101100000111110010111011000", 
    40 => "10111110100011011011101000100011", 
    41 => "00111101110011011010010011110010", 
    42 => "10111101101001010010110111110001", 
    43 => "00111101001110110111100111100110", 
    44 => "00111100101101001010010011101011", 
    45 => "00111101001010111110100101101011", 
    46 => "00111100011010101000111000101010", 
    47 => "00111110010111000010100001010000", 
    48 => "10111101110101110000100101010101", 
    49 => "10111100011111110000011100010011", 
    50 => "10111110000010101010100011011101", 
    51 => "10111101101010010101000011001100", 
    52 => "10111110001010010000000111111110", 
    53 => "00111101000101110101100111001010", 
    54 => "10111110011111001110111111110000", 
    55 => "10111100110001001010110010011010", 
    56 => "00111101001000010010101111101101", 
    57 => "10111011011011111010100011011110", 
    58 => "00111101100001101111110110010001", 
    59 => "10111101001101110011011100010101", 
    60 => "00111101011100001110011011100011", 
    61 => "00111101000101000100101101100011", 
    62 => "10111101101011001110001101010110", 
    63 => "00111100111101001111011100111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibml is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibml is
    component conv_2_conv_2_weibml_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibml_rom_U :  component conv_2_conv_2_weibml_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


