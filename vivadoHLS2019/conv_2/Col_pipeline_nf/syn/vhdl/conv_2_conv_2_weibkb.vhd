-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibkb_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibkb_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001010111111111110000100", 
    1 => "10111011100110101110110111101001", 
    2 => "00111110100001100011100100001100", 
    3 => "10111101100010100011000111001011", 
    4 => "00111101011011101001000011001101", 
    5 => "00111101011010000101011100110100", 
    6 => "10111110001101011001111101000111", 
    7 => "00111110010100100011011010011101", 
    8 => "00111011011000111001010010110010", 
    9 => "00111101011110010000010101100011", 
    10 => "10111101100010001101110001000101", 
    11 => "00111101101010010011110100110111", 
    12 => "10111101100110101010011010100011", 
    13 => "10111110000010001100010110011110", 
    14 => "10111110000010011100101100110110", 
    15 => "10111101010011111101101111101011", 
    16 => "00111110000001001000000100010100", 
    17 => "10111100100101001011010010001000", 
    18 => "00111101001000010010001011100111", 
    19 => "00111110001000110010111011001110", 
    20 => "10111101001100001101011001011101", 
    21 => "10111101001010001010010010111110", 
    22 => "10111110010110010111110110111010", 
    23 => "00111110001111100001010101001001", 
    24 => "10111110001101111010110010101000", 
    25 => "00111110001110001110010010000111", 
    26 => "10111101100001101001010010011001", 
    27 => "00111011100100011011110101001000", 
    28 => "00111101110010101010000011000100", 
    29 => "00111101110001110011110100001110", 
    30 => "10111110010110000101110000010101", 
    31 => "00111101011100101101100101000100", 
    32 => "10111101111111011101000110001100", 
    33 => "10111100100100011010000110111010", 
    34 => "00111110001111010000110011101000", 
    35 => "00111100111001010110011001100110", 
    36 => "00111110100010011010000101010001", 
    37 => "00111101110101010001010000001111", 
    38 => "10111110100010110100001011010101", 
    39 => "10111011011001000000001100001010", 
    40 => "10111110000011010000100111010100", 
    41 => "00111100111101101100110010100010", 
    42 => "00111110001000100110000010011111", 
    43 => "10111101010011100100110101100000", 
    44 => "10111101111010100001111100001001", 
    45 => "10111101111000100101011011001001", 
    46 => "10111101101110110111110011001001", 
    47 => "10111110010101011111110111010110", 
    48 => "10111100100101011101111110011111", 
    49 => "10111110011010010000110000010000", 
    50 => "10111101101111100001101100110010", 
    51 => "10111100001000101111100001000110", 
    52 => "10111110100011000101111010110011", 
    53 => "00111110001010000100011010011101", 
    54 => "00111110010000000001110000011100", 
    55 => "10111101011111001101111010000101", 
    56 => "00111101100001001110101011000000", 
    57 => "00111101111110101011011100100110", 
    58 => "00111101011000111100001001100100", 
    59 => "10111110001000100001011110000010", 
    60 => "10111110100000110110100101010100", 
    61 => "10111101011010101001001001010100", 
    62 => "10111101010000111110011100001110", 
    63 => "10111101111111101110111111111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibkb is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibkb is
    component conv_2_conv_2_weibkb_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibkb_rom_U :  component conv_2_conv_2_weibkb_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


