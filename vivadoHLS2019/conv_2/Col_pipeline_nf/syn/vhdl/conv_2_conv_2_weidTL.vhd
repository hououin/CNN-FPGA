-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidTL_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidTL_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100010011110000000000011111", 
    1 => "00111100000110111001101011011101", 
    2 => "00111101100000110101010010001000", 
    3 => "10111101100111111010110010110110", 
    4 => "10111101010100100010000011100010", 
    5 => "00111100110110011011010000100011", 
    6 => "00111101111101111001000101111110", 
    7 => "10111011111110011000011101110011", 
    8 => "00111101101000101100001101010000", 
    9 => "10111101010111100001000101111110", 
    10 => "10111110100000111101011100111011", 
    11 => "10111110001011111101010111001010", 
    12 => "00111101111011010011110100101110", 
    13 => "00111101111010000001010001101101", 
    14 => "00111110000000110111011010111101", 
    15 => "00111101000010011010100100100011", 
    16 => "00111101110010111000011110000011", 
    17 => "10111101111100100100010111011000", 
    18 => "00111101110001000011111001011010", 
    19 => "10111101001101010101110111110110", 
    20 => "10111101110111101100110101101001", 
    21 => "10111101100011111001111101110000", 
    22 => "00111101100101000011110011110110", 
    23 => "10111101100000000000111010101101", 
    24 => "00111101011111110000100001000101", 
    25 => "00111101110001011110100100011000", 
    26 => "10111101101000101010100110011101", 
    27 => "00111101100011000100011010100111", 
    28 => "00111011101010100110011001100011", 
    29 => "10111101110000011111011001111111", 
    30 => "10111101010100011111111110000001", 
    31 => "00111101011100111011110010011001", 
    32 => "10111110000010010111000000001111", 
    33 => "00111101110011100100101110010010", 
    34 => "10111101101001000111101110001101", 
    35 => "10111101110100100110001010001111", 
    36 => "00111101111000101101101001100100", 
    37 => "10111110000001000100111101000011", 
    38 => "00111001100111101111111111100010", 
    39 => "00111100110100100100001011100010", 
    40 => "10111100111001011110001101100100", 
    41 => "00111101000000111010101100111110", 
    42 => "00111101001001111000010101101110", 
    43 => "00111101101011000001011101011110", 
    44 => "10111101100101101100001000000011", 
    45 => "10111101111011001100001111010010", 
    46 => "10111101001101110000001011011100", 
    47 => "00111011101111111011011101110010", 
    48 => "10111101101000111110100111110100", 
    49 => "10111101100110111010011101000110", 
    50 => "00111101000111010101100111000010", 
    51 => "10111101101010010110001010110101", 
    52 => "00111101101010000011100111011100", 
    53 => "00111101111011100010010001110101", 
    54 => "10111101111101001111000010011100", 
    55 => "00111110000011110101100011001010", 
    56 => "00111101000111100010111000011100", 
    57 => "10111101100010100000011010011000", 
    58 => "10111100111100101001010010110011", 
    59 => "10111101100101000110110111110111", 
    60 => "00111101110010000111111110110000", 
    61 => "00111101101011001101101100001110", 
    62 => "00111100000101000010111110011000", 
    63 => "10111101010101110011100010101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidTL is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidTL is
    component conv_2_conv_2_weidTL_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidTL_rom_U :  component conv_2_conv_2_weidTL_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


