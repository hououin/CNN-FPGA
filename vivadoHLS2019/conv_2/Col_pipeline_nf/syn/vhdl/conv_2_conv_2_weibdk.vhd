-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibdk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibdk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011000111000101000011", 
    1 => "10111100100011110110101011001001", 
    2 => "10111101010101101111101101100001", 
    3 => "10111101110011001001110011101101", 
    4 => "00111100011111101011100011110010", 
    5 => "10111101110000111001001001100100", 
    6 => "10111100110101110100010000010001", 
    7 => "00111100110111000001011101010110", 
    8 => "10111110000110111110011011011110", 
    9 => "00111110000010010101010010110010", 
    10 => "10111101100101001000101111110000", 
    11 => "00111110001100000001100000000110", 
    12 => "10111101110000100001001001101101", 
    13 => "10111110010110001011011010111001", 
    14 => "10111101111101010000100000001001", 
    15 => "10111101110001101110100010000001", 
    16 => "10111011110110000111001000100000", 
    17 => "10111100011110011011101100001001", 
    18 => "10111101100110010000100000101100", 
    19 => "00111110001101100100001010001111", 
    20 => "10111110100100010111010101100101", 
    21 => "10111100111110110110110101000101", 
    22 => "10111101011111101110000011100111", 
    23 => "10111110010101001001010101011110", 
    24 => "00111101111000000110001011101001", 
    25 => "10111110010111001000000000100001", 
    26 => "10111101111010010100110011001000", 
    27 => "00111100101111010110001111001110", 
    28 => "10111101010101000100001111100110", 
    29 => "00111110000010101111111000010001", 
    30 => "00111101110101000110110111010101", 
    31 => "10111101101010101101100000000111", 
    32 => "10111011101110101101001110110101", 
    33 => "10111110110100101010100111111101", 
    34 => "10111100100101001110101101100001", 
    35 => "10111110100101101010100111010000", 
    36 => "10111110101110001011001111000110", 
    37 => "10111110110001110001111001110110", 
    38 => "00111101111111011000000111001001", 
    39 => "00111011111010010010110000100101", 
    40 => "00111101111101000101100100001010", 
    41 => "10111110000001101010010101110110", 
    42 => "00111100111001100101110100001010", 
    43 => "10111110011000101011100110111111", 
    44 => "00111101110101011001010100001000", 
    45 => "10111110001000100001101001100001", 
    46 => "10111101010100010011100110011110", 
    47 => "10111100110001000101001100001011", 
    48 => "00111101101110010011111001001000", 
    49 => "10111110010100000010000001101111", 
    50 => "00111101101110000001100010001001", 
    51 => "10111101100111011110110100100001", 
    52 => "00111011010111101000010110111010", 
    53 => "10111110001000101011100111110100", 
    54 => "00111101100100110101010010110011", 
    55 => "10111110000000011010110000010011", 
    56 => "10111101110011011110001100111101", 
    57 => "00111110001101000000001010101010", 
    58 => "10111101101011111101000111011000", 
    59 => "00111110001001101101110011010100", 
    60 => "10111110001111000110111001110110", 
    61 => "10111110001110111011100010001110", 
    62 => "00111100100011011101011111001001", 
    63 => "10111110001000110100011101111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibdk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibdk is
    component conv_2_conv_2_weibdk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibdk_rom_U :  component conv_2_conv_2_weibdk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


