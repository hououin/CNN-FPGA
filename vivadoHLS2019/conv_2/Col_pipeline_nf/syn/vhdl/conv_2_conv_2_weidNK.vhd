-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidNK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidNK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011110000001101101111", 
    1 => "10111110001111010110111100110101", 
    2 => "10111110011111110000001101000001", 
    3 => "00111101010100101111011010011000", 
    4 => "10111101100101011110110101000111", 
    5 => "10111110000000110110000100110000", 
    6 => "10111110000000000111111100000110", 
    7 => "00111101101011101010011011111011", 
    8 => "00111110011111100000111010011111", 
    9 => "10111110100010110101000111101111", 
    10 => "10111101110110001111010101011000", 
    11 => "10111110100101100001110000110000", 
    12 => "10111101110011101110010010011001", 
    13 => "10111110011110100011111000101110", 
    14 => "00111110100000100000001100111001", 
    15 => "00111110100010111011100101011000", 
    16 => "10111101101110000101100111111100", 
    17 => "00111101111110111000000010001100", 
    18 => "10111101000011100010000100101100", 
    19 => "10111101010000101111011111010100", 
    20 => "00111110000101011110010111010101", 
    21 => "10111101101001110011010000000101", 
    22 => "10111101000000110011111000100110", 
    23 => "10111110010001110011000011111000", 
    24 => "10111100110100101101101101100101", 
    25 => "00111100100010100010100111100011", 
    26 => "00111100101001011110000011001110", 
    27 => "00111101010010000010100001111100", 
    28 => "00111101101100111101101110100110", 
    29 => "10111110000000100101111101001001", 
    30 => "00111101111011101101011101111010", 
    31 => "10111100111010000111110001100010", 
    32 => "10111101111000000001010110000000", 
    33 => "10111011001010011101100101110000", 
    34 => "10111101000100101011010101011111", 
    35 => "10111101110010001000100100111001", 
    36 => "10111101101001001001110101101111", 
    37 => "10111110000000100101001100100101", 
    38 => "10111101101001100010011000010011", 
    39 => "00111110000001001111110111110100", 
    40 => "00111101100111111010100001000001", 
    41 => "00111101101011101110011100111110", 
    42 => "10111110000000000000010110101001", 
    43 => "00111100100111100111111110000011", 
    44 => "10111011111000110011111011110100", 
    45 => "00111101101111001111010001001100", 
    46 => "00111101011001111110001011101000", 
    47 => "10111110001011001000100101111111", 
    48 => "10111101100110010010101011111100", 
    49 => "00111110000001100101101100110111", 
    50 => "00111101010000110100000101110011", 
    51 => "10111110100100000011010101000000", 
    52 => "00111110001010011111011010111101", 
    53 => "10111101011110110101011111100110", 
    54 => "10111110000100110111100010101110", 
    55 => "00111110010000000110000001110111", 
    56 => "00111101001000000111010111010110", 
    57 => "00111101110111111010111011001100", 
    58 => "10111110011101010101100101111101", 
    59 => "10111110010010000001111011001100", 
    60 => "00111101111110100101101001001111", 
    61 => "00111101111111101010101100000101", 
    62 => "10111101010100000011011011010000", 
    63 => "00111101101010111110011001111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidNK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidNK is
    component conv_2_conv_2_weidNK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidNK_rom_U :  component conv_2_conv_2_weidNK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


