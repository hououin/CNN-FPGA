-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidVL_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidVL_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111011111011001010110000", 
    1 => "00111110010000001101110001111011", 
    2 => "00111101101011000001001110001100", 
    3 => "00111101101001011000111011110011", 
    4 => "10111110000101010010011111101011", 
    5 => "00111011010011011111000110000001", 
    6 => "10111110100001011110011011011011", 
    7 => "10111101101111111111110110010100", 
    8 => "10111110000011010001001111101000", 
    9 => "00111100010010011101010001010111", 
    10 => "10111100101001001100100101001110", 
    11 => "00111000100110010011100000101110", 
    12 => "10111110100101001101000010011110", 
    13 => "10111110000011110010101011110010", 
    14 => "10111110011001101000010010100110", 
    15 => "10111100111010110000101011000000", 
    16 => "00111101000000000010100100100010", 
    17 => "00111101100011011000101101010000", 
    18 => "00111101100101100100101101011100", 
    19 => "00111101000001101000111111100110", 
    20 => "10111110101100101110000001101010", 
    21 => "10111110101111000010111100001100", 
    22 => "00111101100001111101000010110010", 
    23 => "10111101010101011000001010101110", 
    24 => "10111110011101000100110010010000", 
    25 => "10111110010000101111000110001000", 
    26 => "00111101110010010011001111111001", 
    27 => "10111101000011101110010100011111", 
    28 => "10111100100110111101111001100100", 
    29 => "00111110001100100100101111001011", 
    30 => "00111100111010011111111000010000", 
    31 => "10111101100110011010101010001101", 
    32 => "00111101101000101011001001010100", 
    33 => "10111110011101111000100001001000", 
    34 => "00111010000101011101110110110010", 
    35 => "10111101101110100011010101000001", 
    36 => "10111110001110100001001000001000", 
    37 => "10111110000001010011111111011110", 
    38 => "10111110001000111001001101110101", 
    39 => "10111101110100000011010101010110", 
    40 => "10111110011111001001011101101111", 
    41 => "10111110000101001100001011100101", 
    42 => "10111101111101111110001110000100", 
    43 => "10111101011011010001000100001110", 
    44 => "10111110011011010001011111001101", 
    45 => "00111011100010010000010100010001", 
    46 => "10111110010011000101110011000001", 
    47 => "10111101100101001101100001001001", 
    48 => "00111100110111110110001001000101", 
    49 => "10111001001010001010111101001000", 
    50 => "10111110000001001010111111010000", 
    51 => "10111100001001100010101000010111", 
    52 => "10111100001110001100010100011000", 
    53 => "10111101111111011100000100010001", 
    54 => "10111101101010101010101000100011", 
    55 => "00111101010110101101101011111100", 
    56 => "00111110000010101111011100111110", 
    57 => "00111101001011100111110100111100", 
    58 => "10111110100011100101100111111100", 
    59 => "00111101101111110110010001011000", 
    60 => "10111101100011101101100101010111", 
    61 => "10111110011100110100110111100111", 
    62 => "00111110000010100001101110111111", 
    63 => "10111101011100101010111011101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidVL is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidVL is
    component conv_2_conv_2_weidVL_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidVL_rom_U :  component conv_2_conv_2_weidVL_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


