-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibHp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibHp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010010000110011010011010", 
    1 => "00111100001101010001110100000011", 
    2 => "00111110011001001000010011101100", 
    3 => "10111110100001001010110111100100", 
    4 => "00111101001100010100000100000111", 
    5 => "10111110001010101000001100111101", 
    6 => "10111110100000000111000011100010", 
    7 => "00111110001101011111000101101110", 
    8 => "10111101110111000000111001110111", 
    9 => "10111110011010111000000001011111", 
    10 => "10111101011101001101000110011000", 
    11 => "10111011101001111100111101000011", 
    12 => "10111110010001001100001100100110", 
    13 => "00111110010101101101110010000111", 
    14 => "10111110100001101101011100010001", 
    15 => "10111110000001100101101101000010", 
    16 => "00111101110110000010100010100111", 
    17 => "10111101011011000000000101011101", 
    18 => "00111110001001011001001000111110", 
    19 => "10111110101100100100011010000100", 
    20 => "10111110000011111101100110100001", 
    21 => "00111101111000001000010110101100", 
    22 => "10111100110011011101000011010001", 
    23 => "00111101001000111000100010011101", 
    24 => "10111101101010101011101111100000", 
    25 => "10111100000100010010010010101101", 
    26 => "10111110000001101100001011110100", 
    27 => "10111110100111110111000001001111", 
    28 => "00111100111100011000110011110011", 
    29 => "10111011110010010110110111000001", 
    30 => "10111101000010100101111010000110", 
    31 => "10111110011000110001011001101110", 
    32 => "10111101011011100011101001000000", 
    33 => "00111101111001011010100011110100", 
    34 => "10111110001110110101100100100010", 
    35 => "10111101101110011011011110111101", 
    36 => "00111101111101001001111011010110", 
    37 => "10111110011110101101110100110110", 
    38 => "10111101100111101111100111000010", 
    39 => "00111110100100010101111010100111", 
    40 => "10111101110101010101110010101100", 
    41 => "10111101101001000001001101011110", 
    42 => "10111101101101100111000011101000", 
    43 => "10111101010101010011000100011011", 
    44 => "10111110000100001011101101111101", 
    45 => "10111100110001010001001000100110", 
    46 => "00111101111010000011110101101101", 
    47 => "10111110010001111101101011110000", 
    48 => "10111110100001100101111000001010", 
    49 => "00111110000010110101110101111100", 
    50 => "10111110000011111010101111110000", 
    51 => "10111101010001010110011100100000", 
    52 => "10111110011000010010000111101110", 
    53 => "10111110000111000001101110000110", 
    54 => "10111101001111010110111010101110", 
    55 => "00111110000101010011100000101001", 
    56 => "10111110000110000000000001111000", 
    57 => "10111110011100001001000001111110", 
    58 => "00111101100101110110001111111100", 
    59 => "10111110001011000100000111010110", 
    60 => "10111110010110101101110101101111", 
    61 => "10111110101000101010010100011011", 
    62 => "10111100011100000000001001000110", 
    63 => "00111101111110101011111110101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibHp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibHp is
    component conv_2_conv_2_weibHp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibHp_rom_U :  component conv_2_conv_2_weibHp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


