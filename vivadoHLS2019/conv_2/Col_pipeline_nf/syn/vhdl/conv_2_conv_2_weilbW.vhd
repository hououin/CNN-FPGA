-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weilbW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weilbW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010100000011001011110011", 
    1 => "00111101011100011111100111000100", 
    2 => "00111100111011010100000110010001", 
    3 => "10111100100100000101001111100100", 
    4 => "10111011011011001100011010101110", 
    5 => "00111100010000100000010111010000", 
    6 => "00111110001000110010100111110010", 
    7 => "10111101100101000101110000110011", 
    8 => "00111110000000110011101001000100", 
    9 => "00111101000100100010111101001010", 
    10 => "10111101100001100111101100110010", 
    11 => "00111101000101010111111110010011", 
    12 => "00111101111111100011110010111011", 
    13 => "00111100111100100011101001001000", 
    14 => "00111000110001111111111000110110", 
    15 => "00111010011011010100001001011001", 
    16 => "10111100110110011111011100100101", 
    17 => "10111101111111111001111000100111", 
    18 => "10111101100100111111110001101101", 
    19 => "10111110010110011100111100001101", 
    20 => "00111101001011101101110010110010", 
    21 => "10111101111000101111010110101101", 
    22 => "10111100101010101010001101000110", 
    23 => "10111110001000011101001101000100", 
    24 => "00111101101111101011101011101000", 
    25 => "10111101100101011001010001110011", 
    26 => "00111101011100100110011101000010", 
    27 => "00111101100111001100001010011110", 
    28 => "10111101101101100100010001110100", 
    29 => "00111110000011001110001010000000", 
    30 => "00111110000111010000001110010011", 
    31 => "10111110100111110111101111101000", 
    32 => "00111110000111111000000101011110", 
    33 => "10111101110010100000100000001110", 
    34 => "10111100000011001111111101001001", 
    35 => "00111101110010000000101001111111", 
    36 => "10111110010000100011011110101010", 
    37 => "00111101011101000101111011101101", 
    38 => "00111011101010111110001111011001", 
    39 => "00111101000001011101011111001101", 
    40 => "10111101101100011101010110111010", 
    41 => "10111100011010000110010101110100", 
    42 => "10111100100100000011111010101101", 
    43 => "10111011100000011011111100110100", 
    44 => "10111110001111001011010111111001", 
    45 => "00111011100011001111110110010011", 
    46 => "00111011110111101101100110010010", 
    47 => "00111100011011000011011101101000", 
    48 => "00111101100000001001111101011100", 
    49 => "10111110100000011010010111010010", 
    50 => "00111110000000000111011010010010", 
    51 => "00111110010110101111010010010100", 
    52 => "10111101101110110110101110111110", 
    53 => "10111110011011001110100010001010", 
    54 => "00111101111100111100100110010101", 
    55 => "10111101111000001100101101000000", 
    56 => "10111101110110111101001001110111", 
    57 => "10111101000101010010001101001100", 
    58 => "00111110000111001000001000001110", 
    59 => "00111110000011001110011110101001", 
    60 => "00111101011110111010000100000011", 
    61 => "10111101101001111100110001001000", 
    62 => "10111100101100010110001100000111", 
    63 => "10111101011010000110011000011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weilbW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weilbW is
    component conv_2_conv_2_weilbW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weilbW_rom_U :  component conv_2_conv_2_weilbW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


