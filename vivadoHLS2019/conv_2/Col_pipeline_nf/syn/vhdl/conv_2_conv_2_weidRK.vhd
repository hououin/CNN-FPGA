-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidRK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidRK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010100101110101010001", 
    1 => "10111101001000000100111001110000", 
    2 => "10111110001100100010010110101000", 
    3 => "10111101000010110100101010011100", 
    4 => "00111101110111100100111110111001", 
    5 => "10111110000111111001110000101100", 
    6 => "00111101100011101010000010111111", 
    7 => "00111101110011001100010000100010", 
    8 => "00111101001100011011000010110000", 
    9 => "10111110000101011101111000011111", 
    10 => "10111110011101100100011111110110", 
    11 => "10111101111110101101011110100101", 
    12 => "00111011100110100001100010011101", 
    13 => "00111101001011110101001110001001", 
    14 => "10111101010011010101100100001000", 
    15 => "10111100000100010100100010101011", 
    16 => "10111100111110010111011101110101", 
    17 => "10111110010101011101011111001010", 
    18 => "00111100100111101011001101001101", 
    19 => "10111100111100101100010101100001", 
    20 => "10111101000100110101000100110000", 
    21 => "00111101100110111111101101100101", 
    22 => "00111101111010100011010100000001", 
    23 => "10111101101011001111000111000101", 
    24 => "00111101011001111101011000100110", 
    25 => "00111100110000000111000001101110", 
    26 => "10111101011101110001000001010001", 
    27 => "00111101100111011001001110001100", 
    28 => "10111110000100000011001010001001", 
    29 => "10111101111100110001100011101101", 
    30 => "10111101101100000000111001000010", 
    31 => "10111100011010001100100111111011", 
    32 => "10111110100000010010000000000100", 
    33 => "00111101011011001001100101110110", 
    34 => "10111110010111110011001001101000", 
    35 => "10111110000110010100110101001001", 
    36 => "00111101000011001001001100001101", 
    37 => "10111100101111001001010110101011", 
    38 => "10111101010101001111011010110010", 
    39 => "00111101100100101110000001001000", 
    40 => "00111101110110010000000111111010", 
    41 => "10111101100011110101010001000011", 
    42 => "00111101100001110011111101011110", 
    43 => "00111100000010010101011010111100", 
    44 => "10111110000110100100010011001100", 
    45 => "10111110000001001110110001111000", 
    46 => "10111101111111100000100110101001", 
    47 => "10111101010100000010011011111011", 
    48 => "00111101001001100000010111101010", 
    49 => "00111110000011011100011111000001", 
    50 => "00111101100010110000111101010101", 
    51 => "10111101010000111010101111001101", 
    52 => "00111101101101110111101001010111", 
    53 => "00111100100101010010000101110100", 
    54 => "10111110000011101100011001001111", 
    55 => "00111101000111110001010101101010", 
    56 => "10111101011110101101001001000011", 
    57 => "10111101000110000101000110111110", 
    58 => "00111101111011000100001100000100", 
    59 => "10111101111000000001000000101011", 
    60 => "10111011000110101000100101100110", 
    61 => "10111101000101110100110111100110", 
    62 => "00111100001101001001101001111000", 
    63 => "00111101101010001011101110101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidRK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidRK is
    component conv_2_conv_2_weidRK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidRK_rom_U :  component conv_2_conv_2_weidRK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


