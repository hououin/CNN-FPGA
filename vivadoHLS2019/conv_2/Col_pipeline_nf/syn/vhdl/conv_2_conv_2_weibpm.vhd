-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibpm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibpm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101100000111100011000101", 
    1 => "00111101100101011000000111111100", 
    2 => "10111110001011101010010010101000", 
    3 => "00111110100000011101000100000110", 
    4 => "00111011010111000000101110011001", 
    5 => "10111110000100111101110011000000", 
    6 => "00111011000101001110101010000101", 
    7 => "00111011100101011000110110000000", 
    8 => "10111101100101010101101100010100", 
    9 => "00111101110000000001010011110001", 
    10 => "00111101111100010011110101101101", 
    11 => "10111101111011001011010010100000", 
    12 => "00111100110111100010000110110001", 
    13 => "00111110010000100110001111111111", 
    14 => "00111101110011000010000000011011", 
    15 => "00111110001100111011000100111101", 
    16 => "10111110010110001010010001010101", 
    17 => "00111101001011011011101101111100", 
    18 => "00111100100111001110011010001000", 
    19 => "10111101110111000111010110000011", 
    20 => "00111110100101110111010110001010", 
    21 => "00111101001010010011111000001001", 
    22 => "00111101110110000100001010101101", 
    23 => "00111100111000111000100000110111", 
    24 => "10111101011111000001101001011111", 
    25 => "00111101111101010101100111000111", 
    26 => "00111101010011010101011100101000", 
    27 => "10111101101101011110110010110001", 
    28 => "00111110011100011101010001110100", 
    29 => "00111100101101001101110000100001", 
    30 => "10111101001101101001100011111010", 
    31 => "10111110100110010001101111111000", 
    32 => "00111110010100000001011111110100", 
    33 => "00111101111101110010110111001100", 
    34 => "00111110010001001010101010101100", 
    35 => "00111101000010001010001001000000", 
    36 => "10111101010101110111101001111010", 
    37 => "00111110010000101101011110001010", 
    38 => "00111100010110110010000101001110", 
    39 => "10111101001111110011011010101001", 
    40 => "10111110010111000110001010000001", 
    41 => "00111101111111111111110111001100", 
    42 => "10111110100011101110011011011010", 
    43 => "00111100001110010100111000101101", 
    44 => "00111100100111011001101011001111", 
    45 => "00111101100001100111100111001010", 
    46 => "00111101100010000001000011111001", 
    47 => "00111110100100001101000100101111", 
    48 => "00111100100010111111010111010111", 
    49 => "00111011111010010111010011001010", 
    50 => "10111110001110001000001111011011", 
    51 => "10111101100000100111111111010010", 
    52 => "10111101111101111100001111011101", 
    53 => "10111100110010110101101001011000", 
    54 => "10111101010010001111010111011000", 
    55 => "10111101000110111010100011010101", 
    56 => "00111101101011011111010101111010", 
    57 => "10111110001010100001111011101001", 
    58 => "10111101010000110011100100100110", 
    59 => "10111101100100101001101010000101", 
    60 => "00111110000010111011111001110000", 
    61 => "00111110001111000110111001110100", 
    62 => "00111011100011001101111001101110", 
    63 => "10111101101001101001001110010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibpm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibpm is
    component conv_2_conv_2_weibpm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibpm_rom_U :  component conv_2_conv_2_weibpm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


