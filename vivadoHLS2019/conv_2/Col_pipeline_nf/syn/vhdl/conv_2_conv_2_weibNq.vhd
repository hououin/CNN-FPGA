-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibNq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibNq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000101111011111100011100", 
    1 => "00111101000000000001111111110111", 
    2 => "10111101011001001000111100100110", 
    3 => "00111100110001000101011010011010", 
    4 => "00111100010010100011100111101011", 
    5 => "00111101100000001101000000100101", 
    6 => "10111101110000110101111000111101", 
    7 => "10111101010101111001111000010011", 
    8 => "00111101110110100110111001000111", 
    9 => "10111100100100110010011011111011", 
    10 => "10111010111100111110010111001001", 
    11 => "10111100101000001111100101100101", 
    12 => "00111101000111010100111111001001", 
    13 => "10111101000101010110001010001100", 
    14 => "10111101010110001101001001010100", 
    15 => "00111101101001011001011011011100", 
    16 => "00111101100111001010010000100110", 
    17 => "10111101001001001111001110111001", 
    18 => "10111101110000100111001000111101", 
    19 => "00111101100110001100100000101001", 
    20 => "10111110100100110100011000110111", 
    21 => "10111101001110010110000110100010", 
    22 => "10111101100010011000000001001100", 
    23 => "10111110000010111001001111110110", 
    24 => "10111101100100100001110010001111", 
    25 => "00111101010001111101011111101000", 
    26 => "00111101001001010110000000100101", 
    27 => "10111110101110101001111101100100", 
    28 => "10111100101100101110110110010111", 
    29 => "00111101111100110010001011110111", 
    30 => "10111110010110101010010011011110", 
    31 => "00111101001010011101010011001110", 
    32 => "10111110010101001001010101011100", 
    33 => "10111100011100101000001111101001", 
    34 => "10111101101000101111011111011010", 
    35 => "10111100001111110111101111000011", 
    36 => "00111101101110100110011111101011", 
    37 => "00111001011001001110101111110101", 
    38 => "10111100111000111000001100100100", 
    39 => "10111101100000110001100111000110", 
    40 => "10111101110111001100001110011011", 
    41 => "00111100010110100101110111110110", 
    42 => "00111101101110101010111111001110", 
    43 => "10111100011000111011000010010001", 
    44 => "10111101100000110110001001010101", 
    45 => "10111101000010011111010000101000", 
    46 => "10111101100111010010110001110111", 
    47 => "00111101000111110010011110101000", 
    48 => "00111100110111111100000001000010", 
    49 => "10111110000010101100010111101001", 
    50 => "10111101010110110011000010000000", 
    51 => "00111010110001011011100001110010", 
    52 => "10111101101111110000100000011000", 
    53 => "10111110010010001000001101011001", 
    54 => "10111011101010111000001000010110", 
    55 => "10111101100101000010101011010010", 
    56 => "00111011110101001011101011001011", 
    57 => "10111100110001110101000000110100", 
    58 => "10111101011000101001101001111011", 
    59 => "00111110000101000101001111010000", 
    60 => "00111011110001000001001010001100", 
    61 => "00111101100000001100010111110100", 
    62 => "10111101110010110011110101101100", 
    63 => "00111011011111111100101011011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibNq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibNq is
    component conv_2_conv_2_weibNq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibNq_rom_U :  component conv_2_conv_2_weibNq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


