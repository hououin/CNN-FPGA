-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiHfu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000011011010110101110100", 
    1 => "00111101100101011100111100010101", 
    2 => "00111110000010000001001100000101", 
    3 => "10111101110101110100111111110110", 
    4 => "10111101001100010011101111001001", 
    5 => "10111100101100010010101110000001", 
    6 => "00111110000000011011000101110011", 
    7 => "00111101000011110001011010101111", 
    8 => "10111101011101101100010001110010", 
    9 => "00111101100101111100011000011111", 
    10 => "10111010110000011100111111100001", 
    11 => "00111110000001110100000011001110", 
    12 => "10111100110001011000011000011001", 
    13 => "10111110000011101001101000100011", 
    14 => "10111100011001101100011000011001", 
    15 => "10111011101111000000101100010000", 
    16 => "00111100101001010011101010100011", 
    17 => "10111101011001101000001111011011", 
    18 => "10111100100001010001000100001100", 
    19 => "00111110001010100100110100000100", 
    20 => "00111110000101000111011101000101", 
    21 => "10111101011101000100011101001101", 
    22 => "10111110001111000011001101101101", 
    23 => "00111100111010011001101001100110", 
    24 => "00111101111001010010111101001000", 
    25 => "00111100000111010010011101111011", 
    26 => "10111101101011100000000110001011", 
    27 => "10111110101001100100000011010110", 
    28 => "00111110000000010111010101010010", 
    29 => "00111101110100101100111111100010", 
    30 => "00111101111101011110000110101101", 
    31 => "00111101100110010010010011101000", 
    32 => "10111101001100110001111011011101", 
    33 => "00111100010111101111001010010110", 
    34 => "00111011110000011010110010001001", 
    35 => "10111101110001111101111111100000", 
    36 => "00111101010111001011100001110101", 
    37 => "10111101010110001110001100110110", 
    38 => "00111101110000101011110000011001", 
    39 => "10111101110000011110010111110011", 
    40 => "10111001101001111111011000100110", 
    41 => "00111101101100000001100111101000", 
    42 => "00111101001111011100000001000010", 
    43 => "10111110011110111010101110000010", 
    44 => "00111101101011101110000101110011", 
    45 => "10111101011001101110110100111010", 
    46 => "00111101110000011011101100010010", 
    47 => "10111010001101011011111111001010", 
    48 => "00111101110111000011001101101110", 
    49 => "00111101111101010010001011001100", 
    50 => "00111100001110100111111100110000", 
    51 => "00111100010010010111101001000011", 
    52 => "10111110000011111000010110101010", 
    53 => "10111110011100011001110101000011", 
    54 => "10111101100111111101011100100000", 
    55 => "10111110000011000101001110100011", 
    56 => "00111100001000011001110100100010", 
    57 => "10111011100010010101111101111110", 
    58 => "10111110001100000110000011101000", 
    59 => "00111100001011101100111110000011", 
    60 => "10111101000100101000010011101000", 
    61 => "10111110011110001110110110010111", 
    62 => "10111101101100001001101101100110", 
    63 => "10111110000100010001000100111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiHfu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiHfu is
    component conv_2_conv_2_weiHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiHfu_rom_U :  component conv_2_conv_2_weiHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


