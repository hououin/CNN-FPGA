-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibzo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibzo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010101101010000010100110", 
    1 => "10111110100001010010000011010100", 
    2 => "00111110000001010111001001000110", 
    3 => "10111101111010110101101011101110", 
    4 => "00111110000111110000000100100010", 
    5 => "10111110001101101111000011011000", 
    6 => "10111101101000000000000110001110", 
    7 => "00111110001101111010101101001011", 
    8 => "10111110000001111000101100001101", 
    9 => "10111110000010011000011110000110", 
    10 => "00111100111111001100100110101001", 
    11 => "00111101111110100011100110100000", 
    12 => "10111101000100011110110000110111", 
    13 => "10111011111110011110001111100101", 
    14 => "10111101111010111110000010111111", 
    15 => "10111101000100011000000000110101", 
    16 => "00111101001011010010110000011100", 
    17 => "10111110000000001100111001101100", 
    18 => "00111101010000101001000011100000", 
    19 => "10111110011101101111111100001111", 
    20 => "00111011010010010001101001100010", 
    21 => "10111101000001101110100000010000", 
    22 => "10111110011000011001000000011010", 
    23 => "00111101010010011110111011000000", 
    24 => "10111110000101011110001001011101", 
    25 => "10111101001010111000011011110010", 
    26 => "10111110001001000110111111110110", 
    27 => "10111110100110111010001011000001", 
    28 => "10111101110110001101001111010010", 
    29 => "10111110010010010100001000010110", 
    30 => "10111101110010000111100111101111", 
    31 => "10111101110110010000010110001001", 
    32 => "10111110000001100001001100101111", 
    33 => "00111101110110011011101111100101", 
    34 => "10111101101001001001100000110111", 
    35 => "10111101101110001111011001100001", 
    36 => "10111101001110001000010010110000", 
    37 => "10111110000110011110000110110110", 
    38 => "00111101100111001011101110001110", 
    39 => "00111110000000001011100101010110", 
    40 => "10111110111000000110111100000101", 
    41 => "10111101110100111100110000110110", 
    42 => "10111110001001101011101101010110", 
    43 => "00111101101110001111100011011000", 
    44 => "10111101101111111100011110111010", 
    45 => "10111100100000100101011011111100", 
    46 => "00111110000100101010000011110111", 
    47 => "00111100101000000010001101100011", 
    48 => "10111110010010000001110000001000", 
    49 => "00111101110110101101110100000011", 
    50 => "10111101111000001001100000100001", 
    51 => "10111110001001110100001101011111", 
    52 => "10111101011111001011001001001010", 
    53 => "10111110010110110001110100110010", 
    54 => "10111110001001010000100110100011", 
    55 => "00111110000101110011011110101100", 
    56 => "00111101000111001101010110111101", 
    57 => "10111110011001000110101111111100", 
    58 => "10111100111111000011011001001011", 
    59 => "00111011010100100101011000001001", 
    60 => "10111101101111001010000100000001", 
    61 => "10111110011100010010010001010100", 
    62 => "00111101100011010001010101110110", 
    63 => "00111101110110011110011000101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibzo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibzo is
    component conv_2_conv_2_weibzo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibzo_rom_U :  component conv_2_conv_2_weibzo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


