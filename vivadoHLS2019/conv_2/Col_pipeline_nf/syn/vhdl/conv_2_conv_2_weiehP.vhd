-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiehP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiehP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100100001111010100010010", 
    1 => "10111110001011011111110111000110", 
    2 => "10111101110110101000111011011110", 
    3 => "00111100111111000110100000010010", 
    4 => "00111101001110001110011100111011", 
    5 => "10111011011101000100011010101000", 
    6 => "00111101111110100111110110100111", 
    7 => "10111100110001011001011101011101", 
    8 => "10111101101111110111011101100100", 
    9 => "00111100000111111100101001111111", 
    10 => "10111110010011001100011000110100", 
    11 => "00111101100101011000100001100000", 
    12 => "00111110011101100110111100111001", 
    13 => "00111100111111110000111010110110", 
    14 => "10111101100101010101110011100110", 
    15 => "00111101000100101001010110101000", 
    16 => "10111110010001000111011100000101", 
    17 => "10111101100100011001111111100111", 
    18 => "10111101000111011101001101010110", 
    19 => "00111101011110101111001100010100", 
    20 => "10111110001001001100001100110101", 
    21 => "00111110001111000010111110111011", 
    22 => "10111101111011010010110101011011", 
    23 => "00111110000100011010111011101011", 
    24 => "00111100100010111010000111100011", 
    25 => "00111110011110110000100000011001", 
    26 => "10111100100001110001101001101000", 
    27 => "00111101111100011111100000100100", 
    28 => "10111101000001000111101001001011", 
    29 => "10111101101110101010101011100011", 
    30 => "10111101011011011111101100000111", 
    31 => "00111101100011010011010000011111", 
    32 => "00111101110111111011001010001011", 
    33 => "10111101100001110001101010101011", 
    34 => "00111101100100001101011011000001", 
    35 => "10111110100110100000000011111000", 
    36 => "00111110001100001000100000110000", 
    37 => "10111100100100010000011100000111", 
    38 => "00111101101110100001101100111010", 
    39 => "10111110010010000100111111010110", 
    40 => "10111100100001011100001000010101", 
    41 => "00111110000010010110000010000101", 
    42 => "00111100000011000000010011111111", 
    43 => "00111101101011001010101111000010", 
    44 => "00111100100010110111010001111011", 
    45 => "00111101010100011100011011110000", 
    46 => "00111101100110111001010110100011", 
    47 => "00111110000100010001000110101011", 
    48 => "00111101111000100011111100111100", 
    49 => "10111110000110001101010100101100", 
    50 => "00111110000111010101011101100100", 
    51 => "10111110000101100110010100000011", 
    52 => "00111101111010000101100111001111", 
    53 => "00111110000001011000010101111100", 
    54 => "00111110000011001000010100111100", 
    55 => "00111110011011111100101001011111", 
    56 => "10111110010001110110101010100110", 
    57 => "10111101000011100111000110110011", 
    58 => "00111110000110011111011100100101", 
    59 => "10111101011011011111001100001100", 
    60 => "00111110010100010000111100100000", 
    61 => "00111110011001111100110111011101", 
    62 => "10111110010110111110111110110000", 
    63 => "10111110000001101110110100000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiehP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiehP is
    component conv_2_conv_2_weiehP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiehP_rom_U :  component conv_2_conv_2_weiehP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


