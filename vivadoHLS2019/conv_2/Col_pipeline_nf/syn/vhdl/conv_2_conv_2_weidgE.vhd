-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidgE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidgE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101101010100000011010000", 
    1 => "10111110011110011001101000010011", 
    2 => "00111110000000010000010010001011", 
    3 => "10111101111111010110001001000101", 
    4 => "00111101010001000000101001011001", 
    5 => "00111101011111000110000110111100", 
    6 => "10111101110000010110110010101111", 
    7 => "10111110000010101111111101001000", 
    8 => "00111101110000011110110010110110", 
    9 => "10111011101111110100011110001111", 
    10 => "10111110000100011010110100100110", 
    11 => "00111101101111001011000100011101", 
    12 => "10111110010110000110100011000100", 
    13 => "00111101101110000011110011110110", 
    14 => "10111101010011001110000001101000", 
    15 => "10111110000011100110001001000110", 
    16 => "10111101101111101101010100001100", 
    17 => "00111100100010011111101111010110", 
    18 => "10111101101110010001100011000000", 
    19 => "10111101000111111111101011001110", 
    20 => "10111110100100111111100010110001", 
    21 => "00111101111000011110011011011001", 
    22 => "00111101101010101001000111110111", 
    23 => "00111101101001110011101100101100", 
    24 => "00111101011011001100000011101010", 
    25 => "00111101111010000101100100011100", 
    26 => "10111101111100100001111010000011", 
    27 => "00111101110000000010100101001010", 
    28 => "10111100001111000111100011000000", 
    29 => "00111101000000011000000010111100", 
    30 => "10111101111000001101011011000110", 
    31 => "10111110001001011110101010101101", 
    32 => "00111101010101011011001111000001", 
    33 => "10111110000011101011101010011111", 
    34 => "10111110010010111101110101100100", 
    35 => "10111101110110110111010101001011", 
    36 => "10111110000001000110010100111101", 
    37 => "00111110000000001000001111111100", 
    38 => "10111101101001011011110110111001", 
    39 => "00111101100100101011001011110010", 
    40 => "00111110001100111010000100101001", 
    41 => "10111101101110011010101000110010", 
    42 => "00111011110011101111111010011111", 
    43 => "10111110101001111100100010001001", 
    44 => "10111101101000000001000010000101", 
    45 => "10111110000101101011000000010011", 
    46 => "10111110001000011000011100010110", 
    47 => "10111110000001101100001100101010", 
    48 => "10111101101000101011100110111001", 
    49 => "10111100100010100100010100110111", 
    50 => "10111101100101110110101110000110", 
    51 => "00111110000110111100000111010110", 
    52 => "00111011110110000101110101101101", 
    53 => "00111100101001000111101100101100", 
    54 => "00111110000011110011101110100000", 
    55 => "10111110100110110100111000001100", 
    56 => "10111101111011110110010111001010", 
    57 => "00111100111110011010100110001001", 
    58 => "00111110000111100011111100101111", 
    59 => "10111101000111110001011110001111", 
    60 => "10111110001001101111110111010011", 
    61 => "10111100100100100100011110001110", 
    62 => "00111100110110111111001101011001", 
    63 => "10111011101011110000111110111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidgE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidgE is
    component conv_2_conv_2_weidgE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidgE_rom_U :  component conv_2_conv_2_weidgE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


