-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidmF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidmF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101100010100110001100001", 
    1 => "10111110011010010100010011011100", 
    2 => "10111110100100101110001111001111", 
    3 => "10111110010000101110111011101011", 
    4 => "00111101110001101011000111010001", 
    5 => "00111110010110011101000111010001", 
    6 => "00111110001011101011110001111111", 
    7 => "00111100111110011100000000110101", 
    8 => "10111110100001111101110101000010", 
    9 => "00111101111110110110010001111101", 
    10 => "00111100110011001001010100110011", 
    11 => "10111101011010011111010100100010", 
    12 => "00111101111001011000110011111100", 
    13 => "10111101011011101111011000111011", 
    14 => "10111110011011011011100101100000", 
    15 => "10111110101100111011011001101011", 
    16 => "10111110001000011000001000000001", 
    17 => "00111100110010110110110100001101", 
    18 => "10111110011100110111000001110110", 
    19 => "10111111000000110111011000111001", 
    20 => "00111101101110111111100000000111", 
    21 => "00111110001011000010010000010010", 
    22 => "10111100111000101001001001100001", 
    23 => "00111101111110111001011100001000", 
    24 => "10111101100000111011011101000011", 
    25 => "10111110100001010001000011111100", 
    26 => "00111110010000010011110010111110", 
    27 => "10111101110010010101010000000110", 
    28 => "10111110100110000000001101111001", 
    29 => "10111110101101111011110000001001", 
    30 => "10111101010111111111110000110110", 
    31 => "10111101011111101110110010011111", 
    32 => "00111110011001110000001111000110", 
    33 => "10111101110011101111100100000100", 
    34 => "00111110010000001110001111111011", 
    35 => "00111110011101101001101010101111", 
    36 => "10111110101000110100000011100000", 
    37 => "10111110100011000110000111110010", 
    38 => "00111110010101110010100101010100", 
    39 => "10111100000010110010000110001001", 
    40 => "00111101010101111101111111011100", 
    41 => "10111110001100101101011111000000", 
    42 => "10111101110101001000110101111110", 
    43 => "00111101000110000000111111001111", 
    44 => "00111110100010100100111001010011", 
    45 => "00111110010011101111011101001011", 
    46 => "00111110001000001101111010100101", 
    47 => "10111100001011010110000001011100", 
    48 => "10111110101001100111001011111001", 
    49 => "00111110011101101011010110110101", 
    50 => "10111101111101100010101010100110", 
    51 => "10111100110001110000101000110110", 
    52 => "00111110000011101011101010111111", 
    53 => "10111101010000011000011001000011", 
    54 => "10111110100000000000011000010011", 
    55 => "00111101001000011100101101011011", 
    56 => "10111110000000101110000100010110", 
    57 => "10111101110110110101000111100000", 
    58 => "10111110000010001000111000100000", 
    59 => "10111110101111001011010010101000", 
    60 => "10111101110011000110111111110010", 
    61 => "10111110001011110101111111100100", 
    62 => "00111101011100100100001010010101", 
    63 => "00111110010000001100000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidmF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidmF is
    component conv_2_conv_2_weidmF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidmF_rom_U :  component conv_2_conv_2_weidmF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


