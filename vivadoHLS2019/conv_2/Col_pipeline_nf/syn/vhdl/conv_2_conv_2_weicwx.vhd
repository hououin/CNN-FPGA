-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicwx_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicwx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101011010011110110110001", 
    1 => "10111110001000100000000101011101", 
    2 => "10111110010011101001101101000010", 
    3 => "00111101101110011101100101011110", 
    4 => "10111101111000000000000000101100", 
    5 => "10111101100101100000100001101000", 
    6 => "10111110011011100010110101011101", 
    7 => "00111101001110010010110110001001", 
    8 => "00111101001001101011110111001000", 
    9 => "00111101000010101100001110010101", 
    10 => "10111110100100001001101111110000", 
    11 => "10111011011001101110101111010111", 
    12 => "10111110101110000011110000011100", 
    13 => "10111101011011110010111111110100", 
    14 => "10111110000101010010111000010101", 
    15 => "10111101100101101001000111110110", 
    16 => "00111101111010000000001000111110", 
    17 => "10111100110000000011000100000100", 
    18 => "00111110100101100110100000001100", 
    19 => "00111101111001011111001111110111", 
    20 => "00111110101101001011001000010110", 
    21 => "10111110001010100111001010010101", 
    22 => "00111101101100001011001110010110", 
    23 => "10111110011011011010111000111011", 
    24 => "10111101010000010111101100010000", 
    25 => "00111100111001111111100111100011", 
    26 => "00111101101011001111000110010001", 
    27 => "00111101110111010101000000111011", 
    28 => "00111101010000010011001100100111", 
    29 => "10111110000110100111011011100110", 
    30 => "10111101101000000101011011011011", 
    31 => "00111011001100001101111101010011", 
    32 => "00111101111100011101010101111101", 
    33 => "00111110000001101111110011000001", 
    34 => "00111101000101110000011111111111", 
    35 => "10111110100011011010100101110011", 
    36 => "00111101101000000100111010111001", 
    37 => "10111110010001101011011111101101", 
    38 => "10111110001110010111101110010000", 
    39 => "10111101100011110110110101110100", 
    40 => "00111101100111100100100011101111", 
    41 => "10111101011000101100100101101010", 
    42 => "10111101110110100010000111010001", 
    43 => "00111101011110001111110010001100", 
    44 => "10111110011001011010000101110111", 
    45 => "10111110000001010001111010110110", 
    46 => "10111110100100011011011001111000", 
    47 => "10111110010101110001101011111000", 
    48 => "10111110001001101010000011010011", 
    49 => "10111101100111010001011011011001", 
    50 => "10111100101100100000001100001110", 
    51 => "10111111000010010100101011000011", 
    52 => "00111101100001111000010010110111", 
    53 => "10111101011001110100111110000111", 
    54 => "10111011010001100111111011111000", 
    55 => "00111101010011110010000101100010", 
    56 => "00111110011001010100011101101001", 
    57 => "00111101001100100100111000111101", 
    58 => "00111101000101100110101010100011", 
    59 => "00111101000111111001000010011111", 
    60 => "10111101100001101100000101001111", 
    61 => "00111110100000101100011000010001", 
    62 => "00111110001001100100100000001101", 
    63 => "00111110001011000001111110001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicwx is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicwx is
    component conv_2_conv_2_weicwx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicwx_rom_U :  component conv_2_conv_2_weicwx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


