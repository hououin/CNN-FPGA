-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibYs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibYs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010100011111111010100", 
    1 => "10111101000000110110011100001100", 
    2 => "00111110000011010100110101000110", 
    3 => "10111100001001101011000001100011", 
    4 => "10111110011010101110101000001011", 
    5 => "00111101100101001010110001111000", 
    6 => "10111101110101101110100000111101", 
    7 => "00111011110110111100000011010110", 
    8 => "10111011111111011011100010110110", 
    9 => "00111101000000111000001011001111", 
    10 => "00111100110101000100101001010011", 
    11 => "10111101111010100011111100001101", 
    12 => "00111100111001001101111100011011", 
    13 => "10111110010100010011110001010011", 
    14 => "10111101000110100110101101100101", 
    15 => "00111110001101101111100000010110", 
    16 => "10111101110101001011001000011011", 
    17 => "00111110001001111111100010001010", 
    18 => "10111110011111000101110010111011", 
    19 => "10111110000000110010001000001001", 
    20 => "10111110101100001101101000011110", 
    21 => "10111101011010110011100011000011", 
    22 => "00111101010110010111010011010001", 
    23 => "10111110101011011100001110010111", 
    24 => "10111101101111000000000111001001", 
    25 => "00111101111110010101110110000110", 
    26 => "00111101111011111010101110010110", 
    27 => "10111110100011101011100011100000", 
    28 => "10111101110101101110011101101101", 
    29 => "00111110000101001111010100011100", 
    30 => "10111110000000000010011110010011", 
    31 => "10111101110001100100110100000110", 
    32 => "10111110100100010111100011000100", 
    33 => "10111100010001011100010110000010", 
    34 => "10111101011011111111011011010110", 
    35 => "10111110000000111001101100100110", 
    36 => "00111100110011010100000110111101", 
    37 => "00111101110101111011100011001011", 
    38 => "00111101000101011011101111100001", 
    39 => "00111101111100010111001001011100", 
    40 => "10111101100110000100010001011101", 
    41 => "00111110000010010110100111101011", 
    42 => "10111101010000110001000110011001", 
    43 => "00111101100010101110000101011000", 
    44 => "00111101011110010001011011111110", 
    45 => "10111110001011111001010111110101", 
    46 => "00111100011010101001011110000010", 
    47 => "00111101011011000111010000101110", 
    48 => "10111100101110100001100001011000", 
    49 => "10111110010101000110110101011010", 
    50 => "10111110001111101011000111110110", 
    51 => "00111101101110100001101010000000", 
    52 => "10111110010101000010110001011110", 
    53 => "10111101101111100100010101101110", 
    54 => "00111110001100000011011110101010", 
    55 => "10111101110000001000000001111001", 
    56 => "10111110000000011111001111011000", 
    57 => "10111110010101110110110100111110", 
    58 => "00111101101010100111000011101011", 
    59 => "10111101011000101010111001001110", 
    60 => "10111110010010010001011100101000", 
    61 => "00111110010101110010100010101111", 
    62 => "00111101111101110011100111011001", 
    63 => "00111110001010000000100000111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibYs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibYs is
    component conv_2_conv_2_weibYs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibYs_rom_U :  component conv_2_conv_2_weibYs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


