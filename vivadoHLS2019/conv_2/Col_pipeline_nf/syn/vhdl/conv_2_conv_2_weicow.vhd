-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicow_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicow_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100100110110100000111100", 
    1 => "00111101111111000110011111110101", 
    2 => "10111101000111010111010100011010", 
    3 => "10111101111001111101111110001011", 
    4 => "00111101110100000001000001110110", 
    5 => "00111101010001011101101001111101", 
    6 => "00111101110100010111100111010001", 
    7 => "10111110000101000001011111111010", 
    8 => "00111101000010011100001111001110", 
    9 => "10111101011101000010000000100010", 
    10 => "00111110000011000111011001011100", 
    11 => "10111101100001101001111110010000", 
    12 => "00111100110000001111110001000110", 
    13 => "00111101010011110111110110000110", 
    14 => "00111101111010101010011010101100", 
    15 => "00111100101101100110010100101100", 
    16 => "10111100110101101011011010000100", 
    17 => "10111101111010010111111000110000", 
    18 => "00111101100000101110011000010100", 
    19 => "00111101001101100011001000100110", 
    20 => "10111101110001000000000111101101", 
    21 => "10111101011101011010010011000011", 
    22 => "00111101110100111010011010010111", 
    23 => "10111101100110101100101001000101", 
    24 => "00111101101010101000110001100001", 
    25 => "00111101011111001101111101010011", 
    26 => "10111101101000011101001100001110", 
    27 => "10111110100101111111110011001100", 
    28 => "00111101011111011101110001010110", 
    29 => "00111101100000100110011101001110", 
    30 => "10111101110100100111111110111001", 
    31 => "10111011000111101100001001111111", 
    32 => "10111101000001111001111010110010", 
    33 => "10111101101001100000011010101010", 
    34 => "10111101100000010000111010101010", 
    35 => "00111100100001111110000110101110", 
    36 => "00111100100100110100110000100100", 
    37 => "10111101011100101100000001110100", 
    38 => "00111100100101110100000101000000", 
    39 => "10111110000110011101110000100011", 
    40 => "10111101110011100010000110110101", 
    41 => "10111011110110010110011011101111", 
    42 => "10111101000111101011011010010101", 
    43 => "10111101101111011101001111000010", 
    44 => "10111101010111010010001010100001", 
    45 => "10111100101100010010110001101100", 
    46 => "00111101011000101110111100001001", 
    47 => "00111011110101110101010000001111", 
    48 => "10111101011111001001011011010011", 
    49 => "10111110010110100110011001101100", 
    50 => "00111110000101011000111011010111", 
    51 => "00111110001001100010100000111010", 
    52 => "10111101101111011110001110001111", 
    53 => "10111101001010111110011001100001", 
    54 => "00111100001010100001100010001111", 
    55 => "10111110010110101010001100100110", 
    56 => "00111101111000111011010100100111", 
    57 => "00111100110111101100011101010000", 
    58 => "10111110011100011111010111010111", 
    59 => "10111010100100000101001000101100", 
    60 => "00111101110001110101101101011010", 
    61 => "10111101000010010110000011001101", 
    62 => "10111101111111100111001101000110", 
    63 => "10111101011100010100111101110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicow is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicow is
    component conv_2_conv_2_weicow_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicow_rom_U :  component conv_2_conv_2_weicow_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


