-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibgk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibgk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100010001010111110100011", 
    1 => "10111110000000000101011101111010", 
    2 => "00111110011001010110010111110010", 
    3 => "10111101100001011111011111110101", 
    4 => "10111101110001010100010000010110", 
    5 => "10111110001011000100001111001101", 
    6 => "10111101110100101100110100000000", 
    7 => "00111110010001010111001110100011", 
    8 => "10111110100111001110110100101011", 
    9 => "10111101101010101000000111001001", 
    10 => "00111101110111101111001100001111", 
    11 => "00111100000000101101001101100111", 
    12 => "10111110011001110000011100101011", 
    13 => "10111111000000011100000110000111", 
    14 => "10111110101110000100001101001110", 
    15 => "10111100111100011110101000011000", 
    16 => "10111110010100010000001011111010", 
    17 => "10111110011000010001111010100111", 
    18 => "10111110100010100110101001011100", 
    19 => "10111101101001100110100110001101", 
    20 => "00111101001100101110100110000111", 
    21 => "10111110111010001101011111111010", 
    22 => "10111110110011000001001100000111", 
    23 => "10111110100011111100110000110001", 
    24 => "10111110100100111110100100000100", 
    25 => "10111110001100101010010011100010", 
    26 => "10111110000011000100101110001011", 
    27 => "10111101101000111001111111000100", 
    28 => "10111101101010110111000100100101", 
    29 => "10111101101110111101001111001001", 
    30 => "10111101001101010111010001000111", 
    31 => "00111100000111101101001011111111", 
    32 => "00111110000010000110101110001010", 
    33 => "00111101110010011110011010011100", 
    34 => "00111101111110100011010001101011", 
    35 => "10111101110001111001111110110011", 
    36 => "00111101000011010001110110111100", 
    37 => "10111101101010010111111101001000", 
    38 => "10111101111001110001000110011111", 
    39 => "10111110011010101011011110010110", 
    40 => "10111110101010111011011011111110", 
    41 => "10111110001011011111000110101011", 
    42 => "10111110110001001101000010111110", 
    43 => "10111010010000111000110111000000", 
    44 => "10111101001011010010111000100111", 
    45 => "10111101001111110010001001111010", 
    46 => "10111110001101111111100100011100", 
    47 => "10111101100101011111011110000000", 
    48 => "10111100111111010110100000000000", 
    49 => "00111110011110000011101101011001", 
    50 => "10111101100001011001111011110100", 
    51 => "10111110011100101110111111010001", 
    52 => "10111101101011100001000011111000", 
    53 => "10111110101111111000011000001011", 
    54 => "10111110101110011000011001011011", 
    55 => "10111010110110110011000110110100", 
    56 => "10111101101001111111010011000010", 
    57 => "10111110010011110001100001110010", 
    58 => "10111110100001000100011011000101", 
    59 => "00111011101100101011010011011101", 
    60 => "00111101001111101010111111110010", 
    61 => "10111110001101011000101001000110", 
    62 => "00111101010000111000010100001110", 
    63 => "10111110011111000000000111000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibgk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibgk is
    component conv_2_conv_2_weibgk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibgk_rom_U :  component conv_2_conv_2_weibgk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


