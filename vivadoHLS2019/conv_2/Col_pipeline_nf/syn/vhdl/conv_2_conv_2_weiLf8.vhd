-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiLf8_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiLf8_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001101010100000110001000", 
    1 => "10111100100000101001111101011010", 
    2 => "10111110000001010001000101111101", 
    3 => "10111101010010111101011101110010", 
    4 => "00111110000000100101110011101010", 
    5 => "00111101001000101110101111010011", 
    6 => "00111100111101110100010000100111", 
    7 => "10111100100100111010100000101110", 
    8 => "00111100001010110000010101101111", 
    9 => "00111100100100010110111100110000", 
    10 => "00111100011001010001010010111010", 
    11 => "10111101000010000110001110101010", 
    12 => "00111101011001000100011001000011", 
    13 => "10111101100000010010111100010011", 
    14 => "00111101001101101101100010111000", 
    15 => "00111101111000110000101100000001", 
    16 => "10111101001001111010000010011101", 
    17 => "10111101000001100110010101000010", 
    18 => "10111110001001101111111111001001", 
    19 => "10111101110101101101000010111111", 
    20 => "00111101000100110011100000110101", 
    21 => "10111100000101110000011100110100", 
    22 => "10111101111010011011000101110000", 
    23 => "10111100110100101100110111101110", 
    24 => "00111101011100010111101011110001", 
    25 => "00111100100100010010001000001000", 
    26 => "00111100110101001001101011001110", 
    27 => "10111110100001001110110111100010", 
    28 => "10111100111111101110101001110000", 
    29 => "00111100100000110001000100001110", 
    30 => "00111101101001100011001111000111", 
    31 => "10111101101001100110110001100011", 
    32 => "10111101101001100011101110010111", 
    33 => "00111101000011111100110011110111", 
    34 => "10111101100011010100000100001100", 
    35 => "10111100101010110110011011110010", 
    36 => "10111101100101100100110010001110", 
    37 => "00111110000001000001100001100110", 
    38 => "00111101000111101101000100110100", 
    39 => "10111101011010010011111000101100", 
    40 => "10111110010100111101100101001010", 
    41 => "10111100110010010010010011000111", 
    42 => "00111110000010011001100011010111", 
    43 => "00111101110011000011100100011101", 
    44 => "00111101110110111010111111001100", 
    45 => "00111100000010010110000100100111", 
    46 => "00111100011000001000100001110101", 
    47 => "00111100111101100111010101111101", 
    48 => "10111101101111111111001101000110", 
    49 => "10111110001000010110011001001101", 
    50 => "10111101011101111101001101001011", 
    51 => "10111101100101001000100110011001", 
    52 => "10111110001011101101000001111011", 
    53 => "00111100011000101010111110011111", 
    54 => "10111110001001110001100011010100", 
    55 => "10111110000010010010001001010000", 
    56 => "10111011111100100010100001111100", 
    57 => "00111101001110011010011101001011", 
    58 => "10111101110001100000100011100111", 
    59 => "00111101101001011110100100000011", 
    60 => "10111101100010000101100111011101", 
    61 => "10111100001110011010101001011111", 
    62 => "00111100100100101100001000100000", 
    63 => "00111100001001001001011010011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiLf8 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiLf8 is
    component conv_2_conv_2_weiLf8_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiLf8_rom_U :  component conv_2_conv_2_weiLf8_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


