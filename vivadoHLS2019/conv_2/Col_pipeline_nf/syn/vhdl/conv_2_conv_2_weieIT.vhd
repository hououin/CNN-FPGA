-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieIT_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieIT_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001111010010001100001101", 
    1 => "10111101101111110110010001010000", 
    2 => "10111101100010010101000101110110", 
    3 => "10111101011101001101011001101101", 
    4 => "00111100001010101110100000111001", 
    5 => "10111110110001011111110000001000", 
    6 => "00111110000010100010011001011110", 
    7 => "10111101001010111110011001010001", 
    8 => "00111110000111000000000000001111", 
    9 => "10111110100111101101100011101110", 
    10 => "10111110000011001011101001110000", 
    11 => "10111110000111010010010001100011", 
    12 => "00111110000011011000000001010001", 
    13 => "00111110000010001100011000011011", 
    14 => "00111101001110111101001011011101", 
    15 => "10111101110001000000010110110011", 
    16 => "10111101101101110001110011101110", 
    17 => "10111101110011111011101010000000", 
    18 => "00111100001110110011100001010100", 
    19 => "10111101000001111100100100111000", 
    20 => "00111100110011111001101101100101", 
    21 => "10111101000110100010000010001111", 
    22 => "10111011111100001011110011100100", 
    23 => "00111100111111000011100000111001", 
    24 => "00111110100000101010101001001111", 
    25 => "00111101101101100001101110000101", 
    26 => "10111110100011111000110111101000", 
    27 => "00111101110101111011010000000010", 
    28 => "10111101000101110011000001100001", 
    29 => "10111101011110011100000101010001", 
    30 => "10111110011000110000101011000111", 
    31 => "00111101100001011010000100111101", 
    32 => "10111101110111001111111101011110", 
    33 => "00111101111010010110100110110001", 
    34 => "10111110101000101010111000101101", 
    35 => "10111110110010000001000001000110", 
    36 => "00111110000000100101111010111110", 
    37 => "00111110011000100000101110101001", 
    38 => "00111101101101101110100101111101", 
    39 => "00111011110011000100010110000111", 
    40 => "10111011100100001010100111110001", 
    41 => "00111110001100110001101101101111", 
    42 => "00111101100110111010011011101000", 
    43 => "00111110000000100010111110100110", 
    44 => "10111101011011011111101111001111", 
    45 => "10111100110111110100010000110111", 
    46 => "00111110100011111001101001011101", 
    47 => "00111110000000000100000011010111", 
    48 => "00111101000000010110110111100010", 
    49 => "00111110010100001010001101011011", 
    50 => "00111101111010000110110000100100", 
    51 => "10111110100101011111100111011011", 
    52 => "00111101101111100101110100111111", 
    53 => "10111110000100101111010011011110", 
    54 => "10111101010111000001111111000000", 
    55 => "00111100110110110000010001000010", 
    56 => "10111101100010110001000000111011", 
    57 => "10111010111101101000110100110010", 
    58 => "00111101011101111101000011101010", 
    59 => "10111101110110100010001100110111", 
    60 => "10111100110000110000101110010001", 
    61 => "00111101000111110000010011001101", 
    62 => "10111110000000110110110000011011", 
    63 => "10111101100110010001001000010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieIT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieIT is
    component conv_2_conv_2_weieIT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieIT_rom_U :  component conv_2_conv_2_weieIT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


