-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiwdI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiwdI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000110001110100101000011", 
    1 => "10111100110100111101011001110011", 
    2 => "10111101100100001001111110000110", 
    3 => "00111101010011001111010001011100", 
    4 => "10111101101011101101011011110001", 
    5 => "10111011011001000101100100100100", 
    6 => "10111101110100000101011011011111", 
    7 => "10111101001110100000000000001101", 
    8 => "10111101100101111111001000111110", 
    9 => "10111110100000110010110100011000", 
    10 => "10111101101101110011101000010100", 
    11 => "10111101100000100011010100001000", 
    12 => "10111110010000101100111011001111", 
    13 => "00111101000110101001001111100011", 
    14 => "00111100101111010111100001100000", 
    15 => "00111100001000010010100101100110", 
    16 => "10111110011010111011011101001100", 
    17 => "00111101000011001100010000111011", 
    18 => "00111101101101111001100001010110", 
    19 => "00111110000110101011011111101001", 
    20 => "00111101010010000110001100100100", 
    21 => "10111110011010100111010001101101", 
    22 => "10111101111000011001100100000100", 
    23 => "00111101101100001101010111001110", 
    24 => "10111110001110001110011111000100", 
    25 => "00111011111011000110011010110000", 
    26 => "10111101111001010101010101011010", 
    27 => "00111101111100011011111010101011", 
    28 => "00111101011101110001001011101111", 
    29 => "10111101011010011111100001000011", 
    30 => "00111101101010101010100110110110", 
    31 => "00111101111010011001001011000001", 
    32 => "10111101111001000001011011001010", 
    33 => "10111110000011110010101101100010", 
    34 => "10111101100101011100010111010110", 
    35 => "00111110100001011111001111000001", 
    36 => "10111101111111010110110001001111", 
    37 => "10111100100001111101111110110000", 
    38 => "10111100100101111010100110010000", 
    39 => "10111100100010000100011100000011", 
    40 => "00111101010110000111111001110010", 
    41 => "10111101001010100010101101111010", 
    42 => "10111011011000111011011100101001", 
    43 => "00111101111001111111001101110001", 
    44 => "00111011111100000101101000101010", 
    45 => "10111100111101100100111000110000", 
    46 => "10111101000101111010110100101011", 
    47 => "00111011111110111100010111010101", 
    48 => "00111110010100110111000110010101", 
    49 => "10111110110011010000101001000011", 
    50 => "10111110010110001001110111010100", 
    51 => "10111110000101101110100110011111", 
    52 => "10111110010011110011010100001111", 
    53 => "00111110000111110010011101000101", 
    54 => "10111101100100000000010110011111", 
    55 => "10111101001100111000110110000010", 
    56 => "00111101101010010000000011011110", 
    57 => "00111100101001010101101101100010", 
    58 => "10111101011000011110001101001110", 
    59 => "10111011111100100001010100001101", 
    60 => "00111101110000000110101001110001", 
    61 => "00111100100001100110011110100011", 
    62 => "10111101011111100010010111111100", 
    63 => "10111101100011101000000000111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiwdI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiwdI is
    component conv_2_conv_2_weiwdI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiwdI_rom_U :  component conv_2_conv_2_weiwdI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


