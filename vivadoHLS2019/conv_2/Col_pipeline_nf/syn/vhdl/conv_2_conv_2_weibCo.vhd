-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibCo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibCo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100101100111101001011", 
    1 => "10111110001011101010110100000001", 
    2 => "00111100010011110101011100001100", 
    3 => "10111110000101100011011001110100", 
    4 => "00111100011111000101100111000101", 
    5 => "10111101000011010000101000010111", 
    6 => "00111101101011001000001001010101", 
    7 => "10111100100001011011010111000000", 
    8 => "10111100111000001011000110011001", 
    9 => "00111101010101110011110101101110", 
    10 => "10111100110110110101101011011101", 
    11 => "00111101111011010100010111010100", 
    12 => "10111101000101000001000001011000", 
    13 => "10111101000011000001000110111100", 
    14 => "10111101011011011110000010000110", 
    15 => "10111110000011110111010010100000", 
    16 => "00111100100111100001101001100010", 
    17 => "00111101000110101101101001101100", 
    18 => "10111100101110100110001011010110", 
    19 => "00111110000010110110101110000010", 
    20 => "10111110011101101110101111101010", 
    21 => "10111101110000000001000010110011", 
    22 => "00111011010110010100110001111101", 
    23 => "10111101101010000010010001100000", 
    24 => "00111101100111110010010101101011", 
    25 => "10111100110011100001111111000111", 
    26 => "10111101111100011100110001111111", 
    27 => "10111110000101100111110011010100", 
    28 => "10111110001010011011010000100100", 
    29 => "00111101111100111001101000110110", 
    30 => "10111100001100010110100101000011", 
    31 => "10111110011101111101001001000011", 
    32 => "00111100110010111111010011001100", 
    33 => "10111110011100110010110001100111", 
    34 => "10111101101101011111010100111110", 
    35 => "10111101101100011101110111111101", 
    36 => "10111110101011010001100001101111", 
    37 => "10111110011001101011010111110011", 
    38 => "10111100110001100111101000010011", 
    39 => "10111100101001011011100101010100", 
    40 => "00111110000001111111010101101000", 
    41 => "10111011000001111011010100111000", 
    42 => "00111110000010001001111100101110", 
    43 => "10111010111011110010100010001111", 
    44 => "00111110000011100110110110111000", 
    45 => "10111110000000100001000010010101", 
    46 => "10111100101100101100101111010001", 
    47 => "10111101011111101010110000001100", 
    48 => "00111100000000011000001111110000", 
    49 => "10111110100011110100111110000010", 
    50 => "00111100111001110000111000110110", 
    51 => "00111101010001100110110000000100", 
    52 => "10111110010011011010001111110000", 
    53 => "10111100100111011010010100000101", 
    54 => "00111101101110010111101101011011", 
    55 => "10111110001010001100111000101111", 
    56 => "10111101110010100001001110100100", 
    57 => "00111110000000011111101110010110", 
    58 => "00111101010111101111011100011010", 
    59 => "00111110011010000110010100001100", 
    60 => "10111110000011111100110000011000", 
    61 => "10111110001101101100110001110111", 
    62 => "00111101100000010000000010110111", 
    63 => "10111101011100010001111110111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibCo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibCo is
    component conv_2_conv_2_weibCo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibCo_rom_U :  component conv_2_conv_2_weibCo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


