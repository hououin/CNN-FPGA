-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidSL_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidSL_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010001010001111000101", 
    1 => "10111110010110001100111011010001", 
    2 => "10111110010100100000100011011101", 
    3 => "10111101110011010111000110101001", 
    4 => "00111011110111001001001011000011", 
    5 => "00111101010100111101100001110000", 
    6 => "10111110100110000101100001111111", 
    7 => "10111100001010110101111111000101", 
    8 => "10111101001010011001001100100110", 
    9 => "10111101110010100011000010111110", 
    10 => "10111100111100110100100110101010", 
    11 => "10111110001001101100001001010111", 
    12 => "10111110100011011001100011010101", 
    13 => "10111110101001011111001010000000", 
    14 => "10111110010001010101111101011011", 
    15 => "10111101100010111110111111110100", 
    16 => "10111110100010101000001101101111", 
    17 => "00111110001010001011110110111000", 
    18 => "10111110100001111011110100011101", 
    19 => "10111110101001000111101110011111", 
    20 => "00111101110100110110110100000101", 
    21 => "10111101010010000110000100011000", 
    22 => "10111110011101000110100100100001", 
    23 => "00111100101110100010000100110101", 
    24 => "10111110100000001100101001110001", 
    25 => "10111100111110000001100101010101", 
    26 => "00111110011011010011100101100101", 
    27 => "00111101000001001011101110110011", 
    28 => "10111110011011011100000011000001", 
    29 => "10111110001010111111011000001101", 
    30 => "00111101100110111110010111001110", 
    31 => "00111101001001010100101011100000", 
    32 => "00111110000100010111101110010000", 
    33 => "00111101111011001000010101101110", 
    34 => "00111101110010111111000000000010", 
    35 => "00111101010111101000001010001111", 
    36 => "10111101111011011111000001010111", 
    37 => "10111101110000110111000111010001", 
    38 => "10111110000101000000010110110100", 
    39 => "00111101100111111011001011000010", 
    40 => "10111101101100111001111011110010", 
    41 => "10111101010000100111011000010100", 
    42 => "10111110100111001111010010000111", 
    43 => "00111101100011110110111000100011", 
    44 => "10111101001111001001010101100100", 
    45 => "00111110011110010101001000000101", 
    46 => "10111100100100110011000001010000", 
    47 => "10111101100111010110001001011010", 
    48 => "10111110101011010110000001110111", 
    49 => "00111101100110100100011100111010", 
    50 => "10111110101111010001000010000101", 
    51 => "10111110001011001101010001110100", 
    52 => "10111100110011011101000111010101", 
    53 => "00111100101110110110110111101010", 
    54 => "10111110000100010000100101110000", 
    55 => "00111110000110000100001101100100", 
    56 => "10111110011100111101111111010001", 
    57 => "10111110001011000010011111100110", 
    58 => "10111100111011011010100101011110", 
    59 => "10111101101011000001110011111000", 
    60 => "10111110001101100111111110100110", 
    61 => "00111101100011010001111111111110", 
    62 => "10111110011101100000011100111000", 
    63 => "10111101101010100100011011000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidSL is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidSL is
    component conv_2_conv_2_weidSL_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidSL_rom_U :  component conv_2_conv_2_weidSL_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


