-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weipcA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weipcA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001001111011011111001000", 
    1 => "10111110000011101110001110110001", 
    2 => "00111101010101001011001100101001", 
    3 => "00111101101100000011110011011111", 
    4 => "10111101100100011111111011011111", 
    5 => "00111011111010101011010010101001", 
    6 => "00111100110111000000010011011010", 
    7 => "10111110000000110010101101001010", 
    8 => "10111101001011110100000010011101", 
    9 => "00111101100100011001010010010010", 
    10 => "10111101000011100111010001100110", 
    11 => "10111010100111111001100011100101", 
    12 => "00111101010000011111111011000101", 
    13 => "10111101101001010100100100011010", 
    14 => "10111101011111010011001111000001", 
    15 => "10111101111000001111110101010010", 
    16 => "00111100111110101101010101111010", 
    17 => "10111011111010100100111101001111", 
    18 => "10111101100010011011101001101011", 
    19 => "10111101001100111101000101100110", 
    20 => "10111110000010110001011000011101", 
    21 => "10111110010011110011111000010101", 
    22 => "10111101111001001011110100101111", 
    23 => "10111101101100101011000001110000", 
    24 => "00111100100110101000010011111101", 
    25 => "00111101101111101001000100001111", 
    26 => "10111101101111001011000000101000", 
    27 => "00111101001111001100111001100111", 
    28 => "10111100000111100101101101100001", 
    29 => "00111101101110110111111100011011", 
    30 => "00111101110110111001110110100001", 
    31 => "00111100111100010100000011101100", 
    32 => "10111101101011100010110001000001", 
    33 => "10111110110010000110100111111111", 
    34 => "00111101111001011010000001101111", 
    35 => "10111100110100101000101010010110", 
    36 => "00111100100011111011100010100011", 
    37 => "00111101111100110011111000000001", 
    38 => "10111100101011111000101110100111", 
    39 => "00111101010001001011110111100010", 
    40 => "00111101010111101001110011000101", 
    41 => "00111110000110001001000010110110", 
    42 => "10111110010100101111011000111001", 
    43 => "10111110001010110100100000110000", 
    44 => "00111100100110011100011010101011", 
    45 => "10111101000100010000000101100101", 
    46 => "00111101010101110101001111101000", 
    47 => "00111101101111110100001101000111", 
    48 => "00111100101001100011000101110011", 
    49 => "10111110101010101010100001110000", 
    50 => "10111100110000110110010111101101", 
    51 => "00111101010001001101001010001000", 
    52 => "10111110011111101001011111111110", 
    53 => "00111101100111100001001101000100", 
    54 => "00111100110100010011011110111011", 
    55 => "10111101110110000110110010000011", 
    56 => "10111110000100001111010000111101", 
    57 => "00111101001001101001101101011011", 
    58 => "10111100101111101000010010111001", 
    59 => "00111101000100001001000010000010", 
    60 => "10111101011101100001110011100100", 
    61 => "00111100001000101000011101110010", 
    62 => "00111101100111001011100101010100", 
    63 => "00111101100010100100110101111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weipcA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weipcA is
    component conv_2_conv_2_weipcA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weipcA_rom_U :  component conv_2_conv_2_weipcA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


