-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieOU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieOU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000011111101000111000011", 
    1 => "10111101100001000010010110011111", 
    2 => "00111101101111001110100011000111", 
    3 => "10111110011001011011111100111101", 
    4 => "00111110000101111011001101100000", 
    5 => "10111110001100111001101111000101", 
    6 => "00111101100110000001110100110010", 
    7 => "00111101011010011011111111000111", 
    8 => "00111110000100111010000111011111", 
    9 => "10111110101101000010000010001010", 
    10 => "00111101011010011110101001000111", 
    11 => "10111101101111101100101000010000", 
    12 => "00111101001000100100101110001001", 
    13 => "00111100111010100111011011010100", 
    14 => "00111101101100110001100101110001", 
    15 => "10111101010100110011010110111101", 
    16 => "10111110000000110010011111110000", 
    17 => "10111101011101001000001010010011", 
    18 => "10111110101100101110100011110100", 
    19 => "00111110000111110111111110101111", 
    20 => "00111100101010100100110100011000", 
    21 => "00111101100000001100000110010110", 
    22 => "10111101010100100111011010001100", 
    23 => "00111110100010010110011000101100", 
    24 => "00111101100011100000101010111101", 
    25 => "10111101100001101011111000000111", 
    26 => "10111110011110001110000010000000", 
    27 => "10111110000011100011000000001001", 
    28 => "10111101011110011010110111100110", 
    29 => "00111100001000111100011101011111", 
    30 => "10111110001000001011000010011010", 
    31 => "00111100100111101101110101001111", 
    32 => "10111110010111111110000111000100", 
    33 => "00111100010000001011101100100101", 
    34 => "10111110110100001010001101011110", 
    35 => "10111110101001011000110011001001", 
    36 => "10111101101001101101010000101011", 
    37 => "00111101011000010111001000011011", 
    38 => "00111110001101010000100011010011", 
    39 => "10111100111100111111001001000010", 
    40 => "00111101001110001010001010011100", 
    41 => "10111110001001101000000100010001", 
    42 => "10111101011110111110001101000110", 
    43 => "10111110100011100111110101000010", 
    44 => "00111101101110100011011100110101", 
    45 => "10111101111110011101110000100011", 
    46 => "10111100111000111110011010101001", 
    47 => "00111101001111111011001000001101", 
    48 => "00111101110100101111100110010110", 
    49 => "10111100000101111100101011111000", 
    50 => "10111101110100101110001110110010", 
    51 => "00111101010011001101011101011000", 
    52 => "10111101000001110010000010010001", 
    53 => "10111101001000011001110001011010", 
    54 => "00111101101001100110100110111000", 
    55 => "10111110010000000001001110001100", 
    56 => "10111110000101101011110111011100", 
    57 => "00111110011001011000101010101100", 
    58 => "00111110001100100001100101001110", 
    59 => "10111101010000010011100100001011", 
    60 => "00111100111110110100010101011111", 
    61 => "00111101111001011001010100001110", 
    62 => "10111101110000100101011011011100", 
    63 => "00111101100001001010011011001110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieOU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieOU is
    component conv_2_conv_2_weieOU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieOU_rom_U :  component conv_2_conv_2_weieOU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


