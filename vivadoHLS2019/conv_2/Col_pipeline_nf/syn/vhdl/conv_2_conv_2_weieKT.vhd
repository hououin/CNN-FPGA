-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieKT_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieKT_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001101011111000001000001", 
    1 => "00111110010011110101111010011100", 
    2 => "00111101100110000101111100111110", 
    3 => "10111110100110001000001100011011", 
    4 => "10111110010110101110100110110010", 
    5 => "00111101110110000010100001111001", 
    6 => "10111110110111100010011111111101", 
    7 => "00111101011101001000001111110010", 
    8 => "10111101110000100110000111111111", 
    9 => "10111110100110011100001000010010", 
    10 => "00111101111100001111101010001111", 
    11 => "10111101100100001001101111111110", 
    12 => "10111110011111011010010101010100", 
    13 => "10111110100011010011011100111011", 
    14 => "10111110011001001111010000011011", 
    15 => "10111110001010101000110110011111", 
    16 => "10111101100110100111111001100110", 
    17 => "10111101110001000111001110010000", 
    18 => "10111110010100100111101000110101", 
    19 => "00111101010110111100000101100100", 
    20 => "10111110110001111010010011000111", 
    21 => "00111101101011101111110010010110", 
    22 => "10111110001101101010101100011010", 
    23 => "00111101111000111001101101100010", 
    24 => "10111100000000111111001110001011", 
    25 => "10111101010010010011001001010111", 
    26 => "10111100101101101011100110101010", 
    27 => "10111110100110010101000011010101", 
    28 => "10111110101100010101010100011101", 
    29 => "00111101110100111111110010011101", 
    30 => "00111101101111110000000001011110", 
    31 => "10111110011011111100110000101100", 
    32 => "10111110100100001110111000110001", 
    33 => "10111110101101111000001111100001", 
    34 => "10111110100100101101011000011111", 
    35 => "10111110001110110101111111100101", 
    36 => "00111101110010001011001101001010", 
    37 => "00111101010000010011111010111011", 
    38 => "00111100101100011101001101011001", 
    39 => "00111101101101011011000000001100", 
    40 => "00111101110010011111001101010111", 
    41 => "10111110110010110011010100011010", 
    42 => "10111110110111010101010010010110", 
    43 => "10111110111011111000111110001101", 
    44 => "00111110001001000100000111111100", 
    45 => "10111101011100011000001100100101", 
    46 => "10111110100001010110111110010111", 
    47 => "10111110110110011001000100100111", 
    48 => "00111101001011011011001000010010", 
    49 => "10111110110001101100110011011111", 
    50 => "10111110000010100101100101011100", 
    51 => "00111100010100100000101011010111", 
    52 => "10111110100001101100111011100001", 
    53 => "00111110100111001110110110110110", 
    54 => "00111110000110011011010001011011", 
    55 => "10111110000001110000000001000011", 
    56 => "10111110111000100101101010100111", 
    57 => "00111101100100010101000110101000", 
    58 => "00111100110110111011111001101100", 
    59 => "10111110000011111101100011101110", 
    60 => "00111110011100000110101000010101", 
    61 => "00111101011110001110101100001011", 
    62 => "00111101010101011101000100111101", 
    63 => "00111110000000000111110111001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieKT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieKT is
    component conv_2_conv_2_weieKT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieKT_rom_U :  component conv_2_conv_2_weieKT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


