-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiegO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiegO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001110100100011011101000", 
    1 => "10111100101111100101110001000111", 
    2 => "10111101000101111110010100000111", 
    3 => "10111100101000010011001111100101", 
    4 => "00111110001100000001010010111100", 
    5 => "10111110000010100110010100100111", 
    6 => "00111100010010101000100110110101", 
    7 => "10111011111111011111100101000010", 
    8 => "00111110001001010111011100011001", 
    9 => "10111101101111011011000111100010", 
    10 => "10111110011100111001111000110111", 
    11 => "10111110011100110011100110000110", 
    12 => "10111011100111101000111111001010", 
    13 => "00111100110010101000011010100110", 
    14 => "00111110000011010010010101110001", 
    15 => "00111110000101111100111001001011", 
    16 => "00111100111100110101110100011111", 
    17 => "10111110000001001101101010001000", 
    18 => "10111100100011111101001110101100", 
    19 => "00111101110000011011010011010101", 
    20 => "10111110001010100100000010001000", 
    21 => "00111101001000001011001101111101", 
    22 => "00111011000010000100010001101001", 
    23 => "10111101000010101110101010101000", 
    24 => "00111100100100011000110001111001", 
    25 => "00111101100101101011001011010001", 
    26 => "00111100111011100011010111101001", 
    27 => "10111101010110011011000110011000", 
    28 => "00111101101101111100101001101100", 
    29 => "10111110000110110010101101001011", 
    30 => "10111101100110000000001010110110", 
    31 => "10111101101001101111111010101110", 
    32 => "10111110100111001000011111000001", 
    33 => "10111101101001010111001101110000", 
    34 => "10111101111000100001001011101000", 
    35 => "10111101001011001111111100001111", 
    36 => "00111101110111000000111110010010", 
    37 => "10111110101000110100011000010111", 
    38 => "00111010100111101010100101011110", 
    39 => "10111101100001010000100101110100", 
    40 => "10111101000110110011111010101111", 
    41 => "00111011111100011000111100101010", 
    42 => "00111101011010010010011011100110", 
    43 => "00111101001010111101011100011111", 
    44 => "10111110001010000100011000110001", 
    45 => "10111110100010011010101011000100", 
    46 => "10111101111110111011100000010100", 
    47 => "10111101100001011100100101110000", 
    48 => "10111101001110111000110000110010", 
    49 => "10111101101111100111011001110101", 
    50 => "00111101100111010110101110100111", 
    51 => "10111110001010101011110001111010", 
    52 => "10111101101100010010110011101001", 
    53 => "00111100011010010010101000000011", 
    54 => "10111101101000100011010100000110", 
    55 => "00111101100101000111000110000100", 
    56 => "00111010111011110001000001000000", 
    57 => "00111101101100101010101101010010", 
    58 => "10111110000010011100001011011100", 
    59 => "10111101001111100001000111001001", 
    60 => "00111101110010100000100101111101", 
    61 => "00111110000001101000010001010000", 
    62 => "10111110001000101100111011010100", 
    63 => "10111101110001100100110010111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiegO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiegO is
    component conv_2_conv_2_weiegO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiegO_rom_U :  component conv_2_conv_2_weiegO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


