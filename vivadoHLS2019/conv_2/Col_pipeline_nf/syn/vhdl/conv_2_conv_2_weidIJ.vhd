-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidIJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidIJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100110101010110110011001110", 
    1 => "00111101101000100100011010011101", 
    2 => "00111110000111011100110101011110", 
    3 => "10111110000111010011101010011100", 
    4 => "10111101100010110000101111010100", 
    5 => "10111110101011010101100000001111", 
    6 => "10111110010111111001001001100111", 
    7 => "10111011010001101000000111101101", 
    8 => "10111110000010101010111010111110", 
    9 => "10111110010000110010010101011011", 
    10 => "10111101110001110111111111101111", 
    11 => "10111110000010111011011100111001", 
    12 => "10111101111111100001010110001011", 
    13 => "10111100000101110000101100011110", 
    14 => "10111101001101101010101001001100", 
    15 => "10111101011000001111100111011101", 
    16 => "10111110101010011111011111110111", 
    17 => "00111101000000000100001110010010", 
    18 => "10111110000000000010101101100010", 
    19 => "00111110000001110001111000111001", 
    20 => "10111101010001001111111101111111", 
    21 => "00111110010101110000101110000100", 
    22 => "10111101011001111000010110111000", 
    23 => "10111110000101010111000011010111", 
    24 => "10111101011111100000000111010001", 
    25 => "00111010110111111000110011110000", 
    26 => "10111110011010111101011000111110", 
    27 => "00111110100100100001001000111101", 
    28 => "00111110011001111011110001001111", 
    29 => "00111110000100010000100100110010", 
    30 => "00111110010110110101011001110010", 
    31 => "00111100100100010100011110110010", 
    32 => "10111110101000010101010010000101", 
    33 => "00111101100001100101101111100000", 
    34 => "10111110100100001100001110011010", 
    35 => "10111110101011010100011100100101", 
    36 => "00111110110010010011001101001000", 
    37 => "00111101010000101010011001001001", 
    38 => "10111101110111011100100011111100", 
    39 => "10111110001010111010000011101100", 
    40 => "00111110001101000010001111100111", 
    41 => "10111110101000101110110110010011", 
    42 => "10111110011010011010111011001000", 
    43 => "10111110111100000011000100110101", 
    44 => "00111101100100001101100011111111", 
    45 => "10111110100110011001111100010011", 
    46 => "10111110001111101111000011001001", 
    47 => "00111101010000111110110110111110", 
    48 => "00111101010110011010000111110000", 
    49 => "00111101100001011011001100001100", 
    50 => "00111101011110111000111101001000", 
    51 => "10111101100001111000000001101010", 
    52 => "00111110010101000101011000001001", 
    53 => "00111110110000110011110010101111", 
    54 => "00111110100101110010011000001011", 
    55 => "00111110100000010011011110100100", 
    56 => "10111110011001110111111110100111", 
    57 => "10111011001011111101001101110100", 
    58 => "00111110011101010010010011000001", 
    59 => "00111101110111010011001000111001", 
    60 => "00111110101001101101101010101010", 
    61 => "00111101000110000001110001000101", 
    62 => "00111101110101000010101000010111", 
    63 => "10111110011110101000011110100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidIJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidIJ is
    component conv_2_conv_2_weidIJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidIJ_rom_U :  component conv_2_conv_2_weidIJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


