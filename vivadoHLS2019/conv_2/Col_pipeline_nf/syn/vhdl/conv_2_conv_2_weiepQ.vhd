-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiepQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiepQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100111110111000101110010001", 
    1 => "10111101111110001110101000011101", 
    2 => "10111101001001101000101011101101", 
    3 => "00111101100010101101000101001011", 
    4 => "00111110000001011110010010110011", 
    5 => "10111110100100011001101011010000", 
    6 => "00111110001010000100100000001001", 
    7 => "00111100111100101111110011000101", 
    8 => "10111100101010101100011010000111", 
    9 => "10111110001111100101000011000001", 
    10 => "10111100000000111001010000010011", 
    11 => "10111110001010111000101001001101", 
    12 => "00111100111110111111001010001010", 
    13 => "10111100111011101010001010011101", 
    14 => "10111100010100011110001010011011", 
    15 => "10111101010111011010101011111001", 
    16 => "00111100100100011111100000111011", 
    17 => "10111101100100010011110000111101", 
    18 => "10111101001000101110111110111011", 
    19 => "10111101001101011010001000111111", 
    20 => "00111110011000111110010100011010", 
    21 => "00111100100010000011101110001000", 
    22 => "00111101100011100110000001001101", 
    23 => "00111101011100011010010001001111", 
    24 => "00111110000001101100000110111101", 
    25 => "10111101001101001110001110011011", 
    26 => "10111101110001110100101110101000", 
    27 => "10111010111000110111011000010101", 
    28 => "10111101100000000000111001001110", 
    29 => "10111100011111010110001100111111", 
    30 => "10111110001111010011010100001010", 
    31 => "10111101000011010110111000011000", 
    32 => "10111110001001101001111110011101", 
    33 => "00111101110010111011011110111000", 
    34 => "10111110001111011110000110011100", 
    35 => "10111110010110110100001101101000", 
    36 => "00111100100010110011011011011011", 
    37 => "00111011101000111010110100100001", 
    38 => "00111101110000100000100110101110", 
    39 => "00111100111101101111100110001101", 
    40 => "00111110000011111110101011100011", 
    41 => "00111100101001001110111101011001", 
    42 => "00111100100010100111000110000000", 
    43 => "00111100010000110000011011000011", 
    44 => "00111100011110011100010000100110", 
    45 => "10111101100101110011001100001001", 
    46 => "00111110001010111101010001001110", 
    47 => "00111101101000110000101100011110", 
    48 => "00111101000011010111000000001001", 
    49 => "00111101101010101010011111111101", 
    50 => "10111101000010001110110000101110", 
    51 => "10111110000001010111101100111110", 
    52 => "00111100100111111110110101010100", 
    53 => "10111010101000101010010111011011", 
    54 => "00111101000000011100010101101100", 
    55 => "10111110010010110100111001010000", 
    56 => "10111101100111100000111101110010", 
    57 => "10111101101010110001001000001011", 
    58 => "00111101111101101101010010111001", 
    59 => "10111101110100101110000110110110", 
    60 => "10111101110000000011100101001000", 
    61 => "10111110000111110010101011011000", 
    62 => "00111101010011110011011010010000", 
    63 => "00111101101000101100011100011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiepQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiepQ is
    component conv_2_conv_2_weiepQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiepQ_rom_U :  component conv_2_conv_2_weiepQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


