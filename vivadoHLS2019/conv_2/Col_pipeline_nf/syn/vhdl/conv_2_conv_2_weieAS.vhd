-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieAS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieAS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001010000110010100010", 
    1 => "00111101001101001001010000010010", 
    2 => "10111110011000001111011100011101", 
    3 => "10111100100000010110011100001011", 
    4 => "10111110101010111111010000101000", 
    5 => "00111100000101111010110100111100", 
    6 => "00111101001101101011001010000010", 
    7 => "00111110011101001000111000100011", 
    8 => "00111110010010011101100111011100", 
    9 => "10111110110100111000011101010110", 
    10 => "00111110001000111100010100110101", 
    11 => "10111101110011101000011010111110", 
    12 => "00111101100010110001000110011010", 
    13 => "00111101110010101111101010100011", 
    14 => "00111110110011000001110100001001", 
    15 => "00111011001010010111001111100010", 
    16 => "10111101111111000011110110110010", 
    17 => "00111101100110001010101011101000", 
    18 => "00111101110101101100010010110100", 
    19 => "10111110000110111110010100100010", 
    20 => "00111101010011011100010001100011", 
    21 => "10111110011011011011110011011001", 
    22 => "10111101111100101011001000111111", 
    23 => "10111110111110100010111010101100", 
    24 => "00111110000100111110000100001011", 
    25 => "00111101110101110011110110001001", 
    26 => "10111110000101111011101001111010", 
    27 => "00111110000100101010100001011011", 
    28 => "00111101100110101001001101001100", 
    29 => "10111101100011101000001100101001", 
    30 => "00111100110010100000000011111101", 
    31 => "10111100101101100001001111100000", 
    32 => "00111100100000110111011101110110", 
    33 => "00111101011110000101110010110101", 
    34 => "10111110110100011101001111000100", 
    35 => "10111111000001011000111000011001", 
    36 => "10111101101000111000011110011010", 
    37 => "00111101100100000110100100101101", 
    38 => "10111110000110001001111110000111", 
    39 => "00111110100011100000101000011111", 
    40 => "00111100010010010111000010111111", 
    41 => "00111101001001110000000100001100", 
    42 => "10111110011101110101110111110110", 
    43 => "00111101011000110001101111000001", 
    44 => "00111100001011010000001010100010", 
    45 => "00111110101000111111000110111001", 
    46 => "00111110100010100010001110010101", 
    47 => "00111100110001010111011000111111", 
    48 => "10111110011101001010000100111001", 
    49 => "00111110000110101010001001111101", 
    50 => "00111110011011101100101101010010", 
    51 => "10111100101111010001000101101111", 
    52 => "00111101101101011100001110100101", 
    53 => "10111110000101000111111101110001", 
    54 => "10111110011010110101000010110010", 
    55 => "10111110010000110100110100001001", 
    56 => "00111100100000010101100100111000", 
    57 => "00111110010001011011101100111100", 
    58 => "10111110001111010101111100100001", 
    59 => "00111110001001000110010001101101", 
    60 => "00111101010000010011010011010110", 
    61 => "00111101000111010110010001101110", 
    62 => "10111100010001101010010000111101", 
    63 => "00111101111110001100010001110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieAS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieAS is
    component conv_2_conv_2_weieAS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieAS_rom_U :  component conv_2_conv_2_weieAS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


