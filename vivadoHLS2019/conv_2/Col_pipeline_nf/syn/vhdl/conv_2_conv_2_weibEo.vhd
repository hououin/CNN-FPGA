-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibEo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibEo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001001010100010000001110", 
    1 => "10111011101010000010001011101101", 
    2 => "10111100100000011101011101110100", 
    3 => "10111101011110000100110100110111", 
    4 => "10111101111100111100111111101001", 
    5 => "10111101001111111100100101011000", 
    6 => "00111110100000110001001100000001", 
    7 => "10111111000100001011010111111001", 
    8 => "00111101111111000100101101111101", 
    9 => "00111100100010110111110100100001", 
    10 => "00111110010101100011101000001110", 
    11 => "10111101011011101000001000100001", 
    12 => "10111101100010100110011001010010", 
    13 => "00111110010100100101001100111100", 
    14 => "00111101011011100010011010000111", 
    15 => "00111101110000111101101101110011", 
    16 => "10111110000110111001000111000010", 
    17 => "10111101000010100000010101111111", 
    18 => "00111101100110001010000101010011", 
    19 => "10111110000011111001011101010110", 
    20 => "00111101010000111010110000011101", 
    21 => "00111110001101000000000010101001", 
    22 => "10111101101010000101000011111011", 
    23 => "10111101100101100111011101001010", 
    24 => "00111100110001000101000101110001", 
    25 => "00111101010110110000011000111110", 
    26 => "10111110001001100010111111000101", 
    27 => "10111110001101110100111110001100", 
    28 => "00111110111100111011111001011100", 
    29 => "00111101111110110010001100011101", 
    30 => "10111110000011000101010000100100", 
    31 => "10111110101110101001101001100100", 
    32 => "00111101010110001001011011100010", 
    33 => "10111110100101110101111110111111", 
    34 => "10111010111001011111100101111011", 
    35 => "00111100110111100100101110100110", 
    36 => "00111101000001101011110010011011", 
    37 => "00111110010000001101100000111111", 
    38 => "00111101111011110110100100110100", 
    39 => "00111110100100110000111101111110", 
    40 => "00111101110011100010101100010100", 
    41 => "00111110010011100001000111110101", 
    42 => "10111110011100110111101110100010", 
    43 => "10111110010000011010000111010010", 
    44 => "10111110001000111011111111000001", 
    45 => "00111100110111111010110000101010", 
    46 => "00111110000100110000101000110100", 
    47 => "10111100001000000000010011011111", 
    48 => "10111101011101000011000100000000", 
    49 => "10111110100010001001100101110001", 
    50 => "10111101001100001110011000010001", 
    51 => "00111110100010011110011011011000", 
    52 => "10111110000110111100101110100100", 
    53 => "00111110000011100101011110101010", 
    54 => "00111110000111000111101111111001", 
    55 => "00111101111011110000011010101010", 
    56 => "00111101111010101100111101111110", 
    57 => "10111101001001011111010100010100", 
    58 => "00111110000110100001110011101000", 
    59 => "10111110000000101010010001011000", 
    60 => "10111110000001101111010101011001", 
    61 => "00111110010011001000001000011001", 
    62 => "00111100011100100001000011110110", 
    63 => "10111110010000011111001111111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibEo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibEo is
    component conv_2_conv_2_weibEo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibEo_rom_U :  component conv_2_conv_2_weibEo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


