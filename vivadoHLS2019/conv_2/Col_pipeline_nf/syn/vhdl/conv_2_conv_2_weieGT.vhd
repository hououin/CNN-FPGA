-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieGT_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieGT_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010000000101111110000110", 
    1 => "10111101111111011111000101100011", 
    2 => "10111110100011110101011011011111", 
    3 => "10111101011111011011101110000100", 
    4 => "00111101101110100001001110110110", 
    5 => "10111101001001000100001101010010", 
    6 => "10111100110010100100001110101111", 
    7 => "10111011110100111110111100011010", 
    8 => "00111100100001101010000011110101", 
    9 => "10111101010100101100100111011001", 
    10 => "10111110000001001110000110010001", 
    11 => "10111100011100101001111111001011", 
    12 => "10111101101001101101110010011110", 
    13 => "00111100000110100010000011010010", 
    14 => "00111110000000101010010111111110", 
    15 => "10111100011011001110000010010101", 
    16 => "10111101010010010111001000101001", 
    17 => "00111100111001101101101100011010", 
    18 => "10111110001101101011101100001001", 
    19 => "10111101101010100011110110101111", 
    20 => "10111101001100001101101101001000", 
    21 => "00111101110110110110000111010010", 
    22 => "10111101010100011110011101111100", 
    23 => "00111101001000100101001100001001", 
    24 => "10111101010100010111001011000011", 
    25 => "10111101100001101011100001011100", 
    26 => "10111101010000001001001010110100", 
    27 => "00111101110001011011110101111111", 
    28 => "10111101110000000101111111001000", 
    29 => "10111100110011001001000001011111", 
    30 => "00111101000000010010111010110101", 
    31 => "10111101100110110010110001000110", 
    32 => "00111101011111010100111001011101", 
    33 => "00111011111111100011001011110000", 
    34 => "10111101101010111100010011011010", 
    35 => "10111110001011010111110110000100", 
    36 => "10111101110101100100100101101010", 
    37 => "00111110001101001000100111011000", 
    38 => "10111101000000110010100100000010", 
    39 => "00111100111011011001100000101001", 
    40 => "00111110000001111110110000101010", 
    41 => "10111101111101100011110011001101", 
    42 => "00111101011010101101111000000001", 
    43 => "10111101111011000111000010011000", 
    44 => "00111101100101000111011000110011", 
    45 => "10111110001000010001001110100101", 
    46 => "10111101101111100000011110001011", 
    47 => "00111101110001010101011101011001", 
    48 => "10111100111010010111011001001000", 
    49 => "00111101100100101111000110011010", 
    50 => "10111101100111011100010101000011", 
    51 => "00111101100001000100111001000000", 
    52 => "00111110000111110110100101100001", 
    53 => "00111101000001110110010011110010", 
    54 => "10111100111100001000101000100100", 
    55 => "10111110101001101100001110101110", 
    56 => "10111101110011110111110001010011", 
    57 => "10111011110000101101110110000001", 
    58 => "00111101101101010110101001110101", 
    59 => "00111101110010111011101011000110", 
    60 => "10111101110100010101000000100111", 
    61 => "10111110001000101101110100111100", 
    62 => "00111101000110010110010000011011", 
    63 => "00111100110001000100100000101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieGT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieGT is
    component conv_2_conv_2_weieGT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieGT_rom_U :  component conv_2_conv_2_weieGT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


