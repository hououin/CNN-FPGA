-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiezS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiezS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010110010010111011010101", 
    1 => "10111100010111100110000011010001", 
    2 => "10111101100110000000100010110001", 
    3 => "10111101111110010000100000101010", 
    4 => "00111110010011100110110101101100", 
    5 => "10111110101001110110111000110111", 
    6 => "00111110001010111111101000101000", 
    7 => "10111110010101010111101110001001", 
    8 => "10111100111111110011101000000111", 
    9 => "10111110011110100110010010100001", 
    10 => "10111110101001000101111011110110", 
    11 => "10111110001010111101000101110101", 
    12 => "00111110000010001010111010000100", 
    13 => "00111110100001101011100111010100", 
    14 => "10111100111101101000111001111101", 
    15 => "00111100100110010111000111100000", 
    16 => "00111101101110000111001011000001", 
    17 => "10111101101110000001101001010110", 
    18 => "00111101110101010011010101001111", 
    19 => "00111110010001100010101010010101", 
    20 => "00111100000011010011000111000011", 
    21 => "00111110100000011101111101110110", 
    22 => "00111110001001000100101011010111", 
    23 => "00111110010001011001010011001101", 
    24 => "00111110000110110100000000100100", 
    25 => "00111101011010001011001001110100", 
    26 => "10111110011011010000011010111001", 
    27 => "10111110000111100110100001110000", 
    28 => "00111101111011001011101100010100", 
    29 => "10111100110011010111101001000000", 
    30 => "10111110000110000010101010000110", 
    31 => "00111101111100001000011110101000", 
    32 => "10111110001111000011111000001110", 
    33 => "00111110010001111111001100111000", 
    34 => "10111110110110110001110000001001", 
    35 => "10111110011111100011001101100000", 
    36 => "00111110101111000011111011111111", 
    37 => "10111110000100111110111110111011", 
    38 => "00111110010011010010101111000111", 
    39 => "10111101011110000011010100011010", 
    40 => "10111101100111000010100100100110", 
    41 => "00111110100000101010101101110110", 
    42 => "10111110001010010100110001001100", 
    43 => "00111100111001001101101101001101", 
    44 => "10111110001001000110000010010100", 
    45 => "10111110001011010111100011011000", 
    46 => "00111101101100100101100110011000", 
    47 => "00111100110011011011101101000001", 
    48 => "10111011110101001100000001100001", 
    49 => "00111101000111101000100100110100", 
    50 => "00111110001101000100100111110000", 
    51 => "10111110001010100100010011101101", 
    52 => "10111110001110010101110001111110", 
    53 => "00111101011010110111011010001110", 
    54 => "10111101000000010110100001110101", 
    55 => "00111110110000000010001100111010", 
    56 => "10111101010100000011011110110010", 
    57 => "10111101110101111000011001010000", 
    58 => "00111101011000010110011000001111", 
    59 => "10111110111111100110100000100010", 
    60 => "00111110000011101011000000110001", 
    61 => "00111110001000000010110111011101", 
    62 => "10111110011010101010100111000110", 
    63 => "10111101110001011101010011001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiezS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiezS is
    component conv_2_conv_2_weiezS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiezS_rom_U :  component conv_2_conv_2_weiezS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


