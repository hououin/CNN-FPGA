-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid4N_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid4N_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011000001011101101100010101", 
    1 => "10111110011111000101110000011000", 
    2 => "10111110101001010001101101000101", 
    3 => "10111101010110100111101110100111", 
    4 => "10111110011110101100101001001100", 
    5 => "10111110110000011100000101111011", 
    6 => "10111110100110000111001111010110", 
    7 => "00111110010011011001100110011001", 
    8 => "00111110000110110011000100001011", 
    9 => "10111111000011001101001010111011", 
    10 => "00111100010001101111110010001000", 
    11 => "10111110011100010111010001101111", 
    12 => "10111110010101110010010001010101", 
    13 => "10111110101110100101110010010000", 
    14 => "00111110101010000111001100000111", 
    15 => "00111110011111001001100100011011", 
    16 => "10111110001000010101000001010110", 
    17 => "00111100100000100111110110001110", 
    18 => "10111101100100101110101000011100", 
    19 => "10111101010001010101010011010010", 
    20 => "00111110000111001011011111000101", 
    21 => "00111100100001011011111010011110", 
    22 => "10111101000000100110100000001010", 
    23 => "10111110101010100001110000100101", 
    24 => "10111110011100110100111010011110", 
    25 => "10111101101101101101011010010011", 
    26 => "00111100101000000001011110110011", 
    27 => "00111110010101011111101001010100", 
    28 => "00111101110100010001001111100101", 
    29 => "10111100101100000100001111111111", 
    30 => "00111110001001111000110111011010", 
    31 => "10111101101001101001100000000111", 
    32 => "10111110001101001100010111100101", 
    33 => "10111011001010101111110000011000", 
    34 => "10111110001011111110010100011100", 
    35 => "10111110010011001110010011110111", 
    36 => "10111110001111110000100101100111", 
    37 => "10111100100000101000000111100011", 
    38 => "10111110000111101011011000011001", 
    39 => "00111110001111001010101101111111", 
    40 => "00111110011101100000011110000000", 
    41 => "10111110011101001000000011111101", 
    42 => "10111110100010010100011000110111", 
    43 => "00111101000010001011001011110110", 
    44 => "00111101001101111010111110011000", 
    45 => "00111110100100101100101010101010", 
    46 => "10111101110011000001000010001001", 
    47 => "10111110010010011100101110100110", 
    48 => "00111110010100101100101001110001", 
    49 => "00111110001111010101101101100011", 
    50 => "10111110010010110101100000101000", 
    51 => "10111110000010001111111001011110", 
    52 => "00111101111000111011110101000001", 
    53 => "10111101001110111000010101110010", 
    54 => "00111100101111010011000011011011", 
    55 => "00111100110011010010101011000100", 
    56 => "00111110011111000101011001000011", 
    57 => "00111110011010101010010001110111", 
    58 => "10111101000100011101010110000100", 
    59 => "00111101100111101110010100001100", 
    60 => "10111110000011001110011000010110", 
    61 => "10111101011100100100010000101000", 
    62 => "00111110011100110111110100000000", 
    63 => "00111110000100010001011111101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid4N is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid4N is
    component conv_2_conv_2_weid4N_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid4N_rom_U :  component conv_2_conv_2_weid4N_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


