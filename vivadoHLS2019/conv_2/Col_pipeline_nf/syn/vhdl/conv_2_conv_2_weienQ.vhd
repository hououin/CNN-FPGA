-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weienQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weienQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001010000011011100111", 
    1 => "10111110101000110101000111101010", 
    2 => "00111100101110111011001010001101", 
    3 => "10111011101101010000001110000011", 
    4 => "00111101111111100111100101001110", 
    5 => "10111110011100101110100010100111", 
    6 => "00111100110100001000111001000000", 
    7 => "00111101101001100000000111011000", 
    8 => "00111101111101011101111011111100", 
    9 => "10111110011110001001110111101001", 
    10 => "10111101101100110101100001111111", 
    11 => "10111101100100000010111010000000", 
    12 => "00111101010001001011110010000101", 
    13 => "10111100101100010011101100100010", 
    14 => "00111101100100011110111000011000", 
    15 => "10111101011111001100010001010001", 
    16 => "10111101101011010100110011111011", 
    17 => "10111101100110110110111101110101", 
    18 => "10111110100110001110111100000111", 
    19 => "00111101100001110000101111110110", 
    20 => "00111101001011101110010100010000", 
    21 => "00111101011000100111110001001101", 
    22 => "10111100101011010010001101001011", 
    23 => "00111011110010100110110001110010", 
    24 => "00111101001011111111101010000110", 
    25 => "10111011001100100110101010110001", 
    26 => "10111110010000101010000110101110", 
    27 => "00111101010110111010000111100011", 
    28 => "00111100111101110111101011000010", 
    29 => "10111100110000100100110111010110", 
    30 => "10111110010011110110101000101110", 
    31 => "10111101010000001010011101011001", 
    32 => "10111110011110000001100010101001", 
    33 => "10111101010111011011101111010111", 
    34 => "10111110001100000001010010011001", 
    35 => "10111110100011001000011101110101", 
    36 => "10111100111011111100001000000111", 
    37 => "00111110010000000110011110100010", 
    38 => "00111101101100110011101111101000", 
    39 => "00111100110101101000010111001111", 
    40 => "00111101010011000001001101000010", 
    41 => "00111100000001001000011011001011", 
    42 => "00111101011110010000000111010110", 
    43 => "10111100110111010101111111001110", 
    44 => "00111101010111010001100010110100", 
    45 => "10111110010000101000000111111110", 
    46 => "00111101101101011010001111111101", 
    47 => "10111101101010110100000100101101", 
    48 => "00111011111001000010100101111010", 
    49 => "00111101110010111011111111011000", 
    50 => "00111100100110101100111111101011", 
    51 => "10111101101010010110000001000111", 
    52 => "00111101101111011011011000101100", 
    53 => "00111101101110001000110000111001", 
    54 => "00111100111000010111101110110001", 
    55 => "10111110001001011111101001001100", 
    56 => "10111101000100000001000111110100", 
    57 => "00111100100011101111001011000010", 
    58 => "00111110001110110111010011011011", 
    59 => "00111101010111010011000010101001", 
    60 => "10111101100100011101100100010000", 
    61 => "10111101100100001100100100010110", 
    62 => "00111101011001101000101110110110", 
    63 => "10111100111011110001111111100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weienQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weienQ is
    component conv_2_conv_2_weienQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weienQ_rom_U :  component conv_2_conv_2_weienQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


