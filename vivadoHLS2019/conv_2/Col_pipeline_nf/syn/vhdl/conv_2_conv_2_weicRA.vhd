-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicRA_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicRA_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000100011110000000110011", 
    1 => "10111101101001110011101111010101", 
    2 => "10111110010111011000000111101000", 
    3 => "00111101110010101101110011100110", 
    4 => "00111100110110001010001100000000", 
    5 => "00111101000011101100010100011011", 
    6 => "00111101000011010001011100101001", 
    7 => "10111101100101010000110111001110", 
    8 => "10111100110111100100111100101110", 
    9 => "00111011011001000010010010110010", 
    10 => "10111110000110111000100000100101", 
    11 => "10111101101110101110000111101110", 
    12 => "00111101101101101010110000111011", 
    13 => "00111101110010100001000010000100", 
    14 => "00111100111000001110101010001011", 
    15 => "10111100011011010001000111001111", 
    16 => "10111100101011000101001111000010", 
    17 => "00111101010110110010101111011111", 
    18 => "10111101001100110001000100001100", 
    19 => "00111011110110011011010000000011", 
    20 => "10111110000011101000101010001110", 
    21 => "00111110000001100001101110010010", 
    22 => "10111100100101001011101011101100", 
    23 => "10111100101001010000101110010100", 
    24 => "00111101101101010111100110011010", 
    25 => "10111100111101101101010110110110", 
    26 => "00111101100100000011001000000101", 
    27 => "00111101011100010101010111010000", 
    28 => "00111100001101100100101011111001", 
    29 => "10111110001100001000011011001000", 
    30 => "00111101110111001011111100110101", 
    31 => "00111101101110011101011110111011", 
    32 => "00111101110001011011010011001000", 
    33 => "10111110000100011101100000001010", 
    34 => "00111101000110000100001011111001", 
    35 => "10111101101001111011011101101001", 
    36 => "10111110001000010101110110110110", 
    37 => "10111110001110111100101100100010", 
    38 => "00111101101001101010100010111011", 
    39 => "10111101100100011100011011001111", 
    40 => "10111101010110010111100010011000", 
    41 => "10111101011010011001110111011000", 
    42 => "00111110000110000010000010010010", 
    43 => "10111100011110000111101100011110", 
    44 => "00111101000100010100001000011101", 
    45 => "10111101101001111101011111010001", 
    46 => "10111101010000010100110011011100", 
    47 => "10111011100001110000100001111010", 
    48 => "00111100110011010001110101111011", 
    49 => "10111110000010100111101001101010", 
    50 => "00111100011010101100100000100000", 
    51 => "10111101100100010100011101100001", 
    52 => "00111101011010000100111100111001", 
    53 => "00111101101011001110110010110001", 
    54 => "00111011101000100100111000101001", 
    55 => "10111110010101011010101101110010", 
    56 => "00111101110010101101110101001111", 
    57 => "00111101001010011101000011011110", 
    58 => "00111101110001100110111001010101", 
    59 => "00111010110011010011010010100111", 
    60 => "10111100100011110111100110101100", 
    61 => "10111101101111110101101111000111", 
    62 => "00111101101111000011100001100110", 
    63 => "10111011101011010001001110000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicRA is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicRA is
    component conv_2_conv_2_weicRA_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicRA_rom_U :  component conv_2_conv_2_weicRA_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


