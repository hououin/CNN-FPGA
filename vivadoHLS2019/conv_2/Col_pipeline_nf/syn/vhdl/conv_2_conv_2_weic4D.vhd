-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic4D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic4D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101011111101101100011001", 
    1 => "10111101110110001000001011001101", 
    2 => "10111110011111100100100110001100", 
    3 => "10111101010111010001010100010101", 
    4 => "00111101110101110110011001000010", 
    5 => "00111110010000100101100010101000", 
    6 => "00111101011001001110001001110100", 
    7 => "10111100010111010001101100110010", 
    8 => "10111100111100000101001010001011", 
    9 => "00111101010011000111001001011111", 
    10 => "00111101000100110011011110000001", 
    11 => "10111100100011000110111001001110", 
    12 => "10111101101110101010011100111100", 
    13 => "00111101100101000011100100110010", 
    14 => "10111101000101011111010000000100", 
    15 => "00111100000111010100100101010001", 
    16 => "00111101110001011111011101100000", 
    17 => "10111011000001001010001010110110", 
    18 => "00111101101101000101111010001000", 
    19 => "00111100101111100100010001100011", 
    20 => "10111100110110110100011111000010", 
    21 => "00111101111001010000010001001100", 
    22 => "00111101111001001000011101110000", 
    23 => "00111101100001101010010011001101", 
    24 => "00111110000011110110110101011100", 
    25 => "00111101110000110001111100101101", 
    26 => "10111011101000111100001111110100", 
    27 => "00111101001111011110101011110100", 
    28 => "10111101110100101011101110111011", 
    29 => "10111100000101100001101110100001", 
    30 => "10111101110100001101000110101011", 
    31 => "10111110010000110011001010001100", 
    32 => "00111100110100110101100010100010", 
    33 => "10111101101111001111110110111100", 
    34 => "00111101111101011010111100000001", 
    35 => "10111011000001000101101101110100", 
    36 => "00111101100110101000110000100101", 
    37 => "10111011010011100101110110010010", 
    38 => "00111101001010001110101110001001", 
    39 => "10111101011000111011100101000100", 
    40 => "00111110001101101011010110100100", 
    41 => "00111101110111101011101110000010", 
    42 => "00111101110110110101111110001001", 
    43 => "10111100100001001000000000011001", 
    44 => "10111101101011001010101000010110", 
    45 => "00111101011101001100001010011001", 
    46 => "00111100100100111000000101011010", 
    47 => "10111101010000011000000111000001", 
    48 => "10111101001001111011001111111101", 
    49 => "10111110000101110011101100001011", 
    50 => "00111101000001101101101001001001", 
    51 => "10111101000110000011100101010101", 
    52 => "10111110010000100110011110010001", 
    53 => "00111101110111101100001101110111", 
    54 => "10111100100100110011101100111001", 
    55 => "10111110101011000101011000100001", 
    56 => "10111101001000110101101000101110", 
    57 => "00111100101110101100000101110010", 
    58 => "00111101101101010010011110011000", 
    59 => "10111101000100101011001110001010", 
    60 => "00111101101010011111010111110001", 
    61 => "10111100001000110100011001011110", 
    62 => "00111110000110001001000100100110", 
    63 => "00111010001110011100100110010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic4D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic4D is
    component conv_2_conv_2_weic4D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic4D_rom_U :  component conv_2_conv_2_weic4D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


