-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weivdy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weivdy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001010000111100111100", 
    1 => "00111110011100101110101001000101", 
    2 => "00111101111111000111010110010101", 
    3 => "10111110001001101010011011100001", 
    4 => "10111110000110001100111011010110", 
    5 => "10111101001000100000011011101111", 
    6 => "00111101100001010101101011001001", 
    7 => "00111101000011010010110100111100", 
    8 => "10111101110100110110100101010010", 
    9 => "00111101001011010110111111000001", 
    10 => "10111110010001110000111010001100", 
    11 => "00111110010011110001010110010111", 
    12 => "00111110001111111010011010000111", 
    13 => "10111100000001110010001001011100", 
    14 => "00111100110110101110100111010001", 
    15 => "10111110010111110000101111010100", 
    16 => "00111110010010110111000111110011", 
    17 => "10111101111110001111011101010100", 
    18 => "00111100110111011001000000011000", 
    19 => "10111110001010000101001100011101", 
    20 => "00111110001011100011001110110110", 
    21 => "10111110001111110010011110001011", 
    22 => "10111101101001110101110100111000", 
    23 => "10111100110010011010000101111101", 
    24 => "00111101011000001110110100000100", 
    25 => "10111110101010011001000100100000", 
    26 => "10111110100111101000001100011001", 
    27 => "00111110001101101100101101011000", 
    28 => "00111100110100000010111110100000", 
    29 => "10111100110011100111001000111011", 
    30 => "00111110010000111100001010101110", 
    31 => "10111110010111011110110011111000", 
    32 => "00111100100011001110010001010001", 
    33 => "00111110001000011110001101001111", 
    34 => "00111101111100110110010011000001", 
    35 => "00111110001010010110000000101111", 
    36 => "10111101111111000101010010010001", 
    37 => "00111100010110011101010101101001", 
    38 => "00111110001110001101111110000101", 
    39 => "10111110001010100001100011001010", 
    40 => "00111101010111110110001001110001", 
    41 => "10111110010101011001111101110000", 
    42 => "00111110000100101110010111100010", 
    43 => "10111110001010101101110011100101", 
    44 => "00111101001000100000110000111101", 
    45 => "10111010110001100110100011001001", 
    46 => "00111110001010001001101110001101", 
    47 => "10111100100001010100100100111011", 
    48 => "00111110100100110110000100010010", 
    49 => "10111110101100100011110100111100", 
    50 => "00111100011001110010010000111011", 
    51 => "10111011110010000011000110111100", 
    52 => "10111101110011011101000111111000", 
    53 => "10111101011100000100011000101011", 
    54 => "10111011101101111101011001001000", 
    55 => "00111101010110110111010101011001", 
    56 => "00111101011000010100011000001110", 
    57 => "00111101101110001011100011000110", 
    58 => "10111101110100110100011111100111", 
    59 => "00111110010101001000110001010001", 
    60 => "00111100010111010101101111011101", 
    61 => "10111110100101010000110001111001", 
    62 => "10111101100001101010011001011111", 
    63 => "10111110011100001101011000100000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weivdy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weivdy is
    component conv_2_conv_2_weivdy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weivdy_rom_U :  component conv_2_conv_2_weivdy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


