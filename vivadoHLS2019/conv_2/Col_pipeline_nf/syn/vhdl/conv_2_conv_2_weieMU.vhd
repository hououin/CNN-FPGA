-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieMU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieMU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100110100010111000000111", 
    1 => "10111101111101010100001100001000", 
    2 => "10111101010010110001100100100010", 
    3 => "10111101000011100001011101111100", 
    4 => "00111110000100100011101010010011", 
    5 => "10111110100100000111000111011101", 
    6 => "00111110001011000101101101110000", 
    7 => "10111011000001101110101000001000", 
    8 => "10111100110011101011001011100110", 
    9 => "10111110000111001010011000001000", 
    10 => "10111110011010110110100111110010", 
    11 => "10111110000111010100010011001000", 
    12 => "00111110001000001000100100011000", 
    13 => "00111110000100110011011001101001", 
    14 => "00111100101100001110101000011111", 
    15 => "10111101000001101110011100010011", 
    16 => "00111100100111101100111111101100", 
    17 => "10111101101111111101101011011001", 
    18 => "10111100110010110001011011010101", 
    19 => "00111101101000101001110001101100", 
    20 => "00111100101011110110111110001010", 
    21 => "00111100010010101001100010011010", 
    22 => "00111101011010001011111010001110", 
    23 => "00111101100011101011111001001110", 
    24 => "00111110000010101111100110001001", 
    25 => "00111101001101101001101101101100", 
    26 => "10111110010001100001000101000101", 
    27 => "10111101010011000111100101111000", 
    28 => "10111100100000011010000110010010", 
    29 => "10111110001010111110011000101000", 
    30 => "10111101100001001111011100110101", 
    31 => "00111101101010110101001101100001", 
    32 => "10111101010111101011010011010011", 
    33 => "00111100111111101010000000110100", 
    34 => "10111110010110101010010110010011", 
    35 => "10111110011000110000010000011110", 
    36 => "00111110001000010111101110000100", 
    37 => "00111101100011111000111010010100", 
    38 => "00111101111111111101110001011111", 
    39 => "00111011110000101101000111000110", 
    40 => "00111101101001110101110000000110", 
    41 => "00111110001101111000010001001011", 
    42 => "00111101101111000010100011010010", 
    43 => "00111101011000101001111101101100", 
    44 => "10111101011100001010010011110101", 
    45 => "10111101101001000001100101000001", 
    46 => "00111110010010111101100000110010", 
    47 => "00111101010100100110111111001111", 
    48 => "10111101100101000100000111001101", 
    49 => "00111100101111011101011100110100", 
    50 => "00111101110110100011111111111000", 
    51 => "10111101111010110010011001101001", 
    52 => "00111101101000001111000010001000", 
    53 => "10111011100001110001010101101000", 
    54 => "00111101001110010110010011101101", 
    55 => "00111101110101010100000111011000", 
    56 => "10111110001000001010110111110101", 
    57 => "00111101101010011011100111001110", 
    58 => "00111100000001000110001101111010", 
    59 => "10111100111011001010111001010100", 
    60 => "00111101101000000011011110100101", 
    61 => "00111101110011011011100001011111", 
    62 => "10111110001001000000011111110100", 
    63 => "10111101000111110111001111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieMU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieMU is
    component conv_2_conv_2_weieMU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieMU_rom_U :  component conv_2_conv_2_weieMU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


