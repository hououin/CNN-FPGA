-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicrw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicrw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011001101010011010101011", 
    1 => "00111110000001110000000110101011", 
    2 => "10111100110011111010000110000000", 
    3 => "10111110011110000110101000000001", 
    4 => "10111110101101001100100011010101", 
    5 => "10111101010001011111110100011101", 
    6 => "10111110000011111010101111011110", 
    7 => "10111110000110000110101010000100", 
    8 => "00111101101010101100011111000101", 
    9 => "10111101100100000101000000100001", 
    10 => "00111101011010011011001010110001", 
    11 => "00111101101101111100000010001000", 
    12 => "10111100100010100001111110101000", 
    13 => "10111100001011010110101110110100", 
    14 => "00111110100010001010100001011011", 
    15 => "00111101000110011011111110110100", 
    16 => "00111101101010100001000110001110", 
    17 => "10111101101100001100101010110011", 
    18 => "00111101100110110000101100110000", 
    19 => "10111101000101100001001000000000", 
    20 => "00111101110111101110001011010110", 
    21 => "10111101010101010010011000100110", 
    22 => "00111100111001101101110011011011", 
    23 => "10111101000111110101011000010100", 
    24 => "00111101011101111111101011011001", 
    25 => "10111101001100011011111110100011", 
    26 => "10111110000001101100000110111000", 
    27 => "10111100011011000100000011111000", 
    28 => "00111110011010100110010010000111", 
    29 => "00111100110100110100000010111110", 
    30 => "10111101111011000010100100100110", 
    31 => "10111101101110100010000010000000", 
    32 => "10111101000010011101010100111111", 
    33 => "10111110011011001100001001000110", 
    34 => "10111101011010001000011000001110", 
    35 => "00111100001110000101001011111101", 
    36 => "10111110100101011101100000110101", 
    37 => "00111101110001101011010001101001", 
    38 => "10111110010011000100110011111000", 
    39 => "10111101001100111101001111110100", 
    40 => "10111101110111010010001011111101", 
    41 => "10111110001001100100111011100111", 
    42 => "10111110100011011011110010101000", 
    43 => "10111110010001100110001100001111", 
    44 => "10111101101110011111011100000101", 
    45 => "10111100011000011000101101010011", 
    46 => "10111110011001011010011101111001", 
    47 => "10111101011010110110001000110011", 
    48 => "10111110011111000000010111010101", 
    49 => "10111110101011010000100010101101", 
    50 => "00111110001101000100010010100010", 
    51 => "00111110010111101100000001001011", 
    52 => "10111110001000111111110100110110", 
    53 => "10111110000101000011111110000110", 
    54 => "10111010010101011001010011001110", 
    55 => "10111110011110110011101111101101", 
    56 => "00111101000101111101100101100111", 
    57 => "10111101000110101110000110010110", 
    58 => "10111101101110111101111000010001", 
    59 => "00111010001101100101110101101000", 
    60 => "00111110010001100100001100010001", 
    61 => "00111101111000001011011010111111", 
    62 => "10111110100000010001011100010011", 
    63 => "10111101111001111001001100101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicrw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicrw is
    component conv_2_conv_2_weicrw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicrw_rom_U :  component conv_2_conv_2_weicrw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


