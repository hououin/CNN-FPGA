-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidsG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidsG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000111100100000111111110", 
    1 => "00111110000001111010010011010011", 
    2 => "00111101001100011011011001001110", 
    3 => "10111101011111001111010111111110", 
    4 => "10111101100011110100110011000010", 
    5 => "10111100011011110110010000000100", 
    6 => "00111100111111111001011000010110", 
    7 => "10111110011000110010010001101010", 
    8 => "10111110101000110001101001001111", 
    9 => "10111100111110001001110000111100", 
    10 => "10111101100010100111110000100101", 
    11 => "10111101110111101110110001101100", 
    12 => "10111101101011000011101001101000", 
    13 => "10111101110101001110111110101010", 
    14 => "10111110101010010000010100101010", 
    15 => "10111110110111011010010000011101", 
    16 => "10111101111101000010001101111001", 
    17 => "00111101010001100101111000000011", 
    18 => "10111110000000010000010001110101", 
    19 => "00111101101000001010000011100011", 
    20 => "10111110001011001100000000010100", 
    21 => "00111110100001000010110011011011", 
    22 => "10111101100000101011111111101110", 
    23 => "00111110000100000011001101111100", 
    24 => "10111110000100100101110000111110", 
    25 => "10111110010111110011101001100000", 
    26 => "00111101100111011000110111100010", 
    27 => "10111101100001101000000000001111", 
    28 => "10111101100100011001110100111100", 
    29 => "00111101110000010101101100010011", 
    30 => "10111110010010100101100111100000", 
    31 => "00111100101100010101100110110110", 
    32 => "00111100000111000001111010110001", 
    33 => "10111110011110000111010110101010", 
    34 => "10111110010011100010111111000110", 
    35 => "10111101101111010110101111101110", 
    36 => "10111101000110110010000110110100", 
    37 => "00111101001101110010100010101010", 
    38 => "10111101011000010110101010011010", 
    39 => "10111100111100111101010111100011", 
    40 => "10111101100011101111000110011001", 
    41 => "00111101111100001011101101110111", 
    42 => "10111101100100100011010100110001", 
    43 => "00111011011100111110011100101111", 
    44 => "10111110100001010110011010110010", 
    45 => "10111101111110001000011011001100", 
    46 => "10111101110111000101000000011110", 
    47 => "00111110000010000101111000010100", 
    48 => "10111101101011011001010011010000", 
    49 => "10111110100000000010010011101110", 
    50 => "10111110110011111110100101010100", 
    51 => "00111110101010101000000010010011", 
    52 => "00111110010111101011100010001001", 
    53 => "00111101100101100001011101100100", 
    54 => "00111101101010101000001001000001", 
    55 => "10111101101000111101100011111010", 
    56 => "00111101010000100111011110011000", 
    57 => "10111110000100000110111100011110", 
    58 => "00111110010000010001110110010010", 
    59 => "10111101000011001110100110010100", 
    60 => "10111101010100001111011011110100", 
    61 => "10111110100110110011010000110000", 
    62 => "00111101101011001010010100101011", 
    63 => "00111101110010010110001100011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidsG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidsG is
    component conv_2_conv_2_weidsG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidsG_rom_U :  component conv_2_conv_2_weidsG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


