-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidzI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidzI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110011010010011010001100", 
    1 => "00111101001101000100010110000010", 
    2 => "00111101010100001001100011111010", 
    3 => "10111100101001111010000111010000", 
    4 => "10111101100010101100010100011100", 
    5 => "10111110100110000110011010010110", 
    6 => "10111110001110000110000001010000", 
    7 => "00111101110110110011110000010111", 
    8 => "00111101011011011000011001001010", 
    9 => "10111101101110010111001101010001", 
    10 => "10111110001000110000111110001101", 
    11 => "10111110000000011101111100101111", 
    12 => "10111101100111001011111011110011", 
    13 => "00111101110011011111011011100010", 
    14 => "10111100110001011001000001101101", 
    15 => "10111100000111000010110101000111", 
    16 => "00111011011011001000110101110110", 
    17 => "10111010001101110010000100000000", 
    18 => "00111101010101101011010100100111", 
    19 => "10111100100001011001110101101011", 
    20 => "00111101110010011111000110110010", 
    21 => "10111101001100001110010001010010", 
    22 => "00111110000100111001101110110100", 
    23 => "10111110010011101011011000100100", 
    24 => "10111110001011010110011111110100", 
    25 => "00111100101101111011010111110100", 
    26 => "10111101001111101100101111011000", 
    27 => "10111100101000100010110101000101", 
    28 => "10111101111101111010110100111011", 
    29 => "10111100000111001110110110101010", 
    30 => "00111100001001010101000011111010", 
    31 => "00111101111110111010101101001101", 
    32 => "10111110000000101100000101000100", 
    33 => "00111100111101110110100001111111", 
    34 => "10111101111111111110001100110001", 
    35 => "10111101011100000011001001010111", 
    36 => "10111101101100111110001110000011", 
    37 => "10111101111011011000100110100101", 
    38 => "00111101010010101010001000001111", 
    39 => "00111101000001001101000010011111", 
    40 => "00111110000011101101001010011010", 
    41 => "10111110000100100111100011100001", 
    42 => "10111100100101111011001100111010", 
    43 => "00111101100010111100001101111110", 
    44 => "00111101111001011111010110001011", 
    45 => "00111101010001000100010100110010", 
    46 => "00111110001011111100010011010101", 
    47 => "10111110010010110001011101000010", 
    48 => "00111110100000001001101110000100", 
    49 => "00111101110011100010000100100000", 
    50 => "10111110001000000111101110000011", 
    51 => "10111110001000101010010001011111", 
    52 => "10111100001011111100101000111011", 
    53 => "10111101101100001000111110110110", 
    54 => "10111101100010110001001101001111", 
    55 => "00111100111010110011111001000000", 
    56 => "10111101001110010010001000001100", 
    57 => "10111110000101100000010000001110", 
    58 => "10111110011100100101111011011000", 
    59 => "10111110010010000101101101100010", 
    60 => "10111101011010011011110100000100", 
    61 => "00111100101000010101011010000101", 
    62 => "00111101110101011100000110110001", 
    63 => "00111101111010011011010110000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidzI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidzI is
    component conv_2_conv_2_weidzI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidzI_rom_U :  component conv_2_conv_2_weidzI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


