-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidvH_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidvH_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111110000101101011001", 
    1 => "00111101101000101011110111101001", 
    2 => "00111100110001001000000110000100", 
    3 => "00111110000000011110101111100011", 
    4 => "10111101111011010000100101001111", 
    5 => "10111110010101100100001010110100", 
    6 => "10111110010101000010100010010010", 
    7 => "00111101101110111001000100000000", 
    8 => "00111101100011110100100001100011", 
    9 => "00111101001101111101110101101001", 
    10 => "10111101111000010111000001101100", 
    11 => "10111101101110000001010011000001", 
    12 => "10111110010011000101110010100110", 
    13 => "10111101000011011001110100110011", 
    14 => "00111110000001010111100100011001", 
    15 => "00111101010110000011111011010001", 
    16 => "10111101000101110011111111010001", 
    17 => "00111100110001110010100100110111", 
    18 => "10111101101000101001100001111000", 
    19 => "00111101100101001010101101010000", 
    20 => "10111110000101100101001111111101", 
    21 => "00111100110110001010011001000100", 
    22 => "00111101010101110011111110101101", 
    23 => "10111110100101101111001010011100", 
    24 => "10111101100010101011101110001000", 
    25 => "00111100110101010111100111101111", 
    26 => "10111101100010000011111010011101", 
    27 => "10111110100110001100110100101110", 
    28 => "10111101001110010001001010000111", 
    29 => "00111110001111010011100001100011", 
    30 => "10111101101111000000110000010010", 
    31 => "10111100110100000001100110010010", 
    32 => "10111110100011010101000001111000", 
    33 => "00111101010111011010001011010010", 
    34 => "00111101100100010101011101101100", 
    35 => "10111110000111101101110101000011", 
    36 => "00111101111101101110011000001001", 
    37 => "10111011110010110010100110000001", 
    38 => "10111101001110010011000010001000", 
    39 => "00111101101101100101111111101011", 
    40 => "10111101010011110000011111010110", 
    41 => "10111101101100101011011000111011", 
    42 => "10111101001011111011101100110001", 
    43 => "10111101001110110110100011010010", 
    44 => "00111110000010100001000001111110", 
    45 => "10111110100100110000110100101011", 
    46 => "00111101110000010000011100011000", 
    47 => "10111011111011011111010111000100", 
    48 => "00111110001010100100100100000111", 
    49 => "10111101101010010110101100111000", 
    50 => "10111110000010110100101001001101", 
    51 => "10111110011111100000100001010001", 
    52 => "00111101011111001111001100011010", 
    53 => "10111110101100000111111101110011", 
    54 => "00111101111001110100000011100110", 
    55 => "00111100011100001110011100100101", 
    56 => "10111101011010100111100111110001", 
    57 => "10111100100010001111011101101000", 
    58 => "10111110000000010100011101010001", 
    59 => "10111101010010001101010011001110", 
    60 => "10111110100011011111100111010100", 
    61 => "10111101011011011110100101111011", 
    62 => "00111101101100011000010011100100", 
    63 => "00111011011010001011110011010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidvH is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidvH is
    component conv_2_conv_2_weidvH_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidvH_rom_U :  component conv_2_conv_2_weidvH_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


