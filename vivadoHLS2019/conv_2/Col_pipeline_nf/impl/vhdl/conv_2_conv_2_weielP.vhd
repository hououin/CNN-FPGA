-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weielP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weielP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100100101101111111000111", 
    1 => "10111110100001001110111111101100", 
    2 => "10111110001001010000000011011110", 
    3 => "10111101110110010011111100111110", 
    4 => "00111101110010100010011101101100", 
    5 => "10111110100110101111111101011111", 
    6 => "00111110011010010110011100001110", 
    7 => "10111101111110101111011000100010", 
    8 => "00111100110110100100101000010000", 
    9 => "10111110011001111010000100110100", 
    10 => "10111110010010011000010111100010", 
    11 => "10111110000110001001101101000001", 
    12 => "00111110001001110001001100010100", 
    13 => "00111101101100101110001111001100", 
    14 => "00111100110110011100011010100010", 
    15 => "10111100011001100010010011011010", 
    16 => "10111100000101100001011101101100", 
    17 => "10111101101010011010010110110011", 
    18 => "00111101001100001100100110110110", 
    19 => "00111101010010101000111000000000", 
    20 => "00111100101111100011101010111111", 
    21 => "00111110000010010111110010001100", 
    22 => "00111101001101110100100011110101", 
    23 => "00111110100100000001110000111001", 
    24 => "00111110001001001110000001001100", 
    25 => "10111100001111101110011000111100", 
    26 => "10111110011110110101011011111001", 
    27 => "10111110001000011101011011001000", 
    28 => "00111101100001100001011011001111", 
    29 => "10111101100010111110110011010010", 
    30 => "10111101101011100101001000010011", 
    31 => "00111101110100010001010111100100", 
    32 => "10111101100111000000000001100111", 
    33 => "00111101101010110000001110000011", 
    34 => "10111110011110100111000111001110", 
    35 => "10111110000111101110010011101101", 
    36 => "00111101110001000010001110011011", 
    37 => "10111100011010100011010011110000", 
    38 => "00111101011000100111000100000101", 
    39 => "10111101010010010010100001100100", 
    40 => "00111100001100101011011111101111", 
    41 => "00111101001101011010101000001010", 
    42 => "00111101111001111101101001010100", 
    43 => "00111101000011011000001010000101", 
    44 => "10111110001111001001011000011111", 
    45 => "10111110001110001101010000001110", 
    46 => "00111110001001110000011101111101", 
    47 => "00111110000101001001010101011011", 
    48 => "00111101110001000010100100111001", 
    49 => "00111101100111110110110111101011", 
    50 => "10111100001010000011100011010101", 
    51 => "10111101000110100011111110000100", 
    52 => "00111100110001011010001001100111", 
    53 => "00111101101011000001110100011010", 
    54 => "10111101100010100101111010110101", 
    55 => "00111110001100110101010101001111", 
    56 => "10111101111000011110001011000010", 
    57 => "10111100100011011110110110101011", 
    58 => "00111101110011010111011110011110", 
    59 => "10111101100010111100101101010100", 
    60 => "00111101101100100000111111100111", 
    61 => "10111100011110111100011111011000", 
    62 => "10111101101000000111110010001000", 
    63 => "10111101110010001011101101110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weielP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weielP is
    component conv_2_conv_2_weielP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weielP_rom_U :  component conv_2_conv_2_weielP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


