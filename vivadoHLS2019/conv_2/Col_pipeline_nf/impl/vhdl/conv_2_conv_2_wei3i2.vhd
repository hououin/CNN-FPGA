-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei3i2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei3i2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101111110101000000101101", 
    1 => "00111101110001111100000100100001", 
    2 => "00111110001011011010111110010010", 
    3 => "00111100110101100111000100110011", 
    4 => "00111101101000011000010100101000", 
    5 => "10111100011110111010010001111110", 
    6 => "00111100100110101001000001010010", 
    7 => "00111101110000100000101001110110", 
    8 => "10111110000001110100100011000100", 
    9 => "00111100100110100110100100011110", 
    10 => "00111100000010110111100010010101", 
    11 => "00111101100100100101110111010011", 
    12 => "00111101110101101010000110010101", 
    13 => "00111101100011110100010111001110", 
    14 => "10111101101010110100010011101010", 
    15 => "10111110000011000001100111100010", 
    16 => "00111101110011011101101011001101", 
    17 => "10111101001001110000001101001001", 
    18 => "00111011000110000101111000111110", 
    19 => "10111110011100111101010011110101", 
    20 => "00111100110011111101110011010100", 
    21 => "10111101110101000010011011011011", 
    22 => "10111101110110100100010000111000", 
    23 => "00111101011000011000000100000011", 
    24 => "10111110000110100110110001011110", 
    25 => "10111101010001101100100100100110", 
    26 => "10111110001000101000100010100000", 
    27 => "10111101101110011110111110100101", 
    28 => "00111101111001111000111101110001", 
    29 => "10111101001000011101111110011101", 
    30 => "00111110011000001100010110011010", 
    31 => "10111110001010101001001000000001", 
    32 => "10111101101100110100110001100111", 
    33 => "10111101011010100111000101101101", 
    34 => "10111101100100100110000010111011", 
    35 => "10111101100000111101011010100110", 
    36 => "10111101111110101001011111000101", 
    37 => "00111101100110010110011101101100", 
    38 => "00111101101100100101100000111101", 
    39 => "00111100011010101101111100101100", 
    40 => "10111110100110010011000010110000", 
    41 => "10111110000010101001000100010101", 
    42 => "10111011101100100101010101100100", 
    43 => "10111101100001101011101011111101", 
    44 => "00111101001000001011100101000000", 
    45 => "00111100000001101101000000000101", 
    46 => "10111101110100101011011111101111", 
    47 => "10111101110100100000010100001100", 
    48 => "00111100100000100010101000001001", 
    49 => "10111101000111101010001011000100", 
    50 => "10111101001100000101111110110011", 
    51 => "00111101110001001000110001111110", 
    52 => "10111101101101001101010010001111", 
    53 => "10111110011000111001011011101011", 
    54 => "10111110100100111011000001010111", 
    55 => "10111101001001010111010101111100", 
    56 => "10111101010100000000011101111100", 
    57 => "00111100101011010100001100001010", 
    58 => "10111110000000110010100000001101", 
    59 => "10111100000111111010101101010011", 
    60 => "10111110010010110010111101010101", 
    61 => "10111101111110101110100001101010", 
    62 => "00111110010000010000111011111001", 
    63 => "10111101000110100000100011011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei3i2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei3i2 is
    component conv_2_conv_2_wei3i2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei3i2_rom_U :  component conv_2_conv_2_wei3i2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


