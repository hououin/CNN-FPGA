-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib5t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib5t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100100111000001011100", 
    1 => "10111011011110100011010011100011", 
    2 => "00111100101111001111000000010100", 
    3 => "00111101010100110001010101110100", 
    4 => "00111101100000011000111000000110", 
    5 => "10111011011110001011011011111110", 
    6 => "00111110000110110010101001100011", 
    7 => "10111100100011000111000011111101", 
    8 => "00111010111100011011110100101001", 
    9 => "00111101110000010101100001111010", 
    10 => "00111100110111001011100111001101", 
    11 => "00111101101000010111110101001011", 
    12 => "00111110001011010110110000110010", 
    13 => "00111100001010101100010000110110", 
    14 => "10111011101100111001101000011000", 
    15 => "10111101010100100101100110100000", 
    16 => "10111101101110000100011111111101", 
    17 => "00111101011000100110000110110110", 
    18 => "10111110011101001000010101111001", 
    19 => "00111101101110010100111101011110", 
    20 => "00111101110011010011100100110010", 
    21 => "00111100011000101111101010001000", 
    22 => "10111101101110010111100101101100", 
    23 => "00111011110100001101100111011010", 
    24 => "00111101010111101000000110011000", 
    25 => "10111100010010001011000011010011", 
    26 => "00111101100110101000101111010011", 
    27 => "10111110001111101011100111110000", 
    28 => "10111110100010111001001010111001", 
    29 => "00111101100110111000000000111110", 
    30 => "00111100001011110100101101010000", 
    31 => "10111100101011100110011100001000", 
    32 => "00111011000100101000001111110001", 
    33 => "10111110010101110100011001110011", 
    34 => "00111110000110011000111111010111", 
    35 => "00111101110000100011101000111101", 
    36 => "10111101101100001111001111111011", 
    37 => "00111110000101111110111000101110", 
    38 => "00111101101001011011000001100001", 
    39 => "10111100111110111000010111010001", 
    40 => "00111001111010010110000011110000", 
    41 => "00111110000100000010011100010110", 
    42 => "00111100110001111010001101100010", 
    43 => "00111101100110110001001011011101", 
    44 => "10111101001011000101010111011000", 
    45 => "00111110010101110100110000010101", 
    46 => "00111101111110011011010100110100", 
    47 => "00111101000011000101000111110101", 
    48 => "00111101111100001001111001110111", 
    49 => "10111110100011101101001000111111", 
    50 => "00111110000100010100101110001101", 
    51 => "00111110000100011010111001111100", 
    52 => "10111110001111001110100100000011", 
    53 => "00111101101100100101101111010011", 
    54 => "10111101101111011101011011010011", 
    55 => "10111110010000001110011001101000", 
    56 => "10111101010101000111011101010111", 
    57 => "00111101110001010010110000011101", 
    58 => "10111110011100010100001010110011", 
    59 => "00111100110001111110010100000010", 
    60 => "00111101110111101110100000100101", 
    61 => "10111110001001010000111001011111", 
    62 => "00111101001111110001011111000011", 
    63 => "00111011000111000101011100101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib5t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib5t is
    component conv_2_conv_2_weib5t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib5t_rom_U :  component conv_2_conv_2_weib5t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


