-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibqm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibqm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100110101110111010110001000", 
    1 => "10111110001001011011110111001010", 
    2 => "10111101110111001010100110001110", 
    3 => "10111110010010101001010010010011", 
    4 => "00111101100110110110010001100110", 
    5 => "00111101100000010011010100111111", 
    6 => "10111101000100101001100000100011", 
    7 => "10111100001100110000101100100011", 
    8 => "10111101111010000010000000010000", 
    9 => "00111011000011001011110111001010", 
    10 => "00111010101010010001000110111110", 
    11 => "10111011101011000110101011011000", 
    12 => "10111101011001100011000011011001", 
    13 => "00111110000011011100000011000100", 
    14 => "10111101101010110101100110010011", 
    15 => "10111101010111010111110000111001", 
    16 => "00111101100011101100001110100100", 
    17 => "00111100111100001101101011101010", 
    18 => "10111100001001001100001010111111", 
    19 => "10111101010101101101101010101110", 
    20 => "00111100101001000010101000001011", 
    21 => "00111110010011100010101111110011", 
    22 => "00111100101001001000111101001000", 
    23 => "00111101111011101010011000100001", 
    24 => "00111011111001111100011010110100", 
    25 => "10111110000000101000110001000101", 
    26 => "10111101000000011110010010111101", 
    27 => "10111110100100101111100010110000", 
    28 => "10111101100111110000001001010010", 
    29 => "10111101110111000000010110101111", 
    30 => "00111100101011001101111000100011", 
    31 => "10111110110010101001101010100010", 
    32 => "10111101100110111101111111110010", 
    33 => "10111101100101110010101101101110", 
    34 => "10111100100000011001000000111100", 
    35 => "10111110001011101011011010011000", 
    36 => "10111110001000000001111111000110", 
    37 => "10111101011011111111001000111101", 
    38 => "10111011110101101000010001111100", 
    39 => "10111101100100100100010000101100", 
    40 => "00111100101111111101100011011111", 
    41 => "10111101100000101101110011010010", 
    42 => "00111110000000010011010011101010", 
    43 => "10111100110001001000001011011010", 
    44 => "10111100111111001101000111110011", 
    45 => "00111110010000101011110110111101", 
    46 => "00111101100110101100010001010111", 
    47 => "00111100111100001101011101111100", 
    48 => "10111110001011110001101111100000", 
    49 => "10111110000100101010101100100101", 
    50 => "00111101100001111001011001010011", 
    51 => "10111110010111111100100110011111", 
    52 => "10111110010001001101000111000010", 
    53 => "00111110000101100100011111110010", 
    54 => "00111101001001010100011011110001", 
    55 => "10111100010100110101011001110000", 
    56 => "00111011010001001011010111111001", 
    57 => "10111100101100001101011001010101", 
    58 => "00111110001011000010111111110111", 
    59 => "00111101101100001011101100110010", 
    60 => "00111100001101101001111110111100", 
    61 => "10111101010100011010101011001111", 
    62 => "10111110010000101110011000000011", 
    63 => "10111110000011000110110111011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibqm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibqm is
    component conv_2_conv_2_weibqm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibqm_rom_U :  component conv_2_conv_2_weibqm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


