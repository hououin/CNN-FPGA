-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei9j0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei9j0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000010101110101100011000", 
    1 => "00111101000001111100011011011111", 
    2 => "10111101110011010111110111011110", 
    3 => "10111100000101001010001110101101", 
    4 => "00111110001111101001001001100101", 
    5 => "10111101011001111011111110111110", 
    6 => "00111101011100001010100000110111", 
    7 => "10111101100001101111011101011110", 
    8 => "10111101100011000010100101011000", 
    9 => "10111100011101111110100111110001", 
    10 => "00111011001101011110111000110101", 
    11 => "10111101011101111100101101100100", 
    12 => "00111101011001010011110010010110", 
    13 => "10111101000000000111110111110001", 
    14 => "00111101101011100001101101001000", 
    15 => "10111100110100010000110011110111", 
    16 => "00111100110100100100001100010001", 
    17 => "10111101110110110011010111111011", 
    18 => "10111101000110100011100111111111", 
    19 => "10111110011110100000000010100111", 
    20 => "00111110000101001010111000110101", 
    21 => "10111101111010100001101010000100", 
    22 => "10111110001100010010001100010000", 
    23 => "10111101011011011101001111011100", 
    24 => "10111101001010010101011000010100", 
    25 => "10111100011010010111111010000000", 
    26 => "00111100110101001111111111001011", 
    27 => "10111110001010011101110000110111", 
    28 => "00111100100111111100100111010101", 
    29 => "10111101010010101110000000101110", 
    30 => "00111110000010100011110011010100", 
    31 => "10111110100100111101011101000111", 
    32 => "00111100111010010111001110110000", 
    33 => "00111101011000010110111010111001", 
    34 => "10111101110001110010001000100111", 
    35 => "00111101010101111000101001111011", 
    36 => "10111110010000101001101001101101", 
    37 => "10111011000100010100111011010100", 
    38 => "10111011111100010011100101100110", 
    39 => "10111010001101111011100101001101", 
    40 => "10111110000100110110010011101101", 
    41 => "10111101100100011001110101111111", 
    42 => "10111100001010010111001110110001", 
    43 => "00111101000101100011111111010111", 
    44 => "00111101111110111110100010100000", 
    45 => "10111100111101001110010001000111", 
    46 => "10111011110101101100101101110011", 
    47 => "00111101101111000100000010101001", 
    48 => "10111001101001000101011010001000", 
    49 => "10111110011110010101101111100100", 
    50 => "00111110000011000110111100010000", 
    51 => "00111101100011011001011101100001", 
    52 => "10111110001110111010011100010000", 
    53 => "10111101100010101110001010011100", 
    54 => "10111101100100100101011101101000", 
    55 => "10111011101110100000000001010011", 
    56 => "10111101101110010111011001001110", 
    57 => "10111101101001101000101010110111", 
    58 => "10111110001011000011000111000001", 
    59 => "00111101010101011101010111011110", 
    60 => "00111101000101110001101001001000", 
    61 => "00111101010001011001101101000011", 
    62 => "10111100000110000111101100111011", 
    63 => "10111100001000111110011010111011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei9j0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei9j0 is
    component conv_2_conv_2_wei9j0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei9j0_rom_U :  component conv_2_conv_2_wei9j0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


