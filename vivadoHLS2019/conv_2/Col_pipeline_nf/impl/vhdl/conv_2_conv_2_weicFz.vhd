-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicFz_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicFz_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000111001011010111110110", 
    1 => "10111100101010000100111001100000", 
    2 => "10111101011111001010110101101100", 
    3 => "10111101001001110110000010000001", 
    4 => "10111110000101111010001100111011", 
    5 => "10111101101001100010011110010100", 
    6 => "10111101011110100111100101001000", 
    7 => "10111101100101001000010100100010", 
    8 => "00111100100001100000111000111010", 
    9 => "10111011101110111101111011010101", 
    10 => "00111101011110100110000001001010", 
    11 => "00111101001111101000110111001001", 
    12 => "10111101111101110010001100111101", 
    13 => "10111101001001111111010100000011", 
    14 => "00111110001111101001011011110111", 
    15 => "00111101110100111110011100110100", 
    16 => "00111101100110111110111110000000", 
    17 => "10111101001010000001101011100001", 
    18 => "00111110001001100100100000001000", 
    19 => "00111110000000111000000100000100", 
    20 => "00111110001001011110010010010011", 
    21 => "10111110001011100100000110100000", 
    22 => "00111101110101011000000011100010", 
    23 => "10111011101010110001000011110100", 
    24 => "10111101111100101110110010000100", 
    25 => "10111101001110001001101001111001", 
    26 => "00111101000001111101000111111111", 
    27 => "10111110001001111110010101100001", 
    28 => "00111101011111010011011010101100", 
    29 => "00111101110101011000101000011100", 
    30 => "10111101010001110001110100011111", 
    31 => "10111100111010100001001011111010", 
    32 => "00111100100010000011000000011001", 
    33 => "10111100010100111011001101111001", 
    34 => "10111101001100111001111000000010", 
    35 => "00111101010000001111101111110110", 
    36 => "10111110000110101110010110010110", 
    37 => "00111101000100001110111110010011", 
    38 => "10111110000001000011101000111111", 
    39 => "10111110010001001111011010011110", 
    40 => "10111101101001100010011000011110", 
    41 => "10111110010000000101001010110101", 
    42 => "10111101111011011100101110101100", 
    43 => "10111100000111000100110101111101", 
    44 => "00111100110111011001010011010111", 
    45 => "00111110001000010011111111101001", 
    46 => "10111110010001011110100111101101", 
    47 => "00111100011000100110010110000000", 
    48 => "10111101110100111100101101010101", 
    49 => "10111110010101101111101110101011", 
    50 => "00111101011010001000000100011101", 
    51 => "00111101110000100010001110100010", 
    52 => "10111100110100101000110111101111", 
    53 => "10111101111001010101001111111111", 
    54 => "10111110000010010010111000100110", 
    55 => "10111110101011001010000000000111", 
    56 => "00111110100000001111100010001000", 
    57 => "00111101110011111101101100000111", 
    58 => "10111110100001110101010101011111", 
    59 => "00111101001111010110100001011110", 
    60 => "00111100101101010000011000010000", 
    61 => "00111101110101000101110111110101", 
    62 => "10111110000110100010110100110010", 
    63 => "10111101011101111101001110000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicFz is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicFz is
    component conv_2_conv_2_weicFz_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicFz_rom_U :  component conv_2_conv_2_weicFz_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


