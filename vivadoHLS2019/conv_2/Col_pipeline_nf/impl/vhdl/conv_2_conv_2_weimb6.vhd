-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weimb6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weimb6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000000011010101111100011", 
    1 => "00111101111100000111001011111010", 
    2 => "10111101100000101111100011011010", 
    3 => "00111101101110101110110011000000", 
    4 => "10111100001000110100001110011010", 
    5 => "10111110001100110000001001110011", 
    6 => "10111101010001011000110110101100", 
    7 => "10111101000001100111110100110011", 
    8 => "10111110111010100110110101001111", 
    9 => "10111110100001111010001010001001", 
    10 => "10111110001101100101001001000001", 
    11 => "10111101101000000001101100101011", 
    12 => "10111101011111111000111001110001", 
    13 => "00111110001110101011110011110101", 
    14 => "10111101110011000111110011010011", 
    15 => "10111110010101111000110010110110", 
    16 => "10111110011001010100011110001010", 
    17 => "00111100100011010011001110010011", 
    18 => "00111101000100101000001011101100", 
    19 => "00111110000010100011011100010100", 
    20 => "10111101000001010011001110000000", 
    21 => "00111100101101101111000101001001", 
    22 => "10111110000010110100001001011101", 
    23 => "10111110000001001010111011001000", 
    24 => "10111101110111111010100100100001", 
    25 => "10111110100111011000011000001100", 
    26 => "10111110000010000001101110001101", 
    27 => "00111100110100101100000111101100", 
    28 => "10111010110101101110111101101110", 
    29 => "10111101110101110011110101100110", 
    30 => "00111101101001010011001011101000", 
    31 => "00111101101100011110100100100101", 
    32 => "10111110000110001011001100110111", 
    33 => "10111101100100011101111110110100", 
    34 => "10111110001000110110110110101001", 
    35 => "00111110010000000110100001011010", 
    36 => "10111101110000011110001111011110", 
    37 => "10111101111110011000110000010100", 
    38 => "10111101111110101010001011010110", 
    39 => "10111110100110011011010010011110", 
    40 => "00111101010011010110010000001001", 
    41 => "10111110100111011011011011001110", 
    42 => "00111101101101010111001110110100", 
    43 => "00111101110110111101100000000110", 
    44 => "00111101010110001100000011011010", 
    45 => "10111101000000010010010110000010", 
    46 => "10111101101111101011000111001101", 
    47 => "10111101001001111001100111010000", 
    48 => "10111110001101111011010111101110", 
    49 => "10111110001111001101111101111100", 
    50 => "10111110000110000000010011000010", 
    51 => "10111101110100100000001011110000", 
    52 => "00111101011011010010100001011111", 
    53 => "10111100000100000111111101100001", 
    54 => "10111101100001111110111101010110", 
    55 => "00111101100010000110100111100111", 
    56 => "00111100111111100101011001100011", 
    57 => "10111101001010011110001001110100", 
    58 => "00111101100011100000111110001011", 
    59 => "10111101101001110001011000110011", 
    60 => "00111100101011100110101000011100", 
    61 => "10111101000111101000011000010110", 
    62 => "10111110010000100110110010001111", 
    63 => "10111110000110100111000101110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weimb6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weimb6 is
    component conv_2_conv_2_weimb6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weimb6_rom_U :  component conv_2_conv_2_weimb6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


