-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weichv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weichv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011101100001110010001000", 
    1 => "00111101110110001001111110110101", 
    2 => "00111101001100011110001011000111", 
    3 => "00111110001000010101101100110111", 
    4 => "10111101001100110100110011100110", 
    5 => "00111101101011011101001011001100", 
    6 => "00111101110001110001100100100111", 
    7 => "10111101110001010101100000101100", 
    8 => "00111110000101011110101101100101", 
    9 => "00111101010000000101010001011001", 
    10 => "00111101000001110100111000110001", 
    11 => "10111101000011001110011100111011", 
    12 => "00111101111110011101000100011110", 
    13 => "10111100100111101101100010001101", 
    14 => "00111101011101000110111011000011", 
    15 => "00111011010010111110010011110111", 
    16 => "00111100001100101010001011100111", 
    17 => "10111101010000000011110011100100", 
    18 => "10111011100010111100101100000111", 
    19 => "00111100111010000000011101100010", 
    20 => "10111110011001101110111010010011", 
    21 => "10111100000010101010101010000110", 
    22 => "10111101101101111000011110010000", 
    23 => "10111101100100011101101000110110", 
    24 => "00111011111011010010011001101100", 
    25 => "00111101000101001001010111100100", 
    26 => "00111100100001001000111100111111", 
    27 => "10111110001111001111101010010110", 
    28 => "00111100011011001111001110111101", 
    29 => "10111011011110101101110111101011", 
    30 => "00111101110001011011011110001000", 
    31 => "00111011000111110000010011001010", 
    32 => "10111011111101000010101000000110", 
    33 => "10111101100111001000100100101110", 
    34 => "10111101010101100001011001000010", 
    35 => "10111110011010101010111000101001", 
    36 => "00111110000001100011110001110100", 
    37 => "10111110010111101111111010011110", 
    38 => "10111100010000110000010100100011", 
    39 => "10111101010000010001001010011100", 
    40 => "10111101110100100001111101011001", 
    41 => "00111101010111011010111100101001", 
    42 => "00111101111100101111010011010000", 
    43 => "00111100101111100101011100010000", 
    44 => "10111110000101000111111110100111", 
    45 => "00111110001111000010110011000111", 
    46 => "00111110001011000110010100100001", 
    47 => "00111100111101111100100011110000", 
    48 => "00111101101010101011101010100110", 
    49 => "00111100011111000101011010001000", 
    50 => "00111100110100101010101010110010", 
    51 => "10111100101111101010000000100111", 
    52 => "10111101010000111101001011011010", 
    53 => "10111100100001011100101100000010", 
    54 => "10111100011011101111110001011010", 
    55 => "10111101001101001001000010111001", 
    56 => "10111100111101100101000001111111", 
    57 => "00111100011001101110010000101100", 
    58 => "10111110001101010111100001011000", 
    59 => "00111101011111110111010011000010", 
    60 => "00111100101110011110110110101010", 
    61 => "00111101000010000111000101001100", 
    62 => "00111101101001110010001011101111", 
    63 => "00111101010100100111000001001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weichv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weichv is
    component conv_2_conv_2_weichv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weichv_rom_U :  component conv_2_conv_2_weichv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


