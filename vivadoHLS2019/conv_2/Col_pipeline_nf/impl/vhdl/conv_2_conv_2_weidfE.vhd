-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidfE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidfE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111001010101010010100010", 
    1 => "10111110011010100001110111100000", 
    2 => "00111110001110111110001000000010", 
    3 => "10111110110000100111101011100110", 
    4 => "00111110001011011101110011101000", 
    5 => "00111100110100010011001111001101", 
    6 => "10111101100110101101010100011100", 
    7 => "10111101101101110011100100011111", 
    8 => "00111110010110011001010100111011", 
    9 => "10111101100011111011101101010011", 
    10 => "10111100000111111101010000101010", 
    11 => "00111101100110010010010011100001", 
    12 => "10111110001110101100110000101001", 
    13 => "10111101100001011101110010111101", 
    14 => "10111100110010110111101101100101", 
    15 => "10111101000000111101000000100011", 
    16 => "10111101100100110110101101110111", 
    17 => "00111101000011101100111101100100", 
    18 => "10111110001001010110001100110110", 
    19 => "00111100111101110011101101000110", 
    20 => "10111110101010011011111001110110", 
    21 => "00111101110110011111011011110100", 
    22 => "10111101100011010001001100100111", 
    23 => "00111101111111100111011011000111", 
    24 => "00111101010100111100100101110011", 
    25 => "00111110001101111111011010100111", 
    26 => "10111101000001011010011111110000", 
    27 => "10111110010011001110011001100110", 
    28 => "10111101110100011101001000100111", 
    29 => "10111100110011011110001001111100", 
    30 => "00111011100101011110000011110110", 
    31 => "10111110000010000000000110001011", 
    32 => "00111110000001100100001101100010", 
    33 => "10111110000111111100110101001100", 
    34 => "10111101110001001010010101000000", 
    35 => "10111101101111000011011001111010", 
    36 => "10111101010110111001000001011000", 
    37 => "10111101111001101011100001101011", 
    38 => "00111101101110001110000001101100", 
    39 => "00111110000000101111001110011011", 
    40 => "10111101001111110100100101001101", 
    41 => "00111101000001001011001001010000", 
    42 => "10111110000000100111100100100001", 
    43 => "10111110101000010100111101001110", 
    44 => "00111100110000000111001011111001", 
    45 => "00111100010001000101011101101110", 
    46 => "00111110000000100011000001111001", 
    47 => "00111100010110011101010001010011", 
    48 => "10111101000101010100101010010001", 
    49 => "10111110100000100001111011010010", 
    50 => "00111101001000001101101100000111", 
    51 => "00111100101001010000101001111001", 
    52 => "00111100011011010111000110101101", 
    53 => "00111101100100000001100111101110", 
    54 => "00111101111000100000111001100100", 
    55 => "00111110010011011011100111101001", 
    56 => "10111110001100111011011001001111", 
    57 => "00111110001100010010010010000011", 
    58 => "00111101101100100000010010011000", 
    59 => "10111100011110100100001101011011", 
    60 => "00111011101101000010010010010100", 
    61 => "00111101010010100001010010110111", 
    62 => "10111110001010100010111000110100", 
    63 => "10111100011011000110101111001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidfE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidfE is
    component conv_2_conv_2_weidfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidfE_rom_U :  component conv_2_conv_2_weidfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


