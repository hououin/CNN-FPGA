-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiejP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiejP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100001001100101110101111", 
    1 => "10111110101000001001111010000011", 
    2 => "10111110010110100111000110010011", 
    3 => "00111101100010110001111000101100", 
    4 => "00111100110100010110001010010001", 
    5 => "10111110101101011010101000010101", 
    6 => "00111110011001111100111000101011", 
    7 => "00111101100111111010110001110101", 
    8 => "00111101111110011000101100111111", 
    9 => "10111110110011110001100011000001", 
    10 => "10111110000110000000011001011010", 
    11 => "10111110010110100001110011111101", 
    12 => "00111110001010001000111010011010", 
    13 => "00111101001001110000111011001001", 
    14 => "00111110001001101011100100111101", 
    15 => "00111101101000000100011101000110", 
    16 => "00111100110111101111011010000001", 
    17 => "00111101000011001010010101100110", 
    18 => "10111100011111010011001100100100", 
    19 => "00111101101100111111110000010010", 
    20 => "00111110000101000000100010101011", 
    21 => "10111100101001010110001010011111", 
    22 => "10111101010000101101001100011011", 
    23 => "10111101000011001001101110101010", 
    24 => "00111110010100001111000010001010", 
    25 => "00111110001011101000010000011001", 
    26 => "10111110011011000111010111110011", 
    27 => "00111101100000110111001001110000", 
    28 => "00111101110000001100000000101000", 
    29 => "10111101100000100111011001001011", 
    30 => "10111101010011011001100100101111", 
    31 => "00111110001110011110111100000101", 
    32 => "00111101111010101011111100110100", 
    33 => "00111110010010111010001101001111", 
    34 => "10111110110111100011001110100110", 
    35 => "10111110101010111000001111100001", 
    36 => "00111101101001000110100100100001", 
    37 => "00111110010001100001001100011000", 
    38 => "00111110001000011001111010100100", 
    39 => "00111101010011010001111101010110", 
    40 => "10111101111001101110110000101110", 
    41 => "00111110100001011010100101000111", 
    42 => "10111110010111000111010111110110", 
    43 => "00111110001000100101100100111001", 
    44 => "10111110001100001001111111000011", 
    45 => "00111101100111001111000001110110", 
    46 => "00111110100010001110000110100001", 
    47 => "00111110011010111100010100101110", 
    48 => "10111110010000111010100100100010", 
    49 => "00111110011101001011010100010001", 
    50 => "00111110011111100101010110000001", 
    51 => "10111110010011101001001011000101", 
    52 => "00111101110010111000100010110110", 
    53 => "10111110000010100110001111000100", 
    54 => "10111110001111111110101000100000", 
    55 => "00111101111001000010001101001111", 
    56 => "10111101000101010000111110010100", 
    57 => "10111100110110110011101011100000", 
    58 => "10111100100001100010011110010001", 
    59 => "10111101111101010000010000010000", 
    60 => "00111101010010001110011101111010", 
    61 => "10111011011111000011000011010110", 
    62 => "10111110100000011010101011110000", 
    63 => "10111101011001011111110000111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiejP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiejP is
    component conv_2_conv_2_weiejP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiejP_rom_U :  component conv_2_conv_2_weiejP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


