-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieOg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieOg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011001110110001010000101", 
    1 => "00111101001100011110101111011110", 
    2 => "10111101001000111100111010000111", 
    3 => "10111110000000111000001110000101", 
    4 => "10111101010011000010100110010101", 
    5 => "10111101101000010011000010100100", 
    6 => "00111101101011110111011110001111", 
    7 => "00111100110101100000110110110011", 
    8 => "10111110110011011100000000101011", 
    9 => "10111100111010001110010010100001", 
    10 => "10111110001011111001101111110100", 
    11 => "00111110011001010010101111001001", 
    12 => "00111110001100011101010010000101", 
    13 => "00111101110011000101011111001110", 
    14 => "10111110000101001100000000110000", 
    15 => "10111110111000011000100000011100", 
    16 => "00111100000011011000110100001010", 
    17 => "10111101111011010001100001001100", 
    18 => "00111101100001010000101110001111", 
    19 => "10111100000101010101011100110010", 
    20 => "00111101111100001010110110000101", 
    21 => "10111100000011111000100010001110", 
    22 => "10111101010001110000101100001111", 
    23 => "00111101110011110110111101011001", 
    24 => "10111101111001011100001110101001", 
    25 => "10111110110010100001101000000010", 
    26 => "10111110100010011011100001000101", 
    27 => "00111101111011000111000000010000", 
    28 => "00111101110000100011001101101111", 
    29 => "10111110100001001000011011110111", 
    30 => "00111110100000001100001101011001", 
    31 => "10111101110100010000010010011010", 
    32 => "00111101011000001010101110110000", 
    33 => "00111110010101011100011000101010", 
    34 => "10111101000101101001010010011101", 
    35 => "00111110010001001111010010011001", 
    36 => "10111101110010100110001110100111", 
    37 => "10111100110110011000001011100100", 
    38 => "00111101110101111111011001000110", 
    39 => "10111110111010001000101111110011", 
    40 => "10111101101001100010010000100100", 
    41 => "10111110111100110101000011001110", 
    42 => "00111110000001101110001010001011", 
    43 => "10111100100000110111100000010111", 
    44 => "10111100100011110011000000011100", 
    45 => "10111101001010010111101001000100", 
    46 => "00111101000100111111010001111000", 
    47 => "10111101000110100011001111111011", 
    48 => "00111110000001101001100110000011", 
    49 => "10111101101010001110011100001011", 
    50 => "00111100001000100111000011111101", 
    51 => "10111100010011110011011101000010", 
    52 => "00111101001111010100110101100001", 
    53 => "00111100010100110010110110011101", 
    54 => "10111100110010000101110000001011", 
    55 => "00111110001100100001001011011110", 
    56 => "00111110000011001110110000010100", 
    57 => "10111101101010111101100001111000", 
    58 => "00111011010100100010101110110110", 
    59 => "00111110001001100111001010111011", 
    60 => "10111101000111110101001010101101", 
    61 => "10111110011011101110110011010000", 
    62 => "10111110010000010000100111101110", 
    63 => "10111110101011100100011110001010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieOg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieOg is
    component conv_2_conv_2_weieOg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieOg_rom_U :  component conv_2_conv_2_weieOg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


