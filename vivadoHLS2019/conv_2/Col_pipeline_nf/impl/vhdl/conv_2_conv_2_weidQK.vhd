-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidQK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidQK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010011001000100110100111", 
    1 => "10111110001000001001110001011101", 
    2 => "10111110011100000011001000111111", 
    3 => "00111110010001111111000111000101", 
    4 => "10111110100100011010111110101101", 
    5 => "00111110011110011110101011010100", 
    6 => "00111110010000101100001100100111", 
    7 => "10111101100011011001111010000110", 
    8 => "00111110010110001101111100010011", 
    9 => "00111011100111101100010000110000", 
    10 => "00111110000010001000010011111000", 
    11 => "00111101000011000101000100100000", 
    12 => "00111101100111110101011100110011", 
    13 => "10111110100100101001100100010110", 
    14 => "00111101111101110101100010001010", 
    15 => "10111100101111000111101101010100", 
    16 => "00111110000010001001111011100011", 
    17 => "00111110010111101110000111101101", 
    18 => "00111101001011110001110111101001", 
    19 => "10111101111011010111111010001001", 
    20 => "10111110001011100000111010111010", 
    21 => "10111110111100100101101011000111", 
    22 => "10111110011001001110000010010101", 
    23 => "00111101011101001010111100110000", 
    24 => "00111101100111111111011010111101", 
    25 => "00111110000110011110001111100001", 
    26 => "00111101100010000101000000001001", 
    27 => "00111101100011101000010100100101", 
    28 => "10111101001111001011010111100011", 
    29 => "10111100011001101011110001000110", 
    30 => "10111101010110100001101101111010", 
    31 => "00111100101111101110101010111010", 
    32 => "00111110010011001000011001111100", 
    33 => "10111101111011100001001101011111", 
    34 => "00111110010101100001010111010111", 
    35 => "00111101010111110000010110000011", 
    36 => "10111110001100000100100011110111", 
    37 => "10111110001000101101110101110111", 
    38 => "10111110011011011011010001010111", 
    39 => "00111010110011101010100101000100", 
    40 => "10111110111110000010100101101110", 
    41 => "00111110001100000110111111010011", 
    42 => "10111110010100000100011111001011", 
    43 => "00111110100100001111110010101000", 
    44 => "10111101000000110101000011101110", 
    45 => "00111110100000000011000101010000", 
    46 => "00111101111111111110000110000001", 
    47 => "00111101010011100011010010111100", 
    48 => "10111101101110011000011000111101", 
    49 => "10111101101010010010101011111101", 
    50 => "10111101000011001101001100100111", 
    51 => "10111100100110111010111001010100", 
    52 => "00111110001101111001010110101110", 
    53 => "10111110100100010010101110101000", 
    54 => "10111110000110111101101100110100", 
    55 => "10111101011100100110101111001010", 
    56 => "00111110000011100100010100010011", 
    57 => "10111101111111111010101010110000", 
    58 => "10111101110110001110100010111011", 
    59 => "00111101000111101000011001110110", 
    60 => "10111110100000011000110101100100", 
    61 => "00111101000011110001011100100111", 
    62 => "00111101010011111110010110011110", 
    63 => "10111101011001111000110010111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidQK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidQK is
    component conv_2_conv_2_weidQK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidQK_rom_U :  component conv_2_conv_2_weidQK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


