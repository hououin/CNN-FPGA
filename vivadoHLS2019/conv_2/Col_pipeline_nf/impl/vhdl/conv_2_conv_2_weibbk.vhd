-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibbk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibbk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011010110011101100110011", 
    1 => "00111101110110100101001110101101", 
    2 => "10111110010100010101110100111010", 
    3 => "00111101011010111101001110100110", 
    4 => "00111110000111000100101000001100", 
    5 => "10111011101011000100101000001100", 
    6 => "00111101011110010001110101110101", 
    7 => "10111011000100000010001100101001", 
    8 => "00111110000001101111000000010010", 
    9 => "10111101101100011110101101100100", 
    10 => "00111110000110010110010100110110", 
    11 => "00111100011000001100001011011000", 
    12 => "00111110011000101011111010101111", 
    13 => "00111110000110111011010101101100", 
    14 => "00111100001101001001100001010001", 
    15 => "00111100101011111100010011000010", 
    16 => "00111101001000010100000000001010", 
    17 => "10111101101110101010000111110000", 
    18 => "00111101011111110111100100110100", 
    19 => "10111110111001110010111101001001", 
    20 => "00111110000111011110111110111100", 
    21 => "00111101010110001000011111000001", 
    22 => "10111101010001101110110010001000", 
    23 => "00111101000011010011100111001100", 
    24 => "00111100111010110111100010100010", 
    25 => "10111100100100111101110010101011", 
    26 => "10111110000010101010111001010110", 
    27 => "10111101111111110010100000100111", 
    28 => "00111101111000001000001100001111", 
    29 => "10111110011101111110011100010001", 
    30 => "00111100101010010010010100001001", 
    31 => "10111110111010111111111000010011", 
    32 => "00111101100000011010001010010010", 
    33 => "10111011010100001100100000100000", 
    34 => "10111101101000100101000001110010", 
    35 => "00111101101100001010010100101000", 
    36 => "10111110010000011110000111100010", 
    37 => "00111110010110111101010011110000", 
    38 => "00111101101111010000101111101001", 
    39 => "00111101110010100001001001111010", 
    40 => "10111110100101111000111000100000", 
    41 => "10111110011001101011010000111111", 
    42 => "10111100101000110101010100010010", 
    43 => "10111101010010000100010010101100", 
    44 => "00111011000010011011101001110111", 
    45 => "10111101011010000000000001101011", 
    46 => "00111101010101010001011001000001", 
    47 => "10111101111011101010000100111111", 
    48 => "10111110101100111110010101011110", 
    49 => "10111110000000101011000110110011", 
    50 => "00111110001101101010110001000101", 
    51 => "00111110100101000000111111001010", 
    52 => "10111101110100110101110010111001", 
    53 => "10111101101001000001111010011101", 
    54 => "10111101101001011011110010010000", 
    55 => "10111101000111011100000011101111", 
    56 => "00111110001000101011001001011100", 
    57 => "10111110011101111011111001111101", 
    58 => "10111101000000111001110000111000", 
    59 => "00111100111000000000011111111001", 
    60 => "10111101010100101010110101010011", 
    61 => "10111100100011101000101100111110", 
    62 => "00111110001111100001101110111110", 
    63 => "10111101100011101010110111110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibbk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibbk is
    component conv_2_conv_2_weibbk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibbk_rom_U :  component conv_2_conv_2_weibbk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


