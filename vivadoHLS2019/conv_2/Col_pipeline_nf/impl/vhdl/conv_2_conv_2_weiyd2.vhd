-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiyd2_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiyd2_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100000100111001100001101", 
    1 => "10111101111110010010010110000110", 
    2 => "00111100001100101010011111010101", 
    3 => "10111100001110100011000111110101", 
    4 => "00111100000110000000111100101111", 
    5 => "00111100100100010100001111010000", 
    6 => "10111101101101100100101100000000", 
    7 => "10111101101000010000100100011011", 
    8 => "10111101011001001100011000101000", 
    9 => "10111101111011101101111111011011", 
    10 => "10111101110110001100011011111100", 
    11 => "00111101100000111100100011001110", 
    12 => "10111101011111010011110111010011", 
    13 => "10111110011100110001000011100111", 
    14 => "10111110010001010111000000010101", 
    15 => "10111101100010100011100000111000", 
    16 => "10111110010101010111101010101111", 
    17 => "10111101001001010100110001000011", 
    18 => "10111110001100101010010001110111", 
    19 => "00111101110011000000000000011111", 
    20 => "10111110001100100111010110100110", 
    21 => "10111110101110100001100010100111", 
    22 => "10111110010000001001101000111000", 
    23 => "10111101110010011000100001010010", 
    24 => "00111100010110010101000011101011", 
    25 => "00111110001010100111000011001111", 
    26 => "00111100001010000011001011000100", 
    27 => "00111101101011110011010010111000", 
    28 => "10111110001110011100110000000000", 
    29 => "00111110001001110101111111001110", 
    30 => "10111100101111100011001001001101", 
    31 => "10111110001000111011100111110110", 
    32 => "10111101110110000001101001101100", 
    33 => "10111110011101101111001001100000", 
    34 => "10111101101001110111011010011110", 
    35 => "00111110010001111100101100100000", 
    36 => "10111101011001100010001001101001", 
    37 => "00111101011001111111101111100101", 
    38 => "00111101100101101110000110011111", 
    39 => "00111101110001101110000100100010", 
    40 => "00111100110101110011000111100010", 
    41 => "00111101100010000111010110011010", 
    42 => "10111110000111100010010111010010", 
    43 => "00111110000010010010101101101100", 
    44 => "00111101101001101000100010011111", 
    45 => "10111101101010101110110101101100", 
    46 => "10111101100010100010011001101010", 
    47 => "00111101110101100111001010010111", 
    48 => "00111101101011011010100111110000", 
    49 => "10111110011100001001111010001110", 
    50 => "10111101100100001111100111101011", 
    51 => "10111101001111100101000100001011", 
    52 => "10111110100001111010000011101100", 
    53 => "00111101110100011110000000100000", 
    54 => "10111100110110011001010011010100", 
    55 => "10111110000110111011111000100100", 
    56 => "10111110010101100001001101100110", 
    57 => "00111101100110110100100101111001", 
    58 => "10111101110010000001000010010011", 
    59 => "00111011110000011111110110011000", 
    60 => "10111100110100011001000101001110", 
    61 => "10111101001010110101010011000111", 
    62 => "00111101011101000000000101100100", 
    63 => "00111011111101111100001101011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiyd2 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiyd2 is
    component conv_2_conv_2_weiyd2_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiyd2_rom_U :  component conv_2_conv_2_weiyd2_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


