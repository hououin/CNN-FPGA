-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib1s_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib1s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001111111011001100110000", 
    1 => "00111101110111000111101100110010", 
    2 => "00111011111011000100110111110111", 
    3 => "00111101000001010001100100000001", 
    4 => "10111101100111001110100011001110", 
    5 => "10111101111110010001110011011010", 
    6 => "10111101100011110010100101001100", 
    7 => "10111101100010000000000110100011", 
    8 => "10111101001010010011110001101001", 
    9 => "10111100010011101111101110101010", 
    10 => "10111110010001011011011100001011", 
    11 => "10111110000100001100010000110111", 
    12 => "10111101110001111010101101110110", 
    13 => "10111101100111000000000111100001", 
    14 => "10111110000100110111011101111011", 
    15 => "10111101001010111110110010011111", 
    16 => "00111101001011110001101011101001", 
    17 => "10111101001011110001011000101110", 
    18 => "00111101100011111110100011000101", 
    19 => "00111100100010010001011000001101", 
    20 => "10111110101101000000101011011101", 
    21 => "10111110001111101010111011110000", 
    22 => "10111011101100111110010011110000", 
    23 => "10111101011101010110101100100001", 
    24 => "00111100111101010100000000110100", 
    25 => "10111101110000000001011010111010", 
    26 => "10111101010101010001011111111101", 
    27 => "10111110011100011011111001001001", 
    28 => "00111101100000111101001001000110", 
    29 => "10111101101101001011110110011010", 
    30 => "10111110000110001111101011010000", 
    31 => "00111101110101110000010100110100", 
    32 => "10111101101110111100110101111101", 
    33 => "00111101111101100110000001110001", 
    34 => "10111101101011111011101000101111", 
    35 => "10111101000011100110011100001111", 
    36 => "00111100100101010001011101110001", 
    37 => "10111100101111100110101010100011", 
    38 => "10111101100110101111010000011010", 
    39 => "10111101110000010000001011010010", 
    40 => "00111101000000010000010001110001", 
    41 => "00111101001011101100001011000010", 
    42 => "00111110001110011100000110100011", 
    43 => "10111101001000100010110111010001", 
    44 => "10111101110011101011101100110101", 
    45 => "10111101111011001000001011110101", 
    46 => "10111110000001011010010011001110", 
    47 => "10111110100000100101001010000011", 
    48 => "00111101100100111000010001111111", 
    49 => "10111110000000111111000100110010", 
    50 => "10111101110001100110111111001011", 
    51 => "10111011100011011110110000011110", 
    52 => "10111101100011100000110110000111", 
    53 => "10111100101100100010010011010101", 
    54 => "00111101000110000101001111100111", 
    55 => "10111011011010111100000111100110", 
    56 => "00111101111000001101111111110001", 
    57 => "00111101010010101110011000011010", 
    58 => "10111110001000011100110110101010", 
    59 => "00111101110001101111001001000011", 
    60 => "10111110001000001110010000100011", 
    61 => "00111101101011110101101001111010", 
    62 => "10111100111000110000111100001011", 
    63 => "00111101110001010011001011110011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib1s is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib1s is
    component conv_2_conv_2_weib1s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib1s_rom_U :  component conv_2_conv_2_weib1s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


