-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicvx_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicvx_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001111001101001010111111", 
    1 => "00111101111001011110011110010110", 
    2 => "00111110001011110011110110101101", 
    3 => "00111110000010000011011100100001", 
    4 => "10111110100100011111101011100000", 
    5 => "00111101000011011111001101011100", 
    6 => "10111101110010100100111010001111", 
    7 => "10111011011110000010101110000010", 
    8 => "00111110011011101100100001010101", 
    9 => "00111100110011010011010001111100", 
    10 => "00111101000111000110101110100100", 
    11 => "10111101101000001001110100111000", 
    12 => "00111101011010101101101011010011", 
    13 => "10111110010110011110100000111001", 
    14 => "00111110010000111100111100000100", 
    15 => "00111110001101000110101111101110", 
    16 => "10111110000001101011011000000010", 
    17 => "00111101100000011110111000101010", 
    18 => "10111110010011110100110001101100", 
    19 => "10111101010110110011000000100111", 
    20 => "10111110101001110010110101000110", 
    21 => "10111101111100000110111111111111", 
    22 => "10111110011111100111111011010000", 
    23 => "10111101101000001111001000001010", 
    24 => "00111101110010000001001010010100", 
    25 => "00111110100001101111011101100111", 
    26 => "00111101101110000001101001100010", 
    27 => "10111110011010001011010111000000", 
    28 => "00111101111011110010110100001101", 
    29 => "00111101111100111110111011000010", 
    30 => "10111101111000101000001011101101", 
    31 => "00111100111100111001001101100110", 
    32 => "00111110000011011110101101001101", 
    33 => "00111101011101110000111111010010", 
    34 => "10111100010001000010001010111010", 
    35 => "10111101001111011011001001000011", 
    36 => "00111110001010101010111000000110", 
    37 => "10111101011000010110010111001100", 
    38 => "00111101100000000100000001001001", 
    39 => "00111100101001100101011100011110", 
    40 => "10111100110011001111010101110001", 
    41 => "00111101101111110011101000010100", 
    42 => "10111110000000110001010010010011", 
    43 => "00111101111110010101010101100000", 
    44 => "10111110001110001111110000100100", 
    45 => "00111101010101110101111100010010", 
    46 => "00111101100110000011101100001000", 
    47 => "10111101111011100100011010001000", 
    48 => "00111100010010001010101010100000", 
    49 => "10111100110000111001100000110000", 
    50 => "00111101110111001100001000000100", 
    51 => "00111101110111111100111111111011", 
    52 => "10111101000001101110100110010001", 
    53 => "10111110100110010011111110011010", 
    54 => "00111101101010100000001000011111", 
    55 => "00111101101101000010000011000010", 
    56 => "10111110010001111000010100101111", 
    57 => "10111101110110010001101011110000", 
    58 => "10111110011000010110011111011011", 
    59 => "10111110110010010000100011100000", 
    60 => "00111101010001010010011010110011", 
    61 => "00111100110111101010001100000000", 
    62 => "10111100101101000010000001101011", 
    63 => "00111101110111111101010010011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicvx is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicvx is
    component conv_2_conv_2_weicvx_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicvx_rom_U :  component conv_2_conv_2_weicvx_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


