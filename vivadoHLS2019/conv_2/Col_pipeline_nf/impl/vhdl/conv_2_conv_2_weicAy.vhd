-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicAy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicAy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111100100101110000101111", 
    1 => "10111101100000101100110110100101", 
    2 => "10111110001100101101011001011111", 
    3 => "10111110010001110110000101001101", 
    4 => "10111110000011001001100110110101", 
    5 => "10111101010110001110001101101111", 
    6 => "10111110100011110000001101111100", 
    7 => "10111110000100110010011100111000", 
    8 => "00111101001111010011101100111011", 
    9 => "00111100101111110001011011010111", 
    10 => "00111110000000010111111010100010", 
    11 => "10111101000110000111100001100000", 
    12 => "10111110011000100000101001010110", 
    13 => "10111101001010100100001001111010", 
    14 => "00111101001110001011101010011001", 
    15 => "00111101101110101111100010100000", 
    16 => "10111101100100100100110000010010", 
    17 => "10111011011010010110100011011001", 
    18 => "00111101010001011110011111000111", 
    19 => "00111101010001101001110110101000", 
    20 => "00111110001000111110001110001001", 
    21 => "10111110101111111011100001111011", 
    22 => "00111010001010011100000001000100", 
    23 => "10111101001011011100011100010101", 
    24 => "10111110000000100111110101111000", 
    25 => "10111110000110000001010011000110", 
    26 => "10111101100001101100110101101001", 
    27 => "10111110100010010101100111111001", 
    28 => "00111100110111010011000011001001", 
    29 => "00111101001101101111111110011010", 
    30 => "00111101100011001100001101001100", 
    31 => "00111101101100111001100110011010", 
    32 => "00111101010100010001010011010000", 
    33 => "00111110000010111000110011111101", 
    34 => "10111100001110101111010101000110", 
    35 => "10111100011000110111100101000100", 
    36 => "10111110101011010111111101000101", 
    37 => "10111001100001101111011010111111", 
    38 => "10111110011100001101010010111100", 
    39 => "10111110100100111000101101000100", 
    40 => "10111101100000011000000001110010", 
    41 => "10111110000001011111011001000100", 
    42 => "10111110010110111100011010110000", 
    43 => "10111110001000001110001001000110", 
    44 => "00111101001111111110101100110000", 
    45 => "00111110001010101111100001100001", 
    46 => "10111101100100000100010100101110", 
    47 => "10111101110000001101011000000100", 
    48 => "10111100010111010101101011100000", 
    49 => "10111110101000110001010101000011", 
    50 => "10111101000010011111000000001000", 
    51 => "00111101111000111100101100011001", 
    52 => "10111101100111001010000111101111", 
    53 => "10111101110001111100101111010011", 
    54 => "10111101101001011001001011110100", 
    55 => "10111101110000010000010111000011", 
    56 => "00111110010010001011111101011001", 
    57 => "00111110010001111100011011100000", 
    58 => "10111110101011000001011100110110", 
    59 => "00111101010011101100100011001010", 
    60 => "10111101110010100000011100111110", 
    61 => "00111101110101101010010101010011", 
    62 => "10111101101001011100011001111000", 
    63 => "10111110000000100100101000100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicAy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicAy is
    component conv_2_conv_2_weicAy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicAy_rom_U :  component conv_2_conv_2_weicAy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


