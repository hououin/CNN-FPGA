-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiccu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiccu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100010001100111110010100000", 
    1 => "10111101011000000000110000111000", 
    2 => "00111110000001100110010010010110", 
    3 => "00111101111111010101101011010001", 
    4 => "10111101101111100101101101000110", 
    5 => "00111101011010110011100100101001", 
    6 => "10111110000101101000010000001010", 
    7 => "00111101011000100011111000001000", 
    8 => "10111101001100111100010111101000", 
    9 => "00111101001101011000111101001001", 
    10 => "10111101100010100111010011010111", 
    11 => "10111110000011000001010110010000", 
    12 => "00111101011100010111101110101001", 
    13 => "10111110010001010000011111100000", 
    14 => "10111101101111010110101101110001", 
    15 => "10111101000101001111010010101111", 
    16 => "10111100100101000100000010001110", 
    17 => "00111110000111100100000100011100", 
    18 => "00111101101110101110011111011001", 
    19 => "00111110000110000110100011111110", 
    20 => "10111110100010110101010100001010", 
    21 => "10111110010110011101000001001101", 
    22 => "10111100100111000001000110000110", 
    23 => "10111110010010010101010010111000", 
    24 => "10111100100110001100000110010100", 
    25 => "00111100000010001010111101001001", 
    26 => "10111100011011001110101010100100", 
    27 => "10111110101011100001011000110010", 
    28 => "00111011100101111110101110010011", 
    29 => "00111101111001101010011111110100", 
    30 => "10111101101110101101101101101000", 
    31 => "10111101101011010101001011000100", 
    32 => "10111101101111010111001010001101", 
    33 => "00111101011010111010001000100100", 
    34 => "10111101000010111000010100100000", 
    35 => "10111101010001010101001111111010", 
    36 => "00111100101101000011101100101010", 
    37 => "10111101011111010101000000111010", 
    38 => "10111101011000010100010111010000", 
    39 => "00111101110000101000000100111011", 
    40 => "10111100111101100101111110000001", 
    41 => "10111101001011110001100100000101", 
    42 => "00111101010011100110101100010111", 
    43 => "00111110000010110100110111110010", 
    44 => "10111101010110010011001101001101", 
    45 => "00111101101010010001010010111101", 
    46 => "10111101111000011001010001111011", 
    47 => "10111100100100000001110100010001", 
    48 => "10111011110000001101111000000111", 
    49 => "10111110000010101001101101001110", 
    50 => "10111110010100100100111111101010", 
    51 => "00111110001100110010011001000100", 
    52 => "10111101001111100101011100001000", 
    53 => "10111110011111110101110110011000", 
    54 => "10111011010100010101111111010100", 
    55 => "10111100011110000000101011100010", 
    56 => "10111100111010011011011000110001", 
    57 => "00111101010110110000000011000101", 
    58 => "00111101011101001010010010010000", 
    59 => "00111101111110001011011100110100", 
    60 => "10111110001010010111100000100111", 
    61 => "00111100110101101011110111101001", 
    62 => "00111101111001100001001100111001", 
    63 => "00111101100110000001101111011010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiccu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiccu is
    component conv_2_conv_2_weiccu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiccu_rom_U :  component conv_2_conv_2_weiccu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


