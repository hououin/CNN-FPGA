-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiRg6_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiRg6_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101111110000100111111110", 
    1 => "00111110010011011011000110100101", 
    2 => "10111010110101001111111000100100", 
    3 => "00111100101000000001000000100101", 
    4 => "00111101111000001111000010101100", 
    5 => "00111101110101000100100111101001", 
    6 => "00111101100110000010111010110011", 
    7 => "10111100100001001010101001101100", 
    8 => "10111100100101111101101110001010", 
    9 => "10111100110001010110011000110000", 
    10 => "00111101100011011111111110111111", 
    11 => "00111100110101100110010111011111", 
    12 => "00111101000111101001111101101110", 
    13 => "00111101101010001001100100001010", 
    14 => "00111110000000100100010001001001", 
    15 => "10111101000111110100111011010101", 
    16 => "00111110000000100001001100110000", 
    17 => "10111101011001010111010010011000", 
    18 => "00111110001001101011011010110101", 
    19 => "10111110010011101011100100101100", 
    20 => "00111101111011110011010000110100", 
    21 => "00111100100010000011110110010110", 
    22 => "10111110000001010000001010001001", 
    23 => "10111100100100101011110111100000", 
    24 => "00111100111001101000111111100101", 
    25 => "10111101110011010111101101011100", 
    26 => "10111101100001000101111010110111", 
    27 => "10111110010000000110100110000101", 
    28 => "00111101110000001110010100101100", 
    29 => "10111110000100111100001110110010", 
    30 => "00111101111101011000000000000101", 
    31 => "10111110100001101111001101010110", 
    32 => "10111101011111001111011011010011", 
    33 => "10111101001011110001011101111110", 
    34 => "10111101100111101000011001101110", 
    35 => "10111101101011110110001111001011", 
    36 => "10111110101001110000011100101010", 
    37 => "00111101100010101001011100100101", 
    38 => "00111100101010011001110011101110", 
    39 => "10111100101111010000001111001110", 
    40 => "10111110100110101101000110111100", 
    41 => "10111101110101100100101000001001", 
    42 => "00111101111101111000000010111110", 
    43 => "10111101010110001100110000111010", 
    44 => "10111100110000110100110100010110", 
    45 => "10111101101010001010110110011001", 
    46 => "00111101110010100011101111100011", 
    47 => "00111101001001100101111000111111", 
    48 => "10111101101000001100010100111101", 
    49 => "10111101110010011000111010111110", 
    50 => "00111100010011010101011101111000", 
    51 => "00111110110000000011010000101110", 
    52 => "10111101110010100000100011111100", 
    53 => "10111101000110011000111110000100", 
    54 => "10111101101010011011111000011010", 
    55 => "10111100101010101010101100110100", 
    56 => "00111101000011100000010110000100", 
    57 => "10111101010000111010010101110000", 
    58 => "10111100100100001111010001001111", 
    59 => "00111101110101010001011001111100", 
    60 => "00111101001111101110101011100000", 
    61 => "10111101101111010011100100100000", 
    62 => "00111101101001000010101010100000", 
    63 => "10111101100110000001011001101101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiRg6 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiRg6 is
    component conv_2_conv_2_weiRg6_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiRg6_rom_U :  component conv_2_conv_2_weiRg6_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


