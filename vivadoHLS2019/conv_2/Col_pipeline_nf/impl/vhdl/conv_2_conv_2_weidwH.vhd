-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidwH_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidwH_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011010001100001100010001", 
    1 => "00111110000010010101000000111000", 
    2 => "00111110001011011100000101111100", 
    3 => "00111100100111000000001110110011", 
    4 => "10111110000111001110010101110010", 
    5 => "10111101000111110001011010010111", 
    6 => "10111110010100001110110110011010", 
    7 => "00111100010110100111111111010100", 
    8 => "00111101110000000111111101101111", 
    9 => "10111100000101101001101110001000", 
    10 => "10111101101100101111101010100001", 
    11 => "10111110011000001011011001000111", 
    12 => "10111110100000111010100100010000", 
    13 => "10111101001111110011101011110111", 
    14 => "00111110010011001111010101100011", 
    15 => "00111101101011011000001110000111", 
    16 => "00111101111100001011101001101000", 
    17 => "00111100111101000011011010111110", 
    18 => "00111110000011101111100001100110", 
    19 => "10111101010100010001101011001110", 
    20 => "10111110001000100110000111101011", 
    21 => "00111100110111110110010010100001", 
    22 => "00111101110001110010110111110001", 
    23 => "10111110000011011001110010100000", 
    24 => "10111110010000011011000110000101", 
    25 => "00111100100101100001010011110101", 
    26 => "10111101010011010100000111101000", 
    27 => "10111110011011110100010011000111", 
    28 => "00111101101011100000000101011100", 
    29 => "00111101100101001000111000001010", 
    30 => "10111110011010001000000110000001", 
    31 => "00111100110011101001110100011101", 
    32 => "10111110101011000100011111000001", 
    33 => "00111101111100001011000111111011", 
    34 => "00111101101000000011011010011111", 
    35 => "00111011111111011011000011001110", 
    36 => "00111101110001100101011001111011", 
    37 => "00111000101111001010110000000010", 
    38 => "00111101001101001110111100001011", 
    39 => "10111101101001100001110000101100", 
    40 => "00111100011110011111100000101010", 
    41 => "10111110011000011010100010001100", 
    42 => "10111101110111111011000000011000", 
    43 => "10111011111110010101000111010110", 
    44 => "00111101111111000101111001010000", 
    45 => "10111110011111100000100111010011", 
    46 => "00111110010000001001111100100010", 
    47 => "00111101101011111110101110011110", 
    48 => "10111101010011101100111100100110", 
    49 => "10111011100110101010101111100000", 
    50 => "10111101100011100110000110010101", 
    51 => "10111110000000000011000000110111", 
    52 => "00111101101110111101001011111111", 
    53 => "10111110100010000110010101000001", 
    54 => "00111101100010010000110111100000", 
    55 => "00111110001110101001011111100111", 
    56 => "00111101100000111101101111010101", 
    57 => "10111110000110110001100100011000", 
    58 => "00111101010110101011000011100010", 
    59 => "10111101110000011110101010010111", 
    60 => "10111110000111100011101101111101", 
    61 => "10111101101011101000100001100111", 
    62 => "00111100100111110010111110010011", 
    63 => "00111101001001011101001000001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidwH is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidwH is
    component conv_2_conv_2_weidwH_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidwH_rom_U :  component conv_2_conv_2_weidwH_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


