-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidaE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidaE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100111001011100101101110", 
    1 => "10111101100110001010000010011010", 
    2 => "10111110001001100110000001001100", 
    3 => "00111110000001100001100011010111", 
    4 => "10111101000001100011110011101101", 
    5 => "10111101100111001001001011101001", 
    6 => "00111100110011111111000001010111", 
    7 => "00111101011111110100100001011010", 
    8 => "00111101001111110110100010101100", 
    9 => "10111100001100110100111001011011", 
    10 => "10111110001110001110011100010000", 
    11 => "10111110010010111010000110100111", 
    12 => "00111100110100011111110100000001", 
    13 => "10111101010001000001110000101101", 
    14 => "00111101110111010000010011000000", 
    15 => "00111100110010100101101111010000", 
    16 => "10111101101100010100111000101100", 
    17 => "10111100111000001111110101001011", 
    18 => "10111110100101010011001000101011", 
    19 => "00111100101101000101001011010110", 
    20 => "10111110011100110111000111010000", 
    21 => "10111101100110000111111100001001", 
    22 => "10111100100001011111100111110011", 
    23 => "10111101110001111111111010111010", 
    24 => "10111011001000000111001110011000", 
    25 => "10111101011000110010111110011000", 
    26 => "00111101011100110001100111011000", 
    27 => "00111110010110000111010010111010", 
    28 => "00111101110011010000010010110001", 
    29 => "10111110000011011010111011000101", 
    30 => "10111101101001101011110110000000", 
    31 => "00111101111010110101000101100110", 
    32 => "10111101001001011111011110100111", 
    33 => "10111100100101100111011101011111", 
    34 => "00111101101101010001100111010010", 
    35 => "10111101110100011101111001011111", 
    36 => "10111110000110111000111101001010", 
    37 => "00111101100011001110010010111001", 
    38 => "00111110001000000110101000000010", 
    39 => "10111101000001100111011110000000", 
    40 => "00111100111100000101000010011100", 
    41 => "00111101011110001111001111000000", 
    42 => "00111101111111110010101010001010", 
    43 => "00111101010101111000011011100010", 
    44 => "00111110001111101001001101101010", 
    45 => "10111110001111111001001001011111", 
    46 => "00111101100111010010011100010111", 
    47 => "00111110000011011111010100110001", 
    48 => "00111101011111000101000001010000", 
    49 => "00111101101010001010000100100111", 
    50 => "10111101111101101111010100001000", 
    51 => "10111101011110111010111101111111", 
    52 => "00111110000100010000001010001000", 
    53 => "10111110001101000001101100110111", 
    54 => "00111101011010010001000101110001", 
    55 => "10111110011011010100011110001100", 
    56 => "10111101100110101000111000010001", 
    57 => "10111101101011001001010000010001", 
    58 => "10111101011000111111010001010110", 
    59 => "00111101001111111010011000000011", 
    60 => "10111101101011100110001111011101", 
    61 => "10111110010001110010011010010110", 
    62 => "00111101101010100110010001011110", 
    63 => "00111100000111011000011100010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidaE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidaE is
    component conv_2_conv_2_weidaE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidaE_rom_U :  component conv_2_conv_2_weidaE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


