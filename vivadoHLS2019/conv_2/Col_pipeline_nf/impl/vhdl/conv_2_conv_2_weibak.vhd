-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibak_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibak_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111010111101101000101111101010", 
    1 => "10111100000101101101000101101011", 
    2 => "00111100110101010011011010100001", 
    3 => "10111110000001101000101010000110", 
    4 => "00111101100100111110101001000001", 
    5 => "10111100101110110011000000000110", 
    6 => "00111110001011001001001111001111", 
    7 => "10111101001011010001001110001100", 
    8 => "00111101011100110100100110010010", 
    9 => "10111011011000111000001001100100", 
    10 => "00111101110111000111110111100001", 
    11 => "00111011111100011011111011101011", 
    12 => "00111101111010010011000001110100", 
    13 => "10111100111010001000101100110010", 
    14 => "10111101101001000110001011011100", 
    15 => "00111101000111000100111011100111", 
    16 => "00111101101001101010101011000000", 
    17 => "10111101101001110000011001000001", 
    18 => "10111101111101011100001100011010", 
    19 => "10111101110001111010001101010111", 
    20 => "00111101000100000000000010101011", 
    21 => "10111110000011100100111011011011", 
    22 => "10111110010001000010000010000110", 
    23 => "10111101001001101110101111100001", 
    24 => "00111101101011010001100100111010", 
    25 => "10111101010000100001100010111111", 
    26 => "10111101001011000011110111010111", 
    27 => "10111101011101101000000011101111", 
    28 => "10111101110111011101011111110100", 
    29 => "00111110000000000100010001001000", 
    30 => "00111101010101011000100010110100", 
    31 => "00111100000000111001001100001000", 
    32 => "10111101010111111110110001011010", 
    33 => "10111101011010001000100000101011", 
    34 => "00111101110010111001111111011101", 
    35 => "10111100101111110111100010000011", 
    36 => "00111101000100111100010100010011", 
    37 => "10111101011110011111111101011001", 
    38 => "00111100111000010101001111000111", 
    39 => "00111101100011001000100011010110", 
    40 => "00111101011101111000111111111000", 
    41 => "00111100110011010010100111011111", 
    42 => "00111100000000111010110111101010", 
    43 => "10111101111100001101110100111100", 
    44 => "00111100101110110111001100011100", 
    45 => "00111101010111011100100110100011", 
    46 => "00111101111111110000011111011100", 
    47 => "00111101111000010011011110100110", 
    48 => "00111100001010111100010100100100", 
    49 => "10111101100010010001111110111000", 
    50 => "00111110001000100111010000000000", 
    51 => "00111110001111001011000111111111", 
    52 => "10111101011001000110000000110110", 
    53 => "10111110010010100011110001111001", 
    54 => "10111110000100101111011100000100", 
    55 => "10111110001101011000110001001110", 
    56 => "10111101111000011011100011101001", 
    57 => "00111100100010100011001000110011", 
    58 => "10111101000101111000101101100110", 
    59 => "00111101110100010001101011010100", 
    60 => "10111110000100100110001010001010", 
    61 => "10111110001000000000010001111101", 
    62 => "10111100110100011111011111010001", 
    63 => "00111011100011110011110111001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibak is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibak is
    component conv_2_conv_2_weibak_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibak_rom_U :  component conv_2_conv_2_weibak_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


