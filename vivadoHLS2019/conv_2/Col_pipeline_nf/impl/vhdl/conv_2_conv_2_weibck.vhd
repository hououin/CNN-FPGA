-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibck_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibck_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111010101001001100001010101101", 
    1 => "00111101100011011001010101011000", 
    2 => "10111110011110000011111010010011", 
    3 => "00111110010011011111001011000110", 
    4 => "00111110000111110000001100111001", 
    5 => "00111101010110100001101100110001", 
    6 => "00111110000011000011111100011011", 
    7 => "00111100101111101110010001000000", 
    8 => "00111101111010101110010011110101", 
    9 => "10111110000100111100110111110010", 
    10 => "00111110010110100101100010101110", 
    11 => "10111101111011001001100010010000", 
    12 => "00111101000101110000110100111100", 
    13 => "00111110000001011000001111000100", 
    14 => "00111101101100010110001101111001", 
    15 => "00111101011001111111101011110101", 
    16 => "00111101101000101101100001011101", 
    17 => "10111011111111001100000110010101", 
    18 => "00111100110000010010110011101111", 
    19 => "10111101001111100000010101111010", 
    20 => "00111110000011100111110010010010", 
    21 => "00111110011010011110011110100001", 
    22 => "10111101000110110000000011101101", 
    23 => "00111101000101000001000000011100", 
    24 => "00111100101000000111001100101101", 
    25 => "00111101101101110100110001000001", 
    26 => "10111100010101110011011111111101", 
    27 => "10111101100101110100001010001101", 
    28 => "00111101001101100000101101011101", 
    29 => "10111110100101011110101011101001", 
    30 => "10111101100001001111111111010000", 
    31 => "10111110000110001010110111011111", 
    32 => "00111110000111000010010111100000", 
    33 => "10111110000010110110101110100101", 
    34 => "00111101001110100010100111111111", 
    35 => "10111100110011100101100001010101", 
    36 => "10111110001101010100000100101101", 
    37 => "00111110001010110001001111010010", 
    38 => "10111011101000111001011111111100", 
    39 => "00111100000000101100011111111110", 
    40 => "10111110001001000111110111101010", 
    41 => "00111101100001111101000100000100", 
    42 => "00111100101111011100001111001000", 
    43 => "00111101101101001110110011010100", 
    44 => "00111101001001100001010011010110", 
    45 => "00111101101100100000111100111111", 
    46 => "10111100111010101111111001100010", 
    47 => "10111110000101001001000111000000", 
    48 => "10111101101011101110111010100001", 
    49 => "10111101100001011111101001101001", 
    50 => "00111100100010010111101011001100", 
    51 => "00111110100011100101100101000010", 
    52 => "10111110000011101111000010101000", 
    53 => "10111100110011101110101001001001", 
    54 => "10111101110000110010110001110001", 
    55 => "10111110100001111010011111101001", 
    56 => "00111101011010001110110011000000", 
    57 => "10111101000101111011111000010000", 
    58 => "00111010001011110100111000101110", 
    59 => "00111100110100101100010000100010", 
    60 => "00111101101100101101100101011100", 
    61 => "00111101100100001101000010010000", 
    62 => "10111101011011111011110100010111", 
    63 => "00111101100001110100001000101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibck is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibck is
    component conv_2_conv_2_weibck_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibck_rom_U :  component conv_2_conv_2_weibck_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


