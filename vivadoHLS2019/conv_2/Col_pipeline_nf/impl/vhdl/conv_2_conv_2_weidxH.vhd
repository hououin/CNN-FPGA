-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidxH_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidxH_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110111011100111000011010", 
    1 => "10111101111100001011101011010101", 
    2 => "00111101001101110010001100000010", 
    3 => "10111100100010110011000111010000", 
    4 => "10111101100011100100000010011101", 
    5 => "00111101101010010111111100010101", 
    6 => "10111110000011001100001000010110", 
    7 => "00111101101001011010111111010011", 
    8 => "00111110010011001110000010000001", 
    9 => "00111110010011000010110101001000", 
    10 => "00111101000001100110111000111011", 
    11 => "10111101110001101111101010000111", 
    12 => "00111101111100010110100011111101", 
    13 => "10111110100101001011101010111111", 
    14 => "00111110101011100011101101010111", 
    15 => "00111110101100101000111110110111", 
    16 => "10111100100111111010001000101000", 
    17 => "00111101110101111010100011001010", 
    18 => "10111110000101000100110110101010", 
    19 => "10111110001010100010010010000000", 
    20 => "00111100011111001001111001110101", 
    21 => "00111101000011010111100111000100", 
    22 => "10111110101001110111111010010001", 
    23 => "10111101101101100101010000111000", 
    24 => "10111110010101111011001011110111", 
    25 => "00111101110101111000100111000110", 
    26 => "10111101101100011011010001110100", 
    27 => "10111110010001110110001001000110", 
    28 => "00111110000000000001001011111100", 
    29 => "00111011101110111011010000010101", 
    30 => "10111110010000100111001010110011", 
    31 => "10111101111111111100001000000001", 
    32 => "00111010010010101111011110010110", 
    33 => "00111110010000110001111101110100", 
    34 => "00111110101100001010110100011000", 
    35 => "10111100010001011011011110000101", 
    36 => "00111100101101011000011001010010", 
    37 => "10111101110110111010011100010011", 
    38 => "00111110000101110010001111100100", 
    39 => "00111101111100110000111011100000", 
    40 => "10111101000011010001010010101000", 
    41 => "10111110110000111101100000010011", 
    42 => "10111110101101111000101101000011", 
    43 => "10111101110011000101001100001110", 
    44 => "00111110000100010001001111111110", 
    45 => "10111010111010110100011010001000", 
    46 => "00111110101100011111100111011001", 
    47 => "00111110010111100111010110001010", 
    48 => "10111110011010000000001111010010", 
    49 => "10111101000001000010101111010011", 
    50 => "00111101010110110100000100010110", 
    51 => "10111110100011010000101010011101", 
    52 => "00111101100010011001101011101010", 
    53 => "10111110101100111000111100101010", 
    54 => "00111101111100000111100010111001", 
    55 => "00111110001011111000101010101110", 
    56 => "10111011001110010011111010010100", 
    57 => "10111110010001100101010100100011", 
    58 => "00111101011111101100000110000100", 
    59 => "10111110100011001100111111001101", 
    60 => "10111110101010110110100101110010", 
    61 => "10111101000100010000000101010000", 
    62 => "00111100111010011111010101010110", 
    63 => "00111101000110000010001101101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidxH is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidxH is
    component conv_2_conv_2_weidxH_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidxH_rom_U :  component conv_2_conv_2_weidxH_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


