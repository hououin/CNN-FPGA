-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiibs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiibs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011001100011111011110001", 
    1 => "00111110000111001110100110101110", 
    2 => "00111101010101110011111100100011", 
    3 => "10111100100111111110000110010011", 
    4 => "10111101101101111001001100110110", 
    5 => "10111101111011101111000001100111", 
    6 => "10111101001010110111110111011011", 
    7 => "00111100110011010001000111010011", 
    8 => "10111110100100010101101011000010", 
    9 => "10111101000101100111000111110000", 
    10 => "10111110100101011101001101100111", 
    11 => "00111110010110010101010110011100", 
    12 => "00111101110101101000000110001000", 
    13 => "00111011110110011101010001011110", 
    14 => "10111011011011111100111100010000", 
    15 => "10111110101000010001001001101000", 
    16 => "00111101111110100011010110111011", 
    17 => "10111100110110110110000101011000", 
    18 => "00111110001110111011010100011100", 
    19 => "00111101110100110011011110100110", 
    20 => "00111110001001111100100011101100", 
    21 => "10111110000101011010101101101010", 
    22 => "10111101011000101011110000111001", 
    23 => "00111101100001111100111110101100", 
    24 => "10111101100000010101111000111110", 
    25 => "10111110101100010000100100111110", 
    26 => "10111110101101100110111110101000", 
    27 => "00111110011011110011100011010010", 
    28 => "10111101100111010101011111010000", 
    29 => "10111110011011101000000000001000", 
    30 => "00111110000101100101110110100110", 
    31 => "10111110010110001110110101101010", 
    32 => "00111100111100000110001100011010", 
    33 => "00111110010010110010100010000100", 
    34 => "00111010101010010011101000110000", 
    35 => "00111110001001001011101010101100", 
    36 => "10111010111001011011110100010101", 
    37 => "10111101111110100010101010100000", 
    38 => "00111101110000100001101010000000", 
    39 => "10111110100001100100000111101000", 
    40 => "00111101111100110100000011111110", 
    41 => "10111110001111011111101110100111", 
    42 => "00111110010010101111011111001100", 
    43 => "10111100100100010111101101101000", 
    44 => "00111100010000011100011110001100", 
    45 => "10111100111010101101001010110010", 
    46 => "00111110000001011100000001100010", 
    47 => "00111100100101010001010001111010", 
    48 => "00111110100000011100111101001100", 
    49 => "10111110110100100100100010111110", 
    50 => "10111110001101101001001101010101", 
    51 => "10111110010101000001111110111111", 
    52 => "10111101111111100101010111110111", 
    53 => "00111101110011011100001100111010", 
    54 => "10111110000110011001101111110101", 
    55 => "00111101100010101100001011101001", 
    56 => "00111100100011101001100111100110", 
    57 => "00111101111001100111000011001100", 
    58 => "10111101011101001001010010111101", 
    59 => "00111101111001010101001101011101", 
    60 => "00111110000111001000101010000010", 
    61 => "10111110100110011010110111111001", 
    62 => "10111101101011111101010011111011", 
    63 => "10111110010011010011000001100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiibs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiibs is
    component conv_2_conv_2_weiibs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiibs_rom_U :  component conv_2_conv_2_weiibs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


