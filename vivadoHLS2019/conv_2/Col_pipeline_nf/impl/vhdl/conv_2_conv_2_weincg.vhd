-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weincg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weincg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010111000011000000001", 
    1 => "10111110010110010111101110100100", 
    2 => "10111101100011101101110100000110", 
    3 => "00111101000010010100001101010111", 
    4 => "10111100111101010010001011000000", 
    5 => "10111110001001100001110000110011", 
    6 => "10111101011101001010000100101010", 
    7 => "10111110000110111010011011110110", 
    8 => "00111110001111010101111101101111", 
    9 => "10111110010001101001000000011001", 
    10 => "10111101011011010011111011001000", 
    11 => "10111110010001011011100001000110", 
    12 => "10111101010101010010110011011011", 
    13 => "10111101000101000001011111010000", 
    14 => "00111110011001011010100001100111", 
    15 => "10111101010000011010001011010010", 
    16 => "10111110011001001111100110101100", 
    17 => "00111110000100000110000010001100", 
    18 => "00111101101111111010010101101000", 
    19 => "10111011100010011111011100001010", 
    20 => "10111110010011110111001100100111", 
    21 => "10111100100100011100100010101110", 
    22 => "10111110001101111000001110101011", 
    23 => "10111110000100000101010011001100", 
    24 => "10111101001110001011111111101110", 
    25 => "00111110000000101111010000110001", 
    26 => "00111100011001011010001110110011", 
    27 => "00111101110110001011110011010011", 
    28 => "00111100110010011010011000011100", 
    29 => "00111101101101100100011010000100", 
    30 => "10111101010011100110110111111100", 
    31 => "10111100101011001100101001101100", 
    32 => "10111101000101110001001010011111", 
    33 => "10111110011110111000101110110110", 
    34 => "10111101101101110000100001010110", 
    35 => "00111110001110010100110110111100", 
    36 => "10111110001001100110100001011110", 
    37 => "00111100000000110010000000000011", 
    38 => "00111101010010011010011000000101", 
    39 => "00111100111110110011000101001011", 
    40 => "00111100110101001111001110000000", 
    41 => "00111101100110111110011101001101", 
    42 => "10111110010100111000010101001000", 
    43 => "00111101111101001011001001101101", 
    44 => "00111100101101010010011011100100", 
    45 => "10111110001111100101100010000100", 
    46 => "10111100100000010100111111000101", 
    47 => "00111110000001111111101000000010", 
    48 => "10111110011001010101100100001111", 
    49 => "10111110111001110011111101110001", 
    50 => "10111110011111100001110100010101", 
    51 => "10111101010110110101011111011011", 
    52 => "10111110101000010100010001101110", 
    53 => "00111110000011001011001111101000", 
    54 => "00111101011001101000100000010101", 
    55 => "10111110010101010111000011111011", 
    56 => "00111101000110001010111100111011", 
    57 => "10111101111011101100011010100000", 
    58 => "00111101100100011101101110010111", 
    59 => "10111100101100011111001000001110", 
    60 => "00111101100001110000101101111000", 
    61 => "00111101101010000110001011000111", 
    62 => "00111101111011111001100001011110", 
    63 => "00111101100110111100000111101110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weincg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weincg is
    component conv_2_conv_2_weincg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weincg_rom_U :  component conv_2_conv_2_weincg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


