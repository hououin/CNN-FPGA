-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib9t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib9t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000111110111101010000110", 
    1 => "10111101000011100101001110110011", 
    2 => "10111101101010001101000100010011", 
    3 => "10111101111010100100110011101111", 
    4 => "00111100100101100101011000100001", 
    5 => "10111101000110101111100011101010", 
    6 => "10111110011000111100111010110100", 
    7 => "10111101101010010110000110100110", 
    8 => "10111110001001101000000111011111", 
    9 => "00111100101010000001100000101111", 
    10 => "10111101011000010011110011000110", 
    11 => "10111100100011111011101101100111", 
    12 => "10111110000010011011000101100011", 
    13 => "10111110011101010101100011000000", 
    14 => "00111101010110111001000010100111", 
    15 => "10111101000100011101101001010010", 
    16 => "10111110100001111010011110111010", 
    17 => "10111101100100101110100011100001", 
    18 => "10111110001101011110001001101111", 
    19 => "00111101010001111101110110101101", 
    20 => "10111110010001101100000001110101", 
    21 => "10111110011011000000110111001010", 
    22 => "10111110111000111000111110111101", 
    23 => "00111110000011000111111010100010", 
    24 => "10111110010010110110110100001000", 
    25 => "00111101011111001001000110001110", 
    26 => "00111010000110001010010101100110", 
    27 => "00111101100110110101011110010001", 
    28 => "00111101100010110110000010111000", 
    29 => "00111101011101111011110101111110", 
    30 => "10111101100001101011110100111110", 
    31 => "00111110001101111111000001000010", 
    32 => "10111101101001101101101011001001", 
    33 => "10111110100110010000101001110001", 
    34 => "00111011100010110110010010001001", 
    35 => "00111101110011111000000001011011", 
    36 => "00111100101001111000011000000001", 
    37 => "00111101100001010111001011111001", 
    38 => "10111101001010010101101011010010", 
    39 => "10111100010001001110000100101100", 
    40 => "00111100110111011100000111111111", 
    41 => "10111011010110010001111000011010", 
    42 => "10111110000000000110000010110100", 
    43 => "10111011000010011001000111000100", 
    44 => "10111011111001000101000100101000", 
    45 => "00111100111011001010100000000001", 
    46 => "00111101010100101100110011110001", 
    47 => "00111101101111100000111011110001", 
    48 => "00111110001101101010011010111100", 
    49 => "10111101110101111010000101001100", 
    50 => "10111110101111100100001111111100", 
    51 => "10111100110000100100000111100110", 
    52 => "10111101101100100111001011110111", 
    53 => "00111110000111000100011011000110", 
    54 => "00111101111110111000000001111101", 
    55 => "10111110001111101111000111100011", 
    56 => "10111100111110100110110100101010", 
    57 => "00111100100011011110010001100110", 
    58 => "00111101100101001110000100101010", 
    59 => "10111101001110100011110000000101", 
    60 => "10111110101110011110101110011101", 
    61 => "10111110010101111011111101110100", 
    62 => "10111100100111110010011101100100", 
    63 => "10111101111000100111010000001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib9t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib9t is
    component conv_2_conv_2_weib9t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib9t_rom_U :  component conv_2_conv_2_weib9t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


