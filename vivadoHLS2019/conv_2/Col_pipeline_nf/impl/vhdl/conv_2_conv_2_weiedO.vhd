-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiedO_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiedO_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101111011110101010000110", 
    1 => "00111100001110110101011010100011", 
    2 => "10111101100011010000110001010100", 
    3 => "00111100000101000001000101110111", 
    4 => "10111101111011101101011101010101", 
    5 => "00111101100100001001100110001001", 
    6 => "10111110010101010011001010000101", 
    7 => "00111101100110010110101001110110", 
    8 => "00111100101111111110011110000111", 
    9 => "00111100000111111011111101101100", 
    10 => "10111011011110011111011101101011", 
    11 => "10111101101110000100001011101101", 
    12 => "10111101111010100101111100001101", 
    13 => "10111100010110001110010100101100", 
    14 => "10111110000111001010000000001101", 
    15 => "10111101011101101110001101111111", 
    16 => "00111101101000000000001011100111", 
    17 => "00111110000100110110100011100010", 
    18 => "00111110001000001011100100100000", 
    19 => "00111101011111110101101111001110", 
    20 => "10111110011111100000000010011101", 
    21 => "10111110100110001001110011001010", 
    22 => "00111101111100011001100101000111", 
    23 => "10111110001001100000010101110010", 
    24 => "10111110011001100111110100100100", 
    25 => "00111101000100000110001101100011", 
    26 => "00111110001011110110000000110010", 
    27 => "10111100110000000111111100111001", 
    28 => "10111101101010011011101100000011", 
    29 => "00111101000010010001101001100011", 
    30 => "00111101110101100000011111110101", 
    31 => "10111101001001111001000111010111", 
    32 => "00111101000010010001001100101001", 
    33 => "10111100101111110001100110000111", 
    34 => "00111101100110110111001001110111", 
    35 => "10111110011010000010101110011101", 
    36 => "10111110000001111010111101010001", 
    37 => "10111110100010000101100101001110", 
    38 => "10111110001001110111000111100110", 
    39 => "00111101101011100110000010001111", 
    40 => "10111101101000101101100011101110", 
    41 => "10111100100110001101110001101100", 
    42 => "10111101001110100011110000011100", 
    43 => "10111101110010101000111011010000", 
    44 => "10111110000100110110000101100000", 
    45 => "10111101000100111100111110100110", 
    46 => "10111110000010111101000001101001", 
    47 => "10111101100000111110110001100010", 
    48 => "00111101110101011100101111000000", 
    49 => "00111100001011001011001010101100", 
    50 => "10111110000010010000110011010100", 
    51 => "10111101000110000111010011010111", 
    52 => "10111101100001011011101011111011", 
    53 => "00111101011000101000001110101111", 
    54 => "10111110011011110100011001010111", 
    55 => "00111101110000100011000000100100", 
    56 => "00111101100010001100011110010010", 
    57 => "10111101000101110000001000111111", 
    58 => "10111110100110010000111111001100", 
    59 => "00111101100010011100110111010110", 
    60 => "10111100100110111100011001010011", 
    61 => "10111110000111010000101001011010", 
    62 => "00111110000101110110010011000100", 
    63 => "00111101101111011010110011001101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiedO is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiedO is
    component conv_2_conv_2_weiedO_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiedO_rom_U :  component conv_2_conv_2_weiedO_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


