-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidKJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidKJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110011110010100101010111", 
    1 => "00111101010111001101100111110000", 
    2 => "10111100100100110000010000001110", 
    3 => "00111011010010010101110110000000", 
    4 => "10111011001110111011101110100011", 
    5 => "10111110001000110011001101011110", 
    6 => "10111110010100011100111101001000", 
    7 => "00111101100001011101001001011001", 
    8 => "00111101100001011000000000101000", 
    9 => "00111101111110000010100110110000", 
    10 => "10111011111000111010000001100100", 
    11 => "10111101110010001101000001011111", 
    12 => "10111110000101010111011000011100", 
    13 => "00111101011111001100111000101011", 
    14 => "00111101110010010000000011101010", 
    15 => "00111110011010111010000000001001", 
    16 => "00111100011001101101000111100111", 
    17 => "10111101110101101100110010000011", 
    18 => "00111011001101011011101110011111", 
    19 => "10111110000100001101100010100100", 
    20 => "10111101110001111111101000111000", 
    21 => "10111101111001101010111001011111", 
    22 => "00111110000011100100011111111101", 
    23 => "10111110100010010000001111001011", 
    24 => "10111101101010111101011100110001", 
    25 => "10111011001001100000111110101110", 
    26 => "10111101010111000011100100010010", 
    27 => "10111110100111111001101011000101", 
    28 => "00111101001111011111110000111011", 
    29 => "00111101100111110010010001110100", 
    30 => "10111110011001000000111110110000", 
    31 => "10111100100001110010111001001010", 
    32 => "10111110100011100011010101101111", 
    33 => "00111100000000011010001110001110", 
    34 => "10111100110110111001010111110111", 
    35 => "10111101100100010000100011000010", 
    36 => "10111101110110110000011000011110", 
    37 => "10111101100000001010111001010011", 
    38 => "10111101011010001100111110000000", 
    39 => "00111011111010010100010001010000", 
    40 => "10111110000001000010100010111011", 
    41 => "10111110011100110001100101011000", 
    42 => "10111101010001011010111111100110", 
    43 => "00111101101010011100001101101100", 
    44 => "00111110001000111011111010000000", 
    45 => "10111011101110000011100111111000", 
    46 => "00111101011011010111001110000110", 
    47 => "10111011110101100101011110001011", 
    48 => "10111100100000101110111100001000", 
    49 => "00111101100100011100111101100100", 
    50 => "10111110010101000111111010100111", 
    51 => "10111101110111010110001100000011", 
    52 => "10111101100000100000111110011000", 
    53 => "10111110110111111001100111011000", 
    54 => "10111101011111010001010100101010", 
    55 => "00111100000111000001110000100110", 
    56 => "10111101110101110111100100000100", 
    57 => "10111101110111111110101001010011", 
    58 => "10111110010000001011100001001001", 
    59 => "10111101011111101010000011101000", 
    60 => "10111110011101100011001110011010", 
    61 => "10111101100011101111110000101110", 
    62 => "00111110000000110011111101110111", 
    63 => "10111100010000010100101110110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidKJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidKJ is
    component conv_2_conv_2_weidKJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidKJ_rom_U :  component conv_2_conv_2_weidKJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


