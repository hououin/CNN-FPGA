-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicWB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicWB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000100100010001111010011", 
    1 => "10111101010001010111000011010100", 
    2 => "10111101011110010000001010011000", 
    3 => "10111100100000101000101111011111", 
    4 => "10111110100011111011001100111101", 
    5 => "00111101010010110101011100110101", 
    6 => "10111110111100010101111011110110", 
    7 => "10111110010011101001000001010011", 
    8 => "10111110100011010001110001101001", 
    9 => "10111101010011101001000001011001", 
    10 => "00111101101100010010000101000110", 
    11 => "00111100111010011000111100101101", 
    12 => "10111110110001101010100000000000", 
    13 => "10111101110101101110111000111110", 
    14 => "10111110100101110110100101001010", 
    15 => "10111110011111110100111010111100", 
    16 => "10111110000100111101100011100110", 
    17 => "10111010101011011100000011101111", 
    18 => "00111101111100001010001101001000", 
    19 => "10111110101011001110110011001010", 
    20 => "00111101000000111010100001100000", 
    21 => "10111101100010000110011100101011", 
    22 => "00111110001110100100100011011100", 
    23 => "10111111000010000111011110111010", 
    24 => "10111110100111010110101101111101", 
    25 => "10111100101110111100000001100010", 
    26 => "00111101011011001111100010000101", 
    27 => "10111100000111010010011010111111", 
    28 => "10111110100011000011000000011110", 
    29 => "00111101110101100001111111101010", 
    30 => "00111101010111011010000110111001", 
    31 => "10111110001100101011110110010000", 
    32 => "00111101110101100001101010111111", 
    33 => "00111101000011001011011011000010", 
    34 => "00111101100101001001011000010000", 
    35 => "10111101011100111111000101001111", 
    36 => "00111100100011011111010100111011", 
    37 => "10111101101111101010100100011000", 
    38 => "10111110110001110010101100100010", 
    39 => "10111100100100110110000110010101", 
    40 => "10111110001000101111011100100000", 
    41 => "10111101010100011100111000000011", 
    42 => "10111110100101011000000100101001", 
    43 => "00111100010000110011101010000100", 
    44 => "10111110100010100101011101011011", 
    45 => "00111110011101110100110110101000", 
    46 => "10111110111001100101011000010000", 
    47 => "10111110101000110101111011110101", 
    48 => "10111110110100101101110100011011", 
    49 => "00111101000001000111011101101001", 
    50 => "10111110011001100000000001010111", 
    51 => "10111100000111011000000100010011", 
    52 => "10111110001010101010111101011000", 
    53 => "00111110000101101010001101110010", 
    54 => "10111110000010010110101110110001", 
    55 => "10111101011011110110001001100110", 
    56 => "00111101110110100011101000110100", 
    57 => "10111110100111101011111100010001", 
    58 => "10111101101100100101000001000000", 
    59 => "10111101100011111001100010010100", 
    60 => "00111101110111011010000000011011", 
    61 => "10111101000111001001111110101001", 
    62 => "00111110000011000110010001010111", 
    63 => "00111110000101111100101011100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicWB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicWB is
    component conv_2_conv_2_weicWB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicWB_rom_U :  component conv_2_conv_2_weicWB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


