-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weitde_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weitde_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010010101111110100111", 
    1 => "00111101000111001011100011010100", 
    2 => "00111110000010010111000111000001", 
    3 => "00111100100111101110101110100001", 
    4 => "00111101011111100010100001010100", 
    5 => "00111101110011000100100110101100", 
    6 => "00111011010101000010110111010010", 
    7 => "00111101000110111110000100000011", 
    8 => "10111101100111100100111100111101", 
    9 => "00111101101001001110000000100110", 
    10 => "10111101110000000010110001110110", 
    11 => "00111101101101110001001100000000", 
    12 => "10111110000001100000011101111010", 
    13 => "10111101111111000000011011000011", 
    14 => "10111100001110010101111111110111", 
    15 => "10111100110000101010111010101000", 
    16 => "00111011111110011011011011000100", 
    17 => "10111101101111010001111111111101", 
    18 => "10111100111111010001001000000000", 
    19 => "10111100101111000011011011110010", 
    20 => "10111101000010011000001001111011", 
    21 => "10111110010011100101101100111110", 
    22 => "10111110010100110101001110110101", 
    23 => "00111101101100110001111010001101", 
    24 => "10111101110011000101111101111110", 
    25 => "00111110001110110110100111010001", 
    26 => "10111101000000011110001101001100", 
    27 => "10111101101010010111100011111010", 
    28 => "00111101010011101100000010010110", 
    29 => "00111100011111011001001110001010", 
    30 => "10111110011001010100111001011100", 
    31 => "00111100110010101000110011001001", 
    32 => "10111100000111000000101001001110", 
    33 => "10111101111000011100000111010101", 
    34 => "00111101110101101001001011001100", 
    35 => "00111110001100000100111001000111", 
    36 => "00111101101010100100101111011001", 
    37 => "00111100101101101100010011100110", 
    38 => "10111101011001111010001100000000", 
    39 => "00111101100001001001000111010111", 
    40 => "10111110010100101010110010011011", 
    41 => "00111010100000001010111110011101", 
    42 => "00111101101011111001001110011011", 
    43 => "00111101001000110001011000010010", 
    44 => "10111100001110001100111101011100", 
    45 => "10111100100000001000110000110001", 
    46 => "10111101010010111001111100001010", 
    47 => "10111101001111000000110011010000", 
    48 => "00111101111010010011101000110100", 
    49 => "10111101110001011011100011011100", 
    50 => "10111011110101111101000101101011", 
    51 => "10111101100001011011000000010010", 
    52 => "10111110010000111010011100001110", 
    53 => "00111101110011011000010110100100", 
    54 => "00111101001001001101111001110010", 
    55 => "10111110100000010100110101110000", 
    56 => "10111100101001000000011100011011", 
    57 => "00111101110011001101011111001011", 
    58 => "10111110000000111110010100001110", 
    59 => "10111110000110111000110111110101", 
    60 => "10111101110001111011010010011100", 
    61 => "10111100011001101100111010101111", 
    62 => "00111110000110000111101010110000", 
    63 => "10111101011100000000110011010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weitde is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weitde is
    component conv_2_conv_2_weitde_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weitde_rom_U :  component conv_2_conv_2_weitde_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


