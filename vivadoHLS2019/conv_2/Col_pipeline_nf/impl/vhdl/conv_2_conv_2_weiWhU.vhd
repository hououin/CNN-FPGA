-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiWhU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiWhU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111010000111011100111100", 
    1 => "00111101101000110110001111001100", 
    2 => "10111100100001111000100011101000", 
    3 => "10111101001010110101001011111011", 
    4 => "00111101100010010111101110111000", 
    5 => "10111101000100000111011000110010", 
    6 => "00111110000001100000110000010100", 
    7 => "10111110000000011010010111100100", 
    8 => "00111110000111000010111011011101", 
    9 => "00111110000001110010100011011010", 
    10 => "00111110000100101001000010001110", 
    11 => "10111101101110110111110100010010", 
    12 => "00111110001100111000011011101101", 
    13 => "10111100010101111110011101010001", 
    14 => "00111100100111011011100101000000", 
    15 => "10111100000011111110110110000010", 
    16 => "10111101110011101001010111100011", 
    17 => "10111101010010001010000111100010", 
    18 => "10111101110110001111000011110001", 
    19 => "10111100001010111001111000010100", 
    20 => "10111100010000111110010111001100", 
    21 => "10111101101101110101000011000010", 
    22 => "10111110100000111000100100111101", 
    23 => "10111110101010100011000001100001", 
    24 => "00111101101000111011011000001000", 
    25 => "00111100010000101100110011101011", 
    26 => "10111101010111101000101010101000", 
    27 => "10111101110010000111001110100101", 
    28 => "10111011101000100111111110000010", 
    29 => "00111100100001101111100000110101", 
    30 => "10111101000101111111001111101111", 
    31 => "10111100001011001000110011011101", 
    32 => "00111110000011000000011011001110", 
    33 => "10111110000101101111000110111000", 
    34 => "10111101010011010010100101011110", 
    35 => "00111100110110111001001001101001", 
    36 => "10111101101000011100010011000001", 
    37 => "10111101000111110010110000110110", 
    38 => "00111101110010101001011111101100", 
    39 => "00111110001001100111010110110110", 
    40 => "00111110000011001100100111000100", 
    41 => "00111100000110010110110010100110", 
    42 => "10111100000010000111010010011111", 
    43 => "10111101111100111000100101111000", 
    44 => "00111010111110110110100101011000", 
    45 => "10111100011001001101010001010110", 
    46 => "00111101000010100110111001000000", 
    47 => "00111100100001100100110110100100", 
    48 => "00111101111001101111001010111011", 
    49 => "10111101011110110001011100000001", 
    50 => "00111101111101101101010111000101", 
    51 => "00111110011110010011000111000010", 
    52 => "10111101011101110101001000010010", 
    53 => "10111110101010001110001001101101", 
    54 => "10111100101001111011110110110111", 
    55 => "10111101111010010110100111101010", 
    56 => "10111101111101000110101110100001", 
    57 => "10111101100101101110001000011110", 
    58 => "00111101101111010000100001000010", 
    59 => "00111101000011111101100000011011", 
    60 => "10111101010011100011111100111000", 
    61 => "10111110000001101101101110000111", 
    62 => "00111101000000100111000101100010", 
    63 => "10111101000110000100111111011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiWhU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiWhU is
    component conv_2_conv_2_weiWhU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiWhU_rom_U :  component conv_2_conv_2_weiWhU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


