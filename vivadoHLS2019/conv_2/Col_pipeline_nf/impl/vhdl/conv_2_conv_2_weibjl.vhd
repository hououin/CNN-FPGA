-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibjl_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibjl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000100010000010110111101", 
    1 => "10111110000010111111101110101100", 
    2 => "10111110000011010011110101111101", 
    3 => "10111101100101110100100011110001", 
    4 => "00111101101100000101000101111011", 
    5 => "10111101010000001010001111101111", 
    6 => "00111101110001001110101111101000", 
    7 => "00111101000011100110111111100111", 
    8 => "00111101101001100011011110101001", 
    9 => "10111101110010101001100001011111", 
    10 => "10111101011000100000110001100001", 
    11 => "00111101010000001001000000001011", 
    12 => "10111100110110101010111101101011", 
    13 => "00111011100110100010110011101011", 
    14 => "00111101101000001100001010100001", 
    15 => "00111101100001001000011010000100", 
    16 => "00111101100101101100111100101101", 
    17 => "10111011101100000010101110100000", 
    18 => "10111100000101110000000010101101", 
    19 => "10111101101110101010001010000011", 
    20 => "10111110001011000011010111111010", 
    21 => "00111100111101001100110010010110", 
    22 => "10111101101100110001101100110100", 
    23 => "00111101010110111101101010101010", 
    24 => "10111010100001111001000111111100", 
    25 => "00111101101000000110100011011101", 
    26 => "10111100001110100000011100110001", 
    27 => "10111110101011101010100101110111", 
    28 => "00111100100100100110001000000010", 
    29 => "10111101010011111101010101101011", 
    30 => "00111011101101100101100000001110", 
    31 => "10111110101111011001110010110001", 
    32 => "00111011010010110011100000001100", 
    33 => "10111101111111111110010100111000", 
    34 => "10111101101101101100001111100011", 
    35 => "10111101111000100011000111000011", 
    36 => "10111110001001001000000111111110", 
    37 => "10111101111010011010000111100001", 
    38 => "00111101000101100001001001110100", 
    39 => "00111101110101011000001011001100", 
    40 => "10111110010010010111100101100101", 
    41 => "10111101000101010000111110010011", 
    42 => "00111101111000010011111001111111", 
    43 => "10111011101001110011010001010001", 
    44 => "00111101100101111100100001111101", 
    45 => "00111101001101010010101101100101", 
    46 => "00111101100111000101101001101001", 
    47 => "10111101101110101111110000110001", 
    48 => "10111100101001110111110000010101", 
    49 => "10111110011011010000000001110000", 
    50 => "10111101000011011001011000110000", 
    51 => "10111100111110001110101000000001", 
    52 => "10111110010010011011110100111100", 
    53 => "10111101100110010100001101001011", 
    54 => "10111110000111110010001100100001", 
    55 => "10111101010010010000011100101110", 
    56 => "10111101110000000110011001101011", 
    57 => "00111101011110011011001010100110", 
    58 => "10111100111111010101101011011100", 
    59 => "00111101101110000110100000111101", 
    60 => "00111101001011001101000101100001", 
    61 => "10111101101010001111001001100100", 
    62 => "10111101011011000011101010000000", 
    63 => "00111101011011010110011110000100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibjl is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibjl is
    component conv_2_conv_2_weibjl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibjl_rom_U :  component conv_2_conv_2_weibjl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


