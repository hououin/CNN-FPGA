-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic5D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic5D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100101010000000100001011", 
    1 => "10111110100111001100110110000011", 
    2 => "10111101010101000010111000010111", 
    3 => "00111100110001101011111000010011", 
    4 => "00111011110000011010111101011001", 
    5 => "10111100111011010110100100011110", 
    6 => "10111110001111100100001100100000", 
    7 => "00111101010100101000111110110101", 
    8 => "00111101101011100111100100010001", 
    9 => "00111101100100010110000000111101", 
    10 => "10111011111110010001000011000111", 
    11 => "00111101101101110001101010000011", 
    12 => "10111101111110111010001111011100", 
    13 => "10111110000010001010000100100011", 
    14 => "00111101100100101101111000110110", 
    15 => "00111101000110001111000010100111", 
    16 => "00111101001001010000100111110111", 
    17 => "00111100110000110111111010111101", 
    18 => "10111110000010100100001110010101", 
    19 => "00111100101100111111101110111101", 
    20 => "10111110001011011000000101000001", 
    21 => "10111110100001111010001101000001", 
    22 => "10111101100100101111010011101010", 
    23 => "10111100101000111010101010101000", 
    24 => "10111101101110000110110010001101", 
    25 => "00111100000111001000001000010101", 
    26 => "00111100001110011010111001100000", 
    27 => "00111101101101010100011111100111", 
    28 => "10111011110000010011110001111101", 
    29 => "10111110011100110101010001101001", 
    30 => "00111110010000100100011110110100", 
    31 => "10111101100011001001101011010000", 
    32 => "00111110000010111000101101111100", 
    33 => "00111110011011111110001010010110", 
    34 => "00111101110101010111000000110010", 
    35 => "10111110000100011101011011111111", 
    36 => "10111110101000100110101010010110", 
    37 => "10111110101011000000100011001001", 
    38 => "10111100011010011110100100111011", 
    39 => "10111101100000100111001001011010", 
    40 => "10111111000000011011100110010011", 
    41 => "10111011111111110010001100100011", 
    42 => "10111110000001100011010111001010", 
    43 => "00111101100000010011110110010110", 
    44 => "00111110001111111111011001110011", 
    45 => "00111101001000111111001111110010", 
    46 => "10111100101111111101111000110100", 
    47 => "00111101011010001000100011110000", 
    48 => "00111011110111101000000110100111", 
    49 => "00111011101001010101010001111100", 
    50 => "00111011101001111110101100001001", 
    51 => "10111110011000100001001110101100", 
    52 => "00111100110101101001011011010111", 
    53 => "10111110101001011011010010100100", 
    54 => "10111101000100101000011110010001", 
    55 => "00111110101000010101001001100011", 
    56 => "00111011100010100010110110101111", 
    57 => "00111110100010010001011001010110", 
    58 => "10111110011010001110111001011100", 
    59 => "00111101110000011001000110000100", 
    60 => "00111101110000010010010100001110", 
    61 => "00111101111101110101010101111110", 
    62 => "10111110000001101000010101011101", 
    63 => "10111011110010000010101001100010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic5D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic5D is
    component conv_2_conv_2_weic5D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic5D_rom_U :  component conv_2_conv_2_weic5D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


