-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiYie_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiYie_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100001001100101001110011100", 
    1 => "10111110001011100110100100010101", 
    2 => "00111100000000000001010110010001", 
    3 => "00111110001101111111110101000110", 
    4 => "10111110000001100110100010011111", 
    5 => "10111101011001010111001000011100", 
    6 => "00111101101110011011001110110110", 
    7 => "00111101001010110110101011000001", 
    8 => "00111101111110010010010000011111", 
    9 => "10111100101001101011111101111111", 
    10 => "00111100011101010100101010010000", 
    11 => "00111101111001101111000111011001", 
    12 => "10111110011110101000100000111000", 
    13 => "10111110000001011010001010011010", 
    14 => "00111110100010100100010101001111", 
    15 => "00111110101001110101100000101010", 
    16 => "00111101110100010110010001001110", 
    17 => "10111100001111011100011010001010", 
    18 => "00111101011010011001000011100011", 
    19 => "00111110010000101011011101010000", 
    20 => "00111101111010000111000100111111", 
    21 => "10111101111001100101111011110001", 
    22 => "10111101001101100110011111010001", 
    23 => "10111010111101000100101000101011", 
    24 => "00111110001001010100001010110001", 
    25 => "00111110010100011100101100000100", 
    26 => "10111101110011110110011010011001", 
    27 => "10111110001011100000100000010100", 
    28 => "00111110100111010001100101011010", 
    29 => "10111101110001110010101001010100", 
    30 => "00111100100110000100111110111011", 
    31 => "00111110000101100100010010101100", 
    32 => "00111101110001111100001001100110", 
    33 => "10111101111000100101111000000101", 
    34 => "00111101111011100110111110010000", 
    35 => "10111110001100000010100010111100", 
    36 => "00111101101100100000001100011110", 
    37 => "10111110001110110000001001100111", 
    38 => "10111101111011100111100001101000", 
    39 => "10111101111111111010100010101100", 
    40 => "10111101100100100111101011100010", 
    41 => "00111110000000100100010000001011", 
    42 => "10111101000011110100101100001010", 
    43 => "00111110010001001101011100010111", 
    44 => "00111101110011011110011011001101", 
    45 => "10111100110001101100111101100100", 
    46 => "10111100101000011100101001111100", 
    47 => "00111101000010111110010000000100", 
    48 => "00111100111101000111110100101100", 
    49 => "10111110001000000001000010000101", 
    50 => "00111100011101011000111111110110", 
    51 => "10111110110110001110000000111100", 
    52 => "10111100101001001110110001011111", 
    53 => "10111101111000000010001101101110", 
    54 => "10111110101011011001101110110100", 
    55 => "10111110101010000110011111010010", 
    56 => "00111110001001110111001010000110", 
    57 => "00111110010010111000110011110111", 
    58 => "10111100110001111010101001111101", 
    59 => "00111110000111010101111011000011", 
    60 => "10111110001011000111010011000000", 
    61 => "00111101111010100110111001110011", 
    62 => "10111101100011111000101001110110", 
    63 => "00111101100000011010011011100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiYie is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiYie is
    component conv_2_conv_2_weiYie_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiYie_rom_U :  component conv_2_conv_2_weiYie_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


