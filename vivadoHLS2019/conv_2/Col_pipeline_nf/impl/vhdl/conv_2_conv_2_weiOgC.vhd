-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiOgC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiOgC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101001000001000011100", 
    1 => "00111101010100110001110010100101", 
    2 => "00111101101101100111010010011011", 
    3 => "10111110001111101001000001010001", 
    4 => "00111101010101110000000011111010", 
    5 => "10111110001001000110011011010010", 
    6 => "10111110010011001110111000000010", 
    7 => "00111110001000011100011011110000", 
    8 => "00111101001111100100000010100100", 
    9 => "00111001100101110000110011001001", 
    10 => "10111101100000011011010000111001", 
    11 => "00111110000110001110111011011010", 
    12 => "10111101110101001110001001011010", 
    13 => "10111110100001000110101001110000", 
    14 => "10111110101010101110100000101100", 
    15 => "10111110001010110001000011011000", 
    16 => "10111101001001100010101111001101", 
    17 => "10111110100101001101101000111010", 
    18 => "00111100011101001110100000110011", 
    19 => "10111101011001011000111110110001", 
    20 => "00111101101111010111011101111101", 
    21 => "10111110110100101110110110111011", 
    22 => "10111110101110100111111001111000", 
    23 => "10111010101011100010000001000110", 
    24 => "10111110010111111001001110011011", 
    25 => "00111101000100001001011011110010", 
    26 => "10111101110011010100110010110111", 
    27 => "00111101101110100111010111011101", 
    28 => "10111110101111001000101010011100", 
    29 => "10111110000011011111111100111111", 
    30 => "00111110000000101111010101000011", 
    31 => "10111110001111010011010110110010", 
    32 => "10111110001011000010110001110101", 
    33 => "00111110010101101000110111010000", 
    34 => "00111101011001011001011010111010", 
    35 => "10111011100100001010111111110100", 
    36 => "00111101000000000100110011100000", 
    37 => "00111101010000001111111010001100", 
    38 => "00111100111001100101101011001110", 
    39 => "10111101100110111100000111001000", 
    40 => "10111101101101011001101000100110", 
    41 => "10111110000100111011101100011110", 
    42 => "10111101100011111011101010010100", 
    43 => "00111101111000000011000111001000", 
    44 => "00111011100011110100010110101011", 
    45 => "10111110000010100000000011100111", 
    46 => "10111101111011100111100101010101", 
    47 => "00111100101101000010001000010000", 
    48 => "00111101100011000011101101100001", 
    49 => "10111101100110100000000100111000", 
    50 => "10111110110101101110110110111010", 
    51 => "10111100001101101110000101001110", 
    52 => "00111101010001011010001011110101", 
    53 => "10111110000110111000010110100010", 
    54 => "10111101110001010011010111101011", 
    55 => "00111110010110100110101010110110", 
    56 => "10111110000100010100011100100110", 
    57 => "00111101011100000010011000111110", 
    58 => "10111101110000100000000011101101", 
    59 => "00111101100000010100011001011000", 
    60 => "10111110100110011011100010100100", 
    61 => "10111101101010001001010101000000", 
    62 => "10111101000101111001000101100101", 
    63 => "00111101111010000010000110010000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiOgC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiOgC is
    component conv_2_conv_2_weiOgC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiOgC_rom_U :  component conv_2_conv_2_weiOgC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


