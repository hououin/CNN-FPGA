-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidlF_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidlF_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001001100100100101011111", 
    1 => "00111101100110000000010101111010", 
    2 => "00111101100101110111100100010010", 
    3 => "00111101110000111111101011001101", 
    4 => "00111101010011010001010000100110", 
    5 => "10111110001101011001111010101010", 
    6 => "10111110000110000011011011000011", 
    7 => "00111101001011101011001001110010", 
    8 => "00111110000000101111001011101111", 
    9 => "10111101010110010010110010111010", 
    10 => "10111110010110111111000110011111", 
    11 => "10111110100100101100011010101101", 
    12 => "10111100000111100101100110111110", 
    13 => "00111101100000111010011110110110", 
    14 => "10111100110111100100010100011110", 
    15 => "10111101000100110111010010000011", 
    16 => "00111101101000110101001001110101", 
    17 => "10111110001001100001010110000011", 
    18 => "00111101101001100010000100100000", 
    19 => "10111100010110000000100010100100", 
    20 => "10111101111000011000011000100111", 
    21 => "00111101010011100101100001111101", 
    22 => "00111101100010100001010101010111", 
    23 => "10111110001111011111101010011011", 
    24 => "00111101001111101101110111100010", 
    25 => "10111110001100110111001001111000", 
    26 => "10111100100010001001100010011010", 
    27 => "10111110010010011100101001111101", 
    28 => "00111101100001010000011110011000", 
    29 => "00111100101010011101011101000101", 
    30 => "10111101011100110100001001001110", 
    31 => "10111101100001100110111011101001", 
    32 => "10111110101011000111111011111011", 
    33 => "00111101101100001111101000010001", 
    34 => "10111101011000010000100110101100", 
    35 => "00111101010001110100011010001001", 
    36 => "00111100111101001110101100111001", 
    37 => "10111110100111000111110010100101", 
    38 => "10111101100011111101110111100111", 
    39 => "00111100101111000111000110010100", 
    40 => "10111101011100010111010011100101", 
    41 => "10111100100100011101100100011111", 
    42 => "00111100111001010000110000101011", 
    43 => "00111101100111001111100010010110", 
    44 => "00111101100000001111101011011010", 
    45 => "10111110001011011010101101101110", 
    46 => "10111101000001011101000011010100", 
    47 => "10111110010011111111111011101101", 
    48 => "10111101100101000100100010111011", 
    49 => "00111101010010110001010001000101", 
    50 => "10111101101000001011000010000010", 
    51 => "10111110010011101110000000100000", 
    52 => "00111101101000110100001110010101", 
    53 => "10111101100001011111000111110001", 
    54 => "00111101001011101000101011001101", 
    55 => "10111010110001001000010100110001", 
    56 => "00111101001110101000001000010010", 
    57 => "10111101100010111101100110101001", 
    58 => "10111101111010000111011101101111", 
    59 => "10111101100000111101000000000100", 
    60 => "10111101000011000101110110010000", 
    61 => "00111100110010110101010110101011", 
    62 => "00111100100110000100101010111100", 
    63 => "10111101000000001000000100111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidlF is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidlF is
    component conv_2_conv_2_weidlF_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidlF_rom_U :  component conv_2_conv_2_weidlF_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


