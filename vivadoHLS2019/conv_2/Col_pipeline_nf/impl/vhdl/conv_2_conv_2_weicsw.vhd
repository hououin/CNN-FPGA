-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicsw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicsw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010100011111010100011", 
    1 => "10111011001001101110001100110110", 
    2 => "10111011001110011011110100010000", 
    3 => "10111101110011101110001001100011", 
    4 => "00111101101100100000110000010111", 
    5 => "00111101100100010110001000011110", 
    6 => "10111100101000000000001110100101", 
    7 => "10111101100110011010101011011000", 
    8 => "10111110000100000101010001111001", 
    9 => "10111101011000000001110100001001", 
    10 => "10111100011101110000010001011100", 
    11 => "10111101010001100110100111010111", 
    12 => "00111101101101111100000001111110", 
    13 => "00111110000010111010011001100100", 
    14 => "10111101100101011111110111101110", 
    15 => "10111110000100111000010101001110", 
    16 => "00111101000100001000001000010100", 
    17 => "10111100100001100000010011100100", 
    18 => "10111101000000001000001101100000", 
    19 => "10111100101001101001011110011000", 
    20 => "10111110001010110110000001010011", 
    21 => "00111101100011011000110111011000", 
    22 => "10111101000110010011000011100111", 
    23 => "10111011000010000111000011111011", 
    24 => "00111101101111101111010000000010", 
    25 => "00111100000101110001001100101110", 
    26 => "00111101010100100101111000001011", 
    27 => "10111101101111100010000010100001", 
    28 => "10111100101100000100001100100000", 
    29 => "10111101100110010011010000010100", 
    30 => "10111100111011001011010000110110", 
    31 => "00111100110101101010101110011001", 
    32 => "10111101100001110010001100001010", 
    33 => "10111101010011011010110000001001", 
    34 => "00111101011011100111101111100100", 
    35 => "10111100011101110100011111101101", 
    36 => "00111101100101101010000111100011", 
    37 => "10111110100000110101101111011000", 
    38 => "00111011000001101000011111000010", 
    39 => "10111100111110010011110010011011", 
    40 => "00111101110000111010011111010100", 
    41 => "10111101100100111000110111100010", 
    42 => "00111101101110010100100101011000", 
    43 => "10111101111010100100110011000100", 
    44 => "10111101101001000011111100001110", 
    45 => "00111100100111101001101111000011", 
    46 => "00111101010100110111011110001000", 
    47 => "10111100101001110111001000110001", 
    48 => "00111101001100110110110011101100", 
    49 => "10111101000011000101000101010100", 
    50 => "10111011100111010110100101010110", 
    51 => "10111101011110110001001010101111", 
    52 => "10111101110110111101101100111011", 
    53 => "00111011001010000000111100101001", 
    54 => "10111101111101011011110001000110", 
    55 => "10111110000010110000010101101010", 
    56 => "10111101110000001101110110001110", 
    57 => "10111101001000000011001111010000", 
    58 => "00111101100110010100110001010101", 
    59 => "10111101000000000111001110010010", 
    60 => "00111101110000101110010001011100", 
    61 => "10111101111101011101011011000111", 
    62 => "10111101110011110010000110100011", 
    63 => "10111101010011010101111111001001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicsw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicsw is
    component conv_2_conv_2_weicsw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicsw_rom_U :  component conv_2_conv_2_weicsw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


