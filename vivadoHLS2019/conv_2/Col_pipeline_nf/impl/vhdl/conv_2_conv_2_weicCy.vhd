-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicCy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicCy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011110000000001100100100", 
    1 => "10111101000000000010100010001111", 
    2 => "10111101011101100110000100001101", 
    3 => "10111011101010001011110011110101", 
    4 => "00111010110101011001001010000100", 
    5 => "10111100100000001001010101000101", 
    6 => "10111101101110001101000011111011", 
    7 => "10111100101001000010111111011010", 
    8 => "10111011100111110110010111010011", 
    9 => "10111101000000000110101011001010", 
    10 => "00111110001001001001010010001110", 
    11 => "10111101100001101010101101011001", 
    12 => "10111101110001110001001100110100", 
    13 => "00111101000010011111001000001000", 
    14 => "00111101100001111010101000001001", 
    15 => "00111010101110001010101011110110", 
    16 => "00111101101001011110010100101111", 
    17 => "00111100100000001011011111111001", 
    18 => "00111101101101001001011001110100", 
    19 => "00111101110110000100111010010011", 
    20 => "00111101011101100111010100101000", 
    21 => "10111101101101101011001101100001", 
    22 => "00111100110011000001110010001110", 
    23 => "10111100011010110111100110111011", 
    24 => "10111011101011010000000000110111", 
    25 => "00111011010100001001110011010000", 
    26 => "00111101001001010110000000010000", 
    27 => "10111101101000010001110000010100", 
    28 => "00111101110100010111101100000100", 
    29 => "10111100110100000111111111100111", 
    30 => "00111101101000011011110101000011", 
    31 => "10111100011111011001101010110011", 
    32 => "10111101000001001010000011100101", 
    33 => "10111101111011000101001000010000", 
    34 => "00111101011110001011001101011010", 
    35 => "10111101110011011001001110101101", 
    36 => "10111101101100111000010111000110", 
    37 => "10111100100000001010111110011100", 
    38 => "10111101101000010110010010001100", 
    39 => "10111101101000000101011011001000", 
    40 => "10111101110100001011011100110000", 
    41 => "10111101011010000101100110110111", 
    42 => "00111100111001001011100001010011", 
    43 => "00111100110011000110111000101101", 
    44 => "00111110000000110000101111111110", 
    45 => "00111100101101010010110001001000", 
    46 => "10111110000010011110000011011110", 
    47 => "10111100001011001000100100000000", 
    48 => "00111101001011001110010110000011", 
    49 => "10111100110101010110001111010000", 
    50 => "00111101001111001010100010010111", 
    51 => "00111101110011010011010000111001", 
    52 => "10111101100001101000010011100011", 
    53 => "10111101100010101000110110000011", 
    54 => "10111110010001010011101000100110", 
    55 => "10111110100011011100000100010110", 
    56 => "00111101011000000001110100011110", 
    57 => "00111101110101101010001111101100", 
    58 => "10111110101101110111001010111100", 
    59 => "00111101110011011001111100010110", 
    60 => "00111100100101000101111011001101", 
    61 => "00111101101001010000010101101011", 
    62 => "10111101000101000101010011011001", 
    63 => "00111101101011110000100101110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicCy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicCy is
    component conv_2_conv_2_weicCy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicCy_rom_U :  component conv_2_conv_2_weicCy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


