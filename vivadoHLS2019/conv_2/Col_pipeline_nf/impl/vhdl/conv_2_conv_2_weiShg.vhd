-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiShg_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiShg_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101111101010000101010101", 
    1 => "10111110010001001101011110110010", 
    2 => "00111100111010100101010110001111", 
    3 => "10111100111010011000101011110100", 
    4 => "10111100100110000101100011100110", 
    5 => "10111010100110110001010011011000", 
    6 => "10111110001101110100000011010010", 
    7 => "10111101011101110011001001000011", 
    8 => "10111110001101101000010010110010", 
    9 => "10111101101101011101111001110010", 
    10 => "10111101111001100101100100000110", 
    11 => "00111101101000001011101000011001", 
    12 => "10111110100100101110000000110100", 
    13 => "10111101001001111110101011110000", 
    14 => "10111110100111000111110000110110", 
    15 => "00111101010001111001110110101011", 
    16 => "10111110011010100000001110010111", 
    17 => "00111101011011110000001101100010", 
    18 => "00111101010100101010110011110010", 
    19 => "00111100111010000000000100111010", 
    20 => "00111101110100010001101101111111", 
    21 => "00111101000101010011110101111001", 
    22 => "10111100110111101110111100000111", 
    23 => "10111110000101111111010000111110", 
    24 => "10111110011011111011010111101011", 
    25 => "00111011100001100110010111000010", 
    26 => "00111101101100000101110000001111", 
    27 => "00111110010011101010001110100001", 
    28 => "10111110010010001001100010111111", 
    29 => "10111101011011011011010011110110", 
    30 => "10111101110110101101111110100000", 
    31 => "10111110001011000101011011001001", 
    32 => "10111101100011011011011001000000", 
    33 => "00111101110100011111101111000110", 
    34 => "00111101111001100000000110000111", 
    35 => "00111110001011100110000101100001", 
    36 => "00111110000001000011110111111000", 
    37 => "10111100001011010000010100000011", 
    38 => "10111110100110011111101011110101", 
    39 => "10111110011000001101100011110001", 
    40 => "00111101101111110111001111010010", 
    41 => "00111100101001010111110010000001", 
    42 => "00111010111111101001010111111111", 
    43 => "10111100001100001111100011100000", 
    44 => "10111101100101001101001100110000", 
    45 => "10111101001000010011010011110110", 
    46 => "10111110100101110101001101001100", 
    47 => "10111101111000011100101110100010", 
    48 => "10111101101000010110010101110011", 
    49 => "10111101000000101110001100000010", 
    50 => "10111110100001111100100110101100", 
    51 => "10111101111011110001010100111010", 
    52 => "00111101100011001111110010110101", 
    53 => "00111100111111010100110011110110", 
    54 => "10111101110011111111110010110111", 
    55 => "00111100101001101000000001111110", 
    56 => "10111101111001001100001010101000", 
    57 => "00111101100010000001100111101101", 
    58 => "00111101011110011000011101110110", 
    59 => "10111101111101001110111000110001", 
    60 => "10111101111111111010110110011100", 
    61 => "00111101011111001110001100110110", 
    62 => "10111101101110100101001001011100", 
    63 => "10111110001000100000010001101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiShg is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiShg is
    component conv_2_conv_2_weiShg_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiShg_rom_U :  component conv_2_conv_2_weiShg_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


