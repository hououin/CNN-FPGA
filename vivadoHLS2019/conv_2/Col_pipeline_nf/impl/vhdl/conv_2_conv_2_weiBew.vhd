-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiBew_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiBew_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000100101010110110010010", 
    1 => "00111101000101000100011001100000", 
    2 => "00111100111101110100001010011111", 
    3 => "00111101000000101110000011111100", 
    4 => "10111101111111001100001110101010", 
    5 => "00111100110000000110110001111011", 
    6 => "10111101110000011010110100000011", 
    7 => "10111100100110001111001010101000", 
    8 => "00111101111001011100010100010010", 
    9 => "10111110000101101110001011101001", 
    10 => "10111101111001110001011100101001", 
    11 => "00111101000100010101010010110010", 
    12 => "10111110001111101010110011100010", 
    13 => "10111101000010101000101101010010", 
    14 => "00111101100000111101110111011011", 
    15 => "10111011110011001000000000011100", 
    16 => "10111110100001110011000111110101", 
    17 => "00111101110000111000101011010010", 
    18 => "10110110110001000101101110100000", 
    19 => "00111101101000011010110011111101", 
    20 => "10111101100100110011011101101001", 
    21 => "10111110000001000010011010101111", 
    22 => "10111101101001001100010000101110", 
    23 => "10111100110010000110011100010101", 
    24 => "10111110011001010001101000111011", 
    25 => "10111101011101010111010100011011", 
    26 => "10111101101100111111110110110111", 
    27 => "00111110000110111001010100011011", 
    28 => "10111011110010000100110011111000", 
    29 => "10111101011101000001011101001010", 
    30 => "00111101110001111000011000001011", 
    31 => "00111110001011000111110111101101", 
    32 => "00111011110010011100001001110100", 
    33 => "10111110011101011110000010010110", 
    34 => "10111100110000000100111001110101", 
    35 => "00111110011010100010111100110011", 
    36 => "10111100100110100111111011100001", 
    37 => "10111100111101001110100000110110", 
    38 => "00111100101100111011100101110100", 
    39 => "00111100100011010010110011011000", 
    40 => "10111100110110111001011100101110", 
    41 => "10111100101100101011111100111001", 
    42 => "00111100001111111100011111110010", 
    43 => "00111101101100011010001111011011", 
    44 => "00111101101100110000101110101100", 
    45 => "10111101111011001011010010100001", 
    46 => "10111101111110100010110001000010", 
    47 => "00111101111000110100011001000101", 
    48 => "00111101101000010100011110011011", 
    49 => "10111110110010011010000000101001", 
    50 => "10111110011110001110110011000100", 
    51 => "10111100100011010011101011001000", 
    52 => "10111110100010000111100000010011", 
    53 => "00111110000100111100110111011000", 
    54 => "00111101000010011000011111000100", 
    55 => "10111101100000010101101100000110", 
    56 => "10111101000000111000101101110001", 
    57 => "00111101011000011111000001111100", 
    58 => "10111101011001000001111000111011", 
    59 => "00111110000011000100010010101000", 
    60 => "00111101001001000010010111110011", 
    61 => "10111101010110001011000000010010", 
    62 => "00111100100111000101011011011000", 
    63 => "00111101101111101011111001010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiBew is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiBew is
    component conv_2_conv_2_weiBew_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiBew_rom_U :  component conv_2_conv_2_weiBew_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


