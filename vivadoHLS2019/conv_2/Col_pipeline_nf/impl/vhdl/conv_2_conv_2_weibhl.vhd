-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibhl_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibhl_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111001100001010110101011", 
    1 => "10111110001110011000001001000011", 
    2 => "10111101001100011010011100100111", 
    3 => "10111101110011101100101000010001", 
    4 => "00111101010001100110010110100111", 
    5 => "00111100010110101011001001001001", 
    6 => "00111100101101001010000110111011", 
    7 => "10111101000000000101011001100101", 
    8 => "00111011011001100001101010010010", 
    9 => "10111100011010011110111000110010", 
    10 => "00111100111011011001011111000010", 
    11 => "10111001100111010100001000111011", 
    12 => "10111100100001000100011010110110", 
    13 => "00111110000101011110110101110111", 
    14 => "10111101101001001011101111010001", 
    15 => "00111101011000100001000110011111", 
    16 => "00111101100111111001101111101001", 
    17 => "00111101100011001011101111000111", 
    18 => "00111011100010011010111010000101", 
    19 => "10111110000010000110000011100110", 
    20 => "10111100111101100010111000100000", 
    21 => "00111011110110101101001110100111", 
    22 => "00111011111001110100111011100100", 
    23 => "10111100001111111010000010101011", 
    24 => "10111100100101010100110011001101", 
    25 => "10111101111111001000110000011100", 
    26 => "10111110000101001001111000000010", 
    27 => "10111110011101010111011011110100", 
    28 => "00111100110101100101111110000111", 
    29 => "10111110011000101110001001111110", 
    30 => "00111101101000000010001101110111", 
    31 => "10111110011000010010010110100101", 
    32 => "00111101000000101000101110101100", 
    33 => "00111100000110000011110011001000", 
    34 => "00111101100111001000000011010000", 
    35 => "10111101110111100011111011000010", 
    36 => "10111110000111011001110011101001", 
    37 => "10111101110111000010000100001100", 
    38 => "10111100110011111011010110101011", 
    39 => "00111100100110110010000010100101", 
    40 => "10111100010001101010010100001000", 
    41 => "00111101010110000110101001000011", 
    42 => "00111100101100010100011001000000", 
    43 => "10111101010111000110100101010001", 
    44 => "00111100111110111001011000011011", 
    45 => "00111110001000010011011100001000", 
    46 => "00111101101010100001111000010110", 
    47 => "00111010001110011100101101110001", 
    48 => "10111101100111000100111011111011", 
    49 => "10111101111111100010100001100011", 
    50 => "00111101001100000110010001101101", 
    51 => "10111110001111101100100110011111", 
    52 => "10111110000001010011001111100101", 
    53 => "00111101111010010010000010000101", 
    54 => "10111101000101011101010101110011", 
    55 => "00111101110000111010101001011000", 
    56 => "00111100100101000010100001001001", 
    57 => "00111101000111011010011110001110", 
    58 => "00111101100111101011101100011010", 
    59 => "00111101110000111001100101001010", 
    60 => "10111100100011100010011000111010", 
    61 => "00111100111001001001111001000000", 
    62 => "10111110000111111101110101111011", 
    63 => "10111101101001011111111101010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibhl is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibhl is
    component conv_2_conv_2_weibhl_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibhl_rom_U :  component conv_2_conv_2_weibhl_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


