-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiZio_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiZio_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000010101100011110101110", 
    1 => "10111100111010011001001000000101", 
    2 => "00111101110010101100011010000101", 
    3 => "10111101100000101110010110010101", 
    4 => "10111101100101100010110010100110", 
    5 => "10111101100101111011110000101110", 
    6 => "00111101111101101001110001001011", 
    7 => "10111101100111010010010110000100", 
    8 => "00111101010110001100000000111010", 
    9 => "00111100111100111110100011101111", 
    10 => "00111101110111010100001110011110", 
    11 => "00111101011001110110000000100000", 
    12 => "00111100100110100100011000010001", 
    13 => "10111100110000111100001101110101", 
    14 => "00111100010100100000011110110001", 
    15 => "00111110000100100100011001111011", 
    16 => "00111101011001000111000000100110", 
    17 => "10111101010010001100000110000000", 
    18 => "00111101010011001111000010011110", 
    19 => "10111101011001110010100110111000", 
    20 => "00111101100110111001000110101000", 
    21 => "10111101110110100100010010010010", 
    22 => "10111101000111011001001001111110", 
    23 => "10111101100010111100001011111110", 
    24 => "00111101011111110000010110011110", 
    25 => "00111100110011001111110000011101", 
    26 => "10111100101101111110001110001101", 
    27 => "10111101110001001011010011000110", 
    28 => "10111011001001010111111111101001", 
    29 => "00111101100110011100010100110100", 
    30 => "00111110000000110101101101010100", 
    31 => "00111100011001111100000110010010", 
    32 => "00111100001001011101101000011001", 
    33 => "10111110001100000111010010001011", 
    34 => "10111100100100100111010110101100", 
    35 => "10111110011110110101001100101010", 
    36 => "00111101110000110111101101101010", 
    37 => "10111101100010100111101011101011", 
    38 => "00111101100010111100000111011000", 
    39 => "10111101000101101111111011111100", 
    40 => "10111101011010000111001010101101", 
    41 => "00111101110111110111010011111100", 
    42 => "00111110000000101000111110110011", 
    43 => "00111101111001101111000100101000", 
    44 => "00111101111010110011010111010010", 
    45 => "00111101010100101101010000010000", 
    46 => "00111101101101010101101011110111", 
    47 => "00111101001000110111110010110110", 
    48 => "00111101101100111111010001000110", 
    49 => "00111100100100110100111011100111", 
    50 => "00111110000010101111010011001000", 
    51 => "10111101101001101001101000101001", 
    52 => "10111110001001100110000110111011", 
    53 => "10111101101011001100100110100100", 
    54 => "10111110000000110000101000111010", 
    55 => "10111110000010101010010011100111", 
    56 => "00111101111011010010001001101000", 
    57 => "00111101100111101001101101011101", 
    58 => "10111101110100111010010110001011", 
    59 => "00111100110101110000101111101010", 
    60 => "10111100010010100111110110100111", 
    61 => "10111101101101001011101110100000", 
    62 => "00111100101000010010111011010010", 
    63 => "00111101011101111111111001011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiZio is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiZio is
    component conv_2_conv_2_weiZio_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiZio_rom_U :  component conv_2_conv_2_weiZio_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


