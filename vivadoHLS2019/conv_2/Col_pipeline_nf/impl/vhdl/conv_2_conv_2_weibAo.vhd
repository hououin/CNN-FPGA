-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibAo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibAo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100010001100011010001111", 
    1 => "10111110001101010110001000100010", 
    2 => "10111110010011111001000001010011", 
    3 => "00111110001110000111101110110101", 
    4 => "00111101101100010011100011001101", 
    5 => "10111100010110001000111101100101", 
    6 => "00111110011010000110001000111011", 
    7 => "10111010101000100010110011011011", 
    8 => "10111101001101100101110000111111", 
    9 => "00111011100011101101111000001111", 
    10 => "00111100010111001111101101010010", 
    11 => "10111110001010010111010001101101", 
    12 => "00111110000111010011010000000000", 
    13 => "00111110000000010101110110001000", 
    14 => "00111110010000110110110000100100", 
    15 => "00111101100011111111100010001100", 
    16 => "00111101100100100010001111111100", 
    17 => "00111101011000001110111001111011", 
    18 => "00111100011011100110001010000011", 
    19 => "10111110010000110101110000000111", 
    20 => "00111101110110101011100011011011", 
    21 => "00111101111000111001111111010100", 
    22 => "00111110000100000110111011101101", 
    23 => "00111101110101111000111100111101", 
    24 => "00111101101111101111100001110010", 
    25 => "00111101110011110101011110110001", 
    26 => "00111101101101110110100010000000", 
    27 => "10111110011010100001111000001000", 
    28 => "00111110000001101001000100001000", 
    29 => "10111110011010111111111011000100", 
    30 => "00111100000101000110010000110000", 
    31 => "10111110110100000001100010000011", 
    32 => "00111100101111010111100010101011", 
    33 => "00111110000010111100100110100010", 
    34 => "10111100010010111110111000010111", 
    35 => "10111110000110010010100011001000", 
    36 => "10111101000011110010110010001000", 
    37 => "10111100101101000101001111011011", 
    38 => "00111101000001000111101010111001", 
    39 => "10111101111000110000011100110100", 
    40 => "10111110110100100011011101101010", 
    41 => "00111101110011111011101010100000", 
    42 => "10111100001010010110100101100100", 
    43 => "00111101111001100010000000000110", 
    44 => "00111011100010010101001110001101", 
    45 => "00111110001010011110011110111111", 
    46 => "00111101110000110110101011001010", 
    47 => "00111110001111101101101011100000", 
    48 => "10111110001110010101110101101001", 
    49 => "10111100110011010001001001101000", 
    50 => "00111101110011011000011001011101", 
    51 => "10111101110010111100011000011000", 
    52 => "10111110001110100101000111100000", 
    53 => "00111101110111101110111011101011", 
    54 => "10111110100100000000101001111110", 
    55 => "10111101100011010001011110001000", 
    56 => "00111101110100110010101000100101", 
    57 => "10111101011110110011000100000000", 
    58 => "10111101100100110011111101010110", 
    59 => "00111110000100011010101110011000", 
    60 => "00111101101000110001001000010010", 
    61 => "00111100110001011100101101010011", 
    62 => "10111101101110111110011001010100", 
    63 => "10111010110100110101111101111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibAo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibAo is
    component conv_2_conv_2_weibAo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibAo_rom_U :  component conv_2_conv_2_weibAo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


