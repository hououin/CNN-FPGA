-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiIfE_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiIfE_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000010110111011101111110", 
    1 => "00111100001011100111101011010101", 
    2 => "10111101111001110010011010001010", 
    3 => "00111110000110010011100010000011", 
    4 => "10111101100110011111001000100100", 
    5 => "10111100000010001110010000001001", 
    6 => "10111101100011011101000110111001", 
    7 => "00111110000000010111100010110101", 
    8 => "00111101100110111000111001000000", 
    9 => "00111101100111110010101111101010", 
    10 => "10111101010011101001000111101110", 
    11 => "00111101110011010010010010110010", 
    12 => "10111110000001100100011101000010", 
    13 => "10111101111111110101111110111111", 
    14 => "00111101111110110001110011101110", 
    15 => "00111110000101000111101111001100", 
    16 => "00111101000100111101110110000010", 
    17 => "10111100011011001001010011101111", 
    18 => "10111100000110110100110001011110", 
    19 => "00111100101011010001110101101100", 
    20 => "00111101111110101110110101000111", 
    21 => "10111101011001111001000011100010", 
    22 => "10111110001100111110010000001000", 
    23 => "00111101111000110101010110011100", 
    24 => "10111101110010000111101000101110", 
    25 => "00111110011100111111011110011010", 
    26 => "00111101100111100001010011001000", 
    27 => "10111110100011001011100011001101", 
    28 => "00111110011010111110011000110111", 
    29 => "10111110001111101101101011111101", 
    30 => "10111110000001111111010001010000", 
    31 => "00111110011010101100111010111111", 
    32 => "00111100100110010000001011011000", 
    33 => "10111110010101111100111111010000", 
    34 => "00111101110010101011101110100100", 
    35 => "00111101001110100011100010000011", 
    36 => "00111110000000110011110101000111", 
    37 => "10111101110110101101001111110000", 
    38 => "10111110011010111101101110100111", 
    39 => "10111101111011010100100100111011", 
    40 => "10111110010100110111100110010100", 
    41 => "00111101100011010011100011010110", 
    42 => "00111101100011000001000100000000", 
    43 => "00111110011110100011011001010001", 
    44 => "00111101101101011110001110100010", 
    45 => "00111101110100011001010111111110", 
    46 => "10111101101000111000101000011011", 
    47 => "10111100100011000000100011110000", 
    48 => "00111100011110100010011001100111", 
    49 => "10111110001101010111100110100001", 
    50 => "10111101111111001011010010000111", 
    51 => "10111110101000001001010011100110", 
    52 => "10111101101011100110001011100110", 
    53 => "10111101010101110111110101111100", 
    54 => "10111110101111000100101001001010", 
    55 => "10111110101100101001100001101010", 
    56 => "00111101110001110100111011010100", 
    57 => "00111101110101011000001110111100", 
    58 => "10111110001000111001111000111111", 
    59 => "00111100100111000010100010111011", 
    60 => "10111110011111110011111000001100", 
    61 => "00111110000011011001100111001001", 
    62 => "00111101111000001010001111110100", 
    63 => "10111011111001110010011011110111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiIfE is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiIfE is
    component conv_2_conv_2_weiIfE_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiIfE_rom_U :  component conv_2_conv_2_weiIfE_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


