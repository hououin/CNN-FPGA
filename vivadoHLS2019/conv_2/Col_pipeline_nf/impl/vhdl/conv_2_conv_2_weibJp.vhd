-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibJp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibJp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001100101000001101000011", 
    1 => "10111101001010010101110101001111", 
    2 => "00111011000010101101000110101100", 
    3 => "00111101111110001100001110001000", 
    4 => "10111101000011100101100111010000", 
    5 => "10111101100110000110000000100010", 
    6 => "10111101100000001001111010011000", 
    7 => "00111101111110000100001100011100", 
    8 => "10111101111100110100101010100110", 
    9 => "10111110000110000011101110110111", 
    10 => "10111110110111100100001100001111", 
    11 => "10111110000101100010100110010001", 
    12 => "10111101111111110001000101001110", 
    13 => "00111011010000001011000010111000", 
    14 => "10111110000111011010111001111101", 
    15 => "10111110000010111001110011110011", 
    16 => "10111100011100101111110111011001", 
    17 => "00111101111101011110101100110100", 
    18 => "00111110001000000011000100110001", 
    19 => "00111011101001110100101111011110", 
    20 => "00111101100001101111101000001101", 
    21 => "10111101110100010110111110111111", 
    22 => "00111101111000010010010011010101", 
    23 => "10111100110110101111010111000010", 
    24 => "10111101111000100001110110111100", 
    25 => "10111110100001111110110101011101", 
    26 => "00111010010000000110111011001100", 
    27 => "10111110110010100001101110010111", 
    28 => "00111101110101001010100111100101", 
    29 => "10111101110101010111111111100010", 
    30 => "10111110001001110101111111101101", 
    31 => "00111101111001110001000111100101", 
    32 => "10111110001110110101001010101001", 
    33 => "00111101010101111011100101111000", 
    34 => "10111110000011110110000011101000", 
    35 => "10111110001001101011001110001011", 
    36 => "00111101110110000001011011101010", 
    37 => "00111011000010100111110100001101", 
    38 => "10111101010010110111101010110010", 
    39 => "00111101101110010011101100101110", 
    40 => "10111101001101010011001000110000", 
    41 => "10111101100000111110000000100010", 
    42 => "00111110000001111111100001100111", 
    43 => "00111101000110100000101110011010", 
    44 => "10111110010011011100001001111011", 
    45 => "10111110101000110111000110001001", 
    46 => "10111110001010110001000011000001", 
    47 => "10111110101000111001010010110010", 
    48 => "10111100011001110010101010000001", 
    49 => "10111101100010000110110100010111", 
    50 => "10111110100000100010000011111101", 
    51 => "00111101001111111000100101010111", 
    52 => "10111101000110001000011111100011", 
    53 => "10111110000000010100101001100101", 
    54 => "10111100011110000111110101110001", 
    55 => "00111110000001010110001000110010", 
    56 => "00111101010101010011010010111000", 
    57 => "00111100011110011001110100110110", 
    58 => "00111100011010100010010111000101", 
    59 => "00111101101111100000100100000001", 
    60 => "10111110111010111100011110011001", 
    61 => "00111101111000010111000111110111", 
    62 => "00111100101101011001001100100010", 
    63 => "00111100101100101000000100111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibJp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibJp is
    component conv_2_conv_2_weibJp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibJp_rom_U :  component conv_2_conv_2_weibJp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


