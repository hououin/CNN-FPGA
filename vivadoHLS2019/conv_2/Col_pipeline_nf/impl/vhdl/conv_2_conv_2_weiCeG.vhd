-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiCeG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiCeG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100110111100101111111010", 
    1 => "00111101000001110011111111100100", 
    2 => "10111101101110001111110100101000", 
    3 => "00111110000010111001101011000000", 
    4 => "00111101110110110100100110101010", 
    5 => "10111110000001111101111101010101", 
    6 => "00111101111110001001100100010100", 
    7 => "10111110100010000000001000101100", 
    8 => "00111110011001000101011001101010", 
    9 => "10111101011111111001010001010000", 
    10 => "10111101110110001110110001010111", 
    11 => "10111110100010001100111011111001", 
    12 => "10111100001100110100010001100000", 
    13 => "00111110001001101010100100001101", 
    14 => "00111110000010010100100101000001", 
    15 => "00111110100010001000010111100001", 
    16 => "10111110001000001100100100110011", 
    17 => "10111011101011111000110111100010", 
    18 => "10111101101010011011011110110011", 
    19 => "10111110001011001010100101111111", 
    20 => "10111110100001011100000010111100", 
    21 => "00111101101101101111001001011110", 
    22 => "10111101101001000101100000110101", 
    23 => "10111110100101010111001100100010", 
    24 => "00111101111110010010000101000101", 
    25 => "00111101101010001111000111101101", 
    26 => "00111101011101100101000000010001", 
    27 => "00111110000100011110011100100111", 
    28 => "00111101111010000101010100011000", 
    29 => "10111101100101110000111011111111", 
    30 => "10111101101101001101011110010110", 
    31 => "00111100011010001000011111111000", 
    32 => "00111101101100110111110110011010", 
    33 => "10111110110001110011101001000110", 
    34 => "10111101001010100100110101001111", 
    35 => "00111101100000000101000110000110", 
    36 => "10111101101001010011011011111000", 
    37 => "10111100001010001010101010110001", 
    38 => "10111101001001010001001011101000", 
    39 => "00111110000000011101101011011000", 
    40 => "00111011101100011010110000110001", 
    41 => "10111101110011000010000111100001", 
    42 => "10111101000011010111111001100111", 
    43 => "00111101000111000100011101001010", 
    44 => "00111101100010011001101110100011", 
    45 => "10111101011010111000010001101101", 
    46 => "10111100100111111000101100110100", 
    47 => "00111100011010000001111110011111", 
    48 => "10111110010101011010111101011001", 
    49 => "10111110101000110100100010110100", 
    50 => "00111101110010000001110001110001", 
    51 => "10111110101100000100010000010101", 
    52 => "10111110100010111010010000100011", 
    53 => "00111110000101101101001110000000", 
    54 => "00111110000011001011010110101111", 
    55 => "10111110101001011101111111011101", 
    56 => "10111011110100101100011001100000", 
    57 => "10111100000111110100010001101110", 
    58 => "10111011000000100001011011001000", 
    59 => "00111100100001110001100110110001", 
    60 => "00111110001100011100100010010000", 
    61 => "00111110100100010100111010001101", 
    62 => "00111100101111100111001010010011", 
    63 => "00111101101101111011110011101000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiCeG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiCeG is
    component conv_2_conv_2_weiCeG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiCeG_rom_U :  component conv_2_conv_2_weiCeG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


