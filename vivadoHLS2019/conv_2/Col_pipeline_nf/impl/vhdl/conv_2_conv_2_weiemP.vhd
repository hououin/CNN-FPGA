-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiemP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiemP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100100111101010110011001", 
    1 => "10111110010010011001110100000100", 
    2 => "10111101110100100110110111111001", 
    3 => "00111101101110111110001000100110", 
    4 => "10111110010100110110100101110110", 
    5 => "10111011010010011110101101000011", 
    6 => "00111100001011100010010000100000", 
    7 => "10111101001101010000110010001101", 
    8 => "00111101000001110100101010001001", 
    9 => "00111110001111011111010011100010", 
    10 => "10111110100010010001010010101011", 
    11 => "00111101101100100010110001011001", 
    12 => "00111110000000110110010000101000", 
    13 => "10111101100110011000010110011101", 
    14 => "00111110011001010101010110100110", 
    15 => "00111110100000000010010110011110", 
    16 => "00111101110110110101001001001011", 
    17 => "00111110011111011000110010101110", 
    18 => "10111101110010100110010100000010", 
    19 => "10111110001111011000001000100110", 
    20 => "10111110011010100110111101111011", 
    21 => "10111110110100011111110011111111", 
    22 => "10111101111111101010011110001010", 
    23 => "10111101101010111001101101100010", 
    24 => "10111110000000001001010100100010", 
    25 => "10111100010111001010100010101100", 
    26 => "00111101110011000010100110011100", 
    27 => "00111110100011101001000100010010", 
    28 => "00111110001111000111100011000110", 
    29 => "10111100111101011110000101010010", 
    30 => "00111110000101101001001111001110", 
    31 => "00111101101101110100011010100110", 
    32 => "00111110101100010100111110011000", 
    33 => "10111101010101010101000010101100", 
    34 => "00111101011101011110101110111001", 
    35 => "00111101000101010101100110000111", 
    36 => "10111110101101000111010010010110", 
    37 => "00111101110100000000101010000001", 
    38 => "10111110001110000010001101100010", 
    39 => "10111101101010010000110010001111", 
    40 => "10111110100010011110010010001011", 
    41 => "00111110001100010111010101011001", 
    42 => "10111110001110110110000001101100", 
    43 => "10111101011110010111000110000111", 
    44 => "00111100111010000001000110011101", 
    45 => "10111101001010010110111000110010", 
    46 => "00111110000100100001110101100010", 
    47 => "00111110101000000100100111101101", 
    48 => "10111110010001001100000010010110", 
    49 => "00111110011100010011100101110100", 
    50 => "00111101101001110011111000010000", 
    51 => "10111110000000000001001011010101", 
    52 => "10111101111001000111100011001111", 
    53 => "10111110001000000001000110101010", 
    54 => "10111101001100101001101111001011", 
    55 => "10111101001101011110010011000111", 
    56 => "00111101001100010101111111110111", 
    57 => "10111110001010010000011110101111", 
    58 => "10111110100000110110110001011010", 
    59 => "00111011111111000101000000101010", 
    60 => "10111110100111010100111011001000", 
    61 => "10111110010000000100011001100001", 
    62 => "00111110000011001001010111110111", 
    63 => "10111101010111110111001001000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiemP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiemP is
    component conv_2_conv_2_weiemP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiemP_rom_U :  component conv_2_conv_2_weiemP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


