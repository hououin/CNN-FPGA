-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibfk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011111111111110011101110", 
    1 => "10111110010101100110001010101011", 
    2 => "10111110011010100100100100101011", 
    3 => "10111100101110101110010001100111", 
    4 => "00111101101010100010111100100001", 
    5 => "00111100110111010001110010100101", 
    6 => "10111101111110101010001111000010", 
    7 => "00111110001001110001001000111000", 
    8 => "00111110000011100001011010011010", 
    9 => "00111100111100010100111001101100", 
    10 => "00111100101000000010101111011000", 
    11 => "00111101100011111100010111011101", 
    12 => "10111100011010001100100110001100", 
    13 => "00111100111100101000000011011110", 
    14 => "10111101000000100101001011111111", 
    15 => "00111101101110110100010001111110", 
    16 => "00111101100101001101001001111000", 
    17 => "10111101110100110011111101001111", 
    18 => "10111100100110101011000001111011", 
    19 => "00111101010001010011010001101100", 
    20 => "10111110000100000111110110010101", 
    21 => "00111101010011010011011100100011", 
    22 => "10111100100011011011011011110010", 
    23 => "10111100100110000011001010001111", 
    24 => "10111101000010111110111001111000", 
    25 => "00111101110010001111010000001100", 
    26 => "00111001101000000100000000100110", 
    27 => "10111110000111010110110110001111", 
    28 => "10111011111100010101111000110111", 
    29 => "10111101100011010001110110011000", 
    30 => "00111101100001111011100100010110", 
    31 => "10111110010100111011001100110100", 
    32 => "00111011110011001110010000000001", 
    33 => "00111011101111111010100110101100", 
    34 => "10111101100100111101111110010010", 
    35 => "10111100101010000011001010101110", 
    36 => "10111110100010101110111000110100", 
    37 => "10111110000001010100110010011111", 
    38 => "10111100001101011101011010100101", 
    39 => "00111101100110011000001101011100", 
    40 => "10111110011100011111110100111110", 
    41 => "10111110010111100000001000110111", 
    42 => "00111100101000010100110001010110", 
    43 => "10111100100111011000000111100001", 
    44 => "00111101100010110101010100010110", 
    45 => "10111101100110001001001010001101", 
    46 => "10111101110111011000101011100101", 
    47 => "10111101100010000010000001011000", 
    48 => "10111110001001100100100100010010", 
    49 => "10111110000001101101111001010111", 
    50 => "10111101100011011011000011100010", 
    51 => "10111101110101010110011101010010", 
    52 => "10111110011000101011001011001101", 
    53 => "10111101110010011110111000111001", 
    54 => "10111110001101011010000110000100", 
    55 => "10111110001000000010110110100010", 
    56 => "00111100001000010011011101011010", 
    57 => "00111101001000000000010101011000", 
    58 => "10111101011001001000000111111010", 
    59 => "00111110000000011001000011000101", 
    60 => "10111101111001001011101001011011", 
    61 => "00111100000001001001101110000001", 
    62 => "00111101010000000111010001110000", 
    63 => "00111110001101011111010000000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibfk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibfk is
    component conv_2_conv_2_weibfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibfk_rom_U :  component conv_2_conv_2_weibfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


