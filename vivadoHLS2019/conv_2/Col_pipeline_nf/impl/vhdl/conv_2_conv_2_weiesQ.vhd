-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiesQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiesQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100011001101010010010001010", 
    1 => "10111101110000101001110100011001", 
    2 => "10111101110000000010011110101010", 
    3 => "10111101101010000000110000101110", 
    4 => "00111101100110000101101110101010", 
    5 => "00111011000011101101111110110011", 
    6 => "00111011111000001011010100110101", 
    7 => "00111101100000101010100000110011", 
    8 => "00111101010000100001000100001000", 
    9 => "00111101010011100110110010110100", 
    10 => "10111110011111011111001001111000", 
    11 => "10111100100101000111010001101111", 
    12 => "00111101110110000101000100110110", 
    13 => "10111011010100001100101101110011", 
    14 => "10111100101011100000000100001001", 
    15 => "10111011001101110101110001110001", 
    16 => "10111101101011111110111111001011", 
    17 => "10111101110000111001100110001110", 
    18 => "10111101101101110001001111000111", 
    19 => "00111101101111000001001001010101", 
    20 => "10111110010011110010000110011011", 
    21 => "00111110010001010010001100000010", 
    22 => "00111101110000010011100000001101", 
    23 => "00111110000101111010010110010001", 
    24 => "00111011110001100011100111001111", 
    25 => "00111100110111101000001010000000", 
    26 => "10111101000110110011000110100101", 
    27 => "10111101011011010110000101000001", 
    28 => "10111101110111111101100010010100", 
    29 => "10111101001110101101101010011011", 
    30 => "00111100101101010110111100110000", 
    31 => "10111100101101011010011001000111", 
    32 => "10111101110101110001010000100001", 
    33 => "10111101101100100110111001111110", 
    34 => "10111101101110111010100101101001", 
    35 => "10111101100010011110100110010000", 
    36 => "00111101100100000101010100010101", 
    37 => "10111101011001100010111101000110", 
    38 => "00111100010100011010111010000011", 
    39 => "00111100000010001000110110001000", 
    40 => "00111011111110100000010100111000", 
    41 => "10111101011101011010001101100011", 
    42 => "00111101010101010101100111101100", 
    43 => "10111101001011110000110010100000", 
    44 => "00111101001110111111011000110011", 
    45 => "10111101110100100101000000000010", 
    46 => "10111101101111001010010110101000", 
    47 => "10111101001010001000000011000001", 
    48 => "10111100011111101111111010101101", 
    49 => "10111100101110101100001110111001", 
    50 => "10111101001111101010000001110100", 
    51 => "00111011011011110011110101001001", 
    52 => "00111100110001111011111101101110", 
    53 => "00111110010010011010001001010010", 
    54 => "10111101001001110011000100110111", 
    55 => "00111100111011011010000001111001", 
    56 => "10111110001001001101111111011101", 
    57 => "00111101011001111010000100011101", 
    58 => "00111101110010101110110110100010", 
    59 => "10111101100101101110100010010010", 
    60 => "00111101100111101000110110100100", 
    61 => "10111101110111111110011101100111", 
    62 => "10111101100001100111011010011101", 
    63 => "10111100110001011010000101110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiesQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiesQ is
    component conv_2_conv_2_weiesQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiesQ_rom_U :  component conv_2_conv_2_weiesQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


