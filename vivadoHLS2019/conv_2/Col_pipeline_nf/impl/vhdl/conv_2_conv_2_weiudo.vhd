-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiudo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiudo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001011110001010000001110", 
    1 => "10111011100001101100110111101011", 
    2 => "10111101000000111001111110100000", 
    3 => "00111101110101101101101100111000", 
    4 => "10111101000000001100011010100110", 
    5 => "00111101011011101010100001110010", 
    6 => "10111101110111010011001100001011", 
    7 => "10111100110111001010101111111100", 
    8 => "00111101110001010011011010100111", 
    9 => "00111101110111011010101111010001", 
    10 => "10111100001010010101000101011101", 
    11 => "00111011110111010101110010110011", 
    12 => "10111101110111000101010110111101", 
    13 => "10111110010110111101100111101000", 
    14 => "10111101110000101000010000000100", 
    15 => "00111011000000000011111100010001", 
    16 => "10111110010111000001011001111110", 
    17 => "00111110000100010111001110001010", 
    18 => "10111110010110010001110101101110", 
    19 => "00111110000110011100001010101000", 
    20 => "10111110010101100100101100010111", 
    21 => "10111110100011000010000111111001", 
    22 => "10111101110111011000010111001111", 
    23 => "10111100011111000101101100100111", 
    24 => "00111100010000110000000001101100", 
    25 => "00111110001010111101011111011000", 
    26 => "00111110001011011001010011010101", 
    27 => "00111100100010100001110110000011", 
    28 => "10111110011100101000001010001000", 
    29 => "00111110000100011111010110011100", 
    30 => "10111101110101101011111111001000", 
    31 => "10111110001000110011101101010000", 
    32 => "10111101100000010000011100011101", 
    33 => "10111110100010111010100111111100", 
    34 => "10111100101011110101100110111010", 
    35 => "00111101111010010001011011010101", 
    36 => "10111100110001101101011100001010", 
    37 => "10111101011001110100001111010000", 
    38 => "10111100101111101100110101011110", 
    39 => "00111110000010001010000100110111", 
    40 => "10111010111011101011010101000100", 
    41 => "00111110000000100101000100101000", 
    42 => "10111101000100000100110000000001", 
    43 => "00111110010011011011101011010011", 
    44 => "00111101100111110000010001111101", 
    45 => "10111100011000110000010110011011", 
    46 => "10111100010110101001100111001000", 
    47 => "00111110100101101100111010100010", 
    48 => "00111101110011001000101100101010", 
    49 => "10111110011100010010100100100000", 
    50 => "10111101100110101010100110111101", 
    51 => "10111100110000101100000001110010", 
    52 => "10111110010010010100010101001000", 
    53 => "00111100101011110101001000110000", 
    54 => "00111101000000000000101011011101", 
    55 => "10111110010001000101011010011010", 
    56 => "10111110011101100100011101101111", 
    57 => "00111101000110110111000101110111", 
    58 => "10111100110100000011011011000110", 
    59 => "00111101101111100000100011010011", 
    60 => "00111011110111101011001011110100", 
    61 => "00111101010000101010001011010100", 
    62 => "00111101101111110101000100001001", 
    63 => "00111101101000110010001010111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiudo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiudo is
    component conv_2_conv_2_weiudo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiudo_rom_U :  component conv_2_conv_2_weiudo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


