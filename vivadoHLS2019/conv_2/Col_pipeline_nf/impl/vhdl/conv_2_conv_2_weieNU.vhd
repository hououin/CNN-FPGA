-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieNU_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieNU_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010000100010011011110110", 
    1 => "10111110011101000000011001010101", 
    2 => "00111101110111101010010010011110", 
    3 => "10111100110101000110001111110010", 
    4 => "00111101101100001010000000010101", 
    5 => "10111110011100100000110000101010", 
    6 => "00111110010110101000100001001000", 
    7 => "10111110001010111000101011001110", 
    8 => "10111101100111100110111000110010", 
    9 => "10111110000100000101101110010001", 
    10 => "10111101100100011100100000001011", 
    11 => "10111100001101111010101000101101", 
    12 => "00111110010110111000000001001111", 
    13 => "10111101011000111101101001110110", 
    14 => "10111110001110001011010110110110", 
    15 => "00111101101000001011101000101010", 
    16 => "00111101101111000000010100110000", 
    17 => "10111101001011100111010110011001", 
    18 => "10111110101001111010110100010110", 
    19 => "00111101100000010001000000100101", 
    20 => "10111101110010000110101100011110", 
    21 => "00111101100011111110000100001011", 
    22 => "10111110101011100010000111000001", 
    23 => "00111110100100111111110000110011", 
    24 => "10111101001000101100000111100010", 
    25 => "10111100100011011000001010000010", 
    26 => "10111110010010110100010000001001", 
    27 => "10111011100010000111011101111011", 
    28 => "00111101001011011100100101011001", 
    29 => "00111100111101100111000010100100", 
    30 => "10111101111100000111011000100110", 
    31 => "00111101100001100111001011101111", 
    32 => "10111110001001010011000111111111", 
    33 => "10111110010100010110001001101111", 
    34 => "10111110000100010111111011011111", 
    35 => "10111110000000001011001010011001", 
    36 => "00111110000000001100010001001001", 
    37 => "00111101101101000001000001110011", 
    38 => "00111110000010001101100100111001", 
    39 => "10111101111000001011100011111111", 
    40 => "10111101111011000100100000001010", 
    41 => "00111101101101000011000000111111", 
    42 => "10111100100000001101000010100101", 
    43 => "10111011000100000101011100001101", 
    44 => "00111101101010001000001010010110", 
    45 => "10111110001010100110101101001011", 
    46 => "10111011100001010000110110011100", 
    47 => "00111110000110110101111101110000", 
    48 => "00111101101010010011110101101111", 
    49 => "00111100101101011011111100110110", 
    50 => "00111100110110100011111100010000", 
    51 => "00111101101100001001100100110110", 
    52 => "00111101101110000000111000001100", 
    53 => "10111101011111111111000011101000", 
    54 => "00111110011000100010101011101010", 
    55 => "10111101100000110111010110010111", 
    56 => "00111011010111101001011000011110", 
    57 => "00111110000100100010111110000101", 
    58 => "00111110000110110100111011001000", 
    59 => "00111100100100010001010000000011", 
    60 => "00111101101001000001010010011001", 
    61 => "00111110011101001000001010001110", 
    62 => "10111101101100011111101001011110", 
    63 => "10111110001101001110110100000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieNU is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieNU is
    component conv_2_conv_2_weieNU_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieNU_rom_U :  component conv_2_conv_2_weieNU_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


