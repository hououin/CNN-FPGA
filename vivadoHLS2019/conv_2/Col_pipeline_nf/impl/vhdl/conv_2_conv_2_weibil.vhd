-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibil_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibil_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111100111011110001111000", 
    1 => "00111110000100100111111110110100", 
    2 => "00111101101101001001001111101011", 
    3 => "10111110100011110101101101010101", 
    4 => "10111101010110001000100101000010", 
    5 => "10111101101100110011010100010101", 
    6 => "10111101101011100101100011110111", 
    7 => "10111101000111010000100111010111", 
    8 => "10111110100010000110011001111111", 
    9 => "10111110000010011010101110110010", 
    10 => "00111101101001110101110011011001", 
    11 => "00111110000101111011101001011101", 
    12 => "10111110010011000101001101011111", 
    13 => "10111111000010011010101001010001", 
    14 => "10111110110000111101101101000100", 
    15 => "10111110110111100000111111111011", 
    16 => "10111101110101101000111110101101", 
    17 => "10111110000010001000110010111111", 
    18 => "10111110100100000111000101111010", 
    19 => "00111101110100110001100011100001", 
    20 => "10111110010101101100001010110001", 
    21 => "10111101110000100111010111001000", 
    22 => "10111101001011100011100111000001", 
    23 => "10111110100110111110101011101100", 
    24 => "10111101010100010001010100101111", 
    25 => "10111110010001101100111101101011", 
    26 => "10111101111001100011100010010100", 
    27 => "00111100101011011011011111111010", 
    28 => "10111110011111001000101011100011", 
    29 => "00111101101011111110000110100111", 
    30 => "10111101110110101110101110101110", 
    31 => "00111110011000101101110111000011", 
    32 => "10111100000000100000010111111110", 
    33 => "10111110010001010100110011010110", 
    34 => "10111110000111011110101101000110", 
    35 => "10111101001001001110001111111101", 
    36 => "00111101001001011011011011100011", 
    37 => "10111110011100111100110100101110", 
    38 => "00111101100101010000100110000001", 
    39 => "10111110001111010011010111000101", 
    40 => "00111101101000111011001101000101", 
    41 => "10111110101011011110011010000000", 
    42 => "00111101001010000101011001110110", 
    43 => "10111110100010001100100111001111", 
    44 => "10111100110000110110010001011101", 
    45 => "10111110010101010010011110000100", 
    46 => "10111110101001001000100101010111", 
    47 => "10111110100110110000010101110101", 
    48 => "00111101101101010100110011011010", 
    49 => "10111101110000001101000000111111", 
    50 => "10111101110100111001000101111110", 
    51 => "00111101111100110000101010101011", 
    52 => "00111110000001100101001101000100", 
    53 => "10111110010011111010110001001010", 
    54 => "00111110001100010101101011011000", 
    55 => "00111100110001010111000111110110", 
    56 => "10111110010111100110100101110111", 
    57 => "00111101011000010100011110111100", 
    58 => "10111101001100111100011011111111", 
    59 => "10111110100101101010010111001111", 
    60 => "10111101100100000110001011011100", 
    61 => "10111110000111110010000100011011", 
    62 => "10111110000000010011010111100100", 
    63 => "10111110011001111011110111011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibil is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibil is
    component conv_2_conv_2_weibil_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibil_rom_U :  component conv_2_conv_2_weibil_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


