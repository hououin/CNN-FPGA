-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibZs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibZs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000000101111111000000101", 
    1 => "10111110100000001010101000111000", 
    2 => "00111110000110011101110111101001", 
    3 => "00111110001100100111000010001000", 
    4 => "10111110100110011110101100010001", 
    5 => "00111110000011001100101001100001", 
    6 => "10111101000111110010000000010110", 
    7 => "10111100101100000001000101010010", 
    8 => "10111100110100111011111100101001", 
    9 => "10111101100010111111000011010001", 
    10 => "00111100111010001011010000011001", 
    11 => "10111110010000010111011100010010", 
    12 => "00111110001100010001011011110100", 
    13 => "10111101111110001011000001010001", 
    14 => "10111110000001100100010011001010", 
    15 => "10111100101010110001000111010011", 
    16 => "10111101100010010100110001000000", 
    17 => "00111101110100110000011101100001", 
    18 => "10111110001111010110000101111110", 
    19 => "10111101001101101001000000010100", 
    20 => "10111110011000000010011011001001", 
    21 => "00111110010000001010000111111001", 
    22 => "00111101000111010011010101101111", 
    23 => "10111110110001101010110001111110", 
    24 => "10111101111111100010111001010111", 
    25 => "10111100000010110110000101010010", 
    26 => "00111101110010100000001000100111", 
    27 => "10111110101011100110001111100101", 
    28 => "10111110000110101100010110111101", 
    29 => "10111100110000111001101101101011", 
    30 => "10111110011101111010011010101001", 
    31 => "10111110011010110011101101100111", 
    32 => "10111110001110010011101101010000", 
    33 => "00111101100100001110100000110110", 
    34 => "00111101101101010010011010011001", 
    35 => "10111101001111011101111100011100", 
    36 => "00111101100001001001110000111011", 
    37 => "00111110001000001101000000100001", 
    38 => "00111100010110010010100010100110", 
    39 => "00111110001110001101101001010010", 
    40 => "10111100100100110110000000101010", 
    41 => "00111101101011110010010011111100", 
    42 => "10111110000110110000110101100111", 
    43 => "00111110000010100011000000001100", 
    44 => "10111100101110100110101001100010", 
    45 => "00111010100010100110011110100100", 
    46 => "00111100100111001111110101011000", 
    47 => "00111100110011101010011110000011", 
    48 => "10111100111111011011100010110011", 
    49 => "10111110011110011101011011100111", 
    50 => "10111110100011010011010011000111", 
    51 => "00111101001010100110001001000100", 
    52 => "10111110010110101000110110001100", 
    53 => "10111110001001100000010011011000", 
    54 => "00111110000100000001111000011011", 
    55 => "10111101100000010111110011100101", 
    56 => "10111110011010111110001100111110", 
    57 => "10111110101100111010001100011011", 
    58 => "00111101011010010001011110000111", 
    59 => "10111011110101110101001111101101", 
    60 => "10111110101010011011100000111010", 
    61 => "00111110001011101010001010111101", 
    62 => "00111101110111100010000111001010", 
    63 => "00111110010100101000110011011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibZs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibZs is
    component conv_2_conv_2_weibZs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibZs_rom_U :  component conv_2_conv_2_weibZs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


