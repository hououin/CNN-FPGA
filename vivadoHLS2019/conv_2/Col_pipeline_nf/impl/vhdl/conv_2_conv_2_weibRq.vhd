-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibRq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibRq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011010001110111001000101", 
    1 => "10111101001000011101010011010101", 
    2 => "10111101101101001101000100101000", 
    3 => "10111101111111011000000110110000", 
    4 => "10111101101001010100110010100001", 
    5 => "10111101000001011011011011110010", 
    6 => "10111110100101101011011111100100", 
    7 => "10111101101111011010001010100000", 
    8 => "10111101110010101111010111111000", 
    9 => "00111101100110010110001011100101", 
    10 => "10111101010000111111000101010110", 
    11 => "10111101001001000010011001101001", 
    12 => "10111110010100010000011101011001", 
    13 => "10111110011110111111111010101011", 
    14 => "10111101010010101111011111010111", 
    15 => "10111101011000011100101010001110", 
    16 => "10111110100000001011110010111100", 
    17 => "10111110000111100101101101000100", 
    18 => "10111110100111001001001001010001", 
    19 => "10111101001000100101010000001011", 
    20 => "10111110001000110010101011001010", 
    21 => "10111101110010101011011010011000", 
    22 => "10111110111110011101000000110001", 
    23 => "00111101100111011100101111010010", 
    24 => "10111110110000110111110110101001", 
    25 => "10111101001100101000110101000011", 
    26 => "10111101011100010000111010001000", 
    27 => "00111101010010101101111100100011", 
    28 => "10111101100001101110001110111100", 
    29 => "00111101000111110010111111011111", 
    30 => "10111101110101100110111110101111", 
    31 => "00111110001010010111111001011001", 
    32 => "10111101100000011000001110000000", 
    33 => "10111110101010101011000001010011", 
    34 => "10111100101011111110101100100011", 
    35 => "00111101000100110010100100001001", 
    36 => "10111110011100101001111110101110", 
    37 => "00111100110001101010011101110101", 
    38 => "00111100000110000100110100101001", 
    39 => "10111101001000001011001100001101", 
    40 => "00111100110010010100000101100110", 
    41 => "10111110000100110111001110111000", 
    42 => "10111110101100011100000100001010", 
    43 => "10111110000011110001011101110111", 
    44 => "10111100100111011010101110010101", 
    45 => "10111101100111111111001011110101", 
    46 => "00111101001100011011100111111010", 
    47 => "00111101001100001101011110110101", 
    48 => "00111101110010111101011001100110", 
    49 => "10111101010101000000000001101111", 
    50 => "10111110110011000100010101010011", 
    51 => "00111101000110101101100001101010", 
    52 => "10111110000010010000010000111001", 
    53 => "00111110011010101011000100101001", 
    54 => "00111101000110100111100001110111", 
    55 => "10111101110111000100111000110101", 
    56 => "10111101011101111000000111100111", 
    57 => "10111101001011010001011000010011", 
    58 => "00111101101000111101010010010101", 
    59 => "10111101100010101001000010101001", 
    60 => "10111110010010111101101000111000", 
    61 => "10111110001100010100000100111001", 
    62 => "10111110001010001101011011000111", 
    63 => "10111101110000101011111100011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibRq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibRq is
    component conv_2_conv_2_weibRq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibRq_rom_U :  component conv_2_conv_2_weibRq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


