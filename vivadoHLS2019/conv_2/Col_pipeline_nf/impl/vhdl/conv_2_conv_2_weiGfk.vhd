-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiGfk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111001011010110100001100", 
    1 => "00111100110011010100011000100011", 
    2 => "10111110000001010110010111111010", 
    3 => "00111110000011001000111100111101", 
    4 => "00111110011010011100100101001001", 
    5 => "10111101010101100000110000111100", 
    6 => "00111110010010101011100001011001", 
    7 => "10111101110001111001101001011101", 
    8 => "00111110010011011010010101101000", 
    9 => "00111101011011110110111100010100", 
    10 => "10111101101010000001000001101001", 
    11 => "10111101010111010000110001000111", 
    12 => "00111101110001010000010101101111", 
    13 => "10111100000100100110101000110000", 
    14 => "00111101111001001111001101111101", 
    15 => "00111101100010011011011110101111", 
    16 => "10111011101111100010010111110100", 
    17 => "10111100011111011001010010000100", 
    18 => "10111101011011101100001011010001", 
    19 => "10111101111000110110010011100001", 
    20 => "00111011111010011010100000001011", 
    21 => "00111100000010010010010101001110", 
    22 => "00111101001001111101011000100100", 
    23 => "00111101000001101101100111001101", 
    24 => "00111101111110111110110000111110", 
    25 => "10111101001111011000011011010100", 
    26 => "00111110011110100010110000001111", 
    27 => "00111101100100101100010100010111", 
    28 => "10111101011001010101010101010011", 
    29 => "00111101101111001101101010010101", 
    30 => "00111100100011001111111000000000", 
    31 => "10111101010101000100010110111000", 
    32 => "00111100110011101010010011101011", 
    33 => "10111110001001011110100111011101", 
    34 => "10111101001010100010001111111110", 
    35 => "00111101111001110110111110110111", 
    36 => "10111110010000001011111111001111", 
    37 => "00111101010111111011100111010111", 
    38 => "10111101101101011111011111101101", 
    39 => "00111110001011010001100001011001", 
    40 => "10111110100000010111000100010110", 
    41 => "10111100100011001110001110000101", 
    42 => "00111101101110111000100111011100", 
    43 => "00111101000011111110111101101010", 
    44 => "00111100110111110100110111100100", 
    45 => "00111100101100111101100001000100", 
    46 => "00111100101100111010010101010000", 
    47 => "10111100101100001101010100011100", 
    48 => "10111101101110111110010000110010", 
    49 => "10111110100001101000110000101000", 
    50 => "00111110010011101100011001100001", 
    51 => "00111110010111110110011110001100", 
    52 => "10111110010010001011111101010010", 
    53 => "10111100000110010001000011100100", 
    54 => "00111101000000010001010000011001", 
    55 => "10111110001001010000000110110011", 
    56 => "10111100111110110011111100110001", 
    57 => "00111101101001111010111000011010", 
    58 => "10111101100011000011110001111001", 
    59 => "10111100010010101111000010000001", 
    60 => "00111101100111010000101100011110", 
    61 => "00111110000101111010001110100100", 
    62 => "00111110010001101100010100101001", 
    63 => "00111101110010011101010101000011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiGfk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiGfk is
    component conv_2_conv_2_weiGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiGfk_rom_U :  component conv_2_conv_2_weiGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


