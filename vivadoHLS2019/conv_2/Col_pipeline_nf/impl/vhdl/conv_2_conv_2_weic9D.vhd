-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic9D_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic9D_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001111110101001100100000", 
    1 => "10111110001100011000111000100001", 
    2 => "10111110100100110110000001100011", 
    3 => "00111110001110111101111011111111", 
    4 => "10111110010101000010110100001100", 
    5 => "00111110000001100100010110010100", 
    6 => "10111110111101010010100001110001", 
    7 => "10111101100110011110001110011001", 
    8 => "10111101100100100110011001011101", 
    9 => "00111011001001101111000011011110", 
    10 => "10111101110011100100011001010111", 
    11 => "00111110000001011101100100010010", 
    12 => "10111111000000000001111011001110", 
    13 => "10111110001101111110100001010111", 
    14 => "10111100001000111001000101110101", 
    15 => "10111110000011011000110001011100", 
    16 => "00111101010111111101111010011110", 
    17 => "00111101100010111111011110010010", 
    18 => "00111101101000110011101101110100", 
    19 => "10111101100110001001010110110010", 
    20 => "10111101111001010100010100010001", 
    21 => "10111110011110000100011001001110", 
    22 => "00111101010001100111100100111001", 
    23 => "10111110101111011100011000110101", 
    24 => "10111101111101000111001010001111", 
    25 => "00111101010001001110001000110001", 
    26 => "00111101011010101100110000011110", 
    27 => "00111111000100110110100001100111", 
    28 => "10111101100101101010100111111010", 
    29 => "10111101101000110000011111011100", 
    30 => "00111011001011100000000010001001", 
    31 => "10111100010110010000001111101111", 
    32 => "00111101101110011100101101011000", 
    33 => "10111101110001111010110011101000", 
    34 => "00111101101111000110000011111001", 
    35 => "10111101111111111111011001110000", 
    36 => "10111110100101010000001110110101", 
    37 => "10111110001111100101111001111010", 
    38 => "10111101110001001100101101011101", 
    39 => "10111101101010101011001110000001", 
    40 => "00111101001101001100011010110011", 
    41 => "00111110000010100000011101100110", 
    42 => "10111110101101100010010110010110", 
    43 => "00111110010101100100010001110110", 
    44 => "10111100100000000001100110011111", 
    45 => "00111110100110001010000111100001", 
    46 => "10111110000001010000110000000111", 
    47 => "10111101000000101000000100001110", 
    48 => "10111110100110110000101111100001", 
    49 => "10111011100100110010101100100100", 
    50 => "00111101001100101101011100010011", 
    51 => "10111110100101010010100110101111", 
    52 => "00111101111010001100000011101101", 
    53 => "10111101000001100111000110011011", 
    54 => "10111101100110010011111111011000", 
    55 => "10111101100011010011100010001001", 
    56 => "00111100110000001110100101101101", 
    57 => "00111101001110000001110011101010", 
    58 => "10111110011010101100101101010011", 
    59 => "00111101010101101100001110101001", 
    60 => "00111101101100100111001010101001", 
    61 => "00111101101101100011110110101111", 
    62 => "00111100110001010010000000110001", 
    63 => "00111110010100011011001010000101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic9D is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic9D is
    component conv_2_conv_2_weic9D_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic9D_rom_U :  component conv_2_conv_2_weic9D_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


