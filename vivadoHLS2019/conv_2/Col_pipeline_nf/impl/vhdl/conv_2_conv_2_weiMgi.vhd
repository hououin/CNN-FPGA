-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiMgi_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiMgi_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011110110110010001110001", 
    1 => "00111110001000001100100000011011", 
    2 => "00111110100000000000000110101110", 
    3 => "10111110100110001111101100010101", 
    4 => "00111101100110011000011100001110", 
    5 => "10111101101010010000001000101110", 
    6 => "10111110000001100110011001100011", 
    7 => "00111110000010111000011100100010", 
    8 => "10111110011001000010110101001110", 
    9 => "00111101011100110011111001010101", 
    10 => "10111101101000101000010000101001", 
    11 => "00111101101000110010101000111101", 
    12 => "10111101110001000010010000000001", 
    13 => "10111101110110111101110111101011", 
    14 => "10111110101011100101010001111101", 
    15 => "10111110101110110101100101000101", 
    16 => "00111101100110000010001110001100", 
    17 => "10111101101111011110100010100000", 
    18 => "00111100100101011010000101010110", 
    19 => "00111101011011111000111011000101", 
    20 => "00111110001000100011111011100011", 
    21 => "00111101011101000110110100010001", 
    22 => "10111110000010110010101000100101", 
    23 => "10111101111011010010111110001001", 
    24 => "10111110000011111001111110100110", 
    25 => "10111101110001100010001000010010", 
    26 => "10111110000011101010111011111101", 
    27 => "10111101000010101110011111010000", 
    28 => "10111101001110000010101010111100", 
    29 => "00111101101001110110010001110000", 
    30 => "10111101010110001100010100001001", 
    31 => "00111101110110100110001000010001", 
    32 => "10111110011001101000101011011011", 
    33 => "00111110000001010101101010011101", 
    34 => "10111110001010010110110001100010", 
    35 => "00111110001010111100111000110000", 
    36 => "00111110101000101110000001101001", 
    37 => "10111101001011100101011001001111", 
    38 => "10111101001111000110111101101010", 
    39 => "10111101110001011101111101010110", 
    40 => "10111100110001001001101001111100", 
    41 => "10111110100000111001101011100111", 
    42 => "00111101011011101000010101110001", 
    43 => "10111110110000111000000101011101", 
    44 => "00111011001100010010110010001010", 
    45 => "10111110100001001101010110001100", 
    46 => "00111101011101101011001111110100", 
    47 => "10111110101011110101011100110110", 
    48 => "00111101111100010001111111001100", 
    49 => "10111100110010000011010101111110", 
    50 => "10111110000110100000001011100000", 
    51 => "00111100110001000011010000100000", 
    52 => "10111100010101011010110101010100", 
    53 => "10111110000101000010100101111100", 
    54 => "10111010010011101100011011001011", 
    55 => "10111110001000011110101001111011", 
    56 => "10111101100101101000010011000101", 
    57 => "00111101110011100011001111100010", 
    58 => "00111101011110101111110101001101", 
    59 => "10111110001101111010100000010111", 
    60 => "10111011110011011011100010111101", 
    61 => "10111110101110111001101111001010", 
    62 => "10111110001110001010011110000111", 
    63 => "10111110010110011100111101000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiMgi is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiMgi is
    component conv_2_conv_2_weiMgi_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiMgi_rom_U :  component conv_2_conv_2_weiMgi_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


