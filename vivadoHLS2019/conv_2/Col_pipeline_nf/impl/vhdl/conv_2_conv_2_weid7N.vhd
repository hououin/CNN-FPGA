-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid7N_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid7N_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110010011001001101000100111", 
    1 => "10111110000111001011011000110001", 
    2 => "10111110100010110010011000010111", 
    3 => "00111110000100100000111111010011", 
    4 => "10111101101000010111100111010001", 
    5 => "00111110011100110110001100111000", 
    6 => "00111110010001100110110110001000", 
    7 => "10111101110101110001110101101000", 
    8 => "00111110001111110000010011010100", 
    9 => "00111101001100001010000011101011", 
    10 => "00111010101100101011010000000100", 
    11 => "10111101001110010110110100010101", 
    12 => "00111101110101011001101111100100", 
    13 => "10111110010100010011101111011000", 
    14 => "00111101001011010000101110100000", 
    15 => "00111101101000011101111111011111", 
    16 => "00111110001101110001001001011000", 
    17 => "00111110000101110011100010010111", 
    18 => "00111101001111010110011011001100", 
    19 => "00111100110000101111011010101000", 
    20 => "10111110111101010101000100110010", 
    21 => "10111110111100110011101011101010", 
    22 => "10111110011100001100101110111001", 
    23 => "00111101110100011101010001111100", 
    24 => "00111100001011001001011101011011", 
    25 => "00111110100000110100011011110001", 
    26 => "00111110011011000101000001111010", 
    27 => "00111100011000101110011010110000", 
    28 => "00111101101110100001000010110011", 
    29 => "10111110000001110110110011111001", 
    30 => "10111110001111100000001001001110", 
    31 => "00111101110110001101110111100110", 
    32 => "00111110011010101111011000110000", 
    33 => "00111000111001010011111100000010", 
    34 => "00111101111101000111110010101110", 
    35 => "10111110000110100110011100100100", 
    36 => "10111100110000000100100110010100", 
    37 => "10111110101110011100001011011011", 
    38 => "10111101010111101101011111100110", 
    39 => "00111101111111011010010110010100", 
    40 => "10111110110010101111100010001011", 
    41 => "00111110010011010000000110001000", 
    42 => "10111100110001101110011010100110", 
    43 => "00111110001111110010001011000111", 
    44 => "10111110100110001011101110100011", 
    45 => "00111110011001011101111011101001", 
    46 => "00111101100010010011111110000111", 
    47 => "00111101111000100111011100100000", 
    48 => "10111101001101110001001101101001", 
    49 => "00111101101000111111101010101011", 
    50 => "00111101100010100000000100101000", 
    51 => "10111110010110010110000100000010", 
    52 => "10111100110101001000110111001100", 
    53 => "10111110000001111101101000111011", 
    54 => "10111110011110101001010001101100", 
    55 => "10111101000011010000010100100010", 
    56 => "00111110010011111100000001011110", 
    57 => "10111101110001000110000100001011", 
    58 => "10111100100010100111000000010010", 
    59 => "00111100101010000001111101011000", 
    60 => "10111100000011011110100111001110", 
    61 => "00111110000001011101110001100101", 
    62 => "10111100101111001100101010001010", 
    63 => "00111100101000011111011000111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid7N is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid7N is
    component conv_2_conv_2_weid7N_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid7N_rom_U :  component conv_2_conv_2_weid7N_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


