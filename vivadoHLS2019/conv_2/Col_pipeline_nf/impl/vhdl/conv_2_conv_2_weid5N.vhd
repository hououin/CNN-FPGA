-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weid5N_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weid5N_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001100010001101000111", 
    1 => "10111100110110000100010001010000", 
    2 => "10111101111001001000110110111001", 
    3 => "10111101100011001011001001100110", 
    4 => "10111101001000010100111011110110", 
    5 => "10111110010010010000001101010000", 
    6 => "10111101101011101110111101101011", 
    7 => "00111101111100001001101110111010", 
    8 => "00111110011000001101111000101011", 
    9 => "10111110100110000000011100000011", 
    10 => "10111110001011100110110110100101", 
    11 => "10111110010001011101001011011001", 
    12 => "10111101000100011101110011001000", 
    13 => "10111101101101100001111101001100", 
    14 => "00111110100101111001100011010011", 
    15 => "00111101011101010011001001011011", 
    16 => "00111011110001011001011000010001", 
    17 => "00111101001000100100001101011100", 
    18 => "00111101111001100001010101000100", 
    19 => "00111101001001000011101000001100", 
    20 => "00111011111011100110101110011001", 
    21 => "00111101100001010001111000110101", 
    22 => "00111101001011101010001000011101", 
    23 => "10111110100001110111011110000010", 
    24 => "00111011001000011111001101010010", 
    25 => "10111101000011010111001010010111", 
    26 => "00111101100101000001101001000100", 
    27 => "10111100101100100000111000101011", 
    28 => "00111101101001011100100111001110", 
    29 => "10111100110011100010110101000011", 
    30 => "10111100110110111010111011111100", 
    31 => "10111101010001111000110000110111", 
    32 => "10111101110100111100001111001101", 
    33 => "00111101001101110101001111110010", 
    34 => "10111110001000100001010010101000", 
    35 => "10111101000000101010010011010001", 
    36 => "10111101011001100001110011000101", 
    37 => "10111101100000001110111001000110", 
    38 => "10111101111101100000110010001000", 
    39 => "00111101100110101001011001010011", 
    40 => "00111110001001001111111011111010", 
    41 => "10111110000011011101000110000000", 
    42 => "10111100010010010101001011000111", 
    43 => "10111101010011100000001000110110", 
    44 => "00111100111111111110010101101011", 
    45 => "00111110000101100000100011010111", 
    46 => "10111101100111011011001101101100", 
    47 => "10111110010100010000011101001111", 
    48 => "10111101010101011110111111001000", 
    49 => "00111101111111010101101010101101", 
    50 => "00111101010010111011100011100010", 
    51 => "10111110000111000010111011010001", 
    52 => "00111101100101111010111001011011", 
    53 => "00111100110010011101111001011000", 
    54 => "10111101010000010100000110101110", 
    55 => "10111100110001000100110110001000", 
    56 => "10111100100010110010110110101010", 
    57 => "00111110001000011101101001000000", 
    58 => "00111100000110111101101101110001", 
    59 => "00111101000010000100000000010111", 
    60 => "00111101000001111110111100011100", 
    61 => "00111101100100110110001001101010", 
    62 => "00111101100010111010111010110111", 
    63 => "10111100110000101001100000100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weid5N is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weid5N is
    component conv_2_conv_2_weid5N_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weid5N_rom_U :  component conv_2_conv_2_weid5N_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


