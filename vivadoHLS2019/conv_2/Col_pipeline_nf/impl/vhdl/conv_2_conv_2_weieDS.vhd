-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieDS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieDS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101010010000011010111010", 
    1 => "10111110011100011100101111010001", 
    2 => "10111101000111110000011000001000", 
    3 => "00111110011011011111111000111010", 
    4 => "10111101100111110110110011001000", 
    5 => "10111101010100100000110001101010", 
    6 => "00111101110101100011100111010101", 
    7 => "10111101100100011100100010100111", 
    8 => "00111101111011110001001101100000", 
    9 => "10111100100111111001111011001000", 
    10 => "10111101111010000010111011010000", 
    11 => "10111100100001001111001110010000", 
    12 => "00111110000010010111011010111011", 
    13 => "00111110000000100001011101000010", 
    14 => "00111110001001011000110011110100", 
    15 => "00111110000111101101001110010010", 
    16 => "00111110000111011111110100110111", 
    17 => "00111110010100001101101111101111", 
    18 => "00111101100101110001001110111101", 
    19 => "10111101010001000111000110000101", 
    20 => "10111110000110011010101011000010", 
    21 => "10111110011101001110111110011101", 
    22 => "10111101000000100011100011011011", 
    23 => "00111101100001011001001000010110", 
    24 => "10111100001010110010110001111100", 
    25 => "00111101110100101001110010000110", 
    26 => "10111101100011010110001100010001", 
    27 => "00111110010001000000011111011101", 
    28 => "00111101101000010110101100101101", 
    29 => "10111101010111111111110010000001", 
    30 => "10111100011100011110000110001000", 
    31 => "00111110001111110110000110000110", 
    32 => "00111101111110000000010001101100", 
    33 => "00111101011110111111101011010000", 
    34 => "00111101011111010011001101101000", 
    35 => "10111110001100001000101110000110", 
    36 => "10111110100011001010011001111001", 
    37 => "00111110000001001100000111110011", 
    38 => "10111101101110011101010011000110", 
    39 => "00111101000001100011010110101101", 
    40 => "10111110100010011000011110010011", 
    41 => "00111110010010110110010010110111", 
    42 => "00111101101010101110100110100110", 
    43 => "00111110000000100000001100001010", 
    44 => "10111101100110111001111011001010", 
    45 => "10111101011110101100101010000111", 
    46 => "00111110100100101011100110011010", 
    47 => "00111110100110100100010110000100", 
    48 => "00111101010010101100011011000100", 
    49 => "00111110011111101000100000010011", 
    50 => "00111100011001001000000011010011", 
    51 => "10111110100100011001000110000111", 
    52 => "10111101101011110110101100000100", 
    53 => "10111110000111111011110000000010", 
    54 => "10111101111100101100111011111101", 
    55 => "10111101101011000010000001100001", 
    56 => "00111101111011001000011001100001", 
    57 => "10111110001001000111010111110001", 
    58 => "10111101110001000010110001101100", 
    59 => "00111011101110110010100100101110", 
    60 => "10111101001010101111111101011010", 
    61 => "00111100110011110111101111100001", 
    62 => "00111101000110010010100000011000", 
    63 => "00111101001000010010111011111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieDS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieDS is
    component conv_2_conv_2_weieDS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieDS_rom_U :  component conv_2_conv_2_weieDS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


