-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicux_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicux_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001100010000100110011000", 
    1 => "00111101101001101000000101100001", 
    2 => "00111110001100011001001010000100", 
    3 => "00111101001011101011010101101011", 
    4 => "10111101011110011101101111111100", 
    5 => "00111101110110111100001110010111", 
    6 => "00111101111011010100011010111110", 
    7 => "10111110001101010001110100011010", 
    8 => "00111101101010010010011011100111", 
    9 => "00111100110100111000011101011101", 
    10 => "00111101101001110001111010001101", 
    11 => "00111100100011001100011011111110", 
    12 => "00111100111111001010110001110000", 
    13 => "00111101000100011100110010100101", 
    14 => "00111110000101110110011000101000", 
    15 => "10111100111110101001011111101110", 
    16 => "00111101000010110110011001000110", 
    17 => "10111101111100100011000011110001", 
    18 => "10111011101110000001111011100110", 
    19 => "10111101110001011001101000110100", 
    20 => "10111110101011011000001000000011", 
    21 => "00111011111111100010101101100101", 
    22 => "00111100101110111101010001101101", 
    23 => "10111100101101011011000001000011", 
    24 => "00111101001001111000100001100100", 
    25 => "00111101111101001010100010001011", 
    26 => "00111101001001100000000111111100", 
    27 => "10111110101111100110010101011000", 
    28 => "00111101100100011011000000000110", 
    29 => "10111100110000111011101100011000", 
    30 => "10111011101001111010001111000000", 
    31 => "10111100111111011100110010110100", 
    32 => "00111101100001100110110111100011", 
    33 => "10111101111000110001110001010001", 
    34 => "10111101011111111101110011001000", 
    35 => "10111101010101101010011010011110", 
    36 => "00111110001000110011001100001010", 
    37 => "10111101101010001001001111101101", 
    38 => "00111110000110101011101110001110", 
    39 => "00111101011101011001001100110000", 
    40 => "10111110001110100111101100110100", 
    41 => "00111110000111011110110001000101", 
    42 => "10111101101110000110001110111010", 
    43 => "00111100101100101110111000000000", 
    44 => "10111101100010111110111010001111", 
    45 => "00111101000010101111101111010000", 
    46 => "00111110011000010110011011010111", 
    47 => "10111101100100101011111111000011", 
    48 => "00111101000100111010111000010100", 
    49 => "10111110011011111011011010010100", 
    50 => "00111110000111011110100101000100", 
    51 => "00111110000111100100001110011010", 
    52 => "00111100110110001011101110010000", 
    53 => "10111101111000111000011101111111", 
    54 => "10111101000111100000011111111001", 
    55 => "10111101000010110001000001100110", 
    56 => "10111101100110010011010011000101", 
    57 => "10111110000010011111001111101000", 
    58 => "10111110000111000011011101011111", 
    59 => "10111101010100111011011001110110", 
    60 => "00111101000010111011111010110111", 
    61 => "10111101000100110110000111110111", 
    62 => "10111110001011111110001011110010", 
    63 => "10111101100000100110010011011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicux is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicux is
    component conv_2_conv_2_weicux_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicux_rom_U :  component conv_2_conv_2_weicux_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


