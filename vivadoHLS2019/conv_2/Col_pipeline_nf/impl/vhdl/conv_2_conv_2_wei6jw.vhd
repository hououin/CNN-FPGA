-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei6jw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei6jw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101001010111001001111000001", 
    1 => "00111101000011110111011010110001", 
    2 => "00111011011000100111101111100011", 
    3 => "10111110001010101110110111111100", 
    4 => "00111101101100001100101110010011", 
    5 => "10111101101010110001110100001110", 
    6 => "00111110000000000011100101111000", 
    7 => "00111100001000101011010000101000", 
    8 => "10111101100111111100110101100101", 
    9 => "10111011110101001011000000110111", 
    10 => "00111101001100101010001001010110", 
    11 => "00111101110000100111110000110010", 
    12 => "00111101111000100001110111101010", 
    13 => "10111100111110000111101110000011", 
    14 => "00111101100101000000100101111100", 
    15 => "10111100000101000100110101100001", 
    16 => "00111101001101110101100000111111", 
    17 => "10111101101010100100110001110001", 
    18 => "10111101000010001101001000101100", 
    19 => "10111100100110001011000101001000", 
    20 => "10111001011101001110101101110000", 
    21 => "10111101111010000010111110011011", 
    22 => "10111110000001000001001000010101", 
    23 => "10111100100101010001110101011000", 
    24 => "00111010111000001000111111111110", 
    25 => "00111101100110111111101110110100", 
    26 => "00111101001010111000001101111101", 
    27 => "10111110011110100011110100100101", 
    28 => "10111011010010001011110110001011", 
    29 => "00111101110001110001011001110110", 
    30 => "00111011100000101100011101110000", 
    31 => "10111101001101101011001001011100", 
    32 => "00111100111010011000011011111110", 
    33 => "00111101000101010100100101101001", 
    34 => "00111101000101000010011010110111", 
    35 => "10111110000101110100010100111101", 
    36 => "10111101100101001111111001101100", 
    37 => "10111101101110000111101011001101", 
    38 => "00111100110011100111100100010111", 
    39 => "00111101101010000000001000111001", 
    40 => "00111011001100100101111101110111", 
    41 => "00111101111001110011110101010101", 
    42 => "00111101111101001001000000011110", 
    43 => "10111101111101000000110101010101", 
    44 => "00111101110001001100000010101100", 
    45 => "10111100100101011101110010001111", 
    46 => "00111100101011001100100001101000", 
    47 => "00111100110000011110101010011010", 
    48 => "00111110000011011100111101010000", 
    49 => "10111100111100011000001000011100", 
    50 => "00111101101110110000110101011101", 
    51 => "00111101111011011000010110000110", 
    52 => "10111110000000111110101001111010", 
    53 => "10111101111011100000001111101010", 
    54 => "10111101110001110111010101101100", 
    55 => "10111110000101110001111010111101", 
    56 => "10111101100110010011010101011110", 
    57 => "00111100101111111000001011001100", 
    58 => "10111101100001000010111101000100", 
    59 => "00111110000111111000111000101001", 
    60 => "10111101100101001010110111111000", 
    61 => "10111101111101000000000111111110", 
    62 => "10111100101001101101011110000100", 
    63 => "10111101101011011101000101011111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei6jw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei6jw is
    component conv_2_conv_2_wei6jw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei6jw_rom_U :  component conv_2_conv_2_wei6jw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


