-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidEI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidEI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111010001110100111010", 
    1 => "00111110010011101010111000001100", 
    2 => "00111110000000001010001000001101", 
    3 => "00111101110101000110000101100010", 
    4 => "10111101101110111011110111001001", 
    5 => "10111110001000011010010100000111", 
    6 => "10111110010011111011100111000010", 
    7 => "00111101010100110001110111110001", 
    8 => "10111101100000110110100011110101", 
    9 => "00111011111001100001100011111000", 
    10 => "10111101110101110001101011011100", 
    11 => "10111110100001011011010100010001", 
    12 => "10111101101100101011100011000010", 
    13 => "00111101011111111000111100111000", 
    14 => "10111101010110011111110001101011", 
    15 => "10111100011001011111101101100001", 
    16 => "00111101110100101111001101001011", 
    17 => "10111101000100101000010111000111", 
    18 => "00111101111101100101000100001001", 
    19 => "10111100101010010010000010101101", 
    20 => "10111110010100011101100111001000", 
    21 => "10111110001011111100110101000000", 
    22 => "10111101000000110100011011010100", 
    23 => "10111110010111000010111000000101", 
    24 => "00111010001001110101100111001001", 
    25 => "10111101101110011101101100001110", 
    26 => "10111011011111111111011001111110", 
    27 => "10111110001001000110010000100000", 
    28 => "10111101010111110110001011000110", 
    29 => "00111110001010001010010110010111", 
    30 => "10111110011011111001010010100011", 
    31 => "10111010101000010011000010011101", 
    32 => "10111110010010000000001010110000", 
    33 => "00111101111001111000110010100010", 
    34 => "10111110000011111100011011010000", 
    35 => "10111101001101010110111110110110", 
    36 => "00111101110001000110110001101101", 
    37 => "10111101110110100111100001110101", 
    38 => "00111101101011010100011110001010", 
    39 => "00111100101101000010010101011010", 
    40 => "10111110011001010101001000010001", 
    41 => "10111101100000010011011110001111", 
    42 => "10111101001001010100111111001111", 
    43 => "00111100101110011110010101001110", 
    44 => "10111011100001001110000011010011", 
    45 => "10111110100011100100101110100101", 
    46 => "10111100000001010110111010010000", 
    47 => "10111110000100001010101111011000", 
    48 => "00111101101111110110000011001011", 
    49 => "10111110001011010001010100000111", 
    50 => "10111110100000110111010010101111", 
    51 => "10111101111111101000110110100100", 
    52 => "00111101100001100011011100111010", 
    53 => "10111110101010101100000110100110", 
    54 => "00111101011110111101001000011110", 
    55 => "10111101000011010100001000110000", 
    56 => "00111110000001111110001100101101", 
    57 => "00111101100000101111100110100010", 
    58 => "00111101010100110011100000011011", 
    59 => "10111101000001010111010011011110", 
    60 => "10111101100011101100110000101111", 
    61 => "00111100001011101001110000000100", 
    62 => "10111110000000110100000101001110", 
    63 => "10111110000010111011001001010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidEI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidEI is
    component conv_2_conv_2_weidEI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidEI_rom_U :  component conv_2_conv_2_weidEI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


