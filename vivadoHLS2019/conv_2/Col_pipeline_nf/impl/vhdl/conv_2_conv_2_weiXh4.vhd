-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiXh4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiXh4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110010111010110100001001", 
    1 => "00111110000101110111000110100101", 
    2 => "00111101100011001001001010111010", 
    3 => "10111101111001001111100101101010", 
    4 => "10111110001110100000111001010100", 
    5 => "00111101010010000110010000010011", 
    6 => "00111110001100001011101101111001", 
    7 => "00111101101110011111010010110000", 
    8 => "00111110001111101111101101000000", 
    9 => "00111101011010011111100100100101", 
    10 => "10111100000101011101111110100000", 
    11 => "00111110000000100010110011111110", 
    12 => "00111110001111000001101011101100", 
    13 => "10111110101110101110110111100001", 
    14 => "10111101110001011000010001110001", 
    15 => "10111110011010100010000011010110", 
    16 => "00111101111100000000010101010110", 
    17 => "10111101100001001000011011100110", 
    18 => "10111101111001111011111111101010", 
    19 => "10111101000000010101000010001001", 
    20 => "00111110010100100011111000100101", 
    21 => "10111110011111111011001000110000", 
    22 => "10111110110100110111101100011100", 
    23 => "10111110100011101100000100011110", 
    24 => "00111110000011010100001111101011", 
    25 => "10111100100001001110011011011110", 
    26 => "10111101101011011010001000101100", 
    27 => "10111101110001010001111100101001", 
    28 => "10111101111010011101010111001001", 
    29 => "00111110010001000100110101000001", 
    30 => "10111101101110010101010111001001", 
    31 => "00111100111011011101100100011001", 
    32 => "00111101100100001101001100000010", 
    33 => "00111101001111010000110011000110", 
    34 => "00111010100011110000001110100101", 
    35 => "00111101101001010101101110000111", 
    36 => "00111100111101111101101100100110", 
    37 => "00111100111001111111101101101100", 
    38 => "00111110001100100001100110001110", 
    39 => "00111110001000011110111000111011", 
    40 => "00111101100011000101010010111011", 
    41 => "10111101001011010001000101011001", 
    42 => "10111101101101111100101001001000", 
    43 => "10111110100100100001000010010101", 
    44 => "10111101110001010111101111110011", 
    45 => "10111110000011111000001111000011", 
    46 => "00111101100000000101110010000100", 
    47 => "10111110011000111110110010001101", 
    48 => "00111110100110001010100110110000", 
    49 => "10111100000111111011010010100101", 
    50 => "00111110010011111101001010110111", 
    51 => "00111110001101110111101100000000", 
    52 => "10111101011101110110000111001101", 
    53 => "10111110111111110110100010101110", 
    54 => "10111011011110010010001110010011", 
    55 => "10111101100110100000110000001011", 
    56 => "10111101111110111100001001101111", 
    57 => "00111101000000001010001010110010", 
    58 => "00111101001000001100011101001000", 
    59 => "00111101111001101011001000001001", 
    60 => "10111101000001000110001110111101", 
    61 => "10111110101011000100011010111010", 
    62 => "00111101101101111100000111110100", 
    63 => "10111001011111101100110010111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiXh4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiXh4 is
    component conv_2_conv_2_weiXh4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiXh4_rom_U :  component conv_2_conv_2_weiXh4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


