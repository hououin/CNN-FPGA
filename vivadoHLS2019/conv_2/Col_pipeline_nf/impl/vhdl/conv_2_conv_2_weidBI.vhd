-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidBI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidBI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101110001010111101001100", 
    1 => "10111110101110000100001111110000", 
    2 => "10111101010111110010001100011000", 
    3 => "10111101101000010010110111101110", 
    4 => "00111101110101101000000001011011", 
    5 => "00111110011010000111000100010000", 
    6 => "00111101011000110111001110010101", 
    7 => "00111101110111001110111101110101", 
    8 => "10111011011111000001111011111111", 
    9 => "00111110000000101000110110011100", 
    10 => "10111101000001100000100010101110", 
    11 => "10111101101011010110100100000111", 
    12 => "00111110000000101110110000011010", 
    13 => "10111110101101111011001101110011", 
    14 => "10111101000011000001000100101001", 
    15 => "00111101111110101011010111001101", 
    16 => "10111101100001011010100011011111", 
    17 => "00111110001000010011010111111001", 
    18 => "10111110000101101100111110110000", 
    19 => "00111101010000101000000001111010", 
    20 => "10111111000100110010111000001101", 
    21 => "10111101110000101111111010101100", 
    22 => "10111110001110001101011101111111", 
    23 => "10111011111011101100000110110110", 
    24 => "00111101000011110111011010111100", 
    25 => "00111110000011000011001101001110", 
    26 => "00111110000100101101110110001000", 
    27 => "10111110001010000100101100101010", 
    28 => "10111101010001100110001000100110", 
    29 => "10111110000111000010101000110011", 
    30 => "10111110010000000000011011000010", 
    31 => "00111110001100110000011010101000", 
    32 => "10111101100110101101100110100010", 
    33 => "10111100100111111010110011000010", 
    34 => "00111101001100001100011110010010", 
    35 => "10111110000000101100101110101111", 
    36 => "00111100101011010111010101001111", 
    37 => "10111100011011101001001011100101", 
    38 => "10111101110011010101011001100100", 
    39 => "00111110001001001000000111001100", 
    40 => "10111110000101110111000101111111", 
    41 => "00111101111000010101011001010011", 
    42 => "00111110001111010100000111011100", 
    43 => "00111101111110010110010000010111", 
    44 => "10111110010111110101111010110110", 
    45 => "10111110000001011110010100110010", 
    46 => "00111011110000110011101001110001", 
    47 => "00111100010111111101011000001000", 
    48 => "10111110001101001010101100110011", 
    49 => "10111110010010101100101011000011", 
    50 => "00111110000110010110011101000100", 
    51 => "00111110010110001001000100011010", 
    52 => "10111100001011111100010010110000", 
    53 => "10111101110111111100110011110101", 
    54 => "10111110100000001000010011011011", 
    55 => "00111011111100111010011000011001", 
    56 => "00111101010010011100111010010110", 
    57 => "10111011101100100101011011100110", 
    58 => "10111110001100011101010011010111", 
    59 => "00111110000010000000001000010000", 
    60 => "10111101010100100001010101110011", 
    61 => "00111110010101101011011001000010", 
    62 => "00111110000001010011001100011001", 
    63 => "00111110001011111010100100111110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidBI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidBI is
    component conv_2_conv_2_weidBI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidBI_rom_U :  component conv_2_conv_2_weidBI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


