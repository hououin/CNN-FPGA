-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibun_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibun_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110001110110011011110110010", 
    1 => "10111110101101110010000100101011", 
    2 => "00111101011101011010001111110101", 
    3 => "10111101101101110011101110010111", 
    4 => "10111101101101111011001111001011", 
    5 => "00111110001100101111100010011111", 
    6 => "00111101110000011100100111110100", 
    7 => "10111110010110011101100011100010", 
    8 => "10111101000000010100100110011000", 
    9 => "00111101001101000100111101100010", 
    10 => "00111100100010000010010111000011", 
    11 => "00111110011011110101110101001000", 
    12 => "10111101110010000010011000101100", 
    13 => "00111100101011001000011101100011", 
    14 => "00111110010010100100011010101100", 
    15 => "00111110010001111010110100010011", 
    16 => "00111101100011011101000100100110", 
    17 => "00111101100011101010111011000101", 
    18 => "00111110000011100101010011011100", 
    19 => "00111110001000011101101101111101", 
    20 => "10111110000111110010000100001100", 
    21 => "10111101111101011010001000001111", 
    22 => "00111101100110111001111011000111", 
    23 => "10111101101010101111100011100000", 
    24 => "00111110011101010001001101111011", 
    25 => "00111101100010011011000011110010", 
    26 => "10111101101101001001101110010110", 
    27 => "00111101111111010001111010000000", 
    28 => "00111101101110101001100101110000", 
    29 => "00111101110000110101111111110000", 
    30 => "10111100000000101101100001010101", 
    31 => "10111110001010111000111000101100", 
    32 => "00111110100011110000000101011000", 
    33 => "10111110101100011000001101001100", 
    34 => "00111110001101111100101110010010", 
    35 => "10111110100010111010010011110000", 
    36 => "10111110001010000011010010100000", 
    37 => "10111101110100001000010010001111", 
    38 => "00111110000111010011000000111010", 
    39 => "10111101101101001110110101010001", 
    40 => "00111110100011001010000100011011", 
    41 => "00111110011100001000000000100001", 
    42 => "10111101111000010001011011001010", 
    43 => "10111110000100111101100111111001", 
    44 => "00111101100100100101001001000011", 
    45 => "10111100001110001111111000001101", 
    46 => "00111110001011011010000011100011", 
    47 => "00111101011111100101110000010100", 
    48 => "00111101101000000100100111011111", 
    49 => "10111110110110000011011100110110", 
    50 => "00111101100111101101000010100111", 
    51 => "10111110111000111110011001100110", 
    52 => "10111101111010101010000101011000", 
    53 => "10111110000111110011100100011111", 
    54 => "00111110010011101100100101001101", 
    55 => "10111101101111011110001101011011", 
    56 => "10111100001101010000100000011001", 
    57 => "00111110101001000111000010001100", 
    58 => "00111100111010000000110100101000", 
    59 => "00111101111100000010111100100110", 
    60 => "00111101001011000111001110010100", 
    61 => "00111101111100000111111000101001", 
    62 => "10111110011011100101010110001001", 
    63 => "10111110100010100101110001100110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibun is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibun is
    component conv_2_conv_2_weibun_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibun_rom_U :  component conv_2_conv_2_weibun_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


