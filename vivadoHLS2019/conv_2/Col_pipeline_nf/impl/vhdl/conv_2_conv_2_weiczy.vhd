-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiczy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiczy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011100101110000100010111", 
    1 => "10111101110000101100001100011111", 
    2 => "10111110010111000010000011101111", 
    3 => "00111101010101110110001001111101", 
    4 => "00111100100110101001100001101110", 
    5 => "10111010111011101001111001100100", 
    6 => "00111101000110010110001010110111", 
    7 => "10111101000001110000010100010011", 
    8 => "10111110011100000111101010000111", 
    9 => "00111101111001000100110011111110", 
    10 => "00111101100100111100001100011011", 
    11 => "10111100111001001101010111000001", 
    12 => "10111101010100110110010001101101", 
    13 => "10111110100001010010111001100111", 
    14 => "10111101110100110011110101001011", 
    15 => "10111100110000011010010011010111", 
    16 => "10111101101011001011000011100011", 
    17 => "00111101100100111111110101001110", 
    18 => "10111110010100100111000000101111", 
    19 => "00111110000110001110111101101110", 
    20 => "00111110011100110111010011110101", 
    21 => "10111110001011000000111101011110", 
    22 => "10111110101111100111100010010011", 
    23 => "00111101100110001010110101011101", 
    24 => "10111101110010101111100001000101", 
    25 => "10111100101101101101001110101111", 
    26 => "10111100101110001100011010001101", 
    27 => "10111110010000011001011111011000", 
    28 => "10111110000101100111001101001110", 
    29 => "10111110000011001101101010111101", 
    30 => "00111110001101000001100001011001", 
    31 => "00111110011001111111000110000001", 
    32 => "00111101011010010100001110011010", 
    33 => "00111110000101001111101100111001", 
    34 => "00111101111001101110111000101001", 
    35 => "00111101100001000010110010101100", 
    36 => "10111100100011110001001101011101", 
    37 => "00111101010101101101100100111100", 
    38 => "00111101000001111100000000011100", 
    39 => "10111110100001010010010011100100", 
    40 => "10111110000010011100111110110101", 
    41 => "00111100110100101001100001001001", 
    42 => "10111101110001011000111110101010", 
    43 => "00111110000011110110000110000010", 
    44 => "00111110011001010110101110001101", 
    45 => "00111110010100110101100101010100", 
    46 => "00111110011001000110100000011100", 
    47 => "00111101111100000111000111110111", 
    48 => "00111110100010001011110010111011", 
    49 => "10111110010100000111010110111001", 
    50 => "10111101110011000101001010110100", 
    51 => "10111100001000010100101101011000", 
    52 => "10111101001011110011010100100100", 
    53 => "10111101100010111111110111110000", 
    54 => "10111101101010010110111010111010", 
    55 => "00111110000101011000111000100000", 
    56 => "00111101011001010010010110100101", 
    57 => "00111110001001100110110010000110", 
    58 => "10111101001000010101101111011101", 
    59 => "10111101011011101001101110000011", 
    60 => "10111110100101111000100111000101", 
    61 => "00111100000011111000111010111101", 
    62 => "10111011101101010001110111111000", 
    63 => "00111101100011101001111010110101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiczy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiczy is
    component conv_2_conv_2_weiczy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiczy_rom_U :  component conv_2_conv_2_weiczy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


