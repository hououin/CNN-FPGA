-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieFT_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieFT_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100011110001110100110101", 
    1 => "10111110100101110100001101001001", 
    2 => "00111110000001001101111110000111", 
    3 => "00111101110110110101010010101001", 
    4 => "10111100101000101000100010000011", 
    5 => "10111110010010010000011011011111", 
    6 => "00111110001101101000111101111000", 
    7 => "10111110000000010000101000110010", 
    8 => "10111101000110111101100100111101", 
    9 => "00111101001100110001111110101111", 
    10 => "10111101110111000001011010011011", 
    11 => "10111101101111000111011001101000", 
    12 => "00111101111010111101101011101110", 
    13 => "00111100111001101110001101101001", 
    14 => "00111011111000100000010000110010", 
    15 => "00111110011000010000010101001101", 
    16 => "00111101000000001010100000101101", 
    17 => "00111101111000100001110111100101", 
    18 => "10111101111010111010011010011000", 
    19 => "10111101011001010100011000011011", 
    20 => "10111101010101110100111000101001", 
    21 => "10111110000011011100100011000010", 
    22 => "10111101110100100001111101110100", 
    23 => "00111101101010110000011010100100", 
    24 => "10111100111101100011111111110011", 
    25 => "00111101110000001011110001000100", 
    26 => "10111101000000000111001010101111", 
    27 => "00111110000101111100111010000110", 
    28 => "00111110001110100010100100100111", 
    29 => "10111101101110011110111111101100", 
    30 => "10111110000100011110110001000011", 
    31 => "00111101101111001101100100111111", 
    32 => "00111101101010010111111111111010", 
    33 => "10111100010001010011001000000001", 
    34 => "10111101101111111111111001101010", 
    35 => "10111101000100100001101111110000", 
    36 => "10111101110110001111100000001111", 
    37 => "00111100000001111101011011110011", 
    38 => "00111101100010111001100100101011", 
    39 => "10111110001000010001100101110011", 
    40 => "10111110000110011001000011010100", 
    41 => "00111110001110100101011011001010", 
    42 => "10111101101111110111001111100001", 
    43 => "00111101101001101001011000000100", 
    44 => "00111011011101010001101100011101", 
    45 => "10111110101000111110101010101101", 
    46 => "00111101111011111001001010111110", 
    47 => "00111110011001100101101110001101", 
    48 => "10111101100101000110000100010110", 
    49 => "00111110010101000110011100011100", 
    50 => "00111101000111001011010001011110", 
    51 => "10111110011000001111011000110100", 
    52 => "10111100101000010001111001000000", 
    53 => "10111110000110001111110001000101", 
    54 => "00111101111011100010100001100000", 
    55 => "10111101011110111010110011011001", 
    56 => "00111101111101010000100001010011", 
    57 => "00111011000100100111000110001000", 
    58 => "00111101110010001110001010101001", 
    59 => "10111001001100110111011100010010", 
    60 => "10111101111001110000000110010000", 
    61 => "10111101101101011101000110011010", 
    62 => "10111101010001101100110110100011", 
    63 => "10111100001100010001110111000110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieFT is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieFT is
    component conv_2_conv_2_weieFT_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieFT_rom_U :  component conv_2_conv_2_weieFT_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


