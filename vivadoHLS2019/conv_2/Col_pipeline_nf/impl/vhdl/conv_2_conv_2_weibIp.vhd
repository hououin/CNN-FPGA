-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibIp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibIp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100011111011001011111000001", 
    1 => "10111110000101001100100000000010", 
    2 => "10111100011110111111010011001000", 
    3 => "10111101111110011101110101110110", 
    4 => "00111101110000001100000101000110", 
    5 => "00111100110010111101100011111101", 
    6 => "10111101110001010101010011101101", 
    7 => "10111100110111001100010011010100", 
    8 => "00111100100001011010011100110110", 
    9 => "10111110000010101011010010001101", 
    10 => "00111101100010100100110110001101", 
    11 => "00111100111110000100110110010111", 
    12 => "10111110000101001000101010110111", 
    13 => "00111110100000000100010001100110", 
    14 => "10111101101001011100110100000010", 
    15 => "00111101101101101001111101101010", 
    16 => "00111101111001010010111100000010", 
    17 => "10111100101000000001010011100001", 
    18 => "00111101101000100011111011111011", 
    19 => "10111110000001110100101101101111", 
    20 => "10111101101111100111001110011001", 
    21 => "00111110010011000101110001010111", 
    22 => "00111101101000100111110000101100", 
    23 => "10111100001011000001000101001011", 
    24 => "00111110001011110000000011110000", 
    25 => "00111100001100000001110101100100", 
    26 => "10111101101000111101011011001111", 
    27 => "10111110010010011011011010100101", 
    28 => "00111101011111100000010010001010", 
    29 => "10111101011101000111010101011110", 
    30 => "10111110000000001110010100100010", 
    31 => "10111110100111110101101101100000", 
    32 => "00111101111111101000100111011000", 
    33 => "10111101111011011101111100100100", 
    34 => "00111100101111001011110100101100", 
    35 => "10111110001101001100011110110001", 
    36 => "10111101100100000000010011111100", 
    37 => "10111110001000101110100101000010", 
    38 => "00111101101011010101011111110011", 
    39 => "00111110001110001010110010011011", 
    40 => "00111101010010111010111100000001", 
    41 => "00111101101100100011111100010010", 
    42 => "00111101011101111000001011010101", 
    43 => "10111101111000111010111101101110", 
    44 => "10111110001011111111011011000111", 
    45 => "00111110000110101000101011001000", 
    46 => "00111101110101111010010110011001", 
    47 => "10111101001100100101110011011011", 
    48 => "10111101001100001100111110111001", 
    49 => "10111110001100011101110011011111", 
    50 => "10111101111101001111101010101000", 
    51 => "10111101100001010100100001001010", 
    52 => "10111101111111111001011111111011", 
    53 => "00111100101100011100001011010010", 
    54 => "00111110010101011101100010111000", 
    55 => "00111101101110001010111010010111", 
    56 => "00111101101111111100000100100000", 
    57 => "10111101111001110100110001100000", 
    58 => "00111110010100001000110111000001", 
    59 => "00111101000100111000011001110101", 
    60 => "10111101101011000111101010111011", 
    61 => "00111101011001000001010110110101", 
    62 => "10111100011011011110111110010010", 
    63 => "10111101001010011100011001110010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibIp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibIp is
    component conv_2_conv_2_weibIp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibIp_rom_U :  component conv_2_conv_2_weibIp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


