-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibVr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibVr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000001011110011110010011", 
    1 => "10111101111001111000001111010001", 
    2 => "00111101001100001111101000101011", 
    3 => "10111110001000010101100000010101", 
    4 => "10111110001000100101111111011110", 
    5 => "10111110001110010100001100000010", 
    6 => "10111110110000001101110001010001", 
    7 => "10111101101001000010001010110100", 
    8 => "00111101101010000111010111101110", 
    9 => "10111101010111010000100011011100", 
    10 => "00111011110001011110000100110110", 
    11 => "10111100001101111111100010111110", 
    12 => "10111110011011100010001011111110", 
    13 => "10111110110000011011101101101001", 
    14 => "00111110010110110000010101001101", 
    15 => "00111101100100101111010011110111", 
    16 => "10111110100101100011011000101101", 
    17 => "10111110000010001101101111111110", 
    18 => "10111110100011000110110000000101", 
    19 => "10111101011110001001000111101011", 
    20 => "10111110100001101001010111111001", 
    21 => "10111100011001001010110001011001", 
    22 => "10111110100101000010001001100011", 
    23 => "00111011101100101111111101110110", 
    24 => "10111110010101001000100010000010", 
    25 => "10111101111110100110111111100011", 
    26 => "10111101100100000101110000010000", 
    27 => "00111101111101111000010001000101", 
    28 => "10111011100011011111001100000111", 
    29 => "00111100110111100110101011011100", 
    30 => "10111110000000010110001110000001", 
    31 => "00111011100001100010111011101110", 
    32 => "10111110100001000100110100011011", 
    33 => "10111110100001001111101110001011", 
    34 => "10111101011100011011111101010001", 
    35 => "10111011010010111001011110010010", 
    36 => "10111110100101110001010011101110", 
    37 => "00111101100101011110111100110010", 
    38 => "10111101010101101010101111010001", 
    39 => "00111101011001101101011001111111", 
    40 => "00111101001100010111101001101111", 
    41 => "10111110000000101000000111001011", 
    42 => "10111110110100010010101001010010", 
    43 => "10111101001011100001010100110001", 
    44 => "10111100100111111101101110000101", 
    45 => "10111101101011101101010111100101", 
    46 => "00111101010011010100111000010110", 
    47 => "00111110001010011110100001100010", 
    48 => "10111110000100100110001100111110", 
    49 => "10111110100011001101000001001000", 
    50 => "10111110110010111011100101111000", 
    51 => "00111010100001010000100101000011", 
    52 => "10111110001011001000001001011110", 
    53 => "00111110000000101110000110011101", 
    54 => "00111110001010010010111110000100", 
    55 => "10111101111100100011110011000111", 
    56 => "10111101011100100010001001111010", 
    57 => "10111110001000110110110100100000", 
    58 => "00111110001010001111001110011011", 
    59 => "10111110001000101100000101101010", 
    60 => "10111101100111101011110001100001", 
    61 => "10111101010010001101010000011110", 
    62 => "10111110000101111111011111100011", 
    63 => "10111101100100110000101000110110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibVr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibVr is
    component conv_2_conv_2_weibVr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibVr_rom_U :  component conv_2_conv_2_weibVr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


