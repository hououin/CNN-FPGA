-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiewR_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiewR_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001000010001010011001010", 
    1 => "10111110101010010110010011101011", 
    2 => "10111101101111010010101010111111", 
    3 => "10111101011110111101001010111101", 
    4 => "00111101111101000111010100001010", 
    5 => "10111110101000010100000001101101", 
    6 => "00111101101100100001010100100000", 
    7 => "00111101010001011010010111100000", 
    8 => "00111101100111001010101111110001", 
    9 => "10111110001010001101001010000101", 
    10 => "00111100100010010101100111001111", 
    11 => "10111110001101001100101001100111", 
    12 => "00111101011011011100101011100010", 
    13 => "00111101101111010111100110001110", 
    14 => "00111101010000000110110111010111", 
    15 => "10111100111000111111011100001110", 
    16 => "10111101011010010010010110110001", 
    17 => "10111110001101101001010001000101", 
    18 => "10111110010000000000010001011010", 
    19 => "00111100110011110111010011011100", 
    20 => "10111100001100101000111011110101", 
    21 => "00111101101110000100111000011100", 
    22 => "00111011100011010000100111110000", 
    23 => "00111110001011101011011000001110", 
    24 => "00111101001011100010110011011000", 
    25 => "00111101101000010110001011101101", 
    26 => "10111110000000111011001000011100", 
    27 => "10111101111100010110110011111101", 
    28 => "00111100100110111010000000100110", 
    29 => "10111101100011110000000010001010", 
    30 => "10111110000011001101001101001110", 
    31 => "00111011000100011001100110010000", 
    32 => "10111110010010001101100010001001", 
    33 => "00111101110011000110001011011111", 
    34 => "10111110010111101110001010111011", 
    35 => "10111110100111101010111001011001", 
    36 => "10111101111011100111000110100101", 
    37 => "00111110000011001001001001101010", 
    38 => "00111101101000111101010011101000", 
    39 => "00111101110101000111011000011010", 
    40 => "00111101101011001010011100000111", 
    41 => "00111100011001101011001011111110", 
    42 => "00111101111110100100101101101010", 
    43 => "10111101101001100110101111001000", 
    44 => "10111101000101010110100111011000", 
    45 => "10111110000100101110110111100011", 
    46 => "00111011000011001110111101110100", 
    47 => "00111101001000101011100101101110", 
    48 => "00111100101010111111001101101110", 
    49 => "00111101110001110001001111100111", 
    50 => "00111100110111001010011001100110", 
    51 => "00111101001111001111110011100010", 
    52 => "00111110000101010110011100101011", 
    53 => "00111101100111011110101000101111", 
    54 => "00111101100111001100111110011010", 
    55 => "10111110011001110010001101011001", 
    56 => "10111101010110010110000111100001", 
    57 => "00111101101100001110111100000110", 
    58 => "00111110010011000100110100000101", 
    59 => "00111100111100111010001000101000", 
    60 => "10111110000001111111011101111111", 
    61 => "10111101101100011010111011110100", 
    62 => "10111101000010101111101010111001", 
    63 => "00111101101000100001100111111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiewR is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiewR is
    component conv_2_conv_2_weiewR_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiewR_rom_U :  component conv_2_conv_2_weiewR_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


