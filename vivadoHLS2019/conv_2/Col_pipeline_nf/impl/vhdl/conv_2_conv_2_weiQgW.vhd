-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiQgW_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiQgW_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101100011001001001111111", 
    1 => "10111101011101111101010000100000", 
    2 => "10111110000000100100110111010110", 
    3 => "00111101110011100001000001110001", 
    4 => "10111000100100001110011001001010", 
    5 => "00111101000110100100011000000111", 
    6 => "10111010011011001100011101101001", 
    7 => "10111110001001101111000111100001", 
    8 => "00111110001110000100100001011001", 
    9 => "00111101001000101010011011010011", 
    10 => "10111100010011100110111001010000", 
    11 => "10111101101101011010100000010101", 
    12 => "00111101000110001101101011011111", 
    13 => "10111101010111111110110010100110", 
    14 => "00111100110110000010010100100000", 
    15 => "00111100100101110010000010111100", 
    16 => "10111101010101001100100000100111", 
    17 => "10111101010110110100001100010101", 
    18 => "10111100100100011001010110101011", 
    19 => "10111110000110000100010011101000", 
    20 => "00111101101011110011010111100111", 
    21 => "10111110000110001111001110010101", 
    22 => "10111101011111010100100111000100", 
    23 => "00111100010000101011111101100001", 
    24 => "10111100100100000001101000110011", 
    25 => "00111101000001011011110101011101", 
    26 => "00111110000101001101011110110011", 
    27 => "10111100100010101101100011000101", 
    28 => "00111100101100100000111101010010", 
    29 => "10111100110011100101100011000101", 
    30 => "10111011111010010101001111001000", 
    31 => "10111110010010011010111011011011", 
    32 => "00111101010001111100011100000001", 
    33 => "10111110010111110101010011001100", 
    34 => "00111101101100000010010100010100", 
    35 => "00111101110101111101010000100101", 
    36 => "10111110011101011110110111001000", 
    37 => "00111101100000000011100101100000", 
    38 => "00111101011101000000000100001000", 
    39 => "00111100100000010001000000010000", 
    40 => "10111101011010110010101110000110", 
    41 => "00111110001101100010110010010001", 
    42 => "10111110000011100010111000001001", 
    43 => "00111101010001101110111010011110", 
    44 => "00111101101001000111011101000000", 
    45 => "00111101100101001101010101000111", 
    46 => "00111101101100010010100100111011", 
    47 => "00111110001001000011010011100111", 
    48 => "10111101100101100111101000100111", 
    49 => "10111110101001010010111000100000", 
    50 => "00111100000100001010001101111000", 
    51 => "00111101101001111001100011011101", 
    52 => "10111110001110010100100001100111", 
    53 => "10111110000010001100011000011111", 
    54 => "00111100101011010001000111001011", 
    55 => "10111110001010111110100010111000", 
    56 => "10111100011111101000101011100010", 
    57 => "10111101110011101011100000111011", 
    58 => "00111011110111000000100011100111", 
    59 => "00111100110011010011111001100101", 
    60 => "10111011000110001110110011111101", 
    61 => "00111101100010011100001101110100", 
    62 => "00111101010001101010110101101111", 
    63 => "10111011111001000011100101101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiQgW is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiQgW is
    component conv_2_conv_2_weiQgW_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiQgW_rom_U :  component conv_2_conv_2_weiQgW_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


