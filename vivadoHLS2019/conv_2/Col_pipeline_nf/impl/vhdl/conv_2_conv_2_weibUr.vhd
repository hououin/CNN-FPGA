-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibUr_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibUr_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110010110001011101011011111", 
    1 => "10111101110110110010110101100111", 
    2 => "10111110000001111010001100111001", 
    3 => "10111110001001101101100001100110", 
    4 => "00111101111001110011101100001011", 
    5 => "00111101001111011011000010011011", 
    6 => "10111110001110011111000000111000", 
    7 => "10111110001110010001001010110011", 
    8 => "10111110101001110100100100111111", 
    9 => "00111110000010010001111010110110", 
    10 => "00111101101101101001111010101001", 
    11 => "10111101000110010101001010100100", 
    12 => "10111110000111100011110000111001", 
    13 => "10111101011111101010001101011010", 
    14 => "10111110100011010100101111000100", 
    15 => "10111110101000110100110111111010", 
    16 => "10111101101110011101101010011111", 
    17 => "10111101110101001101000001110110", 
    18 => "10111110111001010010110000110101", 
    19 => "10111101001000100111010100110101", 
    20 => "10111101111111101101100001001010", 
    21 => "00111101001110000010100001000101", 
    22 => "10111100111010011110100011101000", 
    23 => "00111101001110111110001110110011", 
    24 => "10111101111011010001001111110100", 
    25 => "10111110110110001111101110010011", 
    26 => "00111110010001110111011010110111", 
    27 => "00111100011011001000010001001000", 
    28 => "10111110001111010011001110001011", 
    29 => "00111101101001110001111001000001", 
    30 => "10111110000111011101000011111101", 
    31 => "00111101011010100011100101101000", 
    32 => "10111101011111111010000011011101", 
    33 => "10111101101100010001010010111001", 
    34 => "10111101110111110111111110110111", 
    35 => "00111110000010111011101010100001", 
    36 => "10111110101100101000011001111110", 
    37 => "00111100100101111001000011001011", 
    38 => "10111101100111010101001111111110", 
    39 => "10111110101110010100010100000100", 
    40 => "00111101001001011110111100000011", 
    41 => "10111101110000000101100101101000", 
    42 => "10111110001110000001010101000100", 
    43 => "10111101111110111101101110100110", 
    44 => "00111011110000111000001100010111", 
    45 => "10111101001100011010000010101111", 
    46 => "10111110000101000011100010111100", 
    47 => "00111101100010001101011110000110", 
    48 => "10111110010010101101111110001000", 
    49 => "10111101010001110110001101001111", 
    50 => "10111110110010110111010111111001", 
    51 => "00111101111010110101001010011010", 
    52 => "10111110000001001111110001100110", 
    53 => "00111110100110011101111101111101", 
    54 => "10111100001100100011100001111101", 
    55 => "10111100111000010011001001100101", 
    56 => "10111100010000010100010001001100", 
    57 => "10111110001001110010000100111011", 
    58 => "00111101000101111100000000101101", 
    59 => "10111110000011011110101000101001", 
    60 => "10111101100101010110111110100110", 
    61 => "10111110011000001000110110110001", 
    62 => "10111110101011001010001101111010", 
    63 => "10111110011000111001011111100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibUr is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibUr is
    component conv_2_conv_2_weibUr_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibUr_rom_U :  component conv_2_conv_2_weibUr_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


