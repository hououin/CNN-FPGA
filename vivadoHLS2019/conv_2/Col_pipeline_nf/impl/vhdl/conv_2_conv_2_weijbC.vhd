-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weijbC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weijbC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000010001001001110010100", 
    1 => "10111110000100100001110001111010", 
    2 => "00111100011010000010100011110100", 
    3 => "00111101111011001010100100010010", 
    4 => "10111101000010010111100110101111", 
    5 => "10111101110111001110001010111001", 
    6 => "10111101111100000000111110001101", 
    7 => "10111101101010000100000111110101", 
    8 => "00111101110101111001110100111011", 
    9 => "10111101111100110110110000111100", 
    10 => "10111101010111001001100000001100", 
    11 => "10111110000100000001100011110001", 
    12 => "10111110001111011101010001011111", 
    13 => "10111101001101101011101100010100", 
    14 => "00111100110100100100000010111100", 
    15 => "10111101100011111001000111011010", 
    16 => "10111110100010011101111100001001", 
    17 => "00111011000010011000101000110101", 
    18 => "00111101111011001101011010010011", 
    19 => "00111110000011000111100000110010", 
    20 => "10111101100100111101110011110010", 
    21 => "10111101100001100111001111001011", 
    22 => "10111101100011010001010111010101", 
    23 => "10111100111111011010101010001001", 
    24 => "10111110010111001100001010101010", 
    25 => "10111110001110110000101101110101", 
    26 => "10111101101011010101001010111100", 
    27 => "00111100110100010011111110111111", 
    28 => "10111100001100011001110111100111", 
    29 => "10111101101100111001010101000100", 
    30 => "10111101100001010101001101110110", 
    31 => "00111110000001000011100000001111", 
    32 => "10111101101011000001001101011101", 
    33 => "10111101111101111010001001000001", 
    34 => "10111101110001001011010111101011", 
    35 => "00111110100000001101111100100110", 
    36 => "10111110011000011100011101101010", 
    37 => "10111100011001101101100110111000", 
    38 => "00111100110101101010111110100010", 
    39 => "10111100011110001100001111111110", 
    40 => "10111100101001011000111100001011", 
    41 => "10111101110001101110110010001111", 
    42 => "10111100000011100111101101111111", 
    43 => "00111101010101111011011100111100", 
    44 => "00111011001001011000010010110111", 
    45 => "10111110000100101011001000101010", 
    46 => "10111100100010100100011111000000", 
    47 => "10111101100110100001010010111110", 
    48 => "10111011110110010101000100101101", 
    49 => "10111110100101000010111011100110", 
    50 => "10111110011011000100110011111101", 
    51 => "10111110000100000101011111101111", 
    52 => "10111110001100100000111101011010", 
    53 => "00111110000100110111110110000111", 
    54 => "10111100010011110011100101000101", 
    55 => "10111101100010110101011011011001", 
    56 => "00111101010000010000111001110001", 
    57 => "10111110000011001100010000011101", 
    58 => "00111101100111111000000010110000", 
    59 => "00111101000001111001111110010010", 
    60 => "00111101111011111101000111011110", 
    61 => "00111101100111001001000101001110", 
    62 => "10111101101111010101110111000000", 
    63 => "00111011101111101101110101010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weijbC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weijbC is
    component conv_2_conv_2_weijbC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weijbC_rom_U :  component conv_2_conv_2_weijbC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


