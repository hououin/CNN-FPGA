-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidXL_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidXL_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101110001101100111001101010", 
    1 => "10111110011001111110110101000010", 
    2 => "10111110100101100011011100100001", 
    3 => "10111100011000111111010010000000", 
    4 => "00111101010011001101101110011110", 
    5 => "10111101100101101001111011001110", 
    6 => "00111101110101100110010001111001", 
    7 => "00111101011001111100111111111011", 
    8 => "10111100100111010000001000100001", 
    9 => "10111101101011001110100011010000", 
    10 => "10111110001000011011001001101010", 
    11 => "10111101111111011000110100111110", 
    12 => "00111101101100011011010101111000", 
    13 => "00111100101000010011111001101110", 
    14 => "10111100011011110010101000011011", 
    15 => "00111101110011111011100111100011", 
    16 => "10111101001000001111000011010001", 
    17 => "00111101101110101000100100110110", 
    18 => "10111110001010100111011000110101", 
    19 => "00111101100010010010101011111101", 
    20 => "10111101100101111000011011010011", 
    21 => "00111101000101001110100000100111", 
    22 => "10111101101101100011101011011010", 
    23 => "00111101101000111100010100010001", 
    24 => "00111101110101111000100111100010", 
    25 => "00111101000011110001110111100010", 
    26 => "10111101101111001101001111100110", 
    27 => "00111101111111101000101001110010", 
    28 => "00111100010101100101000001110010", 
    29 => "10111110000111111101101001000010", 
    30 => "10111101110000011000011100100011", 
    31 => "00111100101110100010101111010010", 
    32 => "10111101010111110010100011001011", 
    33 => "00111100110000000100011101011000", 
    34 => "10111101100010110000110110010001", 
    35 => "10111110100011110101111101110011", 
    36 => "00111110100000011010000100110100", 
    37 => "10111101001001100000001010010010", 
    38 => "00111100101011000011100100100110", 
    39 => "10111110001000111100111000001000", 
    40 => "00111110001011001110001101100011", 
    41 => "00111101111010010100110101111001", 
    42 => "00111101111101011101000001010100", 
    43 => "00111101100011010001011010110111", 
    44 => "00111101100011100011000110111010", 
    45 => "10111101101000010111101011110110", 
    46 => "00111100111110111110010100101101", 
    47 => "00111100101110100010011001110110", 
    48 => "00111101000011100111011110010011", 
    49 => "10111101111000100111111001100011", 
    50 => "10111100101011001101101011100100", 
    51 => "10111110011000101001000101111101", 
    52 => "00111101110010000011000100111000", 
    53 => "00111110001101110110110100110000", 
    54 => "00111100111101010111100101010101", 
    55 => "00111101101010001111001010110111", 
    56 => "10111110010100111111011010010011", 
    57 => "00111011101100010010100101110010", 
    58 => "00111101110101101111000000100010", 
    59 => "10111100101000011110110101100011", 
    60 => "00111101101011010000111100011111", 
    61 => "00111110001110110000001010011001", 
    62 => "10111101111101100111011110111110", 
    63 => "10111101000110110111100110011101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidXL is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidXL is
    component conv_2_conv_2_weidXL_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidXL_rom_U :  component conv_2_conv_2_weidXL_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


