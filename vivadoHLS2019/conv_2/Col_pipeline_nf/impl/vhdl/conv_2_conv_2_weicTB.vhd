-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicTB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicTB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000000000011101001111001", 
    1 => "00111110000010001011000111100110", 
    2 => "00111100010111101111110011100010", 
    3 => "10111110000011110101011110001110", 
    4 => "10111110001000110010011000100001", 
    5 => "00111110000101101010010101011000", 
    6 => "10111110010010010100000101111000", 
    7 => "10111010100111100010110110001111", 
    8 => "10111101111011110101101100101000", 
    9 => "00111101111001111001111001011011", 
    10 => "00111101100100111110100001000101", 
    11 => "00111101011010100101100011100100", 
    12 => "10111110010110011010011011110010", 
    13 => "00111001110000000000001100001111", 
    14 => "10111101000001010011100100000011", 
    15 => "10111101011001001100001101111101", 
    16 => "00111101011011000001111001111110", 
    17 => "10111011000110011011010100101011", 
    18 => "00111110010110101000010001000010", 
    19 => "10111110000010001000001001100001", 
    20 => "00111101101000111011100000011100", 
    21 => "00111101110010010110010010110101", 
    22 => "00111101100110000011100011111101", 
    23 => "10111101111101010010011010110110", 
    24 => "10111101110100100110101100100001", 
    25 => "10111101101010100101111101001000", 
    26 => "10111100100011110110010111111111", 
    27 => "10111101000010101011101111110111", 
    28 => "00111101110110110010010010101101", 
    29 => "00111100100001010111111000110110", 
    30 => "00111110000011001000110111101100", 
    31 => "10111110100100000111010001000010", 
    32 => "00111101011111110101111011010110", 
    33 => "10111101010100000111100011001011", 
    34 => "10111100110000101001110100101100", 
    35 => "10111101110101011000111111111000", 
    36 => "10111110011100100101001000100110", 
    37 => "10111110001010110111010010110001", 
    38 => "10111101101101000101111111001000", 
    39 => "00111101011110101001110000101010", 
    40 => "00111100111110110100010001010001", 
    41 => "10111101100010101110001101100001", 
    42 => "10111110010110111001011001111000", 
    43 => "10111101101111001011100100000001", 
    44 => "10111110011100101101000001100111", 
    45 => "00111110011010110100011010011001", 
    46 => "10111101010110000011000110011111", 
    47 => "10111101011010101111110001110101", 
    48 => "10111110110011010000000101110101", 
    49 => "10111101111110110001110101100010", 
    50 => "10111101100110011011010111000101", 
    51 => "00111101100100010001011101011001", 
    52 => "10111110010100000101101001100111", 
    53 => "00111101110101100001111100110000", 
    54 => "10111110100110111111001011111000", 
    55 => "10111101111001011110110011111110", 
    56 => "00111011001101001100010110010000", 
    57 => "10111110100010101001011001110010", 
    58 => "10111101101001100111110000000011", 
    59 => "10111101111110011100101101101010", 
    60 => "00111110010010101101100111001111", 
    61 => "10111100110001010100100011010001", 
    62 => "10111101110010101011000100000000", 
    63 => "00111101100011011100101000111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicTB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicTB is
    component conv_2_conv_2_weicTB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicTB_rom_U :  component conv_2_conv_2_weicTB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


