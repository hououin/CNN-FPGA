-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidJJ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidJJ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100101000100100010101011101", 
    1 => "00111101001100111101110111001111", 
    2 => "00111101111111001000001100000010", 
    3 => "00111101010010111100000100000010", 
    4 => "10111100101111110010001000010111", 
    5 => "10111101110111010101100010100000", 
    6 => "10111110001110010111010010110000", 
    7 => "00111101100010000011011010011101", 
    8 => "00111101010100001000010001011011", 
    9 => "00111100011110111111111010000111", 
    10 => "10111110000100010101001111011110", 
    11 => "10111110100011011100010010001010", 
    12 => "10111100101111110001101111011100", 
    13 => "00111101011011011111001000011111", 
    14 => "10111101100111000001101101001100", 
    15 => "00111101110000101000111110010001", 
    16 => "10111100011011101110100011110011", 
    17 => "00111100110000111011110101010110", 
    18 => "10111100111101011001110001111111", 
    19 => "10111101100010110101000000000001", 
    20 => "10111110100010001111000010101011", 
    21 => "10111101010100100011100100001111", 
    22 => "00111101110001010101000100010011", 
    23 => "10111110011101000001101101111000", 
    24 => "00111100011010001110000111011110", 
    25 => "10111101000111001110010011010100", 
    26 => "00111100011101110011100101000000", 
    27 => "10111110011111010011010001101011", 
    28 => "10111101000000011110000001101000", 
    29 => "00111101111001110001011111100010", 
    30 => "10111110001100101110010111000001", 
    31 => "00111101010001001100101110011010", 
    32 => "10111110100100111000001101111011", 
    33 => "00111110010011000010010010000110", 
    34 => "10111101101101111010001111100001", 
    35 => "10111101010011000010001010110100", 
    36 => "00111101001000001111000011100111", 
    37 => "10111101110100000000011110101001", 
    38 => "10111101110011101111110111010011", 
    39 => "00111100110001100111000110011100", 
    40 => "10111101110000110001001001000100", 
    41 => "00111100111010001001111101101010", 
    42 => "00111101111001100111011101110100", 
    43 => "00111101001000111000010001110011", 
    44 => "00111100000111111101010111110110", 
    45 => "10111110100000110000110110011100", 
    46 => "10111110001011111111000111010010", 
    47 => "10111110001110111010110101001001", 
    48 => "00111100001001100000001001110110", 
    49 => "00111101010101100110110100100011", 
    50 => "10111101100001110001100101010011", 
    51 => "10111100100101111110000110010011", 
    52 => "00111100110110101101110111111110", 
    53 => "10111110000100011111001111110100", 
    54 => "10111011111100100000101011010101", 
    55 => "00111101111000100100010001100010", 
    56 => "00111100111101101011010111010001", 
    57 => "00111100000111101111001000001111", 
    58 => "10111110001101110000110101011011", 
    59 => "00111101011001011000001001000101", 
    60 => "00111101001111101010110101011111", 
    61 => "00111101110001101110000101101101", 
    62 => "00111100100101000100101110101001", 
    63 => "10111100010011011101010000101111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidJJ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidJJ is
    component conv_2_conv_2_weidJJ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidJJ_rom_U :  component conv_2_conv_2_weidJJ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


