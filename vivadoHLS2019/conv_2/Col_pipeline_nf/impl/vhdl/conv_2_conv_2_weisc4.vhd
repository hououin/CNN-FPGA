-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weisc4_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weisc4_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011011001010001011000000100", 
    1 => "00111100100001111100010010001000", 
    2 => "10111100101110101010011111100010", 
    3 => "00111101111011001000111001010100", 
    4 => "00111101111110010110001001010001", 
    5 => "00111101111011110101011100011010", 
    6 => "10111110010001111000101011010010", 
    7 => "00111110111000001100100001010111", 
    8 => "10111101001101001001011100001000", 
    9 => "00111110000001010011010100001101", 
    10 => "10111101111000010011001101001100", 
    11 => "00111101000000000110011111001010", 
    12 => "10111110011000111011001010101010", 
    13 => "10111110000101001100100010100000", 
    14 => "10111101000110101100100111001011", 
    15 => "00111110001110000001100001001011", 
    16 => "10111101100000110001011000100110", 
    17 => "10111101101101010001110110100011", 
    18 => "00111100011010011100011110011111", 
    19 => "00111110001000110111101110000001", 
    20 => "10111100101001110001010010111001", 
    21 => "10111101110111000110100011001110", 
    22 => "10111110010000101111000000000000", 
    23 => "00111110010110100010001001110110", 
    24 => "10111110100000000101010011101000", 
    25 => "00111110010100110100010111011001", 
    26 => "00111110011011011001101000110100", 
    27 => "10111110011101011101001011001011", 
    28 => "00111011000101101100000001010101", 
    29 => "10111110000110110101011010100101", 
    30 => "10111110100001000000110100010111", 
    31 => "00111101111101100011010001110011", 
    32 => "10111110010011100111001100110000", 
    33 => "00111100001001101100101110101000", 
    34 => "00111100001111110100111100001011", 
    35 => "10111101100101110101001000100101", 
    36 => "00111110000101001111000100010001", 
    37 => "10111110001100101010111001010101", 
    38 => "10111110101100011010001111001110", 
    39 => "00111101001100000011011100111000", 
    40 => "10111110010111111010111001010100", 
    41 => "10111110001000001110000101111100", 
    42 => "00111110010001010110101001110010", 
    43 => "00111110100000001010100100000111", 
    44 => "00111110000010111000111100110011", 
    45 => "10111110010001011110001010001010", 
    46 => "10111101101110001010100000101000", 
    47 => "10111101110100010001001101111111", 
    48 => "00111101010110111000001100101011", 
    49 => "10111110000010101110011010001111", 
    50 => "10111110000010000111000111011000", 
    51 => "10111110000101010100100000100111", 
    52 => "10111110000110010101011001011100", 
    53 => "10111011100001010100110110000001", 
    54 => "10111101111011010111111110111001", 
    55 => "10111110010011110000111100010110", 
    56 => "00111101000100010010011001010000", 
    57 => "00111110000111101111101100101000", 
    58 => "10111101101000100011100010010111", 
    59 => "10111110010110010111110111000001", 
    60 => "10111110000010101001000001100010", 
    61 => "00111101100111010111100010110000", 
    62 => "00111110010011001010000010001000", 
    63 => "00111101110011011101010000000001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weisc4 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weisc4 is
    component conv_2_conv_2_weisc4_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weisc4_rom_U :  component conv_2_conv_2_weisc4_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


