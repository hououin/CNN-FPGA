-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidOK_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidOK_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001010101110111000101011", 
    1 => "10111110010000000100011100101111", 
    2 => "10111110101010010100100101100101", 
    3 => "00111101010100110101000011010111", 
    4 => "10111101111111010100011100001001", 
    5 => "10111110110011110110010011001011", 
    6 => "10111110010010101101101011111000", 
    7 => "00111101001001110110011011011111", 
    8 => "00111100110111011001101111100110", 
    9 => "10111111000011011111100010000010", 
    10 => "10111110011001011100101101100011", 
    11 => "10111110100111001010010101011101", 
    12 => "10111110100001100101000100100001", 
    13 => "10111101110101111110111100000010", 
    14 => "10111100010110011100100110101000", 
    15 => "10111101101101001100110010001011", 
    16 => "10111110010111100011111100001100", 
    17 => "10111010000101111000001000100100", 
    18 => "10111110000101001011011011000000", 
    19 => "10111110001001110000011001110101", 
    20 => "00111110001111110100110111010110", 
    21 => "10111101100011001010111101010101", 
    22 => "00111101011110110010110010001000", 
    23 => "10111110001011111001010100001110", 
    24 => "10111110100000011000011111101001", 
    25 => "10111110000111111100001000010111", 
    26 => "00111101101011000100111101010010", 
    27 => "00111101110011010001111010110000", 
    28 => "10111110000001011011001110000011", 
    29 => "10111110100010011100111111001010", 
    30 => "00111110000110000111100001110010", 
    31 => "10111100111001110110100000000100", 
    32 => "10111110100111101001000010101001", 
    33 => "00111100010011101011010101010101", 
    34 => "10111110110010011100101001110000", 
    35 => "10111101100010110011000011001011", 
    36 => "10111110010110100110110011110110", 
    37 => "10111110000101000111000001001010", 
    38 => "10111110000100001101110101101110", 
    39 => "00111110011000111011001001111100", 
    40 => "00111110001011111100111011101001", 
    41 => "10111110100110000010001100011111", 
    42 => "10111101111001011100001111010110", 
    43 => "10111101111001010000110111100110", 
    44 => "00111100101000011110001110100111", 
    45 => "00111110100110101000000111000000", 
    46 => "10111110011010100001000111010010", 
    47 => "10111110100010111010100100000101", 
    48 => "00111110010101100001111010011110", 
    49 => "00111101110100011000001111001010", 
    50 => "10111110100011101011010100011100", 
    51 => "10111110010100011110101111100101", 
    52 => "00111101100001010111101101100101", 
    53 => "00111101110110010110000100011101", 
    54 => "10111101101101111100111010010101", 
    55 => "00111100000010100011010111111001", 
    56 => "00111101110100011101101110111011", 
    57 => "00111011110001001110011111110010", 
    58 => "00111100110010000100001100101101", 
    59 => "10111110010000110111100101010111", 
    60 => "10111110010000100110011000010001", 
    61 => "00111100100110010001011110001011", 
    62 => "00111110010101010100001011000010", 
    63 => "00111110000000111101011101101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidOK is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidOK is
    component conv_2_conv_2_weidOK_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidOK_rom_U :  component conv_2_conv_2_weidOK_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


