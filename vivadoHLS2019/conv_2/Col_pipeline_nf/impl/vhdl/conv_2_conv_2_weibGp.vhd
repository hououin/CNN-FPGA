-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibGp_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibGp_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000100101100000111101010", 
    1 => "10111101100101101101111100101001", 
    2 => "10111100111111011010100011011010", 
    3 => "10111101110000001100100001100011", 
    4 => "00111101111010111000110001010100", 
    5 => "10111010100011101011101111111010", 
    6 => "10111101100000011101001111110001", 
    7 => "00111110000001110111111000000111", 
    8 => "10111101011101101111101000010010", 
    9 => "00111100000110101011100111011110", 
    10 => "00111101011000001011100000111000", 
    11 => "00111100110100101100001000101011", 
    12 => "00111101000100011010001111100101", 
    13 => "10111101000000011111011100001011", 
    14 => "10111101101101001010011001011100", 
    15 => "10111101101010110100111010010000", 
    16 => "10111010110000001000001011111110", 
    17 => "10111101111110000011010111111001", 
    18 => "10111101001011001010101000000100", 
    19 => "00111100001111010101011001001111", 
    20 => "10111101110100110010110010010101", 
    21 => "00111100100011011000010010100111", 
    22 => "10111100111001001110001100001101", 
    23 => "10111100011100001110011111100001", 
    24 => "10111101100000011011101001001110", 
    25 => "10111101101101110100101100100011", 
    26 => "10111101111010011111010000101101", 
    27 => "10111110101101011000101011010001", 
    28 => "10111110000100110010110101100100", 
    29 => "00111101110110100100001100101011", 
    30 => "00111101100100110100101100010010", 
    31 => "10111110010101011110001110100000", 
    32 => "00111101010011111111101010000000", 
    33 => "00111100011100111001001101110001", 
    34 => "00111100110110100101111100101001", 
    35 => "10111101111100001110011110000100", 
    36 => "10111110011111011100100000000101", 
    37 => "10111101100011010011101011000011", 
    38 => "10111101110101100111000110000011", 
    39 => "10111101001001101110100101110010", 
    40 => "10111100101101010000001110011101", 
    41 => "10111110000010011011000010111001", 
    42 => "00111100100101100111001111000000", 
    43 => "00111100100000111111110101010111", 
    44 => "10111100001110011111000110100010", 
    45 => "10111110000001011000001001101011", 
    46 => "10111110001111000101001100000001", 
    47 => "10111101010001000101110111000001", 
    48 => "10111101101001011110110010100110", 
    49 => "10111110011111010110111010100011", 
    50 => "10111101101011001001110110111011", 
    51 => "00111101011101001110011000110000", 
    52 => "10111110010100010101010010111111", 
    53 => "10111101000111100100011011001100", 
    54 => "10111110001110110011000100110100", 
    55 => "00111100101010010011110000010001", 
    56 => "10111101101101000010000111100010", 
    57 => "00111100011010101011110011010110", 
    58 => "10111101110111110101001110111000", 
    59 => "00111101010101001011110101000001", 
    60 => "10111101000110101000000100011011", 
    61 => "00111101000100100000000111010000", 
    62 => "00111101110011111101101100111000", 
    63 => "00111100100100111010110000001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibGp is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibGp is
    component conv_2_conv_2_weibGp_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibGp_rom_U :  component conv_2_conv_2_weibGp_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


