-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicXB_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicXB_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110000101011001111100011011", 
    1 => "00111101111001001000011010100101", 
    2 => "10111101000111100000101101011101", 
    3 => "10111101111011000101000011100001", 
    4 => "00111101011011010010011111101110", 
    5 => "00111110010000001101100110011011", 
    6 => "10111101110000111010000110111111", 
    7 => "10111101100011100011011111010101", 
    8 => "10111101101101100110010100010100", 
    9 => "10111101001000100101101010011000", 
    10 => "00111110100111010101000101100001", 
    11 => "00111101011110001111110001010100", 
    12 => "00111101000100011011101011110011", 
    13 => "00111110000001111001010010001110", 
    14 => "10111101101010000110110110101011", 
    15 => "10111011111101100101100101010001", 
    16 => "00111101101011101010000100101001", 
    17 => "10111101101001001011000010011000", 
    18 => "00111110100001010001110111100000", 
    19 => "10111101010111010100101010010001", 
    20 => "00111101001010011111010000010001", 
    21 => "00111101101000010010101011010001", 
    22 => "00111110001110110000110000100000", 
    23 => "00111011111110101111111001101111", 
    24 => "00111100101111100110000111100000", 
    25 => "10111101101001101100100100101101", 
    26 => "10111110000000101101001100110001", 
    27 => "10111110011010011000111101010100", 
    28 => "00111101011101000000011110100110", 
    29 => "10111100001011111001011011111000", 
    30 => "00111011100011111000001110000010", 
    31 => "10111110011100001011101110111010", 
    32 => "00111110000100010101100100011000", 
    33 => "10111101000010001010001000101110", 
    34 => "10111101101100100111010110100001", 
    35 => "10111101110101111101111101100100", 
    36 => "00111101100110111011111010010101", 
    37 => "10111110000110011001011111100011", 
    38 => "00111101100000111000101101111111", 
    39 => "00111101010100111001110101011001", 
    40 => "10111101001111001111000001011000", 
    41 => "00111100101000010110101111010110", 
    42 => "10111110010111000101010010100000", 
    43 => "10111010101111011010001001001001", 
    44 => "10111110101010100101010001001101", 
    45 => "00111110011011100001110001100101", 
    46 => "00111100101101001010101011100110", 
    47 => "00111100101000111000011011101010", 
    48 => "10111110011010011010100010100110", 
    49 => "10111110100110110010010000100000", 
    50 => "10111101111000110101001111010101", 
    51 => "00111101101011110000100101010100", 
    52 => "10111110000100111010100110001011", 
    53 => "00111110011000111000100000001011", 
    54 => "10111110110011100100010011100010", 
    55 => "10111110001011011100111101110000", 
    56 => "10111100110111010001010111100111", 
    57 => "10111110100001101001111000100000", 
    58 => "00111011001001011110010111111000", 
    59 => "10111101111101100010100110010000", 
    60 => "00111101110000011011011101100000", 
    61 => "00111101001000001111000101111110", 
    62 => "10111101011011110010000011110010", 
    63 => "10111101100001011011101000111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicXB is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicXB is
    component conv_2_conv_2_weicXB_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicXB_rom_U :  component conv_2_conv_2_weicXB_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


