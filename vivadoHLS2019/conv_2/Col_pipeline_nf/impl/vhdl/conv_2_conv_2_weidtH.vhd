-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidtH_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidtH_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101100000111000001111000010", 
    1 => "00111110001111101101100000101011", 
    2 => "00111110001010011001000011101000", 
    3 => "10111101001101000000101010101100", 
    4 => "10111111000011101000000110110011", 
    5 => "10111101001001000111100011100001", 
    6 => "10111110101000000110110101010010", 
    7 => "10111110000100011010001010100111", 
    8 => "10111110100000000101000010100111", 
    9 => "10111010001011101111111000110101", 
    10 => "00111011101010011001010001100001", 
    11 => "10111100110100110110100001111100", 
    12 => "10111110110010000001110111101000", 
    13 => "10111110010000111010110000000010", 
    14 => "10111101101010110000110000100001", 
    15 => "10111101011011110000111111111000", 
    16 => "00111101100110101000001010010000", 
    17 => "10111101110001001010011110100111", 
    18 => "10111100011010011011100000010000", 
    19 => "00111101101001001100000111010001", 
    20 => "10111110100101101111010010110111", 
    21 => "00111110000010110110110011010000", 
    22 => "10111101111011001110011111100001", 
    23 => "10111101100110011110011110000010", 
    24 => "10111110100001000100111011010000", 
    25 => "10111110010110101000011100000011", 
    26 => "10111011001101011000001000001110", 
    27 => "10111101111000101000011110000100", 
    28 => "00111100110011001110011110010010", 
    29 => "00111101111010110001110100110011", 
    30 => "10111110000011001011110011010100", 
    31 => "00111100001110111011010110011000", 
    32 => "10111110011001110010000000101100", 
    33 => "10111011010101111010100111100001", 
    34 => "10111110001011000110110101100001", 
    35 => "10111110011111101100110110001111", 
    36 => "00111110000101100010100100000110", 
    37 => "10111101010101101000011001000010", 
    38 => "10111100100001110111000110010100", 
    39 => "10111110010011111011010001100001", 
    40 => "10111101010011001001010001111010", 
    41 => "10111110001100011101110100100101", 
    42 => "10111101110011001100101110101101", 
    43 => "10111110010100000101010001010110", 
    44 => "00111101010001100010010110100011", 
    45 => "10111110010010101010101111001000", 
    46 => "00111101101011011011001110011110", 
    47 => "00111101011010110001001000001000", 
    48 => "00111101111011011111000101111100", 
    49 => "10111101111010010001010000101001", 
    50 => "10111110111010000011011100010010", 
    51 => "10111011001111101111000111001010", 
    52 => "00111110001111001101110011101110", 
    53 => "10111101100001010111000101011000", 
    54 => "00111110011101100111000000010100", 
    55 => "00111100011001101000000110000010", 
    56 => "00111100110000001110011111100000", 
    57 => "10111101001010010101110001101001", 
    58 => "00111110000010011101110100101101", 
    59 => "00111101110101001100100011010001", 
    60 => "10111110100001001100010001001111", 
    61 => "10111110011111110010110110110100", 
    62 => "10111110001100010001000010000010", 
    63 => "10111110100010100110000000011001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidtH is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidtH is
    component conv_2_conv_2_weidtH_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidtH_rom_U :  component conv_2_conv_2_weidtH_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


