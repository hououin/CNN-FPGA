-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiPgM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiPgM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101000001101100110101001110", 
    1 => "10111110000110011000000011110000", 
    2 => "10111101100100010011010011010000", 
    3 => "00111101110101100111010100111111", 
    4 => "10111110101101001110100011000001", 
    5 => "10111110000011101010101000011101", 
    6 => "10111110100011001000001000011110", 
    7 => "10111101100000001001000111011100", 
    8 => "00111110000010110111111111011111", 
    9 => "10111101010111001111001011001110", 
    10 => "00111100110110111011101001010011", 
    11 => "10111011110111010000011011100100", 
    12 => "10111110100010111000001100111001", 
    13 => "10111110001111010001110101010110", 
    14 => "00111100110101001100110010111100", 
    15 => "00111110010110000010011101011101", 
    16 => "10111110101011101110110101011101", 
    17 => "00111101100000111110010110110100", 
    18 => "00111101011001001000100001001001", 
    19 => "10111100111110101101100101101101", 
    20 => "00111101110010001011010010000010", 
    21 => "10111110001001111000011001000000", 
    22 => "10111110011010000010011000110010", 
    23 => "10111100101001011100010010101110", 
    24 => "10111110001000111111011111110010", 
    25 => "00111110010000010111110011111000", 
    26 => "00111100111000101100100100000100", 
    27 => "00111110001001110010010111110101", 
    28 => "10111110000001101000001101000010", 
    29 => "00111100111001000111001001011110", 
    30 => "10111110001100111111010100110000", 
    31 => "10111110100001010010100111100001", 
    32 => "00111101000011011001011111001000", 
    33 => "10111101001111010100001001000101", 
    34 => "00111101100010011110001101001111", 
    35 => "00111101000100100101011100101000", 
    36 => "10111110000011001110101001001010", 
    37 => "00111101001000001100100000100110", 
    38 => "10111110010110010100111101110100", 
    39 => "00111101000101011110011111010100", 
    40 => "10111101010110111110101011010111", 
    41 => "00111110001010110011110011100001", 
    42 => "10111110010110000101101100011110", 
    43 => "00111101100101100000111010011100", 
    44 => "10111101100110011000001011011010", 
    45 => "10111100000101111010010111111001", 
    46 => "10111101111010010000101000001101", 
    47 => "10111110001000001000011000011100", 
    48 => "10111110100010110010001011001110", 
    49 => "10111101011110000010000110110100", 
    50 => "00111100100100011011001010010111", 
    51 => "00111101011101000010010111011111", 
    52 => "10111101110000001010011110110000", 
    53 => "10111100100110010110000001101110", 
    54 => "00111100100000011000100100011111", 
    55 => "10111110000010010111110101011001", 
    56 => "10111110010000010000010001111011", 
    57 => "10111001011011110100110101101011", 
    58 => "00111100000110110010001111111110", 
    59 => "10111110001001110101001011011010", 
    60 => "00111100100111001110100100001111", 
    61 => "00111110001010111101000111101101", 
    62 => "00111101011011100110011000011010", 
    63 => "00111110000011100010010010111001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiPgM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiPgM is
    component conv_2_conv_2_weiPgM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiPgM_rom_U :  component conv_2_conv_2_weiPgM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


