-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieqQ_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieqQ_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101111011011111111000100010", 
    1 => "10111110000010100000101101011010", 
    2 => "10111101111001001001111100010001", 
    3 => "00111110001111100111001100110001", 
    4 => "10111101111011101110110010001010", 
    5 => "10111101001011100111111000111011", 
    6 => "00111101110100001101000010110011", 
    7 => "00111110000001011101010110101001", 
    8 => "00111101100001011111010011000101", 
    9 => "00111101111100101001100100011010", 
    10 => "10111101111101010110011011111101", 
    11 => "10111110000100000100111111110111", 
    12 => "10111100111011011111001000100100", 
    13 => "00111110000110110010000101110100", 
    14 => "00111110000110111100101110101001", 
    15 => "00111101100000100001010000000101", 
    16 => "00111101100010100011101100000111", 
    17 => "00111110001000110000100100110011", 
    18 => "00111110000010110111111111110111", 
    19 => "10111110000000100101011100011000", 
    20 => "10111101100110011100110110110011", 
    21 => "10111110100010100011100101000001", 
    22 => "10111101111100000100110111001001", 
    23 => "10111110000110001010011010001101", 
    24 => "10111101111100010000101100100111", 
    25 => "00111101010110001011111011011010", 
    26 => "10111011101101011101000000011011", 
    27 => "00111110100010010010110001111101", 
    28 => "00111110000101011100101010111100", 
    29 => "10111110001111000100011011100000", 
    30 => "10111100100101000110111101111001", 
    31 => "00111110010011011111111010011011", 
    32 => "00111110101000111101000100000011", 
    33 => "00111110010011110011100110000111", 
    34 => "00111101111111111001010000010100", 
    35 => "10111110000110001100111010011110", 
    36 => "10111110110010111111001001100000", 
    37 => "00111110010111010011000011010010", 
    38 => "10111110001000111011101110011111", 
    39 => "00111100110100001101001110010100", 
    40 => "10111110011110110110000010101000", 
    41 => "00111110000011001110100010100001", 
    42 => "00111101001000111101001111111011", 
    43 => "00111110000111110000001010000111", 
    44 => "10111010001011000101110100101100", 
    45 => "10111110010001111101111111000111", 
    46 => "00111110100111001111001001111100", 
    47 => "00111110100001100000001101011101", 
    48 => "10111101111010111000110110000110", 
    49 => "00111110110000010111010111010100", 
    50 => "00111110000000000110000001111000", 
    51 => "10111110011110001100010111011101", 
    52 => "00111101001100111001000110111100", 
    53 => "10111110100111111001011101000011", 
    54 => "10111110011110001001011010011111", 
    55 => "10111110000100110100111001101011", 
    56 => "00111101111111100110010111001010", 
    57 => "10111110100011000001010000101111", 
    58 => "10111110010000111001001000101010", 
    59 => "10111101101010101110000011101010", 
    60 => "10111101011001101110010010011010", 
    61 => "10111101111011010000000110110000", 
    62 => "00111110000001111101110000101100", 
    63 => "00111101101011001010101001001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieqQ is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieqQ is
    component conv_2_conv_2_weieqQ_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieqQ_rom_U :  component conv_2_conv_2_weieqQ_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


