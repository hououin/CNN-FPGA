-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicdu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicdu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011001110010010111111000110", 
    1 => "00111110010001011000000100100111", 
    2 => "00111101111000010101100000101100", 
    3 => "10111101000101001010010001110000", 
    4 => "00111110010000001100101101111011", 
    5 => "10111101100010010100101011111011", 
    6 => "00111101101111010110010010100100", 
    7 => "00111100110000001001110000010111", 
    8 => "10111100101010000010000110010011", 
    9 => "00111011110110001101110001010011", 
    10 => "00111101101100111010100000010100", 
    11 => "00111110000011100010111011100011", 
    12 => "00111110011000011000110110010001", 
    13 => "00111101101000000000000101001011", 
    14 => "00111110000011000101111110100011", 
    15 => "10111101101010101100101000010001", 
    16 => "10111100110101001100000101110110", 
    17 => "10111100110001000000111011010101", 
    18 => "10111101110000001111100000011110", 
    19 => "10111110001001000110001001010101", 
    20 => "00111110010010110100001101010110", 
    21 => "10111100101001001010111101111000", 
    22 => "10111101010001000011011001011110", 
    23 => "00111101000010011010100101110110", 
    24 => "00111110010011111111000001111100", 
    25 => "10111100111110111100001101101010", 
    26 => "00111101101000001100010001001001", 
    27 => "10111110010101011101111011010010", 
    28 => "10111110010000010111000010000110", 
    29 => "00111101001111100000111001010110", 
    30 => "00111101010010110011110111010111", 
    31 => "10111110110010100000000100000001", 
    32 => "00111101100111110100101001100111", 
    33 => "10111110011011000111110011001010", 
    34 => "00111110010100100100110110001011", 
    35 => "00111100111010011000001111011010", 
    36 => "10111110000010110011010111110001", 
    37 => "00111110001110100010111101100001", 
    38 => "10111100100001010110101110110000", 
    39 => "10111101111100101001000001001111", 
    40 => "10111101110111100011010000010110", 
    41 => "10111101101110110100100000101001", 
    42 => "00111110010010001101111011111110", 
    43 => "10111110000010011010110111000011", 
    44 => "10111101011000010101000001110101", 
    45 => "00111110000100101110011010110000", 
    46 => "00111101110111101010001101110101", 
    47 => "10111011011100110101001010000010", 
    48 => "00111101001010011010100001001010", 
    49 => "10111110001011011111010001110101", 
    50 => "00111110100100101010101001000010", 
    51 => "00111101000001111110111100110101", 
    52 => "10111110000100101000001111010110", 
    53 => "00111101000001100101110110101111", 
    54 => "10111110010010101110001100010111", 
    55 => "10111101000110100101111100101010", 
    56 => "10111101010101100011000100111010", 
    57 => "00111101110011101101011011000010", 
    58 => "10111101111111011111100000000000", 
    59 => "00111101101100111000100011101001", 
    60 => "00111110001001011011101101100011", 
    61 => "10111110000111100010101001011111", 
    62 => "10111101000010110111111011111100", 
    63 => "00111100001100110100111011010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicdu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicdu is
    component conv_2_conv_2_weicdu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicdu_rom_U :  component conv_2_conv_2_weicdu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


