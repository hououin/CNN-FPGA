-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib0s_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib0s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110100000110101001101110", 
    1 => "00111101100001000100011010011110", 
    2 => "10111101100000101011110111111110", 
    3 => "00111101011110011101100010110001", 
    4 => "10111110001001100011101110000000", 
    5 => "10111110010101101000000100110101", 
    6 => "10111110011101000110000010001100", 
    7 => "00111101011010111111011100110111", 
    8 => "10111110001011110011101001101110", 
    9 => "10111101100110100010100000010001", 
    10 => "10111110111000001011100001000111", 
    11 => "10111110010100111000110111101000", 
    12 => "10111110100000000011000010101001", 
    13 => "00111101101010111110111000101110", 
    14 => "10111101010000001110101110001001", 
    15 => "10111110000111011001111101110011", 
    16 => "00111101100011100110101011011011", 
    17 => "10111101100101101110010011111000", 
    18 => "00111110011000111000100001011000", 
    19 => "00111110001110011000100011011111", 
    20 => "10111110001100100000100001101011", 
    21 => "10111110000110000000011011100101", 
    22 => "00111010000111000010111010100101", 
    23 => "00111101000111101111011001111000", 
    24 => "10111101010111100100100111101111", 
    25 => "10111110101010010100001110100000", 
    26 => "10111101000100000000010000010000", 
    27 => "10111101101000110111110101000011", 
    28 => "00111101110110011100111011011101", 
    29 => "10111110010110011001111000111110", 
    30 => "10111110011001111101000010100010", 
    31 => "00111110000101111111100011001010", 
    32 => "10111110100001000010010101100010", 
    33 => "00111110001111011010011101110100", 
    34 => "10111110011001011000100100000011", 
    35 => "10111100101101011000111110000010", 
    36 => "10111110000111010111100000011110", 
    37 => "00111101001100001111010111000001", 
    38 => "10111110000100001111011010111111", 
    39 => "10111110000011101010110001010101", 
    40 => "10111101111000011101000011110110", 
    41 => "10111110000100011111101011000100", 
    42 => "00111101101011001101110010010111", 
    43 => "00111101101111100100111100101101", 
    44 => "10111100110000110101100001010010", 
    45 => "10111111000001111110001001000000", 
    46 => "10111101111110000101111101010110", 
    47 => "10111110100100011110011101000011", 
    48 => "00111101010111110011010010100000", 
    49 => "00111011010101010011010111010110", 
    50 => "10111110000010010001101011111011", 
    51 => "10111111000101111001111110011100", 
    52 => "00111100111011101110110010011000", 
    53 => "10111100010111100001010000100110", 
    54 => "10111101111100011011011011010011", 
    55 => "00111110001100110101101001010001", 
    56 => "00111110011000000101000101010110", 
    57 => "00111101001001001110000010000111", 
    58 => "10111110010111110001111111000010", 
    59 => "00111101111000111101110110111010", 
    60 => "10111110101011100010001110110100", 
    61 => "00111011111100011001100001111110", 
    62 => "10111101111011001011011001110101", 
    63 => "10111011000101100101001011001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib0s is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib0s is
    component conv_2_conv_2_weib0s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib0s_rom_U :  component conv_2_conv_2_weib0s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


