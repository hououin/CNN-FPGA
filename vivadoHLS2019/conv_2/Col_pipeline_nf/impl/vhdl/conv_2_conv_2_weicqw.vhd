-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicqw_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicqw_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111000110000110111110011", 
    1 => "10111101001010101111001000011001", 
    2 => "10111101111010101010000111001010", 
    3 => "10111101111011001100011010010000", 
    4 => "10111100010100001110111011010001", 
    5 => "10111100101100110011110101010010", 
    6 => "10111110101010001101110011100110", 
    7 => "10111101110011110001110101111000", 
    8 => "10111110110011010000011011110011", 
    9 => "00111101000101011011101000100101", 
    10 => "00111101001100100011101101110011", 
    11 => "00111101000101001010001010100111", 
    12 => "10111110101101111001001101001000", 
    13 => "10111110001001010101001110101011", 
    14 => "10111110010001000111000000011100", 
    15 => "10111110000101100010001010100010", 
    16 => "10111101110101011101100011001111", 
    17 => "00111101011111101111101100101101", 
    18 => "00111101101010111010111111101101", 
    19 => "10111110001001100010000010101100", 
    20 => "00111101101110010010111100111110", 
    21 => "00111101001100101110111001000110", 
    22 => "10111110001011011010110100001100", 
    23 => "10111101110110111010100101010110", 
    24 => "10111110110010100010011000011101", 
    25 => "10111111000110011111111010101101", 
    26 => "10111101001010100100011111110000", 
    27 => "10111101001011101100010010001010", 
    28 => "10111101110000111101110110011010", 
    29 => "00111101100100001111100001100000", 
    30 => "10111101101011100011110101100111", 
    31 => "00111101110010110101101011100101", 
    32 => "00111101100011000001110110110111", 
    33 => "10111101011000100111100011110001", 
    34 => "00111100110111001101010100100011", 
    35 => "00111101101011110101010010001011", 
    36 => "10111110100000101000001110101110", 
    37 => "10111100000011101101011110101100", 
    38 => "10111110101101001001010110010101", 
    39 => "10111110100110101100111111111111", 
    40 => "10111101001111010111101000000100", 
    41 => "10111110110101011110100110011000", 
    42 => "10111110011001101010010110000010", 
    43 => "10111110101000111000010101111011", 
    44 => "00111101000001011110100000010101", 
    45 => "00111110001100100000100110111011", 
    46 => "10111110110010111111010110010010", 
    47 => "10111110001101001101111111000011", 
    48 => "10111110100111111001001101101100", 
    49 => "10111100001110110000100110110101", 
    50 => "10111110111010100101101100111000", 
    51 => "00111101010001100000010001010011", 
    52 => "00111101010011010110111110101000", 
    53 => "10111101110011101111000111000010", 
    54 => "10111110000101000110110010000101", 
    55 => "10111100011101101001110111000011", 
    56 => "00111110000101010011010110010100", 
    57 => "10111101010001010110001000000001", 
    58 => "10111011111111110100111000110001", 
    59 => "10111100111100100111110010110100", 
    60 => "10111110001001110101110011100011", 
    61 => "00111010100111001101001011001100", 
    62 => "10111110001001011011010000000101", 
    63 => "10111101010011011101011010101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicqw is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicqw is
    component conv_2_conv_2_weicqw_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicqw_rom_U :  component conv_2_conv_2_weicqw_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


