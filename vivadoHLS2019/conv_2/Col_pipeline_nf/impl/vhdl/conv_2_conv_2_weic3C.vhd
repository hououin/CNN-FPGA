-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic3C_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic3C_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101100010000110110100100111", 
    1 => "10111101101111001100000101110101", 
    2 => "10111110001110011101010011011000", 
    3 => "00111101111001010000000100011100", 
    4 => "10111101110011010110111010011001", 
    5 => "10111110001011010101011111010101", 
    6 => "00111101010111100010111011000110", 
    7 => "10111100000101111011101011001010", 
    8 => "00111101100011110010101111011111", 
    9 => "10111101010010000101101110000011", 
    10 => "10111110000001000100000111011010", 
    11 => "10111110000100001000011000010010", 
    12 => "00111011011011111110110000011001", 
    13 => "10111101110010101011100111011010", 
    14 => "00111110001010100000001001110100", 
    15 => "00111101100111011111110100010010", 
    16 => "10111101100110111110110010001011", 
    17 => "00111100101000100001110000011000", 
    18 => "10111110000100111000001000110100", 
    19 => "00111101001001011010111011110110", 
    20 => "10111011100010100100101001001010", 
    21 => "10111010111001111000000000101100", 
    22 => "00111101110111000001101101010011", 
    23 => "10111101111010011101110101000100", 
    24 => "00111101000011010101111010100100", 
    25 => "10111101010100110001011000000111", 
    26 => "10111101110000011000101100100101", 
    27 => "00111110010001001001010001000001", 
    28 => "00111100010011111000110101011100", 
    29 => "10111100001010110011001000100110", 
    30 => "10111101111111010101010011000110", 
    31 => "00111101011000010011101000100110", 
    32 => "10111100010101111001101001001010", 
    33 => "10111101100010100100001011011101", 
    34 => "00111100111010010000011100110111", 
    35 => "10111110011000010110011010011011", 
    36 => "10111110001000110010001001011110", 
    37 => "00111101101110010000111001111011", 
    38 => "00111101011011100101000011111010", 
    39 => "10111110000010001101010101101101", 
    40 => "00111110010000001101111000010011", 
    41 => "10111101100010100010110100001010", 
    42 => "00111101101111010111110011100001", 
    43 => "00111101001001101101111001010101", 
    44 => "00111110000011001010101110110011", 
    45 => "10111110000110000001111100000111", 
    46 => "10111100101101000111101110110010", 
    47 => "00111110000010011101010101011011", 
    48 => "00111101101001000100001101100001", 
    49 => "10111100010111010100010110011100", 
    50 => "00111010011011100010010000101100", 
    51 => "00111100100111110111000111111010", 
    52 => "00111101101100111101000011100011", 
    53 => "00111101110111111010111111101011", 
    54 => "00111101001010000100000000111001", 
    55 => "10111110110010110001000100010101", 
    56 => "10111100110001110001011110011101", 
    57 => "10111110000110100100011111111100", 
    58 => "00111100111100110011000101000001", 
    59 => "10111101100111011010011010000000", 
    60 => "10111101100000010011000010111101", 
    61 => "10111101010100000001001101001011", 
    62 => "00111101111011011110101110111000", 
    63 => "10111101001111000110000011101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic3C is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic3C is
    component conv_2_conv_2_weic3C_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic3C_rom_U :  component conv_2_conv_2_weic3C_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


