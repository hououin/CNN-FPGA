-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weievR_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weievR_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100111000010110100101010010", 
    1 => "00111101011111111011110010101100", 
    2 => "00111100110101010110010001110011", 
    3 => "10111110010000010110100011110011", 
    4 => "10111100011010111010010111010101", 
    5 => "00111110001111110101001000100101", 
    6 => "10111110001011100011000101011011", 
    7 => "00111101011101000100100011100011", 
    8 => "00111011100101111110001110110001", 
    9 => "00111101100100101010000110010010", 
    10 => "10111110011001010100111100000101", 
    11 => "00111110000010001010101000010001", 
    12 => "10111101100100111111000101100000", 
    13 => "00111101111001101000011101000100", 
    14 => "10111101110001111111010001111111", 
    15 => "00111101110101000000010100101101", 
    16 => "00111101011010011010001000100001", 
    17 => "10111101110110110010101001001110", 
    18 => "10111101111011100100100000101001", 
    19 => "10111101000010101100010100110110", 
    20 => "10111110010010111100110110011010", 
    21 => "00111101111101101001011001110100", 
    22 => "00111110000000100001011011010110", 
    23 => "10111100111000101101110111110101", 
    24 => "10111101111100101000001111001010", 
    25 => "10111101110111000010000100011111", 
    26 => "00111110011111101010000010011010", 
    27 => "10111101101010100000001101001001", 
    28 => "10111110001101001011110100001100", 
    29 => "10111010110111001100001010000110", 
    30 => "00111110000101011010001001101011", 
    31 => "10111110100001001010100001000101", 
    32 => "00111101000110000001111010101100", 
    33 => "10111110101110011011110101111010", 
    34 => "00111100101111001011011101011100", 
    35 => "10111110011101111111010010011101", 
    36 => "10111100100111010110100001011101", 
    37 => "10111110001100111101000011000110", 
    38 => "10111101010011111010111001100100", 
    39 => "10111110000001100100010111010110", 
    40 => "00111110001101011100011110010001", 
    41 => "10111110010011000100101000010011", 
    42 => "00111100110010100001001011111010", 
    43 => "10111110011101010000101001010010", 
    44 => "10111100000001101100011111001011", 
    45 => "10111101001101101001110011101011", 
    46 => "10111110011011101111111001011100", 
    47 => "10111101101010000100011111111001", 
    48 => "10111110000101100000000101000011", 
    49 => "10111110010111101001101001110100", 
    50 => "10111101101001000100111100001011", 
    51 => "00111101110100000110100011000010", 
    52 => "10111101111110111010010000010000", 
    53 => "00111110001000110010110001101011", 
    54 => "10111101011100011100101111111100", 
    55 => "00111100011011111111100110101110", 
    56 => "10111110101001110111011100001111", 
    57 => "10111101101000100100010111111100", 
    58 => "10111100010101000011000100000010", 
    59 => "10111110011011101011110110000110", 
    60 => "00111101010010001111100101111100", 
    61 => "00111101111001111111101111000111", 
    62 => "00111100100111111101111110100001", 
    63 => "10111100000011111111110111111111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weievR is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weievR is
    component conv_2_conv_2_weievR_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weievR_rom_U :  component conv_2_conv_2_weievR_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


