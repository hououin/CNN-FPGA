-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei4jc_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei4jc_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011111110101101010000001010", 
    1 => "10111110010000010111110011100001", 
    2 => "10111101011100101101001000011101", 
    3 => "00111101110110000011011101000100", 
    4 => "00111101011011001011001011001111", 
    5 => "10111101101110001110011010110111", 
    6 => "10111101100100001110000010111000", 
    7 => "10111101101000101010110000110011", 
    8 => "00111110001101111111001001100100", 
    9 => "10111110000001001010001001000001", 
    10 => "10111100010001000010001101000010", 
    11 => "10111101110011000101110001111101", 
    12 => "00111100111011110001000110001001", 
    13 => "10111101001010000010001101000000", 
    14 => "00111011100011110001101101110000", 
    15 => "00111110001011110010110101101111", 
    16 => "10111110010010011011011000010100", 
    17 => "10111101110100110000000100101101", 
    18 => "10111110100000001000110100111110", 
    19 => "00111101001111111101110101110101", 
    20 => "00111101001110001000100000000010", 
    21 => "10111110011000101000010110001100", 
    22 => "10111110010001110100100100010101", 
    23 => "00111110000011011101101111111000", 
    24 => "00111100011100011101010100101000", 
    25 => "00111110000010000111010000011110", 
    26 => "00111100101000101101100100010001", 
    27 => "10111110000011111101010000001111", 
    28 => "00111100010000011000110110001100", 
    29 => "10111101010110011100111100101011", 
    30 => "10111011110010011101000001110100", 
    31 => "10111110100101101101101001101011", 
    32 => "10111101011010110110101010110111", 
    33 => "10111100011010111111000110000100", 
    34 => "10111101001011001010100010110010", 
    35 => "00111101100101100000010101101110", 
    36 => "10111101001111101000001011011001", 
    37 => "00111101100111101111010100000001", 
    38 => "10111101110000101111000111011100", 
    39 => "10111100100010101001110010111110", 
    40 => "10111110100011011001001110111010", 
    41 => "00111110010110001000000010100001", 
    42 => "10111110010001010001010001101101", 
    43 => "00111110010110111100011101111010", 
    44 => "00111101000001111111101011001000", 
    45 => "10111100100001100101111011010000", 
    46 => "10111101000001101010011000001011", 
    47 => "10111101000011010111001011001001", 
    48 => "10111101100110100110100011000100", 
    49 => "10111101100001100110111010000111", 
    50 => "10111100101000010001101011110100", 
    51 => "00111101101000000001010011011111", 
    52 => "10111110011001011011000111110110", 
    53 => "00111101000101001011010111111001", 
    54 => "10111101011101010010100010001000", 
    55 => "10111101101110111100110010011001", 
    56 => "10111101101000100101010111001101", 
    57 => "10111110001101010100110101011101", 
    58 => "10111110000011110110101101110111", 
    59 => "00111100001101100011010011010100", 
    60 => "00111100000011110001011000011110", 
    61 => "00111101011010110101101001001001", 
    62 => "00111101110000001111010101101010", 
    63 => "00111101101000011011000000011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei4jc is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei4jc is
    component conv_2_conv_2_wei4jc_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei4jc_rom_U :  component conv_2_conv_2_wei4jc_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


