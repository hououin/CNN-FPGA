-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieCS_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieCS_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101101110011000000010001", 
    1 => "10111101110101010001000110001111", 
    2 => "10111110100001001010111111101001", 
    3 => "10111101011100011111110010001111", 
    4 => "00111101011011001010110110111001", 
    5 => "00111011100111111111111110110110", 
    6 => "00111011111010011000001111111011", 
    7 => "00111101000001000101111111011110", 
    8 => "00111101010010010100001010000101", 
    9 => "10111101101001000110010101100010", 
    10 => "10111100111100110110011011000010", 
    11 => "10111100011100010101001000000011", 
    12 => "00111101101000010000010111110101", 
    13 => "00111100111110110110100001100101", 
    14 => "00111101101100011001111001111100", 
    15 => "00111101000111000101101010011000", 
    16 => "10111101010110000000010110111111", 
    17 => "00111100100011001101110101001010", 
    18 => "10111110010000000010100111010111", 
    19 => "00111101111001001001100001110010", 
    20 => "10111110000001110011101001000001", 
    21 => "00111101100000101100100100011001", 
    22 => "00111100111100001100111100101000", 
    23 => "10111100110010001000101010010101", 
    24 => "00111101111100011011110010000000", 
    25 => "10111100101000101110100110001001", 
    26 => "00111101010000000010110110100100", 
    27 => "00111101010011101111100100000100", 
    28 => "10111100110011011011100000010001", 
    29 => "00111101100100000100011110110100", 
    30 => "00111100001111001011011001100110", 
    31 => "10111100101101110001111110000100", 
    32 => "10111110010100001100000001010111", 
    33 => "10111100110011001000000001110100", 
    34 => "10111110011010010010001000000100", 
    35 => "10111101101100010010111101001110", 
    36 => "10111101111100010111110011010110", 
    37 => "00111101001100110110110000110111", 
    38 => "10111101000010110011101101100010", 
    39 => "00111101110111010001110000010000", 
    40 => "00111110000011100000101001001111", 
    41 => "10111110000101011100110001000011", 
    42 => "00111101111110011100011011110101", 
    43 => "10111110000110111101010111000000", 
    44 => "00111101101010110101100110000100", 
    45 => "10111101110000101000100011010000", 
    46 => "10111101100000111010000000110001", 
    47 => "10111110000010100011000111100001", 
    48 => "00111100101110011110000011000111", 
    49 => "00111101111011101010111110000101", 
    50 => "10111101100001010010101011010000", 
    51 => "00111110001100110001011011101111", 
    52 => "00111101100110111001110010011001", 
    53 => "00111110010001111011101110100001", 
    54 => "10111101111011011101001100101110", 
    55 => "10111110010011111111111110100001", 
    56 => "10111101111100110011010010001011", 
    57 => "00111101101100011001111011011110", 
    58 => "00111101010011100110111111010100", 
    59 => "00111101110001111111010111001000", 
    60 => "10111101011000111001000000011000", 
    61 => "10111100110111011011010110011000", 
    62 => "00111101100110010111100110011110", 
    63 => "00111101010010101100011110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieCS is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieCS is
    component conv_2_conv_2_weieCS_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieCS_rom_U :  component conv_2_conv_2_weieCS_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


