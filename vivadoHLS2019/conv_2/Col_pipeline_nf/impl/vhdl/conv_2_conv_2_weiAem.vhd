-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiAem_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiAem_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100010101000101111010100", 
    1 => "00111101011000011111101011101010", 
    2 => "00111101101100010101010011011001", 
    3 => "00111101110000010000000111001010", 
    4 => "00111101001110111111001100000110", 
    5 => "00111110000100000100101111111010", 
    6 => "00111001100001010111010110101010", 
    7 => "10111100111101110000100010100001", 
    8 => "00111101000000001010100001110001", 
    9 => "00111110001101010000011001111111", 
    10 => "10111101101111110011110011111011", 
    11 => "00111100100101000100000001101111", 
    12 => "10111101101111101111011001110011", 
    13 => "10111110000000110000111101101101", 
    14 => "10111101111001001001010001101011", 
    15 => "00111100100100000100110110011000", 
    16 => "00111110001101100111010100001111", 
    17 => "10111101111011110001010001110010", 
    18 => "10111101110110010001000001000111", 
    19 => "00111101111101000111101100011000", 
    20 => "10111010100001000000000001111010", 
    21 => "10111110001010011110110111111011", 
    22 => "10111110000101010101110110111010", 
    23 => "00111110001011010110110101100000", 
    24 => "10111100001001111001011110110001", 
    25 => "00111101000000111011010011011100", 
    26 => "10111101111101011100011010010110", 
    27 => "00111101101000000101111110011011", 
    28 => "00111100110000011001110111110100", 
    29 => "00111010011110101110001011100110", 
    30 => "10111100111001101110100010011001", 
    31 => "10111101011111011001011000100101", 
    32 => "10111110000010100011110011011110", 
    33 => "10111110000011101010100011100001", 
    34 => "00111101110101010111001111001011", 
    35 => "00111101110100010011110101111010", 
    36 => "00111101110001110101011101111000", 
    37 => "00111100100101100111110100100100", 
    38 => "10111101111111101011110101010111", 
    39 => "10111101001000110111100100001001", 
    40 => "00111101011111101101011110100000", 
    41 => "00111100111010011000000111010100", 
    42 => "10111100110011111001100000110010", 
    43 => "10111110000101110001000000010001", 
    44 => "10111101011101000000111100111111", 
    45 => "00111101000101101110010110000100", 
    46 => "00111101101000011110001101011101", 
    47 => "10111101101000100111000001101111", 
    48 => "00111110001000110110000101100101", 
    49 => "10111101100110010101100111001011", 
    50 => "10111110000010101111010010101111", 
    51 => "10111101011100011001010010001001", 
    52 => "10111110100011100011111011010001", 
    53 => "00111100011110101011110001001101", 
    54 => "00111100100010110110001011111100", 
    55 => "10111110000000011100101001100010", 
    56 => "10111101011101001101000101111001", 
    57 => "00111101111111011000011111100001", 
    58 => "10111101100100110111111111001101", 
    59 => "10111101011000110110100011011101", 
    60 => "10111101111110001000011001111011", 
    61 => "10111101100101011101001010000000", 
    62 => "00111100011010001010100011010100", 
    63 => "10111101100000111100001111000111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiAem is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiAem is
    component conv_2_conv_2_weiAem_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiAem_rom_U :  component conv_2_conv_2_weiAem_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


