-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidZM_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidZM_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111110000111010001100011101101", 
    1 => "00111110001000110110011000101111", 
    2 => "00111110010000001011011001101101", 
    3 => "10111101100010011001001011011111", 
    4 => "10111110000100100000011101110000", 
    5 => "00111100001011010101110111001100", 
    6 => "10111110100001000111111001010101", 
    7 => "10111110001111010101011010111010", 
    8 => "10111110010110111010111100011000", 
    9 => "10111101110111011001011110000011", 
    10 => "00111011101011011101000110111000", 
    11 => "10111010111001000111001001001010", 
    12 => "10111110001011011110001010100100", 
    13 => "00111100100010001010000101100110", 
    14 => "10111110100101010010011111111001", 
    15 => "10111110000100010000000101100110", 
    16 => "00111101011111000100101011010010", 
    17 => "00111101001110100101111111010010", 
    18 => "00111101101010100010001111000001", 
    19 => "00111100110110010111110000000011", 
    20 => "10111110100010001111100011110100", 
    21 => "10111110010110110010101111010111", 
    22 => "00111101010101101110001010110101", 
    23 => "00111101100001110000001000001100", 
    24 => "10111110011111111100100111010001", 
    25 => "10111110011110010110001101111011", 
    26 => "00111101101010101011010010011010", 
    27 => "10111101000111010101111101101101", 
    28 => "10111100111000101110110100110011", 
    29 => "00111110001100111101001011011001", 
    30 => "00111101101011000110010000000000", 
    31 => "10111011101001011001110110001110", 
    32 => "10111101001101011000101101011100", 
    33 => "10111110100001111001110010101100", 
    34 => "00111101001001101011100001000010", 
    35 => "10111110001011010100110011011110", 
    36 => "10111110000001111101101101110001", 
    37 => "10111110010000100100001111110101", 
    38 => "10111101111000110010011000011101", 
    39 => "10111110100101000001010010000111", 
    40 => "10111101110110010000100001111110", 
    41 => "10111110011111011010101100010010", 
    42 => "10111110001001101001101011100000", 
    43 => "10111110010111011011000001001000", 
    44 => "10111110010100000101010110010110", 
    45 => "00111101010100100100001011010000", 
    46 => "10111110101111100110011000111011", 
    47 => "10111110001010000001111000011010", 
    48 => "00111101110110111001100011110011", 
    49 => "10111101010011110100011001101000", 
    50 => "10111101110110111011111001010010", 
    51 => "00111110000010010110011000100110", 
    52 => "00111101000010111111000010101110", 
    53 => "00111101110001000001001011100010", 
    54 => "10111101010101110111001010011000", 
    55 => "00111110001001110110111110011011", 
    56 => "00111101010100010111100101000011", 
    57 => "10111110000011001001001001011000", 
    58 => "10111110100000011010000010111111", 
    59 => "00111001101111101000100111000100", 
    60 => "00111101111001110111100000000101", 
    61 => "10111110010000101110101111100010", 
    62 => "00111101101010110000001110000010", 
    63 => "10111101110101100110010001100101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidZM is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidZM is
    component conv_2_conv_2_weidZM_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidZM_rom_U :  component conv_2_conv_2_weidZM_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


