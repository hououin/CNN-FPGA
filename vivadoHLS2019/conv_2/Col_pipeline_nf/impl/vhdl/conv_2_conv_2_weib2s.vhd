-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib2s_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib2s_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100000011100110111010111100", 
    1 => "10111100011011101110011101010001", 
    2 => "00111101110000011000100111010011", 
    3 => "00111100111010100000110110010100", 
    4 => "10111101101010100110100101111010", 
    5 => "10111101101110111000000111000110", 
    6 => "10111110011000110000110001010111", 
    7 => "00111101110100010001001100111011", 
    8 => "10111101000110001010000111110000", 
    9 => "00111110000001101001101110110010", 
    10 => "10111101000000010100101010111110", 
    11 => "10111100000111000111010000110001", 
    12 => "10111110100001010101111110001011", 
    13 => "10111101101110100010000001000101", 
    14 => "00111011111001011101011000110011", 
    15 => "00111110001000011000000011110011", 
    16 => "00111100110101110101101101100000", 
    17 => "10111100101010111110000101100001", 
    18 => "10111100000000111101010111101001", 
    19 => "00111101011111010111100010010010", 
    20 => "10111110110000011100111100000001", 
    21 => "10111110100010100010100011001110", 
    22 => "10111101011000100010101111001011", 
    23 => "10111101100101001101001100110110", 
    24 => "10111100110011100100010001011001", 
    25 => "00111100111111000010010000011001", 
    26 => "00111101001001100001001010010111", 
    27 => "10111110010110111010000100101111", 
    28 => "00111101010001111010111000100001", 
    29 => "00111101100001111101111001111000", 
    30 => "10111110011000010001011001100011", 
    31 => "00111100110001000110111110101011", 
    32 => "10111110100001011111001011000110", 
    33 => "00111100111001000000101100101110", 
    34 => "10111110010011000100000110010010", 
    35 => "10111101100001010001110000100011", 
    36 => "10111101100100011111011001101001", 
    37 => "00111010100000100011100000101010", 
    38 => "10111110101110101000001011110010", 
    39 => "00111100101000010000101000010011", 
    40 => "10111110000000100010001111101011", 
    41 => "00111101101010100010110110010000", 
    42 => "00111010101000110010111000001110", 
    43 => "10111101000110110000101111111110", 
    44 => "10111101100100000001011000100010", 
    45 => "10111110100001001101111010011101", 
    46 => "00111101001010101010011101111110", 
    47 => "10111011110001111100111000000110", 
    48 => "00111101100101111001100010111100", 
    49 => "10111100110010101011111110111110", 
    50 => "10111110101000101110111011001110", 
    51 => "10111101000010101000010111000100", 
    52 => "10111101110100010100100001011001", 
    53 => "10111101001000000100010100111010", 
    54 => "00111110000001111111011100110100", 
    55 => "10111100010101101110000111101010", 
    56 => "00111100001001010000010001011010", 
    57 => "10111100001100100011000111010011", 
    58 => "00111100111101010000011000110001", 
    59 => "00111101100000001000010101011001", 
    60 => "10111110101011111000000010110010", 
    61 => "00111101111110110110100100110001", 
    62 => "10111101101000110001011010101010", 
    63 => "10111101110000100000011111100001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib2s is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib2s is
    component conv_2_conv_2_weib2s_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib2s_rom_U :  component conv_2_conv_2_weib2s_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


