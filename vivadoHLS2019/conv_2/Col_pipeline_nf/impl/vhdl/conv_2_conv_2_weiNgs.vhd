-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiNgs_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiNgs_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010110001101110110111111", 
    1 => "00111101000001011011011100110011", 
    2 => "10111101001010001010010011101101", 
    3 => "00111101001000001011100111111110", 
    4 => "00111101101110010001110010001111", 
    5 => "10111101101101110010001100000010", 
    6 => "00111101010101000011111001101010", 
    7 => "10111101111011001110010011000001", 
    8 => "00111101111001011010100000100000", 
    9 => "10111101100011000001000011100011", 
    10 => "00111101100010000011110011101001", 
    11 => "00111100111101100000111000010101", 
    12 => "00111101010001011111110000101001", 
    13 => "10111101100110001110101011000101", 
    14 => "00111101000001100101000101011111", 
    15 => "00111101100100001011010001110010", 
    16 => "10111101000101111010110110101011", 
    17 => "10111101000111101110010100111101", 
    18 => "10111110001101111011101001000010", 
    19 => "10111101011000111000100011000101", 
    20 => "10111101001100111010101100000100", 
    21 => "10111101000111110101000000111011", 
    22 => "10111110000100100100100101000010", 
    23 => "00111100111011101111010001000010", 
    24 => "00111100010000010101101001101011", 
    25 => "10111101000001111100110100010010", 
    26 => "10111100100010101000001011010101", 
    27 => "10111110011001000011110011001010", 
    28 => "10111101000100010001001111110000", 
    29 => "00111101110011100001011010111001", 
    30 => "00111101111111101110101001101100", 
    31 => "10111101110000110111110110111101", 
    32 => "00111101001001000011001101001010", 
    33 => "10111101001000100000111011001110", 
    34 => "00111100110010010100110001000110", 
    35 => "00111100101111000011101111110011", 
    36 => "10111110001001011111011100010010", 
    37 => "00111101110001001110010000110001", 
    38 => "10111101100000100110010001110000", 
    39 => "00111100001100100100110100010100", 
    40 => "10111110000111100110101000001101", 
    41 => "00111101001110100101101101111111", 
    42 => "10111011010111000000000101001010", 
    43 => "00111100101101110100010011100111", 
    44 => "10111101001111110010111011111100", 
    45 => "00111011000000100111100110000000", 
    46 => "10111100001001000110110111110110", 
    47 => "00111100101001111101101011110001", 
    48 => "00111011111000111000011101001110", 
    49 => "10111110010111111100000111101100", 
    50 => "00111101111111010101001010100001", 
    51 => "00111110000010000111110011100101", 
    52 => "10111110100011110110001010000101", 
    53 => "10111110001001111110000101000111", 
    54 => "10111110000010010110111101010100", 
    55 => "00111100101001001011010101100011", 
    56 => "10111101110000111111010001001010", 
    57 => "10111101100010011101001011111010", 
    58 => "10111110000010000111100010101100", 
    59 => "00111110000001101111010010000100", 
    60 => "10111100110011000101101010111010", 
    61 => "10111100010100100011001100000111", 
    62 => "00111101101001100000001000111011", 
    63 => "10111101000100111100100100010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiNgs is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiNgs is
    component conv_2_conv_2_weiNgs_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiNgs_rom_U :  component conv_2_conv_2_weiNgs_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


