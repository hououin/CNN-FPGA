-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiEe0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiEe0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101000001001100101011011100", 
    1 => "00111100001000110111101001111011", 
    2 => "00111110001000000000000000110100", 
    3 => "00111101110000001011001110110110", 
    4 => "10111110000010101101111101010010", 
    5 => "00111011110011011110101101010100", 
    6 => "10111101001000100101010000010010", 
    7 => "10111100100111001011000101000001", 
    8 => "00111101010110011110111001001010", 
    9 => "00111101111000011000100110001100", 
    10 => "00111101100011101111010100011000", 
    11 => "00111110001100110000101111100110", 
    12 => "00111101110000010100010010110100", 
    13 => "10111110010000100110011100000111", 
    14 => "10111100100111111011100010100000", 
    15 => "00111100111000110111111011111010", 
    16 => "00111101100110000010000101000011", 
    17 => "10111101101100100001011110001011", 
    18 => "10111101000001010100010011111000", 
    19 => "00111101100010111101000000000011", 
    20 => "00111100111000001000001011000101", 
    21 => "10111110011001100111010101011001", 
    22 => "10111110011000111101011001001000", 
    23 => "10111011110111110011001101101001", 
    24 => "10111101111010000100101000011010", 
    25 => "00111101001010001101110110110100", 
    26 => "10111100100001000000011100010001", 
    27 => "00111110001001100010010010110110", 
    28 => "00111101101110100100100010110001", 
    29 => "00111101010010010101101101001110", 
    30 => "10111101001101000101001011111001", 
    31 => "10111101001000011010101000100100", 
    32 => "10111110000000110101110000001110", 
    33 => "10111110011011101001001100000100", 
    34 => "00111101110101110011010001000010", 
    35 => "00111101101111000100011010101010", 
    36 => "00111101111001111000111010011001", 
    37 => "00111110000101111101110001001011", 
    38 => "10111100001001000100111000100011", 
    39 => "10111101010000010011001001001011", 
    40 => "00111101101110001111000100111000", 
    41 => "00111110001100001000110110101000", 
    42 => "10111110001101111001010110100100", 
    43 => "10111101101011100111110101101111", 
    44 => "10111101011011001101111010101110", 
    45 => "00111101100001111101010100010000", 
    46 => "00111101011110000101000100001110", 
    47 => "10111101100111010011010000001111", 
    48 => "00111101100110000010100101110011", 
    49 => "10111110011001000111011101101111", 
    50 => "10111101101000011000001000011011", 
    51 => "00111101100011010110000010110100", 
    52 => "10111110010010001111101010111111", 
    53 => "00111101011001111110110101100010", 
    54 => "00111101010110100011000001111000", 
    55 => "10111101111001111001101000110000", 
    56 => "10111101100101111111100001100100", 
    57 => "10111010100011110001110010011010", 
    58 => "00111101101011001111011101100000", 
    59 => "10111100011111001101101001011110", 
    60 => "10111101111110100011110101010111", 
    61 => "10111110000101111000110110001101", 
    62 => "10111101001101001111111111001011", 
    63 => "10111110000000111001100111101100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiEe0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiEe0 is
    component conv_2_conv_2_weiEe0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiEe0_rom_U :  component conv_2_conv_2_weiEe0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


