-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibrm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibrm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011010100000110011101101000", 
    1 => "10111110000010111011111100011001", 
    2 => "10111110010110001110100010111000", 
    3 => "00111100101111001001010101110100", 
    4 => "00111011111011010111111010011111", 
    5 => "00111101010001010100011111101010", 
    6 => "00111100111010001011000011000001", 
    7 => "10111100100010001101101011010010", 
    8 => "00111101101111100010000010111010", 
    9 => "10111101110001000110001110001110", 
    10 => "10111100000000010000111111000010", 
    11 => "10111101111111001111110001000000", 
    12 => "00111100110000001011010001011001", 
    13 => "00111101001011000100010110110011", 
    14 => "00111100111001100111000100101111", 
    15 => "00111100101010011110011101100010", 
    16 => "10111100100101010010001101001111", 
    17 => "10111101110100101000011000110011", 
    18 => "10111101010110101001000101000110", 
    19 => "10111101001110111000001111010101", 
    20 => "10111101101000101001110010001101", 
    21 => "00111100101011100101011111101001", 
    22 => "10111101110100001000110011111010", 
    23 => "00111101001011001111110101011110", 
    24 => "10111101101000111000001111110111", 
    25 => "10111100000010001010111001011010", 
    26 => "10111100111000101101001011010001", 
    27 => "10111110001110111011000011001110", 
    28 => "00111100100010011111001000111111", 
    29 => "00111011101000011011100101000100", 
    30 => "00111100010001100111111100011001", 
    31 => "10111101110011100010111001010001", 
    32 => "00111010100100010000111101011001", 
    33 => "10111110000001100000011001110110", 
    34 => "10111100010111001000110111010000", 
    35 => "00111101100010000000000000101111", 
    36 => "10111110011001100001000010000011", 
    37 => "10111101100011110101110110011011", 
    38 => "10111100111100010101000101000101", 
    39 => "00111101101010101010011110000110", 
    40 => "10111100110000110000010101100010", 
    41 => "10111101011111110000000001011010", 
    42 => "00111100111101010001110000010100", 
    43 => "00111101110011101010001011111101", 
    44 => "00111101011001101011010001010010", 
    45 => "00111101101101001001001011010110", 
    46 => "10111101010111011110000000111010", 
    47 => "00111101000001100110100111000011", 
    48 => "10111110010001110101011001111111", 
    49 => "10111101100000101110011010100010", 
    50 => "10111101001101110010011110000110", 
    51 => "00111101100001001001011000011100", 
    52 => "10111110011110111111010011111100", 
    53 => "10111001001100001011001101001000", 
    54 => "10111110000101001110001101101110", 
    55 => "10111011100110011001010100100001", 
    56 => "10111100101001011001110110011111", 
    57 => "10111101110001110011101111100110", 
    58 => "00111101101001000010110001101100", 
    59 => "00111110000010101100011000100001", 
    60 => "00111011111100101110001010001011", 
    61 => "00111101100101000010011101110110", 
    62 => "00111100100101100100100110100001", 
    63 => "00111101100100100111001010001000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibrm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibrm is
    component conv_2_conv_2_weibrm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibrm_rom_U :  component conv_2_conv_2_weibrm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


