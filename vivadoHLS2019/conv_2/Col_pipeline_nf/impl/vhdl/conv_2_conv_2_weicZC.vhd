-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicZC_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicZC_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101011010010101111000100111", 
    1 => "00111101111000010101010011110100", 
    2 => "00111100101010110001001001010001", 
    3 => "00111101101110111100100101101101", 
    4 => "00111100011111110000110111001001", 
    5 => "10111101101011010111010110001100", 
    6 => "10111011111101111110101001011111", 
    7 => "10111101110110101110110101100000", 
    8 => "10111101001100100110111111101011", 
    9 => "10111010010111110001011111100111", 
    10 => "00111101000000100011111010100100", 
    11 => "10111100110011010010100100100011", 
    12 => "00111101111001100110101000001011", 
    13 => "00111101100110111001111011101000", 
    14 => "10111100100000011100011101111000", 
    15 => "00111100100000010000101100100110", 
    16 => "00111101010010001100101101010011", 
    17 => "00111100111001011111000001100011", 
    18 => "00111011110010010110110000110010", 
    19 => "10111101010011111010101101111010", 
    20 => "10111110000011010001010001011101", 
    21 => "00111101101101111100100111011100", 
    22 => "10111101100000010100110111111000", 
    23 => "10111100101101110010001101001011", 
    24 => "00111101001100101000011011011001", 
    25 => "10111101000011101111100010000010", 
    26 => "00111101001000110111110000111111", 
    27 => "00111100110111000011011110100001", 
    28 => "00111101001100101100110100011010", 
    29 => "00111011000010001011011111010101", 
    30 => "00111100111001000110100000101101", 
    31 => "00111100111101011011110111101010", 
    32 => "10111101100010000000011111111101", 
    33 => "10111101101011111100010100111111", 
    34 => "10111100100100010111111110111001", 
    35 => "10111101101010001100100110010011", 
    36 => "00111101101010011001111110000000", 
    37 => "10111101011111011110010010000010", 
    38 => "00111101100101100011111101011110", 
    39 => "00111110001011001000000010000111", 
    40 => "00111100010111000111100101111011", 
    41 => "00111100010010010000110001101001", 
    42 => "00111101101100111010010101101001", 
    43 => "00111101010011010011011101100011", 
    44 => "00111101101101001101110000101101", 
    45 => "10111100110101111100100111010101", 
    46 => "10111011111100000111110011000011", 
    47 => "00111110000011100010011100000001", 
    48 => "00111101101100010111011110110000", 
    49 => "10111101101010100000011000000111", 
    50 => "10111101110111000100100001111001", 
    51 => "00111101111110110010001110111000", 
    52 => "10111101000011011111010110110110", 
    53 => "10111100111110101101010011001110", 
    54 => "10111101101001001000000010111000", 
    55 => "10111110010011110101111111110001", 
    56 => "00111100011000111000011100001000", 
    57 => "10111101000110010010101011000101", 
    58 => "00111101100100000011101101100000", 
    59 => "10111001000011111011011111000100", 
    60 => "10111101101110100001101100111100", 
    61 => "10111011001001000010101100100000", 
    62 => "10111101100000100010001010000011", 
    63 => "00111101001000011101000100010100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicZC is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicZC is
    component conv_2_conv_2_weicZC_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicZC_rom_U :  component conv_2_conv_2_weicZC_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


