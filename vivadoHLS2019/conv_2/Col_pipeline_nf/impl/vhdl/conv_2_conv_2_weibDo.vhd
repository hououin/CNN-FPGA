-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibDo_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibDo_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101110111011110000001001101", 
    1 => "10111101011000110111101001110111", 
    2 => "10111010010111001100111001100010", 
    3 => "00111110010001110011010010011101", 
    4 => "10111101110001101111101101001000", 
    5 => "00111100101110001000110110010010", 
    6 => "00111011001111010001000101010100", 
    7 => "00111101100011000111110011010011", 
    8 => "00111101010010101100011100011110", 
    9 => "10111101010001101000010110100101", 
    10 => "00111110000011001101011101101011", 
    11 => "00111011110011110011011111110110", 
    12 => "00111011100010101101111101001010", 
    13 => "00111110011010000000111011001101", 
    14 => "00111110011100000110000000100110", 
    15 => "00111110000110110010000010100101", 
    16 => "10111110011010110010101101110011", 
    17 => "00111101110110111000001001101111", 
    18 => "10111100100111111001000011110100", 
    19 => "10111110010111101001101111101000", 
    20 => "00111110010111000111011011111010", 
    21 => "00111100110111110001110111110011", 
    22 => "00111110000010111010110110100100", 
    23 => "10111101010110000110011101010100", 
    24 => "00111101101100011010101100101001", 
    25 => "00111110000000101100011101100100", 
    26 => "00111011110000110001000011100111", 
    27 => "10111101010010001011111111101110", 
    28 => "00111110010110011100010111000110", 
    29 => "10111101110100001010001100101011", 
    30 => "10111110001000100111111100011100", 
    31 => "10111110101110011010000110010100", 
    32 => "00111101101010011101101111111110", 
    33 => "00111110010101100010010100111001", 
    34 => "00111100101010000010111111001011", 
    35 => "10111110001001001001001100101011", 
    36 => "00111101010000001101111001001010", 
    37 => "00111110001111011111101010100100", 
    38 => "10111101010011101100100110001001", 
    39 => "10111110000010111001110101101010", 
    40 => "10111110101011111010001111001010", 
    41 => "00111110100000011001111000010000", 
    42 => "10111110010000001100000101101000", 
    43 => "00111110010101000110111100101001", 
    44 => "10111101001110110110001000011010", 
    45 => "00111101011000001100011011111001", 
    46 => "00111110010101100100110001011100", 
    47 => "00111110001000011011110101011000", 
    48 => "10111101101011000101011000000000", 
    49 => "10111100001000111111000110101101", 
    50 => "10111110000010001001011010000110", 
    51 => "10111110000111100010100001111101", 
    52 => "10111101111111101100110111111010", 
    53 => "00111101000101110011111101110011", 
    54 => "10111110011000111101100100111010", 
    55 => "10111101101110010100100110101100", 
    56 => "00111110000100100000100010001010", 
    57 => "10111110001101000100011101010100", 
    58 => "10111110001011001011011010001111", 
    59 => "00111101001000010110111001011111", 
    60 => "00111101101111011011010010100100", 
    61 => "00111110000100011101010101010100", 
    62 => "10111101110111110100011011111000", 
    63 => "10111110000110101011010011101010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibDo is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibDo is
    component conv_2_conv_2_weibDo_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibDo_rom_U :  component conv_2_conv_2_weibDo_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


