-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidnG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidnG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100001000000100111001101111", 
    1 => "10111100111100100111010110111001", 
    2 => "10111100101101010100001010101011", 
    3 => "10111101101110010101011100100100", 
    4 => "10111100011111100110101010000010", 
    5 => "10111100100110111111000000011100", 
    6 => "10111110011000110100100001111111", 
    7 => "10111101010111010010111100011010", 
    8 => "00111100000100111010111000101110", 
    9 => "10111101101101010110001001001011", 
    10 => "10111101100011111101111000001011", 
    11 => "10111101111001101010001110001001", 
    12 => "10111110011110110010011001111110", 
    13 => "10111101000011100011101100000100", 
    14 => "10111100001000101110011010000001", 
    15 => "00111110000101001000001010010000", 
    16 => "00111100010010110101111100110010", 
    17 => "10111101010001000001100000011011", 
    18 => "00111100101101110100111011110111", 
    19 => "10111101100100000111011100010011", 
    20 => "10111110001000011011100001001101", 
    21 => "10111100101011111100111110101111", 
    22 => "00111101010001111001001111110100", 
    23 => "10111101100010010111010101010011", 
    24 => "10111101000100111000011110000101", 
    25 => "10111011111110110010011111001010", 
    26 => "00111101100110110100101010100010", 
    27 => "10111110011100101100011101100100", 
    28 => "00111101110001010111010011001101", 
    29 => "00111101011001111001001000001111", 
    30 => "10111110000101010110001100011001", 
    31 => "00111101011011100100000101101100", 
    32 => "10111110100000100100011000110011", 
    33 => "00111110000000111101011001100001", 
    34 => "10111101101010100011000111101011", 
    35 => "10111101011111111100101000000001", 
    36 => "10111011000001001111110101001001", 
    37 => "10111011101010001011111001000010", 
    38 => "10111110000011110100110101110000", 
    39 => "00111101111101111101010101000010", 
    40 => "10111101100011001100001000101001", 
    41 => "10111101100000100000000000010001", 
    42 => "00111110001011001000011001010110", 
    43 => "00111101100110000110000010100010", 
    44 => "00111100111010101101000101010110", 
    45 => "10111110000010011000011000010001", 
    46 => "10111100111000000000001001011011", 
    47 => "10111101001010000001101110100101", 
    48 => "10111101111000010011000100101001", 
    49 => "00111101000010011101000111011010", 
    50 => "10111110001001000000001010111001", 
    51 => "10111101010111110011101000001100", 
    52 => "10111011101111111110011111100110", 
    53 => "10111110010000010110110111100101", 
    54 => "00111101100001001111101100110010", 
    55 => "10111011100011101101011011010010", 
    56 => "10111101100100011111111100100100", 
    57 => "10111101101101110010011011010010", 
    58 => "10111101110010001110010110100101", 
    59 => "00111101000110011111100000010001", 
    60 => "00111100111010010111110011010010", 
    61 => "00111101011000001001111011000011", 
    62 => "00111110000101100011001110111011", 
    63 => "10111001110111000101101111010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidnG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidnG is
    component conv_2_conv_2_weidnG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidnG_rom_U :  component conv_2_conv_2_weidnG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


