-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei7jG_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei7jG_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100101010100110000010111", 
    1 => "10111101101111111111110011101010", 
    2 => "10111101111110001101101111100110", 
    3 => "00111100011010101011110111111110", 
    4 => "10111101100111010001011000111011", 
    5 => "10111101100101111110011110111111", 
    6 => "10111110010100110111100010001111", 
    7 => "10111110000111110110100001000010", 
    8 => "00111110001011101011110011000101", 
    9 => "00111100110111010110011110110101", 
    10 => "00111101101010101001100010011101", 
    11 => "10111100010000010010010110001100", 
    12 => "10111110000101011100111110010100", 
    13 => "10111110001111010010001010000000", 
    14 => "00111101010011101001111111010110", 
    15 => "00111110010011000001101001100111", 
    16 => "10111110100111001001101100100101", 
    17 => "10111101100000011100011100110010", 
    18 => "00111101010100110100110010101101", 
    19 => "10111011001011101110001011010000", 
    20 => "00111101010000101001110000111111", 
    21 => "10111110010010000111001000001111", 
    22 => "10111110100000101001101010111111", 
    23 => "00111101101001101000111001000000", 
    24 => "10111110010111100010001100010110", 
    25 => "00111110010110001111001111010010", 
    26 => "00111100110001011010001101101000", 
    27 => "00111101010010111011101001100010", 
    28 => "10111110000000111010000110010011", 
    29 => "10111101100111011011110001000110", 
    30 => "00111011100100101110100000001111", 
    31 => "10111110011010110010010000010000", 
    32 => "00111100001100010100100101101011", 
    33 => "10111101110000001000010100100110", 
    34 => "00111101011100000101000101000111", 
    35 => "00111011111001101100111010000100", 
    36 => "10111101100111111100011100101011", 
    37 => "00111101100000010000011110010111", 
    38 => "10111110000110000111001001010000", 
    39 => "00111011100001110000010011101000", 
    40 => "10111101100011101111010010111010", 
    41 => "00111110100011111011100010101000", 
    42 => "10111110001101110011100001101101", 
    43 => "00111101110000000001111110110000", 
    44 => "00111101111010001110011011011100", 
    45 => "00111101010011001010000010001010", 
    46 => "10111110000101010100110100100110", 
    47 => "10111101101100010001110011010011", 
    48 => "10111110000011011100100110010011", 
    49 => "10111110010110111100100110111001", 
    50 => "00111100001111100110110101111100", 
    51 => "10111101100000011001100100010001", 
    52 => "10111101101011000111000101110111", 
    53 => "00111101000001100011111110111110", 
    54 => "10111101100101001000100000110001", 
    55 => "10111101110110011010101100100011", 
    56 => "10111110000100111111101110011001", 
    57 => "00111100011010011010000110000011", 
    58 => "10111011100111011011100011010101", 
    59 => "00111011010101001000011010110100", 
    60 => "00111101000110110100011100110001", 
    61 => "00111110001110010000101111100001", 
    62 => "00111101110100011010000110010010", 
    63 => "00111110010010111001110000010001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei7jG is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei7jG is
    component conv_2_conv_2_wei7jG_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei7jG_rom_U :  component conv_2_conv_2_wei7jG_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


