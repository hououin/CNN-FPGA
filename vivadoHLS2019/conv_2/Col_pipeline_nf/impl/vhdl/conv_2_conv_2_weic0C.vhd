-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weic0C_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weic0C_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111011110001111100111100011011", 
    1 => "00111100110000111101100011001000", 
    2 => "10111100001001101000101100111101", 
    3 => "00111001111111001110111100001010", 
    4 => "00111101010100111000110000100000", 
    5 => "10111101110101111000100011010001", 
    6 => "00111110001000001010110001110110", 
    7 => "10111110001100001100101110101101", 
    8 => "00111100101110110011001011110011", 
    9 => "00111100000100001110001110111111", 
    10 => "00111101110101010000101001011100", 
    11 => "10111110000011010110110011110110", 
    12 => "00111110000001111001000010111110", 
    13 => "00111110000100000000100101100110", 
    14 => "10111101010010100110000000101011", 
    15 => "10111100101010000100011110101000", 
    16 => "00111101110011111100111011100011", 
    17 => "10111101000010101110000001010001", 
    18 => "00111101101111011111100101111011", 
    19 => "00111101100100011100001110100100", 
    20 => "10111110000111100010111111100010", 
    21 => "00111110000100000100000111101011", 
    22 => "00111100101010010011101001011011", 
    23 => "00111101110010110111001010101111", 
    24 => "00111101001101110111111000101111", 
    25 => "00111101011111000010011000111001", 
    26 => "10111110000110001000001111110100", 
    27 => "10111110011111101100111110101100", 
    28 => "10111010101110000101001011000100", 
    29 => "10111110011000000010000010100001", 
    30 => "00111101011010101000110000110101", 
    31 => "00111100111011010100111011010000", 
    32 => "00111101000111000111010110110100", 
    33 => "00111101010010011001000001111010", 
    34 => "10111110000011101000011100110110", 
    35 => "10111110001110111100110000100001", 
    36 => "00111110011010101010111010101000", 
    37 => "10111110110010001001010111010010", 
    38 => "00111110000100011010011011010110", 
    39 => "00111101001010111011011000001000", 
    40 => "10111110000001001000101101101111", 
    41 => "00111100000101111100100001111000", 
    42 => "00111110000110011100001001010101", 
    43 => "00111101111100001010110100111011", 
    44 => "00111100000000111111101011001001", 
    45 => "10111101100011110100100011110111", 
    46 => "00111101011101111011010100010001", 
    47 => "00111101110110010111011010011010", 
    48 => "00111110000100111001001111101001", 
    49 => "00111101100001101001011100001010", 
    50 => "10111101111101110101110100111010", 
    51 => "00111101010100000010100101110010", 
    52 => "10111101100010000100010010111010", 
    53 => "00111011100001000001001010111010", 
    54 => "10111101100111111011010000011110", 
    55 => "10111101100100100010000001010010", 
    56 => "10111101100100001011000100001101", 
    57 => "00111100101111010001010000011100", 
    58 => "00111100110101011010100001010100", 
    59 => "10111110100000111100000100000011", 
    60 => "00111100011101011001001101010101", 
    61 => "10111110000000101000011010110011", 
    62 => "10111101111110111101101001010011", 
    63 => "10111101101011111110111011100100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weic0C is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weic0C is
    component conv_2_conv_2_weic0C_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weic0C_rom_U :  component conv_2_conv_2_weic0C_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


