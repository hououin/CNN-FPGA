-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicbu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicbu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111011010100001000001110111010", 
    1 => "10111100000101111100011000010110", 
    2 => "00111101111011100111100000010111", 
    3 => "10111101011011000011000000100111", 
    4 => "10111101101010001110001111010001", 
    5 => "00111100101000101100000010000110", 
    6 => "10111101101111110011011010011000", 
    7 => "10111100001011111000000101101100", 
    8 => "10111101001101110000100000000111", 
    9 => "00111100010011111100001001001111", 
    10 => "10111100111101000011111010101111", 
    11 => "10111100111101101010001101101100", 
    12 => "00111100000101000110000000011000", 
    13 => "10111110000110010001100010101011", 
    14 => "10111100101101001011000100000011", 
    15 => "10111101000011111100000101010010", 
    16 => "10111101110011010111101000100010", 
    17 => "00111101001101100111100101110101", 
    18 => "10111101011111101111011010110110", 
    19 => "00111101101101000100100011100111", 
    20 => "10111110001001000100010010000101", 
    21 => "10111110011100111000101101010010", 
    22 => "00111100001000100001100111100011", 
    23 => "10111100011010101101010010011010", 
    24 => "00111101000111110010011111100010", 
    25 => "00111100100110110100111001000001", 
    26 => "10111101100110011011101010111000", 
    27 => "10111110001101100100010000110011", 
    28 => "00111101001011101010001101010000", 
    29 => "00111101001111001010101010000101", 
    30 => "10111101110010000001110000100111", 
    31 => "00111100101000111110101001000111", 
    32 => "10111100011100000110011011101101", 
    33 => "10111101000110001101100001101111", 
    34 => "00111101011001101101010100101101", 
    35 => "00111101110000101001101100110110", 
    36 => "10111101010001010000001101000011", 
    37 => "10111011000001011101101111000100", 
    38 => "10111110000101111000000101101110", 
    39 => "00111101011001110010100010011011", 
    40 => "00111101101000011111010001111000", 
    41 => "00111011001111101001110000011011", 
    42 => "10111100011010010011001111100011", 
    43 => "10111101110000110011010101001000", 
    44 => "00111101100010001000000100001101", 
    45 => "10111011100100001110100001111111", 
    46 => "10111100010010000000111110110001", 
    47 => "10111101110000010001010100100000", 
    48 => "00111101101011001101111110100111", 
    49 => "10111110000001110010101000100101", 
    50 => "10111100101010100110110110111101", 
    51 => "00111101010110101111010011011110", 
    52 => "10111110010110011010110111111100", 
    53 => "10111110010010011101001110110000", 
    54 => "00111101110100001000101010010111", 
    55 => "10111110000100011100011001000001", 
    56 => "10111101101011101010000001111100", 
    57 => "00111110000000100000001011101010", 
    58 => "10111100101010110000011000101000", 
    59 => "00111101010111011111100111001000", 
    60 => "10111101101010110001001101111011", 
    61 => "00111100011010110011010011010100", 
    62 => "10111101110111001001011000001111", 
    63 => "10111101010101111011100010001011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicbu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicbu is
    component conv_2_conv_2_weicbu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicbu_rom_U :  component conv_2_conv_2_weicbu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


