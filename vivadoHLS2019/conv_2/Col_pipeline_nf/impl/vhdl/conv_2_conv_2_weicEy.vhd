-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicEy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicEy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111100100011001010010001111110", 
    1 => "00111011010110010001101111010010", 
    2 => "00110111101010001001110010111110", 
    3 => "00111101110100010010010101110101", 
    4 => "00111100101110010101101010111101", 
    5 => "00111101100100101100000001101011", 
    6 => "00111100110001100111001010001100", 
    7 => "00111100001000001000010010100011", 
    8 => "00111101110000100101110001010010", 
    9 => "00111101111110001000111100100010", 
    10 => "10111100011011011000110100101001", 
    11 => "10111101110101011110111100011100", 
    12 => "00111011110011111000110011111101", 
    13 => "10111100101001000001100100111111", 
    14 => "00111011111011100110011011101001", 
    15 => "00111101000011100111110011011011", 
    16 => "00111100000100111010011101000101", 
    17 => "00111101011010101011001100110100", 
    18 => "10111101010010101010010110110001", 
    19 => "00111101100111100001011110111010", 
    20 => "10111110001111111100101100010000", 
    21 => "10111101000001001000101101011001", 
    22 => "00111101101001110011011000011100", 
    23 => "10111110001111001101010100001011", 
    24 => "10111101010001001000010011000000", 
    25 => "00111101100101110110111000000010", 
    26 => "00111110000000000111000001011001", 
    27 => "10111101101101010000001101110010", 
    28 => "10111101100000010001101001011100", 
    29 => "10111100000111110011100100010110", 
    30 => "10111110000110000110110101110110", 
    31 => "00111100111111000101110100111010", 
    32 => "00111101000011111101111010011101", 
    33 => "00111101100000100100111011100101", 
    34 => "00111101101001101101100101001110", 
    35 => "10111110000100101100000111011111", 
    36 => "00111110000111110110011111110001", 
    37 => "10111110010111111000011000111010", 
    38 => "10111110000000101101110100101001", 
    39 => "00111101000001011000111111111101", 
    40 => "00111101101001111110100000010001", 
    41 => "00111110001001111111011011001011", 
    42 => "00111100010010101100101100101110", 
    43 => "00111101110011000011011011010001", 
    44 => "10111101010011101000100000101110", 
    45 => "10111101000100101011011011100001", 
    46 => "00111100110101000010011110101110", 
    47 => "10111110001000000100011111010001", 
    48 => "00111101101011101100111101010010", 
    49 => "00111011100010111110110101010000", 
    50 => "00111101100110001111011111010000", 
    51 => "10111011100010100010100110101010", 
    52 => "00111011001101011111111110111001", 
    53 => "10111110010000100000000010011111", 
    54 => "10111101110111011111110111100011", 
    55 => "10111100111100100101101000101000", 
    56 => "10111101110000101100000000110100", 
    57 => "10111100110000111001110111110011", 
    58 => "10111101100000001110101010101011", 
    59 => "00111101001001001111001100011101", 
    60 => "10111101110010010011110011100011", 
    61 => "10111101110111100000111010100000", 
    62 => "00111101100100000011000001110011", 
    63 => "00111101001011001000100100010111" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicEy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicEy is
    component conv_2_conv_2_weicEy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicEy_rom_U :  component conv_2_conv_2_weicEy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


