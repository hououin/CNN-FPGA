-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weidCI_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weidCI_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100010010100000110110111100", 
    1 => "00111101000101100011000011010110", 
    2 => "00111101010100011000100101011000", 
    3 => "00111101011101010111010100101110", 
    4 => "10111110000111000010001111110001", 
    5 => "10111101000010100011110000001100", 
    6 => "00111101101100110010101111100110", 
    7 => "10111110010010001101000011011110", 
    8 => "10111101000100011110010011001101", 
    9 => "10111101101010100011100100100101", 
    10 => "00111101100100111101001001100000", 
    11 => "10111110001110110110000010110000", 
    12 => "10111110000011000100000110010111", 
    13 => "10111110001111101011001101010110", 
    14 => "10111110000110100011001110111100", 
    15 => "10111101111010011101000011010100", 
    16 => "10111100100010110010111000111101", 
    17 => "00111101100001000101001111101110", 
    18 => "10111101101011001011100000111010", 
    19 => "00111101010011101001110110011000", 
    20 => "10111110011101100010110011110000", 
    21 => "00111110010110110111110110110010", 
    22 => "10111101111010000001000101111001", 
    23 => "00111101010010001011000000111000", 
    24 => "10111101101111011101010001100100", 
    25 => "00111101000011100111100111100001", 
    26 => "00111101101101001100101011011010", 
    27 => "10111101110010100110110110111011", 
    28 => "00111101011010010110010011011001", 
    29 => "00111101101010001011001001110010", 
    30 => "10111110010100001000001110001000", 
    31 => "00111101011011011011010101000100", 
    32 => "10111101111000100111010101001110", 
    33 => "10111101001000010001111111100111", 
    34 => "10111101100110110001111111110100", 
    35 => "10111110100111111001101100010010", 
    36 => "00111100000011101110011011010111", 
    37 => "00111101101011110001001101000111", 
    38 => "10111100111101010110111010100000", 
    39 => "00111100100001101101000001111110", 
    40 => "10111100100110001000011001011101", 
    41 => "00111101110010101110011101101010", 
    42 => "00111110000000100101011101000000", 
    43 => "00111011001111010111011101001110", 
    44 => "10111101101111010101001001111110", 
    45 => "10111101111000010000011001100110", 
    46 => "10111101100000101100001010011110", 
    47 => "00111101101110111100011111110111", 
    48 => "00111100101001001011100110000110", 
    49 => "10111110001011011111011010001010", 
    50 => "10111110100111101100010010110000", 
    51 => "00111110000110101100001011001100", 
    52 => "00111101101000101101100101000001", 
    53 => "10111101010000100011001000101100", 
    54 => "00111101000010000010010010110110", 
    55 => "10111101110000100101110110111001", 
    56 => "00111101011010011111000011111001", 
    57 => "10111101011101110100111101100111", 
    58 => "00111101100100100111000110001111", 
    59 => "00111101100110011111010100101101", 
    60 => "10111110111011111111000000011011", 
    61 => "10111101100011100101011000010100", 
    62 => "10111100111110011100001111111111", 
    63 => "00111101110100111110000110011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weidCI is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weidCI is
    component conv_2_conv_2_weidCI_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weidCI_rom_U :  component conv_2_conv_2_weidCI_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


