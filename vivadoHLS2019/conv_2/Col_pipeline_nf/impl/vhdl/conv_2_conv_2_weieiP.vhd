-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieiP_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieiP_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101010001010000111110110", 
    1 => "00111100110110100010111011011011", 
    2 => "10111101111101000110011101110110", 
    3 => "10111110000101110110010100000100", 
    4 => "00111011011110000110010001001000", 
    5 => "10111110100010010001010100111010", 
    6 => "00111101110000010100000111010011", 
    7 => "00111100100110011111010000100110", 
    8 => "10111110010000101000001000001001", 
    9 => "10111110011010010110100000100110", 
    10 => "10111110010011101000110010111110", 
    11 => "10111101101001110000101011110001", 
    12 => "00111110000110011010001111101011", 
    13 => "00111101101101011001101011010010", 
    14 => "00111100101111000100100101111001", 
    15 => "10111101110101000010111001001011", 
    16 => "10111110100100000000001001000111", 
    17 => "10111110001010100001001111001111", 
    18 => "10111101110001010011111000110001", 
    19 => "10111101010110001001101001010110", 
    20 => "00111110000101010110101110110010", 
    21 => "00111110010011011110000111100110", 
    22 => "00111110001111100100001110010111", 
    23 => "00111101111111111010110111100101", 
    24 => "10111011010111101011111101101110", 
    25 => "10111101000001001000001100000001", 
    26 => "10111110011000101010101000111000", 
    27 => "00111101010010000011010111001100", 
    28 => "10111101111011001001110110111110", 
    29 => "00111101101101011000011011111111", 
    30 => "10111101101011000101110010000010", 
    31 => "10111100100100101101011001100100", 
    32 => "10111110011010010000100011101111", 
    33 => "00111100110000010111000010010110", 
    34 => "10111110101110011111101000000000", 
    35 => "10111110101011111111010010100111", 
    36 => "00111110000011110010100111000110", 
    37 => "00111100110111100001110010000010", 
    38 => "00111100101101100011001110100111", 
    39 => "10111011000100000000110111011010", 
    40 => "00111110001010001111000010110011", 
    41 => "10111100110111110000001110011111", 
    42 => "10111011111111111000000010100010", 
    43 => "10111101011111100110110111010111", 
    44 => "00111101001110100000110110000111", 
    45 => "10111110000000111110110100000001", 
    46 => "00111101110110000001111010000110", 
    47 => "00111100000111100010111011111010", 
    48 => "00111110000110100111110110110000", 
    49 => "10111100110100111000001110001000", 
    50 => "10111101011010101111110010110010", 
    51 => "00111100001001010011001111000111", 
    52 => "00111101111010010000011111001000", 
    53 => "00111110000000110010111001011101", 
    54 => "00111101011011100101101110110010", 
    55 => "00111101010110111110011011010111", 
    56 => "10111110100011011100101111100100", 
    57 => "00111100100101111010100111001100", 
    58 => "00111101100101110111010101110101", 
    59 => "10111101001100110010000101110001", 
    60 => "00111101011010010000000011010000", 
    61 => "00111101011111100100000000111101", 
    62 => "10111101001011011011100110010111", 
    63 => "10111101111010001000101000111010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieiP is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieiP is
    component conv_2_conv_2_weieiP_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieiP_rom_U :  component conv_2_conv_2_weieiP_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


