-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibxn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibxn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110100001110001010001011101", 
    1 => "10111110101011011011101001100001", 
    2 => "00111101011010100101001011000010", 
    3 => "00111101010101010111100010010001", 
    4 => "00111100010101000000011111000010", 
    5 => "10111110100010000110000010110000", 
    6 => "10111110010101101011000000011000", 
    7 => "00111110100010010000101001011010", 
    8 => "10111101111011001101111101010101", 
    9 => "10111110000011110000011111000101", 
    10 => "10111101011110110000001001110101", 
    11 => "10111101011000110101111110110110", 
    12 => "10111110001010000110100011100110", 
    13 => "10111110001100111011100011101111", 
    14 => "00111101000010010000111011011001", 
    15 => "00111101101110110010111000101101", 
    16 => "10111101111010010000111100010001", 
    17 => "10111110100001101101011110001111", 
    18 => "10111101001011100101010001111111", 
    19 => "10111110100100000101110100001000", 
    20 => "10111101010111001100111101111100", 
    21 => "10111111000011111111100010011110", 
    22 => "10111110100001011010010110011011", 
    23 => "10111101101100010100011100011100", 
    24 => "10111110001110101110010100100000", 
    25 => "00111110000010011110001100110101", 
    26 => "10111110010101100110010111111110", 
    27 => "10111110011111000100110001001100", 
    28 => "10111110000110010100110111101001", 
    29 => "10111110000101110100001000010100", 
    30 => "00111100110010011010011100000111", 
    31 => "10111101111011010000010110001011", 
    32 => "10111101001110010110011000000010", 
    33 => "00111101011100101101010111110000", 
    34 => "10111110010000100000101010001110", 
    35 => "10111110010010100110111001101000", 
    36 => "00111101110111101100000011011100", 
    37 => "10111101000100000000001001010101", 
    38 => "10111101101101010010101110100000", 
    39 => "00111101001111001110100110100111", 
    40 => "10111111001100010110010111110001", 
    41 => "00111110000000000110111100110111", 
    42 => "10111110000111011010011011100011", 
    43 => "00111110010100010110101111110111", 
    44 => "10111100111010101100011111100000", 
    45 => "10111101111101110100010101100001", 
    46 => "00111101101111000010111110110001", 
    47 => "10111110100000011001100011000100", 
    48 => "10111100110000011101011110011010", 
    49 => "00111110000100001100110101111010", 
    50 => "10111101010111110010001000001110", 
    51 => "10111110001100111110001001110100", 
    52 => "10111101110101000110101100111010", 
    53 => "10111111000010000101110011001010", 
    54 => "10111110110000001011111100111111", 
    55 => "10111101001001101000110011011000", 
    56 => "10111100010101010101101101111110", 
    57 => "10111101111100010010010110101100", 
    58 => "10111110100010011100110011001101", 
    59 => "10111110000000000101101001000100", 
    60 => "00111101101110010110001000101101", 
    61 => "10111101100111000100010110010101", 
    62 => "00111101111100011001001010100010", 
    63 => "00111101111010001110100011010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibxn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibxn is
    component conv_2_conv_2_weibxn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibxn_rom_U :  component conv_2_conv_2_weibxn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


