-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicDy_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicDy_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111100100011111110100110000111", 
    1 => "10111110010101101100011100010001", 
    2 => "10111110100011001100110000000000", 
    3 => "00111110100011001110100000100110", 
    4 => "10111110110010011101110111111000", 
    5 => "10111101100101111110000011110001", 
    6 => "10111110011100110000000101100111", 
    7 => "00111100111011100111010101011100", 
    8 => "10111110001100011000111011010000", 
    9 => "00111101100000010000101001110100", 
    10 => "00111101000010011001010000010110", 
    11 => "00111101101100001101010001000100", 
    12 => "10111110011100101000001111111100", 
    13 => "10111110100111001000100110000011", 
    14 => "10111101110011111100010101000111", 
    15 => "10111101110011101000001110100110", 
    16 => "10111101100011111100111100001001", 
    17 => "00111101111001100100110000100011", 
    18 => "00111101101010101011011010101010", 
    19 => "00111101111111000000111001111011", 
    20 => "00111101110110000111101111100100", 
    21 => "10111110111101100010011000110011", 
    22 => "10111110011000101010001110110110", 
    23 => "10111101010101111000000101101111", 
    24 => "10111110011110001101011101001010", 
    25 => "10111110100011000010000110000100", 
    26 => "00111101110000000110000000111101", 
    27 => "10111101111001101010011101101110", 
    28 => "00111100101110111111000101111111", 
    29 => "10111101001110111000010110100001", 
    30 => "10111100101001001001000000011000", 
    31 => "00111110100101001000110011001100", 
    32 => "00111101111010010110100011101111", 
    33 => "10111101100110000010100101000111", 
    34 => "00111101110001001010100001111011", 
    35 => "10111101111110000000011001110100", 
    36 => "10111110100101101100001000100100", 
    37 => "10111101000001011110000001001101", 
    38 => "10111110010011100100011011110000", 
    39 => "10111110100100011001010000100000", 
    40 => "10111101111010110010100011010111", 
    41 => "00111010000110000101111100110000", 
    42 => "10111110001111000011100011110001", 
    43 => "10111101000110111100001100011001", 
    44 => "00111110000100100101101111111101", 
    45 => "00111110011001011000110001001100", 
    46 => "00111101101011001001000101010000", 
    47 => "10111101111011111100110010100111", 
    48 => "10111100111010110001110101101101", 
    49 => "10111100101000011101101011110010", 
    50 => "10111110100011101110110110001101", 
    51 => "10111101100011111011000101011100", 
    52 => "00111110001110011101011101011110", 
    53 => "10111110010110001011010011011011", 
    54 => "10111110011101000111101110100110", 
    55 => "10111110101101010001110110011000", 
    56 => "00111100110101001000100110100000", 
    57 => "00111101101011010010110011011110", 
    58 => "10111110101111110100011011110000", 
    59 => "10111101010000100100000110110111", 
    60 => "10111110000011110011100101010011", 
    61 => "10111101101011001000110111000001", 
    62 => "10111101011101001100010110000011", 
    63 => "10111101010111011000010000111101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicDy is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicDy is
    component conv_2_conv_2_weicDy_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicDy_rom_U :  component conv_2_conv_2_weicDy_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


