-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibOq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibOq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110001101001110100010101110", 
    1 => "00111011110001100010001111010000", 
    2 => "00111100000011110100100111001010", 
    3 => "10111100011011111011000101011001", 
    4 => "10111011101101100011001010010010", 
    5 => "10111100001001101001000101001100", 
    6 => "10111101111110101101110001011010", 
    7 => "00111101111101111101111011111110", 
    8 => "10111110110100101101010111101011", 
    9 => "10111110010011001111001110110100", 
    10 => "10111110001001010010011111111100", 
    11 => "10111101000100100011011110000010", 
    12 => "00111101000001101010000101010100", 
    13 => "00111101100011110100110100001101", 
    14 => "10111110110011011110100100011011", 
    15 => "10111110111001101110111111111011", 
    16 => "10111110011111010011011001100100", 
    17 => "00111101010100001010000100100100", 
    18 => "10111101101110001110100111011010", 
    19 => "10111101010000011001110111110110", 
    20 => "00111110011000101101000101010100", 
    21 => "00111110001111010001011111111111", 
    22 => "00111101111001110101011011110110", 
    23 => "10111101111001011100001101000110", 
    24 => "10111101001110000101000100101001", 
    25 => "10111110101110111011000111011011", 
    26 => "10111101101010110011000010110101", 
    27 => "10111110000010101110101110011100", 
    28 => "10111100000000011101001110010001", 
    29 => "10111101110111111011011000111110", 
    30 => "00111100100010111111101100101010", 
    31 => "00111101010010100110011100101101", 
    32 => "10111110001010011001100010110001", 
    33 => "00111110010101111001010111100101", 
    34 => "10111101111010011010001011000010", 
    35 => "10111011100000110101111110000111", 
    36 => "00111101100000010110110001101000", 
    37 => "00111101100011100100100000101101", 
    38 => "10111110000110010011111111110001", 
    39 => "10111110001110010001110010100100", 
    40 => "10111101100000111010110101011000", 
    41 => "10111110011011111110111100010111", 
    42 => "10111101001010111001101010110101", 
    43 => "10111110001011110111110111110001", 
    44 => "10111110000011011001011111001100", 
    45 => "10111110001001100000010011011110", 
    46 => "10111101011000110010110000010010", 
    47 => "10111110011010100110101001110110", 
    48 => "10111110100011011101010110001101", 
    49 => "10111110001101000101101111001000", 
    50 => "10111100010100011001111110000000", 
    51 => "00111101011010001100100101000100", 
    52 => "10111101000101100111011110111011", 
    53 => "00111101101011111000111111001010", 
    54 => "10111100101010010001010110001000", 
    55 => "00111110011000110010010110111000", 
    56 => "10111101110000100101111010011011", 
    57 => "10111110010010001110110001000100", 
    58 => "10111101001011110100001010010001", 
    59 => "10111110000001011001100011001110", 
    60 => "10111110010111101100011100001111", 
    61 => "10111101100001101000110010100000", 
    62 => "10111110011111101001001011010101", 
    63 => "10111101111110000010010110111000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibOq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibOq is
    component conv_2_conv_2_weibOq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibOq_rom_U :  component conv_2_conv_2_weibOq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


