-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weib8t_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weib8t_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101011011001011010101001000", 
    1 => "10111101001100111011111111110101", 
    2 => "00111101000110101101100010011011", 
    3 => "00111101010001101110000111110000", 
    4 => "00111101000100001101011100010111", 
    5 => "00111011101000010001111100011011", 
    6 => "10111100011100001000100101110111", 
    7 => "10111101010100000100100000001111", 
    8 => "00111101001010101111000011000001", 
    9 => "00111100110000100000010001000111", 
    10 => "00111011011101001111011110101000", 
    11 => "10111110000111110111101100011110", 
    12 => "00111100101101001000110110011110", 
    13 => "00111100000111010100100011000101", 
    14 => "10111101000110011000011001111101", 
    15 => "10111101010011000110001101111001", 
    16 => "10111100111100011001101011010001", 
    17 => "00111101011110001110110000000011", 
    18 => "00111101010111101100101000011000", 
    19 => "00111100001100110111001001010100", 
    20 => "10111101101001100001101100101010", 
    21 => "10111110011111111000110001111110", 
    22 => "00111110000000001110011011011010", 
    23 => "10111101111100010001010001100101", 
    24 => "10111101101010000000000111000100", 
    25 => "10111101100111110111111111000100", 
    26 => "00111101000011000000100101000001", 
    27 => "10111110100010010101011101000010", 
    28 => "00111101000001110010110100110011", 
    29 => "00111101001111000111010000100000", 
    30 => "10111110010001001111110010111111", 
    31 => "00111100101001111101110110010001", 
    32 => "10111110001110100011100100000011", 
    33 => "00111110001110101100111111100110", 
    34 => "00111101100011011011101110100000", 
    35 => "10111100110111100101011010110110", 
    36 => "00111101010111110110111001111100", 
    37 => "00111101110100000000100000001101", 
    38 => "10111110001011100011010101010001", 
    39 => "00111101101100110010100110000110", 
    40 => "10111101110011101111101111111101", 
    41 => "00111100000111000011011100101000", 
    42 => "00111101101010111011010100100011", 
    43 => "10111101001001001100110111111000", 
    44 => "10111110001000011111100011111100", 
    45 => "10111101110001101110100111111100", 
    46 => "10111110011100011011010011010001", 
    47 => "10111110011100001100110101100011", 
    48 => "10111101100001100010000010100010", 
    49 => "10111110000011100011000110000100", 
    50 => "10111110001111011101100011100110", 
    51 => "00111100100000010011100011101001", 
    52 => "00111100100011011101100100101001", 
    53 => "10111110010101000111101111100100", 
    54 => "00111101010111010101101001001011", 
    55 => "00111101010100111000111100011010", 
    56 => "10111101011011011001011011010101", 
    57 => "00111100101100100111001011110011", 
    58 => "10111101010001110101010011111011", 
    59 => "00111101110100010010100110101101", 
    60 => "10111110010100011010100100000111", 
    61 => "00111101010010000010100111000110", 
    62 => "00111101010110110111111010000101", 
    63 => "00111101110000100001111110011000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weib8t is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weib8t is
    component conv_2_conv_2_weib8t_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weib8t_rom_U :  component conv_2_conv_2_weib8t_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


