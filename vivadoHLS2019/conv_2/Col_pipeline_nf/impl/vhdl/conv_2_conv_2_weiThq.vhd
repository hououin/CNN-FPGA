-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiThq_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiThq_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010000101011110011110001", 
    1 => "10111101100001111010100000011100", 
    2 => "10111110010011001100001110111011", 
    3 => "00111110010001000000101000011100", 
    4 => "10111110101100101010011101111100", 
    5 => "00111101101011010101101101000011", 
    6 => "10111101010011001101000011100110", 
    7 => "10111110000001111000001011100100", 
    8 => "00111110001001011110101010001101", 
    9 => "10111011110000101000011001100110", 
    10 => "00111100110000001111100110111010", 
    11 => "10111110001000101000110011001101", 
    12 => "10111101111011100101001000011111", 
    13 => "10111110000010100100010000111010", 
    14 => "00111110010001101111100001011111", 
    15 => "00111110000100000001100101101100", 
    16 => "10111110100101111001111000111001", 
    17 => "00111101100101110111011111000101", 
    18 => "10111101000111111000010010001100", 
    19 => "00111100111110111110011110110011", 
    20 => "00111101110101001001011010110000", 
    21 => "00111101000000100010100110000101", 
    22 => "10111110100110100111101101000011", 
    23 => "10111110001111111010011001000110", 
    24 => "10111011110110001111010110100000", 
    25 => "00111110000100101100010011010110", 
    26 => "00111101110000110100110011100100", 
    27 => "00111110001010000101011101011010", 
    28 => "10111101001000100101111110111100", 
    29 => "00111101011001010100101000100001", 
    30 => "10111110000101000011011010110000", 
    31 => "10111110100101011001100100000010", 
    32 => "00111110010000110000110110100011", 
    33 => "10111110011111001111001000110000", 
    34 => "00111110000001110100110100001110", 
    35 => "00111101111110100000001010110011", 
    36 => "10111101101111110011111001000001", 
    37 => "10111100001001100110101101101000", 
    38 => "10111110000111111101011001110011", 
    39 => "00111101110111010001101001111001", 
    40 => "00111110000000000111010110100111", 
    41 => "00111110100100001010101111010010", 
    42 => "10111110110001110001101001010111", 
    43 => "00111101110010010000000100001111", 
    44 => "10111011110010010101010111010111", 
    45 => "00111101100010101111001010011011", 
    46 => "10111101110010000011110000000101", 
    47 => "10111101010101110111110111001000", 
    48 => "10111110000011001011001010010001", 
    49 => "10111110000101101011010001101010", 
    50 => "00111101110000110100111010100010", 
    51 => "00111110000101011011010001000010", 
    52 => "10111101110100010100011001011000", 
    53 => "10111101111011100010100010100111", 
    54 => "10111101001101101000101011000110", 
    55 => "10111110010101111011001011111001", 
    56 => "10111101001111001100111010001101", 
    57 => "10111101111000010000111101100110", 
    58 => "00111100001001001011100111011110", 
    59 => "10111110011100001111001001110100", 
    60 => "10111101110010111010110010100111", 
    61 => "00111110000000101001011001001101", 
    62 => "00111101110111000010001111101110", 
    63 => "00111110000011001101101101010010" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiThq is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiThq is
    component conv_2_conv_2_weiThq_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiThq_rom_U :  component conv_2_conv_2_weiThq_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


