-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weiclv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weiclv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101101000000101100111011111", 
    1 => "00111100011100101011110000011111", 
    2 => "10111101101100101010101111101000", 
    3 => "00111101101100100011111010100001", 
    4 => "00111101110001011111100100110100", 
    5 => "00111101110100100011010010011101", 
    6 => "00111100001001101100011101001101", 
    7 => "10111101000111000110111110000100", 
    8 => "00111100110001111111000010001101", 
    9 => "00111101001000101001100111001100", 
    10 => "00111101101000000010101000110110", 
    11 => "00111101001101101100100000110100", 
    12 => "00111101000011111111111010101010", 
    13 => "00111100010011111001100000010110", 
    14 => "00111100111001000001100000011101", 
    15 => "00111100111100001010110111000010", 
    16 => "00111101010111010101011011011111", 
    17 => "00111101000001001011100100100110", 
    18 => "00111101011011100011100010101111", 
    19 => "10111101000100101100011100000001", 
    20 => "10111101011100110111011111011110", 
    21 => "10111101100101110101001111111011", 
    22 => "00111101000001001001100000111101", 
    23 => "10111101101101100001110111110111", 
    24 => "10111100010111011000100101001101", 
    25 => "10111101000101100011110101011100", 
    26 => "00111101101011100101001001001000", 
    27 => "10111110100110110111101101000011", 
    28 => "10111100111001000010001110110000", 
    29 => "10111100100010010011111011001100", 
    30 => "10111101100011010111110101011100", 
    31 => "10111011101001000001100000101001", 
    32 => "00111101100100111101110100000110", 
    33 => "10111100100110111101111011001010", 
    34 => "00111101111011101010100111011011", 
    35 => "10111100110101001010000100000100", 
    36 => "00111101010111111001100111111001", 
    37 => "10111110000001110010000011111010", 
    38 => "00111101001101110100001101000001", 
    39 => "10111011101111110101111100000001", 
    40 => "10111101110011100010111101010101", 
    41 => "00111100111110100101001110011100", 
    42 => "10111011101100110000001110111111", 
    43 => "00111100111001110110100100100000", 
    44 => "00111101001001101110101110111101", 
    45 => "00111100101000111000010111100110", 
    46 => "00111101111110111101110110111011", 
    47 => "00111101111001001010001011010010", 
    48 => "00111110001000011001100001011111", 
    49 => "10111100110000010000101110101100", 
    50 => "10111011011001010110101101110010", 
    51 => "00111101000011011100001001011000", 
    52 => "10111101010111101110100111111011", 
    53 => "10111101101110000010000111000001", 
    54 => "10111101000011011000011101001010", 
    55 => "10111101111001010001001010010000", 
    56 => "00111100000110000110111010100111", 
    57 => "10111101100010010100010100010101", 
    58 => "10111101111011000011000100100100", 
    59 => "10111101000001100000001101000101", 
    60 => "10111011110011001010111110101111", 
    61 => "10111001101111010010100101010010", 
    62 => "10111101001111101000111110111110", 
    63 => "00111100010101010100011101010011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weiclv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weiclv is
    component conv_2_conv_2_weiclv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weiclv_rom_U :  component conv_2_conv_2_weiclv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


