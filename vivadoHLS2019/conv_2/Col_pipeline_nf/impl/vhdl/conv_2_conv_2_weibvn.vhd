-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibvn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibvn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111101010001100001101101001101", 
    1 => "10111110010001101111100001111101", 
    2 => "10111101010001001000101001110101", 
    3 => "10111101101010010011111000101100", 
    4 => "00111100110111111111111011101000", 
    5 => "00111110000101000110101101000010", 
    6 => "00111110000011110011111101100001", 
    7 => "10111101100110011111100000110100", 
    8 => "00111011101001000011101110100111", 
    9 => "00111101110001010111000010100011", 
    10 => "00111011110101011011010101100110", 
    11 => "00111110011001100100010001001111", 
    12 => "10111101101010101011001111001011", 
    13 => "00111101100000100101011100001011", 
    14 => "00111011001100100011011111000011", 
    15 => "00111101101001100110010001101100", 
    16 => "10111100011001000011010110011010", 
    17 => "00111101110000100010010101010011", 
    18 => "00111100000110000100000110111101", 
    19 => "00111101111000111011010110101010", 
    20 => "10111110001011011101110000000110", 
    21 => "00111101100110011100010110000011", 
    22 => "00111101111001101100010001110001", 
    23 => "10111101011101110101100110111111", 
    24 => "00111110001010010000011100101100", 
    25 => "10111101100000001001011011001000", 
    26 => "10111101100101000101110000100001", 
    27 => "10111100100010110000111100100111", 
    28 => "10111101010000001010011101101100", 
    29 => "00111101001010011101011000011010", 
    30 => "10111101100000000001011011110100", 
    31 => "10111110100110001001001000100011", 
    32 => "00111101111001110110011010001101", 
    33 => "10111110010100101010001111001101", 
    34 => "00111101110110011110111100001111", 
    35 => "10111110001100000100111101010011", 
    36 => "10111110100011000001111011000000", 
    37 => "10111110000110110000011001110000", 
    38 => "00111100110101100110110110110101", 
    39 => "10111101000010110001011010001001", 
    40 => "00111101110001000111011110110111", 
    41 => "00111101100011110111101101011001", 
    42 => "10111100101110110010111100101010", 
    43 => "10111100100010010101111001110010", 
    44 => "00111101111111110110111101110001", 
    45 => "10111101101110101111110000011000", 
    46 => "00111101010101011100111000100011", 
    47 => "00111100100001111011100111010001", 
    48 => "00111101010111101101000111000100", 
    49 => "10111110100101101111010100010010", 
    50 => "00111101110101010000010011100000", 
    51 => "10111101111110111101110011010101", 
    52 => "10111101101100100011100011000100", 
    53 => "10111100110110100000111011111111", 
    54 => "00111101110100110101010111100100", 
    55 => "10111101110101001000001010000000", 
    56 => "00111101101001011101001100111110", 
    57 => "00111110000010101110111000111010", 
    58 => "00111101000111100000011101010110", 
    59 => "00111110000000101100100100110001", 
    60 => "00111100011111010101001001111001", 
    61 => "10111101101100100101101110101111", 
    62 => "00111100110011111101000001111100", 
    63 => "10111101111010111010000111111100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibvn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibvn is
    component conv_2_conv_2_weibvn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibvn_rom_U :  component conv_2_conv_2_weibvn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


