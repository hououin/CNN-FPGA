-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibnm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibnm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101010100110111001100110010", 
    1 => "10111110000011000010000100001000", 
    2 => "00111011100101000111111100010100", 
    3 => "10111101111010100010110001110110", 
    4 => "00111110000100100101101001100110", 
    5 => "00111101110000101001010001011110", 
    6 => "10111110001100001000111101100010", 
    7 => "00111101011110110100101010011100", 
    8 => "10111100000011011001010111010101", 
    9 => "10111100111001111100010111011100", 
    10 => "00111010111011110101001000000011", 
    11 => "10111010110100100110101010111000", 
    12 => "10111110010010110011101100000110", 
    13 => "00111101000000101100011010110010", 
    14 => "10111101010101011101101111011101", 
    15 => "00111101000110101010110010010110", 
    16 => "00111101010110111001101001010110", 
    17 => "10111101111010110111100010100000", 
    18 => "00111110010011000100001101011101", 
    19 => "10111110010100000101010101101100", 
    20 => "10111110000101110101101110011011", 
    21 => "10111011011100101001001000000111", 
    22 => "00111101110010101000011111100110", 
    23 => "00111110010100000110110011100100", 
    24 => "00111101100000100100101010111010", 
    25 => "00111011000100011101100011111010", 
    26 => "10111101111010111110111011111101", 
    27 => "10111110011100100010100111100000", 
    28 => "00111101110111111001010010001011", 
    29 => "10111110010101111011101000101100", 
    30 => "10111100100111101010101110110110", 
    31 => "10111110110000111001100011011011", 
    32 => "00111101001001111101100111100000", 
    33 => "10111101111110101101011101101000", 
    34 => "10111101001100111010011010100010", 
    35 => "10111101110100101101111011010001", 
    36 => "10111110001100110111000010010001", 
    37 => "10111101100101001001101001111101", 
    38 => "10111100100111111000110001110110", 
    39 => "00111110001100110111001010111001", 
    40 => "10111101101110110011011111010011", 
    41 => "10111101100001010110010010101110", 
    42 => "10111100101111101111001100010110", 
    43 => "10111110000101110110001000101111", 
    44 => "00111100000000111101011110101111", 
    45 => "00111101101000100111011111001100", 
    46 => "00111100100011100110111000011001", 
    47 => "10111101101100010000000000111111", 
    48 => "10111110100000001000011111010001", 
    49 => "10111110000100011000000010001001", 
    50 => "10111011100110111101100010001101", 
    51 => "10111110001111101000110001101001", 
    52 => "10111101101111111100110011010000", 
    53 => "10111101110001011011110010011011", 
    54 => "10111101010010000111110101100000", 
    55 => "00111100110010111000101001111001", 
    56 => "00111100111000011001101001001001", 
    57 => "10111101101000001010110111001110", 
    58 => "00111110001000110011110101011100", 
    59 => "00111101110001111101011101101110", 
    60 => "10111101111011001100100110111100", 
    61 => "10111101101010000001011000010001", 
    62 => "00111101101001011010110111000110", 
    63 => "00111101101011111101101010101011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibnm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibnm is
    component conv_2_conv_2_weibnm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibnm_rom_U :  component conv_2_conv_2_weibnm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


