-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weieyR_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weieyR_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111110011010110011011001011110", 
    1 => "10111101101010011111011101011000", 
    2 => "10111101101001111101001000001001", 
    3 => "10111101101110100001101010011111", 
    4 => "00111101011000100110010011001000", 
    5 => "10111110011000100101101000101011", 
    6 => "00111101110011001001100101110110", 
    7 => "00111100111011101110000001011010", 
    8 => "10111101100110011100101000100100", 
    9 => "10111110001111110110001010001001", 
    10 => "10111110100110011100010011001111", 
    11 => "10111101011101010101110001100001", 
    12 => "00111110001011011100111000101100", 
    13 => "00111110000001110010101000011011", 
    14 => "10111100111111011100001010011101", 
    15 => "00111101010110010001110100110001", 
    16 => "10111101010010100100010100000101", 
    17 => "10111101111110001110111000111101", 
    18 => "10111010111001010001001011010010", 
    19 => "00111110000111010010111010010001", 
    20 => "00111101100100010100110001011010", 
    21 => "00111110001010101001100110100100", 
    22 => "00111101101010011011110100010011", 
    23 => "00111110101010011111001111100110", 
    24 => "00111101110000001000100010010001", 
    25 => "00111101110000111110001000110110", 
    26 => "10111110001001011111001010010110", 
    27 => "10111101011111110011100000001000", 
    28 => "10111100101001011000101111001010", 
    29 => "10111101100111010111001110101111", 
    30 => "10111101100111111001101000100010", 
    31 => "10111100011010011101001010111100", 
    32 => "10111110100011000000111111110001", 
    33 => "10111101011010000110110000111101", 
    34 => "10111110011101001111101011011110", 
    35 => "10111101011111111010010100010101", 
    36 => "00111110101111101011111000011000", 
    37 => "10111110001111101010100000100111", 
    38 => "00111101101000100100101010101111", 
    39 => "10111101110111000100011100000011", 
    40 => "00111101000111110010010111001101", 
    41 => "00111101010101100001011001111001", 
    42 => "00111101101010100011110100000001", 
    43 => "00111100111111011011010010001100", 
    44 => "10111110001001011001001000101000", 
    45 => "10111101110111101001000011011001", 
    46 => "10111101010001100110011101000001", 
    47 => "00111101111000101100000000100111", 
    48 => "00111100111101110100100111100001", 
    49 => "10111100001010111101101110110100", 
    50 => "00111101101100101001110011101010", 
    51 => "10111100111101101111000011100000", 
    52 => "10111100101011010011000011010100", 
    53 => "00111110010010010111101100011001", 
    54 => "00111100000011011101100000110101", 
    55 => "00111110101011011011011001010110", 
    56 => "10111110000101001001000010100010", 
    57 => "10111100110111111111001111101011", 
    58 => "00111100110101010011000001000101", 
    59 => "10111110100000000101111111010011", 
    60 => "00111101101101101111111101100000", 
    61 => "00111110001001010001001010110010", 
    62 => "00111010011010001011110101110011", 
    63 => "10111101111001111100101110101001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weieyR is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weieyR is
    component conv_2_conv_2_weieyR_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weieyR_rom_U :  component conv_2_conv_2_weieyR_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


