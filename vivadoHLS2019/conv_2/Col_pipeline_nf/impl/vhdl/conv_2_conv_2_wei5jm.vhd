-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_wei5jm_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_wei5jm_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101111111111000001000100011", 
    1 => "10111110000100001100010100110100", 
    2 => "10111101010100111011011010000000", 
    3 => "10111101001110011110001111010000", 
    4 => "10111101101011010010100110100110", 
    5 => "10111101110101001001111010011000", 
    6 => "10111110001101101001011000010010", 
    7 => "00111110000111101111101100101000", 
    8 => "00111010101010000111111101001000", 
    9 => "00111110000101110100011011100001", 
    10 => "10111101001110111000110101100110", 
    11 => "00111110100000101010100011100001", 
    12 => "10111110010010010101111011111111", 
    13 => "10111110101111100101000001111101", 
    14 => "10111101101110010100001010111000", 
    15 => "00111101010111110000110111110111", 
    16 => "10111110010111001100100000010100", 
    17 => "10111110100110011110100101101110", 
    18 => "00111101001000100111101001111111", 
    19 => "00111100110000000111010110001010", 
    20 => "00111110100011010000010100100000", 
    21 => "10111111000000110000000010101100", 
    22 => "10111110100101101001110111000000", 
    23 => "00111110000001110100001011110100", 
    24 => "10111110100010110001101110100010", 
    25 => "00111110000001100001010000111101", 
    26 => "10111101000111011010010000010001", 
    27 => "00111110000001101110111101111100", 
    28 => "10111110100110101111111110111110", 
    29 => "10111110001011101100101010111100", 
    30 => "00111101011011000110100100000111", 
    31 => "10111101101111110111010001010100", 
    32 => "00111101100010100110110100100000", 
    33 => "00111110011111101011001000001111", 
    34 => "00111100100010011000000001010110", 
    35 => "10111101010011110111100110111010", 
    36 => "00111100101101001111111011110100", 
    37 => "00111110000001111010001101010011", 
    38 => "10111100111111110011000100101100", 
    39 => "10111100100001110111111011110001", 
    40 => "10111101100111110101111010101111", 
    41 => "00111110000001010100011000000001", 
    42 => "10111101111000001111111011001110", 
    43 => "00111101011001110001110010110100", 
    44 => "00111101000100011101010011100111", 
    45 => "10111110010010110011011011010000", 
    46 => "10111110000010000001111000101110", 
    47 => "10111100111011001110111010101101", 
    48 => "00111101101100010101100011100010", 
    49 => "10111101100010010000110110010011", 
    50 => "10111110110100000001001000101110", 
    51 => "10111101001000000101100111000100", 
    52 => "10111101111001011010110000010010", 
    53 => "10111101111011000101000110001000", 
    54 => "10111110100110010011011001011011", 
    55 => "10111101100110111110010001011001", 
    56 => "10111110000001100011111110001001", 
    57 => "00111110010010010011111110001011", 
    58 => "10111110010010110101110000111100", 
    59 => "10111100111000100101110001001001", 
    60 => "10111110011011010010111011100000", 
    61 => "00111011100111100000101110000110", 
    62 => "00111101000101010001011111010010", 
    63 => "00111101100110111110010010110001" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_wei5jm is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_wei5jm is
    component conv_2_conv_2_wei5jm_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_wei5jm_rom_U :  component conv_2_conv_2_wei5jm_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


