-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weicmv_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weicmv_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101001000101101010011000101", 
    1 => "10111110000101101101001010111010", 
    2 => "10111110010011101101010101010101", 
    3 => "00111110010011010101111111110110", 
    4 => "10111110000000010110101000110011", 
    5 => "10111101100100100001111111111100", 
    6 => "10111101001000101000010100111110", 
    7 => "10111101100001011100011001111010", 
    8 => "10111110100011001110011110000010", 
    9 => "00111101111010011000101101111110", 
    10 => "00111101100101001111110100110110", 
    11 => "00111101001111001010010100100001", 
    12 => "10111110000111101101010010000000", 
    13 => "10111110110010111111111101001100", 
    14 => "10111110000010110001111111111111", 
    15 => "10111011100011110100001001100011", 
    16 => "10111101111000100110111010001000", 
    17 => "00111101010100010110100110100000", 
    18 => "10111110000100111000001100101100", 
    19 => "00111110000010111001000111010100", 
    20 => "00111110100001100000100010111001", 
    21 => "10111110111101001011111001000101", 
    22 => "10111110111100110111111111100111", 
    23 => "00111100010111010110110010110100", 
    24 => "10111110011001111111001001011010", 
    25 => "10111101111001111111100001000111", 
    26 => "00111101100011010000011010101001", 
    27 => "10111110000001001110110010100111", 
    28 => "10111101011010101001110110101111", 
    29 => "00111101000100001100100010001100", 
    30 => "00111101101111101110111000101010", 
    31 => "00111110011101001001110001101011", 
    32 => "00111101110001010111000010001011", 
    33 => "10111100111000000011101010000111", 
    34 => "00111101101000010111011010011101", 
    35 => "00111101110101101110001011010000", 
    36 => "10111110010010101101101111101101", 
    37 => "00111101100110001010010010001110", 
    38 => "10111101101010000001000110000100", 
    39 => "10111110011011101111100101011111", 
    40 => "10111110000110011100011100111001", 
    41 => "00111101111010110110000001110110", 
    42 => "10111101111001000110000101010110", 
    43 => "00111100101110001010011101101110", 
    44 => "00111101100111000111101010001001", 
    45 => "00111110010000111000000100110010", 
    46 => "00111110000011011111100011001101", 
    47 => "10111101101011000001001110111101", 
    48 => "00111101101100101001111110011010", 
    49 => "10111101000000101000000111000011", 
    50 => "10111110011101001111110110111100", 
    51 => "10111110000111110001100001010101", 
    52 => "00111101110010101100111101001110", 
    53 => "10111101111000110101001100111111", 
    54 => "10111101111010111011010101000111", 
    55 => "10111101100001101000101110110100", 
    56 => "10111100101101010010101011011001", 
    57 => "00111101111011110010111101011010", 
    58 => "10111110100010101111011010010101", 
    59 => "10111101110000010111010010000011", 
    60 => "10111110101110010000111010000000", 
    61 => "10111011000010111011110110011010", 
    62 => "10111101010011000111010000101101", 
    63 => "00111101100100011011111101011100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weicmv is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weicmv is
    component conv_2_conv_2_weicmv_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weicmv_rom_U :  component conv_2_conv_2_weicmv_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


