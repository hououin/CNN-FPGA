-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2019.1 (64-bit)
-- Copyright 1986-2019 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity conv_2_conv_2_weibwn_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 6; 
             MEM_SIZE    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of conv_2_conv_2_weibwn_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "10111101101011101100111011111111", 
    1 => "10111101111010000000101110111010", 
    2 => "10111110001111010101100011000110", 
    3 => "00111101101110001111101101101000", 
    4 => "10111101001100100010111101110010", 
    5 => "10111100101100111101101100110010", 
    6 => "00111110001001101011010111100101", 
    7 => "10111010001111101111100001101010", 
    8 => "00111101010111111001001000010110", 
    9 => "00111101111010111100000011001101", 
    10 => "00111110010001100001100011111110", 
    11 => "10111101011001100000100101001101", 
    12 => "00111101111100010011101011000000", 
    13 => "00111110010001010010000101101100", 
    14 => "00111110001010000101100000111010", 
    15 => "00111110000010100011000110010101", 
    16 => "00111101110010110000100110100010", 
    17 => "00111101101000100010010101110010", 
    18 => "00111101000000000111110000011100", 
    19 => "10111110001101000110111101111111", 
    20 => "00111101110011111111100101010011", 
    21 => "00111101100110000000001001000011", 
    22 => "00111101111111001101001010010011", 
    23 => "00111101111111001001011100000110", 
    24 => "10111100110111000000011001001000", 
    25 => "00111011101010110011001011010011", 
    26 => "00111101111010101011101110101001", 
    27 => "10111110100000111100111110011101", 
    28 => "00111110001000110110101011010010", 
    29 => "10111110000001110000111100110000", 
    30 => "00111101011100010100110000110011", 
    31 => "10111110011010001100000000100001", 
    32 => "00111100001100101111010100110001", 
    33 => "00111110001000010111101000001111", 
    34 => "00111110000110101101101101001001", 
    35 => "10111110000000010101011110011010", 
    36 => "10111101100011011111110011001000", 
    37 => "00111110000000101100110010100010", 
    38 => "10111100111010110011111100011100", 
    39 => "10111100111000011001010100010000", 
    40 => "10111110011011110110100011000101", 
    41 => "00111110010100111001110010101110", 
    42 => "10111101001100000001010111100111", 
    43 => "00111110010010111010000001101101", 
    44 => "10111100100101000011101100000101", 
    45 => "00111110001010111011111101101001", 
    46 => "00111110010100110001000111010000", 
    47 => "00111110011100010000000010111010", 
    48 => "00111011100101111001001101111110", 
    49 => "10111101111101110100000001011000", 
    50 => "10111101000010011001101000100111", 
    51 => "10111110011011000101000010101011", 
    52 => "10111101110111101111101111101111", 
    53 => "00111101010000110010000111001111", 
    54 => "10111101111110001001000100110100", 
    55 => "10111110010100011001101100101010", 
    56 => "00111101110111100001110011101110", 
    57 => "10111101101101100011011011000110", 
    58 => "00111101101111001000101100101001", 
    59 => "00111110011000000110110010011111", 
    60 => "10111011101110001111111111010111", 
    61 => "00111101110110101001101110101111", 
    62 => "00111100100101011001010110110100", 
    63 => "00111101110010010001001000011011" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity conv_2_conv_2_weibwn is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of conv_2_conv_2_weibwn is
    component conv_2_conv_2_weibwn_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    conv_2_conv_2_weibwn_rom_U :  component conv_2_conv_2_weibwn_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


