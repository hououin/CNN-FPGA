// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=4507009,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=7,HLS_SYN_FF=587,HLS_SYN_LUT=1657,HLS_VERSION=2019_1}" *)

module conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_pp0_stage0 = 7'd4;
parameter    ap_ST_fsm_pp0_stage1 = 7'd8;
parameter    ap_ST_fsm_state7 = 7'd16;
parameter    ap_ST_fsm_state8 = 7'd32;
parameter    ap_ST_fsm_state9 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
input  [31:0] max_pool_1_out_q0;
output  [12:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_1_out_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] conv_2_weights_address0;
reg    conv_2_weights_ce0;
wire   [31:0] conv_2_weights_q0;
wire   [5:0] conv_2_bias_address0;
reg    conv_2_bias_ce0;
wire   [31:0] conv_2_bias_q0;
reg   [8:0] indvar_flatten21_reg_231;
reg   [1:0] wr_0_reg_242;
reg   [7:0] indvar_flatten_reg_253;
reg   [1:0] wc_0_reg_264;
reg   [31:0] w_sum_2_reg_275;
reg   [5:0] ch_0_reg_287;
wire   [0:0] icmp_ln54_fu_317_p2;
wire    ap_CS_fsm_state2;
wire   [12:0] add_ln54_fu_323_p2;
reg   [12:0] add_ln54_reg_789;
wire   [0:0] icmp_ln57_fu_335_p2;
reg   [0:0] icmp_ln57_reg_794;
wire   [3:0] select_ln80_1_fu_349_p3;
reg   [3:0] select_ln80_1_reg_799;
wire   [6:0] select_ln80_2_fu_391_p3;
reg   [6:0] select_ln80_2_reg_805;
wire   [3:0] select_ln80_3_fu_399_p3;
reg   [3:0] select_ln80_3_reg_810;
wire   [63:0] zext_ln72_fu_418_p1;
reg   [63:0] zext_ln72_reg_818;
wire   [15:0] zext_ln80_2_fu_422_p1;
reg   [15:0] zext_ln80_2_reg_823;
reg   [12:0] conv_out_addr_reg_828;
wire   [0:0] icmp_ln64_fu_450_p2;
reg   [0:0] icmp_ln64_reg_833;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln64_reg_833_pp0_iter1_reg;
wire   [8:0] add_ln64_1_fu_456_p2;
reg   [8:0] add_ln64_1_reg_837;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln64_1_fu_482_p3;
reg   [1:0] select_ln64_1_reg_842;
wire   [5:0] select_ln67_fu_559_p3;
reg   [5:0] select_ln67_reg_847;
wire   [1:0] select_ln67_1_fu_571_p3;
reg   [1:0] select_ln67_1_reg_852;
wire   [7:0] select_ln67_3_fu_685_p3;
reg   [7:0] select_ln67_3_reg_867;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [5:0] ch_fu_693_p2;
reg   [5:0] ch_reg_882;
wire   [31:0] grp_fu_304_p2;
wire   [31:0] grp_fu_298_p2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state7;
wire   [6:0] f_fu_698_p2;
reg   [6:0] f_reg_902;
wire   [10:0] select_ln57_fu_709_p3;
reg   [10:0] select_ln57_reg_907;
wire    ap_CS_fsm_state8;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage1_subdone;
reg   [12:0] indvar_flatten43_reg_175;
wire    ap_CS_fsm_state9;
reg   [3:0] r_0_reg_186;
reg   [10:0] indvar_flatten29_reg_197;
reg   [3:0] c_0_reg_209;
reg   [6:0] f_0_reg_220;
reg   [8:0] ap_phi_mux_indvar_flatten21_phi_fu_235_p4;
wire    ap_block_pp0_stage0;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_246_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_257_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_268_p4;
wire   [31:0] ap_phi_mux_w_sum_2_phi_fu_279_p4;
reg   [5:0] ap_phi_mux_ch_0_phi_fu_291_p4;
wire   [63:0] zext_ln80_4_fu_436_p1;
wire   [63:0] zext_ln72_7_fu_663_p1;
wire   [63:0] zext_ln72_8_fu_674_p1;
reg   [31:0] grp_fu_298_p0;
reg   [31:0] grp_fu_298_p1;
wire    ap_block_pp0_stage1;
wire   [3:0] r_fu_329_p2;
wire   [0:0] icmp_ln60_fu_367_p2;
wire   [0:0] xor_ln80_fu_361_p2;
wire   [3:0] select_ln80_fu_341_p3;
wire   [0:0] and_ln80_fu_373_p2;
wire   [0:0] or_ln80_fu_385_p2;
wire   [3:0] c_fu_379_p2;
wire   [7:0] grp_fu_767_p3;
wire   [13:0] zext_ln80_3_fu_426_p1;
wire   [13:0] tmp_3_cast_fu_411_p3;
wire   [13:0] add_ln80_1_fu_430_p2;
wire   [3:0] zext_ln67_fu_441_p1;
wire   [0:0] icmp_ln67_fu_468_p2;
wire   [1:0] wr_fu_462_p2;
wire   [3:0] tmp_5_fu_494_p3;
wire   [4:0] zext_ln72_2_fu_502_p1;
wire   [4:0] zext_ln72_1_fu_490_p1;
wire   [4:0] sub_ln72_fu_506_p2;
wire   [3:0] zext_ln64_fu_516_p1;
wire   [3:0] add_ln64_fu_520_p2;
wire   [0:0] icmp_ln70_fu_535_p2;
wire   [0:0] xor_ln64_fu_529_p2;
wire   [1:0] select_ln64_fu_474_p3;
wire   [0:0] and_ln64_fu_541_p2;
wire   [0:0] or_ln67_fu_553_p2;
wire   [1:0] wc_fu_547_p2;
wire   [5:0] zext_ln67_2_fu_579_p1;
wire  signed [5:0] sext_ln72_fu_512_p1;
wire   [5:0] add_ln72_1_fu_583_p2;
wire   [4:0] trunc_ln72_fu_589_p1;
wire   [3:0] zext_ln67_1_fu_567_p1;
wire   [3:0] add_ln72_fu_445_p2;
wire   [3:0] add_ln72_2_fu_601_p2;
wire   [3:0] select_ln64_2_fu_606_p3;
wire   [3:0] select_ln67_2_fu_613_p3;
wire   [7:0] grp_fu_776_p3;
wire   [12:0] tmp_2_fu_625_p3;
wire   [9:0] zext_ln72_4_fu_636_p1;
wire   [9:0] tmp_s_fu_593_p3;
wire   [9:0] add_ln72_4_fu_644_p2;
wire   [15:0] tmp_13_cast_fu_650_p3;
wire   [15:0] add_ln72_5_fu_658_p2;
wire   [13:0] zext_ln72_6_fu_640_p1;
wire   [13:0] zext_ln67_3_fu_632_p1;
wire   [13:0] add_ln72_6_fu_668_p2;
wire   [7:0] add_ln67_fu_679_p2;
wire   [10:0] add_ln57_1_fu_703_p2;
wire   [31:0] bitcast_ln79_fu_716_p1;
wire   [7:0] tmp_fu_720_p4;
wire   [22:0] trunc_ln79_fu_730_p1;
wire   [0:0] icmp_ln79_1_fu_740_p2;
wire   [0:0] icmp_ln79_fu_734_p2;
wire   [0:0] or_ln79_fu_746_p2;
wire   [0:0] tmp_8_fu_311_p2;
wire   [0:0] and_ln79_fu_752_p2;
wire   [3:0] grp_fu_767_p0;
wire   [4:0] grp_fu_767_p1;
wire   [3:0] grp_fu_767_p2;
wire   [3:0] grp_fu_776_p0;
wire   [4:0] grp_fu_776_p1;
wire   [3:0] grp_fu_776_p2;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_767_p00;
wire   [7:0] grp_fu_767_p20;
wire   [7:0] grp_fu_776_p00;
wire   [7:0] grp_fu_776_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_2_conv_2_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 18432 ),
    .AddressWidth( 15 ))
conv_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_weights_address0),
    .ce0(conv_2_weights_ce0),
    .q0(conv_2_weights_q0)
);

conv_2_conv_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
conv_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_bias_address0),
    .ce0(conv_2_bias_ce0),
    .q0(conv_2_bias_q0)
);

conv_2_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_2_fadd_32ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_298_p0),
    .din1(grp_fu_298_p1),
    .ce(1'b1),
    .dout(grp_fu_298_p2)
);

conv_2_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_2_fmul_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_weights_q0),
    .din1(max_pool_1_out_q0),
    .ce(1'b1),
    .dout(grp_fu_304_p2)
);

conv_2_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_2_fcmp_32ns_eOg_U3(
    .din0(grp_fu_298_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_8_fu_311_p2)
);

conv_2_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_2_mac_muladdfYi_U4(
    .din0(grp_fu_767_p0),
    .din1(grp_fu_767_p1),
    .din2(grp_fu_767_p2),
    .dout(grp_fu_767_p3)
);

conv_2_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 4 ),
    .din1_WIDTH( 5 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_2_mac_muladdfYi_U5(
    .din0(grp_fu_776_p0),
    .din1(grp_fu_776_p1),
    .din2(grp_fu_776_p2),
    .dout(grp_fu_776_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        c_0_reg_209 <= select_ln80_3_reg_810;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_209 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ch_0_reg_287 <= ch_reg_882;
    end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        ch_0_reg_287 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        f_0_reg_220 <= f_reg_902;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_220 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten21_reg_231 <= add_ln64_1_reg_837;
    end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten21_reg_231 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten29_reg_197 <= select_ln57_reg_907;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten29_reg_197 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvar_flatten43_reg_175 <= add_ln54_reg_789;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten43_reg_175 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten_reg_253 <= select_ln67_3_reg_867;
    end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_253 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        r_0_reg_186 <= select_ln80_1_reg_799;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_186 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_sum_2_reg_275 <= grp_fu_298_p2;
    end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        w_sum_2_reg_275 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wc_0_reg_264 <= select_ln67_1_reg_852;
    end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wc_0_reg_264 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        wr_0_reg_242 <= select_ln64_1_reg_842;
    end else if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        wr_0_reg_242 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln54_reg_789 <= add_ln54_fu_323_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln64_1_reg_837 <= add_ln64_1_fu_456_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ch_reg_882 <= ch_fu_693_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln54_fu_317_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        conv_out_addr_reg_828 <= zext_ln80_4_fu_436_p1;
        icmp_ln57_reg_794 <= icmp_ln57_fu_335_p2;
        select_ln80_1_reg_799 <= select_ln80_1_fu_349_p3;
        select_ln80_2_reg_805 <= select_ln80_2_fu_391_p3;
        select_ln80_3_reg_810 <= select_ln80_3_fu_399_p3;
        zext_ln72_reg_818[6 : 0] <= zext_ln72_fu_418_p1[6 : 0];
        zext_ln80_2_reg_823[6 : 0] <= zext_ln80_2_fu_422_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        f_reg_902 <= f_fu_698_p2;
        select_ln57_reg_907 <= select_ln57_fu_709_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln64_reg_833 <= icmp_ln64_fu_450_p2;
        icmp_ln64_reg_833_pp0_iter1_reg <= icmp_ln64_reg_833;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln64_1_reg_842 <= select_ln64_1_fu_482_p3;
        select_ln67_1_reg_852 <= select_ln67_1_fu_571_p3;
        select_ln67_3_reg_867 <= select_ln67_3_fu_685_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_450_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        select_ln67_reg_847 <= select_ln67_fu_559_p3;
    end
end

always @ (*) begin
    if ((icmp_ln64_fu_450_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ch_0_phi_fu_291_p4 = ch_reg_882;
    end else begin
        ap_phi_mux_ch_0_phi_fu_291_p4 = ch_0_reg_287;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten21_phi_fu_235_p4 = add_ln64_1_reg_837;
    end else begin
        ap_phi_mux_indvar_flatten21_phi_fu_235_p4 = indvar_flatten21_reg_231;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_257_p4 = select_ln67_3_reg_867;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_257_p4 = indvar_flatten_reg_253;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wc_0_phi_fu_268_p4 = select_ln67_1_reg_852;
    end else begin
        ap_phi_mux_wc_0_phi_fu_268_p4 = wc_0_reg_264;
    end
end

always @ (*) begin
    if (((icmp_ln64_reg_833 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wr_0_phi_fu_246_p4 = select_ln64_1_reg_842;
    end else begin
        ap_phi_mux_wr_0_phi_fu_246_p4 = wr_0_reg_242;
    end
end

always @ (*) begin
    if (((icmp_ln54_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        conv_2_bias_ce0 = 1'b1;
    end else begin
        conv_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_2_weights_ce0 = 1'b1;
    end else begin
        conv_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_298_p0 = w_sum_2_reg_275;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_298_p0 = ap_phi_mux_w_sum_2_phi_fu_279_p4;
    end else begin
        grp_fu_298_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_298_p1 = conv_2_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_298_p1 = grp_fu_304_p2;
    end else begin
        grp_fu_298_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln54_fu_317_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln64_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln64_fu_450_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_fu_323_p2 = (indvar_flatten43_reg_175 + 13'd1);

assign add_ln57_1_fu_703_p2 = (11'd1 + indvar_flatten29_reg_197);

assign add_ln64_1_fu_456_p2 = (ap_phi_mux_indvar_flatten21_phi_fu_235_p4 + 9'd1);

assign add_ln64_fu_520_p2 = (select_ln80_1_reg_799 + zext_ln64_fu_516_p1);

assign add_ln67_fu_679_p2 = (ap_phi_mux_indvar_flatten_phi_fu_257_p4 + 8'd1);

assign add_ln72_1_fu_583_p2 = ($signed(zext_ln67_2_fu_579_p1) + $signed(sext_ln72_fu_512_p1));

assign add_ln72_2_fu_601_p2 = (select_ln80_3_reg_810 + zext_ln67_1_fu_567_p1);

assign add_ln72_4_fu_644_p2 = (zext_ln72_4_fu_636_p1 + tmp_s_fu_593_p3);

assign add_ln72_5_fu_658_p2 = (zext_ln80_2_reg_823 + tmp_13_cast_fu_650_p3);

assign add_ln72_6_fu_668_p2 = (zext_ln72_6_fu_640_p1 + zext_ln67_3_fu_632_p1);

assign add_ln72_fu_445_p2 = (select_ln80_3_reg_810 + zext_ln67_fu_441_p1);

assign add_ln80_1_fu_430_p2 = (zext_ln80_3_fu_426_p1 + tmp_3_cast_fu_411_p3);

assign and_ln64_fu_541_p2 = (xor_ln64_fu_529_p2 & icmp_ln70_fu_535_p2);

assign and_ln79_fu_752_p2 = (tmp_8_fu_311_p2 & or_ln79_fu_746_p2);

assign and_ln80_fu_373_p2 = (xor_ln80_fu_361_p2 & icmp_ln60_fu_367_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd6];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_2_phi_fu_279_p4 = w_sum_2_reg_275;

assign bitcast_ln79_fu_716_p1 = grp_fu_298_p2;

assign c_fu_379_p2 = (select_ln80_fu_341_p3 + 4'd1);

assign ch_fu_693_p2 = (select_ln67_reg_847 + 6'd1);

assign conv_2_bias_address0 = zext_ln72_reg_818;

assign conv_2_weights_address0 = zext_ln72_7_fu_663_p1;

assign conv_out_address0 = conv_out_addr_reg_828;

assign conv_out_d0 = ((and_ln79_fu_752_p2[0:0] === 1'b1) ? grp_fu_298_p2 : 32'd0);

assign f_fu_698_p2 = (7'd1 + select_ln80_2_reg_805);

assign grp_fu_767_p0 = grp_fu_767_p00;

assign grp_fu_767_p00 = select_ln80_1_fu_349_p3;

assign grp_fu_767_p1 = 8'd11;

assign grp_fu_767_p2 = grp_fu_767_p20;

assign grp_fu_767_p20 = select_ln80_3_fu_399_p3;

assign grp_fu_776_p0 = grp_fu_776_p00;

assign grp_fu_776_p00 = add_ln64_fu_520_p2;

assign grp_fu_776_p1 = 8'd13;

assign grp_fu_776_p2 = grp_fu_776_p20;

assign grp_fu_776_p20 = select_ln67_2_fu_613_p3;

assign icmp_ln54_fu_317_p2 = ((indvar_flatten43_reg_175 == 13'd7744) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_335_p2 = ((indvar_flatten29_reg_197 == 11'd704) ? 1'b1 : 1'b0);

assign icmp_ln60_fu_367_p2 = ((f_0_reg_220 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_450_p2 = ((ap_phi_mux_indvar_flatten21_phi_fu_235_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_468_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_257_p4 == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln70_fu_535_p2 = ((ap_phi_mux_ch_0_phi_fu_291_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln79_1_fu_740_p2 = ((trunc_ln79_fu_730_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln79_fu_734_p2 = ((tmp_fu_720_p4 != 8'd255) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln72_8_fu_674_p1;

assign or_ln67_fu_553_p2 = (icmp_ln67_fu_468_p2 | and_ln64_fu_541_p2);

assign or_ln79_fu_746_p2 = (icmp_ln79_fu_734_p2 | icmp_ln79_1_fu_740_p2);

assign or_ln80_fu_385_p2 = (icmp_ln57_fu_335_p2 | and_ln80_fu_373_p2);

assign r_fu_329_p2 = (r_0_reg_186 + 4'd1);

assign select_ln57_fu_709_p3 = ((icmp_ln57_reg_794[0:0] === 1'b1) ? 11'd1 : add_ln57_1_fu_703_p2);

assign select_ln64_1_fu_482_p3 = ((icmp_ln67_fu_468_p2[0:0] === 1'b1) ? wr_fu_462_p2 : ap_phi_mux_wr_0_phi_fu_246_p4);

assign select_ln64_2_fu_606_p3 = ((icmp_ln67_fu_468_p2[0:0] === 1'b1) ? select_ln80_3_reg_810 : add_ln72_fu_445_p2);

assign select_ln64_fu_474_p3 = ((icmp_ln67_fu_468_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_268_p4);

assign select_ln67_1_fu_571_p3 = ((and_ln64_fu_541_p2[0:0] === 1'b1) ? wc_fu_547_p2 : select_ln64_fu_474_p3);

assign select_ln67_2_fu_613_p3 = ((and_ln64_fu_541_p2[0:0] === 1'b1) ? add_ln72_2_fu_601_p2 : select_ln64_2_fu_606_p3);

assign select_ln67_3_fu_685_p3 = ((icmp_ln67_fu_468_p2[0:0] === 1'b1) ? 8'd1 : add_ln67_fu_679_p2);

assign select_ln67_fu_559_p3 = ((or_ln67_fu_553_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_ch_0_phi_fu_291_p4);

assign select_ln80_1_fu_349_p3 = ((icmp_ln57_fu_335_p2[0:0] === 1'b1) ? r_fu_329_p2 : r_0_reg_186);

assign select_ln80_2_fu_391_p3 = ((or_ln80_fu_385_p2[0:0] === 1'b1) ? 7'd0 : f_0_reg_220);

assign select_ln80_3_fu_399_p3 = ((and_ln80_fu_373_p2[0:0] === 1'b1) ? c_fu_379_p2 : select_ln80_fu_341_p3);

assign select_ln80_fu_341_p3 = ((icmp_ln57_fu_335_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_209);

assign sext_ln72_fu_512_p1 = $signed(sub_ln72_fu_506_p2);

assign sub_ln72_fu_506_p2 = (zext_ln72_2_fu_502_p1 - zext_ln72_1_fu_490_p1);

assign tmp_13_cast_fu_650_p3 = {{add_ln72_4_fu_644_p2}, {6'd0}};

assign tmp_2_fu_625_p3 = {{grp_fu_776_p3}, {5'd0}};

assign tmp_3_cast_fu_411_p3 = {{grp_fu_767_p3}, {6'd0}};

assign tmp_5_fu_494_p3 = {{select_ln64_1_fu_482_p3}, {2'd0}};

assign tmp_fu_720_p4 = {{bitcast_ln79_fu_716_p1[30:23]}};

assign tmp_s_fu_593_p3 = {{trunc_ln72_fu_589_p1}, {5'd0}};

assign trunc_ln72_fu_589_p1 = add_ln72_1_fu_583_p2[4:0];

assign trunc_ln79_fu_730_p1 = bitcast_ln79_fu_716_p1[22:0];

assign wc_fu_547_p2 = (select_ln64_fu_474_p3 + 2'd1);

assign wr_fu_462_p2 = (ap_phi_mux_wr_0_phi_fu_246_p4 + 2'd1);

assign xor_ln64_fu_529_p2 = (icmp_ln67_fu_468_p2 ^ 1'd1);

assign xor_ln80_fu_361_p2 = (icmp_ln57_fu_335_p2 ^ 1'd1);

assign zext_ln64_fu_516_p1 = select_ln64_1_fu_482_p3;

assign zext_ln67_1_fu_567_p1 = wc_fu_547_p2;

assign zext_ln67_2_fu_579_p1 = select_ln67_1_fu_571_p3;

assign zext_ln67_3_fu_632_p1 = tmp_2_fu_625_p3;

assign zext_ln67_fu_441_p1 = ap_phi_mux_wc_0_phi_fu_268_p4;

assign zext_ln72_1_fu_490_p1 = select_ln64_1_fu_482_p3;

assign zext_ln72_2_fu_502_p1 = tmp_5_fu_494_p3;

assign zext_ln72_4_fu_636_p1 = select_ln67_fu_559_p3;

assign zext_ln72_6_fu_640_p1 = select_ln67_fu_559_p3;

assign zext_ln72_7_fu_663_p1 = add_ln72_5_fu_658_p2;

assign zext_ln72_8_fu_674_p1 = add_ln72_6_fu_668_p2;

assign zext_ln72_fu_418_p1 = select_ln80_2_fu_391_p3;

assign zext_ln80_2_fu_422_p1 = select_ln80_2_fu_391_p3;

assign zext_ln80_3_fu_426_p1 = select_ln80_2_fu_391_p3;

assign zext_ln80_4_fu_436_p1 = add_ln80_1_fu_430_p2;

always @ (posedge ap_clk) begin
    zext_ln72_reg_818[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    zext_ln80_2_reg_823[15:7] <= 9'b000000000;
end

endmodule //conv_2
