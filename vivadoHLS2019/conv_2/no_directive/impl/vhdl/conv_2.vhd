-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=13590985,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=5,HLS_SYN_FF=602,HLS_SYN_LUT=1571,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_2_bias_ce0 : STD_LOGIC;
    signal conv_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_weights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv_2_weights_ce0 : STD_LOGIC;
    signal conv_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln9_fu_275_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln9_reg_674 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_287_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_682 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_299_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_690 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln15_fu_323_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln15_reg_695 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln12_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_333_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_reg_703 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal conv_out_addr_reg_708 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln15_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln39_1_fu_358_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln39_1_reg_718 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal conv_2_bias_load_reg_723 : STD_LOGIC_VECTOR (31 downto 0);
    signal wr_fu_372_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_731 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sext_ln31_fu_400_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln31_reg_736 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln19_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln31_fu_414_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln31_reg_741 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln33_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_reg_746 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_436_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_754 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal tmp_10_fu_455_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_reg_759 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln22_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln33_fu_486_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln33_reg_764 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln33_1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_1_reg_769 : STD_LOGIC_VECTOR (0 downto 0);
    signal ch_fu_502_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_reg_777 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal icmp_ln27_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_782 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_reg_797 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal select_ln27_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_fu_252_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal r_0_reg_165 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_177 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_189 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln9_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_201 : STD_LOGIC_VECTOR (6 downto 0);
    signal wr_0_reg_213 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_0_reg_225 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_0_reg_237 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln39_3_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_fu_339_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_8_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_9_fu_584_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_1_fu_110 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_248_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal zext_ln39_fu_305_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln39_fu_309_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_9_fu_315_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln39_2_fu_344_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln39_1_fu_348_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_s_fu_382_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_2_fu_390_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_1_fu_378_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln31_fu_394_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_fu_362_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_fu_404_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln31_fu_414_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_4_fu_442_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln31_2_fu_446_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln31_fu_451_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln22_fu_426_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_1_fu_463_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_6_fu_469_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln31_3_fu_473_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_478_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln27_fu_508_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln27_fu_512_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_518_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln27_2_fu_528_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln27_1_fu_534_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_5_fu_548_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_4_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_17_cast_fu_561_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln31_5_fu_569_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_7_fu_552_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln31_6_fu_579_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln33_2_fu_589_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal bitcast_ln38_fu_616_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_7_fu_620_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_630_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_1_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_fu_259_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal mul_ln31_fu_414_p00 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_2_fadd_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_fmul_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_fcmp_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_2_conv_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_conv_2_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_2_bias_U : component conv_2_conv_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_address0,
        ce0 => conv_2_bias_ce0,
        q0 => conv_2_bias_q0);

    conv_2_weights_U : component conv_2_conv_2_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 18432,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_address0,
        ce0 => conv_2_weights_ce0,
        q0 => conv_2_weights_q0);

    conv_2_fadd_32ns_cud_U1 : component conv_2_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_248_p0,
        din1 => grp_fu_248_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_248_p2);

    conv_2_fmul_32ns_dEe_U2 : component conv_2_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_weights_q0,
        din1 => max_pool_1_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_252_p2);

    conv_2_fcmp_32ns_eOg_U3 : component conv_2_fcmp_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_248_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_8_fu_259_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_189 <= c_reg_690;
            elsif (((icmp_ln9_fu_281_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_189 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_reg_237 <= ch_reg_777;
            elsif (((icmp_ln22_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then 
                ch_0_reg_237 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    f_0_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_366_p2 = ap_const_lv1_1))) then 
                f_0_reg_201 <= f_reg_703;
            elsif (((icmp_ln12_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_201 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_177_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                phi_mul_reg_177 <= add_ln9_reg_674;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_177 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_165 <= r_reg_682;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_165 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_1_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = and_ln33_1_reg_797)) or ((ap_const_lv1_0 = and_ln33_1_reg_797) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
                w_sum_1_fu_110 <= grp_fu_248_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_1_fu_110 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln25_fu_496_p2 = ap_const_lv1_1))) then 
                wc_0_reg_225 <= wc_reg_754;
            elsif (((icmp_ln19_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                wc_0_reg_225 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln22_fu_430_p2 = ap_const_lv1_1))) then 
                wr_0_reg_213 <= wr_reg_731;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                wr_0_reg_213 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln9_reg_674 <= add_ln9_fu_275_p2;
                r_reg_682 <= r_fu_287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_496_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                and_ln33_1_reg_797 <= and_ln33_1_fu_600_p2;
                icmp_ln27_reg_782 <= icmp_ln27_fu_542_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_690 <= c_fu_299_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ch_reg_777 <= ch_fu_502_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                conv_2_bias_load_reg_723 <= conv_2_bias_q0;
                    zext_ln39_1_reg_718(6 downto 0) <= zext_ln39_1_fu_358_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln15_fu_327_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_addr_reg_708 <= zext_ln39_3_fu_353_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_703 <= f_fu_333_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln22_fu_430_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                icmp_ln33_1_reg_769 <= icmp_ln33_1_fu_490_p2;
                    tmp_10_reg_759(9 downto 5) <= tmp_10_fu_455_p3(9 downto 5);
                    zext_ln33_reg_764(12 downto 5) <= zext_ln33_fu_486_p1(12 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln19_fu_366_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                icmp_ln33_reg_746 <= icmp_ln33_fu_420_p2;
                mul_ln31_reg_741 <= mul_ln31_fu_414_p2;
                sext_ln31_reg_736 <= sext_ln31_fu_400_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                w_sum_reg_821 <= grp_fu_248_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                wc_reg_754 <= wc_fu_436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wr_reg_731 <= wr_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_293_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln15_reg_695(12 downto 6) <= zext_ln15_fu_323_p1(12 downto 6);
            end if;
        end if;
    end process;
    zext_ln15_reg_695(5 downto 0) <= "000000";
    zext_ln15_reg_695(13) <= '0';
    zext_ln39_1_reg_718(15 downto 7) <= "000000000";
    tmp_10_reg_759(4 downto 0) <= "00000";
    zext_ln33_reg_764(4 downto 0) <= "00000";
    zext_ln33_reg_764(13) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln12_fu_293_p2, ap_CS_fsm_state4, icmp_ln15_fu_327_p2, ap_CS_fsm_state6, icmp_ln19_fu_366_p2, ap_CS_fsm_state7, icmp_ln22_fu_430_p2, ap_CS_fsm_state8, icmp_ln25_fu_496_p2, and_ln33_1_reg_797, ap_CS_fsm_state11, icmp_ln9_fu_281_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_281_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln12_fu_293_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln15_fu_327_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln19_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln22_fu_430_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (icmp_ln25_fu_496_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_lv1_0 = and_ln33_1_reg_797) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    add_ln31_1_fu_463_p2 <= std_logic_vector(unsigned(zext_ln22_fu_426_p1) + unsigned(c_0_reg_189));
    add_ln31_2_fu_446_p2 <= std_logic_vector(signed(sext_ln31_reg_736) + signed(zext_ln31_4_fu_442_p1));
    add_ln31_3_fu_473_p2 <= std_logic_vector(unsigned(mul_ln31_reg_741) + unsigned(zext_ln31_6_fu_469_p1));
    add_ln31_4_fu_556_p2 <= std_logic_vector(unsigned(tmp_10_reg_759) + unsigned(zext_ln31_5_fu_548_p1));
    add_ln31_5_fu_569_p2 <= std_logic_vector(unsigned(tmp_17_cast_fu_561_p3) + unsigned(zext_ln39_1_reg_718));
    add_ln31_6_fu_579_p2 <= std_logic_vector(unsigned(zext_ln33_reg_764) + unsigned(zext_ln31_7_fu_552_p1));
    add_ln31_fu_404_p2 <= std_logic_vector(unsigned(zext_ln19_fu_362_p1) + unsigned(r_0_reg_165));
    add_ln39_1_fu_348_p2 <= std_logic_vector(unsigned(zext_ln15_reg_695) + unsigned(zext_ln39_2_fu_344_p1));
    add_ln39_fu_309_p2 <= std_logic_vector(unsigned(phi_mul_reg_177) + unsigned(zext_ln39_fu_305_p1));
    add_ln9_fu_275_p2 <= std_logic_vector(unsigned(phi_mul_reg_177) + unsigned(ap_const_lv7_B));
    and_ln33_1_fu_600_p2 <= (icmp_ln33_reg_746 and and_ln33_fu_595_p2);
    and_ln33_fu_595_p2 <= (icmp_ln33_2_fu_589_p2 and icmp_ln33_1_reg_769);
    and_ln38_fu_652_p2 <= (tmp_8_fu_259_p2 and or_ln38_fu_646_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_281_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_281_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_281_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_281_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln38_fu_616_p1 <= grp_fu_248_p2;
    c_fu_299_p2 <= std_logic_vector(unsigned(c_0_reg_189) + unsigned(ap_const_lv4_1));
    ch_fu_502_p2 <= std_logic_vector(unsigned(ch_0_reg_237) + unsigned(ap_const_lv6_1));
    conv_2_bias_address0 <= zext_ln31_fu_339_p1(6 - 1 downto 0);

    conv_2_bias_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            conv_2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_address0 <= zext_ln31_8_fu_574_p1(15 - 1 downto 0);

    conv_2_weights_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_708;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_248_p2 when (and_ln38_fu_652_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(and_ln33_1_reg_797, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = and_ln33_1_reg_797))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_333_p2 <= std_logic_vector(unsigned(f_0_reg_201) + unsigned(ap_const_lv7_1));

    grp_fu_248_p0_assign_proc : process(select_ln27_fu_608_p3, ap_CS_fsm_state10, w_sum_reg_821, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_248_p0 <= w_sum_reg_821;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_248_p0 <= select_ln27_fu_608_p3;
        else 
            grp_fu_248_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_248_p1_assign_proc : process(conv_2_bias_load_reg_723, ap_CS_fsm_state10, grp_fu_252_p2, ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_248_p1 <= conv_2_bias_load_reg_723;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_248_p1 <= grp_fu_252_p2;
        else 
            grp_fu_248_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_fu_293_p2 <= "1" when (c_0_reg_189 = ap_const_lv4_B) else "0";
    icmp_ln15_fu_327_p2 <= "1" when (f_0_reg_201 = ap_const_lv7_40) else "0";
    icmp_ln19_fu_366_p2 <= "1" when (wr_0_reg_213 = ap_const_lv2_3) else "0";
    icmp_ln22_fu_430_p2 <= "1" when (wc_0_reg_225 = ap_const_lv2_3) else "0";
    icmp_ln25_fu_496_p2 <= "1" when (ch_0_reg_237 = ap_const_lv6_20) else "0";
    icmp_ln27_fu_542_p2 <= "1" when (or_ln27_1_fu_534_p3 = ap_const_lv5_0) else "0";
    icmp_ln33_1_fu_490_p2 <= "1" when (wc_0_reg_225 = ap_const_lv2_2) else "0";
    icmp_ln33_2_fu_589_p2 <= "1" when (ch_0_reg_237 = ap_const_lv6_1F) else "0";
    icmp_ln33_fu_420_p2 <= "1" when (wr_0_reg_213 = ap_const_lv2_2) else "0";
    icmp_ln38_1_fu_640_p2 <= "1" when (trunc_ln38_fu_630_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_634_p2 <= "0" when (tmp_7_fu_620_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_281_p2 <= "1" when (r_0_reg_165 = ap_const_lv4_B) else "0";
    max_pool_1_out_address0 <= zext_ln31_9_fu_584_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln31_fu_414_p0 <= mul_ln31_fu_414_p00(4 - 1 downto 0);
    mul_ln31_fu_414_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_fu_404_p2),8));
    mul_ln31_fu_414_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln31_fu_414_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln27_1_fu_534_p3 <= (tmp_3_fu_518_p4 & or_ln27_2_fu_528_p2);
    or_ln27_2_fu_528_p2 <= (wc_0_reg_225 or or_ln27_fu_512_p2);
    or_ln27_fu_512_p2 <= (wr_0_reg_213 or trunc_ln27_fu_508_p1);
    or_ln38_fu_646_p2 <= (icmp_ln38_fu_634_p2 or icmp_ln38_1_fu_640_p2);
    r_fu_287_p2 <= std_logic_vector(unsigned(r_0_reg_165) + unsigned(ap_const_lv4_1));
    select_ln27_fu_608_p3 <= 
        ap_const_lv32_0 when (icmp_ln27_reg_782(0) = '1') else 
        w_sum_1_fu_110;
        sext_ln31_fu_400_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln31_fu_394_p2),6));

    sub_ln31_fu_394_p2 <= std_logic_vector(unsigned(zext_ln31_2_fu_390_p1) - unsigned(zext_ln31_1_fu_378_p1));
    tmp_10_fu_455_p3 <= (trunc_ln31_fu_451_p1 & ap_const_lv5_0);
    tmp_11_fu_478_p3 <= (add_ln31_3_fu_473_p2 & ap_const_lv5_0);
    tmp_17_cast_fu_561_p3 <= (add_ln31_4_fu_556_p2 & ap_const_lv6_0);
    tmp_3_fu_518_p4 <= ch_0_reg_237(4 downto 2);
    tmp_7_fu_620_p4 <= bitcast_ln38_fu_616_p1(30 downto 23);
    tmp_9_fu_315_p3 <= (add_ln39_fu_309_p2 & ap_const_lv6_0);
    tmp_s_fu_382_p3 <= (wr_0_reg_213 & ap_const_lv2_0);
    trunc_ln27_fu_508_p1 <= ch_0_reg_237(2 - 1 downto 0);
    trunc_ln31_fu_451_p1 <= add_ln31_2_fu_446_p2(5 - 1 downto 0);
    trunc_ln38_fu_630_p1 <= bitcast_ln38_fu_616_p1(23 - 1 downto 0);
    wc_fu_436_p2 <= std_logic_vector(unsigned(wc_0_reg_225) + unsigned(ap_const_lv2_1));
    wr_fu_372_p2 <= std_logic_vector(unsigned(wr_0_reg_213) + unsigned(ap_const_lv2_1));
    zext_ln15_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_315_p3),14));
    zext_ln19_fu_362_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_213),4));
    zext_ln22_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_225),4));
    zext_ln31_1_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_213),5));
    zext_ln31_2_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_382_p3),5));
    zext_ln31_4_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_225),6));
    zext_ln31_5_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_237),10));
    zext_ln31_6_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_1_fu_463_p2),8));
    zext_ln31_7_fu_552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_237),14));
    zext_ln31_8_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_5_fu_569_p2),64));
    zext_ln31_9_fu_584_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_6_fu_579_p2),64));
    zext_ln31_fu_339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_201),64));
    zext_ln33_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_478_p3),14));
    zext_ln39_1_fu_358_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_201),16));
    zext_ln39_2_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_201),14));
    zext_ln39_3_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_1_fu_348_p2),64));
    zext_ln39_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_189),7));
end behav;
