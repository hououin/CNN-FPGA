// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=13590985,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=5,HLS_SYN_FF=602,HLS_SYN_LUT=1571,HLS_VERSION=2019_1}" *)

module conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_state5 = 13'd16;
parameter    ap_ST_fsm_state6 = 13'd32;
parameter    ap_ST_fsm_state7 = 13'd64;
parameter    ap_ST_fsm_state8 = 13'd128;
parameter    ap_ST_fsm_state9 = 13'd256;
parameter    ap_ST_fsm_state10 = 13'd512;
parameter    ap_ST_fsm_state11 = 13'd1024;
parameter    ap_ST_fsm_state12 = 13'd2048;
parameter    ap_ST_fsm_state13 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
input  [31:0] max_pool_1_out_q0;
output  [12:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_1_out_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] conv_2_bias_address0;
reg    conv_2_bias_ce0;
wire   [31:0] conv_2_bias_q0;
wire   [14:0] conv_2_weights_address0;
reg    conv_2_weights_ce0;
wire   [31:0] conv_2_weights_q0;
wire   [6:0] add_ln9_fu_275_p2;
reg   [6:0] add_ln9_reg_674;
wire    ap_CS_fsm_state2;
wire   [3:0] r_fu_287_p2;
reg   [3:0] r_reg_682;
wire   [3:0] c_fu_299_p2;
reg   [3:0] c_reg_690;
wire    ap_CS_fsm_state3;
wire   [13:0] zext_ln15_fu_323_p1;
reg   [13:0] zext_ln15_reg_695;
wire   [0:0] icmp_ln12_fu_293_p2;
wire   [6:0] f_fu_333_p2;
reg   [6:0] f_reg_703;
wire    ap_CS_fsm_state4;
reg   [12:0] conv_out_addr_reg_708;
wire   [0:0] icmp_ln15_fu_327_p2;
wire   [15:0] zext_ln39_1_fu_358_p1;
reg   [15:0] zext_ln39_1_reg_718;
wire    ap_CS_fsm_state5;
reg   [31:0] conv_2_bias_load_reg_723;
wire   [1:0] wr_fu_372_p2;
reg   [1:0] wr_reg_731;
wire    ap_CS_fsm_state6;
wire  signed [5:0] sext_ln31_fu_400_p1;
reg  signed [5:0] sext_ln31_reg_736;
wire   [0:0] icmp_ln19_fu_366_p2;
wire   [7:0] mul_ln31_fu_414_p2;
reg   [7:0] mul_ln31_reg_741;
wire   [0:0] icmp_ln33_fu_420_p2;
reg   [0:0] icmp_ln33_reg_746;
wire   [1:0] wc_fu_436_p2;
reg   [1:0] wc_reg_754;
wire    ap_CS_fsm_state7;
wire   [9:0] tmp_10_fu_455_p3;
reg   [9:0] tmp_10_reg_759;
wire   [0:0] icmp_ln22_fu_430_p2;
wire   [13:0] zext_ln33_fu_486_p1;
reg   [13:0] zext_ln33_reg_764;
wire   [0:0] icmp_ln33_1_fu_490_p2;
reg   [0:0] icmp_ln33_1_reg_769;
wire   [5:0] ch_fu_502_p2;
reg   [5:0] ch_reg_777;
wire    ap_CS_fsm_state8;
wire   [0:0] icmp_ln27_fu_542_p2;
reg   [0:0] icmp_ln27_reg_782;
wire   [0:0] icmp_ln25_fu_496_p2;
wire   [0:0] and_ln33_1_fu_600_p2;
reg   [0:0] and_ln33_1_reg_797;
wire    ap_CS_fsm_state9;
wire   [31:0] select_ln27_fu_608_p3;
wire    ap_CS_fsm_state10;
wire   [31:0] grp_fu_252_p2;
wire   [31:0] grp_fu_248_p2;
reg   [31:0] w_sum_reg_821;
wire    ap_CS_fsm_state11;
reg   [3:0] r_0_reg_165;
reg   [6:0] phi_mul_reg_177;
reg   [3:0] c_0_reg_189;
wire   [0:0] icmp_ln9_fu_281_p2;
reg   [6:0] f_0_reg_201;
reg   [1:0] wr_0_reg_213;
reg   [1:0] wc_0_reg_225;
reg   [5:0] ch_0_reg_237;
wire    ap_CS_fsm_state13;
wire   [63:0] zext_ln39_3_fu_353_p1;
wire   [63:0] zext_ln31_fu_339_p1;
wire   [63:0] zext_ln31_8_fu_574_p1;
wire   [63:0] zext_ln31_9_fu_584_p1;
reg   [31:0] w_sum_1_fu_110;
reg   [31:0] grp_fu_248_p0;
reg   [31:0] grp_fu_248_p1;
wire    ap_CS_fsm_state12;
wire   [6:0] zext_ln39_fu_305_p1;
wire   [6:0] add_ln39_fu_309_p2;
wire   [12:0] tmp_9_fu_315_p3;
wire   [13:0] zext_ln39_2_fu_344_p1;
wire   [13:0] add_ln39_1_fu_348_p2;
wire   [3:0] tmp_s_fu_382_p3;
wire   [4:0] zext_ln31_2_fu_390_p1;
wire   [4:0] zext_ln31_1_fu_378_p1;
wire   [4:0] sub_ln31_fu_394_p2;
wire   [3:0] zext_ln19_fu_362_p1;
wire   [3:0] add_ln31_fu_404_p2;
wire   [3:0] mul_ln31_fu_414_p0;
wire   [5:0] zext_ln31_4_fu_442_p1;
wire   [5:0] add_ln31_2_fu_446_p2;
wire   [4:0] trunc_ln31_fu_451_p1;
wire   [3:0] zext_ln22_fu_426_p1;
wire   [3:0] add_ln31_1_fu_463_p2;
wire   [7:0] zext_ln31_6_fu_469_p1;
wire   [7:0] add_ln31_3_fu_473_p2;
wire   [12:0] tmp_11_fu_478_p3;
wire   [1:0] trunc_ln27_fu_508_p1;
wire   [1:0] or_ln27_fu_512_p2;
wire   [2:0] tmp_3_fu_518_p4;
wire   [1:0] or_ln27_2_fu_528_p2;
wire   [4:0] or_ln27_1_fu_534_p3;
wire   [9:0] zext_ln31_5_fu_548_p1;
wire   [9:0] add_ln31_4_fu_556_p2;
wire   [15:0] tmp_17_cast_fu_561_p3;
wire   [15:0] add_ln31_5_fu_569_p2;
wire   [13:0] zext_ln31_7_fu_552_p1;
wire   [13:0] add_ln31_6_fu_579_p2;
wire   [0:0] icmp_ln33_2_fu_589_p2;
wire   [0:0] and_ln33_fu_595_p2;
wire   [31:0] bitcast_ln38_fu_616_p1;
wire   [7:0] tmp_7_fu_620_p4;
wire   [22:0] trunc_ln38_fu_630_p1;
wire   [0:0] icmp_ln38_1_fu_640_p2;
wire   [0:0] icmp_ln38_fu_634_p2;
wire   [0:0] or_ln38_fu_646_p2;
wire   [0:0] tmp_8_fu_259_p2;
wire   [0:0] and_ln38_fu_652_p2;
reg   [12:0] ap_NS_fsm;
wire   [7:0] mul_ln31_fu_414_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
end

conv_2_conv_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
conv_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_bias_address0),
    .ce0(conv_2_bias_ce0),
    .q0(conv_2_bias_q0)
);

conv_2_conv_2_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 18432 ),
    .AddressWidth( 15 ))
conv_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_weights_address0),
    .ce0(conv_2_weights_ce0),
    .q0(conv_2_weights_q0)
);

conv_2_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_2_fadd_32ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_248_p0),
    .din1(grp_fu_248_p1),
    .ce(1'b1),
    .dout(grp_fu_248_p2)
);

conv_2_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_2_fmul_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_weights_q0),
    .din1(max_pool_1_out_q0),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

conv_2_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_2_fcmp_32ns_eOg_U3(
    .din0(grp_fu_248_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_8_fu_259_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_189 <= c_reg_690;
    end else if (((icmp_ln9_fu_281_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_189 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        ch_0_reg_237 <= ch_reg_777;
    end else if (((icmp_ln22_fu_430_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        ch_0_reg_237 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln19_fu_366_p2 == 1'd1))) begin
        f_0_reg_201 <= f_reg_703;
    end else if (((icmp_ln12_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_201 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_mul_reg_177 <= add_ln9_reg_674;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_177 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_165 <= r_reg_682;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_165 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state13) & (1'd1 == and_ln33_1_reg_797)) | ((1'd0 == and_ln33_1_reg_797) & (1'b1 == ap_CS_fsm_state11)))) begin
        w_sum_1_fu_110 <= grp_fu_248_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_sum_1_fu_110 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_496_p2 == 1'd1))) begin
        wc_0_reg_225 <= wc_reg_754;
    end else if (((icmp_ln19_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        wc_0_reg_225 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln22_fu_430_p2 == 1'd1))) begin
        wr_0_reg_213 <= wr_reg_731;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        wr_0_reg_213 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln9_reg_674 <= add_ln9_fu_275_p2;
        r_reg_682 <= r_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln25_fu_496_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        and_ln33_1_reg_797 <= and_ln33_1_fu_600_p2;
        icmp_ln27_reg_782 <= icmp_ln27_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_690 <= c_fu_299_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ch_reg_777 <= ch_fu_502_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        conv_2_bias_load_reg_723 <= conv_2_bias_q0;
        zext_ln39_1_reg_718[6 : 0] <= zext_ln39_1_fu_358_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_327_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        conv_out_addr_reg_708 <= zext_ln39_3_fu_353_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_703 <= f_fu_333_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_430_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        icmp_ln33_1_reg_769 <= icmp_ln33_1_fu_490_p2;
        tmp_10_reg_759[9 : 5] <= tmp_10_fu_455_p3[9 : 5];
        zext_ln33_reg_764[12 : 5] <= zext_ln33_fu_486_p1[12 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln19_fu_366_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        icmp_ln33_reg_746 <= icmp_ln33_fu_420_p2;
        mul_ln31_reg_741 <= mul_ln31_fu_414_p2;
        sext_ln31_reg_736 <= sext_ln31_fu_400_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        w_sum_reg_821 <= grp_fu_248_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        wc_reg_754 <= wc_fu_436_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        wr_reg_731 <= wr_fu_372_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_293_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        zext_ln15_reg_695[12 : 6] <= zext_ln15_fu_323_p1[12 : 6];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_281_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_281_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        conv_2_bias_ce0 = 1'b1;
    end else begin
        conv_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        conv_2_weights_ce0 = 1'b1;
    end else begin
        conv_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == and_ln33_1_reg_797))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_248_p0 = w_sum_reg_821;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_248_p0 = select_ln27_fu_608_p3;
    end else begin
        grp_fu_248_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        grp_fu_248_p1 = conv_2_bias_load_reg_723;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_248_p1 = grp_fu_252_p2;
    end else begin
        grp_fu_248_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln9_fu_281_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln12_fu_293_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln15_fu_327_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln19_fu_366_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (icmp_ln22_fu_430_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (icmp_ln25_fu_496_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'd0 == and_ln33_1_reg_797) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln31_1_fu_463_p2 = (zext_ln22_fu_426_p1 + c_0_reg_189);

assign add_ln31_2_fu_446_p2 = ($signed(sext_ln31_reg_736) + $signed(zext_ln31_4_fu_442_p1));

assign add_ln31_3_fu_473_p2 = (mul_ln31_reg_741 + zext_ln31_6_fu_469_p1);

assign add_ln31_4_fu_556_p2 = (tmp_10_reg_759 + zext_ln31_5_fu_548_p1);

assign add_ln31_5_fu_569_p2 = (tmp_17_cast_fu_561_p3 + zext_ln39_1_reg_718);

assign add_ln31_6_fu_579_p2 = (zext_ln33_reg_764 + zext_ln31_7_fu_552_p1);

assign add_ln31_fu_404_p2 = (zext_ln19_fu_362_p1 + r_0_reg_165);

assign add_ln39_1_fu_348_p2 = (zext_ln15_reg_695 + zext_ln39_2_fu_344_p1);

assign add_ln39_fu_309_p2 = (phi_mul_reg_177 + zext_ln39_fu_305_p1);

assign add_ln9_fu_275_p2 = (phi_mul_reg_177 + 7'd11);

assign and_ln33_1_fu_600_p2 = (icmp_ln33_reg_746 & and_ln33_fu_595_p2);

assign and_ln33_fu_595_p2 = (icmp_ln33_2_fu_589_p2 & icmp_ln33_1_reg_769);

assign and_ln38_fu_652_p2 = (tmp_8_fu_259_p2 & or_ln38_fu_646_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign bitcast_ln38_fu_616_p1 = grp_fu_248_p2;

assign c_fu_299_p2 = (c_0_reg_189 + 4'd1);

assign ch_fu_502_p2 = (ch_0_reg_237 + 6'd1);

assign conv_2_bias_address0 = zext_ln31_fu_339_p1;

assign conv_2_weights_address0 = zext_ln31_8_fu_574_p1;

assign conv_out_address0 = conv_out_addr_reg_708;

assign conv_out_d0 = ((and_ln38_fu_652_p2[0:0] === 1'b1) ? grp_fu_248_p2 : 32'd0);

assign f_fu_333_p2 = (f_0_reg_201 + 7'd1);

assign icmp_ln12_fu_293_p2 = ((c_0_reg_189 == 4'd11) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_327_p2 = ((f_0_reg_201 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_366_p2 = ((wr_0_reg_213 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_430_p2 = ((wc_0_reg_225 == 2'd3) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_496_p2 = ((ch_0_reg_237 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_542_p2 = ((or_ln27_1_fu_534_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_490_p2 = ((wc_0_reg_225 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_589_p2 = ((ch_0_reg_237 == 6'd31) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_420_p2 = ((wr_0_reg_213 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_640_p2 = ((trunc_ln38_fu_630_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_634_p2 = ((tmp_7_fu_620_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_281_p2 = ((r_0_reg_165 == 4'd11) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln31_9_fu_584_p1;

assign mul_ln31_fu_414_p0 = mul_ln31_fu_414_p00;

assign mul_ln31_fu_414_p00 = add_ln31_fu_404_p2;

assign mul_ln31_fu_414_p2 = (mul_ln31_fu_414_p0 * $signed('hD));

assign or_ln27_1_fu_534_p3 = {{tmp_3_fu_518_p4}, {or_ln27_2_fu_528_p2}};

assign or_ln27_2_fu_528_p2 = (wc_0_reg_225 | or_ln27_fu_512_p2);

assign or_ln27_fu_512_p2 = (wr_0_reg_213 | trunc_ln27_fu_508_p1);

assign or_ln38_fu_646_p2 = (icmp_ln38_fu_634_p2 | icmp_ln38_1_fu_640_p2);

assign r_fu_287_p2 = (r_0_reg_165 + 4'd1);

assign select_ln27_fu_608_p3 = ((icmp_ln27_reg_782[0:0] === 1'b1) ? 32'd0 : w_sum_1_fu_110);

assign sext_ln31_fu_400_p1 = $signed(sub_ln31_fu_394_p2);

assign sub_ln31_fu_394_p2 = (zext_ln31_2_fu_390_p1 - zext_ln31_1_fu_378_p1);

assign tmp_10_fu_455_p3 = {{trunc_ln31_fu_451_p1}, {5'd0}};

assign tmp_11_fu_478_p3 = {{add_ln31_3_fu_473_p2}, {5'd0}};

assign tmp_17_cast_fu_561_p3 = {{add_ln31_4_fu_556_p2}, {6'd0}};

assign tmp_3_fu_518_p4 = {{ch_0_reg_237[4:2]}};

assign tmp_7_fu_620_p4 = {{bitcast_ln38_fu_616_p1[30:23]}};

assign tmp_9_fu_315_p3 = {{add_ln39_fu_309_p2}, {6'd0}};

assign tmp_s_fu_382_p3 = {{wr_0_reg_213}, {2'd0}};

assign trunc_ln27_fu_508_p1 = ch_0_reg_237[1:0];

assign trunc_ln31_fu_451_p1 = add_ln31_2_fu_446_p2[4:0];

assign trunc_ln38_fu_630_p1 = bitcast_ln38_fu_616_p1[22:0];

assign wc_fu_436_p2 = (wc_0_reg_225 + 2'd1);

assign wr_fu_372_p2 = (wr_0_reg_213 + 2'd1);

assign zext_ln15_fu_323_p1 = tmp_9_fu_315_p3;

assign zext_ln19_fu_362_p1 = wr_0_reg_213;

assign zext_ln22_fu_426_p1 = wc_0_reg_225;

assign zext_ln31_1_fu_378_p1 = wr_0_reg_213;

assign zext_ln31_2_fu_390_p1 = tmp_s_fu_382_p3;

assign zext_ln31_4_fu_442_p1 = wc_0_reg_225;

assign zext_ln31_5_fu_548_p1 = ch_0_reg_237;

assign zext_ln31_6_fu_469_p1 = add_ln31_1_fu_463_p2;

assign zext_ln31_7_fu_552_p1 = ch_0_reg_237;

assign zext_ln31_8_fu_574_p1 = add_ln31_5_fu_569_p2;

assign zext_ln31_9_fu_584_p1 = add_ln31_6_fu_579_p2;

assign zext_ln31_fu_339_p1 = f_0_reg_201;

assign zext_ln33_fu_486_p1 = tmp_11_fu_478_p3;

assign zext_ln39_1_fu_358_p1 = f_0_reg_201;

assign zext_ln39_2_fu_344_p1 = f_0_reg_201;

assign zext_ln39_3_fu_353_p1 = add_ln39_1_fu_348_p2;

assign zext_ln39_fu_305_p1 = c_0_reg_189;

always @ (posedge ap_clk) begin
    zext_ln15_reg_695[5:0] <= 6'b000000;
    zext_ln15_reg_695[13] <= 1'b0;
    zext_ln39_1_reg_718[15:7] <= 9'b000000000;
    tmp_10_reg_759[4:0] <= 5'b00000;
    zext_ln33_reg_764[4:0] <= 5'b00000;
    zext_ln33_reg_764[13] <= 1'b0;
end

endmodule //conv_2
