-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_1_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    max_pool_1_out_ce0 : OUT STD_LOGIC;
    max_pool_1_out_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    conv_out_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    conv_out_ce0 : OUT STD_LOGIC;
    conv_out_we0 : OUT STD_LOGIC;
    conv_out_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_2 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=8921091,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=7,HLS_SYN_FF=791,HLS_SYN_LUT=2077,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv22_0 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv22_220800 : STD_LOGIC_VECTOR (21 downto 0) := "1000100000100000000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv19_31800 : STD_LOGIC_VECTOR (18 downto 0) := "0110001100000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_20 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv9_120 : STD_LOGIC_VECTOR (8 downto 0) := "100100000";
    constant ap_const_lv16_4800 : STD_LOGIC_VECTOR (15 downto 0) := "0100100000000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_5 : STD_LOGIC_VECTOR (9 downto 0) := "0000000101";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_1F : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv22_1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_const_lv32_BD16424C : STD_LOGIC_VECTOR (31 downto 0) := "10111101000101100100001001001100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_bias_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal conv_2_bias_ce0 : STD_LOGIC;
    signal conv_2_bias_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal conv_2_weights_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal conv_2_weights_ce0 : STD_LOGIC;
    signal conv_2_weights_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvar_flatten195_reg_203 : STD_LOGIC_VECTOR (21 downto 0);
    signal r_0_reg_215 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten126_reg_226 : STD_LOGIC_VECTOR (18 downto 0);
    signal c_0_reg_237 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten68_reg_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal f_0_reg_259 : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten23_reg_270 : STD_LOGIC_VECTOR (8 downto 0);
    signal wr_0_reg_281 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten_reg_292 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_0_reg_303 : STD_LOGIC_VECTOR (1 downto 0);
    signal ch_0_reg_314 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln9_fu_377_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln9_reg_1200 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_fu_389_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_1204 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_1_fu_403_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_1_reg_1209 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal or_ln39_fu_511_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_reg_1215 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_5_fu_525_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_5_reg_1221 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln39_10_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_10_reg_1227 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_591_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal f_reg_1232 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln31_1_fu_603_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln31_1_reg_1237 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_1_fu_617_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln31_1_reg_1242 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln19_1_fu_705_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln19_1_reg_1248 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln22_fu_823_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_reg_1253 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln22_1_fu_835_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln22_1_reg_1258 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln27_fu_936_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_1263 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_reg_1278 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_1_reg_1278_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln22_4_fu_1010_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln22_4_reg_1282 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln19_1_fu_1018_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln19_1_reg_1287 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_1_fu_1024_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln15_1_reg_1292 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln12_1_fu_1030_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln12_1_reg_1297 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_2_bias_load_reg_1302 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal add_ln9_fu_1036_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln9_reg_1307 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1180_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln39_reg_1312 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln31_2_fu_1061_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln31_2_reg_1332 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state4_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal select_ln27_fu_1068_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln15_fu_1076_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln15_reg_1347 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal w_sum_reg_1352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state5_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ch_fu_1082_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ch_reg_1357 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln19_5_fu_1087_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln19_5_reg_1362 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln12_fu_1093_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln12_reg_1367 : STD_LOGIC_VECTOR (18 downto 0);
    signal conv_out_addr_reg_1372 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten195_phi_fu_207_p4 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_219_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten126_phi_fu_230_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_phi_mux_c_0_phi_fu_241_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_indvar_flatten68_phi_fu_252_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_f_0_phi_fu_263_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_phi_mux_indvar_flatten23_phi_fu_274_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_phi_mux_wr_0_phi_fu_285_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_296_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_wc_0_phi_fu_307_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_ch_0_phi_fu_318_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln31_fu_352_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_10_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_11_fu_981_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln31_1_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln39_2_fu_1115_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_sum_3_fu_140 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal grp_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_325_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln19_fu_357_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln22_fu_367_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_fu_383_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_fu_361_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln33_fu_425_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln39_fu_419_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln31_1_fu_371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln33_1_fu_445_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln22_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln19_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_fu_493_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_395_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln39_5_fu_499_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_505_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln39_2_fu_411_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln39_1_fu_541_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_fu_431_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln39_1_fu_547_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_3_fu_437_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln39_1_fu_451_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_2_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_3_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_4_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_4_fu_517_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln31_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_7_fu_533_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln39_6_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln31_fu_637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_8_fu_559_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln39_7_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_8_fu_573_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln39_9_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_fu_609_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln31_3_fu_669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_fu_681_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_1_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wr_fu_675_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_717_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln31_6_fu_725_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_4_fu_713_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_1_fu_701_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_2_fu_735_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln31_3_fu_629_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_2_fu_741_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln33_3_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_fu_643_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln31_4_fu_649_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln19_fu_775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_1_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln19_2_fu_781_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln31_2_fu_663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_fu_693_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln19_1_fu_793_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln22_2_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal wc_fu_799_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln31_8_fu_843_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln31_fu_729_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_3_fu_847_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln22_1_fu_831_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln31_4_fu_859_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_4_fu_767_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln22_2_fu_865_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1171_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_877_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln33_4_fu_888_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln19_fu_787_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln27_fu_902_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln27_fu_906_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_3_fu_912_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln27_2_fu_922_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal or_ln27_1_fu_928_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln31_5_fu_942_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln31_fu_853_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln31_6_fu_950_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln31_2_fu_625_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_13_cast_fu_956_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln31_7_fu_964_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln31_9_fu_946_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln33_fu_884_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln31_8_fu_975_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln22_3_fu_894_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln33_2_fu_986_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln33_fu_992_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln19_3_fu_759_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln22_fu_1004_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln39_6_fu_1055_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln31_3_fu_1106_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_2_cast_fu_1099_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln39_1_fu_1109_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal bitcast_ln38_fu_1120_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_1124_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln38_fu_1134_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal icmp_ln38_1_fu_1144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_1138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_1150_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_fu_336_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln38_fu_1156_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1171_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1171_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1171_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1180_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_1180_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_1180_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1171_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1171_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1180_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1180_p20 : STD_LOGIC_VECTOR (7 downto 0);

    component conv_2_fadd_32ns_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_fmul_32ns_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_fcmp_32ns_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component conv_2_mac_muladdfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component conv_2_conv_2_bias IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_2_conv_2_weibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    conv_2_bias_U : component conv_2_conv_2_bias
    generic map (
        DataWidth => 32,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_address0,
        ce0 => conv_2_bias_ce0,
        q0 => conv_2_bias_q0);

    conv_2_weights_U : component conv_2_conv_2_weibkb
    generic map (
        DataWidth => 32,
        AddressRange => 18432,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_address0,
        ce0 => conv_2_weights_ce0,
        q0 => conv_2_weights_q0);

    conv_2_fadd_32ns_cud_U1 : component conv_2_fadd_32ns_cud
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_325_p0,
        din1 => grp_fu_325_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_325_p2);

    conv_2_fmul_32ns_dEe_U2 : component conv_2_fmul_32ns_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => conv_2_weights_q0,
        din1 => max_pool_1_out_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_329_p2);

    conv_2_fcmp_32ns_eOg_U3 : component conv_2_fcmp_32ns_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_325_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_2,
        dout => tmp_9_fu_336_p2);

    conv_2_mac_muladdfYi_U4 : component conv_2_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1171_p0,
        din1 => grp_fu_1171_p1,
        din2 => grp_fu_1171_p2,
        dout => grp_fu_1171_p3);

    conv_2_mac_muladdfYi_U5 : component conv_2_mac_muladdfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 4,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_1180_p0,
        din1 => grp_fu_1180_p1,
        din2 => grp_fu_1180_p2,
        dout => grp_fu_1180_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_237 <= select_ln39_5_reg_1221;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                c_0_reg_237 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                ch_0_reg_314 <= ch_reg_1357;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ch_0_reg_314 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    f_0_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_259 <= select_ln31_1_reg_1242;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                f_0_reg_259 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten126_reg_226_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten126_reg_226 <= select_ln12_reg_1367;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten126_reg_226 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    indvar_flatten195_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten195_reg_203 <= add_ln9_reg_1307;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten195_reg_203 <= ap_const_lv22_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_270_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_270 <= select_ln19_5_reg_1362;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten23_reg_270 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten68_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten68_reg_248 <= select_ln15_reg_1347;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten68_reg_248 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_292_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_292 <= select_ln22_4_reg_1282;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvar_flatten_reg_292 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_215_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_215 <= select_ln39_1_reg_1209;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_215 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_3_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln33_1_reg_1278_pp0_iter1_reg)) or ((ap_const_lv1_0 = and_ln33_1_reg_1278) and (icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then 
                w_sum_3_fu_140 <= grp_fu_325_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                w_sum_3_fu_140 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    wc_0_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                wc_0_reg_303 <= select_ln22_1_reg_1258;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wc_0_reg_303 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_281_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                wr_0_reg_281 <= select_ln19_1_reg_1248;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                wr_0_reg_281 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_377_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln12_1_reg_1297 <= add_ln12_1_fu_1030_p2;
                add_ln15_1_reg_1292 <= add_ln15_1_fu_1024_p2;
                add_ln19_1_reg_1287 <= add_ln19_1_fu_1018_p2;
                and_ln33_1_reg_1278 <= and_ln33_1_fu_998_p2;
                and_ln39_10_reg_1227 <= and_ln39_10_fu_585_p2;
                f_reg_1232 <= f_fu_591_p2;
                icmp_ln12_reg_1204 <= icmp_ln12_fu_389_p2;
                icmp_ln27_reg_1263 <= icmp_ln27_fu_936_p2;
                or_ln31_1_reg_1237 <= or_ln31_1_fu_603_p2;
                or_ln39_reg_1215 <= or_ln39_fu_511_p2;
                select_ln22_reg_1253 <= select_ln22_fu_823_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln39_reg_1312 <= grp_fu_1180_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                add_ln9_reg_1307 <= add_ln9_fu_1036_p2;
                conv_2_bias_load_reg_1302 <= conv_2_bias_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln33_1_reg_1278_pp0_iter1_reg <= and_ln33_1_reg_1278;
                icmp_ln9_reg_1200 <= icmp_ln9_fu_377_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                ch_reg_1357 <= ch_fu_1082_p2;
                select_ln12_reg_1367 <= select_ln12_fu_1093_p3;
                select_ln19_5_reg_1362 <= select_ln19_5_fu_1087_p3;
                w_sum_reg_1352 <= grp_fu_325_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                conv_out_addr_reg_1372 <= zext_ln39_2_fu_1115_p1(13 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln15_reg_1347 <= select_ln15_fu_1076_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_377_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                select_ln19_1_reg_1248 <= select_ln19_1_fu_705_p3;
                select_ln22_1_reg_1258 <= select_ln22_1_fu_835_p3;
                select_ln22_4_reg_1282 <= select_ln22_4_fu_1010_p3;
                select_ln31_1_reg_1242 <= select_ln31_1_fu_617_p3;
                select_ln39_1_reg_1209 <= select_ln39_1_fu_403_p3;
                select_ln39_5_reg_1221 <= select_ln39_5_fu_525_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                select_ln31_2_reg_1332 <= select_ln31_2_fu_1061_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln9_reg_1200, ap_enable_reg_pp0_iter0, ap_block_pp0_stage1_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage0_subdone, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((icmp_ln9_reg_1200 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((icmp_ln9_reg_1200 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    add_ln12_1_fu_1030_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten126_phi_fu_230_p4) + unsigned(ap_const_lv19_1));
    add_ln15_1_fu_1024_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten68_phi_fu_252_p4) + unsigned(ap_const_lv16_1));
    add_ln19_1_fu_1018_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_274_p4) + unsigned(ap_const_lv9_1));
    add_ln22_fu_1004_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_296_p4) + unsigned(ap_const_lv8_1));
    add_ln31_1_fu_371_p2 <= std_logic_vector(unsigned(zext_ln22_fu_367_p1) + unsigned(ap_phi_mux_c_0_phi_fu_241_p4));
    add_ln31_2_fu_735_p2 <= std_logic_vector(unsigned(select_ln39_1_fu_403_p3) + unsigned(zext_ln19_1_fu_701_p1));
    add_ln31_3_fu_847_p2 <= std_logic_vector(unsigned(zext_ln31_8_fu_843_p1) + unsigned(sub_ln31_fu_729_p2));
    add_ln31_4_fu_859_p2 <= std_logic_vector(unsigned(select_ln39_5_fu_525_p3) + unsigned(zext_ln22_1_fu_831_p1));
    add_ln31_6_fu_950_p2 <= std_logic_vector(unsigned(zext_ln31_5_fu_942_p1) + unsigned(shl_ln31_fu_853_p2));
    add_ln31_7_fu_964_p2 <= std_logic_vector(unsigned(zext_ln31_2_fu_625_p1) + unsigned(tmp_13_cast_fu_956_p3));
    add_ln31_8_fu_975_p2 <= std_logic_vector(unsigned(zext_ln31_9_fu_946_p1) + unsigned(zext_ln33_fu_884_p1));
    add_ln31_fu_361_p2 <= std_logic_vector(unsigned(zext_ln19_fu_357_p1) + unsigned(ap_phi_mux_r_0_phi_fu_219_p4));
    add_ln39_1_fu_1109_p2 <= std_logic_vector(unsigned(zext_ln31_3_fu_1106_p1) + unsigned(tmp_2_cast_fu_1099_p3));
    add_ln9_fu_1036_p2 <= std_logic_vector(unsigned(indvar_flatten195_reg_203) + unsigned(ap_const_lv22_1));
    and_ln19_1_fu_793_p2 <= (or_ln19_2_fu_781_p2 and and_ln31_2_fu_663_p2);
    and_ln19_fu_787_p2 <= (or_ln19_2_fu_781_p2 and and_ln31_1_fu_657_p2);
    and_ln31_1_fu_657_p2 <= (xor_ln31_fu_637_p2 and and_ln39_7_fu_567_p2);
    and_ln31_2_fu_663_p2 <= (xor_ln31_fu_637_p2 and and_ln39_8_fu_573_p2);
    and_ln31_3_fu_669_p2 <= (xor_ln31_fu_637_p2 and and_ln39_9_fu_579_p2);
    and_ln31_fu_643_p2 <= (xor_ln31_fu_637_p2 and and_ln39_6_fu_553_p2);
    and_ln33_1_fu_998_p2 <= (select_ln19_3_fu_759_p3 and and_ln33_fu_992_p2);
    and_ln33_fu_992_p2 <= (select_ln22_3_fu_894_p3 and icmp_ln33_2_fu_986_p2);
    and_ln38_fu_1156_p2 <= (tmp_9_fu_336_p2 and or_ln38_fu_1150_p2);
    and_ln39_10_fu_585_p2 <= (or_ln39_1_fu_547_p2 and and_ln39_4_fu_487_p2);
    and_ln39_1_fu_451_p2 <= (xor_ln39_fu_419_p2 and icmp_ln33_1_fu_445_p2);
    and_ln39_2_fu_463_p2 <= (xor_ln39_fu_419_p2 and icmp_ln25_fu_457_p2);
    and_ln39_3_fu_475_p2 <= (xor_ln39_fu_419_p2 and icmp_ln22_fu_469_p2);
    and_ln39_4_fu_487_p2 <= (xor_ln39_fu_419_p2 and icmp_ln19_fu_481_p2);
    and_ln39_5_fu_499_p2 <= (xor_ln39_fu_419_p2 and icmp_ln15_fu_493_p2);
    and_ln39_6_fu_553_p2 <= (or_ln39_1_fu_547_p2 and and_ln39_fu_431_p2);
    and_ln39_7_fu_567_p2 <= (or_ln39_1_fu_547_p2 and and_ln39_1_fu_451_p2);
    and_ln39_8_fu_573_p2 <= (or_ln39_1_fu_547_p2 and and_ln39_2_fu_463_p2);
    and_ln39_9_fu_579_p2 <= (or_ln39_1_fu_547_p2 and and_ln39_3_fu_475_p2);
    and_ln39_fu_431_p2 <= (xor_ln39_fu_419_p2 and icmp_ln33_fu_425_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state8 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln9_reg_1200)
    begin
        if ((icmp_ln9_reg_1200 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_241_p4_assign_proc : process(c_0_reg_237, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln39_5_reg_1221, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_c_0_phi_fu_241_p4 <= select_ln39_5_reg_1221;
        else 
            ap_phi_mux_c_0_phi_fu_241_p4 <= c_0_reg_237;
        end if; 
    end process;


    ap_phi_mux_ch_0_phi_fu_318_p4_assign_proc : process(ch_0_reg_314, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, ch_reg_1357, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_ch_0_phi_fu_318_p4 <= ch_reg_1357;
        else 
            ap_phi_mux_ch_0_phi_fu_318_p4 <= ch_0_reg_314;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_263_p4_assign_proc : process(f_0_reg_259, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln31_1_reg_1242, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_f_0_phi_fu_263_p4 <= select_ln31_1_reg_1242;
        else 
            ap_phi_mux_f_0_phi_fu_263_p4 <= f_0_reg_259;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten126_phi_fu_230_p4_assign_proc : process(indvar_flatten126_reg_226, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln12_reg_1367, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten126_phi_fu_230_p4 <= select_ln12_reg_1367;
        else 
            ap_phi_mux_indvar_flatten126_phi_fu_230_p4 <= indvar_flatten126_reg_226;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten195_phi_fu_207_p4_assign_proc : process(indvar_flatten195_reg_203, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, add_ln9_reg_1307, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten195_phi_fu_207_p4 <= add_ln9_reg_1307;
        else 
            ap_phi_mux_indvar_flatten195_phi_fu_207_p4 <= indvar_flatten195_reg_203;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_274_p4_assign_proc : process(indvar_flatten23_reg_270, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln19_5_reg_1362, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_274_p4 <= select_ln19_5_reg_1362;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_274_p4 <= indvar_flatten23_reg_270;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten68_phi_fu_252_p4_assign_proc : process(indvar_flatten68_reg_248, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln15_reg_1347, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten68_phi_fu_252_p4 <= select_ln15_reg_1347;
        else 
            ap_phi_mux_indvar_flatten68_phi_fu_252_p4 <= indvar_flatten68_reg_248;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_296_p4_assign_proc : process(indvar_flatten_reg_292, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln22_4_reg_1282, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_indvar_flatten_phi_fu_296_p4 <= select_ln22_4_reg_1282;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_296_p4 <= indvar_flatten_reg_292;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_219_p4_assign_proc : process(r_0_reg_215, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln39_1_reg_1209, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_r_0_phi_fu_219_p4 <= select_ln39_1_reg_1209;
        else 
            ap_phi_mux_r_0_phi_fu_219_p4 <= r_0_reg_215;
        end if; 
    end process;


    ap_phi_mux_wc_0_phi_fu_307_p4_assign_proc : process(wc_0_reg_303, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln22_1_reg_1258, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wc_0_phi_fu_307_p4 <= select_ln22_1_reg_1258;
        else 
            ap_phi_mux_wc_0_phi_fu_307_p4 <= wc_0_reg_303;
        end if; 
    end process;


    ap_phi_mux_wr_0_phi_fu_285_p4_assign_proc : process(wr_0_reg_281, ap_CS_fsm_pp0_stage0, icmp_ln9_reg_1200, select_ln19_1_reg_1248, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln9_reg_1200 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_wr_0_phi_fu_285_p4 <= select_ln19_1_reg_1248;
        else 
            ap_phi_mux_wr_0_phi_fu_285_p4 <= wr_0_reg_281;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln38_fu_1120_p1 <= grp_fu_325_p2;
    c_fu_505_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(select_ln39_fu_395_p3));
    ch_fu_1082_p2 <= std_logic_vector(unsigned(select_ln22_reg_1253) + unsigned(ap_const_lv6_1));

    conv_2_bias_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln31_fu_352_p1, zext_ln31_1_fu_1048_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                conv_2_bias_address0 <= zext_ln31_1_fu_1048_p1(6 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                conv_2_bias_address0 <= zext_ln31_fu_352_p1(6 - 1 downto 0);
            else 
                conv_2_bias_address0 <= "XXXXXX";
            end if;
        else 
            conv_2_bias_address0 <= "XXXXXX";
        end if; 
    end process;


    conv_2_bias_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            conv_2_bias_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_address0 <= zext_ln31_10_fu_970_p1(15 - 1 downto 0);

    conv_2_weights_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            conv_2_weights_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_address0 <= conv_out_addr_reg_1372;

    conv_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            conv_out_ce0 <= ap_const_logic_1;
        else 
            conv_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_d0 <= 
        grp_fu_325_p2 when (and_ln38_fu_1156_p2(0) = '1') else 
        ap_const_lv32_0;

    conv_out_we0_assign_proc : process(and_ln33_1_reg_1278_pp0_iter1_reg, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_lv1_1 = and_ln33_1_reg_1278_pp0_iter1_reg))) then 
            conv_out_we0 <= ap_const_logic_1;
        else 
            conv_out_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_591_p2 <= std_logic_vector(unsigned(ap_const_lv7_1) + unsigned(select_ln39_4_fu_517_p3));
    grp_fu_1171_p0 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_1171_p1 <= grp_fu_1171_p10(4 - 1 downto 0);
    grp_fu_1171_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_2_fu_741_p3),8));
    grp_fu_1171_p2 <= grp_fu_1171_p20(4 - 1 downto 0);
    grp_fu_1171_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_2_fu_865_p3),8));
    grp_fu_1180_p0 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_1180_p1 <= grp_fu_1180_p10(4 - 1 downto 0);
    grp_fu_1180_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_1_reg_1209),8));
    grp_fu_1180_p2 <= grp_fu_1180_p20(4 - 1 downto 0);
    grp_fu_1180_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln39_5_reg_1221),8));

    grp_fu_325_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, select_ln27_fu_1068_p3, w_sum_reg_1352, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_325_p0 <= w_sum_reg_1352;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_325_p0 <= select_ln27_fu_1068_p3;
        else 
            grp_fu_325_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_325_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, select_ln31_2_reg_1332, ap_CS_fsm_pp0_stage2, grp_fu_329_p2, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_block_pp0_stage2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            grp_fu_325_p1 <= select_ln31_2_reg_1332;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            grp_fu_325_p1 <= grp_fu_329_p2;
        else 
            grp_fu_325_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln12_fu_389_p2 <= "1" when (ap_phi_mux_indvar_flatten126_phi_fu_230_p4 = ap_const_lv19_31800) else "0";
    icmp_ln15_fu_493_p2 <= "1" when (ap_phi_mux_indvar_flatten68_phi_fu_252_p4 = ap_const_lv16_4800) else "0";
    icmp_ln19_fu_481_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_274_p4 = ap_const_lv9_120) else "0";
    icmp_ln22_fu_469_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_296_p4 = ap_const_lv8_60) else "0";
    icmp_ln25_fu_457_p2 <= "1" when (ap_phi_mux_ch_0_phi_fu_318_p4 = ap_const_lv6_20) else "0";
    icmp_ln27_fu_936_p2 <= "1" when (or_ln27_1_fu_928_p3 = ap_const_lv5_0) else "0";
    icmp_ln33_1_fu_445_p2 <= "1" when (ap_phi_mux_wc_0_phi_fu_307_p4 = ap_const_lv2_2) else "0";
    icmp_ln33_2_fu_986_p2 <= "1" when (select_ln22_fu_823_p3 = ap_const_lv6_1F) else "0";
    icmp_ln33_3_fu_753_p2 <= "1" when (wr_fu_675_p2 = ap_const_lv2_2) else "0";
    icmp_ln33_4_fu_888_p2 <= "1" when (wc_fu_799_p2 = ap_const_lv2_2) else "0";
    icmp_ln33_fu_425_p2 <= "1" when (ap_phi_mux_wr_0_phi_fu_285_p4 = ap_const_lv2_2) else "0";
    icmp_ln38_1_fu_1144_p2 <= "1" when (trunc_ln38_fu_1134_p1 = ap_const_lv23_0) else "0";
    icmp_ln38_fu_1138_p2 <= "0" when (tmp_8_fu_1124_p4 = ap_const_lv8_FF) else "1";
    icmp_ln9_fu_377_p2 <= "1" when (ap_phi_mux_indvar_flatten195_phi_fu_207_p4 = ap_const_lv22_220800) else "0";
    max_pool_1_out_address0 <= zext_ln31_11_fu_981_p1(13 - 1 downto 0);

    max_pool_1_out_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
            max_pool_1_out_ce0 <= ap_const_logic_1;
        else 
            max_pool_1_out_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln19_1_fu_687_p2 <= (or_ln39_fu_511_p2 or or_ln19_fu_681_p2);
    or_ln19_2_fu_781_p2 <= (xor_ln19_fu_775_p2 or and_ln39_10_fu_585_p2);
    or_ln19_fu_681_p2 <= (and_ln39_10_fu_585_p2 or and_ln31_3_fu_669_p2);
    or_ln22_1_fu_811_p2 <= (or_ln31_fu_597_p2 or or_ln22_fu_805_p2);
    or_ln22_2_fu_817_p2 <= (or_ln22_1_fu_811_p2 or icmp_ln12_fu_389_p2);
    or_ln22_fu_805_p2 <= (and_ln31_3_fu_669_p2 or and_ln19_1_fu_793_p2);
    or_ln27_1_fu_928_p3 <= (tmp_3_fu_912_p4 & or_ln27_2_fu_922_p2);
    or_ln27_2_fu_922_p2 <= (select_ln22_1_fu_835_p3 or or_ln27_fu_906_p2);
    or_ln27_fu_906_p2 <= (trunc_ln27_fu_902_p1 or select_ln19_1_fu_705_p3);
    or_ln31_1_fu_603_p2 <= (or_ln31_fu_597_p2 or icmp_ln12_fu_389_p2);
    or_ln31_fu_597_p2 <= (and_ln39_5_fu_499_p2 or and_ln39_10_fu_585_p2);
    or_ln38_fu_1150_p2 <= (icmp_ln38_fu_1138_p2 or icmp_ln38_1_fu_1144_p2);
    or_ln39_1_fu_547_p2 <= (xor_ln39_1_fu_541_p2 or icmp_ln12_fu_389_p2);
    or_ln39_fu_511_p2 <= (icmp_ln12_fu_389_p2 or and_ln39_5_fu_499_p2);
    r_fu_383_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(ap_phi_mux_r_0_phi_fu_219_p4));
    select_ln12_fu_1093_p3 <= 
        ap_const_lv19_1 when (icmp_ln12_reg_1204(0) = '1') else 
        add_ln12_1_reg_1297;
    select_ln15_fu_1076_p3 <= 
        ap_const_lv16_1 when (or_ln39_reg_1215(0) = '1') else 
        add_ln15_1_reg_1292;
    select_ln19_1_fu_705_p3 <= 
        wr_fu_675_p2 when (and_ln31_3_fu_669_p2(0) = '1') else 
        select_ln31_fu_609_p3;
    select_ln19_2_fu_741_p3 <= 
        add_ln31_2_fu_735_p2 when (and_ln31_3_fu_669_p2(0) = '1') else 
        select_ln31_3_fu_629_p3;
    select_ln19_3_fu_759_p3 <= 
        icmp_ln33_3_fu_753_p2 when (and_ln31_3_fu_669_p2(0) = '1') else 
        and_ln31_fu_643_p2;
    select_ln19_4_fu_767_p3 <= 
        select_ln39_5_fu_525_p3 when (and_ln31_3_fu_669_p2(0) = '1') else 
        select_ln31_4_fu_649_p3;
    select_ln19_5_fu_1087_p3 <= 
        ap_const_lv9_1 when (or_ln31_1_reg_1237(0) = '1') else 
        add_ln19_1_reg_1287;
    select_ln19_fu_693_p3 <= 
        ap_const_lv2_0 when (or_ln19_1_fu_687_p2(0) = '1') else 
        ap_phi_mux_wc_0_phi_fu_307_p4;
    select_ln22_1_fu_835_p3 <= 
        wc_fu_799_p2 when (and_ln19_1_fu_793_p2(0) = '1') else 
        select_ln19_fu_693_p3;
    select_ln22_2_fu_865_p3 <= 
        add_ln31_4_fu_859_p2 when (and_ln19_1_fu_793_p2(0) = '1') else 
        select_ln19_4_fu_767_p3;
    select_ln22_3_fu_894_p3 <= 
        icmp_ln33_4_fu_888_p2 when (and_ln19_1_fu_793_p2(0) = '1') else 
        and_ln19_fu_787_p2;
    select_ln22_4_fu_1010_p3 <= 
        ap_const_lv8_1 when (or_ln19_1_fu_687_p2(0) = '1') else 
        add_ln22_fu_1004_p2;
    select_ln22_fu_823_p3 <= 
        ap_const_lv6_0 when (or_ln22_2_fu_817_p2(0) = '1') else 
        ap_phi_mux_ch_0_phi_fu_318_p4;
    select_ln27_fu_1068_p3 <= 
        ap_const_lv32_0 when (icmp_ln27_reg_1263(0) = '1') else 
        w_sum_3_fu_140;
    select_ln31_1_fu_617_p3 <= 
        f_fu_591_p2 when (and_ln39_10_fu_585_p2(0) = '1') else 
        select_ln39_4_fu_517_p3;
    select_ln31_2_fu_1061_p3 <= 
        conv_2_bias_q0 when (and_ln39_10_reg_1227(0) = '1') else 
        select_ln39_6_fu_1055_p3;
    select_ln31_3_fu_629_p3 <= 
        select_ln39_1_fu_403_p3 when (and_ln39_10_fu_585_p2(0) = '1') else 
        select_ln39_7_fu_533_p3;
    select_ln31_4_fu_649_p3 <= 
        select_ln39_5_fu_525_p3 when (and_ln39_10_fu_585_p2(0) = '1') else 
        select_ln39_8_fu_559_p3;
    select_ln31_fu_609_p3 <= 
        ap_const_lv2_0 when (or_ln31_1_fu_603_p2(0) = '1') else 
        ap_phi_mux_wr_0_phi_fu_285_p4;
    select_ln39_1_fu_403_p3 <= 
        r_fu_383_p2 when (icmp_ln12_fu_389_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_219_p4;
    select_ln39_2_fu_411_p3 <= 
        r_fu_383_p2 when (icmp_ln12_fu_389_p2(0) = '1') else 
        add_ln31_fu_361_p2;
    select_ln39_3_fu_437_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_389_p2(0) = '1') else 
        add_ln31_1_fu_371_p2;
    select_ln39_4_fu_517_p3 <= 
        ap_const_lv7_0 when (or_ln39_fu_511_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_263_p4;
    select_ln39_5_fu_525_p3 <= 
        c_fu_505_p2 when (and_ln39_5_fu_499_p2(0) = '1') else 
        select_ln39_fu_395_p3;
    select_ln39_6_fu_1055_p3 <= 
        ap_const_lv32_BD16424C when (or_ln39_reg_1215(0) = '1') else 
        conv_2_bias_load_reg_1302;
    select_ln39_7_fu_533_p3 <= 
        select_ln39_1_fu_403_p3 when (and_ln39_5_fu_499_p2(0) = '1') else 
        select_ln39_2_fu_411_p3;
    select_ln39_8_fu_559_p3 <= 
        c_fu_505_p2 when (and_ln39_5_fu_499_p2(0) = '1') else 
        select_ln39_3_fu_437_p3;
    select_ln39_fu_395_p3 <= 
        ap_const_lv4_0 when (icmp_ln12_fu_389_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_241_p4;
    shl_ln31_fu_853_p2 <= std_logic_vector(shift_left(unsigned(add_ln31_3_fu_847_p2),to_integer(unsigned('0' & ap_const_lv10_5(10-1 downto 0)))));
    sub_ln31_fu_729_p2 <= std_logic_vector(unsigned(zext_ln31_6_fu_725_p1) - unsigned(zext_ln31_4_fu_713_p1));
    tmp_13_cast_fu_956_p3 <= (add_ln31_6_fu_950_p2 & ap_const_lv6_0);
    tmp_1_fu_717_p3 <= (select_ln19_1_fu_705_p3 & ap_const_lv2_0);
    tmp_2_cast_fu_1099_p3 <= (add_ln39_reg_1312 & ap_const_lv6_0);
    tmp_2_fu_877_p3 <= (grp_fu_1171_p3 & ap_const_lv5_0);
    tmp_3_fu_912_p4 <= select_ln22_fu_823_p3(4 downto 2);
    tmp_8_fu_1124_p4 <= bitcast_ln38_fu_1120_p1(30 downto 23);
    trunc_ln27_fu_902_p1 <= select_ln22_fu_823_p3(2 - 1 downto 0);
    trunc_ln38_fu_1134_p1 <= bitcast_ln38_fu_1120_p1(23 - 1 downto 0);
    wc_fu_799_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln19_fu_693_p3));
    wr_fu_675_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(select_ln31_fu_609_p3));
    xor_ln19_fu_775_p2 <= (ap_const_lv1_1 xor and_ln39_9_fu_579_p2);
    xor_ln31_fu_637_p2 <= (ap_const_lv1_1 xor and_ln39_10_fu_585_p2);
    xor_ln39_1_fu_541_p2 <= (icmp_ln15_fu_493_p2 xor ap_const_lv1_1);
    xor_ln39_fu_419_p2 <= (icmp_ln12_fu_389_p2 xor ap_const_lv1_1);
    zext_ln19_1_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_fu_675_p2),4));
    zext_ln19_fu_357_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wr_0_phi_fu_285_p4),4));
    zext_ln22_1_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_fu_799_p2),4));
    zext_ln22_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_wc_0_phi_fu_307_p4),4));
    zext_ln31_10_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_7_fu_964_p2),64));
    zext_ln31_11_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln31_8_fu_975_p2),64));
    zext_ln31_1_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_reg_1232),64));
    zext_ln31_2_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_1_fu_617_p3),16));
    zext_ln31_3_fu_1106_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln31_1_reg_1242),14));
    zext_ln31_4_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_1_fu_705_p3),10));
    zext_ln31_5_fu_942_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_823_p3),10));
    zext_ln31_6_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_717_p3),10));
    zext_ln31_8_fu_843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_1_fu_835_p3),10));
    zext_ln31_9_fu_946_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln22_fu_823_p3),14));
    zext_ln31_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_f_0_phi_fu_263_p4),64));
    zext_ln33_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_877_p3),14));
    zext_ln39_2_fu_1115_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln39_1_fu_1109_p2),64));
end behav;
