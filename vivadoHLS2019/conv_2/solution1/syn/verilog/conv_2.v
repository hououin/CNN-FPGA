// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv_2,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=40.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=34.960800,HLS_SYN_LAT=8921091,HLS_SYN_TPT=none,HLS_SYN_MEM=65,HLS_SYN_DSP=7,HLS_SYN_FF=791,HLS_SYN_LUT=2077,HLS_VERSION=2019_1}" *)

module conv_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_1_out_address0,
        max_pool_1_out_ce0,
        max_pool_1_out_q0,
        conv_out_address0,
        conv_out_ce0,
        conv_out_we0,
        conv_out_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_pp0_stage0 = 6'd2;
parameter    ap_ST_fsm_pp0_stage1 = 6'd4;
parameter    ap_ST_fsm_pp0_stage2 = 6'd8;
parameter    ap_ST_fsm_pp0_stage3 = 6'd16;
parameter    ap_ST_fsm_state8 = 6'd32;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [12:0] max_pool_1_out_address0;
output   max_pool_1_out_ce0;
input  [31:0] max_pool_1_out_q0;
output  [12:0] conv_out_address0;
output   conv_out_ce0;
output   conv_out_we0;
output  [31:0] conv_out_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_1_out_ce0;
reg conv_out_ce0;
reg conv_out_we0;

(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [5:0] conv_2_bias_address0;
reg    conv_2_bias_ce0;
wire   [31:0] conv_2_bias_q0;
wire   [14:0] conv_2_weights_address0;
reg    conv_2_weights_ce0;
wire   [31:0] conv_2_weights_q0;
reg   [21:0] indvar_flatten195_reg_203;
reg   [3:0] r_0_reg_215;
reg   [18:0] indvar_flatten126_reg_226;
reg   [3:0] c_0_reg_237;
reg   [15:0] indvar_flatten68_reg_248;
reg   [6:0] f_0_reg_259;
reg   [8:0] indvar_flatten23_reg_270;
reg   [1:0] wr_0_reg_281;
reg   [7:0] indvar_flatten_reg_292;
reg   [1:0] wc_0_reg_303;
reg   [5:0] ch_0_reg_314;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln9_fu_377_p2;
reg   [0:0] icmp_ln9_reg_1200;
wire   [0:0] icmp_ln12_fu_389_p2;
reg   [0:0] icmp_ln12_reg_1204;
wire   [3:0] select_ln39_1_fu_403_p3;
reg   [3:0] select_ln39_1_reg_1209;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] or_ln39_fu_511_p2;
reg   [0:0] or_ln39_reg_1215;
wire   [3:0] select_ln39_5_fu_525_p3;
reg   [3:0] select_ln39_5_reg_1221;
wire   [0:0] and_ln39_10_fu_585_p2;
reg   [0:0] and_ln39_10_reg_1227;
wire   [6:0] f_fu_591_p2;
reg   [6:0] f_reg_1232;
wire   [0:0] or_ln31_1_fu_603_p2;
reg   [0:0] or_ln31_1_reg_1237;
wire   [6:0] select_ln31_1_fu_617_p3;
reg   [6:0] select_ln31_1_reg_1242;
wire   [1:0] select_ln19_1_fu_705_p3;
reg   [1:0] select_ln19_1_reg_1248;
wire   [5:0] select_ln22_fu_823_p3;
reg   [5:0] select_ln22_reg_1253;
wire   [1:0] select_ln22_1_fu_835_p3;
reg   [1:0] select_ln22_1_reg_1258;
wire   [0:0] icmp_ln27_fu_936_p2;
reg   [0:0] icmp_ln27_reg_1263;
wire   [0:0] and_ln33_1_fu_998_p2;
reg   [0:0] and_ln33_1_reg_1278;
reg   [0:0] and_ln33_1_reg_1278_pp0_iter1_reg;
wire   [7:0] select_ln22_4_fu_1010_p3;
reg   [7:0] select_ln22_4_reg_1282;
wire   [8:0] add_ln19_1_fu_1018_p2;
reg   [8:0] add_ln19_1_reg_1287;
wire   [15:0] add_ln15_1_fu_1024_p2;
reg   [15:0] add_ln15_1_reg_1292;
wire   [18:0] add_ln12_1_fu_1030_p2;
reg   [18:0] add_ln12_1_reg_1297;
reg   [31:0] conv_2_bias_load_reg_1302;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state7_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [21:0] add_ln9_fu_1036_p2;
reg   [21:0] add_ln9_reg_1307;
wire   [7:0] grp_fu_1180_p3;
reg   [7:0] add_ln39_reg_1312;
wire   [31:0] select_ln31_2_fu_1061_p3;
reg   [31:0] select_ln31_2_reg_1332;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] select_ln27_fu_1068_p3;
wire   [31:0] grp_fu_329_p2;
wire   [15:0] select_ln15_fu_1076_p3;
reg   [15:0] select_ln15_reg_1347;
wire   [31:0] grp_fu_325_p2;
reg   [31:0] w_sum_reg_1352;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state5_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
wire   [5:0] ch_fu_1082_p2;
reg   [5:0] ch_reg_1357;
wire   [8:0] select_ln19_5_fu_1087_p3;
reg   [8:0] select_ln19_5_reg_1362;
wire   [18:0] select_ln12_fu_1093_p3;
reg   [18:0] select_ln12_reg_1367;
reg   [12:0] conv_out_addr_reg_1372;
wire    ap_block_pp0_stage1_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage3_subdone;
reg   [21:0] ap_phi_mux_indvar_flatten195_phi_fu_207_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_219_p4;
reg   [18:0] ap_phi_mux_indvar_flatten126_phi_fu_230_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_241_p4;
reg   [15:0] ap_phi_mux_indvar_flatten68_phi_fu_252_p4;
reg   [6:0] ap_phi_mux_f_0_phi_fu_263_p4;
reg   [8:0] ap_phi_mux_indvar_flatten23_phi_fu_274_p4;
reg   [1:0] ap_phi_mux_wr_0_phi_fu_285_p4;
reg   [7:0] ap_phi_mux_indvar_flatten_phi_fu_296_p4;
reg   [1:0] ap_phi_mux_wc_0_phi_fu_307_p4;
reg   [5:0] ap_phi_mux_ch_0_phi_fu_318_p4;
wire   [63:0] zext_ln31_fu_352_p1;
wire   [63:0] zext_ln31_10_fu_970_p1;
wire   [63:0] zext_ln31_11_fu_981_p1;
wire   [63:0] zext_ln31_1_fu_1048_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln39_2_fu_1115_p1;
reg   [31:0] w_sum_3_fu_140;
wire    ap_block_pp0_stage2;
reg   [31:0] grp_fu_325_p0;
reg   [31:0] grp_fu_325_p1;
wire   [3:0] zext_ln19_fu_357_p1;
wire   [3:0] zext_ln22_fu_367_p1;
wire   [3:0] r_fu_383_p2;
wire   [3:0] add_ln31_fu_361_p2;
wire   [0:0] icmp_ln33_fu_425_p2;
wire   [0:0] xor_ln39_fu_419_p2;
wire   [3:0] add_ln31_1_fu_371_p2;
wire   [0:0] icmp_ln33_1_fu_445_p2;
wire   [0:0] icmp_ln25_fu_457_p2;
wire   [0:0] icmp_ln22_fu_469_p2;
wire   [0:0] icmp_ln19_fu_481_p2;
wire   [0:0] icmp_ln15_fu_493_p2;
wire   [3:0] select_ln39_fu_395_p3;
wire   [0:0] and_ln39_5_fu_499_p2;
wire   [3:0] c_fu_505_p2;
wire   [3:0] select_ln39_2_fu_411_p3;
wire   [0:0] xor_ln39_1_fu_541_p2;
wire   [0:0] and_ln39_fu_431_p2;
wire   [0:0] or_ln39_1_fu_547_p2;
wire   [3:0] select_ln39_3_fu_437_p3;
wire   [0:0] and_ln39_1_fu_451_p2;
wire   [0:0] and_ln39_2_fu_463_p2;
wire   [0:0] and_ln39_3_fu_475_p2;
wire   [0:0] and_ln39_4_fu_487_p2;
wire   [6:0] select_ln39_4_fu_517_p3;
wire   [0:0] or_ln31_fu_597_p2;
wire   [3:0] select_ln39_7_fu_533_p3;
wire   [0:0] and_ln39_6_fu_553_p2;
wire   [0:0] xor_ln31_fu_637_p2;
wire   [3:0] select_ln39_8_fu_559_p3;
wire   [0:0] and_ln39_7_fu_567_p2;
wire   [0:0] and_ln39_8_fu_573_p2;
wire   [0:0] and_ln39_9_fu_579_p2;
wire   [1:0] select_ln31_fu_609_p3;
wire   [0:0] and_ln31_3_fu_669_p2;
wire   [0:0] or_ln19_fu_681_p2;
wire   [0:0] or_ln19_1_fu_687_p2;
wire   [1:0] wr_fu_675_p2;
wire   [3:0] tmp_1_fu_717_p3;
wire   [9:0] zext_ln31_6_fu_725_p1;
wire   [9:0] zext_ln31_4_fu_713_p1;
wire   [3:0] zext_ln19_1_fu_701_p1;
wire   [3:0] add_ln31_2_fu_735_p2;
wire   [3:0] select_ln31_3_fu_629_p3;
wire   [3:0] select_ln19_2_fu_741_p3;
wire   [0:0] icmp_ln33_3_fu_753_p2;
wire   [0:0] and_ln31_fu_643_p2;
wire   [3:0] select_ln31_4_fu_649_p3;
wire   [0:0] xor_ln19_fu_775_p2;
wire   [0:0] and_ln31_1_fu_657_p2;
wire   [0:0] or_ln19_2_fu_781_p2;
wire   [0:0] and_ln31_2_fu_663_p2;
wire   [1:0] select_ln19_fu_693_p3;
wire   [0:0] and_ln19_1_fu_793_p2;
wire   [0:0] or_ln22_fu_805_p2;
wire   [0:0] or_ln22_1_fu_811_p2;
wire   [0:0] or_ln22_2_fu_817_p2;
wire   [1:0] wc_fu_799_p2;
wire   [9:0] zext_ln31_8_fu_843_p1;
wire   [9:0] sub_ln31_fu_729_p2;
wire   [9:0] add_ln31_3_fu_847_p2;
wire   [3:0] zext_ln22_1_fu_831_p1;
wire   [3:0] add_ln31_4_fu_859_p2;
wire   [3:0] select_ln19_4_fu_767_p3;
wire   [3:0] select_ln22_2_fu_865_p3;
wire   [7:0] grp_fu_1171_p3;
wire   [12:0] tmp_2_fu_877_p3;
wire   [0:0] icmp_ln33_4_fu_888_p2;
wire   [0:0] and_ln19_fu_787_p2;
wire   [1:0] trunc_ln27_fu_902_p1;
wire   [1:0] or_ln27_fu_906_p2;
wire   [2:0] tmp_3_fu_912_p4;
wire   [1:0] or_ln27_2_fu_922_p2;
wire   [4:0] or_ln27_1_fu_928_p3;
wire   [9:0] zext_ln31_5_fu_942_p1;
wire   [9:0] shl_ln31_fu_853_p2;
wire   [9:0] add_ln31_6_fu_950_p2;
wire   [15:0] zext_ln31_2_fu_625_p1;
wire   [15:0] tmp_13_cast_fu_956_p3;
wire   [15:0] add_ln31_7_fu_964_p2;
wire   [13:0] zext_ln31_9_fu_946_p1;
wire   [13:0] zext_ln33_fu_884_p1;
wire   [13:0] add_ln31_8_fu_975_p2;
wire   [0:0] select_ln22_3_fu_894_p3;
wire   [0:0] icmp_ln33_2_fu_986_p2;
wire   [0:0] and_ln33_fu_992_p2;
wire   [0:0] select_ln19_3_fu_759_p3;
wire   [7:0] add_ln22_fu_1004_p2;
wire   [31:0] select_ln39_6_fu_1055_p3;
wire    ap_block_pp0_stage3;
wire   [13:0] zext_ln31_3_fu_1106_p1;
wire   [13:0] tmp_2_cast_fu_1099_p3;
wire   [13:0] add_ln39_1_fu_1109_p2;
wire   [31:0] bitcast_ln38_fu_1120_p1;
wire   [7:0] tmp_8_fu_1124_p4;
wire   [22:0] trunc_ln38_fu_1134_p1;
wire   [0:0] icmp_ln38_1_fu_1144_p2;
wire   [0:0] icmp_ln38_fu_1138_p2;
wire   [0:0] or_ln38_fu_1150_p2;
wire   [0:0] tmp_9_fu_336_p2;
wire   [0:0] and_ln38_fu_1156_p2;
wire   [4:0] grp_fu_1171_p0;
wire   [3:0] grp_fu_1171_p1;
wire   [3:0] grp_fu_1171_p2;
wire   [4:0] grp_fu_1180_p0;
wire   [3:0] grp_fu_1180_p1;
wire   [3:0] grp_fu_1180_p2;
wire    ap_block_pp0_stage1_00001;
wire    ap_CS_fsm_state8;
reg   [5:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage2_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] grp_fu_1171_p10;
wire   [7:0] grp_fu_1171_p20;
wire   [7:0] grp_fu_1180_p10;
wire   [7:0] grp_fu_1180_p20;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

conv_2_conv_2_bias #(
    .DataWidth( 32 ),
    .AddressRange( 64 ),
    .AddressWidth( 6 ))
conv_2_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_bias_address0),
    .ce0(conv_2_bias_ce0),
    .q0(conv_2_bias_q0)
);

conv_2_conv_2_weibkb #(
    .DataWidth( 32 ),
    .AddressRange( 18432 ),
    .AddressWidth( 15 ))
conv_2_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(conv_2_weights_address0),
    .ce0(conv_2_weights_ce0),
    .q0(conv_2_weights_q0)
);

conv_2_fadd_32ns_cud #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_2_fadd_32ns_cud_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_325_p0),
    .din1(grp_fu_325_p1),
    .ce(1'b1),
    .dout(grp_fu_325_p2)
);

conv_2_fmul_32ns_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
conv_2_fmul_32ns_dEe_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(conv_2_weights_q0),
    .din1(max_pool_1_out_q0),
    .ce(1'b1),
    .dout(grp_fu_329_p2)
);

conv_2_fcmp_32ns_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
conv_2_fcmp_32ns_eOg_U3(
    .din0(grp_fu_325_p2),
    .din1(32'd0),
    .opcode(5'd2),
    .dout(tmp_9_fu_336_p2)
);

conv_2_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_2_mac_muladdfYi_U4(
    .din0(grp_fu_1171_p0),
    .din1(grp_fu_1171_p1),
    .din2(grp_fu_1171_p2),
    .dout(grp_fu_1171_p3)
);

conv_2_mac_muladdfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 4 ),
    .din2_WIDTH( 4 ),
    .dout_WIDTH( 8 ))
conv_2_mac_muladdfYi_U5(
    .din0(grp_fu_1180_p0),
    .din1(grp_fu_1180_p1),
    .din2(grp_fu_1180_p2),
    .dout(grp_fu_1180_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_237 <= select_ln39_5_reg_1221;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        c_0_reg_237 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ch_0_reg_314 <= ch_reg_1357;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ch_0_reg_314 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_259 <= select_ln31_1_reg_1242;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_259 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten126_reg_226 <= select_ln12_reg_1367;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten126_reg_226 <= 19'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten195_reg_203 <= add_ln9_reg_1307;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten195_reg_203 <= 22'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten23_reg_270 <= select_ln19_5_reg_1362;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten23_reg_270 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten68_reg_248 <= select_ln15_reg_1347;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten68_reg_248 <= 16'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_292 <= select_ln22_4_reg_1282;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_292 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_215 <= select_ln39_1_reg_1209;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_215 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln33_1_reg_1278_pp0_iter1_reg)) | ((1'd0 == and_ln33_1_reg_1278) & (icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1)))) begin
        w_sum_3_fu_140 <= grp_fu_325_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_sum_3_fu_140 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        wc_0_reg_303 <= select_ln22_1_reg_1258;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        wc_0_reg_303 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        wr_0_reg_281 <= select_ln19_1_reg_1248;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        wr_0_reg_281 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_377_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln12_1_reg_1297 <= add_ln12_1_fu_1030_p2;
        add_ln15_1_reg_1292 <= add_ln15_1_fu_1024_p2;
        add_ln19_1_reg_1287 <= add_ln19_1_fu_1018_p2;
        and_ln33_1_reg_1278 <= and_ln33_1_fu_998_p2;
        and_ln39_10_reg_1227 <= and_ln39_10_fu_585_p2;
        f_reg_1232 <= f_fu_591_p2;
        icmp_ln12_reg_1204 <= icmp_ln12_fu_389_p2;
        icmp_ln27_reg_1263 <= icmp_ln27_fu_936_p2;
        or_ln31_1_reg_1237 <= or_ln31_1_fu_603_p2;
        or_ln39_reg_1215 <= or_ln39_fu_511_p2;
        select_ln22_reg_1253 <= select_ln22_fu_823_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln39_reg_1312 <= grp_fu_1180_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        add_ln9_reg_1307 <= add_ln9_fu_1036_p2;
        conv_2_bias_load_reg_1302 <= conv_2_bias_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln33_1_reg_1278_pp0_iter1_reg <= and_ln33_1_reg_1278;
        icmp_ln9_reg_1200 <= icmp_ln9_fu_377_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        ch_reg_1357 <= ch_fu_1082_p2;
        select_ln12_reg_1367 <= select_ln12_fu_1093_p3;
        select_ln19_5_reg_1362 <= select_ln19_5_fu_1087_p3;
        w_sum_reg_1352 <= grp_fu_325_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_addr_reg_1372 <= zext_ln39_2_fu_1115_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln15_reg_1347 <= select_ln15_fu_1076_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_377_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln19_1_reg_1248 <= select_ln19_1_fu_705_p3;
        select_ln22_1_reg_1258 <= select_ln22_1_fu_835_p3;
        select_ln22_4_reg_1282 <= select_ln22_4_fu_1010_p3;
        select_ln31_1_reg_1242 <= select_ln31_1_fu_617_p3;
        select_ln39_1_reg_1209 <= select_ln39_1_fu_403_p3;
        select_ln39_5_reg_1221 <= select_ln39_5_fu_525_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        select_ln31_2_reg_1332 <= select_ln31_2_fu_1061_p3;
    end
end

always @ (*) begin
    if ((icmp_ln9_reg_1200 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_c_0_phi_fu_241_p4 = select_ln39_5_reg_1221;
    end else begin
        ap_phi_mux_c_0_phi_fu_241_p4 = c_0_reg_237;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_ch_0_phi_fu_318_p4 = ch_reg_1357;
    end else begin
        ap_phi_mux_ch_0_phi_fu_318_p4 = ch_0_reg_314;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_f_0_phi_fu_263_p4 = select_ln31_1_reg_1242;
    end else begin
        ap_phi_mux_f_0_phi_fu_263_p4 = f_0_reg_259;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten126_phi_fu_230_p4 = select_ln12_reg_1367;
    end else begin
        ap_phi_mux_indvar_flatten126_phi_fu_230_p4 = indvar_flatten126_reg_226;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten195_phi_fu_207_p4 = add_ln9_reg_1307;
    end else begin
        ap_phi_mux_indvar_flatten195_phi_fu_207_p4 = indvar_flatten195_reg_203;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten23_phi_fu_274_p4 = select_ln19_5_reg_1362;
    end else begin
        ap_phi_mux_indvar_flatten23_phi_fu_274_p4 = indvar_flatten23_reg_270;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten68_phi_fu_252_p4 = select_ln15_reg_1347;
    end else begin
        ap_phi_mux_indvar_flatten68_phi_fu_252_p4 = indvar_flatten68_reg_248;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_296_p4 = select_ln22_4_reg_1282;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_296_p4 = indvar_flatten_reg_292;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_r_0_phi_fu_219_p4 = select_ln39_1_reg_1209;
    end else begin
        ap_phi_mux_r_0_phi_fu_219_p4 = r_0_reg_215;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wc_0_phi_fu_307_p4 = select_ln22_1_reg_1258;
    end else begin
        ap_phi_mux_wc_0_phi_fu_307_p4 = wc_0_reg_303;
    end
end

always @ (*) begin
    if (((icmp_ln9_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_wr_0_phi_fu_285_p4 = select_ln19_1_reg_1248;
    end else begin
        ap_phi_mux_wr_0_phi_fu_285_p4 = wr_0_reg_281;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            conv_2_bias_address0 = zext_ln31_1_fu_1048_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            conv_2_bias_address0 = zext_ln31_fu_352_p1;
        end else begin
            conv_2_bias_address0 = 'bx;
        end
    end else begin
        conv_2_bias_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        conv_2_bias_ce0 = 1'b1;
    end else begin
        conv_2_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        conv_2_weights_ce0 = 1'b1;
    end else begin
        conv_2_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        conv_out_ce0 = 1'b1;
    end else begin
        conv_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'd1 == and_ln33_1_reg_1278_pp0_iter1_reg))) begin
        conv_out_we0 = 1'b1;
    end else begin
        conv_out_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_325_p0 = w_sum_reg_1352;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_325_p0 = select_ln27_fu_1068_p3;
    end else begin
        grp_fu_325_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_325_p1 = select_ln31_2_reg_1332;
    end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_325_p1 = grp_fu_329_p2;
    end else begin
        grp_fu_325_p1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        max_pool_1_out_ce0 = 1'b1;
    end else begin
        max_pool_1_out_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((icmp_ln9_reg_1200 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((icmp_ln9_reg_1200 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln12_1_fu_1030_p2 = (ap_phi_mux_indvar_flatten126_phi_fu_230_p4 + 19'd1);

assign add_ln15_1_fu_1024_p2 = (ap_phi_mux_indvar_flatten68_phi_fu_252_p4 + 16'd1);

assign add_ln19_1_fu_1018_p2 = (ap_phi_mux_indvar_flatten23_phi_fu_274_p4 + 9'd1);

assign add_ln22_fu_1004_p2 = (ap_phi_mux_indvar_flatten_phi_fu_296_p4 + 8'd1);

assign add_ln31_1_fu_371_p2 = (zext_ln22_fu_367_p1 + ap_phi_mux_c_0_phi_fu_241_p4);

assign add_ln31_2_fu_735_p2 = (select_ln39_1_fu_403_p3 + zext_ln19_1_fu_701_p1);

assign add_ln31_3_fu_847_p2 = (zext_ln31_8_fu_843_p1 + sub_ln31_fu_729_p2);

assign add_ln31_4_fu_859_p2 = (select_ln39_5_fu_525_p3 + zext_ln22_1_fu_831_p1);

assign add_ln31_6_fu_950_p2 = (zext_ln31_5_fu_942_p1 + shl_ln31_fu_853_p2);

assign add_ln31_7_fu_964_p2 = (zext_ln31_2_fu_625_p1 + tmp_13_cast_fu_956_p3);

assign add_ln31_8_fu_975_p2 = (zext_ln31_9_fu_946_p1 + zext_ln33_fu_884_p1);

assign add_ln31_fu_361_p2 = (zext_ln19_fu_357_p1 + ap_phi_mux_r_0_phi_fu_219_p4);

assign add_ln39_1_fu_1109_p2 = (zext_ln31_3_fu_1106_p1 + tmp_2_cast_fu_1099_p3);

assign add_ln9_fu_1036_p2 = (indvar_flatten195_reg_203 + 22'd1);

assign and_ln19_1_fu_793_p2 = (or_ln19_2_fu_781_p2 & and_ln31_2_fu_663_p2);

assign and_ln19_fu_787_p2 = (or_ln19_2_fu_781_p2 & and_ln31_1_fu_657_p2);

assign and_ln31_1_fu_657_p2 = (xor_ln31_fu_637_p2 & and_ln39_7_fu_567_p2);

assign and_ln31_2_fu_663_p2 = (xor_ln31_fu_637_p2 & and_ln39_8_fu_573_p2);

assign and_ln31_3_fu_669_p2 = (xor_ln31_fu_637_p2 & and_ln39_9_fu_579_p2);

assign and_ln31_fu_643_p2 = (xor_ln31_fu_637_p2 & and_ln39_6_fu_553_p2);

assign and_ln33_1_fu_998_p2 = (select_ln19_3_fu_759_p3 & and_ln33_fu_992_p2);

assign and_ln33_fu_992_p2 = (select_ln22_3_fu_894_p3 & icmp_ln33_2_fu_986_p2);

assign and_ln38_fu_1156_p2 = (tmp_9_fu_336_p2 & or_ln38_fu_1150_p2);

assign and_ln39_10_fu_585_p2 = (or_ln39_1_fu_547_p2 & and_ln39_4_fu_487_p2);

assign and_ln39_1_fu_451_p2 = (xor_ln39_fu_419_p2 & icmp_ln33_1_fu_445_p2);

assign and_ln39_2_fu_463_p2 = (xor_ln39_fu_419_p2 & icmp_ln25_fu_457_p2);

assign and_ln39_3_fu_475_p2 = (xor_ln39_fu_419_p2 & icmp_ln22_fu_469_p2);

assign and_ln39_4_fu_487_p2 = (xor_ln39_fu_419_p2 & icmp_ln19_fu_481_p2);

assign and_ln39_5_fu_499_p2 = (xor_ln39_fu_419_p2 & icmp_ln15_fu_493_p2);

assign and_ln39_6_fu_553_p2 = (or_ln39_1_fu_547_p2 & and_ln39_fu_431_p2);

assign and_ln39_7_fu_567_p2 = (or_ln39_1_fu_547_p2 & and_ln39_1_fu_451_p2);

assign and_ln39_8_fu_573_p2 = (or_ln39_1_fu_547_p2 & and_ln39_2_fu_463_p2);

assign and_ln39_9_fu_579_p2 = (or_ln39_1_fu_547_p2 & and_ln39_3_fu_475_p2);

assign and_ln39_fu_431_p2 = (xor_ln39_fu_419_p2 & icmp_ln33_fu_425_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd5];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign bitcast_ln38_fu_1120_p1 = grp_fu_325_p2;

assign c_fu_505_p2 = (4'd1 + select_ln39_fu_395_p3);

assign ch_fu_1082_p2 = (select_ln22_reg_1253 + 6'd1);

assign conv_2_weights_address0 = zext_ln31_10_fu_970_p1;

assign conv_out_address0 = conv_out_addr_reg_1372;

assign conv_out_d0 = ((and_ln38_fu_1156_p2[0:0] === 1'b1) ? grp_fu_325_p2 : 32'd0);

assign f_fu_591_p2 = (7'd1 + select_ln39_4_fu_517_p3);

assign grp_fu_1171_p0 = 8'd13;

assign grp_fu_1171_p1 = grp_fu_1171_p10;

assign grp_fu_1171_p10 = select_ln19_2_fu_741_p3;

assign grp_fu_1171_p2 = grp_fu_1171_p20;

assign grp_fu_1171_p20 = select_ln22_2_fu_865_p3;

assign grp_fu_1180_p0 = 8'd11;

assign grp_fu_1180_p1 = grp_fu_1180_p10;

assign grp_fu_1180_p10 = select_ln39_1_reg_1209;

assign grp_fu_1180_p2 = grp_fu_1180_p20;

assign grp_fu_1180_p20 = select_ln39_5_reg_1221;

assign icmp_ln12_fu_389_p2 = ((ap_phi_mux_indvar_flatten126_phi_fu_230_p4 == 19'd202752) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_493_p2 = ((ap_phi_mux_indvar_flatten68_phi_fu_252_p4 == 16'd18432) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_481_p2 = ((ap_phi_mux_indvar_flatten23_phi_fu_274_p4 == 9'd288) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_469_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_296_p4 == 8'd96) ? 1'b1 : 1'b0);

assign icmp_ln25_fu_457_p2 = ((ap_phi_mux_ch_0_phi_fu_318_p4 == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln27_fu_936_p2 = ((or_ln27_1_fu_928_p3 == 5'd0) ? 1'b1 : 1'b0);

assign icmp_ln33_1_fu_445_p2 = ((ap_phi_mux_wc_0_phi_fu_307_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_2_fu_986_p2 = ((select_ln22_fu_823_p3 == 6'd31) ? 1'b1 : 1'b0);

assign icmp_ln33_3_fu_753_p2 = ((wr_fu_675_p2 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_4_fu_888_p2 = ((wc_fu_799_p2 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln33_fu_425_p2 = ((ap_phi_mux_wr_0_phi_fu_285_p4 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln38_1_fu_1144_p2 = ((trunc_ln38_fu_1134_p1 == 23'd0) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_1138_p2 = ((tmp_8_fu_1124_p4 != 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_377_p2 = ((ap_phi_mux_indvar_flatten195_phi_fu_207_p4 == 22'd2230272) ? 1'b1 : 1'b0);

assign max_pool_1_out_address0 = zext_ln31_11_fu_981_p1;

assign or_ln19_1_fu_687_p2 = (or_ln39_fu_511_p2 | or_ln19_fu_681_p2);

assign or_ln19_2_fu_781_p2 = (xor_ln19_fu_775_p2 | and_ln39_10_fu_585_p2);

assign or_ln19_fu_681_p2 = (and_ln39_10_fu_585_p2 | and_ln31_3_fu_669_p2);

assign or_ln22_1_fu_811_p2 = (or_ln31_fu_597_p2 | or_ln22_fu_805_p2);

assign or_ln22_2_fu_817_p2 = (or_ln22_1_fu_811_p2 | icmp_ln12_fu_389_p2);

assign or_ln22_fu_805_p2 = (and_ln31_3_fu_669_p2 | and_ln19_1_fu_793_p2);

assign or_ln27_1_fu_928_p3 = {{tmp_3_fu_912_p4}, {or_ln27_2_fu_922_p2}};

assign or_ln27_2_fu_922_p2 = (select_ln22_1_fu_835_p3 | or_ln27_fu_906_p2);

assign or_ln27_fu_906_p2 = (trunc_ln27_fu_902_p1 | select_ln19_1_fu_705_p3);

assign or_ln31_1_fu_603_p2 = (or_ln31_fu_597_p2 | icmp_ln12_fu_389_p2);

assign or_ln31_fu_597_p2 = (and_ln39_5_fu_499_p2 | and_ln39_10_fu_585_p2);

assign or_ln38_fu_1150_p2 = (icmp_ln38_fu_1138_p2 | icmp_ln38_1_fu_1144_p2);

assign or_ln39_1_fu_547_p2 = (xor_ln39_1_fu_541_p2 | icmp_ln12_fu_389_p2);

assign or_ln39_fu_511_p2 = (icmp_ln12_fu_389_p2 | and_ln39_5_fu_499_p2);

assign r_fu_383_p2 = (4'd1 + ap_phi_mux_r_0_phi_fu_219_p4);

assign select_ln12_fu_1093_p3 = ((icmp_ln12_reg_1204[0:0] === 1'b1) ? 19'd1 : add_ln12_1_reg_1297);

assign select_ln15_fu_1076_p3 = ((or_ln39_reg_1215[0:0] === 1'b1) ? 16'd1 : add_ln15_1_reg_1292);

assign select_ln19_1_fu_705_p3 = ((and_ln31_3_fu_669_p2[0:0] === 1'b1) ? wr_fu_675_p2 : select_ln31_fu_609_p3);

assign select_ln19_2_fu_741_p3 = ((and_ln31_3_fu_669_p2[0:0] === 1'b1) ? add_ln31_2_fu_735_p2 : select_ln31_3_fu_629_p3);

assign select_ln19_3_fu_759_p3 = ((and_ln31_3_fu_669_p2[0:0] === 1'b1) ? icmp_ln33_3_fu_753_p2 : and_ln31_fu_643_p2);

assign select_ln19_4_fu_767_p3 = ((and_ln31_3_fu_669_p2[0:0] === 1'b1) ? select_ln39_5_fu_525_p3 : select_ln31_4_fu_649_p3);

assign select_ln19_5_fu_1087_p3 = ((or_ln31_1_reg_1237[0:0] === 1'b1) ? 9'd1 : add_ln19_1_reg_1287);

assign select_ln19_fu_693_p3 = ((or_ln19_1_fu_687_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wc_0_phi_fu_307_p4);

assign select_ln22_1_fu_835_p3 = ((and_ln19_1_fu_793_p2[0:0] === 1'b1) ? wc_fu_799_p2 : select_ln19_fu_693_p3);

assign select_ln22_2_fu_865_p3 = ((and_ln19_1_fu_793_p2[0:0] === 1'b1) ? add_ln31_4_fu_859_p2 : select_ln19_4_fu_767_p3);

assign select_ln22_3_fu_894_p3 = ((and_ln19_1_fu_793_p2[0:0] === 1'b1) ? icmp_ln33_4_fu_888_p2 : and_ln19_fu_787_p2);

assign select_ln22_4_fu_1010_p3 = ((or_ln19_1_fu_687_p2[0:0] === 1'b1) ? 8'd1 : add_ln22_fu_1004_p2);

assign select_ln22_fu_823_p3 = ((or_ln22_2_fu_817_p2[0:0] === 1'b1) ? 6'd0 : ap_phi_mux_ch_0_phi_fu_318_p4);

assign select_ln27_fu_1068_p3 = ((icmp_ln27_reg_1263[0:0] === 1'b1) ? 32'd0 : w_sum_3_fu_140);

assign select_ln31_1_fu_617_p3 = ((and_ln39_10_fu_585_p2[0:0] === 1'b1) ? f_fu_591_p2 : select_ln39_4_fu_517_p3);

assign select_ln31_2_fu_1061_p3 = ((and_ln39_10_reg_1227[0:0] === 1'b1) ? conv_2_bias_q0 : select_ln39_6_fu_1055_p3);

assign select_ln31_3_fu_629_p3 = ((and_ln39_10_fu_585_p2[0:0] === 1'b1) ? select_ln39_1_fu_403_p3 : select_ln39_7_fu_533_p3);

assign select_ln31_4_fu_649_p3 = ((and_ln39_10_fu_585_p2[0:0] === 1'b1) ? select_ln39_5_fu_525_p3 : select_ln39_8_fu_559_p3);

assign select_ln31_fu_609_p3 = ((or_ln31_1_fu_603_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_wr_0_phi_fu_285_p4);

assign select_ln39_1_fu_403_p3 = ((icmp_ln12_fu_389_p2[0:0] === 1'b1) ? r_fu_383_p2 : ap_phi_mux_r_0_phi_fu_219_p4);

assign select_ln39_2_fu_411_p3 = ((icmp_ln12_fu_389_p2[0:0] === 1'b1) ? r_fu_383_p2 : add_ln31_fu_361_p2);

assign select_ln39_3_fu_437_p3 = ((icmp_ln12_fu_389_p2[0:0] === 1'b1) ? 4'd0 : add_ln31_1_fu_371_p2);

assign select_ln39_4_fu_517_p3 = ((or_ln39_fu_511_p2[0:0] === 1'b1) ? 7'd0 : ap_phi_mux_f_0_phi_fu_263_p4);

assign select_ln39_5_fu_525_p3 = ((and_ln39_5_fu_499_p2[0:0] === 1'b1) ? c_fu_505_p2 : select_ln39_fu_395_p3);

assign select_ln39_6_fu_1055_p3 = ((or_ln39_reg_1215[0:0] === 1'b1) ? 32'd3172352588 : conv_2_bias_load_reg_1302);

assign select_ln39_7_fu_533_p3 = ((and_ln39_5_fu_499_p2[0:0] === 1'b1) ? select_ln39_1_fu_403_p3 : select_ln39_2_fu_411_p3);

assign select_ln39_8_fu_559_p3 = ((and_ln39_5_fu_499_p2[0:0] === 1'b1) ? c_fu_505_p2 : select_ln39_3_fu_437_p3);

assign select_ln39_fu_395_p3 = ((icmp_ln12_fu_389_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_241_p4);

assign shl_ln31_fu_853_p2 = add_ln31_3_fu_847_p2 << 10'd5;

assign sub_ln31_fu_729_p2 = (zext_ln31_6_fu_725_p1 - zext_ln31_4_fu_713_p1);

assign tmp_13_cast_fu_956_p3 = {{add_ln31_6_fu_950_p2}, {6'd0}};

assign tmp_1_fu_717_p3 = {{select_ln19_1_fu_705_p3}, {2'd0}};

assign tmp_2_cast_fu_1099_p3 = {{add_ln39_reg_1312}, {6'd0}};

assign tmp_2_fu_877_p3 = {{grp_fu_1171_p3}, {5'd0}};

assign tmp_3_fu_912_p4 = {{select_ln22_fu_823_p3[4:2]}};

assign tmp_8_fu_1124_p4 = {{bitcast_ln38_fu_1120_p1[30:23]}};

assign trunc_ln27_fu_902_p1 = select_ln22_fu_823_p3[1:0];

assign trunc_ln38_fu_1134_p1 = bitcast_ln38_fu_1120_p1[22:0];

assign wc_fu_799_p2 = (2'd1 + select_ln19_fu_693_p3);

assign wr_fu_675_p2 = (2'd1 + select_ln31_fu_609_p3);

assign xor_ln19_fu_775_p2 = (1'd1 ^ and_ln39_9_fu_579_p2);

assign xor_ln31_fu_637_p2 = (1'd1 ^ and_ln39_10_fu_585_p2);

assign xor_ln39_1_fu_541_p2 = (icmp_ln15_fu_493_p2 ^ 1'd1);

assign xor_ln39_fu_419_p2 = (icmp_ln12_fu_389_p2 ^ 1'd1);

assign zext_ln19_1_fu_701_p1 = wr_fu_675_p2;

assign zext_ln19_fu_357_p1 = ap_phi_mux_wr_0_phi_fu_285_p4;

assign zext_ln22_1_fu_831_p1 = wc_fu_799_p2;

assign zext_ln22_fu_367_p1 = ap_phi_mux_wc_0_phi_fu_307_p4;

assign zext_ln31_10_fu_970_p1 = add_ln31_7_fu_964_p2;

assign zext_ln31_11_fu_981_p1 = add_ln31_8_fu_975_p2;

assign zext_ln31_1_fu_1048_p1 = f_reg_1232;

assign zext_ln31_2_fu_625_p1 = select_ln31_1_fu_617_p3;

assign zext_ln31_3_fu_1106_p1 = select_ln31_1_reg_1242;

assign zext_ln31_4_fu_713_p1 = select_ln19_1_fu_705_p3;

assign zext_ln31_5_fu_942_p1 = select_ln22_fu_823_p3;

assign zext_ln31_6_fu_725_p1 = tmp_1_fu_717_p3;

assign zext_ln31_8_fu_843_p1 = select_ln22_1_fu_835_p3;

assign zext_ln31_9_fu_946_p1 = select_ln22_fu_823_p3;

assign zext_ln31_fu_352_p1 = ap_phi_mux_f_0_phi_fu_263_p4;

assign zext_ln33_fu_884_p1 = tmp_2_fu_877_p3;

assign zext_ln39_2_fu_1115_p1 = add_ln39_1_fu_1109_p2;

endmodule //conv_2
