// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.393000,HLS_SYN_LAT=1349,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=68,HLS_SYN_FF=7049,HLS_SYN_LUT=19301,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fully_connected_address0,
        fully_connected_ce0,
        fully_connected_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0,
        prediction_address1,
        prediction_ce1,
        prediction_we1,
        prediction_d1
);

parameter    ap_ST_fsm_state1 = 69'd1;
parameter    ap_ST_fsm_state2 = 69'd2;
parameter    ap_ST_fsm_pp0_stage0 = 69'd4;
parameter    ap_ST_fsm_pp0_stage1 = 69'd8;
parameter    ap_ST_fsm_pp0_stage2 = 69'd16;
parameter    ap_ST_fsm_pp0_stage3 = 69'd32;
parameter    ap_ST_fsm_state10 = 69'd64;
parameter    ap_ST_fsm_state11 = 69'd128;
parameter    ap_ST_fsm_state12 = 69'd256;
parameter    ap_ST_fsm_state13 = 69'd512;
parameter    ap_ST_fsm_state14 = 69'd1024;
parameter    ap_ST_fsm_state15 = 69'd2048;
parameter    ap_ST_fsm_state16 = 69'd4096;
parameter    ap_ST_fsm_state17 = 69'd8192;
parameter    ap_ST_fsm_state18 = 69'd16384;
parameter    ap_ST_fsm_state19 = 69'd32768;
parameter    ap_ST_fsm_state20 = 69'd65536;
parameter    ap_ST_fsm_state21 = 69'd131072;
parameter    ap_ST_fsm_state22 = 69'd262144;
parameter    ap_ST_fsm_state23 = 69'd524288;
parameter    ap_ST_fsm_state24 = 69'd1048576;
parameter    ap_ST_fsm_state25 = 69'd2097152;
parameter    ap_ST_fsm_state26 = 69'd4194304;
parameter    ap_ST_fsm_state27 = 69'd8388608;
parameter    ap_ST_fsm_state28 = 69'd16777216;
parameter    ap_ST_fsm_state29 = 69'd33554432;
parameter    ap_ST_fsm_state30 = 69'd67108864;
parameter    ap_ST_fsm_state31 = 69'd134217728;
parameter    ap_ST_fsm_state32 = 69'd268435456;
parameter    ap_ST_fsm_state33 = 69'd536870912;
parameter    ap_ST_fsm_state34 = 69'd1073741824;
parameter    ap_ST_fsm_state35 = 69'd2147483648;
parameter    ap_ST_fsm_state36 = 69'd4294967296;
parameter    ap_ST_fsm_state37 = 69'd8589934592;
parameter    ap_ST_fsm_state38 = 69'd17179869184;
parameter    ap_ST_fsm_state39 = 69'd34359738368;
parameter    ap_ST_fsm_state40 = 69'd68719476736;
parameter    ap_ST_fsm_state41 = 69'd137438953472;
parameter    ap_ST_fsm_state42 = 69'd274877906944;
parameter    ap_ST_fsm_state43 = 69'd549755813888;
parameter    ap_ST_fsm_state44 = 69'd1099511627776;
parameter    ap_ST_fsm_state45 = 69'd2199023255552;
parameter    ap_ST_fsm_state46 = 69'd4398046511104;
parameter    ap_ST_fsm_state47 = 69'd8796093022208;
parameter    ap_ST_fsm_state48 = 69'd17592186044416;
parameter    ap_ST_fsm_state49 = 69'd35184372088832;
parameter    ap_ST_fsm_state50 = 69'd70368744177664;
parameter    ap_ST_fsm_state51 = 69'd140737488355328;
parameter    ap_ST_fsm_state52 = 69'd281474976710656;
parameter    ap_ST_fsm_state53 = 69'd562949953421312;
parameter    ap_ST_fsm_state54 = 69'd1125899906842624;
parameter    ap_ST_fsm_state55 = 69'd2251799813685248;
parameter    ap_ST_fsm_state56 = 69'd4503599627370496;
parameter    ap_ST_fsm_state57 = 69'd9007199254740992;
parameter    ap_ST_fsm_state58 = 69'd18014398509481984;
parameter    ap_ST_fsm_state59 = 69'd36028797018963968;
parameter    ap_ST_fsm_state60 = 69'd72057594037927936;
parameter    ap_ST_fsm_state61 = 69'd144115188075855872;
parameter    ap_ST_fsm_state62 = 69'd288230376151711744;
parameter    ap_ST_fsm_state63 = 69'd576460752303423488;
parameter    ap_ST_fsm_state64 = 69'd1152921504606846976;
parameter    ap_ST_fsm_state65 = 69'd2305843009213693952;
parameter    ap_ST_fsm_state66 = 69'd4611686018427387904;
parameter    ap_ST_fsm_state67 = 69'd9223372036854775808;
parameter    ap_ST_fsm_state68 = 69'd18446744073709551616;
parameter    ap_ST_fsm_state69 = 69'd36893488147419103232;
parameter    ap_ST_fsm_state70 = 69'd73786976294838206464;
parameter    ap_ST_fsm_state71 = 69'd147573952589676412928;
parameter    ap_ST_fsm_state72 = 69'd295147905179352825856;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] fully_connected_address0;
output   fully_connected_ce0;
input  [31:0] fully_connected_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;
output  [3:0] prediction_address1;
output   prediction_ce1;
output   prediction_we1;
output  [31:0] prediction_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fully_connected_ce0;
reg[3:0] prediction_address0;
reg prediction_ce0;
reg prediction_we0;
reg[31:0] prediction_d0;
reg[3:0] prediction_address1;
reg prediction_ce1;
reg prediction_we1;
reg[31:0] prediction_d1;

(* fsm_encoding = "none" *) reg   [68:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [8:0] dense_out_weights_address0;
reg    dense_out_weights_ce0;
wire   [31:0] dense_out_weights_q0;
wire   [3:0] dense_out_bias_address0;
reg    dense_out_bias_ce0;
wire   [31:0] dense_out_bias_q0;
reg   [4:0] f_0_reg_329;
reg   [31:0] w_sum_0_reg_340;
wire   [31:0] grp_fu_352_p2;
reg   [31:0] reg_452;
wire    ap_CS_fsm_pp0_stage2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_state9_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_11001;
reg   [0:0] icmp_ln21_reg_581;
reg   [0:0] icmp_ln21_reg_581_pp0_iter1_reg;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state59;
wire   [31:0] dense_array_q0;
reg   [31:0] reg_468;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state19;
wire   [31:0] grp_fu_406_p2;
reg   [31:0] reg_473;
wire   [0:0] icmp_ln16_fu_479_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] d_fu_485_p2;
reg   [3:0] d_reg_560;
wire   [63:0] zext_ln23_fu_491_p1;
reg   [63:0] zext_ln23_reg_565;
wire   [8:0] zext_ln21_fu_495_p1;
reg   [8:0] zext_ln21_reg_571;
wire   [0:0] icmp_ln21_fu_499_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state7_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] f_fu_505_p2;
reg   [4:0] f_reg_585;
reg    ap_enable_reg_pp0_iter0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_state8_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_360_p2;
reg   [31:0] tmp_3_reg_610;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
reg   [31:0] tmp_reg_630;
wire    ap_CS_fsm_state22;
reg   [31:0] dense_array_load_2_reg_641;
wire    ap_CS_fsm_state26;
reg   [31:0] dense_array_load_3_reg_652;
wire    ap_CS_fsm_state30;
reg   [31:0] dense_array_load_4_reg_663;
wire    ap_CS_fsm_state34;
reg   [31:0] dense_array_load_5_reg_674;
wire    ap_CS_fsm_state38;
reg   [31:0] dense_array_load_6_reg_685;
wire    ap_CS_fsm_state42;
reg   [31:0] dense_array_load_7_reg_696;
wire    ap_CS_fsm_state46;
reg   [31:0] dense_array_load_8_reg_707;
wire    ap_CS_fsm_state50;
reg   [31:0] dense_array_load_9_reg_718;
wire   [31:0] grp_fu_412_p2;
reg   [31:0] tmp_5_2_reg_724;
wire   [31:0] grp_fu_417_p2;
reg   [31:0] tmp_5_3_reg_729;
wire   [31:0] grp_fu_422_p2;
reg   [31:0] tmp_5_4_reg_734;
wire   [31:0] grp_fu_427_p2;
reg   [31:0] tmp_5_5_reg_739;
wire   [31:0] grp_fu_432_p2;
reg   [31:0] tmp_5_6_reg_744;
wire   [31:0] grp_fu_437_p2;
reg   [31:0] tmp_5_7_reg_749;
wire   [31:0] grp_fu_442_p2;
reg   [31:0] tmp_5_8_reg_754;
wire   [31:0] grp_fu_447_p2;
reg   [31:0] tmp_5_9_reg_759;
wire   [31:0] grp_fu_366_p2;
reg   [31:0] tmp_13_reg_764;
wire    ap_CS_fsm_state67;
wire   [31:0] grp_fu_370_p2;
reg   [31:0] tmp_6_1_reg_769;
wire   [31:0] grp_fu_374_p2;
reg   [31:0] tmp_6_2_reg_774;
wire   [31:0] grp_fu_378_p2;
reg   [31:0] tmp_6_3_reg_779;
wire   [31:0] grp_fu_382_p2;
reg   [31:0] tmp_6_4_reg_784;
wire   [31:0] grp_fu_386_p2;
reg   [31:0] tmp_6_5_reg_789;
wire   [31:0] grp_fu_390_p2;
reg   [31:0] tmp_6_6_reg_794;
wire   [31:0] grp_fu_394_p2;
reg   [31:0] tmp_6_7_reg_799;
wire   [31:0] grp_fu_398_p2;
reg   [31:0] tmp_6_8_reg_804;
wire   [31:0] grp_fu_402_p2;
reg   [31:0] tmp_6_9_reg_809;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_subdone;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage2_subdone;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [3:0] d_0_reg_318;
wire    ap_CS_fsm_state14;
reg   [4:0] ap_phi_mux_f_0_phi_fu_333_p4;
wire    ap_block_pp0_stage0;
wire   [31:0] ap_phi_mux_w_sum_0_phi_fu_344_p4;
wire   [63:0] zext_ln23_4_fu_551_p1;
wire   [63:0] zext_ln23_1_fu_511_p1;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
reg   [31:0] grp_fu_352_p0;
reg   [31:0] grp_fu_352_p1;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state56;
wire    ap_block_pp0_stage1;
wire    ap_CS_fsm_state60;
reg   [31:0] grp_fu_406_p1;
wire   [7:0] tmp_14_fu_516_p3;
wire   [5:0] tmp_15_fu_528_p3;
wire   [8:0] zext_ln23_3_fu_536_p1;
wire   [8:0] zext_ln23_2_fu_524_p1;
wire   [8:0] add_ln23_fu_540_p2;
wire   [8:0] add_ln23_1_fu_546_p2;
reg   [68:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage3_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 69'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

dense_dense_out_wbkb #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dense_out_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_address0),
    .ce0(dense_out_weights_ce0),
    .q0(dense_out_weights_q0)
);

dense_dense_out_bcud #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_bias_address0),
    .ce0(dense_out_bias_ce0),
    .q0(dense_out_bias_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(grp_fu_352_p2),
    .q0(dense_array_q0)
);

dense_fadd_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_352_p0),
    .din1(grp_fu_352_p1),
    .ce(1'b1),
    .dout(grp_fu_352_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_out_weights_q0),
    .din1(fully_connected_q0),
    .ce(1'b1),
    .dout(grp_fu_360_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_reg_630),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_366_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_473),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_370_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_2_reg_724),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_374_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_3_reg_729),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_378_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U7(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_4_reg_734),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_382_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U8(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_5_reg_739),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_386_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U9(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_6_reg_744),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_390_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U10(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_7_reg_749),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_394_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U11(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_8_reg_754),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_398_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U12(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(tmp_5_9_reg_759),
    .din1(reg_452),
    .ce(1'b1),
    .dout(grp_fu_402_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U13(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(grp_fu_406_p1),
    .ce(1'b1),
    .dout(grp_fu_406_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U14(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_2_reg_641),
    .ce(1'b1),
    .dout(grp_fu_412_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U15(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_3_reg_652),
    .ce(1'b1),
    .dout(grp_fu_417_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U16(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_4_reg_663),
    .ce(1'b1),
    .dout(grp_fu_422_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_5_reg_674),
    .ce(1'b1),
    .dout(grp_fu_427_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U18(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_6_reg_685),
    .ce(1'b1),
    .dout(grp_fu_432_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U19(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_7_reg_696),
    .ce(1'b1),
    .dout(grp_fu_437_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_8_reg_707),
    .ce(1'b1),
    .dout(grp_fu_442_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U21(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_load_9_reg_718),
    .ce(1'b1),
    .dout(grp_fu_447_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_479_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage3_subdone) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_479_p2 == 1'd0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        d_0_reg_318 <= d_reg_560;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        d_0_reg_318 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln21_reg_581 == 1'd0))) begin
        f_0_reg_329 <= f_reg_585;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_479_p2 == 1'd0))) begin
        f_0_reg_329 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln21_reg_581_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        w_sum_0_reg_340 <= grp_fu_352_p2;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_479_p2 == 1'd0))) begin
        w_sum_0_reg_340 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_reg_560 <= d_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        dense_array_load_2_reg_641 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state27)) begin
        dense_array_load_3_reg_652 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state31)) begin
        dense_array_load_4_reg_663 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state35)) begin
        dense_array_load_5_reg_674 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state39)) begin
        dense_array_load_6_reg_685 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        dense_array_load_7_reg_696 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        dense_array_load_8_reg_707 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        dense_array_load_9_reg_718 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_reg_585 <= f_fu_505_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_581 <= icmp_ln21_fu_499_p2;
        icmp_ln21_reg_581_pp0_iter1_reg <= icmp_ln21_reg_581;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln21_reg_581_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)))) begin
        reg_452 <= grp_fu_352_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15))) begin
        reg_468 <= dense_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_473 <= grp_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state67)) begin
        tmp_13_reg_764 <= grp_fu_366_p2;
        tmp_6_1_reg_769 <= grp_fu_370_p2;
        tmp_6_2_reg_774 <= grp_fu_374_p2;
        tmp_6_3_reg_779 <= grp_fu_378_p2;
        tmp_6_4_reg_784 <= grp_fu_382_p2;
        tmp_6_5_reg_789 <= grp_fu_386_p2;
        tmp_6_6_reg_794 <= grp_fu_390_p2;
        tmp_6_7_reg_799 <= grp_fu_394_p2;
        tmp_6_8_reg_804 <= grp_fu_398_p2;
        tmp_6_9_reg_809 <= grp_fu_402_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln21_reg_581 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_3_reg_610 <= grp_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state59)) begin
        tmp_5_2_reg_724 <= grp_fu_412_p2;
        tmp_5_3_reg_729 <= grp_fu_417_p2;
        tmp_5_4_reg_734 <= grp_fu_422_p2;
        tmp_5_5_reg_739 <= grp_fu_427_p2;
        tmp_5_6_reg_744 <= grp_fu_432_p2;
        tmp_5_7_reg_749 <= grp_fu_437_p2;
        tmp_5_8_reg_754 <= grp_fu_442_p2;
        tmp_5_9_reg_759 <= grp_fu_447_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_reg_630 <= grp_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_479_p2 == 1'd0))) begin
        zext_ln21_reg_571[3 : 0] <= zext_ln21_fu_495_p1[3 : 0];
        zext_ln23_reg_565[3 : 0] <= zext_ln23_fu_491_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln21_fu_499_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln21_reg_581 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_333_p4 = f_reg_585;
    end else begin
        ap_phi_mux_f_0_phi_fu_333_p4 = f_0_reg_329;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_array_address0 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        dense_array_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        dense_array_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense_array_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        dense_array_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense_array_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_array_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_array_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_array_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_array_address0 = zext_ln23_reg_565;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_array_address0 = 64'd0;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state2))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_out_bias_ce0 = 1'b1;
    end else begin
        dense_out_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_out_weights_ce0 = 1'b1;
    end else begin
        dense_out_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        fully_connected_ce0 = 1'b1;
    end else begin
        fully_connected_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_352_p0 = reg_452;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_352_p0 = tmp_reg_630;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_352_p0 = w_sum_0_reg_340;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_352_p0 = ap_phi_mux_w_sum_0_phi_fu_344_p4;
    end else begin
        grp_fu_352_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_352_p1 = reg_473;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_352_p1 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        grp_fu_352_p1 = dense_out_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        grp_fu_352_p1 = tmp_3_reg_610;
    end else begin
        grp_fu_352_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        grp_fu_406_p1 = reg_468;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        grp_fu_406_p1 = dense_array_q0;
    end else begin
        grp_fu_406_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        prediction_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        prediction_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        prediction_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        prediction_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        prediction_address0 = 64'd0;
    end else begin
        prediction_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        prediction_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        prediction_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        prediction_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        prediction_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        prediction_address1 = 64'd1;
    end else begin
        prediction_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68))) begin
        prediction_ce1 = 1'b1;
    end else begin
        prediction_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        prediction_d0 = tmp_6_8_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        prediction_d0 = tmp_6_6_reg_794;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        prediction_d0 = tmp_6_4_reg_784;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        prediction_d0 = tmp_6_2_reg_774;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        prediction_d0 = tmp_13_reg_764;
    end else begin
        prediction_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state72)) begin
        prediction_d1 = tmp_6_9_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        prediction_d1 = tmp_6_7_reg_799;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        prediction_d1 = tmp_6_5_reg_789;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        prediction_d1 = tmp_6_3_reg_779;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        prediction_d1 = tmp_6_1_reg_769;
    end else begin
        prediction_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68))) begin
        prediction_we1 = 1'b1;
    end else begin
        prediction_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln16_fu_479_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_fu_499_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln21_fu_499_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((~((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln23_1_fu_546_p2 = (add_ln23_fu_540_p2 + zext_ln21_reg_571);

assign add_ln23_fu_540_p2 = (zext_ln23_3_fu_536_p1 + zext_ln23_2_fu_524_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd68];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_phi_mux_w_sum_0_phi_fu_344_p4 = w_sum_0_reg_340;

assign d_fu_485_p2 = (d_0_reg_318 + 4'd1);

assign dense_out_bias_address0 = zext_ln23_reg_565;

assign dense_out_weights_address0 = zext_ln23_4_fu_551_p1;

assign f_fu_505_p2 = (ap_phi_mux_f_0_phi_fu_333_p4 + 5'd1);

assign fully_connected_address0 = zext_ln23_1_fu_511_p1;

assign icmp_ln16_fu_479_p2 = ((d_0_reg_318 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_499_p2 = ((ap_phi_mux_f_0_phi_fu_333_p4 == 5'd30) ? 1'b1 : 1'b0);

assign tmp_14_fu_516_p3 = {{ap_phi_mux_f_0_phi_fu_333_p4}, {3'd0}};

assign tmp_15_fu_528_p3 = {{ap_phi_mux_f_0_phi_fu_333_p4}, {1'd0}};

assign zext_ln21_fu_495_p1 = d_0_reg_318;

assign zext_ln23_1_fu_511_p1 = ap_phi_mux_f_0_phi_fu_333_p4;

assign zext_ln23_2_fu_524_p1 = tmp_14_fu_516_p3;

assign zext_ln23_3_fu_536_p1 = tmp_15_fu_528_p3;

assign zext_ln23_4_fu_551_p1 = add_ln23_1_fu_546_p2;

assign zext_ln23_fu_491_p1 = d_0_reg_318;

always @ (posedge ap_clk) begin
    zext_ln23_reg_565[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln21_reg_571[8:4] <= 5'b00000;
end

endmodule //dense
