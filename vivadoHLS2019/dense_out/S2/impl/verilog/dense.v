// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=17.896850,HLS_SYN_LAT=1538,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=12,HLS_SYN_FF=3299,HLS_SYN_LUT=4085,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fully_connected_address0,
        fully_connected_ce0,
        fully_connected_q0,
        fully_connected_address1,
        fully_connected_ce1,
        fully_connected_q1,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0
);

parameter    ap_ST_fsm_state1 = 168'd1;
parameter    ap_ST_fsm_state2 = 168'd2;
parameter    ap_ST_fsm_state3 = 168'd4;
parameter    ap_ST_fsm_state4 = 168'd8;
parameter    ap_ST_fsm_state5 = 168'd16;
parameter    ap_ST_fsm_state6 = 168'd32;
parameter    ap_ST_fsm_state7 = 168'd64;
parameter    ap_ST_fsm_state8 = 168'd128;
parameter    ap_ST_fsm_state9 = 168'd256;
parameter    ap_ST_fsm_state10 = 168'd512;
parameter    ap_ST_fsm_state11 = 168'd1024;
parameter    ap_ST_fsm_state12 = 168'd2048;
parameter    ap_ST_fsm_state13 = 168'd4096;
parameter    ap_ST_fsm_state14 = 168'd8192;
parameter    ap_ST_fsm_state15 = 168'd16384;
parameter    ap_ST_fsm_state16 = 168'd32768;
parameter    ap_ST_fsm_state17 = 168'd65536;
parameter    ap_ST_fsm_state18 = 168'd131072;
parameter    ap_ST_fsm_state19 = 168'd262144;
parameter    ap_ST_fsm_state20 = 168'd524288;
parameter    ap_ST_fsm_state21 = 168'd1048576;
parameter    ap_ST_fsm_state22 = 168'd2097152;
parameter    ap_ST_fsm_state23 = 168'd4194304;
parameter    ap_ST_fsm_state24 = 168'd8388608;
parameter    ap_ST_fsm_state25 = 168'd16777216;
parameter    ap_ST_fsm_state26 = 168'd33554432;
parameter    ap_ST_fsm_state27 = 168'd67108864;
parameter    ap_ST_fsm_state28 = 168'd134217728;
parameter    ap_ST_fsm_state29 = 168'd268435456;
parameter    ap_ST_fsm_state30 = 168'd536870912;
parameter    ap_ST_fsm_state31 = 168'd1073741824;
parameter    ap_ST_fsm_state32 = 168'd2147483648;
parameter    ap_ST_fsm_state33 = 168'd4294967296;
parameter    ap_ST_fsm_state34 = 168'd8589934592;
parameter    ap_ST_fsm_state35 = 168'd17179869184;
parameter    ap_ST_fsm_state36 = 168'd34359738368;
parameter    ap_ST_fsm_state37 = 168'd68719476736;
parameter    ap_ST_fsm_state38 = 168'd137438953472;
parameter    ap_ST_fsm_state39 = 168'd274877906944;
parameter    ap_ST_fsm_state40 = 168'd549755813888;
parameter    ap_ST_fsm_state41 = 168'd1099511627776;
parameter    ap_ST_fsm_state42 = 168'd2199023255552;
parameter    ap_ST_fsm_state43 = 168'd4398046511104;
parameter    ap_ST_fsm_state44 = 168'd8796093022208;
parameter    ap_ST_fsm_state45 = 168'd17592186044416;
parameter    ap_ST_fsm_state46 = 168'd35184372088832;
parameter    ap_ST_fsm_state47 = 168'd70368744177664;
parameter    ap_ST_fsm_state48 = 168'd140737488355328;
parameter    ap_ST_fsm_state49 = 168'd281474976710656;
parameter    ap_ST_fsm_state50 = 168'd562949953421312;
parameter    ap_ST_fsm_state51 = 168'd1125899906842624;
parameter    ap_ST_fsm_state52 = 168'd2251799813685248;
parameter    ap_ST_fsm_state53 = 168'd4503599627370496;
parameter    ap_ST_fsm_state54 = 168'd9007199254740992;
parameter    ap_ST_fsm_state55 = 168'd18014398509481984;
parameter    ap_ST_fsm_state56 = 168'd36028797018963968;
parameter    ap_ST_fsm_state57 = 168'd72057594037927936;
parameter    ap_ST_fsm_state58 = 168'd144115188075855872;
parameter    ap_ST_fsm_state59 = 168'd288230376151711744;
parameter    ap_ST_fsm_state60 = 168'd576460752303423488;
parameter    ap_ST_fsm_state61 = 168'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 168'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 168'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 168'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 168'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 168'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 168'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 168'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 168'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 168'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 168'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 168'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 168'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 168'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 168'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 168'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 168'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 168'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 168'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 168'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 168'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 168'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 168'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 168'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 168'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 168'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 168'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 168'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 168'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 168'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 168'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 168'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 168'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 168'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 168'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 168'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 168'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 168'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 168'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 168'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 168'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 168'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 168'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 168'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 168'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 168'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 168'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 168'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 168'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 168'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 168'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 168'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 168'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 168'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 168'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 168'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 168'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 168'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 168'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 168'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 168'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 168'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 168'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 168'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 168'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 168'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 168'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 168'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 168'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 168'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 168'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 168'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 168'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 168'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 168'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 168'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 168'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 168'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 168'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 168'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 168'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 168'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 168'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 168'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 168'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 168'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 168'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 168'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 168'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 168'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 168'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 168'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 168'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 168'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 168'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 168'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 168'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 168'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 168'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 168'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 168'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 168'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 168'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 168'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 168'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 168'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 168'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 168'd187072209578355573530071658587684226515959365500928;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] fully_connected_address0;
output   fully_connected_ce0;
input  [31:0] fully_connected_q0;
output  [4:0] fully_connected_address1;
output   fully_connected_ce1;
input  [31:0] fully_connected_q1;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] fully_connected_address0;
reg fully_connected_ce0;
reg[4:0] fully_connected_address1;
reg fully_connected_ce1;
reg prediction_ce0;
reg prediction_we0;

(* fsm_encoding = "none" *) reg   [167:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] dense_out_weights_0_address0;
reg    dense_out_weights_0_ce0;
wire   [31:0] dense_out_weights_0_q0;
wire   [3:0] dense_out_weights_1_address0;
reg    dense_out_weights_1_ce0;
wire   [31:0] dense_out_weights_1_q0;
wire   [3:0] dense_out_weights_2_address0;
reg    dense_out_weights_2_ce0;
wire   [31:0] dense_out_weights_2_q0;
wire   [3:0] dense_out_weights_3_address0;
reg    dense_out_weights_3_ce0;
wire   [31:0] dense_out_weights_3_q0;
wire   [3:0] dense_out_weights_4_address0;
reg    dense_out_weights_4_ce0;
wire   [31:0] dense_out_weights_4_q0;
wire   [3:0] dense_out_weights_5_address0;
reg    dense_out_weights_5_ce0;
wire   [31:0] dense_out_weights_5_q0;
wire   [3:0] dense_out_weights_6_address0;
reg    dense_out_weights_6_ce0;
wire   [31:0] dense_out_weights_6_q0;
wire   [3:0] dense_out_weights_7_address0;
reg    dense_out_weights_7_ce0;
wire   [31:0] dense_out_weights_7_q0;
wire   [3:0] dense_out_weights_8_address0;
reg    dense_out_weights_8_ce0;
wire   [31:0] dense_out_weights_8_q0;
wire   [3:0] dense_out_weights_9_address0;
reg    dense_out_weights_9_ce0;
wire   [31:0] dense_out_weights_9_q0;
wire   [3:0] dense_out_weights_10_address0;
reg    dense_out_weights_10_ce0;
wire   [31:0] dense_out_weights_10_q0;
wire   [3:0] dense_out_weights_11_address0;
reg    dense_out_weights_11_ce0;
wire   [31:0] dense_out_weights_11_q0;
wire   [3:0] dense_out_weights_12_address0;
reg    dense_out_weights_12_ce0;
wire   [31:0] dense_out_weights_12_q0;
wire   [3:0] dense_out_weights_13_address0;
reg    dense_out_weights_13_ce0;
wire   [31:0] dense_out_weights_13_q0;
wire   [3:0] dense_out_weights_14_address0;
reg    dense_out_weights_14_ce0;
wire   [31:0] dense_out_weights_14_q0;
wire   [3:0] dense_out_weights_15_address0;
reg    dense_out_weights_15_ce0;
wire   [31:0] dense_out_weights_15_q0;
wire   [3:0] dense_out_weights_16_address0;
reg    dense_out_weights_16_ce0;
wire   [31:0] dense_out_weights_16_q0;
wire   [3:0] dense_out_weights_17_address0;
reg    dense_out_weights_17_ce0;
wire   [31:0] dense_out_weights_17_q0;
wire   [3:0] dense_out_weights_18_address0;
reg    dense_out_weights_18_ce0;
wire   [31:0] dense_out_weights_18_q0;
wire   [3:0] dense_out_weights_19_address0;
reg    dense_out_weights_19_ce0;
wire   [31:0] dense_out_weights_19_q0;
wire   [3:0] dense_out_weights_20_address0;
reg    dense_out_weights_20_ce0;
wire   [31:0] dense_out_weights_20_q0;
wire   [3:0] dense_out_weights_21_address0;
reg    dense_out_weights_21_ce0;
wire   [31:0] dense_out_weights_21_q0;
wire   [3:0] dense_out_weights_22_address0;
reg    dense_out_weights_22_ce0;
wire   [31:0] dense_out_weights_22_q0;
wire   [3:0] dense_out_weights_23_address0;
reg    dense_out_weights_23_ce0;
wire   [31:0] dense_out_weights_23_q0;
wire   [3:0] dense_out_weights_24_address0;
reg    dense_out_weights_24_ce0;
wire   [31:0] dense_out_weights_24_q0;
wire   [3:0] dense_out_weights_25_address0;
reg    dense_out_weights_25_ce0;
wire   [31:0] dense_out_weights_25_q0;
wire   [3:0] dense_out_weights_26_address0;
reg    dense_out_weights_26_ce0;
wire   [31:0] dense_out_weights_26_q0;
wire   [3:0] dense_out_weights_27_address0;
reg    dense_out_weights_27_ce0;
wire   [31:0] dense_out_weights_27_q0;
wire   [3:0] dense_out_weights_28_address0;
reg    dense_out_weights_28_ce0;
wire   [31:0] dense_out_weights_28_q0;
wire   [3:0] dense_out_weights_29_address0;
reg    dense_out_weights_29_ce0;
wire   [31:0] dense_out_weights_29_q0;
wire   [3:0] dense_out_bias_address0;
reg    dense_out_bias_ce0;
wire   [31:0] dense_out_bias_q0;
wire   [31:0] grp_fu_930_p2;
reg   [31:0] reg_975;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state103;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state135;
wire   [31:0] grp_fu_922_p2;
reg   [31:0] reg_981;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state153;
wire   [31:0] dense_array_q0;
wire    ap_CS_fsm_state145;
wire    ap_CS_fsm_state155;
wire   [31:0] grp_fu_969_p2;
reg   [31:0] reg_992;
wire    ap_CS_fsm_state149;
wire    ap_CS_fsm_state159;
reg   [31:0] fully_connected_load_reg_1059;
wire    ap_CS_fsm_state2;
reg   [31:0] fully_connected_load_1_reg_1064;
reg   [31:0] fully_connected_load_2_reg_1079;
wire    ap_CS_fsm_state3;
reg   [31:0] fully_connected_load_3_reg_1084;
reg   [31:0] fully_connected_load_4_reg_1099;
wire    ap_CS_fsm_state4;
reg   [31:0] fully_connected_load_5_reg_1104;
reg   [31:0] fully_connected_load_6_reg_1119;
wire    ap_CS_fsm_state5;
reg   [31:0] fully_connected_load_7_reg_1124;
reg   [31:0] fully_connected_load_8_reg_1139;
wire    ap_CS_fsm_state6;
reg   [31:0] fully_connected_load_9_reg_1144;
reg   [31:0] fully_connected_load_10_reg_1159;
wire    ap_CS_fsm_state7;
reg   [31:0] fully_connected_load_11_reg_1164;
reg   [31:0] fully_connected_load_12_reg_1179;
wire    ap_CS_fsm_state8;
reg   [31:0] fully_connected_load_13_reg_1184;
reg   [31:0] fully_connected_load_14_reg_1199;
wire    ap_CS_fsm_state9;
reg   [31:0] fully_connected_load_15_reg_1204;
reg   [31:0] fully_connected_load_16_reg_1219;
wire    ap_CS_fsm_state10;
reg   [31:0] fully_connected_load_17_reg_1224;
reg   [31:0] fully_connected_load_18_reg_1239;
wire    ap_CS_fsm_state11;
reg   [31:0] fully_connected_load_19_reg_1244;
reg   [31:0] fully_connected_load_20_reg_1259;
wire    ap_CS_fsm_state12;
reg   [31:0] fully_connected_load_21_reg_1264;
reg   [31:0] fully_connected_load_22_reg_1279;
wire    ap_CS_fsm_state13;
reg   [31:0] fully_connected_load_23_reg_1284;
reg   [31:0] fully_connected_load_24_reg_1299;
wire    ap_CS_fsm_state14;
reg   [31:0] fully_connected_load_25_reg_1304;
reg   [31:0] fully_connected_load_26_reg_1319;
wire    ap_CS_fsm_state15;
reg   [31:0] fully_connected_load_27_reg_1324;
reg   [31:0] fully_connected_load_28_reg_1339;
wire    ap_CS_fsm_state16;
reg   [31:0] fully_connected_load_29_reg_1344;
wire   [3:0] d_fu_1004_p2;
reg   [3:0] d_reg_1352;
wire    ap_CS_fsm_state17;
wire   [63:0] zext_ln23_fu_1010_p1;
reg   [63:0] zext_ln23_reg_1357;
wire   [0:0] icmp_ln16_fu_998_p2;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state102;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state134;
wire    ap_CS_fsm_state140;
wire   [3:0] i_fu_1021_p2;
reg   [3:0] i_reg_1705;
wire    ap_CS_fsm_state144;
wire   [0:0] icmp_ln31_fu_1015_p2;
wire   [3:0] j_fu_1038_p2;
reg   [3:0] j_reg_1718;
wire    ap_CS_fsm_state154;
wire   [63:0] zext_ln39_fu_1044_p1;
reg   [63:0] zext_ln39_reg_1723;
wire   [0:0] icmp_ln37_fu_1032_p2;
wire   [31:0] grp_fu_964_p2;
reg   [31:0] tmp_6_reg_1733;
wire    ap_CS_fsm_state167;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [3:0] d_0_reg_877;
wire    ap_CS_fsm_state143;
reg   [31:0] sum_0_reg_888;
reg   [3:0] i_0_reg_900;
reg   [3:0] j_0_reg_911;
wire    ap_CS_fsm_state168;
wire   [63:0] zext_ln33_fu_1027_p1;
reg   [31:0] grp_fu_922_p0;
reg   [31:0] grp_fu_922_p1;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state132;
wire    ap_CS_fsm_state136;
wire    ap_CS_fsm_state150;
reg   [31:0] grp_fu_930_p0;
reg   [31:0] grp_fu_930_p1;
wire    ap_CS_fsm_state160;
reg   [167:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 168'd1;
end

dense_dense_out_wbkb #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_0_address0),
    .ce0(dense_out_weights_0_ce0),
    .q0(dense_out_weights_0_q0)
);

dense_dense_out_wcud #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_1_address0),
    .ce0(dense_out_weights_1_ce0),
    .q0(dense_out_weights_1_q0)
);

dense_dense_out_wdEe #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_2_address0),
    .ce0(dense_out_weights_2_ce0),
    .q0(dense_out_weights_2_q0)
);

dense_dense_out_weOg #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_3_address0),
    .ce0(dense_out_weights_3_ce0),
    .q0(dense_out_weights_3_q0)
);

dense_dense_out_wfYi #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_4_address0),
    .ce0(dense_out_weights_4_ce0),
    .q0(dense_out_weights_4_q0)
);

dense_dense_out_wg8j #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_5_address0),
    .ce0(dense_out_weights_5_ce0),
    .q0(dense_out_weights_5_q0)
);

dense_dense_out_whbi #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_6_address0),
    .ce0(dense_out_weights_6_ce0),
    .q0(dense_out_weights_6_q0)
);

dense_dense_out_wibs #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_7_address0),
    .ce0(dense_out_weights_7_ce0),
    .q0(dense_out_weights_7_q0)
);

dense_dense_out_wjbC #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_8_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_8_address0),
    .ce0(dense_out_weights_8_ce0),
    .q0(dense_out_weights_8_q0)
);

dense_dense_out_wkbM #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_9_address0),
    .ce0(dense_out_weights_9_ce0),
    .q0(dense_out_weights_9_q0)
);

dense_dense_out_wlbW #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_10_address0),
    .ce0(dense_out_weights_10_ce0),
    .q0(dense_out_weights_10_q0)
);

dense_dense_out_wmb6 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_11_address0),
    .ce0(dense_out_weights_11_ce0),
    .q0(dense_out_weights_11_q0)
);

dense_dense_out_wncg #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_12_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_12_address0),
    .ce0(dense_out_weights_12_ce0),
    .q0(dense_out_weights_12_q0)
);

dense_dense_out_wocq #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_13_address0),
    .ce0(dense_out_weights_13_ce0),
    .q0(dense_out_weights_13_q0)
);

dense_dense_out_wpcA #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_14_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_14_address0),
    .ce0(dense_out_weights_14_ce0),
    .q0(dense_out_weights_14_q0)
);

dense_dense_out_wqcK #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_15_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_15_address0),
    .ce0(dense_out_weights_15_ce0),
    .q0(dense_out_weights_15_q0)
);

dense_dense_out_wrcU #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_16_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_16_address0),
    .ce0(dense_out_weights_16_ce0),
    .q0(dense_out_weights_16_q0)
);

dense_dense_out_wsc4 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_17_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_17_address0),
    .ce0(dense_out_weights_17_ce0),
    .q0(dense_out_weights_17_q0)
);

dense_dense_out_wtde #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_18_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_18_address0),
    .ce0(dense_out_weights_18_ce0),
    .q0(dense_out_weights_18_q0)
);

dense_dense_out_wudo #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_19_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_19_address0),
    .ce0(dense_out_weights_19_ce0),
    .q0(dense_out_weights_19_q0)
);

dense_dense_out_wvdy #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_20_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_20_address0),
    .ce0(dense_out_weights_20_ce0),
    .q0(dense_out_weights_20_q0)
);

dense_dense_out_wwdI #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_21_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_21_address0),
    .ce0(dense_out_weights_21_ce0),
    .q0(dense_out_weights_21_q0)
);

dense_dense_out_wxdS #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_22_address0),
    .ce0(dense_out_weights_22_ce0),
    .q0(dense_out_weights_22_q0)
);

dense_dense_out_wyd2 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_23_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_23_address0),
    .ce0(dense_out_weights_23_ce0),
    .q0(dense_out_weights_23_q0)
);

dense_dense_out_wzec #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_24_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_24_address0),
    .ce0(dense_out_weights_24_ce0),
    .q0(dense_out_weights_24_q0)
);

dense_dense_out_wAem #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_25_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_25_address0),
    .ce0(dense_out_weights_25_ce0),
    .q0(dense_out_weights_25_q0)
);

dense_dense_out_wBew #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_26_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_26_address0),
    .ce0(dense_out_weights_26_ce0),
    .q0(dense_out_weights_26_q0)
);

dense_dense_out_wCeG #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_27_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_27_address0),
    .ce0(dense_out_weights_27_ce0),
    .q0(dense_out_weights_27_q0)
);

dense_dense_out_wDeQ #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_28_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_28_address0),
    .ce0(dense_out_weights_28_ce0),
    .q0(dense_out_weights_28_q0)
);

dense_dense_out_wEe0 #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_weights_29_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_29_address0),
    .ce0(dense_out_weights_29_ce0),
    .q0(dense_out_weights_29_q0)
);

dense_dense_out_bFfa #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_bias_address0),
    .ce0(dense_out_bias_ce0),
    .q0(dense_out_bias_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(grp_fu_922_p2),
    .q0(dense_array_q0)
);

dense_fadd_32ns_3Gfk #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3Gfk_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_922_p0),
    .din1(grp_fu_922_p1),
    .ce(1'b1),
    .dout(grp_fu_922_p2)
);

dense_fmul_32ns_3Hfu #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3Hfu_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_930_p0),
    .din1(grp_fu_930_p1),
    .ce(1'b1),
    .dout(grp_fu_930_p2)
);

dense_fdiv_32ns_3IfE #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3IfE_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_992),
    .din1(sum_0_reg_888),
    .ce(1'b1),
    .dout(grp_fu_964_p2)
);

dense_fexp_32ns_3JfO #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3JfO_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_969_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        d_0_reg_877 <= d_reg_1352;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        d_0_reg_877 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_998_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        i_0_reg_900 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state153)) begin
        i_0_reg_900 <= i_reg_1705;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state144) & (icmp_ln31_fu_1015_p2 == 1'd1))) begin
        j_0_reg_911 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        j_0_reg_911 <= j_reg_1718;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_998_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
        sum_0_reg_888 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state153)) begin
        sum_0_reg_888 <= grp_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        d_reg_1352 <= d_fu_1004_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        fully_connected_load_10_reg_1159 <= fully_connected_q0;
        fully_connected_load_11_reg_1164 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        fully_connected_load_12_reg_1179 <= fully_connected_q0;
        fully_connected_load_13_reg_1184 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        fully_connected_load_14_reg_1199 <= fully_connected_q0;
        fully_connected_load_15_reg_1204 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        fully_connected_load_16_reg_1219 <= fully_connected_q0;
        fully_connected_load_17_reg_1224 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        fully_connected_load_18_reg_1239 <= fully_connected_q0;
        fully_connected_load_19_reg_1244 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        fully_connected_load_1_reg_1064 <= fully_connected_q1;
        fully_connected_load_reg_1059 <= fully_connected_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        fully_connected_load_20_reg_1259 <= fully_connected_q0;
        fully_connected_load_21_reg_1264 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        fully_connected_load_22_reg_1279 <= fully_connected_q0;
        fully_connected_load_23_reg_1284 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        fully_connected_load_24_reg_1299 <= fully_connected_q0;
        fully_connected_load_25_reg_1304 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fully_connected_load_26_reg_1319 <= fully_connected_q0;
        fully_connected_load_27_reg_1324 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        fully_connected_load_28_reg_1339 <= fully_connected_q0;
        fully_connected_load_29_reg_1344 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        fully_connected_load_2_reg_1079 <= fully_connected_q0;
        fully_connected_load_3_reg_1084 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        fully_connected_load_4_reg_1099 <= fully_connected_q0;
        fully_connected_load_5_reg_1104 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        fully_connected_load_6_reg_1119 <= fully_connected_q0;
        fully_connected_load_7_reg_1124 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        fully_connected_load_8_reg_1139 <= fully_connected_q0;
        fully_connected_load_9_reg_1144 <= fully_connected_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        i_reg_1705 <= i_fu_1021_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        j_reg_1718 <= j_fu_1038_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state19))) begin
        reg_975 <= grp_fu_930_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state153) | (1'b1 == ap_CS_fsm_state139) | (1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state23))) begin
        reg_981 <= grp_fu_922_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state159) | (1'b1 == ap_CS_fsm_state149))) begin
        reg_992 <= grp_fu_969_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state167)) begin
        tmp_6_reg_1733 <= grp_fu_964_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_998_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state17))) begin
        zext_ln23_reg_1357[3 : 0] <= zext_ln23_fu_1010_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_1032_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state154))) begin
        zext_ln39_reg_1723[3 : 0] <= zext_ln39_fu_1044_p1[3 : 0];
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) & (icmp_ln37_fu_1032_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) & (icmp_ln37_fu_1032_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        dense_array_address0 = zext_ln39_fu_1044_p1;
    end else if ((1'b1 == ap_CS_fsm_state144)) begin
        dense_array_address0 = zext_ln33_fu_1027_p1;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        dense_array_address0 = zext_ln23_reg_1357;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state144))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state143)) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state139)) begin
        dense_out_bias_ce0 = 1'b1;
    end else begin
        dense_out_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_out_weights_0_ce0 = 1'b1;
    end else begin
        dense_out_weights_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state57)) begin
        dense_out_weights_10_ce0 = 1'b1;
    end else begin
        dense_out_weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state61)) begin
        dense_out_weights_11_ce0 = 1'b1;
    end else begin
        dense_out_weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state65)) begin
        dense_out_weights_12_ce0 = 1'b1;
    end else begin
        dense_out_weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state69)) begin
        dense_out_weights_13_ce0 = 1'b1;
    end else begin
        dense_out_weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state73)) begin
        dense_out_weights_14_ce0 = 1'b1;
    end else begin
        dense_out_weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state77)) begin
        dense_out_weights_15_ce0 = 1'b1;
    end else begin
        dense_out_weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state81)) begin
        dense_out_weights_16_ce0 = 1'b1;
    end else begin
        dense_out_weights_16_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        dense_out_weights_17_ce0 = 1'b1;
    end else begin
        dense_out_weights_17_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state89)) begin
        dense_out_weights_18_ce0 = 1'b1;
    end else begin
        dense_out_weights_18_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state93)) begin
        dense_out_weights_19_ce0 = 1'b1;
    end else begin
        dense_out_weights_19_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        dense_out_weights_1_ce0 = 1'b1;
    end else begin
        dense_out_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state97)) begin
        dense_out_weights_20_ce0 = 1'b1;
    end else begin
        dense_out_weights_20_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_out_weights_21_ce0 = 1'b1;
    end else begin
        dense_out_weights_21_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state105)) begin
        dense_out_weights_22_ce0 = 1'b1;
    end else begin
        dense_out_weights_22_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state109)) begin
        dense_out_weights_23_ce0 = 1'b1;
    end else begin
        dense_out_weights_23_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state113)) begin
        dense_out_weights_24_ce0 = 1'b1;
    end else begin
        dense_out_weights_24_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state117)) begin
        dense_out_weights_25_ce0 = 1'b1;
    end else begin
        dense_out_weights_25_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state121)) begin
        dense_out_weights_26_ce0 = 1'b1;
    end else begin
        dense_out_weights_26_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state125)) begin
        dense_out_weights_27_ce0 = 1'b1;
    end else begin
        dense_out_weights_27_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state129)) begin
        dense_out_weights_28_ce0 = 1'b1;
    end else begin
        dense_out_weights_28_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        dense_out_weights_29_ce0 = 1'b1;
    end else begin
        dense_out_weights_29_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        dense_out_weights_2_ce0 = 1'b1;
    end else begin
        dense_out_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_out_weights_3_ce0 = 1'b1;
    end else begin
        dense_out_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state33)) begin
        dense_out_weights_4_ce0 = 1'b1;
    end else begin
        dense_out_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        dense_out_weights_5_ce0 = 1'b1;
    end else begin
        dense_out_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state41)) begin
        dense_out_weights_6_ce0 = 1'b1;
    end else begin
        dense_out_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        dense_out_weights_7_ce0 = 1'b1;
    end else begin
        dense_out_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state49)) begin
        dense_out_weights_8_ce0 = 1'b1;
    end else begin
        dense_out_weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        dense_out_weights_9_ce0 = 1'b1;
    end else begin
        dense_out_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fully_connected_address0 = 64'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        fully_connected_address0 = 64'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        fully_connected_address0 = 64'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        fully_connected_address0 = 64'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        fully_connected_address0 = 64'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        fully_connected_address0 = 64'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        fully_connected_address0 = 64'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        fully_connected_address0 = 64'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        fully_connected_address0 = 64'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        fully_connected_address0 = 64'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fully_connected_address0 = 64'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fully_connected_address0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fully_connected_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fully_connected_address0 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fully_connected_address0 = 64'd0;
    end else begin
        fully_connected_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        fully_connected_address1 = 64'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        fully_connected_address1 = 64'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        fully_connected_address1 = 64'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        fully_connected_address1 = 64'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        fully_connected_address1 = 64'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        fully_connected_address1 = 64'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        fully_connected_address1 = 64'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        fully_connected_address1 = 64'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        fully_connected_address1 = 64'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        fully_connected_address1 = 64'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        fully_connected_address1 = 64'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        fully_connected_address1 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        fully_connected_address1 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        fully_connected_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        fully_connected_address1 = 64'd1;
    end else begin
        fully_connected_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        fully_connected_ce0 = 1'b1;
    end else begin
        fully_connected_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        fully_connected_ce1 = 1'b1;
    end else begin
        fully_connected_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_fu_922_p0 = sum_0_reg_888;
    end else if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state140))) begin
        grp_fu_922_p0 = reg_981;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_922_p0 = reg_975;
    end else begin
        grp_fu_922_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        grp_fu_922_p1 = reg_992;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_fu_922_p1 = dense_out_bias_q0;
    end else if (((1'b1 == ap_CS_fsm_state136) | (1'b1 == ap_CS_fsm_state132) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state24))) begin
        grp_fu_922_p1 = reg_975;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        grp_fu_922_p1 = 32'd0;
    end else begin
        grp_fu_922_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_930_p0 = dense_out_weights_29_q0;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        grp_fu_930_p0 = dense_out_weights_28_q0;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_930_p0 = dense_out_weights_27_q0;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_fu_930_p0 = dense_out_weights_26_q0;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        grp_fu_930_p0 = dense_out_weights_25_q0;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        grp_fu_930_p0 = dense_out_weights_24_q0;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_fu_930_p0 = dense_out_weights_23_q0;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_930_p0 = dense_out_weights_22_q0;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_fu_930_p0 = dense_out_weights_21_q0;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_930_p0 = dense_out_weights_20_q0;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_930_p0 = dense_out_weights_19_q0;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_930_p0 = dense_out_weights_18_q0;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_930_p0 = dense_out_weights_17_q0;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_930_p0 = dense_out_weights_16_q0;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_930_p0 = dense_out_weights_15_q0;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_930_p0 = dense_out_weights_14_q0;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_930_p0 = dense_out_weights_13_q0;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_930_p0 = dense_out_weights_12_q0;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_930_p0 = dense_out_weights_11_q0;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_930_p0 = dense_out_weights_10_q0;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_930_p0 = dense_out_weights_9_q0;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_930_p0 = dense_out_weights_8_q0;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_930_p0 = dense_out_weights_7_q0;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_930_p0 = dense_out_weights_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_930_p0 = dense_out_weights_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_930_p0 = dense_out_weights_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_930_p0 = dense_out_weights_3_q0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_930_p0 = dense_out_weights_2_q0;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_930_p0 = dense_out_weights_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_930_p0 = dense_out_weights_0_q0;
    end else begin
        grp_fu_930_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        grp_fu_930_p1 = fully_connected_load_29_reg_1344;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        grp_fu_930_p1 = fully_connected_load_28_reg_1339;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        grp_fu_930_p1 = fully_connected_load_27_reg_1324;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        grp_fu_930_p1 = fully_connected_load_26_reg_1319;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        grp_fu_930_p1 = fully_connected_load_25_reg_1304;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        grp_fu_930_p1 = fully_connected_load_24_reg_1299;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        grp_fu_930_p1 = fully_connected_load_23_reg_1284;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        grp_fu_930_p1 = fully_connected_load_22_reg_1279;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        grp_fu_930_p1 = fully_connected_load_21_reg_1264;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        grp_fu_930_p1 = fully_connected_load_20_reg_1259;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        grp_fu_930_p1 = fully_connected_load_19_reg_1244;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        grp_fu_930_p1 = fully_connected_load_18_reg_1239;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        grp_fu_930_p1 = fully_connected_load_17_reg_1224;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        grp_fu_930_p1 = fully_connected_load_16_reg_1219;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        grp_fu_930_p1 = fully_connected_load_15_reg_1204;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        grp_fu_930_p1 = fully_connected_load_14_reg_1199;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        grp_fu_930_p1 = fully_connected_load_13_reg_1184;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        grp_fu_930_p1 = fully_connected_load_12_reg_1179;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        grp_fu_930_p1 = fully_connected_load_11_reg_1164;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        grp_fu_930_p1 = fully_connected_load_10_reg_1159;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        grp_fu_930_p1 = fully_connected_load_9_reg_1144;
    end else if ((1'b1 == ap_CS_fsm_state50)) begin
        grp_fu_930_p1 = fully_connected_load_8_reg_1139;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        grp_fu_930_p1 = fully_connected_load_7_reg_1124;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_fu_930_p1 = fully_connected_load_6_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_930_p1 = fully_connected_load_5_reg_1104;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        grp_fu_930_p1 = fully_connected_load_4_reg_1099;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_930_p1 = fully_connected_load_3_reg_1084;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        grp_fu_930_p1 = fully_connected_load_2_reg_1079;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        grp_fu_930_p1 = fully_connected_load_1_reg_1064;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        grp_fu_930_p1 = fully_connected_load_reg_1059;
    end else begin
        grp_fu_930_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            if (((icmp_ln16_fu_998_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state17))) begin
                ap_NS_fsm = ap_ST_fsm_state144;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state144 : begin
            if (((1'b1 == ap_CS_fsm_state144) & (icmp_ln31_fu_1015_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state145;
            end
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state154 : begin
            if (((1'b1 == ap_CS_fsm_state154) & (icmp_ln37_fu_1032_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state160;
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state164;
        end
        ap_ST_fsm_state164 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            ap_NS_fsm = ap_ST_fsm_state167;
        end
        ap_ST_fsm_state167 : begin
            ap_NS_fsm = ap_ST_fsm_state168;
        end
        ap_ST_fsm_state168 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign d_fu_1004_p2 = (d_0_reg_877 + 4'd1);

assign dense_out_bias_address0 = zext_ln23_reg_1357;

assign dense_out_weights_0_address0 = zext_ln23_fu_1010_p1;

assign dense_out_weights_10_address0 = zext_ln23_reg_1357;

assign dense_out_weights_11_address0 = zext_ln23_reg_1357;

assign dense_out_weights_12_address0 = zext_ln23_reg_1357;

assign dense_out_weights_13_address0 = zext_ln23_reg_1357;

assign dense_out_weights_14_address0 = zext_ln23_reg_1357;

assign dense_out_weights_15_address0 = zext_ln23_reg_1357;

assign dense_out_weights_16_address0 = zext_ln23_reg_1357;

assign dense_out_weights_17_address0 = zext_ln23_reg_1357;

assign dense_out_weights_18_address0 = zext_ln23_reg_1357;

assign dense_out_weights_19_address0 = zext_ln23_reg_1357;

assign dense_out_weights_1_address0 = zext_ln23_reg_1357;

assign dense_out_weights_20_address0 = zext_ln23_reg_1357;

assign dense_out_weights_21_address0 = zext_ln23_reg_1357;

assign dense_out_weights_22_address0 = zext_ln23_reg_1357;

assign dense_out_weights_23_address0 = zext_ln23_reg_1357;

assign dense_out_weights_24_address0 = zext_ln23_reg_1357;

assign dense_out_weights_25_address0 = zext_ln23_reg_1357;

assign dense_out_weights_26_address0 = zext_ln23_reg_1357;

assign dense_out_weights_27_address0 = zext_ln23_reg_1357;

assign dense_out_weights_28_address0 = zext_ln23_reg_1357;

assign dense_out_weights_29_address0 = zext_ln23_reg_1357;

assign dense_out_weights_2_address0 = zext_ln23_reg_1357;

assign dense_out_weights_3_address0 = zext_ln23_reg_1357;

assign dense_out_weights_4_address0 = zext_ln23_reg_1357;

assign dense_out_weights_5_address0 = zext_ln23_reg_1357;

assign dense_out_weights_6_address0 = zext_ln23_reg_1357;

assign dense_out_weights_7_address0 = zext_ln23_reg_1357;

assign dense_out_weights_8_address0 = zext_ln23_reg_1357;

assign dense_out_weights_9_address0 = zext_ln23_reg_1357;

assign i_fu_1021_p2 = (i_0_reg_900 + 4'd1);

assign icmp_ln16_fu_998_p2 = ((d_0_reg_877 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_1015_p2 = ((i_0_reg_900 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_1032_p2 = ((j_0_reg_911 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_1038_p2 = (j_0_reg_911 + 4'd1);

assign prediction_address0 = zext_ln39_reg_1723;

assign prediction_d0 = tmp_6_reg_1733;

assign zext_ln23_fu_1010_p1 = d_0_reg_877;

assign zext_ln33_fu_1027_p1 = i_0_reg_900;

assign zext_ln39_fu_1044_p1 = j_0_reg_911;

always @ (posedge ap_clk) begin
    zext_ln23_reg_1357[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_1723[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense
