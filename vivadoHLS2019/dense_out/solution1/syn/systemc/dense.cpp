// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "dense.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic dense::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic dense::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<38> dense::ap_ST_fsm_state1 = "1";
const sc_lv<38> dense::ap_ST_fsm_state2 = "10";
const sc_lv<38> dense::ap_ST_fsm_state3 = "100";
const sc_lv<38> dense::ap_ST_fsm_state4 = "1000";
const sc_lv<38> dense::ap_ST_fsm_state5 = "10000";
const sc_lv<38> dense::ap_ST_fsm_state6 = "100000";
const sc_lv<38> dense::ap_ST_fsm_state7 = "1000000";
const sc_lv<38> dense::ap_ST_fsm_state8 = "10000000";
const sc_lv<38> dense::ap_ST_fsm_state9 = "100000000";
const sc_lv<38> dense::ap_ST_fsm_state10 = "1000000000";
const sc_lv<38> dense::ap_ST_fsm_state11 = "10000000000";
const sc_lv<38> dense::ap_ST_fsm_state12 = "100000000000";
const sc_lv<38> dense::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<38> dense::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<38> dense::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<38> dense::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<38> dense::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<32> dense::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> dense::ap_const_lv32_E = "1110";
const sc_lv<32> dense::ap_const_lv32_18 = "11000";
const sc_lv<32> dense::ap_const_lv32_12 = "10010";
const sc_lv<32> dense::ap_const_lv32_1C = "11100";
const sc_lv<32> dense::ap_const_lv32_1 = "1";
const sc_lv<1> dense::ap_const_lv1_0 = "0";
const sc_lv<32> dense::ap_const_lv32_2 = "10";
const sc_lv<1> dense::ap_const_lv1_1 = "1";
const sc_lv<32> dense::ap_const_lv32_3 = "11";
const sc_lv<32> dense::ap_const_lv32_4 = "100";
const sc_lv<32> dense::ap_const_lv32_8 = "1000";
const sc_lv<32> dense::ap_const_lv32_9 = "1001";
const sc_lv<32> dense::ap_const_lv32_D = "1101";
const sc_lv<32> dense::ap_const_lv32_16 = "10110";
const sc_lv<32> dense::ap_const_lv32_17 = "10111";
const sc_lv<32> dense::ap_const_lv32_24 = "100100";
const sc_lv<4> dense::ap_const_lv4_0 = "0000";
const sc_lv<32> dense::ap_const_lv32_C = "1100";
const sc_lv<5> dense::ap_const_lv5_0 = "00000";
const sc_lv<32> dense::ap_const_lv32_25 = "100101";
const sc_lv<32> dense::ap_const_lv32_5 = "101";
const sc_lv<32> dense::ap_const_lv32_13 = "10011";
const sc_lv<32> dense::ap_const_lv32_1D = "11101";
const sc_lv<4> dense::ap_const_lv4_A = "1010";
const sc_lv<4> dense::ap_const_lv4_1 = "1";
const sc_lv<5> dense::ap_const_lv5_1E = "11110";
const sc_lv<5> dense::ap_const_lv5_1 = "1";
const sc_lv<3> dense::ap_const_lv3_0 = "000";
const bool dense::ap_const_boolean_1 = true;

dense::dense(sc_module_name name) : sc_module(name), mVcdFile(0) {
    dense_out_weights_U = new dense_dense_out_wbkb("dense_out_weights_U");
    dense_out_weights_U->clk(ap_clk);
    dense_out_weights_U->reset(ap_rst);
    dense_out_weights_U->address0(dense_out_weights_address0);
    dense_out_weights_U->ce0(dense_out_weights_ce0);
    dense_out_weights_U->q0(dense_out_weights_q0);
    dense_out_bias_U = new dense_dense_out_bcud("dense_out_bias_U");
    dense_out_bias_U->clk(ap_clk);
    dense_out_bias_U->reset(ap_rst);
    dense_out_bias_U->address0(dense_out_bias_address0);
    dense_out_bias_U->ce0(dense_out_bias_ce0);
    dense_out_bias_U->q0(dense_out_bias_q0);
    dense_array_U = new dense_dense_array("dense_array_U");
    dense_array_U->clk(ap_clk);
    dense_array_U->reset(ap_rst);
    dense_array_U->address0(dense_array_address0);
    dense_array_U->ce0(dense_array_ce0);
    dense_array_U->we0(dense_array_we0);
    dense_array_U->d0(grp_fu_212_p2);
    dense_array_U->q0(dense_array_q0);
    dense_fadd_32ns_3dEe_U1 = new dense_fadd_32ns_3dEe<1,4,32,32,32>("dense_fadd_32ns_3dEe_U1");
    dense_fadd_32ns_3dEe_U1->clk(ap_clk);
    dense_fadd_32ns_3dEe_U1->reset(ap_rst);
    dense_fadd_32ns_3dEe_U1->din0(grp_fu_212_p0);
    dense_fadd_32ns_3dEe_U1->din1(grp_fu_212_p1);
    dense_fadd_32ns_3dEe_U1->ce(ap_var_for_const0);
    dense_fadd_32ns_3dEe_U1->dout(grp_fu_212_p2);
    dense_fmul_32ns_3eOg_U2 = new dense_fmul_32ns_3eOg<1,2,32,32,32>("dense_fmul_32ns_3eOg_U2");
    dense_fmul_32ns_3eOg_U2->clk(ap_clk);
    dense_fmul_32ns_3eOg_U2->reset(ap_rst);
    dense_fmul_32ns_3eOg_U2->din0(dense_out_weights_q0);
    dense_fmul_32ns_3eOg_U2->din1(fully_connected_q0);
    dense_fmul_32ns_3eOg_U2->ce(ap_var_for_const0);
    dense_fmul_32ns_3eOg_U2->dout(grp_fu_220_p2);
    dense_fdiv_32ns_3fYi_U3 = new dense_fdiv_32ns_3fYi<1,8,32,32,32>("dense_fdiv_32ns_3fYi_U3");
    dense_fdiv_32ns_3fYi_U3->clk(ap_clk);
    dense_fdiv_32ns_3fYi_U3->reset(ap_rst);
    dense_fdiv_32ns_3fYi_U3->din0(reg_242);
    dense_fdiv_32ns_3fYi_U3->din1(sum_0_reg_178);
    dense_fdiv_32ns_3fYi_U3->ce(ap_var_for_const0);
    dense_fdiv_32ns_3fYi_U3->dout(grp_fu_226_p2);
    dense_fexp_32ns_3g8j_U4 = new dense_fexp_32ns_3g8j<1,5,32,32,32>("dense_fexp_32ns_3g8j_U4");
    dense_fexp_32ns_3g8j_U4->clk(ap_clk);
    dense_fexp_32ns_3g8j_U4->reset(ap_rst);
    dense_fexp_32ns_3g8j_U4->din0(ap_var_for_const1);
    dense_fexp_32ns_3g8j_U4->din1(dense_array_q0);
    dense_fexp_32ns_3g8j_U4->ce(ap_var_for_const0);
    dense_fexp_32ns_3g8j_U4->dout(grp_fu_231_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln23_1_fu_315_p2);
    sensitive << ( zext_ln21_reg_373 );
    sensitive << ( add_ln23_fu_309_p2 );

    SC_METHOD(thread_add_ln23_fu_309_p2);
    sensitive << ( zext_ln23_3_fu_305_p1 );
    sensitive << ( zext_ln23_2_fu_293_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln37_fu_342_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln37_fu_342_p2 );

    SC_METHOD(thread_d_fu_254_p2);
    sensitive << ( d_0_reg_144 );

    SC_METHOD(thread_dense_array_address0);
    sensitive << ( zext_ln23_reg_367 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( zext_ln39_fu_354_p1 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( zext_ln33_fu_337_p1 );

    SC_METHOD(thread_dense_array_ce0);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_dense_array_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_dense_out_bias_address0);
    sensitive << ( zext_ln23_reg_367 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_out_bias_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_dense_out_weights_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln23_4_fu_320_p1 );

    SC_METHOD(thread_dense_out_weights_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_f_fu_274_p2);
    sensitive << ( f_0_reg_155 );

    SC_METHOD(thread_fully_connected_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( zext_ln23_1_fu_280_p1 );

    SC_METHOD(thread_fully_connected_ce0);
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_grp_fu_212_p0);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( w_sum_0_reg_166 );
    sensitive << ( sum_0_reg_178 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_212_p1);
    sensitive << ( dense_out_bias_q0 );
    sensitive << ( reg_242 );
    sensitive << ( tmp_3_reg_411 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_i_fu_331_p2);
    sensitive << ( i_0_reg_190 );

    SC_METHOD(thread_icmp_ln16_fu_248_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( d_0_reg_144 );

    SC_METHOD(thread_icmp_ln21_fu_268_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( f_0_reg_155 );

    SC_METHOD(thread_icmp_ln31_fu_325_p2);
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( i_0_reg_190 );

    SC_METHOD(thread_icmp_ln37_fu_342_p2);
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( j_0_reg_201 );

    SC_METHOD(thread_j_fu_348_p2);
    sensitive << ( j_0_reg_201 );

    SC_METHOD(thread_prediction_address0);
    sensitive << ( zext_ln39_reg_452 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_prediction_ce0);
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_prediction_d0);
    sensitive << ( tmp_6_reg_462 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_prediction_we0);
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_tmp_4_fu_285_p3);
    sensitive << ( f_0_reg_155 );

    SC_METHOD(thread_tmp_7_fu_297_p3);
    sensitive << ( f_0_reg_155 );

    SC_METHOD(thread_zext_ln21_fu_264_p1);
    sensitive << ( d_0_reg_144 );

    SC_METHOD(thread_zext_ln23_1_fu_280_p1);
    sensitive << ( f_0_reg_155 );

    SC_METHOD(thread_zext_ln23_2_fu_293_p1);
    sensitive << ( tmp_4_fu_285_p3 );

    SC_METHOD(thread_zext_ln23_3_fu_305_p1);
    sensitive << ( tmp_7_fu_297_p3 );

    SC_METHOD(thread_zext_ln23_4_fu_320_p1);
    sensitive << ( add_ln23_1_fu_315_p2 );

    SC_METHOD(thread_zext_ln23_fu_260_p1);
    sensitive << ( d_0_reg_144 );

    SC_METHOD(thread_zext_ln33_fu_337_p1);
    sensitive << ( i_0_reg_190 );

    SC_METHOD(thread_zext_ln39_fu_354_p1);
    sensitive << ( j_0_reg_201 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln16_fu_248_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln21_fu_268_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( icmp_ln31_fu_325_p2 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( icmp_ln37_fu_342_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    SC_THREAD(thread_ap_var_for_const1);

    ap_CS_fsm = "00000000000000000000000000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "dense_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, fully_connected_address0, "(port)fully_connected_address0");
    sc_trace(mVcdFile, fully_connected_ce0, "(port)fully_connected_ce0");
    sc_trace(mVcdFile, fully_connected_q0, "(port)fully_connected_q0");
    sc_trace(mVcdFile, prediction_address0, "(port)prediction_address0");
    sc_trace(mVcdFile, prediction_ce0, "(port)prediction_ce0");
    sc_trace(mVcdFile, prediction_we0, "(port)prediction_we0");
    sc_trace(mVcdFile, prediction_d0, "(port)prediction_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dense_out_weights_address0, "dense_out_weights_address0");
    sc_trace(mVcdFile, dense_out_weights_ce0, "dense_out_weights_ce0");
    sc_trace(mVcdFile, dense_out_weights_q0, "dense_out_weights_q0");
    sc_trace(mVcdFile, dense_out_bias_address0, "dense_out_bias_address0");
    sc_trace(mVcdFile, dense_out_bias_ce0, "dense_out_bias_ce0");
    sc_trace(mVcdFile, dense_out_bias_q0, "dense_out_bias_q0");
    sc_trace(mVcdFile, dense_array_q0, "dense_array_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, grp_fu_231_p2, "grp_fu_231_p2");
    sc_trace(mVcdFile, reg_242, "reg_242");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, d_fu_254_p2, "d_fu_254_p2");
    sc_trace(mVcdFile, d_reg_362, "d_reg_362");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, zext_ln23_fu_260_p1, "zext_ln23_fu_260_p1");
    sc_trace(mVcdFile, zext_ln23_reg_367, "zext_ln23_reg_367");
    sc_trace(mVcdFile, icmp_ln16_fu_248_p2, "icmp_ln16_fu_248_p2");
    sc_trace(mVcdFile, zext_ln21_fu_264_p1, "zext_ln21_fu_264_p1");
    sc_trace(mVcdFile, zext_ln21_reg_373, "zext_ln21_reg_373");
    sc_trace(mVcdFile, f_fu_274_p2, "f_fu_274_p2");
    sc_trace(mVcdFile, f_reg_381, "f_reg_381");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, icmp_ln21_fu_268_p2, "icmp_ln21_fu_268_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_220_p2, "grp_fu_220_p2");
    sc_trace(mVcdFile, tmp_3_reg_411, "tmp_3_reg_411");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, grp_fu_212_p2, "grp_fu_212_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, i_fu_331_p2, "i_fu_331_p2");
    sc_trace(mVcdFile, i_reg_429, "i_reg_429");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, icmp_ln31_fu_325_p2, "icmp_ln31_fu_325_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, j_fu_348_p2, "j_fu_348_p2");
    sc_trace(mVcdFile, j_reg_447, "j_reg_447");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, zext_ln39_fu_354_p1, "zext_ln39_fu_354_p1");
    sc_trace(mVcdFile, zext_ln39_reg_452, "zext_ln39_reg_452");
    sc_trace(mVcdFile, icmp_ln37_fu_342_p2, "icmp_ln37_fu_342_p2");
    sc_trace(mVcdFile, grp_fu_226_p2, "grp_fu_226_p2");
    sc_trace(mVcdFile, tmp_6_reg_462, "tmp_6_reg_462");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, dense_array_address0, "dense_array_address0");
    sc_trace(mVcdFile, dense_array_ce0, "dense_array_ce0");
    sc_trace(mVcdFile, dense_array_we0, "dense_array_we0");
    sc_trace(mVcdFile, d_0_reg_144, "d_0_reg_144");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, f_0_reg_155, "f_0_reg_155");
    sc_trace(mVcdFile, w_sum_0_reg_166, "w_sum_0_reg_166");
    sc_trace(mVcdFile, sum_0_reg_178, "sum_0_reg_178");
    sc_trace(mVcdFile, i_0_reg_190, "i_0_reg_190");
    sc_trace(mVcdFile, j_0_reg_201, "j_0_reg_201");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, zext_ln23_4_fu_320_p1, "zext_ln23_4_fu_320_p1");
    sc_trace(mVcdFile, zext_ln23_1_fu_280_p1, "zext_ln23_1_fu_280_p1");
    sc_trace(mVcdFile, zext_ln33_fu_337_p1, "zext_ln33_fu_337_p1");
    sc_trace(mVcdFile, grp_fu_212_p0, "grp_fu_212_p0");
    sc_trace(mVcdFile, grp_fu_212_p1, "grp_fu_212_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, tmp_4_fu_285_p3, "tmp_4_fu_285_p3");
    sc_trace(mVcdFile, tmp_7_fu_297_p3, "tmp_7_fu_297_p3");
    sc_trace(mVcdFile, zext_ln23_3_fu_305_p1, "zext_ln23_3_fu_305_p1");
    sc_trace(mVcdFile, zext_ln23_2_fu_293_p1, "zext_ln23_2_fu_293_p1");
    sc_trace(mVcdFile, add_ln23_fu_309_p2, "add_ln23_fu_309_p2");
    sc_trace(mVcdFile, add_ln23_1_fu_315_p2, "add_ln23_1_fu_315_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("dense.hdltvin.dat");
    mHdltvoutHandle.open("dense.hdltvout.dat");
}

dense::~dense() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete dense_out_weights_U;
    delete dense_out_bias_U;
    delete dense_array_U;
    delete dense_fadd_32ns_3dEe_U1;
    delete dense_fmul_32ns_3eOg_U2;
    delete dense_fdiv_32ns_3fYi_U3;
    delete dense_fexp_32ns_3g8j_U4;
}

void dense::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void dense::thread_ap_var_for_const1() {
    ap_var_for_const1 = ap_const_lv32_0;
}

void dense::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        d_0_reg_144 = d_reg_362.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        d_0_reg_144 = ap_const_lv4_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        f_0_reg_155 = f_reg_381.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_248_p2.read(), ap_const_lv1_0))) {
        f_0_reg_155 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_248_p2.read(), ap_const_lv1_1))) {
        i_0_reg_190 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        i_0_reg_190 = i_reg_429.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_325_p2.read()))) {
        j_0_reg_201 = ap_const_lv4_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        j_0_reg_201 = j_reg_447.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln16_fu_248_p2.read(), ap_const_lv1_1))) {
        sum_0_reg_178 = ap_const_lv32_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        sum_0_reg_178 = grp_fu_212_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        w_sum_0_reg_166 = grp_fu_212_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln16_fu_248_p2.read(), ap_const_lv1_0))) {
        w_sum_0_reg_166 = ap_const_lv32_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        d_reg_362 = d_fu_254_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        f_reg_381 = f_fu_274_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        i_reg_429 = i_fu_331_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        j_reg_447 = j_fu_348_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        reg_242 = grp_fu_231_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        tmp_3_reg_411 = grp_fu_220_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read())) {
        tmp_6_reg_462 = grp_fu_226_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_248_p2.read(), ap_const_lv1_0))) {
        zext_ln21_reg_373 = zext_ln21_fu_264_p1.read();
        zext_ln23_reg_367 = zext_ln23_fu_260_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln37_fu_342_p2.read()))) {
        zext_ln39_reg_452 = zext_ln39_fu_354_p1.read();
    }
}

void dense::thread_add_ln23_1_fu_315_p2() {
    add_ln23_1_fu_315_p2 = (!add_ln23_fu_309_p2.read().is_01() || !zext_ln21_reg_373.read().is_01())? sc_lv<9>(): (sc_biguint<9>(add_ln23_fu_309_p2.read()) + sc_biguint<9>(zext_ln21_reg_373.read()));
}

void dense::thread_add_ln23_fu_309_p2() {
    add_ln23_fu_309_p2 = (!zext_ln23_3_fu_305_p1.read().is_01() || !zext_ln23_2_fu_293_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln23_3_fu_305_p1.read()) + sc_biguint<9>(zext_ln23_2_fu_293_p1.read()));
}

void dense::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void dense::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void dense::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void dense::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void dense::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void dense::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void dense::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void dense::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void dense::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void dense::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void dense::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void dense::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void dense::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void dense::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void dense::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void dense::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void dense::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void dense::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void dense::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void dense::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void dense::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln37_fu_342_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void dense::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void dense::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln37_fu_342_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void dense::thread_d_fu_254_p2() {
    d_fu_254_p2 = (!d_0_reg_144.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(d_0_reg_144.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dense::thread_dense_array_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read())) {
        dense_array_address0 =  (sc_lv<4>) (zext_ln39_fu_354_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        dense_array_address0 =  (sc_lv<4>) (zext_ln33_fu_337_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dense_array_address0 =  (sc_lv<4>) (zext_ln23_reg_367.read());
    } else {
        dense_array_address0 = "XXXX";
    }
}

void dense::thread_dense_array_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        dense_array_ce0 = ap_const_logic_1;
    } else {
        dense_array_ce0 = ap_const_logic_0;
    }
}

void dense::thread_dense_array_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        dense_array_we0 = ap_const_logic_1;
    } else {
        dense_array_we0 = ap_const_logic_0;
    }
}

void dense::thread_dense_out_bias_address0() {
    dense_out_bias_address0 =  (sc_lv<4>) (zext_ln23_reg_367.read());
}

void dense::thread_dense_out_bias_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_out_bias_ce0 = ap_const_logic_1;
    } else {
        dense_out_bias_ce0 = ap_const_logic_0;
    }
}

void dense::thread_dense_out_weights_address0() {
    dense_out_weights_address0 =  (sc_lv<9>) (zext_ln23_4_fu_320_p1.read());
}

void dense::thread_dense_out_weights_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        dense_out_weights_ce0 = ap_const_logic_1;
    } else {
        dense_out_weights_ce0 = ap_const_logic_0;
    }
}

void dense::thread_f_fu_274_p2() {
    f_fu_274_p2 = (!f_0_reg_155.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(f_0_reg_155.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void dense::thread_fully_connected_address0() {
    fully_connected_address0 =  (sc_lv<5>) (zext_ln23_1_fu_280_p1.read());
}

void dense::thread_fully_connected_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        fully_connected_ce0 = ap_const_logic_1;
    } else {
        fully_connected_ce0 = ap_const_logic_0;
    }
}

void dense::thread_grp_fu_212_p0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_212_p0 = sum_0_reg_178.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()))) {
        grp_fu_212_p0 = w_sum_0_reg_166.read();
    } else {
        grp_fu_212_p0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dense::thread_grp_fu_212_p1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        grp_fu_212_p1 = reg_242.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        grp_fu_212_p1 = dense_out_bias_q0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        grp_fu_212_p1 = tmp_3_reg_411.read();
    } else {
        grp_fu_212_p1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void dense::thread_i_fu_331_p2() {
    i_fu_331_p2 = (!i_0_reg_190.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_0_reg_190.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dense::thread_icmp_ln16_fu_248_p2() {
    icmp_ln16_fu_248_p2 = (!d_0_reg_144.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(d_0_reg_144.read() == ap_const_lv4_A);
}

void dense::thread_icmp_ln21_fu_268_p2() {
    icmp_ln21_fu_268_p2 = (!f_0_reg_155.read().is_01() || !ap_const_lv5_1E.is_01())? sc_lv<1>(): sc_lv<1>(f_0_reg_155.read() == ap_const_lv5_1E);
}

void dense::thread_icmp_ln31_fu_325_p2() {
    icmp_ln31_fu_325_p2 = (!i_0_reg_190.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_190.read() == ap_const_lv4_A);
}

void dense::thread_icmp_ln37_fu_342_p2() {
    icmp_ln37_fu_342_p2 = (!j_0_reg_201.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_201.read() == ap_const_lv4_A);
}

void dense::thread_j_fu_348_p2() {
    j_fu_348_p2 = (!j_0_reg_201.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(j_0_reg_201.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void dense::thread_prediction_address0() {
    prediction_address0 =  (sc_lv<4>) (zext_ln39_reg_452.read());
}

void dense::thread_prediction_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        prediction_ce0 = ap_const_logic_1;
    } else {
        prediction_ce0 = ap_const_logic_0;
    }
}

void dense::thread_prediction_d0() {
    prediction_d0 = tmp_6_reg_462.read();
}

void dense::thread_prediction_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        prediction_we0 = ap_const_logic_1;
    } else {
        prediction_we0 = ap_const_logic_0;
    }
}

void dense::thread_tmp_4_fu_285_p3() {
    tmp_4_fu_285_p3 = esl_concat<5,3>(f_0_reg_155.read(), ap_const_lv3_0);
}

void dense::thread_tmp_7_fu_297_p3() {
    tmp_7_fu_297_p3 = esl_concat<5,1>(f_0_reg_155.read(), ap_const_lv1_0);
}

void dense::thread_zext_ln21_fu_264_p1() {
    zext_ln21_fu_264_p1 = esl_zext<9,4>(d_0_reg_144.read());
}

void dense::thread_zext_ln23_1_fu_280_p1() {
    zext_ln23_1_fu_280_p1 = esl_zext<64,5>(f_0_reg_155.read());
}

void dense::thread_zext_ln23_2_fu_293_p1() {
    zext_ln23_2_fu_293_p1 = esl_zext<9,8>(tmp_4_fu_285_p3.read());
}

void dense::thread_zext_ln23_3_fu_305_p1() {
    zext_ln23_3_fu_305_p1 = esl_zext<9,6>(tmp_7_fu_297_p3.read());
}

void dense::thread_zext_ln23_4_fu_320_p1() {
    zext_ln23_4_fu_320_p1 = esl_zext<64,9>(add_ln23_1_fu_315_p2.read());
}

void dense::thread_zext_ln23_fu_260_p1() {
    zext_ln23_fu_260_p1 = esl_zext<64,4>(d_0_reg_144.read());
}

void dense::thread_zext_ln33_fu_337_p1() {
    zext_ln33_fu_337_p1 = esl_zext<64,4>(i_0_reg_190.read());
}

void dense::thread_zext_ln39_fu_354_p1() {
    zext_ln39_fu_354_p1 = esl_zext<64,4>(j_0_reg_201.read());
}

void dense::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln16_fu_248_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln21_fu_268_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln31_fu_325_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln37_fu_342_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state25;
            }
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<38>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void dense::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fully_connected_address0\" :  \"" << fully_connected_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"fully_connected_ce0\" :  \"" << fully_connected_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"fully_connected_q0\" :  \"" << fully_connected_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prediction_address0\" :  \"" << prediction_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prediction_ce0\" :  \"" << prediction_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prediction_we0\" :  \"" << prediction_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"prediction_d0\" :  \"" << prediction_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

