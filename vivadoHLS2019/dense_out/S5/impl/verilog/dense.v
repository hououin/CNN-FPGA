// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dense,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=21.764000,HLS_SYN_LAT=981,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=12,HLS_SYN_FF=1639,HLS_SYN_LUT=3223,HLS_VERSION=2019_1}" *)

module dense (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fully_connected_address0,
        fully_connected_ce0,
        fully_connected_q0,
        prediction_address0,
        prediction_ce0,
        prediction_we0,
        prediction_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_pp0_stage0 = 12'd2;
parameter    ap_ST_fsm_pp0_stage1 = 12'd4;
parameter    ap_ST_fsm_pp0_stage2 = 12'd8;
parameter    ap_ST_fsm_state13 = 12'd16;
parameter    ap_ST_fsm_pp1_stage0 = 12'd32;
parameter    ap_ST_fsm_pp1_stage1 = 12'd64;
parameter    ap_ST_fsm_pp1_stage2 = 12'd128;
parameter    ap_ST_fsm_pp1_stage3 = 12'd256;
parameter    ap_ST_fsm_state24 = 12'd512;
parameter    ap_ST_fsm_pp2_stage0 = 12'd1024;
parameter    ap_ST_fsm_state40 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] fully_connected_address0;
output   fully_connected_ce0;
input  [31:0] fully_connected_q0;
output  [3:0] prediction_address0;
output   prediction_ce0;
output   prediction_we0;
output  [31:0] prediction_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg fully_connected_ce0;
reg prediction_ce0;
reg prediction_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] dense_out_bias_address0;
reg    dense_out_bias_ce0;
wire   [31:0] dense_out_bias_q0;
wire   [8:0] dense_out_weights_address0;
reg    dense_out_weights_ce0;
wire   [31:0] dense_out_weights_q0;
reg   [8:0] indvar_flatten_reg_160;
reg   [3:0] d_0_reg_171;
reg   [4:0] f_0_reg_182;
reg   [31:0] w_sum_0_reg_193;
reg   [31:0] sum_0_reg_205;
reg   [3:0] i_0_reg_217;
reg   [3:0] j_0_reg_228;
wire   [31:0] grp_fu_239_p2;
reg   [31:0] reg_263;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state5_pp0_stage0_iter1;
wire    ap_block_state8_pp0_stage0_iter2;
wire    ap_block_state11_pp0_stage0_iter3;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln16_reg_427;
reg   [0:0] icmp_ln16_reg_427_pp0_iter1_reg;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter2;
wire    ap_block_state15_pp1_stage1_iter0;
wire    ap_block_state19_pp1_stage1_iter1;
wire    ap_block_state23_pp1_stage1_iter2;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] icmp_ln31_reg_507;
reg   [0:0] icmp_ln31_reg_507_pp1_iter2_reg;
wire   [31:0] dense_array_q0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state25_pp2_stage0_iter0;
wire    ap_block_state26_pp2_stage0_iter1;
wire    ap_block_state27_pp2_stage0_iter2;
wire    ap_block_state28_pp2_stage0_iter3;
wire    ap_block_state29_pp2_stage0_iter4;
wire    ap_block_state30_pp2_stage0_iter5;
wire    ap_block_state31_pp2_stage0_iter6;
wire    ap_block_state32_pp2_stage0_iter7;
wire    ap_block_state33_pp2_stage0_iter8;
wire    ap_block_state34_pp2_stage0_iter9;
wire    ap_block_state35_pp2_stage0_iter10;
wire    ap_block_state36_pp2_stage0_iter11;
wire    ap_block_state37_pp2_stage0_iter12;
wire    ap_block_state38_pp2_stage0_iter13;
wire    ap_block_state39_pp2_stage0_iter14;
wire    ap_block_pp2_stage0_11001;
wire    ap_CS_fsm_pp2_stage0;
reg    ap_enable_reg_pp2_iter1;
reg   [0:0] icmp_ln37_reg_521;
wire   [31:0] grp_fu_257_p2;
reg   [31:0] reg_275;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln31_reg_507_pp1_iter1_reg;
reg    ap_enable_reg_pp2_iter5;
reg   [0:0] icmp_ln37_reg_521_pp2_iter4_reg;
wire   [0:0] icmp_ln16_fu_281_p2;
wire   [8:0] add_ln16_fu_287_p2;
reg   [8:0] add_ln16_reg_431;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln21_fu_299_p2;
reg   [0:0] icmp_ln21_reg_436;
wire   [4:0] select_ln23_fu_305_p3;
reg   [4:0] select_ln23_reg_441;
wire   [3:0] select_ln23_2_fu_313_p3;
reg   [3:0] select_ln23_2_reg_446;
reg   [3:0] select_ln23_2_reg_446_pp0_iter1_reg;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state3_pp0_stage1_iter0;
wire    ap_block_state6_pp0_stage1_iter1;
wire    ap_block_state9_pp0_stage1_iter2;
wire    ap_block_state12_pp0_stage1_iter3;
wire    ap_block_pp0_stage1_11001;
wire   [31:0] grp_fu_246_p2;
reg   [31:0] tmp_3_reg_472;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state4_pp0_stage2_iter0;
wire    ap_block_state7_pp0_stage2_iter1;
wire    ap_block_state10_pp0_stage2_iter2;
wire    ap_block_pp0_stage2_11001;
wire   [4:0] f_fu_371_p2;
reg   [4:0] f_reg_477;
wire   [31:0] select_ln23_1_fu_376_p3;
wire   [0:0] icmp_ln21_1_fu_384_p2;
reg   [0:0] icmp_ln21_1_reg_488;
reg   [0:0] icmp_ln21_1_reg_488_pp0_iter2_reg;
reg   [0:0] icmp_ln21_1_reg_488_pp0_iter3_reg;
wire   [63:0] zext_ln23_fu_389_p1;
reg   [63:0] zext_ln23_reg_492;
reg   [63:0] zext_ln23_reg_492_pp0_iter3_reg;
wire   [0:0] icmp_ln31_fu_393_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state14_pp1_stage0_iter0;
wire    ap_block_state18_pp1_stage0_iter1;
wire    ap_block_state22_pp1_stage0_iter2;
wire    ap_block_pp1_stage0_11001;
wire   [3:0] i_fu_399_p2;
reg   [3:0] i_reg_511;
wire   [0:0] icmp_ln37_fu_410_p2;
reg   [0:0] icmp_ln37_reg_521_pp2_iter1_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter2_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter3_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter5_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter6_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter7_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter8_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter9_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter10_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter11_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter12_reg;
reg   [0:0] icmp_ln37_reg_521_pp2_iter13_reg;
wire   [3:0] j_fu_416_p2;
reg    ap_enable_reg_pp2_iter0;
wire   [63:0] zext_ln39_fu_422_p1;
reg   [63:0] zext_ln39_reg_530;
reg   [63:0] zext_ln39_reg_530_pp2_iter1_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter2_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter3_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter4_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter5_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter6_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter7_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter8_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter9_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter10_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter11_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter12_reg;
reg   [63:0] zext_ln39_reg_530_pp2_iter13_reg;
wire   [31:0] grp_fu_252_p2;
reg   [31:0] tmp_6_reg_540;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage1_subdone;
reg    ap_enable_reg_pp0_iter3;
wire    ap_CS_fsm_state13;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state14;
wire    ap_block_state17_pp1_stage3_iter0;
wire    ap_block_state21_pp1_stage3_iter1;
wire    ap_block_pp1_stage3_subdone;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage1_subdone;
wire    ap_CS_fsm_state24;
wire    ap_block_pp2_stage0_subdone;
reg    ap_condition_pp2_exit_iter0_state25;
reg    ap_enable_reg_pp2_iter2;
reg    ap_enable_reg_pp2_iter3;
reg    ap_enable_reg_pp2_iter4;
reg    ap_enable_reg_pp2_iter6;
reg    ap_enable_reg_pp2_iter7;
reg    ap_enable_reg_pp2_iter8;
reg    ap_enable_reg_pp2_iter9;
reg    ap_enable_reg_pp2_iter10;
reg    ap_enable_reg_pp2_iter11;
reg    ap_enable_reg_pp2_iter12;
reg    ap_enable_reg_pp2_iter13;
reg    ap_enable_reg_pp2_iter14;
reg   [3:0] dense_array_address0;
reg    dense_array_ce0;
reg    dense_array_we0;
reg   [8:0] ap_phi_mux_indvar_flatten_phi_fu_164_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_d_0_phi_fu_175_p4;
reg   [4:0] ap_phi_mux_f_0_phi_fu_186_p4;
reg   [31:0] ap_phi_mux_w_sum_0_phi_fu_197_p4;
reg   [3:0] ap_phi_mux_i_0_phi_fu_221_p4;
wire    ap_block_pp1_stage0;
wire   [63:0] zext_ln23_4_fu_366_p1;
wire   [63:0] zext_ln23_1_fu_325_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln33_fu_405_p1;
wire    ap_block_pp2_stage0;
reg   [31:0] grp_fu_239_p0;
reg   [31:0] grp_fu_239_p1;
wire    ap_CS_fsm_pp1_stage2;
wire    ap_block_pp1_stage2;
wire    ap_block_pp1_stage1;
wire   [3:0] d_fu_293_p2;
wire   [7:0] tmp_1_fu_330_p3;
wire   [5:0] tmp_9_fu_342_p3;
wire   [8:0] zext_ln23_3_fu_350_p1;
wire   [8:0] zext_ln23_2_fu_338_p1;
wire   [8:0] add_ln23_fu_354_p2;
wire   [8:0] zext_ln22_fu_321_p1;
wire   [8:0] add_ln23_1_fu_360_p2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_state40;
reg   [11:0] ap_NS_fsm;
wire    ap_block_state16_pp1_stage2_iter0;
wire    ap_block_state20_pp1_stage2_iter1;
wire    ap_block_pp1_stage2_subdone;
wire    ap_block_pp1_stage2_11001;
wire    ap_block_pp1_stage3_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_idle_pp2;
wire    ap_enable_pp2;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp2_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp2_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter2 = 1'b0;
#0 ap_enable_reg_pp2_iter3 = 1'b0;
#0 ap_enable_reg_pp2_iter4 = 1'b0;
#0 ap_enable_reg_pp2_iter6 = 1'b0;
#0 ap_enable_reg_pp2_iter7 = 1'b0;
#0 ap_enable_reg_pp2_iter8 = 1'b0;
#0 ap_enable_reg_pp2_iter9 = 1'b0;
#0 ap_enable_reg_pp2_iter10 = 1'b0;
#0 ap_enable_reg_pp2_iter11 = 1'b0;
#0 ap_enable_reg_pp2_iter12 = 1'b0;
#0 ap_enable_reg_pp2_iter13 = 1'b0;
#0 ap_enable_reg_pp2_iter14 = 1'b0;
end

dense_dense_out_bbkb #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_bias_address0),
    .ce0(dense_out_bias_ce0),
    .q0(dense_out_bias_q0)
);

dense_dense_out_wcud #(
    .DataWidth( 32 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dense_out_weights_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_address0),
    .ce0(dense_out_weights_ce0),
    .q0(dense_out_weights_q0)
);

dense_dense_array #(
    .DataWidth( 32 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_address0),
    .ce0(dense_array_ce0),
    .we0(dense_array_we0),
    .d0(grp_fu_239_p2),
    .q0(dense_array_q0)
);

dense_fadd_32ns_3dEe #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fadd_32ns_3dEe_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_239_p0),
    .din1(grp_fu_239_p1),
    .ce(1'b1),
    .dout(grp_fu_239_p2)
);

dense_fmul_32ns_3eOg #(
    .ID( 1 ),
    .NUM_STAGE( 2 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fmul_32ns_3eOg_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(dense_out_weights_q0),
    .din1(fully_connected_q0),
    .ce(1'b1),
    .dout(grp_fu_246_p2)
);

dense_fdiv_32ns_3fYi #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fdiv_32ns_3fYi_U3(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(reg_275),
    .din1(sum_0_reg_205),
    .ce(1'b1),
    .dout(grp_fu_252_p2)
);

dense_fexp_32ns_3g8j #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
dense_fexp_32ns_3g8j_U4(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(dense_array_q0),
    .ce(1'b1),
    .dout(grp_fu_257_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_subdone) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter3 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state14) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage1_subdone) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            ap_enable_reg_pp1_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp2_stage0_subdone) & (1'b1 == ap_condition_pp2_exit_iter0_state25) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
            ap_enable_reg_pp2_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp2_exit_iter0_state25)) begin
                ap_enable_reg_pp2_iter1 <= (1'b1 ^ ap_condition_pp2_exit_iter0_state25);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            ap_enable_reg_pp2_iter14 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp2_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp2_stage0_subdone)) begin
            ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        d_0_reg_171 <= select_ln23_2_reg_446;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_0_reg_171 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_182 <= f_reg_477;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_182 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        i_0_reg_217 <= 4'd0;
    end else if (((icmp_ln31_reg_507 == 1'd0) & (1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        i_0_reg_217 <= i_reg_511;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        indvar_flatten_reg_160 <= add_ln16_reg_431;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvar_flatten_reg_160 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state24)) begin
        j_0_reg_228 <= 4'd0;
    end else if (((icmp_ln37_fu_410_p2 == 1'd0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        j_0_reg_228 <= j_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        sum_0_reg_205 <= 32'd0;
    end else if (((icmp_ln31_reg_507_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001))) begin
        sum_0_reg_205 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        w_sum_0_reg_193 <= grp_fu_239_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        w_sum_0_reg_193 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        add_ln16_reg_431 <= add_ln16_fu_287_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        f_reg_477 <= f_fu_371_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_reg_511 <= i_fu_399_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_reg_427 <= icmp_ln16_fu_281_p2;
        icmp_ln16_reg_427_pp0_iter1_reg <= icmp_ln16_reg_427;
        icmp_ln21_1_reg_488_pp0_iter2_reg <= icmp_ln21_1_reg_488;
        icmp_ln21_1_reg_488_pp0_iter3_reg <= icmp_ln21_1_reg_488_pp0_iter2_reg;
        select_ln23_2_reg_446_pp0_iter1_reg <= select_ln23_2_reg_446;
        zext_ln23_reg_492_pp0_iter3_reg[3 : 0] <= zext_ln23_reg_492[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_1_reg_488 <= icmp_ln21_1_fu_384_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln21_reg_436 <= icmp_ln21_fu_299_p2;
        select_ln23_reg_441 <= select_ln23_fu_305_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln31_reg_507 <= icmp_ln31_fu_393_p2;
        icmp_ln31_reg_507_pp1_iter1_reg <= icmp_ln31_reg_507;
        icmp_ln31_reg_507_pp1_iter2_reg <= icmp_ln31_reg_507_pp1_iter1_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        icmp_ln37_reg_521 <= icmp_ln37_fu_410_p2;
        icmp_ln37_reg_521_pp2_iter1_reg <= icmp_ln37_reg_521;
        zext_ln39_reg_530_pp2_iter1_reg[3 : 0] <= zext_ln39_reg_530[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp2_stage0_11001)) begin
        icmp_ln37_reg_521_pp2_iter10_reg <= icmp_ln37_reg_521_pp2_iter9_reg;
        icmp_ln37_reg_521_pp2_iter11_reg <= icmp_ln37_reg_521_pp2_iter10_reg;
        icmp_ln37_reg_521_pp2_iter12_reg <= icmp_ln37_reg_521_pp2_iter11_reg;
        icmp_ln37_reg_521_pp2_iter13_reg <= icmp_ln37_reg_521_pp2_iter12_reg;
        icmp_ln37_reg_521_pp2_iter2_reg <= icmp_ln37_reg_521_pp2_iter1_reg;
        icmp_ln37_reg_521_pp2_iter3_reg <= icmp_ln37_reg_521_pp2_iter2_reg;
        icmp_ln37_reg_521_pp2_iter4_reg <= icmp_ln37_reg_521_pp2_iter3_reg;
        icmp_ln37_reg_521_pp2_iter5_reg <= icmp_ln37_reg_521_pp2_iter4_reg;
        icmp_ln37_reg_521_pp2_iter6_reg <= icmp_ln37_reg_521_pp2_iter5_reg;
        icmp_ln37_reg_521_pp2_iter7_reg <= icmp_ln37_reg_521_pp2_iter6_reg;
        icmp_ln37_reg_521_pp2_iter8_reg <= icmp_ln37_reg_521_pp2_iter7_reg;
        icmp_ln37_reg_521_pp2_iter9_reg <= icmp_ln37_reg_521_pp2_iter8_reg;
        zext_ln39_reg_530_pp2_iter10_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter9_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter11_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter10_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter12_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter11_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter13_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter12_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter2_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter1_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter3_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter2_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter4_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter3_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter5_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter4_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter6_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter5_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter7_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter6_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter8_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter7_reg[3 : 0];
        zext_ln39_reg_530_pp2_iter9_reg[3 : 0] <= zext_ln39_reg_530_pp2_iter8_reg[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln16_reg_427_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln31_reg_507_pp1_iter2_reg == 1'd0) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_263 <= grp_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((icmp_ln37_reg_521_pp2_iter4_reg == 1'd0) & (ap_enable_reg_pp2_iter5 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001)) | ((icmp_ln31_reg_507_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (1'b0 == ap_block_pp1_stage1_11001)))) begin
        reg_275 <= grp_fu_257_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_fu_281_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        select_ln23_2_reg_446 <= select_ln23_2_fu_313_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        tmp_3_reg_472 <= grp_fu_246_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_reg_521_pp2_iter12_reg == 1'd0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        tmp_6_reg_540 <= grp_fu_252_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln16_reg_427_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        zext_ln23_reg_492[3 : 0] <= zext_ln23_fu_389_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln37_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        zext_ln39_reg_530[3 : 0] <= zext_ln39_fu_422_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln16_fu_281_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln31_fu_393_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state14 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state14 = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln37_fu_410_p2 == 1'd1)) begin
        ap_condition_pp2_exit_iter0_state25 = 1'b1;
    end else begin
        ap_condition_pp2_exit_iter0_state25 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter14 == 1'b0) & (ap_enable_reg_pp2_iter13 == 1'b0) & (ap_enable_reg_pp2_iter12 == 1'b0) & (ap_enable_reg_pp2_iter11 == 1'b0) & (ap_enable_reg_pp2_iter10 == 1'b0) & (ap_enable_reg_pp2_iter9 == 1'b0) & (ap_enable_reg_pp2_iter8 == 1'b0) & (ap_enable_reg_pp2_iter7 == 1'b0) & (ap_enable_reg_pp2_iter6 == 1'b0) & (ap_enable_reg_pp2_iter4 == 1'b0) & (ap_enable_reg_pp2_iter3 == 1'b0) & (ap_enable_reg_pp2_iter2 == 1'b0) & (ap_enable_reg_pp2_iter0 == 1'b0) & (ap_enable_reg_pp2_iter5 == 1'b0) & (ap_enable_reg_pp2_iter1 == 1'b0))) begin
        ap_idle_pp2 = 1'b1;
    end else begin
        ap_idle_pp2 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_d_0_phi_fu_175_p4 = select_ln23_2_reg_446;
    end else begin
        ap_phi_mux_d_0_phi_fu_175_p4 = d_0_reg_171;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_f_0_phi_fu_186_p4 = f_reg_477;
    end else begin
        ap_phi_mux_f_0_phi_fu_186_p4 = f_0_reg_182;
    end
end

always @ (*) begin
    if (((icmp_ln31_reg_507 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        ap_phi_mux_i_0_phi_fu_221_p4 = i_reg_511;
    end else begin
        ap_phi_mux_i_0_phi_fu_221_p4 = i_0_reg_217;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_427 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_indvar_flatten_phi_fu_164_p4 = add_ln16_reg_431;
    end else begin
        ap_phi_mux_indvar_flatten_phi_fu_164_p4 = indvar_flatten_reg_160;
    end
end

always @ (*) begin
    if (((icmp_ln16_reg_427_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_phi_mux_w_sum_0_phi_fu_197_p4 = grp_fu_239_p2;
    end else begin
        ap_phi_mux_w_sum_0_phi_fu_197_p4 = w_sum_0_reg_193;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state40)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp2_stage0) & (ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0))) begin
        dense_array_address0 = zext_ln39_fu_422_p1;
    end else if (((1'b0 == ap_block_pp1_stage0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        dense_array_address0 = zext_ln33_fu_405_p1;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_array_address0 = zext_ln23_reg_492_pp0_iter3_reg;
    end else begin
        dense_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp2_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp2_stage0) & (1'b0 == ap_block_pp2_stage0_11001)) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        dense_array_ce0 = 1'b1;
    end else begin
        dense_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln21_1_reg_488_pp0_iter3_reg == 1'd1) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dense_array_we0 = 1'b1;
    end else begin
        dense_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dense_out_bias_ce0 = 1'b1;
    end else begin
        dense_out_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        dense_out_weights_ce0 = 1'b1;
    end else begin
        dense_out_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
        fully_connected_ce0 = 1'b1;
    end else begin
        fully_connected_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_239_p0 = sum_0_reg_205;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_239_p0 = reg_263;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_239_p0 = select_ln23_1_fu_376_p3;
    end else begin
        grp_fu_239_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter1 == 1'b1))) begin
        grp_fu_239_p1 = reg_275;
    end else if (((1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_239_p1 = dense_out_bias_q0;
    end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        grp_fu_239_p1 = tmp_3_reg_472;
    end else begin
        grp_fu_239_p1 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp2_iter14 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        prediction_ce0 = 1'b1;
    end else begin
        prediction_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln37_reg_521_pp2_iter13_reg == 1'd0) & (ap_enable_reg_pp2_iter14 == 1'b1) & (1'b0 == ap_block_pp2_stage0_11001))) begin
        prediction_we0 = 1'b1;
    end else begin
        prediction_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln16_fu_281_p2 == 1'd1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln16_fu_281_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((~((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else if (((ap_enable_reg_pp0_iter2 == 1'b0) & (1'b0 == ap_block_pp0_stage1_subdone) & (ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln31_fu_393_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln31_fu_393_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((~((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b0)) & (1'b0 == ap_block_pp1_stage1_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else if (((1'b0 == ap_block_pp1_stage1_subdone) & (ap_enable_reg_pp1_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1) & (ap_enable_reg_pp1_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((1'b0 == ap_block_pp1_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_pp2_stage0;
        end
        ap_ST_fsm_pp2_stage0 : begin
            if ((~((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln37_fu_410_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)) & ~((ap_enable_reg_pp2_iter13 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter14 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end else if ((((ap_enable_reg_pp2_iter13 == 1'b0) & (1'b0 == ap_block_pp2_stage0_subdone) & (ap_enable_reg_pp2_iter14 == 1'b1)) | ((1'b0 == ap_block_pp2_stage0_subdone) & (icmp_ln37_fu_410_p2 == 1'd1) & (ap_enable_reg_pp2_iter0 == 1'b1) & (ap_enable_reg_pp2_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state40;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp2_stage0;
            end
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln16_fu_287_p2 = (ap_phi_mux_indvar_flatten_phi_fu_164_p4 + 9'd1);

assign add_ln23_1_fu_360_p2 = (add_ln23_fu_354_p2 + zext_ln22_fu_321_p1);

assign add_ln23_fu_354_p2 = (zext_ln23_3_fu_350_p1 + zext_ln23_2_fu_338_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp2_stage0 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd11];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp2_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp2_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp2_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp2_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp2_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp2_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp2_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp2_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp2_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp2_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp2_stage0_iter9 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp2_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp2_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp2_stage0_iter12 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp2_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp2_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_enable_pp2 = (ap_idle_pp2 ^ 1'b1);

assign d_fu_293_p2 = (ap_phi_mux_d_0_phi_fu_175_p4 + 4'd1);

assign dense_out_bias_address0 = zext_ln23_fu_389_p1;

assign dense_out_weights_address0 = zext_ln23_4_fu_366_p1;

assign f_fu_371_p2 = (select_ln23_reg_441 + 5'd1);

assign fully_connected_address0 = zext_ln23_1_fu_325_p1;

assign i_fu_399_p2 = (ap_phi_mux_i_0_phi_fu_221_p4 + 4'd1);

assign icmp_ln16_fu_281_p2 = ((ap_phi_mux_indvar_flatten_phi_fu_164_p4 == 9'd300) ? 1'b1 : 1'b0);

assign icmp_ln21_1_fu_384_p2 = ((f_reg_477 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln21_fu_299_p2 = ((ap_phi_mux_f_0_phi_fu_186_p4 == 5'd30) ? 1'b1 : 1'b0);

assign icmp_ln31_fu_393_p2 = ((ap_phi_mux_i_0_phi_fu_221_p4 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_410_p2 = ((j_0_reg_228 == 4'd10) ? 1'b1 : 1'b0);

assign j_fu_416_p2 = (j_0_reg_228 + 4'd1);

assign prediction_address0 = zext_ln39_reg_530_pp2_iter13_reg;

assign prediction_d0 = tmp_6_reg_540;

assign select_ln23_1_fu_376_p3 = ((icmp_ln21_reg_436[0:0] === 1'b1) ? 32'd0 : ap_phi_mux_w_sum_0_phi_fu_197_p4);

assign select_ln23_2_fu_313_p3 = ((icmp_ln21_fu_299_p2[0:0] === 1'b1) ? d_fu_293_p2 : ap_phi_mux_d_0_phi_fu_175_p4);

assign select_ln23_fu_305_p3 = ((icmp_ln21_fu_299_p2[0:0] === 1'b1) ? 5'd0 : ap_phi_mux_f_0_phi_fu_186_p4);

assign tmp_1_fu_330_p3 = {{select_ln23_fu_305_p3}, {3'd0}};

assign tmp_9_fu_342_p3 = {{select_ln23_fu_305_p3}, {1'd0}};

assign zext_ln22_fu_321_p1 = select_ln23_2_fu_313_p3;

assign zext_ln23_1_fu_325_p1 = select_ln23_fu_305_p3;

assign zext_ln23_2_fu_338_p1 = tmp_1_fu_330_p3;

assign zext_ln23_3_fu_350_p1 = tmp_9_fu_342_p3;

assign zext_ln23_4_fu_366_p1 = add_ln23_1_fu_360_p2;

assign zext_ln23_fu_389_p1 = select_ln23_2_reg_446_pp0_iter1_reg;

assign zext_ln33_fu_405_p1 = ap_phi_mux_i_0_phi_fu_221_p4;

assign zext_ln39_fu_422_p1 = j_0_reg_228;

always @ (posedge ap_clk) begin
    zext_ln23_reg_492[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln23_reg_492_pp0_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter1_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter2_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter3_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter4_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter5_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter6_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter7_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter8_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter9_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter10_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter11_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter12_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln39_reg_530_pp2_iter13_reg[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense
