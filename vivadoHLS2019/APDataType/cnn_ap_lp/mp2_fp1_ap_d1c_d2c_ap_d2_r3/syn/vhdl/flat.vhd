-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_0_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_0_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_0_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_0_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_0_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_0_2_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_0_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_0_3_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_0_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_0_4_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_1_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_1_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_1_2_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_1_3_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_1_4_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_2_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_2_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_2_2_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_2_3_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_2_4_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_3_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_3_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_3_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_3_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_3_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_3_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_3_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_3_2_V_ce0 : OUT STD_LOGIC;
    max_pool_out_3_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_3_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_3_3_V_ce0 : OUT STD_LOGIC;
    max_pool_out_3_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_3_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_3_4_V_ce0 : OUT STD_LOGIC;
    max_pool_out_3_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_4_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_4_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_4_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_4_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_4_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_4_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_4_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_4_2_V_ce0 : OUT STD_LOGIC;
    max_pool_out_4_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_4_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_4_3_V_ce0 : OUT STD_LOGIC;
    max_pool_out_4_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_4_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    max_pool_out_4_4_V_ce0 : OUT STD_LOGIC;
    max_pool_out_4_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_V_ce0 : OUT STD_LOGIC;
    flat_array_V_we0 : OUT STD_LOGIC;
    flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_509_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_680 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_515_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_685 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_503_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_fu_521_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_reg_690 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_525_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_reg_695 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_fu_539_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_703 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln15_fu_545_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_reg_708 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln9_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_564_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln203_reg_713 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_fu_575_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_721 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln12_fu_569_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_1_fu_671_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_436 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_448 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_459 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_470 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_481 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_492 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_1_fu_581_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_fu_610_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_615_p27 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln203_1_fu_551_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln203_1_fu_555_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_2_fu_560_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cnn_mux_255_14_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        din9_WIDTH : INTEGER;
        din10_WIDTH : INTEGER;
        din11_WIDTH : INTEGER;
        din12_WIDTH : INTEGER;
        din13_WIDTH : INTEGER;
        din14_WIDTH : INTEGER;
        din15_WIDTH : INTEGER;
        din16_WIDTH : INTEGER;
        din17_WIDTH : INTEGER;
        din18_WIDTH : INTEGER;
        din19_WIDTH : INTEGER;
        din20_WIDTH : INTEGER;
        din21_WIDTH : INTEGER;
        din22_WIDTH : INTEGER;
        din23_WIDTH : INTEGER;
        din24_WIDTH : INTEGER;
        din25_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (13 downto 0);
        din3 : IN STD_LOGIC_VECTOR (13 downto 0);
        din4 : IN STD_LOGIC_VECTOR (13 downto 0);
        din5 : IN STD_LOGIC_VECTOR (13 downto 0);
        din6 : IN STD_LOGIC_VECTOR (13 downto 0);
        din7 : IN STD_LOGIC_VECTOR (13 downto 0);
        din8 : IN STD_LOGIC_VECTOR (13 downto 0);
        din9 : IN STD_LOGIC_VECTOR (13 downto 0);
        din10 : IN STD_LOGIC_VECTOR (13 downto 0);
        din11 : IN STD_LOGIC_VECTOR (13 downto 0);
        din12 : IN STD_LOGIC_VECTOR (13 downto 0);
        din13 : IN STD_LOGIC_VECTOR (13 downto 0);
        din14 : IN STD_LOGIC_VECTOR (13 downto 0);
        din15 : IN STD_LOGIC_VECTOR (13 downto 0);
        din16 : IN STD_LOGIC_VECTOR (13 downto 0);
        din17 : IN STD_LOGIC_VECTOR (13 downto 0);
        din18 : IN STD_LOGIC_VECTOR (13 downto 0);
        din19 : IN STD_LOGIC_VECTOR (13 downto 0);
        din20 : IN STD_LOGIC_VECTOR (13 downto 0);
        din21 : IN STD_LOGIC_VECTOR (13 downto 0);
        din22 : IN STD_LOGIC_VECTOR (13 downto 0);
        din23 : IN STD_LOGIC_VECTOR (13 downto 0);
        din24 : IN STD_LOGIC_VECTOR (13 downto 0);
        din25 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    cnn_mux_255_14_1_1_U263 : component cnn_mux_255_14_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 14,
        din2_WIDTH => 14,
        din3_WIDTH => 14,
        din4_WIDTH => 14,
        din5_WIDTH => 14,
        din6_WIDTH => 14,
        din7_WIDTH => 14,
        din8_WIDTH => 14,
        din9_WIDTH => 14,
        din10_WIDTH => 14,
        din11_WIDTH => 14,
        din12_WIDTH => 14,
        din13_WIDTH => 14,
        din14_WIDTH => 14,
        din15_WIDTH => 14,
        din16_WIDTH => 14,
        din17_WIDTH => 14,
        din18_WIDTH => 14,
        din19_WIDTH => 14,
        din20_WIDTH => 14,
        din21_WIDTH => 14,
        din22_WIDTH => 14,
        din23_WIDTH => 14,
        din24_WIDTH => 14,
        din25_WIDTH => 5,
        dout_WIDTH => 14)
    port map (
        din0 => max_pool_out_0_0_V_q0,
        din1 => max_pool_out_0_1_V_q0,
        din2 => max_pool_out_0_2_V_q0,
        din3 => max_pool_out_0_3_V_q0,
        din4 => max_pool_out_0_4_V_q0,
        din5 => max_pool_out_1_0_V_q0,
        din6 => max_pool_out_1_1_V_q0,
        din7 => max_pool_out_1_2_V_q0,
        din8 => max_pool_out_1_3_V_q0,
        din9 => max_pool_out_1_4_V_q0,
        din10 => max_pool_out_2_0_V_q0,
        din11 => max_pool_out_2_1_V_q0,
        din12 => max_pool_out_2_2_V_q0,
        din13 => max_pool_out_2_3_V_q0,
        din14 => max_pool_out_2_4_V_q0,
        din15 => max_pool_out_3_0_V_q0,
        din16 => max_pool_out_3_1_V_q0,
        din17 => max_pool_out_3_2_V_q0,
        din18 => max_pool_out_3_3_V_q0,
        din19 => max_pool_out_3_4_V_q0,
        din20 => max_pool_out_4_0_V_q0,
        din21 => max_pool_out_4_1_V_q0,
        din22 => max_pool_out_4_2_V_q0,
        din23 => max_pool_out_4_3_V_q0,
        din24 => max_pool_out_4_4_V_q0,
        din25 => add_ln203_reg_713,
        dout => tmp_1_fu_615_p27);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_470 <= c_reg_703;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_503_p2 = ap_const_lv1_0))) then 
                c_0_reg_470 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_492_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_492 <= f_reg_721;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_533_p2 = ap_const_lv1_0))) then 
                f_0_reg_492 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_436_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_436 <= i_reg_685;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_436 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_459 <= add_ln15_reg_708;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_503_p2 = ap_const_lv1_0))) then 
                i_1_reg_459 <= i_0_reg_436;
            end if; 
        end if;
    end process;

    i_2_reg_481_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_481 <= add_ln15_1_fu_671_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_533_p2 = ap_const_lv1_0))) then 
                i_2_reg_481 <= i_1_reg_459;
            end if; 
        end if;
    end process;

    r_0_reg_448_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_448 <= r_reg_680;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_448 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_533_p2 = ap_const_lv1_0))) then
                add_ln15_reg_708 <= add_ln15_fu_545_p2;
                add_ln203_reg_713 <= add_ln203_fu_564_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_703 <= c_fu_539_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_721 <= f_fu_575_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_503_p2 = ap_const_lv1_0))) then
                i_reg_685 <= i_fu_515_p2;
                    shl_ln_reg_695(4 downto 2) <= shl_ln_fu_525_p3(4 downto 2);
                    zext_ln203_reg_690(2 downto 0) <= zext_ln203_fu_521_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_680 <= r_fu_509_p2;
            end if;
        end if;
    end process;
    zext_ln203_reg_690(3) <= '0';
    shl_ln_reg_695(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_503_p2, ap_CS_fsm_state3, icmp_ln9_fu_533_p2, ap_CS_fsm_state4, icmp_ln12_fu_569_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_503_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln9_fu_533_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln12_fu_569_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln15_1_fu_671_p2 <= std_logic_vector(unsigned(i_2_reg_481) + unsigned(ap_const_lv9_1));
    add_ln15_fu_545_p2 <= std_logic_vector(unsigned(i_1_reg_459) + unsigned(ap_const_lv9_10));
    add_ln203_1_fu_555_p2 <= std_logic_vector(unsigned(zext_ln203_reg_690) + unsigned(zext_ln203_1_fu_551_p1));
    add_ln203_fu_564_p2 <= std_logic_vector(unsigned(zext_ln203_2_fu_560_p1) + unsigned(shl_ln_reg_695));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_503_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_503_p2 = ap_const_lv1_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_503_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_503_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_539_p2 <= std_logic_vector(unsigned(c_0_reg_470) + unsigned(ap_const_lv3_1));
    f_fu_575_p2 <= std_logic_vector(unsigned(f_0_reg_492) + unsigned(ap_const_lv5_1));
    flat_array_V_address0 <= zext_ln14_fu_610_p1(9 - 1 downto 0);

    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_V_d0 <= tmp_1_fu_615_p27;

    flat_array_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_V_we0 <= ap_const_logic_1;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_515_p2 <= std_logic_vector(unsigned(i_0_reg_436) + unsigned(ap_const_lv9_50));
    icmp_ln12_fu_569_p2 <= "1" when (f_0_reg_492 = ap_const_lv5_10) else "0";
    icmp_ln6_fu_503_p2 <= "1" when (r_0_reg_448 = ap_const_lv3_5) else "0";
    icmp_ln9_fu_533_p2 <= "1" when (c_0_reg_470 = ap_const_lv3_5) else "0";
    max_pool_out_0_0_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_0_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_0_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_1_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_0_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_0_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_2_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_0_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_0_2_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_3_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_0_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_0_3_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_0_4_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_0_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_0_4_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_0_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_1_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_1_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_1_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_1_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_1_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_2_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_1_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_1_2_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_3_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_1_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_1_3_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_4_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_1_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_1_4_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_0_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_2_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_2_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_1_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_2_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_2_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_2_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_2_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_2_2_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_3_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_2_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_2_3_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_4_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_2_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_2_4_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_0_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_3_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_3_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_1_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_3_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_3_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_2_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_3_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_3_2_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_3_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_3_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_3_3_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_3_4_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_3_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_3_4_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_3_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_0_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_4_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_4_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_1_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_4_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_4_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_2_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_4_2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_4_2_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_3_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_4_3_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_4_3_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_4_4_V_address0 <= zext_ln14_1_fu_581_p1(4 - 1 downto 0);

    max_pool_out_4_4_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_4_4_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_4_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_509_p2 <= std_logic_vector(unsigned(r_0_reg_448) + unsigned(ap_const_lv3_1));
    shl_ln_fu_525_p3 <= (r_0_reg_448 & ap_const_lv2_0);
    zext_ln14_1_fu_581_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_492),64));
    zext_ln14_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_481),64));
    zext_ln203_1_fu_551_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_470),4));
    zext_ln203_2_fu_560_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_1_fu_555_p2),5));
    zext_ln203_fu_521_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_448),4));
end behav;
