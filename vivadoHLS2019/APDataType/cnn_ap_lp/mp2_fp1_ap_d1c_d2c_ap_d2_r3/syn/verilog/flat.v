// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_0_0_V_address0,
        max_pool_out_0_0_V_ce0,
        max_pool_out_0_0_V_q0,
        max_pool_out_0_1_V_address0,
        max_pool_out_0_1_V_ce0,
        max_pool_out_0_1_V_q0,
        max_pool_out_0_2_V_address0,
        max_pool_out_0_2_V_ce0,
        max_pool_out_0_2_V_q0,
        max_pool_out_0_3_V_address0,
        max_pool_out_0_3_V_ce0,
        max_pool_out_0_3_V_q0,
        max_pool_out_0_4_V_address0,
        max_pool_out_0_4_V_ce0,
        max_pool_out_0_4_V_q0,
        max_pool_out_1_0_V_address0,
        max_pool_out_1_0_V_ce0,
        max_pool_out_1_0_V_q0,
        max_pool_out_1_1_V_address0,
        max_pool_out_1_1_V_ce0,
        max_pool_out_1_1_V_q0,
        max_pool_out_1_2_V_address0,
        max_pool_out_1_2_V_ce0,
        max_pool_out_1_2_V_q0,
        max_pool_out_1_3_V_address0,
        max_pool_out_1_3_V_ce0,
        max_pool_out_1_3_V_q0,
        max_pool_out_1_4_V_address0,
        max_pool_out_1_4_V_ce0,
        max_pool_out_1_4_V_q0,
        max_pool_out_2_0_V_address0,
        max_pool_out_2_0_V_ce0,
        max_pool_out_2_0_V_q0,
        max_pool_out_2_1_V_address0,
        max_pool_out_2_1_V_ce0,
        max_pool_out_2_1_V_q0,
        max_pool_out_2_2_V_address0,
        max_pool_out_2_2_V_ce0,
        max_pool_out_2_2_V_q0,
        max_pool_out_2_3_V_address0,
        max_pool_out_2_3_V_ce0,
        max_pool_out_2_3_V_q0,
        max_pool_out_2_4_V_address0,
        max_pool_out_2_4_V_ce0,
        max_pool_out_2_4_V_q0,
        max_pool_out_3_0_V_address0,
        max_pool_out_3_0_V_ce0,
        max_pool_out_3_0_V_q0,
        max_pool_out_3_1_V_address0,
        max_pool_out_3_1_V_ce0,
        max_pool_out_3_1_V_q0,
        max_pool_out_3_2_V_address0,
        max_pool_out_3_2_V_ce0,
        max_pool_out_3_2_V_q0,
        max_pool_out_3_3_V_address0,
        max_pool_out_3_3_V_ce0,
        max_pool_out_3_3_V_q0,
        max_pool_out_3_4_V_address0,
        max_pool_out_3_4_V_ce0,
        max_pool_out_3_4_V_q0,
        max_pool_out_4_0_V_address0,
        max_pool_out_4_0_V_ce0,
        max_pool_out_4_0_V_q0,
        max_pool_out_4_1_V_address0,
        max_pool_out_4_1_V_ce0,
        max_pool_out_4_1_V_q0,
        max_pool_out_4_2_V_address0,
        max_pool_out_4_2_V_ce0,
        max_pool_out_4_2_V_q0,
        max_pool_out_4_3_V_address0,
        max_pool_out_4_3_V_ce0,
        max_pool_out_4_3_V_q0,
        max_pool_out_4_4_V_address0,
        max_pool_out_4_4_V_ce0,
        max_pool_out_4_4_V_q0,
        flat_array_V_address0,
        flat_array_V_ce0,
        flat_array_V_we0,
        flat_array_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] max_pool_out_0_0_V_address0;
output   max_pool_out_0_0_V_ce0;
input  [13:0] max_pool_out_0_0_V_q0;
output  [3:0] max_pool_out_0_1_V_address0;
output   max_pool_out_0_1_V_ce0;
input  [13:0] max_pool_out_0_1_V_q0;
output  [3:0] max_pool_out_0_2_V_address0;
output   max_pool_out_0_2_V_ce0;
input  [13:0] max_pool_out_0_2_V_q0;
output  [3:0] max_pool_out_0_3_V_address0;
output   max_pool_out_0_3_V_ce0;
input  [13:0] max_pool_out_0_3_V_q0;
output  [3:0] max_pool_out_0_4_V_address0;
output   max_pool_out_0_4_V_ce0;
input  [13:0] max_pool_out_0_4_V_q0;
output  [3:0] max_pool_out_1_0_V_address0;
output   max_pool_out_1_0_V_ce0;
input  [13:0] max_pool_out_1_0_V_q0;
output  [3:0] max_pool_out_1_1_V_address0;
output   max_pool_out_1_1_V_ce0;
input  [13:0] max_pool_out_1_1_V_q0;
output  [3:0] max_pool_out_1_2_V_address0;
output   max_pool_out_1_2_V_ce0;
input  [13:0] max_pool_out_1_2_V_q0;
output  [3:0] max_pool_out_1_3_V_address0;
output   max_pool_out_1_3_V_ce0;
input  [13:0] max_pool_out_1_3_V_q0;
output  [3:0] max_pool_out_1_4_V_address0;
output   max_pool_out_1_4_V_ce0;
input  [13:0] max_pool_out_1_4_V_q0;
output  [3:0] max_pool_out_2_0_V_address0;
output   max_pool_out_2_0_V_ce0;
input  [13:0] max_pool_out_2_0_V_q0;
output  [3:0] max_pool_out_2_1_V_address0;
output   max_pool_out_2_1_V_ce0;
input  [13:0] max_pool_out_2_1_V_q0;
output  [3:0] max_pool_out_2_2_V_address0;
output   max_pool_out_2_2_V_ce0;
input  [13:0] max_pool_out_2_2_V_q0;
output  [3:0] max_pool_out_2_3_V_address0;
output   max_pool_out_2_3_V_ce0;
input  [13:0] max_pool_out_2_3_V_q0;
output  [3:0] max_pool_out_2_4_V_address0;
output   max_pool_out_2_4_V_ce0;
input  [13:0] max_pool_out_2_4_V_q0;
output  [3:0] max_pool_out_3_0_V_address0;
output   max_pool_out_3_0_V_ce0;
input  [13:0] max_pool_out_3_0_V_q0;
output  [3:0] max_pool_out_3_1_V_address0;
output   max_pool_out_3_1_V_ce0;
input  [13:0] max_pool_out_3_1_V_q0;
output  [3:0] max_pool_out_3_2_V_address0;
output   max_pool_out_3_2_V_ce0;
input  [13:0] max_pool_out_3_2_V_q0;
output  [3:0] max_pool_out_3_3_V_address0;
output   max_pool_out_3_3_V_ce0;
input  [13:0] max_pool_out_3_3_V_q0;
output  [3:0] max_pool_out_3_4_V_address0;
output   max_pool_out_3_4_V_ce0;
input  [13:0] max_pool_out_3_4_V_q0;
output  [3:0] max_pool_out_4_0_V_address0;
output   max_pool_out_4_0_V_ce0;
input  [13:0] max_pool_out_4_0_V_q0;
output  [3:0] max_pool_out_4_1_V_address0;
output   max_pool_out_4_1_V_ce0;
input  [13:0] max_pool_out_4_1_V_q0;
output  [3:0] max_pool_out_4_2_V_address0;
output   max_pool_out_4_2_V_ce0;
input  [13:0] max_pool_out_4_2_V_q0;
output  [3:0] max_pool_out_4_3_V_address0;
output   max_pool_out_4_3_V_ce0;
input  [13:0] max_pool_out_4_3_V_q0;
output  [3:0] max_pool_out_4_4_V_address0;
output   max_pool_out_4_4_V_ce0;
input  [13:0] max_pool_out_4_4_V_q0;
output  [8:0] flat_array_V_address0;
output   flat_array_V_ce0;
output   flat_array_V_we0;
output  [13:0] flat_array_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_0_0_V_ce0;
reg max_pool_out_0_1_V_ce0;
reg max_pool_out_0_2_V_ce0;
reg max_pool_out_0_3_V_ce0;
reg max_pool_out_0_4_V_ce0;
reg max_pool_out_1_0_V_ce0;
reg max_pool_out_1_1_V_ce0;
reg max_pool_out_1_2_V_ce0;
reg max_pool_out_1_3_V_ce0;
reg max_pool_out_1_4_V_ce0;
reg max_pool_out_2_0_V_ce0;
reg max_pool_out_2_1_V_ce0;
reg max_pool_out_2_2_V_ce0;
reg max_pool_out_2_3_V_ce0;
reg max_pool_out_2_4_V_ce0;
reg max_pool_out_3_0_V_ce0;
reg max_pool_out_3_1_V_ce0;
reg max_pool_out_3_2_V_ce0;
reg max_pool_out_3_3_V_ce0;
reg max_pool_out_3_4_V_ce0;
reg max_pool_out_4_0_V_ce0;
reg max_pool_out_4_1_V_ce0;
reg max_pool_out_4_2_V_ce0;
reg max_pool_out_4_3_V_ce0;
reg max_pool_out_4_4_V_ce0;
reg flat_array_V_ce0;
reg flat_array_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_509_p2;
reg   [2:0] r_reg_680;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_515_p2;
reg   [8:0] i_reg_685;
wire   [0:0] icmp_ln6_fu_503_p2;
wire   [3:0] zext_ln203_fu_521_p1;
reg   [3:0] zext_ln203_reg_690;
wire   [4:0] shl_ln_fu_525_p3;
reg   [4:0] shl_ln_reg_695;
wire   [2:0] c_fu_539_p2;
reg   [2:0] c_reg_703;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln15_fu_545_p2;
reg   [8:0] add_ln15_reg_708;
wire   [0:0] icmp_ln9_fu_533_p2;
wire   [4:0] add_ln203_fu_564_p2;
reg   [4:0] add_ln203_reg_713;
wire   [4:0] f_fu_575_p2;
reg   [4:0] f_reg_721;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln12_fu_569_p2;
wire   [8:0] add_ln15_1_fu_671_p2;
wire    ap_CS_fsm_state5;
reg   [8:0] i_0_reg_436;
reg   [2:0] r_0_reg_448;
reg   [8:0] i_1_reg_459;
reg   [2:0] c_0_reg_470;
reg   [8:0] i_2_reg_481;
reg   [4:0] f_0_reg_492;
wire   [63:0] zext_ln14_1_fu_581_p1;
wire   [63:0] zext_ln14_fu_610_p1;
wire   [13:0] tmp_1_fu_615_p27;
wire   [3:0] zext_ln203_1_fu_551_p1;
wire   [3:0] add_ln203_1_fu_555_p2;
wire   [4:0] zext_ln203_2_fu_560_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

cnn_mux_255_14_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 14 ),
    .din3_WIDTH( 14 ),
    .din4_WIDTH( 14 ),
    .din5_WIDTH( 14 ),
    .din6_WIDTH( 14 ),
    .din7_WIDTH( 14 ),
    .din8_WIDTH( 14 ),
    .din9_WIDTH( 14 ),
    .din10_WIDTH( 14 ),
    .din11_WIDTH( 14 ),
    .din12_WIDTH( 14 ),
    .din13_WIDTH( 14 ),
    .din14_WIDTH( 14 ),
    .din15_WIDTH( 14 ),
    .din16_WIDTH( 14 ),
    .din17_WIDTH( 14 ),
    .din18_WIDTH( 14 ),
    .din19_WIDTH( 14 ),
    .din20_WIDTH( 14 ),
    .din21_WIDTH( 14 ),
    .din22_WIDTH( 14 ),
    .din23_WIDTH( 14 ),
    .din24_WIDTH( 14 ),
    .din25_WIDTH( 5 ),
    .dout_WIDTH( 14 ))
cnn_mux_255_14_1_1_U263(
    .din0(max_pool_out_0_0_V_q0),
    .din1(max_pool_out_0_1_V_q0),
    .din2(max_pool_out_0_2_V_q0),
    .din3(max_pool_out_0_3_V_q0),
    .din4(max_pool_out_0_4_V_q0),
    .din5(max_pool_out_1_0_V_q0),
    .din6(max_pool_out_1_1_V_q0),
    .din7(max_pool_out_1_2_V_q0),
    .din8(max_pool_out_1_3_V_q0),
    .din9(max_pool_out_1_4_V_q0),
    .din10(max_pool_out_2_0_V_q0),
    .din11(max_pool_out_2_1_V_q0),
    .din12(max_pool_out_2_2_V_q0),
    .din13(max_pool_out_2_3_V_q0),
    .din14(max_pool_out_2_4_V_q0),
    .din15(max_pool_out_3_0_V_q0),
    .din16(max_pool_out_3_1_V_q0),
    .din17(max_pool_out_3_2_V_q0),
    .din18(max_pool_out_3_3_V_q0),
    .din19(max_pool_out_3_4_V_q0),
    .din20(max_pool_out_4_0_V_q0),
    .din21(max_pool_out_4_1_V_q0),
    .din22(max_pool_out_4_2_V_q0),
    .din23(max_pool_out_4_3_V_q0),
    .din24(max_pool_out_4_4_V_q0),
    .din25(add_ln203_reg_713),
    .dout(tmp_1_fu_615_p27)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_470 <= c_reg_703;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_503_p2 == 1'd0))) begin
        c_0_reg_470 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_492 <= f_reg_721;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_533_p2 == 1'd0))) begin
        f_0_reg_492 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_533_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_436 <= i_reg_685;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_436 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_459 <= add_ln15_reg_708;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_503_p2 == 1'd0))) begin
        i_1_reg_459 <= i_0_reg_436;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_481 <= add_ln15_1_fu_671_p2;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_533_p2 == 1'd0))) begin
        i_2_reg_481 <= i_1_reg_459;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_533_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_448 <= r_reg_680;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_448 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln9_fu_533_p2 == 1'd0))) begin
        add_ln15_reg_708 <= add_ln15_fu_545_p2;
        add_ln203_reg_713 <= add_ln203_fu_564_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_703 <= c_fu_539_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_721 <= f_fu_575_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_503_p2 == 1'd0))) begin
        i_reg_685 <= i_fu_515_p2;
        shl_ln_reg_695[4 : 2] <= shl_ln_fu_525_p3[4 : 2];
        zext_ln203_reg_690[2 : 0] <= zext_ln203_fu_521_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_680 <= r_fu_509_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_503_p2 == 1'd1)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_503_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_V_ce0 = 1'b1;
    end else begin
        flat_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_V_we0 = 1'b1;
    end else begin
        flat_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_0_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_0_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_0_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_0_3_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_0_4_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_1_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_1_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_1_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_1_3_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_1_4_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_2_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_2_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_2_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_2_3_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_2_4_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_3_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_3_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_3_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_3_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_3_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_3_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_3_3_V_ce0 = 1'b1;
    end else begin
        max_pool_out_3_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_3_4_V_ce0 = 1'b1;
    end else begin
        max_pool_out_3_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_4_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_4_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_4_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_4_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_4_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_4_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_4_3_V_ce0 = 1'b1;
    end else begin
        max_pool_out_4_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_4_4_V_ce0 = 1'b1;
    end else begin
        max_pool_out_4_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln6_fu_503_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_533_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_569_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_671_p2 = (i_2_reg_481 + 9'd1);

assign add_ln15_fu_545_p2 = (i_1_reg_459 + 9'd16);

assign add_ln203_1_fu_555_p2 = (zext_ln203_reg_690 + zext_ln203_1_fu_551_p1);

assign add_ln203_fu_564_p2 = (zext_ln203_2_fu_560_p1 + shl_ln_reg_695);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_539_p2 = (c_0_reg_470 + 3'd1);

assign f_fu_575_p2 = (f_0_reg_492 + 5'd1);

assign flat_array_V_address0 = zext_ln14_fu_610_p1;

assign flat_array_V_d0 = tmp_1_fu_615_p27;

assign i_fu_515_p2 = (i_0_reg_436 + 9'd80);

assign icmp_ln12_fu_569_p2 = ((f_0_reg_492 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_503_p2 = ((r_0_reg_448 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_533_p2 = ((c_0_reg_470 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_0_0_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_0_1_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_0_2_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_0_3_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_0_4_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_1_0_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_1_1_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_1_2_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_1_3_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_1_4_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_2_0_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_2_1_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_2_2_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_2_3_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_2_4_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_3_0_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_3_1_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_3_2_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_3_3_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_3_4_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_4_0_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_4_1_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_4_2_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_4_3_V_address0 = zext_ln14_1_fu_581_p1;

assign max_pool_out_4_4_V_address0 = zext_ln14_1_fu_581_p1;

assign r_fu_509_p2 = (r_0_reg_448 + 3'd1);

assign shl_ln_fu_525_p3 = {{r_0_reg_448}, {2'd0}};

assign zext_ln14_1_fu_581_p1 = f_0_reg_492;

assign zext_ln14_fu_610_p1 = i_2_reg_481;

assign zext_ln203_1_fu_551_p1 = c_0_reg_470;

assign zext_ln203_2_fu_560_p1 = add_ln203_1_fu_555_p2;

assign zext_ln203_fu_521_p1 = r_0_reg_448;

always @ (posedge ap_clk) begin
    zext_ln203_reg_690[3] <= 1'b0;
    shl_ln_reg_695[1:0] <= 2'b00;
end

endmodule //flat
