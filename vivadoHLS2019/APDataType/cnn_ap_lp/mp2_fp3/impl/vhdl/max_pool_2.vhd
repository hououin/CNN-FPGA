-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce1 : OUT STD_LOGIC;
    conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_we0 : OUT STD_LOGIC;
    max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten23_reg_132 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_143 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_154 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_0_reg_165 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_0_reg_176 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln10_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln10_fu_207_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln10_reg_609 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_219_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_614 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_5_fu_233_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_5_reg_619 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln29_1_fu_241_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_1_reg_625 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln13_fu_291_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_reg_631 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_fu_307_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_1_reg_637 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_3_fu_339_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_3_reg_644 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1494_2_fu_355_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_2_reg_649 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_5_fu_390_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1494_5_reg_659 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln13_fu_419_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_reg_669 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state3_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal select_ln29_1_fu_508_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln29_1_reg_684 : STD_LOGIC_VECTOR (13 downto 0);
    signal c_fu_516_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_690 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_4_fu_521_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln13_4_reg_695 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten23_phi_fu_136_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_147_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_indvar_flatten_phi_fu_158_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_phi_mux_r_0_phi_fu_169_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_0_phi_fu_180_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln1494_3_fu_379_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_6_fu_414_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_4_fu_452_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln1494_7_fu_497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_3_fu_600_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln_fu_187_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_fu_213_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln26_fu_195_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln16_fu_267_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_4_fu_225_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_fu_273_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_279_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln26_mid1_fu_299_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_6_fu_245_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_2_fu_315_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1494_fu_327_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln26_1_fu_333_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_7_fu_253_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_347_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1494_fu_327_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_cast_fu_365_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_1_fu_373_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln27_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1494_4_fu_394_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_cast_fu_400_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_5_fu_408_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1494_1_fu_428_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1494_1_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_2_fu_434_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_439_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_3_fu_447_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln1494_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln1494_fu_457_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln29_fu_467_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_6_fu_479_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_cast_fu_484_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_7_fu_492_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln29_2_fu_475_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_1_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_533_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_fu_530_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_1_fu_540_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln1494_2_fu_550_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_555_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_3_fu_562_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_544_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_2_fu_577_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_1_fu_580_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_cast_fu_586_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln29_fu_527_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_2_fu_594_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1494_1_fu_428_p10 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_fu_327_p10 : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_176 <= c_reg_690;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_176 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_143 <= select_ln29_5_reg_619;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_143 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten23_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten23_reg_132 <= add_ln10_reg_609;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten23_reg_132 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                indvar_flatten_reg_154 <= select_ln13_4_reg_695;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_154 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_0_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                r_0_reg_165 <= select_ln13_1_reg_637;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_165 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln10_reg_609 <= add_ln10_fu_207_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln13_reg_669 <= add_ln13_fu_419_p2;
                icmp_ln13_reg_614 <= icmp_ln13_fu_219_p2;
                    select_ln13_3_reg_644(3 downto 1) <= select_ln13_3_fu_339_p3(3 downto 1);
                select_ln13_reg_631 <= select_ln13_fu_291_p3;
                    zext_ln1494_2_reg_649(3 downto 1) <= zext_ln1494_2_fu_355_p1(3 downto 1);
                    zext_ln1494_5_reg_659(3 downto 1) <= zext_ln1494_5_fu_390_p1(3 downto 1);
                    zext_ln29_1_reg_625(4 downto 0) <= zext_ln29_1_fu_241_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                c_reg_690 <= c_fu_516_p2;
                select_ln13_4_reg_695 <= select_ln13_4_fu_521_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_605 <= icmp_ln10_fu_201_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_201_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln13_1_reg_637 <= select_ln13_1_fu_307_p3;
                select_ln29_5_reg_619 <= select_ln29_5_fu_233_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                select_ln29_1_reg_684 <= select_ln29_1_fu_508_p3;
            end if;
        end if;
    end process;
    zext_ln29_1_reg_625(11 downto 5) <= "0000000";
    select_ln13_3_reg_644(0) <= '1';
    zext_ln1494_2_reg_649(0) <= '0';
    zext_ln1494_2_reg_649(7 downto 4) <= "0000";
    zext_ln1494_5_reg_659(0) <= '1';
    zext_ln1494_5_reg_659(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_201_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln10_fu_201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln10_fu_207_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten23_phi_fu_136_p4) + unsigned(ap_const_lv9_1));
    add_ln13_fu_419_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(ap_phi_mux_indvar_flatten_phi_fu_158_p4));
    add_ln1494_1_fu_373_p2 <= std_logic_vector(unsigned(tmp_3_cast_fu_365_p3) + unsigned(zext_ln29_1_fu_241_p1));
    add_ln1494_2_fu_434_p2 <= std_logic_vector(unsigned(mul_ln1494_1_fu_428_p2) + unsigned(zext_ln1494_2_reg_649));
    add_ln1494_3_fu_447_p2 <= std_logic_vector(unsigned(tmp_5_cast_fu_439_p3) + unsigned(zext_ln29_1_reg_625));
    add_ln1494_4_fu_394_p2 <= std_logic_vector(unsigned(mul_ln1494_fu_327_p2) + unsigned(zext_ln1494_5_fu_390_p1));
    add_ln1494_5_fu_408_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_400_p3) + unsigned(zext_ln29_1_fu_241_p1));
    add_ln1494_6_fu_479_p2 <= std_logic_vector(unsigned(mul_ln1494_1_fu_428_p2) + unsigned(zext_ln1494_5_reg_659));
    add_ln1494_7_fu_492_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_484_p3) + unsigned(zext_ln29_1_reg_625));
    add_ln1494_fu_359_p2 <= std_logic_vector(unsigned(mul_ln1494_fu_327_p2) + unsigned(zext_ln1494_2_fu_355_p1));
    add_ln203_1_fu_580_p2 <= std_logic_vector(unsigned(add_ln203_fu_544_p2) + unsigned(zext_ln203_2_fu_577_p1));
    add_ln203_2_fu_594_p2 <= std_logic_vector(unsigned(tmp_11_cast_fu_586_p3) + unsigned(zext_ln29_fu_527_p1));
    add_ln203_fu_544_p2 <= std_logic_vector(unsigned(zext_ln203_fu_530_p1) + unsigned(zext_ln203_1_fu_540_p1));
    and_ln29_fu_273_p2 <= (xor_ln29_fu_261_p2 and icmp_ln16_fu_267_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_201_p2)
    begin
        if ((icmp_ln10_fu_201_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_180_p4_assign_proc : process(c_0_reg_176, icmp_ln10_reg_605, ap_CS_fsm_pp0_stage0, c_reg_690, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_180_p4 <= c_reg_690;
        else 
            ap_phi_mux_c_0_phi_fu_180_p4 <= c_0_reg_176;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_147_p4_assign_proc : process(f_0_reg_143, icmp_ln10_reg_605, ap_CS_fsm_pp0_stage0, select_ln29_5_reg_619, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_147_p4 <= select_ln29_5_reg_619;
        else 
            ap_phi_mux_f_0_phi_fu_147_p4 <= f_0_reg_143;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten23_phi_fu_136_p4_assign_proc : process(indvar_flatten23_reg_132, icmp_ln10_reg_605, ap_CS_fsm_pp0_stage0, add_ln10_reg_609, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten23_phi_fu_136_p4 <= add_ln10_reg_609;
        else 
            ap_phi_mux_indvar_flatten23_phi_fu_136_p4 <= indvar_flatten23_reg_132;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_158_p4_assign_proc : process(indvar_flatten_reg_154, icmp_ln10_reg_605, ap_CS_fsm_pp0_stage0, select_ln13_4_reg_695, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_158_p4 <= select_ln13_4_reg_695;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_158_p4 <= indvar_flatten_reg_154;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_169_p4_assign_proc : process(r_0_reg_165, icmp_ln10_reg_605, ap_CS_fsm_pp0_stage0, select_ln13_1_reg_637, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_169_p4 <= select_ln13_1_reg_637;
        else 
            ap_phi_mux_r_0_phi_fu_169_p4 <= r_0_reg_165;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_516_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln13_reg_631));

    conv_out_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln1494_3_fu_379_p1, zext_ln1494_4_fu_452_p1, ap_block_pp0_stage1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_out_V_address0 <= zext_ln1494_4_fu_452_p1(11 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_out_V_address0 <= zext_ln1494_3_fu_379_p1(11 - 1 downto 0);
            else 
                conv_out_V_address0 <= "XXXXXXXXXXX";
            end if;
        else 
            conv_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_out_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0, zext_ln1494_6_fu_414_p1, ap_block_pp0_stage1, zext_ln1494_7_fu_497_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
                conv_out_V_address1 <= zext_ln1494_7_fu_497_p1(11 - 1 downto 0);
            elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
                conv_out_V_address1 <= zext_ln1494_6_fu_414_p1(11 - 1 downto 0);
            else 
                conv_out_V_address1 <= "XXXXXXXXXXX";
            end if;
        else 
            conv_out_V_address1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_out_V_ce1 <= ap_const_logic_1;
        else 
            conv_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_213_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_f_0_phi_fu_147_p4));
    icmp_ln10_fu_201_p2 <= "1" when (ap_phi_mux_indvar_flatten23_phi_fu_136_p4 = ap_const_lv9_190) else "0";
    icmp_ln13_fu_219_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_158_p4 = ap_const_lv6_19) else "0";
    icmp_ln1494_1_fu_502_p2 <= "1" when (signed(conv_out_V_q1) > signed(zext_ln29_2_fu_475_p1)) else "0";
    icmp_ln1494_2_fu_550_p2 <= "1" when (signed(conv_out_V_q0) > signed(select_ln29_1_reg_684)) else "0";
    icmp_ln1494_3_fu_562_p2 <= "1" when (signed(conv_out_V_q1) > signed(select_ln29_2_fu_555_p3)) else "0";
    icmp_ln1494_fu_461_p2 <= "1" when (signed(conv_out_V_q0) > signed(ap_const_lv14_0)) else "0";
    icmp_ln16_fu_267_p2 <= "1" when (ap_phi_mux_c_0_phi_fu_180_p4 = ap_const_lv3_5) else "0";
    max_pool_out_V_address0 <= zext_ln203_3_fu_600_p1(9 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_V_d0 <= 
        conv_out_V_q1 when (icmp_ln1494_3_fu_562_p2(0) = '1') else 
        select_ln29_2_fu_555_p3;

    max_pool_out_V_we0_assign_proc : process(icmp_ln10_reg_605, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_605 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            max_pool_out_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1494_1_fu_428_p1 <= mul_ln1494_1_fu_428_p10(4 - 1 downto 0);
    mul_ln1494_1_fu_428_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_3_reg_644),8));
    mul_ln1494_1_fu_428_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_B) * unsigned(mul_ln1494_1_fu_428_p1), 8));
    mul_ln1494_fu_327_p1 <= mul_ln1494_fu_327_p10(4 - 1 downto 0);
    mul_ln1494_fu_327_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_315_p3),8));
    mul_ln1494_fu_327_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv8_B) * unsigned(mul_ln1494_fu_327_p1), 8));
    or_ln13_fu_285_p2 <= (icmp_ln13_fu_219_p2 or and_ln29_fu_273_p2);
    or_ln26_1_fu_333_p2 <= (shl_ln26_mid1_fu_299_p3 or ap_const_lv4_1);
    or_ln26_fu_195_p2 <= (shl_ln_fu_187_p3 or ap_const_lv4_1);
    or_ln27_fu_384_p2 <= (shl_ln1_fu_347_p3 or ap_const_lv4_1);
    r_fu_279_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln29_4_fu_225_p3));
    select_ln13_1_fu_307_p3 <= 
        r_fu_279_p2 when (and_ln29_fu_273_p2(0) = '1') else 
        select_ln29_4_fu_225_p3;
    select_ln13_2_fu_315_p3 <= 
        shl_ln26_mid1_fu_299_p3 when (and_ln29_fu_273_p2(0) = '1') else 
        select_ln29_6_fu_245_p3;
    select_ln13_3_fu_339_p3 <= 
        or_ln26_1_fu_333_p2 when (and_ln29_fu_273_p2(0) = '1') else 
        select_ln29_7_fu_253_p3;
    select_ln13_4_fu_521_p3 <= 
        ap_const_lv6_1 when (icmp_ln13_reg_614(0) = '1') else 
        add_ln13_reg_669;
    select_ln13_fu_291_p3 <= 
        ap_const_lv3_0 when (or_ln13_fu_285_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_180_p4;
    select_ln29_1_fu_508_p3 <= 
        conv_out_V_q1 when (icmp_ln1494_1_fu_502_p2(0) = '1') else 
        zext_ln29_2_fu_475_p1;
    select_ln29_2_fu_555_p3 <= 
        conv_out_V_q0 when (icmp_ln1494_2_fu_550_p2(0) = '1') else 
        select_ln29_1_reg_684;
    select_ln29_4_fu_225_p3 <= 
        ap_const_lv3_0 when (icmp_ln13_fu_219_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_169_p4;
    select_ln29_5_fu_233_p3 <= 
        f_fu_213_p2 when (icmp_ln13_fu_219_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_147_p4;
    select_ln29_6_fu_245_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_219_p2(0) = '1') else 
        shl_ln_fu_187_p3;
    select_ln29_7_fu_253_p3 <= 
        ap_const_lv4_1 when (icmp_ln13_fu_219_p2(0) = '1') else 
        or_ln26_fu_195_p2;
    select_ln29_fu_467_p3 <= 
        trunc_ln1494_fu_457_p1 when (icmp_ln1494_fu_461_p2(0) = '1') else 
        ap_const_lv13_0;
    shl_ln1_fu_347_p3 <= (select_ln13_fu_291_p3 & ap_const_lv1_0);
    shl_ln26_mid1_fu_299_p3 <= (r_fu_279_p2 & ap_const_lv1_0);
    shl_ln_fu_187_p3 <= (ap_phi_mux_r_0_phi_fu_169_p4 & ap_const_lv1_0);
    tmp_11_cast_fu_586_p3 <= (add_ln203_1_fu_580_p2 & ap_const_lv4_0);
    tmp_3_cast_fu_365_p3 <= (add_ln1494_fu_359_p2 & ap_const_lv4_0);
    tmp_5_cast_fu_439_p3 <= (add_ln1494_2_fu_434_p2 & ap_const_lv4_0);
    tmp_7_cast_fu_400_p3 <= (add_ln1494_4_fu_394_p2 & ap_const_lv4_0);
    tmp_9_cast_fu_484_p3 <= (add_ln1494_6_fu_479_p2 & ap_const_lv4_0);
    tmp_fu_533_p3 <= (select_ln13_1_reg_637 & ap_const_lv2_0);
    trunc_ln1494_fu_457_p1 <= conv_out_V_q0(13 - 1 downto 0);
    xor_ln29_fu_261_p2 <= (icmp_ln13_fu_219_p2 xor ap_const_lv1_1);
    zext_ln1494_2_fu_355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_347_p3),8));
    zext_ln1494_3_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_1_fu_373_p2),64));
    zext_ln1494_4_fu_452_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_3_fu_447_p2),64));
    zext_ln1494_5_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln27_fu_384_p2),8));
    zext_ln1494_6_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_5_fu_408_p2),64));
    zext_ln1494_7_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_7_fu_492_p2),64));
    zext_ln203_1_fu_540_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_533_p3),6));
    zext_ln203_2_fu_577_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_reg_631),6));
    zext_ln203_3_fu_600_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_594_p2),64));
    zext_ln203_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_1_reg_637),6));
    zext_ln29_1_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_fu_233_p3),12));
    zext_ln29_2_fu_475_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_fu_467_p3),14));
    zext_ln29_fu_527_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_5_reg_619),10));
end behav;
