// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _flat_HH_
#define _flat_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct flat : public sc_module {
    // Port declarations 19
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > max_pool_out_0_V_address0;
    sc_out< sc_logic > max_pool_out_0_V_ce0;
    sc_in< sc_lv<14> > max_pool_out_0_V_q0;
    sc_out< sc_lv<8> > max_pool_out_1_V_address0;
    sc_out< sc_logic > max_pool_out_1_V_ce0;
    sc_in< sc_lv<14> > max_pool_out_1_V_q0;
    sc_out< sc_lv<7> > max_pool_out_2_0_V_address0;
    sc_out< sc_logic > max_pool_out_2_0_V_ce0;
    sc_in< sc_lv<14> > max_pool_out_2_0_V_q0;
    sc_out< sc_lv<9> > flat_array_V_address0;
    sc_out< sc_logic > flat_array_V_ce0;
    sc_out< sc_logic > flat_array_V_we0;
    sc_out< sc_lv<14> > flat_array_V_d0;


    // Module declarations
    flat(sc_module_name name);
    SC_HAS_PROCESS(flat);

    ~flat();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<3> > r_fu_219_p2;
    sc_signal< sc_lv<3> > r_reg_378;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<9> > i_fu_225_p2;
    sc_signal< sc_lv<9> > i_reg_383;
    sc_signal< sc_lv<1> > icmp_ln6_fu_213_p2;
    sc_signal< sc_lv<5> > zext_ln203_fu_239_p1;
    sc_signal< sc_lv<5> > zext_ln203_reg_388;
    sc_signal< sc_lv<8> > zext_ln9_fu_251_p1;
    sc_signal< sc_lv<8> > zext_ln9_reg_393;
    sc_signal< sc_lv<6> > add_ln9_fu_255_p2;
    sc_signal< sc_lv<6> > add_ln9_reg_398;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > c_fu_267_p2;
    sc_signal< sc_lv<3> > c_reg_406;
    sc_signal< sc_lv<9> > add_ln15_fu_273_p2;
    sc_signal< sc_lv<9> > add_ln15_reg_411;
    sc_signal< sc_lv<1> > icmp_ln9_fu_261_p2;
    sc_signal< sc_lv<3> > select_ln203_fu_291_p3;
    sc_signal< sc_lv<3> > select_ln203_reg_416;
    sc_signal< sc_lv<9> > tmp_25_cast_fu_316_p3;
    sc_signal< sc_lv<9> > tmp_25_cast_reg_420;
    sc_signal< sc_lv<5> > f_fu_330_p2;
    sc_signal< sc_lv<5> > f_reg_428;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<64> > zext_ln14_fu_336_p1;
    sc_signal< sc_lv<64> > zext_ln14_reg_433;
    sc_signal< sc_lv<1> > icmp_ln12_fu_324_p2;
    sc_signal< sc_lv<9> > add_ln15_1_fu_369_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<9> > i_0_reg_120;
    sc_signal< sc_lv<3> > r_0_reg_132;
    sc_signal< sc_lv<9> > i_1_reg_143;
    sc_signal< sc_lv<3> > c_0_reg_154;
    sc_signal< sc_lv<6> > phi_mul_reg_165;
    sc_signal< sc_lv<9> > i_2_reg_176;
    sc_signal< sc_lv<5> > f_0_reg_187;
    sc_signal< sc_lv<14> > ap_phi_mux_phi_ln203_phi_fu_201_p6;
    sc_signal< sc_lv<64> > zext_ln203_9_fu_353_p1;
    sc_signal< sc_lv<64> > zext_ln203_10_fu_364_p1;
    sc_signal< sc_lv<4> > tmp_s_fu_231_p3;
    sc_signal< sc_lv<7> > tmp_12_fu_243_p3;
    sc_signal< sc_lv<1> > icmp_ln203_fu_279_p2;
    sc_signal< sc_lv<3> > add_ln203_fu_285_p2;
    sc_signal< sc_lv<1> > tmp_9_fu_299_p3;
    sc_signal< sc_lv<5> > zext_ln203_6_fu_307_p1;
    sc_signal< sc_lv<5> > add_ln203_3_fu_311_p2;
    sc_signal< sc_lv<9> > zext_ln203_8_fu_344_p1;
    sc_signal< sc_lv<9> > add_ln203_4_fu_348_p2;
    sc_signal< sc_lv<8> > zext_ln203_7_fu_340_p1;
    sc_signal< sc_lv<8> > add_ln203_5_fu_359_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<9> ap_const_lv9_50;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<6> ap_const_lv6_B;
    static const sc_lv<9> ap_const_lv9_10;
    static const sc_lv<3> ap_const_lv3_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<5> ap_const_lv5_10;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<9> ap_const_lv9_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln15_1_fu_369_p2();
    void thread_add_ln15_fu_273_p2();
    void thread_add_ln203_3_fu_311_p2();
    void thread_add_ln203_4_fu_348_p2();
    void thread_add_ln203_5_fu_359_p2();
    void thread_add_ln203_fu_285_p2();
    void thread_add_ln9_fu_255_p2();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_phi_ln203_phi_fu_201_p6();
    void thread_ap_ready();
    void thread_c_fu_267_p2();
    void thread_f_fu_330_p2();
    void thread_flat_array_V_address0();
    void thread_flat_array_V_ce0();
    void thread_flat_array_V_d0();
    void thread_flat_array_V_we0();
    void thread_i_fu_225_p2();
    void thread_icmp_ln12_fu_324_p2();
    void thread_icmp_ln203_fu_279_p2();
    void thread_icmp_ln6_fu_213_p2();
    void thread_icmp_ln9_fu_261_p2();
    void thread_max_pool_out_0_V_address0();
    void thread_max_pool_out_0_V_ce0();
    void thread_max_pool_out_1_V_address0();
    void thread_max_pool_out_1_V_ce0();
    void thread_max_pool_out_2_0_V_address0();
    void thread_max_pool_out_2_0_V_ce0();
    void thread_r_fu_219_p2();
    void thread_select_ln203_fu_291_p3();
    void thread_tmp_12_fu_243_p3();
    void thread_tmp_25_cast_fu_316_p3();
    void thread_tmp_9_fu_299_p3();
    void thread_tmp_s_fu_231_p3();
    void thread_zext_ln14_fu_336_p1();
    void thread_zext_ln203_10_fu_364_p1();
    void thread_zext_ln203_6_fu_307_p1();
    void thread_zext_ln203_7_fu_340_p1();
    void thread_zext_ln203_8_fu_344_p1();
    void thread_zext_ln203_9_fu_353_p1();
    void thread_zext_ln203_fu_239_p1();
    void thread_zext_ln9_fu_251_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
