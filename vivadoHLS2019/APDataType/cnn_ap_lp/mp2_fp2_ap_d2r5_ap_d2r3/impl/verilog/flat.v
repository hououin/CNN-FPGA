// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_0_V_address0,
        max_pool_out_0_V_ce0,
        max_pool_out_0_V_q0,
        max_pool_out_1_V_address0,
        max_pool_out_1_V_ce0,
        max_pool_out_1_V_q0,
        max_pool_out_2_0_V_address0,
        max_pool_out_2_0_V_ce0,
        max_pool_out_2_0_V_q0,
        flat_array_V_address0,
        flat_array_V_ce0,
        flat_array_V_we0,
        flat_array_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] max_pool_out_0_V_address0;
output   max_pool_out_0_V_ce0;
input  [13:0] max_pool_out_0_V_q0;
output  [7:0] max_pool_out_1_V_address0;
output   max_pool_out_1_V_ce0;
input  [13:0] max_pool_out_1_V_q0;
output  [6:0] max_pool_out_2_0_V_address0;
output   max_pool_out_2_0_V_ce0;
input  [13:0] max_pool_out_2_0_V_q0;
output  [8:0] flat_array_V_address0;
output   flat_array_V_ce0;
output   flat_array_V_we0;
output  [13:0] flat_array_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_0_V_ce0;
reg max_pool_out_1_V_ce0;
reg max_pool_out_2_0_V_ce0;
reg flat_array_V_ce0;
reg flat_array_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_219_p2;
reg   [2:0] r_reg_378;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_225_p2;
reg   [8:0] i_reg_383;
wire   [0:0] icmp_ln6_fu_213_p2;
wire   [4:0] zext_ln203_fu_239_p1;
reg   [4:0] zext_ln203_reg_388;
wire   [7:0] zext_ln9_fu_251_p1;
reg   [7:0] zext_ln9_reg_393;
wire   [5:0] add_ln9_fu_255_p2;
reg   [5:0] add_ln9_reg_398;
wire    ap_CS_fsm_state3;
wire   [2:0] c_fu_267_p2;
reg   [2:0] c_reg_406;
wire   [8:0] add_ln15_fu_273_p2;
reg   [8:0] add_ln15_reg_411;
wire   [0:0] icmp_ln9_fu_261_p2;
wire   [2:0] select_ln203_fu_291_p3;
reg   [2:0] select_ln203_reg_416;
wire   [8:0] tmp_25_cast_fu_316_p3;
reg   [8:0] tmp_25_cast_reg_420;
wire   [4:0] f_fu_330_p2;
reg   [4:0] f_reg_428;
wire    ap_CS_fsm_state4;
wire   [63:0] zext_ln14_fu_336_p1;
reg   [63:0] zext_ln14_reg_433;
wire   [0:0] icmp_ln12_fu_324_p2;
wire   [8:0] add_ln15_1_fu_369_p2;
wire    ap_CS_fsm_state5;
reg   [8:0] i_0_reg_120;
reg   [2:0] r_0_reg_132;
reg   [8:0] i_1_reg_143;
reg   [2:0] c_0_reg_154;
reg   [5:0] phi_mul_reg_165;
reg   [8:0] i_2_reg_176;
reg   [4:0] f_0_reg_187;
reg   [13:0] ap_phi_mux_phi_ln203_phi_fu_201_p6;
wire   [63:0] zext_ln203_9_fu_353_p1;
wire   [63:0] zext_ln203_10_fu_364_p1;
wire   [3:0] tmp_s_fu_231_p3;
wire   [6:0] tmp_12_fu_243_p3;
wire   [0:0] icmp_ln203_fu_279_p2;
wire   [2:0] add_ln203_fu_285_p2;
wire   [0:0] tmp_9_fu_299_p3;
wire   [4:0] zext_ln203_6_fu_307_p1;
wire   [4:0] add_ln203_3_fu_311_p2;
wire   [8:0] zext_ln203_8_fu_344_p1;
wire   [8:0] add_ln203_4_fu_348_p2;
wire   [7:0] zext_ln203_7_fu_340_p1;
wire   [7:0] add_ln203_5_fu_359_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_154 <= c_reg_406;
    end else if (((icmp_ln6_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_154 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        f_0_reg_187 <= f_reg_428;
    end else if (((icmp_ln9_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_187 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_120 <= i_reg_383;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_120 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_143 <= add_ln15_reg_411;
    end else if (((icmp_ln6_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_143 <= i_0_reg_120;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_2_reg_176 <= add_ln15_1_fu_369_p2;
    end else if (((icmp_ln9_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_176 <= i_1_reg_143;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_165 <= add_ln9_reg_398;
    end else if (((icmp_ln6_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_165 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_132 <= r_reg_378;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_0_reg_132 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_261_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_reg_411 <= add_ln15_fu_273_p2;
        select_ln203_reg_416 <= select_ln203_fu_291_p3;
        tmp_25_cast_reg_420[8 : 4] <= tmp_25_cast_fu_316_p3[8 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln9_reg_398 <= add_ln9_fu_255_p2;
        c_reg_406 <= c_fu_267_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_428 <= f_fu_330_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_213_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_reg_383 <= i_fu_225_p2;
        zext_ln203_reg_388[3 : 1] <= zext_ln203_fu_239_p1[3 : 1];
        zext_ln9_reg_393[6 : 4] <= zext_ln9_fu_251_p1[6 : 4];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_378 <= r_fu_219_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_324_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        zext_ln14_reg_433[8 : 0] <= zext_ln14_fu_336_p1[8 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln6_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        if ((~(select_ln203_reg_416 == 3'd1) & ~(select_ln203_reg_416 == 3'd0))) begin
            ap_phi_mux_phi_ln203_phi_fu_201_p6 = max_pool_out_2_0_V_q0;
        end else if ((select_ln203_reg_416 == 3'd1)) begin
            ap_phi_mux_phi_ln203_phi_fu_201_p6 = max_pool_out_1_V_q0;
        end else if ((select_ln203_reg_416 == 3'd0)) begin
            ap_phi_mux_phi_ln203_phi_fu_201_p6 = max_pool_out_0_V_q0;
        end else begin
            ap_phi_mux_phi_ln203_phi_fu_201_p6 = 'bx;
        end
    end else begin
        ap_phi_mux_phi_ln203_phi_fu_201_p6 = 'bx;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_V_ce0 = 1'b1;
    end else begin
        flat_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        flat_array_V_we0 = 1'b1;
    end else begin
        flat_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        max_pool_out_2_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_213_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_261_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_324_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_369_p2 = (i_2_reg_176 + 9'd1);

assign add_ln15_fu_273_p2 = (i_1_reg_143 + 9'd16);

assign add_ln203_3_fu_311_p2 = (zext_ln203_reg_388 + zext_ln203_6_fu_307_p1);

assign add_ln203_4_fu_348_p2 = (tmp_25_cast_reg_420 + zext_ln203_8_fu_344_p1);

assign add_ln203_5_fu_359_p2 = (zext_ln9_reg_393 + zext_ln203_7_fu_340_p1);

assign add_ln203_fu_285_p2 = ($signed(c_0_reg_154) + $signed(3'd5));

assign add_ln9_fu_255_p2 = (phi_mul_reg_165 + 6'd11);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign c_fu_267_p2 = (c_0_reg_154 + 3'd1);

assign f_fu_330_p2 = (f_0_reg_187 + 5'd1);

assign flat_array_V_address0 = zext_ln14_reg_433;

assign flat_array_V_d0 = ap_phi_mux_phi_ln203_phi_fu_201_p6;

assign i_fu_225_p2 = (i_0_reg_120 + 9'd80);

assign icmp_ln12_fu_324_p2 = ((f_0_reg_187 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln203_fu_279_p2 = ((c_0_reg_154 < 3'd3) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_213_p2 = ((r_0_reg_132 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_261_p2 = ((c_0_reg_154 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_0_V_address0 = zext_ln203_9_fu_353_p1;

assign max_pool_out_1_V_address0 = zext_ln203_9_fu_353_p1;

assign max_pool_out_2_0_V_address0 = zext_ln203_10_fu_364_p1;

assign r_fu_219_p2 = (r_0_reg_132 + 3'd1);

assign select_ln203_fu_291_p3 = ((icmp_ln203_fu_279_p2[0:0] === 1'b1) ? c_0_reg_154 : add_ln203_fu_285_p2);

assign tmp_12_fu_243_p3 = {{r_0_reg_132}, {4'd0}};

assign tmp_25_cast_fu_316_p3 = {{add_ln203_3_fu_311_p2}, {4'd0}};

assign tmp_9_fu_299_p3 = phi_mul_reg_165[32'd5];

assign tmp_s_fu_231_p3 = {{r_0_reg_132}, {1'd0}};

assign zext_ln14_fu_336_p1 = i_2_reg_176;

assign zext_ln203_10_fu_364_p1 = add_ln203_5_fu_359_p2;

assign zext_ln203_6_fu_307_p1 = tmp_9_fu_299_p3;

assign zext_ln203_7_fu_340_p1 = f_0_reg_187;

assign zext_ln203_8_fu_344_p1 = f_0_reg_187;

assign zext_ln203_9_fu_353_p1 = add_ln203_4_fu_348_p2;

assign zext_ln203_fu_239_p1 = tmp_s_fu_231_p3;

assign zext_ln9_fu_251_p1 = tmp_12_fu_243_p3;

always @ (posedge ap_clk) begin
    zext_ln203_reg_388[0] <= 1'b0;
    zext_ln203_reg_388[4] <= 1'b0;
    zext_ln9_reg_393[3:0] <= 4'b0000;
    zext_ln9_reg_393[7] <= 1'b0;
    tmp_25_cast_reg_420[3:0] <= 4'b0000;
    zext_ln14_reg_433[63:9] <= 55'b0000000000000000000000000000000000000000000000000000000;
end

endmodule //flat
