-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_V_ce0 : OUT STD_LOGIC;
    flat_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_1_out_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_1_out_0_V_ce0 : OUT STD_LOGIC;
    dense_1_out_0_V_we0 : OUT STD_LOGIC;
    dense_1_out_0_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    dense_1_out_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_1_out_1_V_ce0 : OUT STD_LOGIC;
    dense_1_out_1_V_we0 : OUT STD_LOGIC;
    dense_1_out_1_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    dense_1_out_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_1_out_2_V_ce0 : OUT STD_LOGIC;
    dense_1_out_2_V_we0 : OUT STD_LOGIC;
    dense_1_out_2_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    dense_1_out_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_1_out_3_V_ce0 : OUT STD_LOGIC;
    dense_1_out_3_V_we0 : OUT STD_LOGIC;
    dense_1_out_3_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    dense_1_out_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_1_out_4_V_ce0 : OUT STD_LOGIC;
    dense_1_out_4_V_we0 : OUT STD_LOGIC;
    dense_1_out_4_V_d0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_67 : STD_LOGIC_VECTOR (12 downto 0) := "0000001100111";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln9_fu_259_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln9_reg_439 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_271_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_447 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_277_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_452 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_281_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_457 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_fu_291_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_465 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln1117_10_fu_302_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1117_10_reg_470 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_490 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln22_fu_422_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_190 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul1_reg_201 : STD_LOGIC_VECTOR (12 downto 0);
    signal phi_urem_reg_213 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Val2_s_reg_225 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_237 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_248 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1117_fu_313_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_297_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln203_fu_377_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln19_fu_397_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1117_fu_308_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_430_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_353_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_361_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_353_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_fu_361_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_fu_357_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_365_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_389_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_371_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln22_fu_410_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln22_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cnn_mac_muladd_9skbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_1_dense_1_wibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_1_dense_1_bjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    dense_1_weights_V_U : component dense_1_dense_1_wibs
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_1_bias_V_U : component dense_1_dense_1_bjbC
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    cnn_mac_muladd_9skbM_U22 : component cnn_mac_muladd_9skbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_1_weights_V_q0,
        din1 => flat_array_V_q0,
        din2 => grp_fu_430_p2,
        dout => grp_fu_430_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_190 <= i_reg_447;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_190 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_237 <= j_reg_465;
            elsif (((icmp_ln9_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                j_0_reg_237 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_225 <= grp_fu_430_p3(21 downto 8);
            elsif (((icmp_ln9_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_s_reg_225 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_201_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_mul1_reg_201 <= add_ln9_reg_439;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_201 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_248 <= add_ln1117_10_reg_470;
            elsif (((icmp_ln9_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_248 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    phi_urem_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_urem_reg_213 <= select_ln22_fu_422_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_urem_reg_213 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln13_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln1117_10_reg_470 <= add_ln1117_10_fu_302_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln9_reg_439 <= add_ln9_fu_259_p2;
                i_reg_447 <= i_fu_271_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_465 <= j_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_285_p2 = ap_const_lv1_1))) then
                tmp_7_reg_490 <= phi_mul1_reg_201(12 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln13_reg_457(5 downto 0) <= zext_ln13_fu_281_p1(5 downto 0);
                    zext_ln14_reg_452(5 downto 0) <= zext_ln14_fu_277_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_452(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_457(14 downto 6) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_265_p2, ap_CS_fsm_state3, icmp_ln13_fu_285_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln9_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln1117_10_fu_302_p2 <= std_logic_vector(unsigned(phi_mul_reg_248) + unsigned(ap_const_lv15_32));
    add_ln1117_fu_308_p2 <= std_logic_vector(unsigned(phi_mul_reg_248) + unsigned(zext_ln13_reg_457));
    add_ln203_fu_371_p2 <= std_logic_vector(signed(sext_ln703_fu_361_p1) + signed(trunc_ln703_fu_357_p1));
    add_ln22_fu_410_p2 <= std_logic_vector(unsigned(phi_urem_reg_213) + unsigned(ap_const_lv6_1));
    add_ln703_fu_365_p2 <= std_logic_vector(unsigned(p_Val2_s_reg_225) + unsigned(sext_ln1265_fu_353_p1));
    add_ln9_fu_259_p2 <= std_logic_vector(unsigned(phi_mul1_reg_201) + unsigned(ap_const_lv13_67));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_265_p2)
    begin
        if ((((icmp_ln9_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_265_p2)
    begin
        if (((icmp_ln9_fu_265_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_bias_V_address0 <= zext_ln14_reg_452(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_0_V_address0 <= zext_ln203_fu_381_p1(4 - 1 downto 0);

    dense_1_out_0_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_1_out_0_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_0_V_d0 <= select_ln19_fu_397_p3;

    dense_1_out_0_V_we0_assign_proc : process(ap_CS_fsm_state5, trunc_ln203_fu_377_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_fu_377_p1 = ap_const_lv4_0))) then 
            dense_1_out_0_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_1_V_address0 <= zext_ln203_fu_381_p1(4 - 1 downto 0);

    dense_1_out_1_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_1_out_1_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_1_V_d0 <= select_ln19_fu_397_p3;

    dense_1_out_1_V_we0_assign_proc : process(ap_CS_fsm_state5, trunc_ln203_fu_377_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_fu_377_p1 = ap_const_lv4_1))) then 
            dense_1_out_1_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_2_V_address0 <= zext_ln203_fu_381_p1(4 - 1 downto 0);

    dense_1_out_2_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_1_out_2_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_2_V_d0 <= select_ln19_fu_397_p3;

    dense_1_out_2_V_we0_assign_proc : process(ap_CS_fsm_state5, trunc_ln203_fu_377_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_fu_377_p1 = ap_const_lv4_2))) then 
            dense_1_out_2_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_3_V_address0 <= zext_ln203_fu_381_p1(4 - 1 downto 0);

    dense_1_out_3_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_1_out_3_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_3_V_d0 <= select_ln19_fu_397_p3;

    dense_1_out_3_V_we0_assign_proc : process(ap_CS_fsm_state5, trunc_ln203_fu_377_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (trunc_ln203_fu_377_p1 = ap_const_lv4_3))) then 
            dense_1_out_3_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_4_V_address0 <= zext_ln203_fu_381_p1(4 - 1 downto 0);

    dense_1_out_4_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_1_out_4_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_out_4_V_d0 <= select_ln19_fu_397_p3;

    dense_1_out_4_V_we0_assign_proc : process(ap_CS_fsm_state5, trunc_ln203_fu_377_p1)
    begin
        if ((not((trunc_ln203_fu_377_p1 = ap_const_lv4_0)) and not((trunc_ln203_fu_377_p1 = ap_const_lv4_1)) and not((trunc_ln203_fu_377_p1 = ap_const_lv4_2)) and not((trunc_ln203_fu_377_p1 = ap_const_lv4_3)) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dense_1_out_4_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_fu_313_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_V_address0 <= zext_ln14_1_fu_297_p1(9 - 1 downto 0);

    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_430_p2 <= (p_Val2_s_reg_225 & ap_const_lv8_0);
    i_fu_271_p2 <= std_logic_vector(unsigned(i_0_reg_190) + unsigned(ap_const_lv6_1));
    icmp_ln13_fu_285_p2 <= "1" when (j_0_reg_237 = ap_const_lv9_190) else "0";
    icmp_ln22_fu_416_p2 <= "1" when (unsigned(add_ln22_fu_410_p2) < unsigned(ap_const_lv6_5)) else "0";
    icmp_ln9_fu_265_p2 <= "1" when (i_0_reg_190 = ap_const_lv6_32) else "0";
    j_fu_291_p2 <= std_logic_vector(unsigned(j_0_reg_237) + unsigned(ap_const_lv9_1));
    select_ln19_fu_397_p3 <= 
        ap_const_lv13_0 when (tmp_8_fu_389_p3(0) = '1') else 
        add_ln203_fu_371_p2;
    select_ln22_fu_422_p3 <= 
        add_ln22_fu_410_p2 when (icmp_ln22_fu_416_p2(0) = '1') else 
        ap_const_lv6_0;
    sext_ln1265_fu_353_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_353_p0),14));

    sext_ln703_fu_361_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_361_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_361_p0),13));

    tmp_8_fu_389_p3 <= add_ln703_fu_365_p2(13 downto 13);
    trunc_ln203_fu_377_p1 <= phi_urem_reg_213(4 - 1 downto 0);
    trunc_ln703_fu_357_p1 <= p_Val2_s_reg_225(13 - 1 downto 0);
    zext_ln1117_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_308_p2),64));
    zext_ln13_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_190),15));
    zext_ln14_1_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_237),64));
    zext_ln14_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_190),64));
    zext_ln203_fu_381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_reg_490),64));
end behav;
