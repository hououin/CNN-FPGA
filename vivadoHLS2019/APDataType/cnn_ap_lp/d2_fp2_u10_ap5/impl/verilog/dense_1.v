// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        flat_array_V_address0,
        flat_array_V_ce0,
        flat_array_V_q0,
        dense_1_out_0_V_address0,
        dense_1_out_0_V_ce0,
        dense_1_out_0_V_we0,
        dense_1_out_0_V_d0,
        dense_1_out_1_V_address0,
        dense_1_out_1_V_ce0,
        dense_1_out_1_V_we0,
        dense_1_out_1_V_d0,
        dense_1_out_2_V_address0,
        dense_1_out_2_V_ce0,
        dense_1_out_2_V_we0,
        dense_1_out_2_V_d0,
        dense_1_out_3_V_address0,
        dense_1_out_3_V_ce0,
        dense_1_out_3_V_we0,
        dense_1_out_3_V_d0,
        dense_1_out_4_V_address0,
        dense_1_out_4_V_ce0,
        dense_1_out_4_V_we0,
        dense_1_out_4_V_d0
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] flat_array_V_address0;
output   flat_array_V_ce0;
input  [13:0] flat_array_V_q0;
output  [3:0] dense_1_out_0_V_address0;
output   dense_1_out_0_V_ce0;
output   dense_1_out_0_V_we0;
output  [12:0] dense_1_out_0_V_d0;
output  [3:0] dense_1_out_1_V_address0;
output   dense_1_out_1_V_ce0;
output   dense_1_out_1_V_we0;
output  [12:0] dense_1_out_1_V_d0;
output  [3:0] dense_1_out_2_V_address0;
output   dense_1_out_2_V_ce0;
output   dense_1_out_2_V_we0;
output  [12:0] dense_1_out_2_V_d0;
output  [3:0] dense_1_out_3_V_address0;
output   dense_1_out_3_V_ce0;
output   dense_1_out_3_V_we0;
output  [12:0] dense_1_out_3_V_d0;
output  [3:0] dense_1_out_4_V_address0;
output   dense_1_out_4_V_ce0;
output   dense_1_out_4_V_we0;
output  [12:0] dense_1_out_4_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg flat_array_V_ce0;
reg dense_1_out_0_V_ce0;
reg dense_1_out_0_V_we0;
reg dense_1_out_1_V_ce0;
reg dense_1_out_1_V_we0;
reg dense_1_out_2_V_ce0;
reg dense_1_out_2_V_we0;
reg dense_1_out_3_V_ce0;
reg dense_1_out_3_V_we0;
reg dense_1_out_4_V_ce0;
reg dense_1_out_4_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [14:0] dense_1_weights_V_address0;
reg    dense_1_weights_V_ce0;
wire  signed [8:0] dense_1_weights_V_q0;
wire   [5:0] dense_1_bias_V_address0;
reg    dense_1_bias_V_ce0;
wire   [5:0] dense_1_bias_V_q0;
wire   [12:0] add_ln9_fu_259_p2;
reg   [12:0] add_ln9_reg_439;
wire    ap_CS_fsm_state2;
wire   [5:0] i_fu_271_p2;
reg   [5:0] i_reg_447;
wire   [63:0] zext_ln14_fu_277_p1;
reg   [63:0] zext_ln14_reg_452;
wire   [0:0] icmp_ln9_fu_265_p2;
wire   [14:0] zext_ln13_fu_281_p1;
reg   [14:0] zext_ln13_reg_457;
wire   [8:0] j_fu_291_p2;
reg   [8:0] j_reg_465;
wire    ap_CS_fsm_state3;
wire   [14:0] add_ln1117_10_fu_302_p2;
reg   [14:0] add_ln1117_10_reg_470;
wire   [0:0] icmp_ln13_fu_285_p2;
reg   [3:0] tmp_7_reg_490;
wire    ap_CS_fsm_state4;
wire   [5:0] select_ln22_fu_422_p3;
wire    ap_CS_fsm_state5;
reg   [5:0] i_0_reg_190;
reg   [12:0] phi_mul1_reg_201;
reg   [5:0] phi_urem_reg_213;
reg   [13:0] p_Val2_s_reg_225;
reg   [8:0] j_0_reg_237;
reg   [14:0] phi_mul_reg_248;
wire   [63:0] zext_ln1117_fu_313_p1;
wire   [63:0] zext_ln14_1_fu_297_p1;
wire   [63:0] zext_ln203_fu_381_p1;
wire   [3:0] trunc_ln203_fu_377_p1;
wire   [12:0] select_ln19_fu_397_p3;
wire   [14:0] add_ln1117_fu_308_p2;
wire  signed [21:0] grp_fu_430_p3;
wire  signed [5:0] sext_ln1265_fu_353_p0;
wire  signed [5:0] sext_ln703_fu_361_p0;
wire  signed [13:0] sext_ln1265_fu_353_p1;
wire  signed [12:0] sext_ln703_fu_361_p1;
wire   [12:0] trunc_ln703_fu_357_p1;
wire   [13:0] add_ln703_fu_365_p2;
wire   [0:0] tmp_8_fu_389_p3;
wire   [12:0] add_ln203_fu_371_p2;
wire   [5:0] add_ln22_fu_410_p2;
wire   [0:0] icmp_ln22_fu_416_p2;
wire   [21:0] grp_fu_430_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

dense_1_dense_1_wibs #(
    .DataWidth( 9 ),
    .AddressRange( 20000 ),
    .AddressWidth( 15 ))
dense_1_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_weights_V_address0),
    .ce0(dense_1_weights_V_ce0),
    .q0(dense_1_weights_V_q0)
);

dense_1_dense_1_bjbC #(
    .DataWidth( 6 ),
    .AddressRange( 50 ),
    .AddressWidth( 6 ))
dense_1_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_bias_V_address0),
    .ce0(dense_1_bias_V_ce0),
    .q0(dense_1_bias_V_q0)
);

cnn_mac_muladd_9skbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 14 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_9skbM_U22(
    .din0(dense_1_weights_V_q0),
    .din1(flat_array_V_q0),
    .din2(grp_fu_430_p2),
    .dout(grp_fu_430_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_0_reg_190 <= i_reg_447;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_0_reg_190 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_0_reg_237 <= j_reg_465;
    end else if (((icmp_ln9_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        j_0_reg_237 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        p_Val2_s_reg_225 <= {{grp_fu_430_p3[21:8]}};
    end else if (((icmp_ln9_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_s_reg_225 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_mul1_reg_201 <= add_ln9_reg_439;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul1_reg_201 <= 13'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        phi_mul_reg_248 <= add_ln1117_10_reg_470;
    end else if (((icmp_ln9_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_mul_reg_248 <= 15'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        phi_urem_reg_213 <= select_ln22_fu_422_p3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_urem_reg_213 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln13_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln1117_10_reg_470 <= add_ln1117_10_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln9_reg_439 <= add_ln9_fu_259_p2;
        i_reg_447 <= i_fu_271_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_465 <= j_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_285_p2 == 1'd1))) begin
        tmp_7_reg_490 <= {{phi_mul1_reg_201[12:9]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln13_reg_457[5 : 0] <= zext_ln13_fu_281_p1[5 : 0];
        zext_ln14_reg_452[5 : 0] <= zext_ln14_fu_277_p1[5 : 0];
    end
end

always @ (*) begin
    if ((((icmp_ln9_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln9_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_1_bias_V_ce0 = 1'b1;
    end else begin
        dense_1_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_1_out_0_V_ce0 = 1'b1;
    end else begin
        dense_1_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_377_p1 == 4'd0))) begin
        dense_1_out_0_V_we0 = 1'b1;
    end else begin
        dense_1_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_1_out_1_V_ce0 = 1'b1;
    end else begin
        dense_1_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_377_p1 == 4'd1))) begin
        dense_1_out_1_V_we0 = 1'b1;
    end else begin
        dense_1_out_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_1_out_2_V_ce0 = 1'b1;
    end else begin
        dense_1_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_377_p1 == 4'd2))) begin
        dense_1_out_2_V_we0 = 1'b1;
    end else begin
        dense_1_out_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_1_out_3_V_ce0 = 1'b1;
    end else begin
        dense_1_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_fu_377_p1 == 4'd3))) begin
        dense_1_out_3_V_we0 = 1'b1;
    end else begin
        dense_1_out_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_1_out_4_V_ce0 = 1'b1;
    end else begin
        dense_1_out_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_fu_377_p1 == 4'd0) & ~(trunc_ln203_fu_377_p1 == 4'd1) & ~(trunc_ln203_fu_377_p1 == 4'd2) & ~(trunc_ln203_fu_377_p1 == 4'd3) & (1'b1 == ap_CS_fsm_state5))) begin
        dense_1_out_4_V_we0 = 1'b1;
    end else begin
        dense_1_out_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_1_weights_V_ce0 = 1'b1;
    end else begin
        dense_1_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        flat_array_V_ce0 = 1'b1;
    end else begin
        flat_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln9_fu_265_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1117_10_fu_302_p2 = (phi_mul_reg_248 + 15'd50);

assign add_ln1117_fu_308_p2 = (phi_mul_reg_248 + zext_ln13_reg_457);

assign add_ln203_fu_371_p2 = ($signed(sext_ln703_fu_361_p1) + $signed(trunc_ln703_fu_357_p1));

assign add_ln22_fu_410_p2 = (phi_urem_reg_213 + 6'd1);

assign add_ln703_fu_365_p2 = ($signed(p_Val2_s_reg_225) + $signed(sext_ln1265_fu_353_p1));

assign add_ln9_fu_259_p2 = (phi_mul1_reg_201 + 13'd103);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign dense_1_bias_V_address0 = zext_ln14_reg_452;

assign dense_1_out_0_V_address0 = zext_ln203_fu_381_p1;

assign dense_1_out_0_V_d0 = select_ln19_fu_397_p3;

assign dense_1_out_1_V_address0 = zext_ln203_fu_381_p1;

assign dense_1_out_1_V_d0 = select_ln19_fu_397_p3;

assign dense_1_out_2_V_address0 = zext_ln203_fu_381_p1;

assign dense_1_out_2_V_d0 = select_ln19_fu_397_p3;

assign dense_1_out_3_V_address0 = zext_ln203_fu_381_p1;

assign dense_1_out_3_V_d0 = select_ln19_fu_397_p3;

assign dense_1_out_4_V_address0 = zext_ln203_fu_381_p1;

assign dense_1_out_4_V_d0 = select_ln19_fu_397_p3;

assign dense_1_weights_V_address0 = zext_ln1117_fu_313_p1;

assign flat_array_V_address0 = zext_ln14_1_fu_297_p1;

assign grp_fu_430_p2 = {{p_Val2_s_reg_225}, {8'd0}};

assign i_fu_271_p2 = (i_0_reg_190 + 6'd1);

assign icmp_ln13_fu_285_p2 = ((j_0_reg_237 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln22_fu_416_p2 = ((add_ln22_fu_410_p2 < 6'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_265_p2 = ((i_0_reg_190 == 6'd50) ? 1'b1 : 1'b0);

assign j_fu_291_p2 = (j_0_reg_237 + 9'd1);

assign select_ln19_fu_397_p3 = ((tmp_8_fu_389_p3[0:0] === 1'b1) ? 13'd0 : add_ln203_fu_371_p2);

assign select_ln22_fu_422_p3 = ((icmp_ln22_fu_416_p2[0:0] === 1'b1) ? add_ln22_fu_410_p2 : 6'd0);

assign sext_ln1265_fu_353_p0 = dense_1_bias_V_q0;

assign sext_ln1265_fu_353_p1 = sext_ln1265_fu_353_p0;

assign sext_ln703_fu_361_p0 = dense_1_bias_V_q0;

assign sext_ln703_fu_361_p1 = sext_ln703_fu_361_p0;

assign tmp_8_fu_389_p3 = add_ln703_fu_365_p2[32'd13];

assign trunc_ln203_fu_377_p1 = phi_urem_reg_213[3:0];

assign trunc_ln703_fu_357_p1 = p_Val2_s_reg_225[12:0];

assign zext_ln1117_fu_313_p1 = add_ln1117_fu_308_p2;

assign zext_ln13_fu_281_p1 = i_0_reg_190;

assign zext_ln14_1_fu_297_p1 = j_0_reg_237;

assign zext_ln14_fu_277_p1 = i_0_reg_190;

assign zext_ln203_fu_381_p1 = tmp_7_reg_490;

always @ (posedge ap_clk) begin
    zext_ln14_reg_452[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    zext_ln13_reg_457[14:6] <= 9'b000000000;
end

endmodule //dense_1
