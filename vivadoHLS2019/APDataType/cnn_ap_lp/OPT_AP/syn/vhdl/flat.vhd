-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    flat_array_0_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_0_V_ce0 : OUT STD_LOGIC;
    flat_array_0_V_we0 : OUT STD_LOGIC;
    flat_array_0_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_1_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_1_V_ce0 : OUT STD_LOGIC;
    flat_array_1_V_we0 : OUT STD_LOGIC;
    flat_array_1_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_2_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_2_V_ce0 : OUT STD_LOGIC;
    flat_array_2_V_we0 : OUT STD_LOGIC;
    flat_array_2_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_3_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_3_V_ce0 : OUT STD_LOGIC;
    flat_array_3_V_we0 : OUT STD_LOGIC;
    flat_array_3_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_4_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_4_V_ce0 : OUT STD_LOGIC;
    flat_array_4_V_we0 : OUT STD_LOGIC;
    flat_array_4_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_5_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_5_V_ce0 : OUT STD_LOGIC;
    flat_array_5_V_we0 : OUT STD_LOGIC;
    flat_array_5_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_6_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_6_V_ce0 : OUT STD_LOGIC;
    flat_array_6_V_we0 : OUT STD_LOGIC;
    flat_array_6_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_7_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_7_V_ce0 : OUT STD_LOGIC;
    flat_array_7_V_we0 : OUT STD_LOGIC;
    flat_array_7_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_8_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_8_V_ce0 : OUT STD_LOGIC;
    flat_array_8_V_we0 : OUT STD_LOGIC;
    flat_array_8_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_9_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_9_V_ce0 : OUT STD_LOGIC;
    flat_array_9_V_we0 : OUT STD_LOGIC;
    flat_array_9_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_10_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_10_V_ce0 : OUT STD_LOGIC;
    flat_array_10_V_we0 : OUT STD_LOGIC;
    flat_array_10_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_11_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_11_V_ce0 : OUT STD_LOGIC;
    flat_array_11_V_we0 : OUT STD_LOGIC;
    flat_array_11_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_12_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_12_V_ce0 : OUT STD_LOGIC;
    flat_array_12_V_we0 : OUT STD_LOGIC;
    flat_array_12_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_13_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_13_V_ce0 : OUT STD_LOGIC;
    flat_array_13_V_we0 : OUT STD_LOGIC;
    flat_array_13_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_14_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_14_V_ce0 : OUT STD_LOGIC;
    flat_array_14_V_we0 : OUT STD_LOGIC;
    flat_array_14_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_15_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_15_V_ce0 : OUT STD_LOGIC;
    flat_array_15_V_we0 : OUT STD_LOGIC;
    flat_array_15_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_16_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_16_V_ce0 : OUT STD_LOGIC;
    flat_array_16_V_we0 : OUT STD_LOGIC;
    flat_array_16_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_17_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_17_V_ce0 : OUT STD_LOGIC;
    flat_array_17_V_we0 : OUT STD_LOGIC;
    flat_array_17_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_18_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_18_V_ce0 : OUT STD_LOGIC;
    flat_array_18_V_we0 : OUT STD_LOGIC;
    flat_array_18_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_19_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_19_V_ce0 : OUT STD_LOGIC;
    flat_array_19_V_we0 : OUT STD_LOGIC;
    flat_array_19_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_20_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_20_V_ce0 : OUT STD_LOGIC;
    flat_array_20_V_we0 : OUT STD_LOGIC;
    flat_array_20_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_21_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_21_V_ce0 : OUT STD_LOGIC;
    flat_array_21_V_we0 : OUT STD_LOGIC;
    flat_array_21_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_22_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_22_V_ce0 : OUT STD_LOGIC;
    flat_array_22_V_we0 : OUT STD_LOGIC;
    flat_array_22_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_23_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_23_V_ce0 : OUT STD_LOGIC;
    flat_array_23_V_we0 : OUT STD_LOGIC;
    flat_array_23_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_24_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    flat_array_24_V_ce0 : OUT STD_LOGIC;
    flat_array_24_V_we0 : OUT STD_LOGIC;
    flat_array_24_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv9_19 : STD_LOGIC_VECTOR (8 downto 0) := "000011001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv20_290 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001010010000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten17_reg_537 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_0_reg_548 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_559 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_570 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_581 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_592 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_603 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_614 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln6_fu_625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln6_reg_901 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln6_fu_631_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln15_3_fu_679_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_3_reg_910 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln6_fu_705_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_4_fu_725_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_5_fu_739_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_5_reg_927 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln15_6_fu_747_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_6_reg_932 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln9_fu_755_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_reg_943 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter1_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter2_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter3_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter4_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter5_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter6_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter7_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter8_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter9_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter10_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_13_reg_943_pp0_iter11_reg : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln15_1_fu_782_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_788_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln9_1_fu_800_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_6_fu_848_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter5_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter6_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter7_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter8_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter9_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_6_reg_963_pp0_iter10_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_phi_mux_r_0_phi_fu_563_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_c_0_phi_fu_596_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_12_fu_854_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_865_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln203_fu_858_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln9_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_fu_643_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_fu_637_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln12_fu_693_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln15_fu_687_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln15_1_fu_663_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln15_fu_655_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal and_ln15_fu_699_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_2_fu_719_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln15_2_fu_671_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln15_fu_733_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_713_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_763_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln203_fu_894_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln9_fu_794_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_fu_811_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_10_fu_818_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_9_fu_808_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln15_fu_828_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_fu_822_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_5_fu_831_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_11_fu_845_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_23_cast_fu_837_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_763_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln203_fu_862_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln203_fu_894_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln203_fu_894_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln203_fu_894_p10 : STD_LOGIC_VECTOR (19 downto 0);

    component cnn_urem_9ns_6ns_bjl IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_mul_mul_11ns_bkl IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    cnn_urem_9ns_6ns_bjl_U298 : component cnn_urem_9ns_6ns_bjl
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 6,
        dout_WIDTH => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => select_ln15_4_fu_725_p3,
        din1 => grp_fu_763_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_763_p2);

    cnn_mul_mul_11ns_bkl_U299 : component cnn_mul_mul_11ns_bkl
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln203_fu_894_p0,
        din1 => mul_ln203_fu_894_p1,
        dout => mul_ln203_fu_894_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_592_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_901 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_592 <= select_ln15_6_reg_932;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_592 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_614_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                f_0_reg_614 <= f_fu_788_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_614 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_548_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_548 <= select_ln6_fu_705_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_548 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_581_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_1_reg_581 <= select_ln9_fu_755_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_1_reg_581 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_2_reg_603_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_603 <= add_ln15_1_fu_782_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_2_reg_603 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten17_reg_537_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten17_reg_537 <= add_ln6_fu_631_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten17_reg_537 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_570_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_570 <= select_ln9_1_fu_800_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_570 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    r_0_reg_559_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_901 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_0_reg_559 <= select_ln15_3_reg_910;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_559 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_reg_901 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln203_6_reg_963 <= add_ln203_6_fu_848_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln203_6_reg_963_pp0_iter10_reg <= add_ln203_6_reg_963_pp0_iter9_reg;
                add_ln203_6_reg_963_pp0_iter2_reg <= add_ln203_6_reg_963;
                add_ln203_6_reg_963_pp0_iter3_reg <= add_ln203_6_reg_963_pp0_iter2_reg;
                add_ln203_6_reg_963_pp0_iter4_reg <= add_ln203_6_reg_963_pp0_iter3_reg;
                add_ln203_6_reg_963_pp0_iter5_reg <= add_ln203_6_reg_963_pp0_iter4_reg;
                add_ln203_6_reg_963_pp0_iter6_reg <= add_ln203_6_reg_963_pp0_iter5_reg;
                add_ln203_6_reg_963_pp0_iter7_reg <= add_ln203_6_reg_963_pp0_iter6_reg;
                add_ln203_6_reg_963_pp0_iter8_reg <= add_ln203_6_reg_963_pp0_iter7_reg;
                add_ln203_6_reg_963_pp0_iter9_reg <= add_ln203_6_reg_963_pp0_iter8_reg;
                tmp_13_reg_943_pp0_iter10_reg <= tmp_13_reg_943_pp0_iter9_reg;
                tmp_13_reg_943_pp0_iter11_reg <= tmp_13_reg_943_pp0_iter10_reg;
                tmp_13_reg_943_pp0_iter2_reg <= tmp_13_reg_943_pp0_iter1_reg;
                tmp_13_reg_943_pp0_iter3_reg <= tmp_13_reg_943_pp0_iter2_reg;
                tmp_13_reg_943_pp0_iter4_reg <= tmp_13_reg_943_pp0_iter3_reg;
                tmp_13_reg_943_pp0_iter5_reg <= tmp_13_reg_943_pp0_iter4_reg;
                tmp_13_reg_943_pp0_iter6_reg <= tmp_13_reg_943_pp0_iter5_reg;
                tmp_13_reg_943_pp0_iter7_reg <= tmp_13_reg_943_pp0_iter6_reg;
                tmp_13_reg_943_pp0_iter8_reg <= tmp_13_reg_943_pp0_iter7_reg;
                tmp_13_reg_943_pp0_iter9_reg <= tmp_13_reg_943_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln6_reg_901 <= icmp_ln6_fu_625_p2;
                tmp_13_reg_943_pp0_iter1_reg <= tmp_13_reg_943;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln15_3_reg_910 <= select_ln15_3_fu_679_p3;
                select_ln15_6_reg_932 <= select_ln15_6_fu_747_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln6_fu_625_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln15_5_reg_927 <= select_ln15_5_fu_739_p3;
                tmp_13_reg_943 <= mul_ln203_fu_894_p2(19 downto 14);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln6_fu_625_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln6_fu_625_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln6_fu_625_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln15_1_fu_782_p2 <= std_logic_vector(unsigned(select_ln15_4_fu_725_p3) + unsigned(ap_const_lv9_1));
    add_ln15_2_fu_719_p2 <= std_logic_vector(unsigned(ap_const_lv9_10) + unsigned(select_ln15_fu_655_p3));
    add_ln15_fu_643_p2 <= std_logic_vector(unsigned(ap_const_lv9_50) + unsigned(i_0_reg_548));
    add_ln203_5_fu_831_p2 <= std_logic_vector(unsigned(zext_ln15_fu_828_p1) + unsigned(add_ln203_fu_822_p2));
    add_ln203_6_fu_848_p2 <= std_logic_vector(unsigned(zext_ln203_11_fu_845_p1) + unsigned(tmp_23_cast_fu_837_p3));
    add_ln203_fu_822_p2 <= std_logic_vector(unsigned(zext_ln203_10_fu_818_p1) + unsigned(zext_ln203_9_fu_808_p1));
    add_ln6_fu_631_p2 <= std_logic_vector(unsigned(indvar_flatten17_reg_537) + unsigned(ap_const_lv9_1));
    add_ln9_fu_794_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_570) + unsigned(ap_const_lv8_1));
    and_ln15_fu_699_p2 <= (xor_ln15_fu_687_p2 and icmp_ln12_fu_693_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln6_fu_625_p2)
    begin
        if ((icmp_ln6_fu_625_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_596_p4_assign_proc : process(c_0_reg_592, icmp_ln6_reg_901, ap_CS_fsm_pp0_stage0, select_ln15_6_reg_932, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln6_reg_901 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_596_p4 <= select_ln15_6_reg_932;
        else 
            ap_phi_mux_c_0_phi_fu_596_p4 <= c_0_reg_592;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_563_p4_assign_proc : process(r_0_reg_559, icmp_ln6_reg_901, ap_CS_fsm_pp0_stage0, select_ln15_3_reg_910, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln6_reg_901 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_563_p4 <= select_ln15_3_reg_910;
        else 
            ap_phi_mux_r_0_phi_fu_563_p4 <= r_0_reg_559;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_713_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(select_ln15_1_fu_663_p3));
    f_fu_788_p2 <= std_logic_vector(unsigned(select_ln15_5_fu_739_p3) + unsigned(ap_const_lv5_1));
    flat_array_0_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_0_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_0_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_0_V_d0 <= max_pool_out_V_q0;

    flat_array_0_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_0_V_we0 <= ap_const_logic_1;
        else 
            flat_array_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_10_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_10_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_10_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_10_V_d0 <= max_pool_out_V_q0;

    flat_array_10_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_10_V_we0 <= ap_const_logic_1;
        else 
            flat_array_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_11_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_11_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_11_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_11_V_d0 <= max_pool_out_V_q0;

    flat_array_11_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_B) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_11_V_we0 <= ap_const_logic_1;
        else 
            flat_array_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_12_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_12_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_12_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_12_V_d0 <= max_pool_out_V_q0;

    flat_array_12_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_C) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_12_V_we0 <= ap_const_logic_1;
        else 
            flat_array_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_13_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_13_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_13_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_13_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_13_V_d0 <= max_pool_out_V_q0;

    flat_array_13_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_D) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_13_V_we0 <= ap_const_logic_1;
        else 
            flat_array_13_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_14_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_14_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_14_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_14_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_14_V_d0 <= max_pool_out_V_q0;

    flat_array_14_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_E) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_14_V_we0 <= ap_const_logic_1;
        else 
            flat_array_14_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_15_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_15_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_15_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_15_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_15_V_d0 <= max_pool_out_V_q0;

    flat_array_15_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_F) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_15_V_we0 <= ap_const_logic_1;
        else 
            flat_array_15_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_16_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_16_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_16_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_16_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_16_V_d0 <= max_pool_out_V_q0;

    flat_array_16_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_10) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_16_V_we0 <= ap_const_logic_1;
        else 
            flat_array_16_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_17_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_17_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_17_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_17_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_17_V_d0 <= max_pool_out_V_q0;

    flat_array_17_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_11) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_17_V_we0 <= ap_const_logic_1;
        else 
            flat_array_17_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_18_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_18_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_18_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_18_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_18_V_d0 <= max_pool_out_V_q0;

    flat_array_18_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_12) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_18_V_we0 <= ap_const_logic_1;
        else 
            flat_array_18_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_19_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_19_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_19_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_19_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_19_V_d0 <= max_pool_out_V_q0;

    flat_array_19_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_13) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_19_V_we0 <= ap_const_logic_1;
        else 
            flat_array_19_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_1_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_1_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_1_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_1_V_d0 <= max_pool_out_V_q0;

    flat_array_1_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_1_V_we0 <= ap_const_logic_1;
        else 
            flat_array_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_20_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_20_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_20_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_20_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_20_V_d0 <= max_pool_out_V_q0;

    flat_array_20_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_14) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_20_V_we0 <= ap_const_logic_1;
        else 
            flat_array_20_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_21_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_21_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_21_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_21_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_21_V_d0 <= max_pool_out_V_q0;

    flat_array_21_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_15) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_21_V_we0 <= ap_const_logic_1;
        else 
            flat_array_21_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_22_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_22_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_22_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_22_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_22_V_d0 <= max_pool_out_V_q0;

    flat_array_22_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_16) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_22_V_we0 <= ap_const_logic_1;
        else 
            flat_array_22_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_23_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_23_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_23_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_23_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_23_V_d0 <= max_pool_out_V_q0;

    flat_array_23_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_17) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_23_V_we0 <= ap_const_logic_1;
        else 
            flat_array_23_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_24_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_24_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_24_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_24_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_24_V_d0 <= max_pool_out_V_q0;

    flat_array_24_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if ((not((trunc_ln203_fu_858_p1 = ap_const_lv6_0)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_1)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_2)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_3)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_4)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_5)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_6)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_7)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_8)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_9)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_A)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_B)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_C)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_D)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_E)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_F)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_10)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_11)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_12)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_13)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_14)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_15)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_16)) and not((trunc_ln203_fu_858_p1 = ap_const_lv6_17)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_24_V_we0 <= ap_const_logic_1;
        else 
            flat_array_24_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_2_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_2_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_2_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_2_V_d0 <= max_pool_out_V_q0;

    flat_array_2_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_2_V_we0 <= ap_const_logic_1;
        else 
            flat_array_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_3_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_3_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_3_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_3_V_d0 <= max_pool_out_V_q0;

    flat_array_3_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_3_V_we0 <= ap_const_logic_1;
        else 
            flat_array_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_4_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_4_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_4_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_4_V_d0 <= max_pool_out_V_q0;

    flat_array_4_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_4_V_we0 <= ap_const_logic_1;
        else 
            flat_array_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_5_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_5_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_5_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_5_V_d0 <= max_pool_out_V_q0;

    flat_array_5_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_5_V_we0 <= ap_const_logic_1;
        else 
            flat_array_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_6_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_6_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_6_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_6_V_d0 <= max_pool_out_V_q0;

    flat_array_6_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_6_V_we0 <= ap_const_logic_1;
        else 
            flat_array_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_7_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_7_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_7_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_7_V_d0 <= max_pool_out_V_q0;

    flat_array_7_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_7_V_we0 <= ap_const_logic_1;
        else 
            flat_array_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_8_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_8_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_8_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_8_V_d0 <= max_pool_out_V_q0;

    flat_array_8_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_8_V_we0 <= ap_const_logic_1;
        else 
            flat_array_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_9_V_address0 <= zext_ln203_fu_865_p1(4 - 1 downto 0);

    flat_array_9_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_9_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_9_V_d0 <= max_pool_out_V_q0;

    flat_array_9_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter12, trunc_ln203_fu_858_p1)
    begin
        if (((trunc_ln203_fu_858_p1 = ap_const_lv6_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter12 = ap_const_logic_1))) then 
            flat_array_9_V_we0 <= ap_const_logic_1;
        else 
            flat_array_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_763_p1 <= ap_const_lv9_19(6 - 1 downto 0);
    icmp_ln12_fu_693_p2 <= "1" when (f_0_reg_614 = ap_const_lv5_10) else "0";
    icmp_ln6_fu_625_p2 <= "1" when (indvar_flatten17_reg_537 = ap_const_lv9_190) else "0";
    icmp_ln9_fu_649_p2 <= "1" when (indvar_flatten_reg_570 = ap_const_lv8_50) else "0";
    max_pool_out_V_address0 <= zext_ln203_12_fu_854_p1(9 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1))) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln203_fu_894_p0 <= ap_const_lv20_290(11 - 1 downto 0);
    mul_ln203_fu_894_p1 <= mul_ln203_fu_894_p10(9 - 1 downto 0);
    mul_ln203_fu_894_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_4_fu_725_p3),20));
    or_ln15_fu_733_p2 <= (icmp_ln9_fu_649_p2 or and_ln15_fu_699_p2);
    r_fu_637_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(ap_phi_mux_r_0_phi_fu_563_p4));
    select_ln15_1_fu_663_p3 <= 
        ap_const_lv3_0 when (icmp_ln9_fu_649_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_596_p4;
    select_ln15_2_fu_671_p3 <= 
        add_ln15_fu_643_p2 when (icmp_ln9_fu_649_p2(0) = '1') else 
        i_2_reg_603;
    select_ln15_3_fu_679_p3 <= 
        r_fu_637_p2 when (icmp_ln9_fu_649_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_563_p4;
    select_ln15_4_fu_725_p3 <= 
        add_ln15_2_fu_719_p2 when (and_ln15_fu_699_p2(0) = '1') else 
        select_ln15_2_fu_671_p3;
    select_ln15_5_fu_739_p3 <= 
        ap_const_lv5_0 when (or_ln15_fu_733_p2(0) = '1') else 
        f_0_reg_614;
    select_ln15_6_fu_747_p3 <= 
        c_fu_713_p2 when (and_ln15_fu_699_p2(0) = '1') else 
        select_ln15_1_fu_663_p3;
    select_ln15_fu_655_p3 <= 
        add_ln15_fu_643_p2 when (icmp_ln9_fu_649_p2(0) = '1') else 
        i_1_reg_581;
    select_ln6_fu_705_p3 <= 
        add_ln15_fu_643_p2 when (icmp_ln9_fu_649_p2(0) = '1') else 
        i_0_reg_548;
    select_ln9_1_fu_800_p3 <= 
        ap_const_lv8_1 when (icmp_ln9_fu_649_p2(0) = '1') else 
        add_ln9_fu_794_p2;
    select_ln9_fu_755_p3 <= 
        add_ln15_2_fu_719_p2 when (and_ln15_fu_699_p2(0) = '1') else 
        select_ln15_fu_655_p3;
        sext_ln203_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_13_reg_943_pp0_iter11_reg),9));

    tmp_23_cast_fu_837_p3 <= (add_ln203_5_fu_831_p2 & ap_const_lv4_0);
    tmp_fu_811_p3 <= (select_ln15_3_reg_910 & ap_const_lv2_0);
    trunc_ln203_fu_858_p1 <= grp_fu_763_p2(6 - 1 downto 0);
    xor_ln15_fu_687_p2 <= (icmp_ln9_fu_649_p2 xor ap_const_lv1_1);
    zext_ln15_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_6_reg_932),6));
    zext_ln203_10_fu_818_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_811_p3),6));
    zext_ln203_11_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_5_reg_927),10));
    zext_ln203_12_fu_854_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_reg_963_pp0_iter10_reg),64));
    zext_ln203_9_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln15_3_reg_910),6));
    zext_ln203_fu_865_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln203_fu_862_p1),64));
end behav;
