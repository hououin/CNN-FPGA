// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_2_HH_
#define _max_pool_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct max_pool_2 : public sc_module {
    // Port declarations 16
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > conv_out_V_address0;
    sc_out< sc_logic > conv_out_V_ce0;
    sc_in< sc_lv<14> > conv_out_V_q0;
    sc_out< sc_lv<11> > conv_out_V_address1;
    sc_out< sc_logic > conv_out_V_ce1;
    sc_in< sc_lv<14> > conv_out_V_q1;
    sc_out< sc_lv<9> > max_pool_out_V_address0;
    sc_out< sc_logic > max_pool_out_V_ce0;
    sc_out< sc_logic > max_pool_out_V_we0;
    sc_out< sc_lv<14> > max_pool_out_V_d0;


    // Module declarations
    max_pool_2(sc_module_name name);
    SC_HAS_PROCESS(max_pool_2);

    ~max_pool_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<10> > indvar_flatten59_reg_120;
    sc_signal< sc_lv<5> > f_0_reg_131;
    sc_signal< sc_lv<7> > indvar_flatten22_reg_142;
    sc_signal< sc_lv<3> > r_0_reg_153;
    sc_signal< sc_lv<5> > indvar_flatten_reg_164;
    sc_signal< sc_lv<3> > c_0_reg_175;
    sc_signal< sc_lv<14> > max_0_reg_186;
    sc_signal< sc_lv<2> > mpr_0_reg_198;
    sc_signal< sc_lv<1> > icmp_ln10_fu_223_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_659;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > add_ln10_fu_229_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > select_ln29_3_fu_255_p3;
    sc_signal< sc_lv<5> > select_ln29_3_reg_668;
    sc_signal< sc_lv<3> > select_ln13_2_fu_349_p3;
    sc_signal< sc_lv<3> > select_ln13_2_reg_674;
    sc_signal< sc_lv<1> > or_ln16_1_fu_403_p2;
    sc_signal< sc_lv<1> > or_ln16_1_reg_681;
    sc_signal< sc_lv<3> > select_ln16_4_fu_455_p3;
    sc_signal< sc_lv<3> > select_ln16_4_reg_686;
    sc_signal< sc_lv<2> > mpr_fu_533_p2;
    sc_signal< sc_lv<2> > mpr_reg_702;
    sc_signal< sc_lv<5> > select_ln16_5_fu_545_p3;
    sc_signal< sc_lv<7> > select_ln13_5_fu_559_p3;
    sc_signal< sc_lv<14> > select_ln29_1_fu_617_p3;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_lv<5> > ap_phi_mux_f_0_phi_fu_135_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_r_0_phi_fu_157_p4;
    sc_signal< sc_lv<3> > ap_phi_mux_c_0_phi_fu_179_p4;
    sc_signal< sc_lv<2> > ap_phi_mux_mpr_0_phi_fu_202_p4;
    sc_signal< sc_lv<64> > zext_ln1494_1_fu_503_p1;
    sc_signal< sc_lv<64> > zext_ln1494_2_fu_528_p1;
    sc_signal< sc_lv<64> > zext_ln203_3_fu_654_p1;
    sc_signal< sc_lv<1> > icmp_ln20_1_fu_626_p2;
    sc_signal< sc_lv<4> > shl_ln1_fu_209_p3;
    sc_signal< sc_lv<1> > icmp_ln13_fu_241_p2;
    sc_signal< sc_lv<5> > f_fu_235_p2;
    sc_signal< sc_lv<4> > shl_ln_fu_267_p3;
    sc_signal< sc_lv<1> > icmp_ln20_fu_289_p2;
    sc_signal< sc_lv<1> > xor_ln29_fu_283_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_301_p2;
    sc_signal< sc_lv<3> > select_ln29_2_fu_247_p3;
    sc_signal< sc_lv<1> > and_ln29_1_fu_307_p2;
    sc_signal< sc_lv<1> > or_ln13_fu_319_p2;
    sc_signal< sc_lv<3> > r_fu_313_p2;
    sc_signal< sc_lv<4> > shl_ln26_mid1_fu_333_p3;
    sc_signal< sc_lv<4> > select_ln29_4_fu_275_p3;
    sc_signal< sc_lv<4> > or_ln27_fu_217_p2;
    sc_signal< sc_lv<1> > xor_ln13_fu_373_p2;
    sc_signal< sc_lv<1> > and_ln29_fu_295_p2;
    sc_signal< sc_lv<1> > or_ln13_1_fu_379_p2;
    sc_signal< sc_lv<3> > select_ln13_fu_325_p3;
    sc_signal< sc_lv<1> > and_ln13_fu_385_p2;
    sc_signal< sc_lv<1> > or_ln16_fu_397_p2;
    sc_signal< sc_lv<3> > c_fu_391_p2;
    sc_signal< sc_lv<4> > shl_ln27_mid1_fu_417_p3;
    sc_signal< sc_lv<4> > select_ln13_3_fu_357_p3;
    sc_signal< sc_lv<4> > select_ln16_2_fu_425_p3;
    sc_signal< sc_lv<4> > or_ln27_1_fu_437_p2;
    sc_signal< sc_lv<4> > select_ln13_4_fu_365_p3;
    sc_signal< sc_lv<4> > select_ln16_3_fu_443_p3;
    sc_signal< sc_lv<2> > select_ln16_1_fu_409_p3;
    sc_signal< sc_lv<4> > select_ln13_1_fu_341_p3;
    sc_signal< sc_lv<4> > zext_ln20_fu_463_p1;
    sc_signal< sc_lv<4> > i_fu_467_p2;
    sc_signal< sc_lv<4> > mul_ln1494_fu_477_p0;
    sc_signal< sc_lv<8> > zext_ln16_fu_433_p1;
    sc_signal< sc_lv<8> > mul_ln1494_fu_477_p2;
    sc_signal< sc_lv<8> > add_ln1494_fu_483_p2;
    sc_signal< sc_lv<12> > zext_ln26_1_fu_263_p1;
    sc_signal< sc_lv<12> > tmp_2_cast_fu_489_p3;
    sc_signal< sc_lv<12> > add_ln1494_1_fu_497_p2;
    sc_signal< sc_lv<8> > zext_ln16_1_fu_451_p1;
    sc_signal< sc_lv<8> > add_ln1494_2_fu_508_p2;
    sc_signal< sc_lv<12> > tmp_4_cast_fu_514_p3;
    sc_signal< sc_lv<12> > add_ln1494_3_fu_522_p2;
    sc_signal< sc_lv<5> > add_ln16_fu_539_p2;
    sc_signal< sc_lv<7> > add_ln13_1_fu_553_p2;
    sc_signal< sc_lv<5> > tmp_fu_573_p3;
    sc_signal< sc_lv<6> > zext_ln203_1_fu_580_p1;
    sc_signal< sc_lv<6> > zext_ln203_fu_570_p1;
    sc_signal< sc_lv<14> > select_ln16_fu_590_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_fu_597_p2;
    sc_signal< sc_lv<14> > select_ln29_fu_603_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_1_fu_611_p2;
    sc_signal< sc_lv<6> > add_ln203_fu_584_p2;
    sc_signal< sc_lv<6> > zext_ln203_2_fu_631_p1;
    sc_signal< sc_lv<6> > add_ln203_1_fu_634_p2;
    sc_signal< sc_lv<10> > tmp_7_cast_fu_640_p3;
    sc_signal< sc_lv<10> > zext_ln26_fu_567_p1;
    sc_signal< sc_lv<10> > add_ln203_2_fu_648_p2;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<8> > mul_ln1494_fu_477_p00;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<7> ap_const_lv7_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<10> ap_const_lv10_320;
    static const sc_lv<10> ap_const_lv10_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<7> ap_const_lv7_32;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<5> ap_const_lv5_A;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_B;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<7> ap_const_lv7_1;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_229_p2();
    void thread_add_ln13_1_fu_553_p2();
    void thread_add_ln1494_1_fu_497_p2();
    void thread_add_ln1494_2_fu_508_p2();
    void thread_add_ln1494_3_fu_522_p2();
    void thread_add_ln1494_fu_483_p2();
    void thread_add_ln16_fu_539_p2();
    void thread_add_ln203_1_fu_634_p2();
    void thread_add_ln203_2_fu_648_p2();
    void thread_add_ln203_fu_584_p2();
    void thread_and_ln13_fu_385_p2();
    void thread_and_ln29_1_fu_307_p2();
    void thread_and_ln29_fu_295_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_c_0_phi_fu_179_p4();
    void thread_ap_phi_mux_f_0_phi_fu_135_p4();
    void thread_ap_phi_mux_mpr_0_phi_fu_202_p4();
    void thread_ap_phi_mux_r_0_phi_fu_157_p4();
    void thread_ap_ready();
    void thread_c_fu_391_p2();
    void thread_conv_out_V_address0();
    void thread_conv_out_V_address1();
    void thread_conv_out_V_ce0();
    void thread_conv_out_V_ce1();
    void thread_f_fu_235_p2();
    void thread_i_fu_467_p2();
    void thread_icmp_ln10_fu_223_p2();
    void thread_icmp_ln13_fu_241_p2();
    void thread_icmp_ln1494_1_fu_611_p2();
    void thread_icmp_ln1494_fu_597_p2();
    void thread_icmp_ln16_fu_301_p2();
    void thread_icmp_ln20_1_fu_626_p2();
    void thread_icmp_ln20_fu_289_p2();
    void thread_max_pool_out_V_address0();
    void thread_max_pool_out_V_ce0();
    void thread_max_pool_out_V_d0();
    void thread_max_pool_out_V_we0();
    void thread_mpr_fu_533_p2();
    void thread_mul_ln1494_fu_477_p0();
    void thread_mul_ln1494_fu_477_p00();
    void thread_mul_ln1494_fu_477_p2();
    void thread_or_ln13_1_fu_379_p2();
    void thread_or_ln13_fu_319_p2();
    void thread_or_ln16_1_fu_403_p2();
    void thread_or_ln16_fu_397_p2();
    void thread_or_ln27_1_fu_437_p2();
    void thread_or_ln27_fu_217_p2();
    void thread_r_fu_313_p2();
    void thread_select_ln13_1_fu_341_p3();
    void thread_select_ln13_2_fu_349_p3();
    void thread_select_ln13_3_fu_357_p3();
    void thread_select_ln13_4_fu_365_p3();
    void thread_select_ln13_5_fu_559_p3();
    void thread_select_ln13_fu_325_p3();
    void thread_select_ln16_1_fu_409_p3();
    void thread_select_ln16_2_fu_425_p3();
    void thread_select_ln16_3_fu_443_p3();
    void thread_select_ln16_4_fu_455_p3();
    void thread_select_ln16_5_fu_545_p3();
    void thread_select_ln16_fu_590_p3();
    void thread_select_ln29_1_fu_617_p3();
    void thread_select_ln29_2_fu_247_p3();
    void thread_select_ln29_3_fu_255_p3();
    void thread_select_ln29_4_fu_275_p3();
    void thread_select_ln29_fu_603_p3();
    void thread_shl_ln1_fu_209_p3();
    void thread_shl_ln26_mid1_fu_333_p3();
    void thread_shl_ln27_mid1_fu_417_p3();
    void thread_shl_ln_fu_267_p3();
    void thread_tmp_2_cast_fu_489_p3();
    void thread_tmp_4_cast_fu_514_p3();
    void thread_tmp_7_cast_fu_640_p3();
    void thread_tmp_fu_573_p3();
    void thread_xor_ln13_fu_373_p2();
    void thread_xor_ln29_fu_283_p2();
    void thread_zext_ln1494_1_fu_503_p1();
    void thread_zext_ln1494_2_fu_528_p1();
    void thread_zext_ln16_1_fu_451_p1();
    void thread_zext_ln16_fu_433_p1();
    void thread_zext_ln203_1_fu_580_p1();
    void thread_zext_ln203_2_fu_631_p1();
    void thread_zext_ln203_3_fu_654_p1();
    void thread_zext_ln203_fu_570_p1();
    void thread_zext_ln20_fu_463_p1();
    void thread_zext_ln26_1_fu_263_p1();
    void thread_zext_ln26_fu_567_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
