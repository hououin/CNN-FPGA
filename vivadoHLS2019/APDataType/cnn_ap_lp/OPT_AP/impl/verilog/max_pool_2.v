// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_q0,
        conv_out_V_address1,
        conv_out_V_ce1,
        conv_out_V_q1,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_we0,
        max_pool_out_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state4 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv_out_V_address0;
output   conv_out_V_ce0;
input  [13:0] conv_out_V_q0;
output  [10:0] conv_out_V_address1;
output   conv_out_V_ce1;
input  [13:0] conv_out_V_q1;
output  [8:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
output   max_pool_out_V_we0;
output  [13:0] max_pool_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_V_ce0;
reg conv_out_V_ce1;
reg max_pool_out_V_ce0;
reg max_pool_out_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [9:0] indvar_flatten59_reg_120;
reg   [4:0] f_0_reg_131;
reg   [6:0] indvar_flatten22_reg_142;
reg   [2:0] r_0_reg_153;
reg   [4:0] indvar_flatten_reg_164;
reg   [2:0] c_0_reg_175;
reg   [13:0] max_0_reg_186;
reg   [1:0] mpr_0_reg_198;
wire   [0:0] icmp_ln10_fu_223_p2;
reg   [0:0] icmp_ln10_reg_659;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [9:0] add_ln10_fu_229_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln29_3_fu_255_p3;
reg   [4:0] select_ln29_3_reg_668;
wire   [2:0] select_ln13_2_fu_349_p3;
reg   [2:0] select_ln13_2_reg_674;
wire   [0:0] or_ln16_1_fu_403_p2;
reg   [0:0] or_ln16_1_reg_681;
wire   [2:0] select_ln16_4_fu_455_p3;
reg   [2:0] select_ln16_4_reg_686;
wire   [1:0] mpr_fu_533_p2;
reg   [1:0] mpr_reg_702;
wire   [4:0] select_ln16_5_fu_545_p3;
wire   [6:0] select_ln13_5_fu_559_p3;
wire   [13:0] select_ln29_1_fu_617_p3;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [4:0] ap_phi_mux_f_0_phi_fu_135_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_r_0_phi_fu_157_p4;
reg   [2:0] ap_phi_mux_c_0_phi_fu_179_p4;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_202_p4;
wire   [63:0] zext_ln1494_1_fu_503_p1;
wire   [63:0] zext_ln1494_2_fu_528_p1;
wire   [63:0] zext_ln203_3_fu_654_p1;
wire   [0:0] icmp_ln20_1_fu_626_p2;
wire   [3:0] shl_ln1_fu_209_p3;
wire   [0:0] icmp_ln13_fu_241_p2;
wire   [4:0] f_fu_235_p2;
wire   [3:0] shl_ln_fu_267_p3;
wire   [0:0] icmp_ln20_fu_289_p2;
wire   [0:0] xor_ln29_fu_283_p2;
wire   [0:0] icmp_ln16_fu_301_p2;
wire   [2:0] select_ln29_2_fu_247_p3;
wire   [0:0] and_ln29_1_fu_307_p2;
wire   [0:0] or_ln13_fu_319_p2;
wire   [2:0] r_fu_313_p2;
wire   [3:0] shl_ln26_mid1_fu_333_p3;
wire   [3:0] select_ln29_4_fu_275_p3;
wire   [3:0] or_ln27_fu_217_p2;
wire   [0:0] xor_ln13_fu_373_p2;
wire   [0:0] and_ln29_fu_295_p2;
wire   [0:0] or_ln13_1_fu_379_p2;
wire   [2:0] select_ln13_fu_325_p3;
wire   [0:0] and_ln13_fu_385_p2;
wire   [0:0] or_ln16_fu_397_p2;
wire   [2:0] c_fu_391_p2;
wire   [3:0] shl_ln27_mid1_fu_417_p3;
wire   [3:0] select_ln13_3_fu_357_p3;
wire   [3:0] select_ln16_2_fu_425_p3;
wire   [3:0] or_ln27_1_fu_437_p2;
wire   [3:0] select_ln13_4_fu_365_p3;
wire   [3:0] select_ln16_3_fu_443_p3;
wire   [1:0] select_ln16_1_fu_409_p3;
wire   [3:0] select_ln13_1_fu_341_p3;
wire   [3:0] zext_ln20_fu_463_p1;
wire   [3:0] i_fu_467_p2;
wire   [3:0] mul_ln1494_fu_477_p0;
wire   [7:0] zext_ln16_fu_433_p1;
wire   [7:0] mul_ln1494_fu_477_p2;
wire   [7:0] add_ln1494_fu_483_p2;
wire   [11:0] zext_ln26_1_fu_263_p1;
wire   [11:0] tmp_2_cast_fu_489_p3;
wire   [11:0] add_ln1494_1_fu_497_p2;
wire   [7:0] zext_ln16_1_fu_451_p1;
wire   [7:0] add_ln1494_2_fu_508_p2;
wire   [11:0] tmp_4_cast_fu_514_p3;
wire   [11:0] add_ln1494_3_fu_522_p2;
wire   [4:0] add_ln16_fu_539_p2;
wire   [6:0] add_ln13_1_fu_553_p2;
wire   [4:0] tmp_fu_573_p3;
wire   [5:0] zext_ln203_1_fu_580_p1;
wire   [5:0] zext_ln203_fu_570_p1;
wire   [13:0] select_ln16_fu_590_p3;
wire   [0:0] icmp_ln1494_fu_597_p2;
wire   [13:0] select_ln29_fu_603_p3;
wire   [0:0] icmp_ln1494_1_fu_611_p2;
wire   [5:0] add_ln203_fu_584_p2;
wire   [5:0] zext_ln203_2_fu_631_p1;
wire   [5:0] add_ln203_1_fu_634_p2;
wire   [9:0] tmp_7_cast_fu_640_p3;
wire   [9:0] zext_ln26_fu_567_p1;
wire   [9:0] add_ln203_2_fu_648_p2;
wire    ap_CS_fsm_state4;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [7:0] mul_ln1494_fu_477_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_175 <= select_ln16_4_reg_686;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_175 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        f_0_reg_131 <= select_ln29_3_reg_668;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_131 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten22_reg_142 <= select_ln13_5_fu_559_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten22_reg_142 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten59_reg_120 <= add_ln10_fu_229_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_120 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_164 <= select_ln16_5_fu_545_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_164 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_0_reg_186 <= select_ln29_1_fu_617_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_0_reg_186 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpr_0_reg_198 <= mpr_reg_702;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mpr_0_reg_198 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        r_0_reg_153 <= select_ln13_2_reg_674;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_153 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_659 <= icmp_ln10_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_223_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpr_reg_702 <= mpr_fu_533_p2;
        select_ln13_2_reg_674 <= select_ln13_2_fu_349_p3;
        select_ln16_4_reg_686 <= select_ln16_4_fu_455_p3;
        select_ln29_3_reg_668 <= select_ln29_3_fu_255_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_223_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        or_ln16_1_reg_681 <= or_ln16_1_fu_403_p2;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_223_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_179_p4 = select_ln16_4_reg_686;
    end else begin
        ap_phi_mux_c_0_phi_fu_179_p4 = c_0_reg_175;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_135_p4 = select_ln29_3_reg_668;
    end else begin
        ap_phi_mux_f_0_phi_fu_135_p4 = f_0_reg_131;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_202_p4 = mpr_reg_702;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_202_p4 = mpr_0_reg_198;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_659 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_157_p4 = select_ln13_2_reg_674;
    end else begin
        ap_phi_mux_r_0_phi_fu_157_p4 = r_0_reg_153;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_V_ce1 = 1'b1;
    end else begin
        conv_out_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_1_fu_626_p2 == 1'd1))) begin
        max_pool_out_V_we0 = 1'b1;
    end else begin
        max_pool_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((icmp_ln10_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((icmp_ln10_fu_223_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_229_p2 = (indvar_flatten59_reg_120 + 10'd1);

assign add_ln13_1_fu_553_p2 = (indvar_flatten22_reg_142 + 7'd1);

assign add_ln1494_1_fu_497_p2 = (zext_ln26_1_fu_263_p1 + tmp_2_cast_fu_489_p3);

assign add_ln1494_2_fu_508_p2 = (zext_ln16_1_fu_451_p1 + mul_ln1494_fu_477_p2);

assign add_ln1494_3_fu_522_p2 = (zext_ln26_1_fu_263_p1 + tmp_4_cast_fu_514_p3);

assign add_ln1494_fu_483_p2 = (zext_ln16_fu_433_p1 + mul_ln1494_fu_477_p2);

assign add_ln16_fu_539_p2 = (indvar_flatten_reg_164 + 5'd1);

assign add_ln203_1_fu_634_p2 = (add_ln203_fu_584_p2 + zext_ln203_2_fu_631_p1);

assign add_ln203_2_fu_648_p2 = (tmp_7_cast_fu_640_p3 + zext_ln26_fu_567_p1);

assign add_ln203_fu_584_p2 = (zext_ln203_1_fu_580_p1 + zext_ln203_fu_570_p1);

assign and_ln13_fu_385_p2 = (or_ln13_1_fu_379_p2 & and_ln29_fu_295_p2);

assign and_ln29_1_fu_307_p2 = (xor_ln29_fu_283_p2 & icmp_ln16_fu_301_p2);

assign and_ln29_fu_295_p2 = (xor_ln29_fu_283_p2 & icmp_ln20_fu_289_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_391_p2 = (select_ln13_fu_325_p3 + 3'd1);

assign conv_out_V_address0 = zext_ln1494_1_fu_503_p1;

assign conv_out_V_address1 = zext_ln1494_2_fu_528_p1;

assign f_fu_235_p2 = (ap_phi_mux_f_0_phi_fu_135_p4 + 5'd1);

assign i_fu_467_p2 = (select_ln13_1_fu_341_p3 + zext_ln20_fu_463_p1);

assign icmp_ln10_fu_223_p2 = ((indvar_flatten59_reg_120 == 10'd800) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_241_p2 = ((indvar_flatten22_reg_142 == 7'd50) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_611_p2 = (($signed(conv_out_V_q1) > $signed(select_ln29_fu_603_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_597_p2 = (($signed(conv_out_V_q0) > $signed(select_ln16_fu_590_p3)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_301_p2 = ((indvar_flatten_reg_164 == 5'd10) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_626_p2 = ((mpr_reg_702 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_289_p2 = ((ap_phi_mux_mpr_0_phi_fu_202_p4 == 2'd2) ? 1'b1 : 1'b0);

assign max_pool_out_V_address0 = zext_ln203_3_fu_654_p1;

assign max_pool_out_V_d0 = ((icmp_ln1494_1_fu_611_p2[0:0] === 1'b1) ? conv_out_V_q1 : select_ln29_fu_603_p3);

assign mpr_fu_533_p2 = (select_ln16_1_fu_409_p3 + 2'd1);

assign mul_ln1494_fu_477_p0 = mul_ln1494_fu_477_p00;

assign mul_ln1494_fu_477_p00 = i_fu_467_p2;

assign mul_ln1494_fu_477_p2 = (mul_ln1494_fu_477_p0 * $signed('hB));

assign or_ln13_1_fu_379_p2 = (xor_ln13_fu_373_p2 | icmp_ln13_fu_241_p2);

assign or_ln13_fu_319_p2 = (icmp_ln13_fu_241_p2 | and_ln29_1_fu_307_p2);

assign or_ln16_1_fu_403_p2 = (or_ln16_fu_397_p2 | icmp_ln13_fu_241_p2);

assign or_ln16_fu_397_p2 = (and_ln29_1_fu_307_p2 | and_ln13_fu_385_p2);

assign or_ln27_1_fu_437_p2 = (shl_ln27_mid1_fu_417_p3 | 4'd1);

assign or_ln27_fu_217_p2 = (shl_ln1_fu_209_p3 | 4'd1);

assign r_fu_313_p2 = (select_ln29_2_fu_247_p3 + 3'd1);

assign select_ln13_1_fu_341_p3 = ((and_ln29_1_fu_307_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_333_p3 : select_ln29_4_fu_275_p3);

assign select_ln13_2_fu_349_p3 = ((and_ln29_1_fu_307_p2[0:0] === 1'b1) ? r_fu_313_p2 : select_ln29_2_fu_247_p3);

assign select_ln13_3_fu_357_p3 = ((or_ln13_fu_319_p2[0:0] === 1'b1) ? 4'd0 : shl_ln1_fu_209_p3);

assign select_ln13_4_fu_365_p3 = ((or_ln13_fu_319_p2[0:0] === 1'b1) ? 4'd1 : or_ln27_fu_217_p2);

assign select_ln13_5_fu_559_p3 = ((icmp_ln13_fu_241_p2[0:0] === 1'b1) ? 7'd1 : add_ln13_1_fu_553_p2);

assign select_ln13_fu_325_p3 = ((or_ln13_fu_319_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_c_0_phi_fu_179_p4);

assign select_ln16_1_fu_409_p3 = ((or_ln16_1_fu_403_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_mpr_0_phi_fu_202_p4);

assign select_ln16_2_fu_425_p3 = ((and_ln13_fu_385_p2[0:0] === 1'b1) ? shl_ln27_mid1_fu_417_p3 : select_ln13_3_fu_357_p3);

assign select_ln16_3_fu_443_p3 = ((and_ln13_fu_385_p2[0:0] === 1'b1) ? or_ln27_1_fu_437_p2 : select_ln13_4_fu_365_p3);

assign select_ln16_4_fu_455_p3 = ((and_ln13_fu_385_p2[0:0] === 1'b1) ? c_fu_391_p2 : select_ln13_fu_325_p3);

assign select_ln16_5_fu_545_p3 = ((or_ln13_fu_319_p2[0:0] === 1'b1) ? 5'd1 : add_ln16_fu_539_p2);

assign select_ln16_fu_590_p3 = ((or_ln16_1_reg_681[0:0] === 1'b1) ? 14'd0 : max_0_reg_186);

assign select_ln29_1_fu_617_p3 = ((icmp_ln1494_1_fu_611_p2[0:0] === 1'b1) ? conv_out_V_q1 : select_ln29_fu_603_p3);

assign select_ln29_2_fu_247_p3 = ((icmp_ln13_fu_241_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_r_0_phi_fu_157_p4);

assign select_ln29_3_fu_255_p3 = ((icmp_ln13_fu_241_p2[0:0] === 1'b1) ? f_fu_235_p2 : ap_phi_mux_f_0_phi_fu_135_p4);

assign select_ln29_4_fu_275_p3 = ((icmp_ln13_fu_241_p2[0:0] === 1'b1) ? 4'd0 : shl_ln_fu_267_p3);

assign select_ln29_fu_603_p3 = ((icmp_ln1494_fu_597_p2[0:0] === 1'b1) ? conv_out_V_q0 : select_ln16_fu_590_p3);

assign shl_ln1_fu_209_p3 = {{ap_phi_mux_c_0_phi_fu_179_p4}, {1'd0}};

assign shl_ln26_mid1_fu_333_p3 = {{r_fu_313_p2}, {1'd0}};

assign shl_ln27_mid1_fu_417_p3 = {{c_fu_391_p2}, {1'd0}};

assign shl_ln_fu_267_p3 = {{ap_phi_mux_r_0_phi_fu_157_p4}, {1'd0}};

assign tmp_2_cast_fu_489_p3 = {{add_ln1494_fu_483_p2}, {4'd0}};

assign tmp_4_cast_fu_514_p3 = {{add_ln1494_2_fu_508_p2}, {4'd0}};

assign tmp_7_cast_fu_640_p3 = {{add_ln203_1_fu_634_p2}, {4'd0}};

assign tmp_fu_573_p3 = {{select_ln13_2_reg_674}, {2'd0}};

assign xor_ln13_fu_373_p2 = (icmp_ln16_fu_301_p2 ^ 1'd1);

assign xor_ln29_fu_283_p2 = (icmp_ln13_fu_241_p2 ^ 1'd1);

assign zext_ln1494_1_fu_503_p1 = add_ln1494_1_fu_497_p2;

assign zext_ln1494_2_fu_528_p1 = add_ln1494_3_fu_522_p2;

assign zext_ln16_1_fu_451_p1 = select_ln16_3_fu_443_p3;

assign zext_ln16_fu_433_p1 = select_ln16_2_fu_425_p3;

assign zext_ln203_1_fu_580_p1 = tmp_fu_573_p3;

assign zext_ln203_2_fu_631_p1 = select_ln16_4_reg_686;

assign zext_ln203_3_fu_654_p1 = add_ln203_2_fu_648_p2;

assign zext_ln203_fu_570_p1 = select_ln13_2_reg_674;

assign zext_ln20_fu_463_p1 = select_ln16_1_fu_409_p3;

assign zext_ln26_1_fu_263_p1 = select_ln29_3_fu_255_p3;

assign zext_ln26_fu_567_p1 = select_ln29_3_reg_668;

endmodule //max_pool_2
