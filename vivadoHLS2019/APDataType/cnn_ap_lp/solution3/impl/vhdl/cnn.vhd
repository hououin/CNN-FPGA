-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    cnn_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    cnn_input_ce0 : OUT STD_LOGIC;
    cnn_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    prediction_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_output_ce0 : OUT STD_LOGIC;
    prediction_output_we0 : OUT STD_LOGIC;
    prediction_output_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "cnn,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=20.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=16.990188,HLS_SYN_LAT=466870,HLS_SYN_TPT=none,HLS_SYN_MEM=40,HLS_SYN_DSP=11,HLS_SYN_FF=2648,HLS_SYN_LUT=9743,HLS_VERSION=2019_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp7_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_1C : STD_LOGIC_VECTOR (9 downto 0) := "0000011100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv54_0 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_433 : STD_LOGIC_VECTOR (11 downto 0) := "010000110011";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_FF8 : STD_LOGIC_VECTOR (11 downto 0) := "111111111000";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv12_FD8 : STD_LOGIC_VECTOR (11 downto 0) := "111111011000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv8_9C : STD_LOGIC_VECTOR (7 downto 0) := "10011100";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv10_3F6 : STD_LOGIC_VECTOR (9 downto 0) := "1111110110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_4E : STD_LOGIC_VECTOR (6 downto 0) := "1001110";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv11_790 : STD_LOGIC_VECTOR (10 downto 0) := "11110010000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv9_B0 : STD_LOGIC_VECTOR (8 downto 0) := "010110000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv8_50 : STD_LOGIC_VECTOR (7 downto 0) := "01010000";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFE8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111101000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv14_3FE8 : STD_LOGIC_VECTOR (13 downto 0) := "11111111101000";
    constant ap_const_lv32_FFFFFFE7 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111100111";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv8_7E : STD_LOGIC_VECTOR (7 downto 0) := "01111110";
    constant ap_const_lv8_6 : STD_LOGIC_VECTOR (7 downto 0) := "00000110";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_2_weights_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_2_weights_V_ce0 : STD_LOGIC;
    signal dense_2_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_2_bias_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_bias_V_ce0 : STD_LOGIC;
    signal dense_2_bias_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal indvar_flatten13_reg_931 : STD_LOGIC_VECTOR (11 downto 0);
    signal i14_0_reg_942 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten_reg_953 : STD_LOGIC_VECTOR (7 downto 0);
    signal j15_0_reg_964 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_reg_975 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten39_reg_986 : STD_LOGIC_VECTOR (9 downto 0);
    signal i26_0_reg_997 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten25_reg_1008 : STD_LOGIC_VECTOR (6 downto 0);
    signal j27_0_reg_1019 : STD_LOGIC_VECTOR (3 downto 0);
    signal k28_0_reg_1030 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten65_reg_1041 : STD_LOGIC_VECTOR (10 downto 0);
    signal i39_0_reg_1052 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten51_reg_1063 : STD_LOGIC_VECTOR (8 downto 0);
    signal j40_0_reg_1074 : STD_LOGIC_VECTOR (3 downto 0);
    signal k41_0_reg_1085 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten91_reg_1096 : STD_LOGIC_VECTOR (8 downto 0);
    signal i52_0_reg_1107 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten77_reg_1118 : STD_LOGIC_VECTOR (7 downto 0);
    signal j53_0_reg_1129 : STD_LOGIC_VECTOR (2 downto 0);
    signal k54_0_reg_1140 : STD_LOGIC_VECTOR (4 downto 0);
    signal i55_0_reg_1151 : STD_LOGIC_VECTOR (8 downto 0);
    signal i56_0_reg_1207 : STD_LOGIC_VECTOR (5 downto 0);
    signal i57_0_reg_1252 : STD_LOGIC_VECTOR (4 downto 0);
    signal i58_0_reg_1297 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_1368_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_3165 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ix_in_fu_1374_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ix_in_reg_3170 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln23_fu_1362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln203_fu_1404_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_reg_3175 : STD_LOGIC_VECTOR (10 downto 0);
    signal j_1_fu_1416_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_3183 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln203_10_fu_1426_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_10_reg_3188 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln25_fu_1410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln28_fu_1436_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln28_reg_3198 : STD_LOGIC_VECTOR (9 downto 0);
    signal cnn_input_load_reg_3203 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal select_ln603_3_fu_1717_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_3_reg_3209 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal icmp_ln37_fu_1729_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_3214 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln37_fu_1735_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln40_1_fu_1761_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_1_reg_3223 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_3_fu_1811_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln40_3_reg_3228 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_21_fu_1857_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_21_reg_3233 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_1862_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln38_fu_1874_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln51_fu_1882_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_reg_3253 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state14_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state15_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal add_ln51_fu_1888_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal select_ln54_1_fu_1914_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln54_1_reg_3262 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln54_3_fu_1964_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln54_3_reg_3267 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_26_fu_2010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_26_reg_3272 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_1_fu_2015_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln52_fu_2027_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln65_fu_2035_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_3292 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state19_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal add_ln65_fu_2041_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal select_ln68_1_fu_2067_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln68_1_reg_3301 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln68_3_fu_2117_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln68_3_reg_3306 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln203_29_fu_2146_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_29_reg_3311 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_2_fu_2151_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln66_fu_2163_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln79_fu_2171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln79_reg_3331 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state24_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state25_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal add_ln79_fu_2177_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal select_ln82_1_fu_2203_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_1_reg_3340 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_3_fu_2271_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln82_3_reg_3345 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_33_fu_2307_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_33_reg_3350 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_3_fu_2312_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln80_fu_2324_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln93_fu_2332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_3370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state29_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state30_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal i_9_fu_2338_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal zext_ln94_fu_2344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln94_reg_3379 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_2349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal i_11_fu_2355_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_11_reg_3393 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_2361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_3398 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_fu_2365_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_3404 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_5_fu_2375_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_5_reg_3412 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal add_ln1117_3_fu_2386_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1117_3_reg_3417 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_2369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal icmp_ln103_fu_2468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln103_reg_3442 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state36_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state37_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal i_10_fu_2474_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal zext_ln104_fu_2480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln104_reg_3451 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_1_fu_2485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal i_13_fu_2491_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_13_reg_3465 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln14_2_fu_2497_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_2_reg_3470 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln13_3_fu_2501_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln13_3_reg_3476 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_6_fu_2511_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_6_reg_3484 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal icmp_ln13_1_fu_2505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln112_fu_2628_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln112_reg_3509 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state43_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal i_12_fu_2634_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal zext_ln113_fu_2640_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln113_reg_3518 : STD_LOGIC_VECTOR (63 downto 0);
    signal d_fu_2651_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_3531 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln48_fu_2657_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_3536 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln41_fu_2645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln46_fu_2661_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_reg_3542 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_2671_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_3550 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal icmp_ln46_fu_2665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal icmp_ln119_fu_2758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln119_reg_3575 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp7_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp7_stage0 : signal is "none";
    signal ap_block_state51_pp7_stage0_iter0 : BOOLEAN;
    signal ap_block_state52_pp7_stage0_iter1 : BOOLEAN;
    signal ap_block_state53_pp7_stage0_iter2 : BOOLEAN;
    signal ap_block_pp7_stage0_11001 : BOOLEAN;
    signal icmp_ln119_reg_3575_pp7_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_2764_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp7_iter0 : STD_LOGIC := '0';
    signal zext_ln120_fu_2770_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_3584 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_reg_3584_pp7_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln935_fu_2775_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln935_reg_3594 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_41_fu_2781_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_41_reg_3599 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_V_13_fu_2795_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_13_reg_3604 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln944_fu_2829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln944_reg_3609 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_2939_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_3615 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln958_fu_2947_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln958_reg_3620 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln943_fu_2953_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln943_reg_3625 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_conv_1_fu_1318_ap_ready : STD_LOGIC;
    signal grp_conv_1_fu_1318_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal grp_max_pool_1_fu_1340_ap_ready : STD_LOGIC;
    signal grp_max_pool_1_fu_1340_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state14 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal grp_conv_2_fu_1308_ap_ready : STD_LOGIC;
    signal grp_conv_2_fu_1308_ap_done : STD_LOGIC;
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state19 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_max_pool_2_fu_1346_ap_ready : STD_LOGIC;
    signal grp_max_pool_2_fu_1346_ap_done : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state24 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal grp_flat_fu_1352_ap_ready : STD_LOGIC;
    signal grp_flat_fu_1352_ap_done : STD_LOGIC;
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state29 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state36 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal grp_soft_max_fu_1328_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_1328_ap_done : STD_LOGIC;
    signal ap_block_pp7_stage0_subdone : BOOLEAN;
    signal ap_condition_pp7_exit_iter0_state51 : STD_LOGIC;
    signal ap_enable_reg_pp7_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp7_iter2 : STD_LOGIC := '0';
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_1_input_V_ce0 : STD_LOGIC;
    signal conv_1_input_V_we0 : STD_LOGIC;
    signal conv_1_input_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_V_ce0 : STD_LOGIC;
    signal conv_1_out_V_we0 : STD_LOGIC;
    signal conv_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_c_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal conv_1_out_c_V_ce0 : STD_LOGIC;
    signal conv_1_out_c_V_we0 : STD_LOGIC;
    signal conv_1_out_c_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_1_out_c_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_V_we0 : STD_LOGIC;
    signal max_pool_1_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_c_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal max_pool_1_out_c_V_ce0 : STD_LOGIC;
    signal max_pool_1_out_c_V_we0 : STD_LOGIC;
    signal max_pool_1_out_c_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_1_out_c_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_V_ce0 : STD_LOGIC;
    signal conv_2_out_V_we0 : STD_LOGIC;
    signal conv_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_c_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_2_out_c_V_ce0 : STD_LOGIC;
    signal conv_2_out_c_V_we0 : STD_LOGIC;
    signal conv_2_out_c_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal conv_2_out_c_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_V_we0 : STD_LOGIC;
    signal max_pool_2_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_c_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal max_pool_2_out_c_V_ce0 : STD_LOGIC;
    signal max_pool_2_out_c_V_we0 : STD_LOGIC;
    signal max_pool_2_out_c_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal max_pool_2_out_c_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_V_ce0 : STD_LOGIC;
    signal flat_array_V_we0 : STD_LOGIC;
    signal flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_c_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal flat_array_c_V_ce0 : STD_LOGIC;
    signal flat_array_c_V_we0 : STD_LOGIC;
    signal flat_array_c_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal flat_array_c_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_V_ce0 : STD_LOGIC;
    signal dense_1_out_V_we0 : STD_LOGIC;
    signal dense_1_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_c_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_c_V_ce0 : STD_LOGIC;
    signal dense_1_out_c_V_we0 : STD_LOGIC;
    signal dense_1_out_c_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_1_out_c_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_V_ce0 : STD_LOGIC;
    signal dense_2_out_V_we0 : STD_LOGIC;
    signal dense_2_out_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_c_V_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal dense_2_out_c_V_ce0 : STD_LOGIC;
    signal dense_2_out_c_V_we0 : STD_LOGIC;
    signal dense_2_out_c_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal dense_2_out_c_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal prediction_V_ce0 : STD_LOGIC;
    signal prediction_V_we0 : STD_LOGIC;
    signal prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal prediction_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_2_fu_1308_ap_start : STD_LOGIC;
    signal grp_conv_2_fu_1308_ap_idle : STD_LOGIC;
    signal grp_conv_2_fu_1308_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_2_fu_1308_input_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_1308_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_conv_2_fu_1308_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_2_fu_1308_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_2_fu_1308_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_conv_1_fu_1318_ap_start : STD_LOGIC;
    signal grp_conv_1_fu_1318_ap_idle : STD_LOGIC;
    signal grp_conv_1_fu_1318_input_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_conv_1_fu_1318_input_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_1318_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_conv_1_fu_1318_conv_out_V_ce0 : STD_LOGIC;
    signal grp_conv_1_fu_1318_conv_out_V_we0 : STD_LOGIC;
    signal grp_conv_1_fu_1318_conv_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_1328_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_1328_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_1328_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_1328_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_1328_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_1328_dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_1328_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_1328_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_1328_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_1328_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_1_fu_1340_ap_start : STD_LOGIC;
    signal grp_max_pool_1_fu_1340_ap_idle : STD_LOGIC;
    signal grp_max_pool_1_fu_1340_conv_out_V_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_max_pool_1_fu_1340_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_1340_max_pool_out_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_max_pool_1_fu_1340_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_1_fu_1340_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_1_fu_1340_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_max_pool_2_fu_1346_ap_start : STD_LOGIC;
    signal grp_max_pool_2_fu_1346_ap_idle : STD_LOGIC;
    signal grp_max_pool_2_fu_1346_conv_out_V_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_max_pool_2_fu_1346_conv_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_1346_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_max_pool_2_fu_1346_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_max_pool_2_fu_1346_max_pool_out_V_we0 : STD_LOGIC;
    signal grp_max_pool_2_fu_1346_max_pool_out_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_flat_fu_1352_ap_start : STD_LOGIC;
    signal grp_flat_fu_1352_ap_idle : STD_LOGIC;
    signal grp_flat_fu_1352_max_pool_out_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_1352_max_pool_out_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_1352_flat_array_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_flat_fu_1352_flat_array_V_ce0 : STD_LOGIC;
    signal grp_flat_fu_1352_flat_array_V_we0 : STD_LOGIC;
    signal grp_flat_fu_1352_flat_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ix_in_0_reg_887 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_0_reg_899 : STD_LOGIC_VECTOR (4 downto 0);
    signal ix_in_1_reg_910 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_0_reg_920 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i14_0_phi_fu_946_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_j15_0_phi_fu_968_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_i26_0_phi_fu_1001_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal ap_phi_mux_j27_0_phi_fu_1023_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i39_0_phi_fu_1056_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal ap_phi_mux_j40_0_phi_fu_1078_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_i52_0_phi_fu_1111_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_phi_mux_j53_0_phi_fu_1133_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_i_reg_1162 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal p_Val2_29_reg_1173 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i_reg_1185 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_1196 : STD_LOGIC_VECTOR (14 downto 0);
    signal i_0_i5_reg_1218 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal p_Val2_32_reg_1229 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_i10_reg_1241 : STD_LOGIC_VECTOR (5 downto 0);
    signal d_0_i_reg_1263 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal p_Val2_38_reg_1274 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_i_reg_1286 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_conv_2_fu_1308_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal grp_conv_1_fu_1318_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_soft_max_fu_1328_ap_start_reg : STD_LOGIC := '0';
    signal grp_max_pool_1_fu_1340_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal grp_max_pool_2_fu_1346_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_flat_fu_1352_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal zext_ln27_fu_1431_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln203_fu_1725_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal zext_ln1117_fu_2397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_2381_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal sext_ln1117_fu_2557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_3_fu_2517_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal zext_ln1116_9_fu_2717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_2677_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp7_stage0 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal select_ln19_fu_2459_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln19_1_fu_2619_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_2_fu_2751_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_fu_1380_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1392_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln203_fu_1388_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_17_fu_1400_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_22_fu_1422_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1358_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ireg_V_fu_1442_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal exp_tmp_V_fu_1458_p4 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln565_fu_1472_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_s_fu_1476_p3 : STD_LOGIC_VECTOR (52 downto 0);
    signal p_Result_40_fu_1484_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal p_Result_39_fu_1450_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal man_V_1_fu_1488_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal trunc_ln556_fu_1446_p1 : STD_LOGIC_VECTOR (62 downto 0);
    signal zext_ln461_fu_1468_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal F2_fu_1508_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln581_fu_1514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln581_fu_1520_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln581_fu_1526_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sh_amt_fu_1532_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal man_V_2_fu_1494_p3 : STD_LOGIC_VECTOR (53 downto 0);
    signal sext_ln581_fu_1540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln586_fu_1566_p1 : STD_LOGIC_VECTOR (53 downto 0);
    signal ashr_ln586_fu_1570_p2 : STD_LOGIC_VECTOR (53 downto 0);
    signal bitcast_ln696_fu_1580_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_1583_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln583_fu_1550_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln581cast_fu_1599_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln571_fu_1502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln582_fu_1544_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln571_fu_1609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln582_fu_1621_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln582_fu_1627_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln585_fu_1554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln581_fu_1633_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln585_fu_1639_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln581_fu_1657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln603_fu_1560_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln581_fu_1663_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln603_fu_1669_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln604_fu_1603_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln586_fu_1576_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln585_1_fu_1651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln585_fu_1645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln588_fu_1591_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal and_ln582_fu_1615_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_fu_1683_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_fu_1675_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln603_1_fu_1689_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln603_1_fu_1697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln603_2_fu_1711_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln603_2_fu_1703_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln38_fu_1747_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_1741_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln39_fu_1779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_fu_1773_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln40_fu_1753_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln40_fu_1785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_1797_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_1791_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_3066_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_1830_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_1823_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_19_fu_1837_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln40_2_fu_1803_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_20_fu_1847_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln203_1_fu_1841_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln203_9_fu_1851_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln38_fu_1868_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln52_fu_1900_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_1894_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln53_fu_1932_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_fu_1926_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln54_fu_1906_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln54_fu_1938_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln54_fu_1950_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_2_fu_1944_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_3076_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_1983_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl2_cast_fu_1976_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_24_fu_1990_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln54_2_fu_1956_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_25_fu_2000_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_2_fu_1994_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_12_fu_2004_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln52_fu_2021_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln66_fu_2053_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_6_fu_2047_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln67_fu_2085_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln68_fu_2079_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_fu_2059_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln68_fu_2091_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln68_fu_2103_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_3_fu_2097_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_3086_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln68_2_fu_2109_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_28_fu_2136_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_39_cast_fu_2129_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_14_fu_2140_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln66_fu_2157_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln80_fu_2189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_2183_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_12_fu_2215_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_30_fu_2211_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_31_fu_2223_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln81_fu_2239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln82_fu_2233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln82_fu_2195_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln82_fu_2245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln82_fu_2257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_4_fu_2251_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln203_15_fu_2227_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln82_fu_2279_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_16_fu_2283_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln82_2_fu_2263_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_42_cast_fu_2289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln203_32_fu_2297_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_17_fu_2301_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln80_fu_2318_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1117_fu_2392_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_3095_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_2427_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_2435_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_2427_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_fu_2435_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_fu_2431_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_fu_2439_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_23_fu_2451_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_2445_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_13_fu_2522_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_14_fu_2534_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_6_fu_2530_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1117_7_fu_2542_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln1117_fu_2546_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1117_2_fu_2552_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_3104_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_1_fu_2587_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln703_2_fu_2595_p0 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1265_1_fu_2587_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln703_2_fu_2595_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln703_1_fu_2591_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln703_1_fu_2599_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_24_fu_2611_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_1_fu_2605_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_15_fu_2682_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_2694_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_8_fu_2702_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_2690_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_2706_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_4_fu_2712_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_3113_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_2_fu_2747_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_2789_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_2803_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_42_fu_2813_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_2821_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_2839_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_2845_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln947_fu_2861_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln947_fu_2865_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln947_fu_2871_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln947_fu_2875_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_36_fu_2881_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln947_fu_2855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln947_1_fu_2887_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_fu_2899_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln944_fu_2835_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln949_fu_2913_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_37_fu_2919_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln949_fu_2907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln949_fu_2927_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_2893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln949_fu_2933_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal m_fu_2957_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln958_fu_2960_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln958_fu_2971_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln958_fu_2965_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln958_fu_2976_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_12_fu_2982_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_13_fu_2989_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_s_fu_2994_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_28_fu_3008_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln964_fu_3016_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln964_fu_3024_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln964_fu_3029_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal m_16_fu_3004_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_3035_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_Result_43_fu_3042_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln739_fu_3054_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_3066_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_3066_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_3066_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_3076_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_3076_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_3076_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_3086_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_3086_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_3086_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_3095_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_3104_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_3104_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_3113_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_3113_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal ap_idle_pp7 : STD_LOGIC;
    signal ap_enable_pp7 : STD_LOGIC;
    signal grp_fu_3066_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_3066_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_3076_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3076_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3086_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3086_p20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_3104_p10 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_3113_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component conv_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component conv_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_V_ce0 : OUT STD_LOGIC;
        input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_we0 : OUT STD_LOGIC;
        conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component max_pool_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        conv_out_V_ce0 : OUT STD_LOGIC;
        conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_we0 : OUT STD_LOGIC;
        max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component flat IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        max_pool_out_V_ce0 : OUT STD_LOGIC;
        max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        flat_array_V_ce0 : OUT STD_LOGIC;
        flat_array_V_we0 : OUT STD_LOGIC;
        flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_fpext_32ns_64udo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component cnn_mac_muladd_5nvdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (4 downto 0);
        din1 : IN STD_LOGIC_VECTOR (5 downto 0);
        din2 : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component cnn_mac_muladd_4nwdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        din2 : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_mac_muladd_9sxdS IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_9syd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_mac_muladd_13zec IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component cnn_dense_1_weighmb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_1_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component cnn_dense_2_weighncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_2_bias_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_weiocq IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component cnn_dense_out_biapcA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component cnn_dense_array_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_input_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_1_ouqcK IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_conv_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_max_pool_2_ousc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_dense_1_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component cnn_dense_2_out_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    dense_1_weights_V_U : component cnn_dense_1_weighmb6
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_1_bias_V_U : component cnn_dense_1_bias_V
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    dense_2_weights_V_U : component cnn_dense_2_weighncg
    generic map (
        DataWidth => 9,
        AddressRange => 1500,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_weights_V_address0,
        ce0 => dense_2_weights_V_ce0,
        q0 => dense_2_weights_V_q0);

    dense_2_bias_V_U : component cnn_dense_2_bias_V
    generic map (
        DataWidth => 9,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_V_address0,
        ce0 => dense_2_bias_V_ce0,
        q0 => dense_2_bias_V_q0);

    dense_out_weights_V_U : component cnn_dense_out_weiocq
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_out_bias_V_U : component cnn_dense_out_biapcA
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_array_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    conv_1_input_V_U : component cnn_conv_1_input_V
    generic map (
        DataWidth => 14,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_input_V_address0,
        ce0 => conv_1_input_V_ce0,
        we0 => conv_1_input_V_we0,
        d0 => select_ln603_3_reg_3209,
        q0 => conv_1_input_V_q0);

    conv_1_out_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_out_V_address0,
        ce0 => conv_1_out_V_ce0,
        we0 => conv_1_out_V_we0,
        d0 => conv_1_out_V_d0,
        q0 => conv_1_out_V_q0);

    conv_1_out_c_V_U : component cnn_conv_1_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 4056,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_1_out_c_V_address0,
        ce0 => conv_1_out_c_V_ce0,
        we0 => conv_1_out_c_V_we0,
        d0 => conv_1_out_c_V_d0,
        q0 => conv_1_out_c_V_q0);

    max_pool_1_out_V_U : component cnn_max_pool_1_ouqcK
    generic map (
        DataWidth => 14,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_1_out_V_address0,
        ce0 => max_pool_1_out_V_ce0,
        we0 => max_pool_1_out_V_we0,
        d0 => max_pool_1_out_V_d0,
        q0 => max_pool_1_out_V_q0);

    max_pool_1_out_c_V_U : component cnn_max_pool_1_ouqcK
    generic map (
        DataWidth => 14,
        AddressRange => 1014,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_1_out_c_V_address0,
        ce0 => max_pool_1_out_c_V_ce0,
        we0 => max_pool_1_out_c_V_we0,
        d0 => max_pool_1_out_c_V_d0,
        q0 => max_pool_1_out_c_V_q0);

    conv_2_out_V_U : component cnn_conv_2_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 1936,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_V_address0,
        ce0 => conv_2_out_V_ce0,
        we0 => conv_2_out_V_we0,
        d0 => conv_2_out_V_d0,
        q0 => conv_2_out_V_q0);

    conv_2_out_c_V_U : component cnn_conv_2_out_V
    generic map (
        DataWidth => 14,
        AddressRange => 1936,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_out_c_V_address0,
        ce0 => conv_2_out_c_V_ce0,
        we0 => conv_2_out_c_V_we0,
        d0 => conv_2_out_c_V_d0,
        q0 => conv_2_out_c_V_q0);

    max_pool_2_out_V_U : component cnn_max_pool_2_ousc4
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_2_out_V_address0,
        ce0 => max_pool_2_out_V_ce0,
        we0 => max_pool_2_out_V_we0,
        d0 => max_pool_2_out_V_d0,
        q0 => max_pool_2_out_V_q0);

    max_pool_2_out_c_V_U : component cnn_max_pool_2_ousc4
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => max_pool_2_out_c_V_address0,
        ce0 => max_pool_2_out_c_V_ce0,
        we0 => max_pool_2_out_c_V_we0,
        d0 => max_pool_2_out_c_V_d0,
        q0 => max_pool_2_out_c_V_q0);

    flat_array_V_U : component cnn_max_pool_2_ousc4
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flat_array_V_address0,
        ce0 => flat_array_V_ce0,
        we0 => flat_array_V_we0,
        d0 => flat_array_V_d0,
        q0 => flat_array_V_q0);

    flat_array_c_V_U : component cnn_max_pool_2_ousc4
    generic map (
        DataWidth => 14,
        AddressRange => 400,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => flat_array_c_V_address0,
        ce0 => flat_array_c_V_ce0,
        we0 => flat_array_c_V_we0,
        d0 => flat_array_c_V_d0,
        q0 => flat_array_c_V_q0);

    dense_1_out_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_out_V_address0,
        ce0 => dense_1_out_V_ce0,
        we0 => dense_1_out_V_we0,
        d0 => dense_1_out_V_d0,
        q0 => dense_1_out_V_q0);

    dense_1_out_c_V_U : component cnn_dense_1_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_out_c_V_address0,
        ce0 => dense_1_out_c_V_ce0,
        we0 => dense_1_out_c_V_we0,
        d0 => dense_1_out_c_V_d0,
        q0 => dense_1_out_c_V_q0);

    dense_2_out_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_out_V_address0,
        ce0 => dense_2_out_V_ce0,
        we0 => dense_2_out_V_we0,
        d0 => dense_2_out_V_d0,
        q0 => dense_2_out_V_q0);

    dense_2_out_c_V_U : component cnn_dense_2_out_V
    generic map (
        DataWidth => 13,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_out_c_V_address0,
        ce0 => dense_2_out_c_V_ce0,
        we0 => dense_2_out_c_V_we0,
        d0 => dense_2_out_c_V_d0,
        q0 => dense_2_out_c_V_q0);

    prediction_V_U : component cnn_dense_array_V
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => prediction_V_address0,
        ce0 => prediction_V_ce0,
        we0 => prediction_V_we0,
        d0 => prediction_V_d0,
        q0 => prediction_V_q0);

    grp_conv_2_fu_1308 : component conv_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_2_fu_1308_ap_start,
        ap_done => grp_conv_2_fu_1308_ap_done,
        ap_idle => grp_conv_2_fu_1308_ap_idle,
        ap_ready => grp_conv_2_fu_1308_ap_ready,
        input_V_address0 => grp_conv_2_fu_1308_input_V_address0,
        input_V_ce0 => grp_conv_2_fu_1308_input_V_ce0,
        input_V_q0 => max_pool_1_out_c_V_q0,
        conv_out_V_address0 => grp_conv_2_fu_1308_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_2_fu_1308_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_2_fu_1308_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_2_fu_1308_conv_out_V_d0);

    grp_conv_1_fu_1318 : component conv_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_conv_1_fu_1318_ap_start,
        ap_done => grp_conv_1_fu_1318_ap_done,
        ap_idle => grp_conv_1_fu_1318_ap_idle,
        ap_ready => grp_conv_1_fu_1318_ap_ready,
        input_V_address0 => grp_conv_1_fu_1318_input_V_address0,
        input_V_ce0 => grp_conv_1_fu_1318_input_V_ce0,
        input_V_q0 => conv_1_input_V_q0,
        conv_out_V_address0 => grp_conv_1_fu_1318_conv_out_V_address0,
        conv_out_V_ce0 => grp_conv_1_fu_1318_conv_out_V_ce0,
        conv_out_V_we0 => grp_conv_1_fu_1318_conv_out_V_we0,
        conv_out_V_d0 => grp_conv_1_fu_1318_conv_out_V_d0);

    grp_soft_max_fu_1328 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_1328_ap_start,
        ap_done => grp_soft_max_fu_1328_ap_done,
        ap_idle => grp_soft_max_fu_1328_ap_idle,
        ap_ready => grp_soft_max_fu_1328_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_1328_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_1328_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_1328_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_1328_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_1328_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_1328_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_1328_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_1328_prediction_V_d0);

    grp_max_pool_1_fu_1340 : component max_pool_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_1_fu_1340_ap_start,
        ap_done => grp_max_pool_1_fu_1340_ap_done,
        ap_idle => grp_max_pool_1_fu_1340_ap_idle,
        ap_ready => grp_max_pool_1_fu_1340_ap_ready,
        conv_out_V_address0 => grp_max_pool_1_fu_1340_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_1_fu_1340_conv_out_V_ce0,
        conv_out_V_q0 => conv_1_out_c_V_q0,
        max_pool_out_V_address0 => grp_max_pool_1_fu_1340_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_1_fu_1340_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_1_fu_1340_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_1_fu_1340_max_pool_out_V_d0);

    grp_max_pool_2_fu_1346 : component max_pool_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_max_pool_2_fu_1346_ap_start,
        ap_done => grp_max_pool_2_fu_1346_ap_done,
        ap_idle => grp_max_pool_2_fu_1346_ap_idle,
        ap_ready => grp_max_pool_2_fu_1346_ap_ready,
        conv_out_V_address0 => grp_max_pool_2_fu_1346_conv_out_V_address0,
        conv_out_V_ce0 => grp_max_pool_2_fu_1346_conv_out_V_ce0,
        conv_out_V_q0 => conv_2_out_c_V_q0,
        max_pool_out_V_address0 => grp_max_pool_2_fu_1346_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_max_pool_2_fu_1346_max_pool_out_V_ce0,
        max_pool_out_V_we0 => grp_max_pool_2_fu_1346_max_pool_out_V_we0,
        max_pool_out_V_d0 => grp_max_pool_2_fu_1346_max_pool_out_V_d0);

    grp_flat_fu_1352 : component flat
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_flat_fu_1352_ap_start,
        ap_done => grp_flat_fu_1352_ap_done,
        ap_idle => grp_flat_fu_1352_ap_idle,
        ap_ready => grp_flat_fu_1352_ap_ready,
        max_pool_out_V_address0 => grp_flat_fu_1352_max_pool_out_V_address0,
        max_pool_out_V_ce0 => grp_flat_fu_1352_max_pool_out_V_ce0,
        max_pool_out_V_q0 => max_pool_2_out_c_V_q0,
        flat_array_V_address0 => grp_flat_fu_1352_flat_array_V_address0,
        flat_array_V_ce0 => grp_flat_fu_1352_flat_array_V_ce0,
        flat_array_V_we0 => grp_flat_fu_1352_flat_array_V_we0,
        flat_array_V_d0 => grp_flat_fu_1352_flat_array_V_d0);

    cnn_fpext_32ns_64udo_U30 : component cnn_fpext_32ns_64udo
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => cnn_input_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_1358_p1);

    cnn_mac_muladd_5nvdy_U31 : component cnn_mac_muladd_5nvdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 5,
        din1_WIDTH => 6,
        din2_WIDTH => 5,
        dout_WIDTH => 10)
    port map (
        din0 => grp_fu_3066_p0,
        din1 => grp_fu_3066_p1,
        din2 => grp_fu_3066_p2,
        dout => grp_fu_3066_p3);

    cnn_mac_muladd_4nwdI_U32 : component cnn_mac_muladd_4nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_3076_p0,
        din1 => grp_fu_3076_p1,
        din2 => grp_fu_3076_p2,
        dout => grp_fu_3076_p3);

    cnn_mac_muladd_4nwdI_U33 : component cnn_mac_muladd_4nwdI
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 4,
        din1_WIDTH => 5,
        din2_WIDTH => 4,
        dout_WIDTH => 8)
    port map (
        din0 => grp_fu_3086_p0,
        din1 => grp_fu_3086_p1,
        din2 => grp_fu_3086_p2,
        dout => grp_fu_3086_p3);

    cnn_mac_muladd_9sxdS_U34 : component cnn_mac_muladd_9sxdS
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_1_weights_V_q0,
        din1 => flat_array_c_V_q0,
        din2 => grp_fu_3095_p2,
        dout => grp_fu_3095_p3);

    cnn_mac_muladd_9syd2_U35 : component cnn_mac_muladd_9syd2
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 13,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_2_weights_V_q0,
        din1 => grp_fu_3104_p1,
        din2 => grp_fu_3104_p2,
        dout => grp_fu_3104_p3);

    cnn_mac_muladd_13zec_U36 : component cnn_mac_muladd_13zec
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_3113_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_3113_p2,
        dout => grp_fu_3113_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state14))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state14);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state19))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state19);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state24) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state24))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state24);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state29) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_flat_fu_1352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state29))) then 
                    ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state29);
                elsif ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                elsif (((grp_flat_fu_1352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state36) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln9_fu_2349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state36))) then 
                    ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state36);
                elsif ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                elsif (((icmp_ln9_fu_2349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                    ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln9_1_fu_2485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state43))) then 
                    ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state43);
                elsif ((ap_const_boolean_0 = ap_block_pp6_stage0_subdone)) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                elsif (((icmp_ln9_1_fu_2485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                    ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp7_exit_iter0_state51) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_0;
                elsif (((grp_soft_max_fu_1328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp7_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp7_exit_iter0_state51)) then 
                        ap_enable_reg_pp7_iter1 <= (ap_const_logic_1 xor ap_condition_pp7_exit_iter0_state51);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp7_iter1 <= ap_enable_reg_pp7_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp7_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp7_stage0_subdone)) then 
                    ap_enable_reg_pp7_iter2 <= ap_enable_reg_pp7_iter1;
                elsif (((grp_soft_max_fu_1328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                    ap_enable_reg_pp7_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_1_fu_1318_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_1_fu_1318_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    grp_conv_1_fu_1318_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_1_fu_1318_ap_ready = ap_const_logic_1)) then 
                    grp_conv_1_fu_1318_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_conv_2_fu_1308_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_conv_2_fu_1308_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                    grp_conv_2_fu_1308_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_conv_2_fu_1308_ap_ready = ap_const_logic_1)) then 
                    grp_conv_2_fu_1308_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_flat_fu_1352_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_flat_fu_1352_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                    grp_flat_fu_1352_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_flat_fu_1352_ap_ready = ap_const_logic_1)) then 
                    grp_flat_fu_1352_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_1_fu_1340_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_1_fu_1340_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    grp_max_pool_1_fu_1340_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_1_fu_1340_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_1_fu_1340_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_max_pool_2_fu_1346_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_max_pool_2_fu_1346_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_max_pool_2_fu_1346_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_max_pool_2_fu_1346_ap_ready = ap_const_logic_1)) then 
                    grp_max_pool_2_fu_1346_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_1328_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_1328_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln41_fu_2645_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state46))) then 
                    grp_soft_max_fu_1328_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_1328_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_1328_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_i_reg_1263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
                d_0_i_reg_1263 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
                d_0_i_reg_1263 <= d_reg_3531;
            end if; 
        end if;
    end process;

    f_0_i_reg_1286_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                f_0_i_reg_1286 <= f_reg_3550;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln41_fu_2645_p2 = ap_const_lv1_0))) then 
                f_0_i_reg_1286 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i14_0_reg_942_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_3214 = ap_const_lv1_0))) then 
                i14_0_reg_942 <= select_ln40_1_reg_3223;
            elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i14_0_reg_942 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i26_0_reg_997_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_reg_3253 = ap_const_lv1_0))) then 
                i26_0_reg_997 <= select_ln54_1_reg_3262;
            elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                i26_0_reg_997 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i39_0_reg_1052_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_reg_3292 = ap_const_lv1_0))) then 
                i39_0_reg_1052 <= select_ln68_1_reg_3301;
            elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                i39_0_reg_1052 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i52_0_reg_1107_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_reg_3331 = ap_const_lv1_0))) then 
                i52_0_reg_1107 <= select_ln82_1_reg_3340;
            elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i52_0_reg_1107 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i55_0_reg_1151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_flat_fu_1352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                i55_0_reg_1151 <= ap_const_lv9_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln93_fu_2332_p2 = ap_const_lv1_0))) then 
                i55_0_reg_1151 <= i_9_fu_2338_p2;
            end if; 
        end if;
    end process;

    i56_0_reg_1207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_2349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then 
                i56_0_reg_1207 <= ap_const_lv6_0;
            elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln103_fu_2468_p2 = ap_const_lv1_0))) then 
                i56_0_reg_1207 <= i_10_fu_2474_p2;
            end if; 
        end if;
    end process;

    i57_0_reg_1252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_1_fu_2485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then 
                i57_0_reg_1252 <= ap_const_lv5_0;
            elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln112_fu_2628_p2 = ap_const_lv1_0))) then 
                i57_0_reg_1252 <= i_12_fu_2634_p2;
            end if; 
        end if;
    end process;

    i58_0_reg_1297_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln119_fu_2758_p2 = ap_const_lv1_0))) then 
                i58_0_reg_1297 <= i_14_fu_2764_p2;
            elsif (((grp_soft_max_fu_1328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then 
                i58_0_reg_1297 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_0_i5_reg_1218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                i_0_i5_reg_1218 <= i_13_reg_3465;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
                i_0_i5_reg_1218 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_i_reg_1162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
                i_0_i_reg_1162 <= i_11_reg_3393;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
                i_0_i_reg_1162 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_0_reg_899_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_1410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_899 <= i_reg_3165;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_899 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten13_reg_931_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_0))) then 
                indvar_flatten13_reg_931 <= add_ln37_fu_1735_p2;
            elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvar_flatten13_reg_931 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    indvar_flatten25_reg_1008_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_0))) then 
                indvar_flatten25_reg_1008 <= select_ln52_fu_2027_p3;
            elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvar_flatten25_reg_1008 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten39_reg_986_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_0))) then 
                indvar_flatten39_reg_986 <= add_ln51_fu_1888_p2;
            elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                indvar_flatten39_reg_986 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten51_reg_1063_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_0))) then 
                indvar_flatten51_reg_1063 <= select_ln66_fu_2163_p3;
            elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                indvar_flatten51_reg_1063 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten65_reg_1041_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_0))) then 
                indvar_flatten65_reg_1041 <= add_ln65_fu_2041_p2;
            elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                indvar_flatten65_reg_1041 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten77_reg_1118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_0))) then 
                indvar_flatten77_reg_1118 <= select_ln80_fu_2324_p3;
            elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                indvar_flatten77_reg_1118 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    indvar_flatten91_reg_1096_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_0))) then 
                indvar_flatten91_reg_1096 <= add_ln79_fu_2177_p2;
            elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                indvar_flatten91_reg_1096 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_953_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_0))) then 
                indvar_flatten_reg_953 <= select_ln38_fu_1874_p3;
            elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                indvar_flatten_reg_953 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ix_in_0_reg_887_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_1410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                ix_in_0_reg_887 <= ix_in_reg_3170;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                ix_in_0_reg_887 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    ix_in_1_reg_910_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                ix_in_1_reg_910 <= add_ln28_reg_3198;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_1362_p2 = ap_const_lv1_0))) then 
                ix_in_1_reg_910 <= ix_in_0_reg_887;
            end if; 
        end if;
    end process;

    j15_0_reg_964_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_3214 = ap_const_lv1_0))) then 
                j15_0_reg_964 <= select_ln40_3_reg_3228;
            elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                j15_0_reg_964 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j27_0_reg_1019_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_reg_3253 = ap_const_lv1_0))) then 
                j27_0_reg_1019 <= select_ln54_3_reg_3267;
            elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                j27_0_reg_1019 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j40_0_reg_1074_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_reg_3292 = ap_const_lv1_0))) then 
                j40_0_reg_1074 <= select_ln68_3_reg_3306;
            elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                j40_0_reg_1074 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j53_0_reg_1129_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_reg_3331 = ap_const_lv1_0))) then 
                j53_0_reg_1129 <= select_ln82_3_reg_3345;
            elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                j53_0_reg_1129 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_i10_reg_1241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                j_0_i10_reg_1241 <= j_6_reg_3484;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln9_1_fu_2485_p2 = ap_const_lv1_0))) then 
                j_0_i10_reg_1241 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_i_reg_1185_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                j_0_i_reg_1185 <= j_5_reg_3412;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln9_fu_2349_p2 = ap_const_lv1_0))) then 
                j_0_i_reg_1185 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_920_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_0_reg_920 <= j_1_reg_3183;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_1362_p2 = ap_const_lv1_0))) then 
                j_0_reg_920 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k28_0_reg_1030_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_0))) then 
                k28_0_reg_1030 <= k_1_fu_2015_p2;
            elsif (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
                k28_0_reg_1030 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k41_0_reg_1085_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_0))) then 
                k41_0_reg_1085 <= k_2_fu_2151_p2;
            elsif (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then 
                k41_0_reg_1085 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k54_0_reg_1140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_0))) then 
                k54_0_reg_1140 <= k_3_fu_2312_p2;
            elsif (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                k54_0_reg_1140 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    k_0_reg_975_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_0))) then 
                k_0_reg_975 <= k_fu_1862_p2;
            elsif (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                k_0_reg_975 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    p_Val2_29_reg_1173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                p_Val2_29_reg_1173 <= grp_fu_3095_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln9_fu_2349_p2 = ap_const_lv1_0))) then 
                p_Val2_29_reg_1173 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_32_reg_1229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                p_Val2_32_reg_1229 <= grp_fu_3104_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln9_1_fu_2485_p2 = ap_const_lv1_0))) then 
                p_Val2_32_reg_1229 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_38_reg_1274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
                p_Val2_38_reg_1274 <= grp_fu_3113_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln41_fu_2645_p2 = ap_const_lv1_0))) then 
                p_Val2_38_reg_1274 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_1196_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
                phi_mul_reg_1196 <= add_ln1117_3_reg_3417;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln9_fu_2349_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_1196 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state33) and (icmp_ln13_fu_2369_p2 = ap_const_lv1_0))) then
                add_ln1117_3_reg_3417 <= add_ln1117_3_fu_2386_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln25_fu_1410_p2 = ap_const_lv1_0))) then
                add_ln203_10_reg_3188 <= add_ln203_10_fu_1426_p2;
                add_ln28_reg_3198 <= add_ln28_fu_1436_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                cnn_input_load_reg_3203 <= cnn_input_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state46)) then
                d_reg_3531 <= d_fu_2651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state47)) then
                f_reg_3550 <= f_fu_2671_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                i_11_reg_3393 <= i_11_fu_2355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                i_13_reg_3465 <= i_13_fu_2491_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_3165 <= i_fu_1368_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                icmp_ln103_reg_3442 <= icmp_ln103_fu_2468_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                icmp_ln112_reg_3509 <= icmp_ln112_fu_2628_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0))) then
                icmp_ln119_reg_3575 <= icmp_ln119_fu_2758_p2;
                icmp_ln119_reg_3575_pp7_iter1_reg <= icmp_ln119_reg_3575;
                    zext_ln120_reg_3584_pp7_iter1_reg(3 downto 0) <= zext_ln120_reg_3584(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln37_reg_3214 <= icmp_ln37_fu_1729_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln51_reg_3253 <= icmp_ln51_fu_1882_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln65_reg_3292 <= icmp_ln65_fu_2035_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln79_reg_3331 <= icmp_ln79_fu_2171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln119_reg_3575 = ap_const_lv1_0))) then
                icmp_ln935_reg_3594 <= icmp_ln935_fu_2775_p2;
                icmp_ln958_reg_3620 <= icmp_ln958_fu_2947_p2;
                    or_ln_reg_3615(0) <= or_ln_fu_2939_p3(0);
                p_Result_41_reg_3599 <= prediction_V_q0(13 downto 13);
                sub_ln944_reg_3609 <= sub_ln944_fu_2829_p2;
                tmp_V_13_reg_3604 <= tmp_V_13_fu_2795_p3;
                trunc_ln943_reg_3625 <= trunc_ln943_fu_2953_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                icmp_ln93_reg_3370 <= icmp_ln93_fu_2332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_1362_p2 = ap_const_lv1_0))) then
                ix_in_reg_3170 <= ix_in_fu_1374_p2;
                    sub_ln203_reg_3175(10 downto 2) <= sub_ln203_fu_1404_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_1_reg_3183 <= j_1_fu_1416_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state33)) then
                j_5_reg_3412 <= j_5_fu_2375_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state40)) then
                j_6_reg_3484 <= j_6_fu_2511_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_0))) then
                select_ln40_1_reg_3223 <= select_ln40_1_fu_1761_p3;
                select_ln40_3_reg_3228 <= select_ln40_3_fu_1811_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_0))) then
                select_ln54_1_reg_3262 <= select_ln54_1_fu_1914_p3;
                select_ln54_3_reg_3267 <= select_ln54_3_fu_1964_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                select_ln603_3_reg_3209 <= select_ln603_3_fu_1717_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_0))) then
                select_ln68_1_reg_3301 <= select_ln68_1_fu_2067_p3;
                select_ln68_3_reg_3306 <= select_ln68_3_fu_2117_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_0))) then
                select_ln82_1_reg_3340 <= select_ln82_1_fu_2203_p3;
                select_ln82_3_reg_3345 <= select_ln82_3_fu_2271_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln103_fu_2468_p2 = ap_const_lv1_0))) then
                    zext_ln104_reg_3451(5 downto 0) <= zext_ln104_fu_2480_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln112_fu_2628_p2 = ap_const_lv1_0))) then
                    zext_ln113_reg_3518(4 downto 0) <= zext_ln113_fu_2640_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (icmp_ln119_fu_2758_p2 = ap_const_lv1_0))) then
                    zext_ln120_reg_3584(3 downto 0) <= zext_ln120_fu_2770_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state39) and (icmp_ln9_1_fu_2485_p2 = ap_const_lv1_0))) then
                    zext_ln13_3_reg_3476(4 downto 0) <= zext_ln13_3_fu_2501_p1(4 downto 0);
                    zext_ln14_2_reg_3470(4 downto 0) <= zext_ln14_2_fu_2497_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state32) and (icmp_ln9_fu_2349_p2 = ap_const_lv1_0))) then
                    zext_ln13_reg_3404(5 downto 0) <= zext_ln13_fu_2365_p1(5 downto 0);
                    zext_ln14_reg_3398(5 downto 0) <= zext_ln14_fu_2361_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_0))) then
                    zext_ln203_21_reg_3233(12 downto 0) <= zext_ln203_21_fu_1857_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_0))) then
                    zext_ln203_26_reg_3272(10 downto 0) <= zext_ln203_26_fu_2010_p1(10 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_0))) then
                    zext_ln203_29_reg_3311(11 downto 0) <= zext_ln203_29_fu_2146_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_0))) then
                    zext_ln203_33_reg_3350(9 downto 0) <= zext_ln203_33_fu_2307_p1(9 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln41_fu_2645_p2 = ap_const_lv1_0))) then
                    zext_ln46_reg_3542(3 downto 0) <= zext_ln46_fu_2661_p1(3 downto 0);
                    zext_ln48_reg_3536(3 downto 0) <= zext_ln48_fu_2657_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln93_fu_2332_p2 = ap_const_lv1_0))) then
                    zext_ln94_reg_3379(8 downto 0) <= zext_ln94_fu_2344_p1(8 downto 0);
            end if;
        end if;
    end process;
    sub_ln203_reg_3175(1 downto 0) <= "00";
    zext_ln203_21_reg_3233(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln203_26_reg_3272(63 downto 11) <= "00000000000000000000000000000000000000000000000000000";
    zext_ln203_29_reg_3311(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    zext_ln203_33_reg_3350(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    zext_ln94_reg_3379(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";
    zext_ln14_reg_3398(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_3404(14 downto 6) <= "000000000";
    zext_ln104_reg_3451(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln14_2_reg_3470(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln13_3_reg_3476(11 downto 5) <= "0000000";
    zext_ln113_reg_3518(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln48_reg_3536(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_3542(8 downto 4) <= "00000";
    zext_ln120_reg_3584(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln120_reg_3584_pp7_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    or_ln_reg_3615(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln23_fu_1362_p2, ap_CS_fsm_state3, icmp_ln25_fu_1410_p2, icmp_ln37_fu_1729_p2, ap_enable_reg_pp0_iter0, icmp_ln51_fu_1882_p2, ap_enable_reg_pp1_iter0, icmp_ln65_fu_2035_p2, ap_enable_reg_pp2_iter0, icmp_ln79_fu_2171_p2, ap_enable_reg_pp3_iter0, icmp_ln93_fu_2332_p2, ap_enable_reg_pp4_iter0, icmp_ln9_fu_2349_p2, ap_CS_fsm_state32, ap_CS_fsm_state33, icmp_ln13_fu_2369_p2, icmp_ln103_fu_2468_p2, ap_enable_reg_pp5_iter0, icmp_ln9_1_fu_2485_p2, ap_CS_fsm_state39, ap_CS_fsm_state40, icmp_ln13_1_fu_2505_p2, icmp_ln112_fu_2628_p2, ap_enable_reg_pp6_iter0, ap_CS_fsm_state46, icmp_ln41_fu_2645_p2, ap_CS_fsm_state47, icmp_ln46_fu_2665_p2, icmp_ln119_fu_2758_p2, ap_enable_reg_pp7_iter0, ap_CS_fsm_state8, grp_conv_1_fu_1318_ap_done, ap_block_pp0_stage0_subdone, ap_CS_fsm_state13, grp_max_pool_1_fu_1340_ap_done, ap_block_pp1_stage0_subdone, ap_CS_fsm_state18, grp_conv_2_fu_1308_ap_done, ap_block_pp2_stage0_subdone, ap_CS_fsm_state23, grp_max_pool_2_fu_1346_ap_done, ap_block_pp3_stage0_subdone, ap_CS_fsm_state28, grp_flat_fu_1352_ap_done, ap_block_pp4_stage0_subdone, ap_block_pp5_stage0_subdone, ap_block_pp6_stage0_subdone, ap_CS_fsm_state50, grp_soft_max_fu_1328_ap_done, ap_block_pp7_stage0_subdone, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_1362_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln25_fu_1410_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_conv_1_fu_1318_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln37_fu_1729_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                if (((grp_max_pool_1_fu_1340_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (icmp_ln51_fu_1882_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                if (((grp_conv_2_fu_1308_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln65_fu_2035_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((grp_max_pool_2_fu_1346_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln79_fu_2171_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((grp_flat_fu_1352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln93_fu_2332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln93_fu_2332_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((icmp_ln9_fu_2349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                if (((icmp_ln13_fu_2369_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state33))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_pp5_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln103_fu_2468_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (icmp_ln103_fu_2468_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                if (((icmp_ln9_1_fu_2485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state40 => 
                if (((icmp_ln13_1_fu_2505_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state41;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_pp6_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln112_fu_2628_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (icmp_ln112_fu_2628_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state46) and (icmp_ln41_fu_2645_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state47;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_state47 => 
                if (((icmp_ln46_fu_2665_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_state49;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state50 => 
                if (((grp_soft_max_fu_1328_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state50))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state50;
                end if;
            when ap_ST_fsm_pp7_stage0 => 
                if ((not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln119_fu_2758_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                elsif ((((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp7_stage0_subdone) and (icmp_ln119_fu_2758_p2 = ap_const_lv1_1) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp7_stage0;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    F2_fu_1508_p2 <= std_logic_vector(unsigned(ap_const_lv12_433) - unsigned(zext_ln461_fu_1468_p1));
    a_fu_2893_p2 <= (icmp_ln947_fu_2855_p2 and icmp_ln947_1_fu_2887_p2);
    add_ln1116_4_fu_2712_p2 <= std_logic_vector(unsigned(add_ln1116_fu_2706_p2) + unsigned(zext_ln46_reg_3542));
    add_ln1116_fu_2706_p2 <= std_logic_vector(unsigned(zext_ln1116_8_fu_2702_p1) + unsigned(zext_ln1116_fu_2690_p1));
    add_ln1117_2_fu_2552_p2 <= std_logic_vector(unsigned(sub_ln1117_fu_2546_p2) + unsigned(zext_ln13_3_reg_3476));
    add_ln1117_3_fu_2386_p2 <= std_logic_vector(unsigned(phi_mul_reg_1196) + unsigned(ap_const_lv15_32));
    add_ln1117_fu_2392_p2 <= std_logic_vector(unsigned(phi_mul_reg_1196) + unsigned(zext_ln13_reg_3404));
    add_ln203_10_fu_1426_p2 <= std_logic_vector(unsigned(sub_ln203_reg_3175) + unsigned(zext_ln203_22_fu_1422_p1));
    add_ln203_12_fu_2004_p2 <= std_logic_vector(unsigned(zext_ln203_25_fu_2000_p1) + unsigned(sub_ln203_2_fu_1994_p2));
    add_ln203_14_fu_2140_p2 <= std_logic_vector(unsigned(zext_ln203_28_fu_2136_p1) + unsigned(tmp_39_cast_fu_2129_p3));
    add_ln203_15_fu_2227_p2 <= std_logic_vector(unsigned(zext_ln203_30_fu_2211_p1) + unsigned(zext_ln203_31_fu_2223_p1));
    add_ln203_16_fu_2283_p2 <= std_logic_vector(unsigned(add_ln203_15_fu_2227_p2) + unsigned(zext_ln82_fu_2279_p1));
    add_ln203_17_fu_2301_p2 <= std_logic_vector(unsigned(tmp_42_cast_fu_2289_p3) + unsigned(zext_ln203_32_fu_2297_p1));
    add_ln203_1_fu_2605_p2 <= std_logic_vector(signed(sext_ln703_2_fu_2595_p1) + signed(trunc_ln703_1_fu_2591_p1));
    add_ln203_9_fu_1851_p2 <= std_logic_vector(unsigned(zext_ln203_20_fu_1847_p1) + unsigned(sub_ln203_1_fu_1841_p2));
    add_ln203_fu_2445_p2 <= std_logic_vector(signed(sext_ln703_fu_2435_p1) + signed(trunc_ln703_fu_2431_p1));
    add_ln28_fu_1436_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(ix_in_1_reg_910));
    add_ln37_fu_1735_p2 <= std_logic_vector(unsigned(indvar_flatten13_reg_931) + unsigned(ap_const_lv12_1));
    add_ln38_fu_1868_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_953) + unsigned(ap_const_lv8_1));
    add_ln51_fu_1888_p2 <= std_logic_vector(unsigned(indvar_flatten39_reg_986) + unsigned(ap_const_lv10_1));
    add_ln52_fu_2021_p2 <= std_logic_vector(unsigned(indvar_flatten25_reg_1008) + unsigned(ap_const_lv7_1));
    add_ln581_fu_1520_p2 <= std_logic_vector(signed(ap_const_lv12_FF8) + signed(F2_fu_1508_p2));
    add_ln65_fu_2041_p2 <= std_logic_vector(unsigned(indvar_flatten65_reg_1041) + unsigned(ap_const_lv11_1));
    add_ln66_fu_2157_p2 <= std_logic_vector(unsigned(indvar_flatten51_reg_1063) + unsigned(ap_const_lv9_1));
    add_ln703_1_fu_2599_p2 <= std_logic_vector(unsigned(p_Val2_32_reg_1229) + unsigned(sext_ln1265_1_fu_2587_p1));
    add_ln703_2_fu_2751_p2 <= std_logic_vector(signed(sext_ln1265_2_fu_2747_p1) + signed(p_Val2_38_reg_1274));
    add_ln703_fu_2439_p2 <= std_logic_vector(unsigned(p_Val2_29_reg_1173) + unsigned(sext_ln1265_fu_2427_p1));
    add_ln79_fu_2177_p2 <= std_logic_vector(unsigned(indvar_flatten91_reg_1096) + unsigned(ap_const_lv9_1));
    add_ln80_fu_2318_p2 <= std_logic_vector(unsigned(indvar_flatten77_reg_1118) + unsigned(ap_const_lv8_1));
    add_ln949_fu_2913_p2 <= std_logic_vector(signed(ap_const_lv14_3FE8) + signed(trunc_ln944_fu_2835_p1));
    add_ln958_fu_2960_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE7) + signed(sub_ln944_reg_3609));
    add_ln964_fu_3029_p2 <= std_logic_vector(unsigned(select_ln964_fu_3016_p3) + unsigned(sub_ln964_fu_3024_p2));
    and_ln40_fu_1785_p2 <= (xor_ln40_fu_1773_p2 and icmp_ln39_fu_1779_p2);
    and_ln54_fu_1938_p2 <= (xor_ln54_fu_1926_p2 and icmp_ln53_fu_1932_p2);
    and_ln581_fu_1633_p2 <= (xor_ln582_fu_1627_p2 and icmp_ln581_fu_1514_p2);
    and_ln582_fu_1615_p2 <= (xor_ln571_fu_1609_p2 and icmp_ln582_fu_1544_p2);
    and_ln585_1_fu_1651_p2 <= (icmp_ln585_fu_1554_p2 and and_ln581_fu_1633_p2);
    and_ln585_fu_1645_p2 <= (xor_ln585_fu_1639_p2 and and_ln581_fu_1633_p2);
    and_ln603_fu_1669_p2 <= (xor_ln581_fu_1663_p2 and icmp_ln603_fu_1560_p2);
    and_ln68_fu_2091_p2 <= (xor_ln68_fu_2079_p2 and icmp_ln67_fu_2085_p2);
    and_ln82_fu_2245_p2 <= (xor_ln82_fu_2233_p2 and icmp_ln81_fu_2239_p2);
    and_ln949_fu_2927_p2 <= (xor_ln949_fu_2907_p2 and p_Result_37_fu_2919_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(12);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(16);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(20);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(24);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(30);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(36);
    ap_CS_fsm_pp7_stage0 <= ap_CS_fsm(43);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state16 <= ap_CS_fsm(13);
    ap_CS_fsm_state17 <= ap_CS_fsm(14);
    ap_CS_fsm_state18 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state26 <= ap_CS_fsm(21);
    ap_CS_fsm_state27 <= ap_CS_fsm(22);
    ap_CS_fsm_state28 <= ap_CS_fsm(23);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state31 <= ap_CS_fsm(25);
    ap_CS_fsm_state32 <= ap_CS_fsm(26);
    ap_CS_fsm_state33 <= ap_CS_fsm(27);
    ap_CS_fsm_state34 <= ap_CS_fsm(28);
    ap_CS_fsm_state35 <= ap_CS_fsm(29);
    ap_CS_fsm_state38 <= ap_CS_fsm(31);
    ap_CS_fsm_state39 <= ap_CS_fsm(32);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(33);
    ap_CS_fsm_state41 <= ap_CS_fsm(34);
    ap_CS_fsm_state42 <= ap_CS_fsm(35);
    ap_CS_fsm_state45 <= ap_CS_fsm(37);
    ap_CS_fsm_state46 <= ap_CS_fsm(38);
    ap_CS_fsm_state47 <= ap_CS_fsm(39);
    ap_CS_fsm_state48 <= ap_CS_fsm(40);
    ap_CS_fsm_state49 <= ap_CS_fsm(41);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(42);
    ap_CS_fsm_state54 <= ap_CS_fsm(44);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp7_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state51_pp7_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state52_pp7_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state53_pp7_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln37_fu_1729_p2)
    begin
        if ((icmp_ln37_fu_1729_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state14_assign_proc : process(icmp_ln51_fu_1882_p2)
    begin
        if ((icmp_ln51_fu_1882_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state14 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state19_assign_proc : process(icmp_ln65_fu_2035_p2)
    begin
        if ((icmp_ln65_fu_2035_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state19 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state24_assign_proc : process(icmp_ln79_fu_2171_p2)
    begin
        if ((icmp_ln79_fu_2171_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state24 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state24 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state29_assign_proc : process(icmp_ln93_fu_2332_p2)
    begin
        if ((icmp_ln93_fu_2332_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state29 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state29 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state36_assign_proc : process(icmp_ln103_fu_2468_p2)
    begin
        if ((icmp_ln103_fu_2468_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state36 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state36 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state43_assign_proc : process(icmp_ln112_fu_2628_p2)
    begin
        if ((icmp_ln112_fu_2628_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp7_exit_iter0_state51_assign_proc : process(icmp_ln119_fu_2758_p2)
    begin
        if ((icmp_ln119_fu_2758_p2 = ap_const_lv1_1)) then 
            ap_condition_pp7_exit_iter0_state51 <= ap_const_logic_1;
        else 
            ap_condition_pp7_exit_iter0_state51 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);
    ap_enable_pp7 <= (ap_idle_pp7 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp7_assign_proc : process(ap_enable_reg_pp7_iter0, ap_enable_reg_pp7_iter1, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_enable_reg_pp7_iter2 = ap_const_logic_0) and (ap_enable_reg_pp7_iter1 = ap_const_logic_0) and (ap_enable_reg_pp7_iter0 = ap_const_logic_0))) then 
            ap_idle_pp7 <= ap_const_logic_1;
        else 
            ap_idle_pp7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i14_0_phi_fu_946_p4_assign_proc : process(i14_0_reg_942, icmp_ln37_reg_3214, ap_CS_fsm_pp0_stage0, select_ln40_1_reg_3223, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_3214 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_i14_0_phi_fu_946_p4 <= select_ln40_1_reg_3223;
        else 
            ap_phi_mux_i14_0_phi_fu_946_p4 <= i14_0_reg_942;
        end if; 
    end process;


    ap_phi_mux_i26_0_phi_fu_1001_p4_assign_proc : process(i26_0_reg_997, icmp_ln51_reg_3253, ap_CS_fsm_pp1_stage0, select_ln54_1_reg_3262, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_reg_3253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i26_0_phi_fu_1001_p4 <= select_ln54_1_reg_3262;
        else 
            ap_phi_mux_i26_0_phi_fu_1001_p4 <= i26_0_reg_997;
        end if; 
    end process;


    ap_phi_mux_i39_0_phi_fu_1056_p4_assign_proc : process(i39_0_reg_1052, icmp_ln65_reg_3292, ap_CS_fsm_pp2_stage0, select_ln68_1_reg_3301, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_reg_3292 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_i39_0_phi_fu_1056_p4 <= select_ln68_1_reg_3301;
        else 
            ap_phi_mux_i39_0_phi_fu_1056_p4 <= i39_0_reg_1052;
        end if; 
    end process;


    ap_phi_mux_i52_0_phi_fu_1111_p4_assign_proc : process(i52_0_reg_1107, icmp_ln79_reg_3331, ap_CS_fsm_pp3_stage0, select_ln82_1_reg_3340, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_reg_3331 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_i52_0_phi_fu_1111_p4 <= select_ln82_1_reg_3340;
        else 
            ap_phi_mux_i52_0_phi_fu_1111_p4 <= i52_0_reg_1107;
        end if; 
    end process;


    ap_phi_mux_j15_0_phi_fu_968_p4_assign_proc : process(j15_0_reg_964, icmp_ln37_reg_3214, ap_CS_fsm_pp0_stage0, select_ln40_3_reg_3228, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_3214 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j15_0_phi_fu_968_p4 <= select_ln40_3_reg_3228;
        else 
            ap_phi_mux_j15_0_phi_fu_968_p4 <= j15_0_reg_964;
        end if; 
    end process;


    ap_phi_mux_j27_0_phi_fu_1023_p4_assign_proc : process(j27_0_reg_1019, icmp_ln51_reg_3253, ap_CS_fsm_pp1_stage0, select_ln54_3_reg_3267, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_reg_3253 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_j27_0_phi_fu_1023_p4 <= select_ln54_3_reg_3267;
        else 
            ap_phi_mux_j27_0_phi_fu_1023_p4 <= j27_0_reg_1019;
        end if; 
    end process;


    ap_phi_mux_j40_0_phi_fu_1078_p4_assign_proc : process(j40_0_reg_1074, icmp_ln65_reg_3292, ap_CS_fsm_pp2_stage0, select_ln68_3_reg_3306, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_reg_3292 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            ap_phi_mux_j40_0_phi_fu_1078_p4 <= select_ln68_3_reg_3306;
        else 
            ap_phi_mux_j40_0_phi_fu_1078_p4 <= j40_0_reg_1074;
        end if; 
    end process;


    ap_phi_mux_j53_0_phi_fu_1133_p4_assign_proc : process(j53_0_reg_1129, icmp_ln79_reg_3331, ap_CS_fsm_pp3_stage0, select_ln82_3_reg_3345, ap_enable_reg_pp3_iter1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_reg_3331 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            ap_phi_mux_j53_0_phi_fu_1133_p4 <= select_ln82_3_reg_3345;
        else 
            ap_phi_mux_j53_0_phi_fu_1133_p4 <= j53_0_reg_1129;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state54)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ashr_ln586_fu_1570_p2 <= std_logic_vector(shift_right(signed(man_V_2_fu_1494_p3),to_integer(unsigned('0' & zext_ln586_fu_1566_p1(31-1 downto 0)))));
    bitcast_ln696_fu_1580_p1 <= cnn_input_load_reg_3203;
    bitcast_ln739_fu_3054_p1 <= p_Result_43_fu_3042_p5;
    cnn_input_address0 <= zext_ln27_fu_1431_p1(10 - 1 downto 0);

    cnn_input_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            cnn_input_ce0 <= ap_const_logic_1;
        else 
            cnn_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_address0_assign_proc : process(ap_CS_fsm_state8, grp_conv_1_fu_1318_input_V_address0, ap_CS_fsm_state6, sext_ln203_fu_1725_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_address0 <= sext_ln203_fu_1725_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_address0 <= grp_conv_1_fu_1318_input_V_address0;
        else 
            conv_1_input_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    conv_1_input_V_ce0_assign_proc : process(ap_CS_fsm_state8, grp_conv_1_fu_1318_input_V_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_input_V_ce0 <= grp_conv_1_fu_1318_input_V_ce0;
        else 
            conv_1_input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_input_V_we0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            conv_1_input_V_we0 <= ap_const_logic_1;
        else 
            conv_1_input_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln203_21_fu_1857_p1, ap_CS_fsm_state8, grp_conv_1_fu_1318_conv_out_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_1_out_V_address0 <= zext_ln203_21_fu_1857_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_address0 <= grp_conv_1_fu_1318_conv_out_V_address0;
        else 
            conv_1_out_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, grp_conv_1_fu_1318_conv_out_V_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_ce0 <= grp_conv_1_fu_1318_conv_out_V_ce0;
        else 
            conv_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state8, grp_conv_1_fu_1318_conv_out_V_d0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_d0 <= grp_conv_1_fu_1318_conv_out_V_d0;
        else 
            conv_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_1362_p2, ap_CS_fsm_state8, grp_conv_1_fu_1318_conv_out_V_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_1362_p2 = ap_const_lv1_1))) then 
            conv_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            conv_1_out_V_we0 <= grp_conv_1_fu_1318_conv_out_V_we0;
        else 
            conv_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_c_V_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, zext_ln203_21_reg_3233, ap_enable_reg_pp0_iter1, ap_CS_fsm_state13, grp_max_pool_1_fu_1340_conv_out_V_address0, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_1_out_c_V_address0 <= zext_ln203_21_reg_3233(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_c_V_address0 <= ap_const_lv64_0(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_1_out_c_V_address0 <= grp_max_pool_1_fu_1340_conv_out_V_address0;
        else 
            conv_1_out_c_V_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_c_V_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, ap_CS_fsm_state13, grp_max_pool_1_fu_1340_conv_out_V_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            conv_1_out_c_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            conv_1_out_c_V_ce0 <= grp_max_pool_1_fu_1340_conv_out_V_ce0;
        else 
            conv_1_out_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_1_out_c_V_d0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, conv_1_out_V_q0, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            conv_1_out_c_V_d0 <= conv_1_out_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            conv_1_out_c_V_d0 <= ap_const_lv14_0;
        else 
            conv_1_out_c_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_1_out_c_V_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln23_fu_1362_p2, icmp_ln37_reg_3214, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln37_reg_3214 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln23_fu_1362_p2 = ap_const_lv1_1)))) then 
            conv_1_out_c_V_we0 <= ap_const_logic_1;
        else 
            conv_1_out_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln203_29_fu_2146_p1, ap_CS_fsm_state18, grp_conv_2_fu_1308_conv_out_V_address0, ap_block_pp2_stage0, ap_CS_fsm_state16)
    begin
        if (((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            conv_2_out_V_address0 <= zext_ln203_29_fu_2146_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_2_out_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_2_out_V_address0 <= grp_conv_2_fu_1308_conv_out_V_address0;
        else 
            conv_2_out_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_CS_fsm_state18, grp_conv_2_fu_1308_conv_out_V_ce0, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            conv_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_2_out_V_ce0 <= grp_conv_2_fu_1308_conv_out_V_ce0;
        else 
            conv_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_V_d0_assign_proc : process(ap_CS_fsm_state18, grp_conv_2_fu_1308_conv_out_V_d0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_2_out_V_d0 <= grp_conv_2_fu_1308_conv_out_V_d0;
        else 
            conv_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_V_we0_assign_proc : process(ap_CS_fsm_state18, grp_conv_2_fu_1308_conv_out_V_we0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            conv_2_out_V_we0 <= grp_conv_2_fu_1308_conv_out_V_we0;
        else 
            conv_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_c_V_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, zext_ln203_29_reg_3311, ap_enable_reg_pp2_iter1, ap_CS_fsm_state23, grp_max_pool_2_fu_1346_conv_out_V_address0, ap_block_pp2_stage0, ap_CS_fsm_state16)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            conv_2_out_c_V_address0 <= zext_ln203_29_reg_3311(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_2_out_c_V_address0 <= ap_const_lv64_0(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv_2_out_c_V_address0 <= grp_max_pool_2_fu_1346_conv_out_V_address0;
        else 
            conv_2_out_c_V_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_c_V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state23, grp_max_pool_2_fu_1346_conv_out_V_ce0, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            conv_2_out_c_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            conv_2_out_c_V_ce0 <= grp_max_pool_2_fu_1346_conv_out_V_ce0;
        else 
            conv_2_out_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_2_out_c_V_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, conv_2_out_V_q0, ap_block_pp2_stage0, ap_CS_fsm_state16)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            conv_2_out_c_V_d0 <= conv_2_out_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            conv_2_out_c_V_d0 <= ap_const_lv14_0;
        else 
            conv_2_out_c_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_2_out_c_V_we0_assign_proc : process(icmp_ln65_reg_3292, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, ap_CS_fsm_state16)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln65_reg_3292 = ap_const_lv1_0)))) then 
            conv_2_out_c_V_we0 <= ap_const_logic_1;
        else 
            conv_2_out_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_2651_p2 <= std_logic_vector(unsigned(d_0_i_reg_1263) + unsigned(ap_const_lv4_1));
    dense_1_bias_V_address0 <= zext_ln14_reg_3398(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_address0_assign_proc : process(zext_ln14_reg_3398, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, zext_ln104_fu_2480_p1, ap_CS_fsm_state31, ap_CS_fsm_state35, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            dense_1_out_V_address0 <= zext_ln104_fu_2480_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            dense_1_out_V_address0 <= zext_ln14_reg_3398(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            dense_1_out_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_V_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            dense_1_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_V_d0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state35, select_ln19_fu_2459_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            dense_1_out_V_d0 <= select_ln19_fu_2459_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            dense_1_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_1_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_V_we0_assign_proc : process(ap_CS_fsm_state31, ap_CS_fsm_state35)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            dense_1_out_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_c_V_address0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_pp5_stage0, zext_ln104_reg_3451, ap_CS_fsm_state40, ap_enable_reg_pp5_iter1, ap_block_pp5_stage0, zext_ln14_3_fu_2517_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_1_out_c_V_address0 <= zext_ln14_3_fu_2517_p1(6 - 1 downto 0);
        elsif (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            dense_1_out_c_V_address0 <= zext_ln104_reg_3451(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            dense_1_out_c_V_address0 <= ap_const_lv64_0(6 - 1 downto 0);
        else 
            dense_1_out_c_V_address0 <= "XXXXXX";
        end if; 
    end process;


    dense_1_out_c_V_ce0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_CS_fsm_state40, ap_enable_reg_pp5_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state32) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            dense_1_out_c_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_out_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_out_c_V_d0_assign_proc : process(ap_CS_fsm_state32, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter1, dense_1_out_V_q0, ap_block_pp5_stage0)
    begin
        if (((ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (ap_const_boolean_0 = ap_block_pp5_stage0))) then 
            dense_1_out_c_V_d0 <= dense_1_out_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            dense_1_out_c_V_d0 <= ap_const_lv13_0;
        else 
            dense_1_out_c_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_out_c_V_we0_assign_proc : process(icmp_ln9_fu_2349_p2, ap_CS_fsm_state32, icmp_ln103_reg_3442, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0) and (icmp_ln103_reg_3442 = ap_const_lv1_0)) or ((icmp_ln9_fu_2349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state32)))) then 
            dense_1_out_c_V_we0 <= ap_const_logic_1;
        else 
            dense_1_out_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_fu_2397_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_bias_V_address0 <= zext_ln14_2_reg_3470(5 - 1 downto 0);

    dense_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_address0_assign_proc : process(zext_ln14_2_reg_3470, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, zext_ln113_fu_2640_p1, ap_CS_fsm_state38, ap_CS_fsm_state42, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            dense_2_out_V_address0 <= zext_ln113_fu_2640_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            dense_2_out_V_address0 <= zext_ln14_2_reg_3470(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_2_out_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_d0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state42, select_ln19_1_fu_2619_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            dense_2_out_V_d0 <= select_ln19_1_fu_2619_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_2_out_V_d0 <= ap_const_lv13_0;
        else 
            dense_2_out_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_V_we0_assign_proc : process(ap_CS_fsm_state38, ap_CS_fsm_state42)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state38))) then 
            dense_2_out_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_c_V_address0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_pp6_stage0, zext_ln113_reg_3518, ap_CS_fsm_state47, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0, zext_ln48_1_fu_2677_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dense_2_out_c_V_address0 <= zext_ln48_1_fu_2677_p1(5 - 1 downto 0);
        elsif (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            dense_2_out_c_V_address0 <= zext_ln113_reg_3518(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_2_out_c_V_address0 <= ap_const_lv64_0(5 - 1 downto 0);
        else 
            dense_2_out_c_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_c_V_ce0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_CS_fsm_state47, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state39) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)))) then 
            dense_2_out_c_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_c_V_d0_assign_proc : process(ap_CS_fsm_state39, ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter1, dense_2_out_V_q0, ap_block_pp6_stage0)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (ap_const_boolean_0 = ap_block_pp6_stage0))) then 
            dense_2_out_c_V_d0 <= dense_2_out_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_2_out_c_V_d0 <= ap_const_lv13_0;
        else 
            dense_2_out_c_V_d0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_out_c_V_we0_assign_proc : process(icmp_ln9_1_fu_2485_p2, ap_CS_fsm_state39, icmp_ln112_reg_3509, ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0) and (icmp_ln112_reg_3509 = ap_const_lv1_0)) or ((icmp_ln9_1_fu_2485_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state39)))) then 
            dense_2_out_c_V_we0 <= ap_const_logic_1;
        else 
            dense_2_out_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_2_weights_V_address0 <= sext_ln1117_fu_2557_p1(11 - 1 downto 0);

    dense_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_3536, ap_CS_fsm_state50, grp_soft_max_fu_1328_dense_array_V_address0, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_array_V_address0 <= zext_ln48_reg_3536(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_V_address0 <= grp_soft_max_fu_1328_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(ap_CS_fsm_state50, grp_soft_max_fu_1328_dense_array_V_ce0, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_1328_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(ap_CS_fsm_state50, grp_soft_max_fu_1328_dense_array_V_d0, ap_CS_fsm_state49, add_ln703_2_fu_2751_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_array_V_d0 <= add_ln703_2_fu_2751_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_V_d0 <= grp_soft_max_fu_1328_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(ap_CS_fsm_state50, grp_soft_max_fu_1328_dense_array_V_we0, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_array_V_we0 <= grp_soft_max_fu_1328_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_3536(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_9_fu_2717_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exp_tmp_V_fu_1458_p4 <= ireg_V_fu_1442_p1(62 downto 52);
    f_fu_2671_p2 <= std_logic_vector(unsigned(f_0_i_reg_1286) + unsigned(ap_const_lv5_1));

    flat_array_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, zext_ln94_fu_2344_p1, ap_CS_fsm_state28, grp_flat_fu_1352_flat_array_V_address0, ap_CS_fsm_state26, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            flat_array_V_address0 <= zext_ln94_fu_2344_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            flat_array_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            flat_array_V_address0 <= grp_flat_fu_1352_flat_array_V_address0;
        else 
            flat_array_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_state28, grp_flat_fu_1352_flat_array_V_ce0, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            flat_array_V_ce0 <= grp_flat_fu_1352_flat_array_V_ce0;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_V_d0_assign_proc : process(ap_CS_fsm_state28, grp_flat_fu_1352_flat_array_V_d0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            flat_array_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            flat_array_V_d0 <= grp_flat_fu_1352_flat_array_V_d0;
        else 
            flat_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_V_we0_assign_proc : process(ap_CS_fsm_state28, grp_flat_fu_1352_flat_array_V_we0, ap_CS_fsm_state26)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            flat_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            flat_array_V_we0 <= grp_flat_fu_1352_flat_array_V_we0;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_c_V_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, zext_ln94_reg_3379, ap_CS_fsm_state33, ap_CS_fsm_state28, ap_enable_reg_pp4_iter1, ap_block_pp4_stage0, zext_ln14_1_fu_2381_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            flat_array_c_V_address0 <= zext_ln14_1_fu_2381_p1(9 - 1 downto 0);
        elsif (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            flat_array_c_V_address0 <= zext_ln94_reg_3379(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            flat_array_c_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        else 
            flat_array_c_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    flat_array_c_V_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state33, ap_CS_fsm_state28, grp_flat_fu_1352_ap_done, ap_enable_reg_pp4_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((grp_flat_fu_1352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            flat_array_c_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    flat_array_c_V_d0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_CS_fsm_state28, ap_enable_reg_pp4_iter1, flat_array_V_q0, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            flat_array_c_V_d0 <= flat_array_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            flat_array_c_V_d0 <= ap_const_lv14_0;
        else 
            flat_array_c_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    flat_array_c_V_we0_assign_proc : process(icmp_ln93_reg_3370, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_CS_fsm_state28, grp_flat_fu_1352_ap_done, ap_enable_reg_pp4_iter1)
    begin
        if ((((grp_flat_fu_1352_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state28)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (icmp_ln93_reg_3370 = ap_const_lv1_0)))) then 
            flat_array_c_V_we0 <= ap_const_logic_1;
        else 
            flat_array_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_conv_1_fu_1318_ap_start <= grp_conv_1_fu_1318_ap_start_reg;
    grp_conv_2_fu_1308_ap_start <= grp_conv_2_fu_1308_ap_start_reg;
    grp_flat_fu_1352_ap_start <= grp_flat_fu_1352_ap_start_reg;
    grp_fu_3066_p0 <= grp_fu_3066_p00(5 - 1 downto 0);
    grp_fu_3066_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_1_fu_1761_p3),10));
    grp_fu_3066_p1 <= ap_const_lv10_1A(6 - 1 downto 0);
    grp_fu_3066_p2 <= grp_fu_3066_p20(5 - 1 downto 0);
    grp_fu_3066_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_3_fu_1811_p3),10));
    grp_fu_3076_p0 <= grp_fu_3076_p00(4 - 1 downto 0);
    grp_fu_3076_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_1_fu_1914_p3),8));
    grp_fu_3076_p1 <= ap_const_lv8_D(5 - 1 downto 0);
    grp_fu_3076_p2 <= grp_fu_3076_p20(4 - 1 downto 0);
    grp_fu_3076_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_3_fu_1964_p3),8));
    grp_fu_3086_p0 <= grp_fu_3086_p00(4 - 1 downto 0);
    grp_fu_3086_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_1_fu_2067_p3),8));
    grp_fu_3086_p1 <= ap_const_lv8_B(5 - 1 downto 0);
    grp_fu_3086_p2 <= grp_fu_3086_p20(4 - 1 downto 0);
    grp_fu_3086_p20 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_3_fu_2117_p3),8));
    grp_fu_3095_p2 <= (p_Val2_29_reg_1173 & ap_const_lv8_0);
    grp_fu_3104_p1 <= grp_fu_3104_p10(13 - 1 downto 0);
    grp_fu_3104_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_1_out_c_V_q0),22));
    grp_fu_3104_p2 <= (p_Val2_32_reg_1229 & ap_const_lv8_0);
    grp_fu_3113_p0 <= grp_fu_3113_p00(13 - 1 downto 0);
    grp_fu_3113_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_c_V_q0),22));
    grp_fu_3113_p2 <= (p_Val2_38_reg_1274 & ap_const_lv8_0);
    grp_max_pool_1_fu_1340_ap_start <= grp_max_pool_1_fu_1340_ap_start_reg;
    grp_max_pool_2_fu_1346_ap_start <= grp_max_pool_2_fu_1346_ap_start_reg;
    grp_soft_max_fu_1328_ap_start <= grp_soft_max_fu_1328_ap_start_reg;
    i_10_fu_2474_p2 <= std_logic_vector(unsigned(i56_0_reg_1207) + unsigned(ap_const_lv6_1));
    i_11_fu_2355_p2 <= std_logic_vector(unsigned(i_0_i_reg_1162) + unsigned(ap_const_lv6_1));
    i_12_fu_2634_p2 <= std_logic_vector(unsigned(i57_0_reg_1252) + unsigned(ap_const_lv5_1));
    i_13_fu_2491_p2 <= std_logic_vector(unsigned(i_0_i5_reg_1218) + unsigned(ap_const_lv5_1));
    i_14_fu_2764_p2 <= std_logic_vector(unsigned(i58_0_reg_1297) + unsigned(ap_const_lv4_1));
    i_2_fu_1741_p2 <= std_logic_vector(unsigned(ap_phi_mux_i14_0_phi_fu_946_p4) + unsigned(ap_const_lv5_1));
    i_4_fu_1894_p2 <= std_logic_vector(unsigned(ap_phi_mux_i26_0_phi_fu_1001_p4) + unsigned(ap_const_lv4_1));
    i_6_fu_2047_p2 <= std_logic_vector(unsigned(ap_phi_mux_i39_0_phi_fu_1056_p4) + unsigned(ap_const_lv4_1));
    i_8_fu_2183_p2 <= std_logic_vector(unsigned(ap_phi_mux_i52_0_phi_fu_1111_p4) + unsigned(ap_const_lv3_1));
    i_9_fu_2338_p2 <= std_logic_vector(unsigned(i55_0_reg_1151) + unsigned(ap_const_lv9_1));
    i_fu_1368_p2 <= std_logic_vector(unsigned(i_0_reg_899) + unsigned(ap_const_lv5_1));
    icmp_ln103_fu_2468_p2 <= "1" when (i56_0_reg_1207 = ap_const_lv6_32) else "0";
    icmp_ln112_fu_2628_p2 <= "1" when (i57_0_reg_1252 = ap_const_lv5_1E) else "0";
    icmp_ln119_fu_2758_p2 <= "1" when (i58_0_reg_1297 = ap_const_lv4_A) else "0";
    icmp_ln13_1_fu_2505_p2 <= "1" when (j_0_i10_reg_1241 = ap_const_lv6_32) else "0";
    icmp_ln13_fu_2369_p2 <= "1" when (j_0_i_reg_1185 = ap_const_lv9_190) else "0";
    icmp_ln23_fu_1362_p2 <= "1" when (i_0_reg_899 = ap_const_lv5_1C) else "0";
    icmp_ln25_fu_1410_p2 <= "1" when (j_0_reg_920 = ap_const_lv5_1C) else "0";
    icmp_ln37_fu_1729_p2 <= "1" when (indvar_flatten13_reg_931 = ap_const_lv12_FD8) else "0";
    icmp_ln38_fu_1747_p2 <= "1" when (indvar_flatten_reg_953 = ap_const_lv8_9C) else "0";
    icmp_ln39_fu_1779_p2 <= "1" when (k_0_reg_975 = ap_const_lv3_6) else "0";
    icmp_ln41_fu_2645_p2 <= "1" when (d_0_i_reg_1263 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_2665_p2 <= "1" when (f_0_i_reg_1286 = ap_const_lv5_1E) else "0";
    icmp_ln51_fu_1882_p2 <= "1" when (indvar_flatten39_reg_986 = ap_const_lv10_3F6) else "0";
    icmp_ln52_fu_1900_p2 <= "1" when (indvar_flatten25_reg_1008 = ap_const_lv7_4E) else "0";
    icmp_ln53_fu_1932_p2 <= "1" when (k28_0_reg_1030 = ap_const_lv3_6) else "0";
    icmp_ln571_fu_1502_p2 <= "1" when (trunc_ln556_fu_1446_p1 = ap_const_lv63_0) else "0";
    icmp_ln581_fu_1514_p2 <= "1" when (signed(F2_fu_1508_p2) > signed(ap_const_lv12_8)) else "0";
    icmp_ln582_fu_1544_p2 <= "1" when (F2_fu_1508_p2 = ap_const_lv12_8) else "0";
    icmp_ln585_fu_1554_p2 <= "1" when (unsigned(sh_amt_fu_1532_p3) < unsigned(ap_const_lv12_36)) else "0";
    icmp_ln603_fu_1560_p2 <= "1" when (unsigned(sh_amt_fu_1532_p3) < unsigned(ap_const_lv12_E)) else "0";
    icmp_ln65_fu_2035_p2 <= "1" when (indvar_flatten65_reg_1041 = ap_const_lv11_790) else "0";
    icmp_ln66_fu_2053_p2 <= "1" when (indvar_flatten51_reg_1063 = ap_const_lv9_B0) else "0";
    icmp_ln67_fu_2085_p2 <= "1" when (k41_0_reg_1085 = ap_const_lv5_10) else "0";
    icmp_ln79_fu_2171_p2 <= "1" when (indvar_flatten91_reg_1096 = ap_const_lv9_190) else "0";
    icmp_ln80_fu_2189_p2 <= "1" when (indvar_flatten77_reg_1118 = ap_const_lv8_50) else "0";
    icmp_ln81_fu_2239_p2 <= "1" when (k54_0_reg_1140 = ap_const_lv5_10) else "0";
    icmp_ln935_fu_2775_p2 <= "1" when (prediction_V_q0 = ap_const_lv14_0) else "0";
    icmp_ln93_fu_2332_p2 <= "1" when (i55_0_reg_1151 = ap_const_lv9_190) else "0";
    icmp_ln947_1_fu_2887_p2 <= "0" when (p_Result_36_fu_2881_p2 = ap_const_lv14_0) else "1";
    icmp_ln947_fu_2855_p2 <= "1" when (signed(tmp_26_fu_2845_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln958_fu_2947_p2 <= "1" when (signed(lsb_index_fu_2839_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln9_1_fu_2485_p2 <= "1" when (i_0_i5_reg_1218 = ap_const_lv5_1E) else "0";
    icmp_ln9_fu_2349_p2 <= "1" when (i_0_i_reg_1162 = ap_const_lv6_32) else "0";
    ireg_V_fu_1442_p1 <= grp_fu_1358_p1;
    ix_in_fu_1374_p2 <= std_logic_vector(unsigned(ix_in_0_reg_887) + unsigned(ap_const_lv10_1C));
    j_1_fu_1416_p2 <= std_logic_vector(unsigned(j_0_reg_920) + unsigned(ap_const_lv5_1));
    j_2_fu_1944_p2 <= std_logic_vector(unsigned(select_ln54_fu_1906_p3) + unsigned(ap_const_lv4_1));
    j_3_fu_2097_p2 <= std_logic_vector(unsigned(select_ln68_fu_2059_p3) + unsigned(ap_const_lv4_1));
    j_4_fu_2251_p2 <= std_logic_vector(unsigned(select_ln82_fu_2195_p3) + unsigned(ap_const_lv3_1));
    j_5_fu_2375_p2 <= std_logic_vector(unsigned(j_0_i_reg_1185) + unsigned(ap_const_lv9_1));
    j_6_fu_2511_p2 <= std_logic_vector(unsigned(j_0_i10_reg_1241) + unsigned(ap_const_lv6_1));
    j_fu_1791_p2 <= std_logic_vector(unsigned(select_ln40_fu_1753_p3) + unsigned(ap_const_lv5_1));
    k_1_fu_2015_p2 <= std_logic_vector(unsigned(select_ln54_2_fu_1956_p3) + unsigned(ap_const_lv3_1));
    k_2_fu_2151_p2 <= std_logic_vector(unsigned(select_ln68_2_fu_2109_p3) + unsigned(ap_const_lv5_1));
    k_3_fu_2312_p2 <= std_logic_vector(unsigned(select_ln82_2_fu_2263_p3) + unsigned(ap_const_lv5_1));
    k_fu_1862_p2 <= std_logic_vector(unsigned(select_ln40_2_fu_1803_p3) + unsigned(ap_const_lv3_1));
    
    l_fu_2821_p3_proc : process(p_Result_42_fu_2813_p3)
    begin
        l_fu_2821_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_42_fu_2813_p3(i) = '1' then
                l_fu_2821_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lsb_index_fu_2839_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFE8) + signed(sub_ln944_fu_2829_p2));
    lshr_ln947_fu_2875_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln947_fu_2871_p1(14-1 downto 0)))));
    lshr_ln958_fu_2965_p2 <= std_logic_vector(shift_right(unsigned(m_fu_2957_p1),to_integer(unsigned('0' & add_ln958_fu_2960_p2(31-1 downto 0)))));
    m_12_fu_2982_p3 <= 
        lshr_ln958_fu_2965_p2 when (icmp_ln958_reg_3620(0) = '1') else 
        shl_ln958_fu_2976_p2;
    m_13_fu_2989_p2 <= std_logic_vector(unsigned(m_12_fu_2982_p3) + unsigned(or_ln_reg_3615));
    m_16_fu_3004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_s_fu_2994_p4),32));
    m_fu_2957_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_13_reg_3604),32));
    m_s_fu_2994_p4 <= m_13_fu_2989_p2(31 downto 1);
    man_V_1_fu_1488_p2 <= std_logic_vector(unsigned(ap_const_lv54_0) - unsigned(p_Result_40_fu_1484_p1));
    man_V_2_fu_1494_p3 <= 
        man_V_1_fu_1488_p2 when (p_Result_39_fu_1450_p3(0) = '1') else 
        p_Result_40_fu_1484_p1;

    max_pool_1_out_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln203_26_fu_2010_p1, ap_CS_fsm_state13, grp_max_pool_1_fu_1340_max_pool_out_V_address0, ap_block_pp1_stage0, ap_CS_fsm_state11)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            max_pool_1_out_V_address0 <= zext_ln203_26_fu_2010_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_1_out_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            max_pool_1_out_V_address0 <= grp_max_pool_1_fu_1340_max_pool_out_V_address0;
        else 
            max_pool_1_out_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state13, grp_max_pool_1_fu_1340_max_pool_out_V_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            max_pool_1_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            max_pool_1_out_V_ce0 <= grp_max_pool_1_fu_1340_max_pool_out_V_ce0;
        else 
            max_pool_1_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_V_d0_assign_proc : process(ap_CS_fsm_state13, grp_max_pool_1_fu_1340_max_pool_out_V_d0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_1_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            max_pool_1_out_V_d0 <= grp_max_pool_1_fu_1340_max_pool_out_V_d0;
        else 
            max_pool_1_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_V_we0_assign_proc : process(ap_CS_fsm_state13, grp_max_pool_1_fu_1340_max_pool_out_V_we0, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_1_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            max_pool_1_out_V_we0 <= grp_max_pool_1_fu_1340_max_pool_out_V_we0;
        else 
            max_pool_1_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_c_V_address0_assign_proc : process(ap_CS_fsm_pp1_stage0, zext_ln203_26_reg_3272, ap_enable_reg_pp1_iter1, ap_CS_fsm_state18, grp_conv_2_fu_1308_input_V_address0, ap_block_pp1_stage0, ap_CS_fsm_state11)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            max_pool_1_out_c_V_address0 <= zext_ln203_26_reg_3272(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_1_out_c_V_address0 <= ap_const_lv64_0(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            max_pool_1_out_c_V_address0 <= grp_conv_2_fu_1308_input_V_address0;
        else 
            max_pool_1_out_c_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_c_V_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state18, grp_conv_2_fu_1308_input_V_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)))) then 
            max_pool_1_out_c_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            max_pool_1_out_c_V_ce0 <= grp_conv_2_fu_1308_input_V_ce0;
        else 
            max_pool_1_out_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_1_out_c_V_d0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, max_pool_1_out_V_q0, ap_block_pp1_stage0, ap_CS_fsm_state11)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            max_pool_1_out_c_V_d0 <= max_pool_1_out_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            max_pool_1_out_c_V_d0 <= ap_const_lv14_0;
        else 
            max_pool_1_out_c_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_1_out_c_V_we0_assign_proc : process(icmp_ln51_reg_3253, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln51_reg_3253 = ap_const_lv1_0)))) then 
            max_pool_1_out_c_V_we0 <= ap_const_logic_1;
        else 
            max_pool_1_out_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, zext_ln203_33_fu_2307_p1, ap_CS_fsm_state23, grp_max_pool_2_fu_1346_max_pool_out_V_address0, ap_block_pp3_stage0, ap_CS_fsm_state21)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            max_pool_2_out_V_address0 <= zext_ln203_33_fu_2307_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max_pool_2_out_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            max_pool_2_out_V_address0 <= grp_max_pool_2_fu_1346_max_pool_out_V_address0;
        else 
            max_pool_2_out_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_state23, grp_max_pool_2_fu_1346_max_pool_out_V_ce0, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            max_pool_2_out_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            max_pool_2_out_V_ce0 <= grp_max_pool_2_fu_1346_max_pool_out_V_ce0;
        else 
            max_pool_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_V_d0_assign_proc : process(ap_CS_fsm_state23, grp_max_pool_2_fu_1346_max_pool_out_V_d0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max_pool_2_out_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            max_pool_2_out_V_d0 <= grp_max_pool_2_fu_1346_max_pool_out_V_d0;
        else 
            max_pool_2_out_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_V_we0_assign_proc : process(ap_CS_fsm_state23, grp_max_pool_2_fu_1346_max_pool_out_V_we0, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max_pool_2_out_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            max_pool_2_out_V_we0 <= grp_max_pool_2_fu_1346_max_pool_out_V_we0;
        else 
            max_pool_2_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_c_V_address0_assign_proc : process(ap_CS_fsm_pp3_stage0, zext_ln203_33_reg_3350, ap_enable_reg_pp3_iter1, ap_CS_fsm_state28, grp_flat_fu_1352_max_pool_out_V_address0, ap_block_pp3_stage0, ap_CS_fsm_state21)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            max_pool_2_out_c_V_address0 <= zext_ln203_33_reg_3350(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max_pool_2_out_c_V_address0 <= ap_const_lv64_0(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            max_pool_2_out_c_V_address0 <= grp_flat_fu_1352_max_pool_out_V_address0;
        else 
            max_pool_2_out_c_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_c_V_ce0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_state28, grp_flat_fu_1352_max_pool_out_V_ce0, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            max_pool_2_out_c_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            max_pool_2_out_c_V_ce0 <= grp_flat_fu_1352_max_pool_out_V_ce0;
        else 
            max_pool_2_out_c_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    max_pool_2_out_c_V_d0_assign_proc : process(ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, max_pool_2_out_V_q0, ap_block_pp3_stage0, ap_CS_fsm_state21)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            max_pool_2_out_c_V_d0 <= max_pool_2_out_V_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            max_pool_2_out_c_V_d0 <= ap_const_lv14_0;
        else 
            max_pool_2_out_c_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    max_pool_2_out_c_V_we0_assign_proc : process(icmp_ln79_reg_3331, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln79_reg_3331 = ap_const_lv1_0)))) then 
            max_pool_2_out_c_V_we0 <= ap_const_logic_1;
        else 
            max_pool_2_out_c_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln40_fu_1797_p2 <= (icmp_ln38_fu_1747_p2 or and_ln40_fu_1785_p2);
    or_ln54_fu_1950_p2 <= (icmp_ln52_fu_1900_p2 or and_ln54_fu_1938_p2);
    or_ln581_fu_1657_p2 <= (or_ln582_fu_1621_p2 or icmp_ln581_fu_1514_p2);
    or_ln582_fu_1621_p2 <= (icmp_ln582_fu_1544_p2 or icmp_ln571_fu_1502_p2);
    or_ln603_1_fu_1697_p2 <= (and_ln585_fu_1645_p2 or and_ln582_fu_1615_p2);
    or_ln603_2_fu_1711_p2 <= (or_ln603_fu_1683_p2 or or_ln603_1_fu_1697_p2);
    or_ln603_fu_1683_p2 <= (and_ln603_fu_1669_p2 or and_ln585_1_fu_1651_p2);
    or_ln68_fu_2103_p2 <= (icmp_ln66_fu_2053_p2 or and_ln68_fu_2091_p2);
    or_ln82_fu_2257_p2 <= (icmp_ln80_fu_2189_p2 or and_ln82_fu_2245_p2);
    or_ln949_fu_2933_p2 <= (and_ln949_fu_2927_p2 or a_fu_2893_p2);
    or_ln_fu_2939_p3 <= (ap_const_lv31_0 & or_ln949_fu_2933_p2);
    p_Result_36_fu_2881_p2 <= (tmp_V_13_fu_2795_p3 and lshr_ln947_fu_2875_p2);
    p_Result_37_fu_2919_p3 <= tmp_V_13_fu_2795_p3(to_integer(unsigned(add_ln949_fu_2913_p2)) downto to_integer(unsigned(add_ln949_fu_2913_p2))) when (to_integer(unsigned(add_ln949_fu_2913_p2))>= 0 and to_integer(unsigned(add_ln949_fu_2913_p2))<=13) else "-";
    p_Result_39_fu_1450_p3 <= ireg_V_fu_1442_p1(63 downto 63);
    p_Result_40_fu_1484_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_1476_p3),54));
    p_Result_41_fu_2781_p3 <= prediction_V_q0(13 downto 13);
    p_Result_42_fu_2813_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_2803_p4);
    p_Result_43_fu_3042_p5 <= (tmp_9_fu_3035_p3 & m_16_fu_3004_p1(22 downto 0));
    
    p_Result_s_fu_2803_p4_proc : process(tmp_V_13_fu_2795_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_2803_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_13_fu_2795_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_2803_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_2803_p4_i) := tmp_V_13_fu_2795_p3(14-1-p_Result_s_fu_2803_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_2803_p4 <= resvalue(14-1 downto 0);
    end process;

    p_shl2_cast_fu_1976_p3 <= (grp_fu_3076_p3 & ap_const_lv3_0);
    p_shl_cast_fu_1823_p3 <= (grp_fu_3066_p3 & ap_const_lv3_0);

    prediction_V_address0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_enable_reg_pp7_iter0, zext_ln120_fu_2770_p1, ap_CS_fsm_state50, grp_soft_max_fu_1328_prediction_V_address0, ap_CS_fsm_state45, ap_block_pp7_stage0)
    begin
        if (((ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0) and (ap_const_boolean_0 = ap_block_pp7_stage0))) then 
            prediction_V_address0 <= zext_ln120_fu_2770_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            prediction_V_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            prediction_V_address0 <= grp_soft_max_fu_1328_prediction_V_address0;
        else 
            prediction_V_address0 <= "XXXX";
        end if; 
    end process;


    prediction_V_ce0_assign_proc : process(ap_CS_fsm_pp7_stage0, ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter0, ap_CS_fsm_state50, grp_soft_max_fu_1328_prediction_V_ce0, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or ((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp7_stage0)))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            prediction_V_ce0 <= grp_soft_max_fu_1328_prediction_V_ce0;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    prediction_V_d0_assign_proc : process(ap_CS_fsm_state50, grp_soft_max_fu_1328_prediction_V_d0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            prediction_V_d0 <= ap_const_lv14_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            prediction_V_d0 <= grp_soft_max_fu_1328_prediction_V_d0;
        else 
            prediction_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    prediction_V_we0_assign_proc : process(ap_CS_fsm_state50, grp_soft_max_fu_1328_prediction_V_we0, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            prediction_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            prediction_V_we0 <= grp_soft_max_fu_1328_prediction_V_we0;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_address0 <= zext_ln120_reg_3584_pp7_iter1_reg(4 - 1 downto 0);

    prediction_output_ce0_assign_proc : process(ap_block_pp7_stage0_11001, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1))) then 
            prediction_output_ce0 <= ap_const_logic_1;
        else 
            prediction_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_output_d0 <= 
        ap_const_lv32_0 when (icmp_ln935_reg_3594(0) = '1') else 
        bitcast_ln739_fu_3054_p1;

    prediction_output_we0_assign_proc : process(ap_block_pp7_stage0_11001, icmp_ln119_reg_3575_pp7_iter1_reg, ap_enable_reg_pp7_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp7_stage0_11001) and (ap_enable_reg_pp7_iter2 = ap_const_logic_1) and (icmp_ln119_reg_3575_pp7_iter1_reg = ap_const_lv1_0))) then 
            prediction_output_we0 <= ap_const_logic_1;
        else 
            prediction_output_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln19_1_fu_2619_p3 <= 
        ap_const_lv13_0 when (tmp_24_fu_2611_p3(0) = '1') else 
        add_ln203_1_fu_2605_p2;
    select_ln19_fu_2459_p3 <= 
        ap_const_lv13_0 when (tmp_23_fu_2451_p3(0) = '1') else 
        add_ln203_fu_2445_p2;
    select_ln38_fu_1874_p3 <= 
        ap_const_lv8_1 when (icmp_ln38_fu_1747_p2(0) = '1') else 
        add_ln38_fu_1868_p2;
    select_ln40_1_fu_1761_p3 <= 
        i_2_fu_1741_p2 when (icmp_ln38_fu_1747_p2(0) = '1') else 
        ap_phi_mux_i14_0_phi_fu_946_p4;
    select_ln40_2_fu_1803_p3 <= 
        ap_const_lv3_0 when (or_ln40_fu_1797_p2(0) = '1') else 
        k_0_reg_975;
    select_ln40_3_fu_1811_p3 <= 
        j_fu_1791_p2 when (and_ln40_fu_1785_p2(0) = '1') else 
        select_ln40_fu_1753_p3;
    select_ln40_fu_1753_p3 <= 
        ap_const_lv5_0 when (icmp_ln38_fu_1747_p2(0) = '1') else 
        ap_phi_mux_j15_0_phi_fu_968_p4;
    select_ln52_fu_2027_p3 <= 
        ap_const_lv7_1 when (icmp_ln52_fu_1900_p2(0) = '1') else 
        add_ln52_fu_2021_p2;
    select_ln54_1_fu_1914_p3 <= 
        i_4_fu_1894_p2 when (icmp_ln52_fu_1900_p2(0) = '1') else 
        ap_phi_mux_i26_0_phi_fu_1001_p4;
    select_ln54_2_fu_1956_p3 <= 
        ap_const_lv3_0 when (or_ln54_fu_1950_p2(0) = '1') else 
        k28_0_reg_1030;
    select_ln54_3_fu_1964_p3 <= 
        j_2_fu_1944_p2 when (and_ln54_fu_1938_p2(0) = '1') else 
        select_ln54_fu_1906_p3;
    select_ln54_fu_1906_p3 <= 
        ap_const_lv4_0 when (icmp_ln52_fu_1900_p2(0) = '1') else 
        ap_phi_mux_j27_0_phi_fu_1023_p4;
    select_ln588_fu_1591_p3 <= 
        ap_const_lv14_3FFF when (tmp_21_fu_1583_p3(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_1_fu_1689_p3 <= 
        select_ln588_fu_1591_p3 when (and_ln585_fu_1645_p2(0) = '1') else 
        trunc_ln583_fu_1550_p1;
    select_ln603_2_fu_1703_p3 <= 
        select_ln603_fu_1675_p3 when (or_ln603_fu_1683_p2(0) = '1') else 
        select_ln603_1_fu_1689_p3;
    select_ln603_3_fu_1717_p3 <= 
        select_ln603_2_fu_1703_p3 when (or_ln603_2_fu_1711_p2(0) = '1') else 
        ap_const_lv14_0;
    select_ln603_fu_1675_p3 <= 
        shl_ln604_fu_1603_p2 when (and_ln603_fu_1669_p2(0) = '1') else 
        trunc_ln586_fu_1576_p1;
    select_ln66_fu_2163_p3 <= 
        ap_const_lv9_1 when (icmp_ln66_fu_2053_p2(0) = '1') else 
        add_ln66_fu_2157_p2;
    select_ln68_1_fu_2067_p3 <= 
        i_6_fu_2047_p2 when (icmp_ln66_fu_2053_p2(0) = '1') else 
        ap_phi_mux_i39_0_phi_fu_1056_p4;
    select_ln68_2_fu_2109_p3 <= 
        ap_const_lv5_0 when (or_ln68_fu_2103_p2(0) = '1') else 
        k41_0_reg_1085;
    select_ln68_3_fu_2117_p3 <= 
        j_3_fu_2097_p2 when (and_ln68_fu_2091_p2(0) = '1') else 
        select_ln68_fu_2059_p3;
    select_ln68_fu_2059_p3 <= 
        ap_const_lv4_0 when (icmp_ln66_fu_2053_p2(0) = '1') else 
        ap_phi_mux_j40_0_phi_fu_1078_p4;
    select_ln80_fu_2324_p3 <= 
        ap_const_lv8_1 when (icmp_ln80_fu_2189_p2(0) = '1') else 
        add_ln80_fu_2318_p2;
    select_ln82_1_fu_2203_p3 <= 
        i_8_fu_2183_p2 when (icmp_ln80_fu_2189_p2(0) = '1') else 
        ap_phi_mux_i52_0_phi_fu_1111_p4;
    select_ln82_2_fu_2263_p3 <= 
        ap_const_lv5_0 when (or_ln82_fu_2257_p2(0) = '1') else 
        k54_0_reg_1140;
    select_ln82_3_fu_2271_p3 <= 
        j_4_fu_2251_p2 when (and_ln82_fu_2245_p2(0) = '1') else 
        select_ln82_fu_2195_p3;
    select_ln82_fu_2195_p3 <= 
        ap_const_lv3_0 when (icmp_ln80_fu_2189_p2(0) = '1') else 
        ap_phi_mux_j53_0_phi_fu_1133_p4;
    select_ln964_fu_3016_p3 <= 
        ap_const_lv8_7F when (tmp_28_fu_3008_p3(0) = '1') else 
        ap_const_lv8_7E;
        sext_ln1117_fu_2557_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_2552_p2),64));

    sext_ln1265_1_fu_2587_p0 <= dense_2_bias_V_q0;
        sext_ln1265_1_fu_2587_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_1_fu_2587_p0),14));

        sext_ln1265_2_fu_2747_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    sext_ln1265_fu_2427_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_2427_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_2427_p0),14));

        sext_ln203_fu_1725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln203_10_reg_3188),64));

        sext_ln581_fu_1540_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sh_amt_fu_1532_p3),32));

    sext_ln581cast_fu_1599_p1 <= sext_ln581_fu_1540_p1(14 - 1 downto 0);
    sext_ln703_2_fu_2595_p0 <= dense_2_bias_V_q0;
        sext_ln703_2_fu_2595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_2_fu_2595_p0),13));

    sext_ln703_fu_2435_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_2435_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_2435_p0),13));

    sh_amt_fu_1532_p3 <= 
        add_ln581_fu_1520_p2 when (icmp_ln581_fu_1514_p2(0) = '1') else 
        sub_ln581_fu_1526_p2;
    shl_ln604_fu_1603_p2 <= std_logic_vector(shift_left(unsigned(trunc_ln583_fu_1550_p1),to_integer(unsigned('0' & sext_ln581cast_fu_1599_p1(14-1 downto 0)))));
    shl_ln958_fu_2976_p2 <= std_logic_vector(shift_left(unsigned(m_fu_2957_p1),to_integer(unsigned('0' & sub_ln958_fu_2971_p2(31-1 downto 0)))));
    sub_ln1117_fu_2546_p2 <= std_logic_vector(unsigned(zext_ln1117_6_fu_2530_p1) - unsigned(zext_ln1117_7_fu_2542_p1));
    sub_ln203_1_fu_1841_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_1823_p3) - unsigned(zext_ln203_19_fu_1837_p1));
    sub_ln203_2_fu_1994_p2 <= std_logic_vector(unsigned(p_shl2_cast_fu_1976_p3) - unsigned(zext_ln203_24_fu_1990_p1));
    sub_ln203_fu_1404_p2 <= std_logic_vector(unsigned(zext_ln203_fu_1388_p1) - unsigned(zext_ln203_17_fu_1400_p1));
    sub_ln581_fu_1526_p2 <= std_logic_vector(unsigned(ap_const_lv12_8) - unsigned(F2_fu_1508_p2));
    sub_ln944_fu_2829_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_2821_p3));
    sub_ln947_fu_2865_p2 <= std_logic_vector(unsigned(ap_const_lv4_7) - unsigned(trunc_ln947_fu_2861_p1));
    sub_ln958_fu_2971_p2 <= std_logic_vector(unsigned(ap_const_lv32_19) - unsigned(sub_ln944_reg_3609));
    sub_ln964_fu_3024_p2 <= std_logic_vector(unsigned(ap_const_lv8_6) - unsigned(trunc_ln943_reg_3625));
    tmp_11_fu_1392_p3 <= (i_0_reg_899 & ap_const_lv2_0);
    tmp_12_fu_2215_p3 <= (select_ln82_1_fu_2203_p3 & ap_const_lv2_0);
    tmp_13_fu_2522_p3 <= (j_0_i10_reg_1241 & ap_const_lv5_0);
    tmp_14_fu_2534_p3 <= (j_0_i10_reg_1241 & ap_const_lv1_0);
    tmp_15_fu_2682_p3 <= (f_0_i_reg_1286 & ap_const_lv3_0);
    tmp_16_fu_2694_p3 <= (f_0_i_reg_1286 & ap_const_lv1_0);
    tmp_19_fu_1830_p3 <= (grp_fu_3066_p3 & ap_const_lv1_0);
    tmp_21_fu_1583_p3 <= bitcast_ln696_fu_1580_p1(31 downto 31);
    tmp_22_fu_1983_p3 <= (grp_fu_3076_p3 & ap_const_lv1_0);
    tmp_23_fu_2451_p3 <= add_ln703_fu_2439_p2(13 downto 13);
    tmp_24_fu_2611_p3 <= add_ln703_1_fu_2599_p2(13 downto 13);
    tmp_26_fu_2845_p4 <= lsb_index_fu_2839_p2(31 downto 1);
    tmp_27_fu_2899_p3 <= lsb_index_fu_2839_p2(31 downto 31);
    tmp_28_fu_3008_p3 <= m_13_fu_2989_p2(25 downto 25);
    tmp_39_cast_fu_2129_p3 <= (grp_fu_3086_p3 & ap_const_lv4_0);
    tmp_42_cast_fu_2289_p3 <= (add_ln203_16_fu_2283_p2 & ap_const_lv4_0);
    tmp_9_fu_3035_p3 <= (p_Result_41_reg_3599 & add_ln964_fu_3029_p2);
    tmp_V_13_fu_2795_p3 <= 
        tmp_V_fu_2789_p2 when (p_Result_41_fu_2781_p3(0) = '1') else 
        prediction_V_q0;
    tmp_V_fu_2789_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(prediction_V_q0));
    tmp_fu_1380_p3 <= (i_0_reg_899 & ap_const_lv5_0);
    tmp_s_fu_1476_p3 <= (ap_const_lv1_1 & trunc_ln565_fu_1472_p1);
    trunc_ln556_fu_1446_p1 <= ireg_V_fu_1442_p1(63 - 1 downto 0);
    trunc_ln565_fu_1472_p1 <= ireg_V_fu_1442_p1(52 - 1 downto 0);
    trunc_ln583_fu_1550_p1 <= man_V_2_fu_1494_p3(14 - 1 downto 0);
    trunc_ln586_fu_1576_p1 <= ashr_ln586_fu_1570_p2(14 - 1 downto 0);
    trunc_ln703_1_fu_2591_p1 <= p_Val2_32_reg_1229(13 - 1 downto 0);
    trunc_ln703_fu_2431_p1 <= p_Val2_29_reg_1173(13 - 1 downto 0);
    trunc_ln943_fu_2953_p1 <= l_fu_2821_p3(8 - 1 downto 0);
    trunc_ln944_fu_2835_p1 <= sub_ln944_fu_2829_p2(14 - 1 downto 0);
    trunc_ln947_fu_2861_p1 <= sub_ln944_fu_2829_p2(4 - 1 downto 0);
    xor_ln40_fu_1773_p2 <= (icmp_ln38_fu_1747_p2 xor ap_const_lv1_1);
    xor_ln54_fu_1926_p2 <= (icmp_ln52_fu_1900_p2 xor ap_const_lv1_1);
    xor_ln571_fu_1609_p2 <= (icmp_ln571_fu_1502_p2 xor ap_const_lv1_1);
    xor_ln581_fu_1663_p2 <= (or_ln581_fu_1657_p2 xor ap_const_lv1_1);
    xor_ln582_fu_1627_p2 <= (or_ln582_fu_1621_p2 xor ap_const_lv1_1);
    xor_ln585_fu_1639_p2 <= (icmp_ln585_fu_1554_p2 xor ap_const_lv1_1);
    xor_ln68_fu_2079_p2 <= (icmp_ln66_fu_2053_p2 xor ap_const_lv1_1);
    xor_ln82_fu_2233_p2 <= (icmp_ln80_fu_2189_p2 xor ap_const_lv1_1);
    xor_ln949_fu_2907_p2 <= (tmp_27_fu_2899_p3 xor ap_const_lv1_1);
    zext_ln104_fu_2480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i56_0_reg_1207),64));
    zext_ln1116_8_fu_2702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_2694_p3),9));
    zext_ln1116_9_fu_2717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_4_fu_2712_p2),64));
    zext_ln1116_fu_2690_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_2682_p3),9));
    zext_ln1117_6_fu_2530_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_2522_p3),12));
    zext_ln1117_7_fu_2542_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_2534_p3),12));
    zext_ln1117_fu_2397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_2392_p2),64));
    zext_ln113_fu_2640_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i57_0_reg_1252),64));
    zext_ln120_fu_2770_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i58_0_reg_1297),64));
    zext_ln13_3_fu_2501_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_1218),12));
    zext_ln13_fu_2365_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_1162),15));
    zext_ln14_1_fu_2381_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i_reg_1185),64));
    zext_ln14_2_fu_2497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i5_reg_1218),64));
    zext_ln14_3_fu_2517_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_i10_reg_1241),64));
    zext_ln14_fu_2361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_i_reg_1162),64));
    zext_ln203_17_fu_1400_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_1392_p3),11));
    zext_ln203_19_fu_1837_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_1830_p3),13));
    zext_ln203_20_fu_1847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln40_2_fu_1803_p3),13));
    zext_ln203_21_fu_1857_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_9_fu_1851_p2),64));
    zext_ln203_22_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_920),11));
    zext_ln203_24_fu_1990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_1983_p3),11));
    zext_ln203_25_fu_2000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln54_2_fu_1956_p3),11));
    zext_ln203_26_fu_2010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_12_fu_2004_p2),64));
    zext_ln203_28_fu_2136_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln68_2_fu_2109_p3),12));
    zext_ln203_29_fu_2146_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_14_fu_2140_p2),64));
    zext_ln203_30_fu_2211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_1_fu_2203_p3),6));
    zext_ln203_31_fu_2223_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_2215_p3),6));
    zext_ln203_32_fu_2297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_2_fu_2263_p3),10));
    zext_ln203_33_fu_2307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_17_fu_2301_p2),64));
    zext_ln203_fu_1388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_1380_p3),11));
    zext_ln27_fu_1431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ix_in_1_reg_910),64));
    zext_ln461_fu_1468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(exp_tmp_V_fu_1458_p4),12));
    zext_ln46_fu_2661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_1263),9));
    zext_ln48_1_fu_2677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_i_reg_1286),64));
    zext_ln48_fu_2657_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_i_reg_1263),64));
    zext_ln586_fu_1566_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln581_fu_1540_p1),54));
    zext_ln82_fu_2279_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln82_3_fu_2271_p3),6));
    zext_ln947_fu_2871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln947_fu_2865_p2),14));
    zext_ln94_fu_2344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i55_0_reg_1151),64));
end behav;
