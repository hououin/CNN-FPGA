// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_out (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_2_out_V_address0,
        dense_2_out_V_ce0,
        dense_2_out_V_q0,
        dense_2_out_V_address1,
        dense_2_out_V_ce1,
        dense_2_out_V_q1,
        prediction_V_address0,
        prediction_V_ce0,
        prediction_V_we0,
        prediction_V_d0
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_pp0_stage0 = 10'd4;
parameter    ap_ST_fsm_pp0_stage1 = 10'd8;
parameter    ap_ST_fsm_pp0_stage2 = 10'd16;
parameter    ap_ST_fsm_pp0_stage3 = 10'd32;
parameter    ap_ST_fsm_pp0_stage4 = 10'd64;
parameter    ap_ST_fsm_state9 = 10'd128;
parameter    ap_ST_fsm_state10 = 10'd256;
parameter    ap_ST_fsm_state11 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] dense_2_out_V_address0;
output   dense_2_out_V_ce0;
input  [12:0] dense_2_out_V_q0;
output  [4:0] dense_2_out_V_address1;
output   dense_2_out_V_ce1;
input  [12:0] dense_2_out_V_q1;
output  [3:0] prediction_V_address0;
output   prediction_V_ce0;
output   prediction_V_we0;
output  [13:0] prediction_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] dense_2_out_V_address0;
reg dense_2_out_V_ce0;
reg[4:0] dense_2_out_V_address1;
reg dense_2_out_V_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] dense_out_weights_V_address0;
reg    dense_out_weights_V_ce0;
wire  signed [8:0] dense_out_weights_V_q0;
reg   [8:0] dense_out_weights_V_address1;
reg    dense_out_weights_V_ce1;
wire  signed [8:0] dense_out_weights_V_q1;
wire   [3:0] dense_out_bias_V_address0;
reg    dense_out_bias_V_ce0;
wire   [7:0] dense_out_bias_V_q0;
reg   [13:0] p_Val2_0_reg_318;
reg   [4:0] f_0_0_reg_330;
wire   [0:0] icmp_ln41_fu_355_p2;
wire    ap_CS_fsm_state2;
wire   [3:0] d_fu_361_p2;
reg   [3:0] d_reg_1244;
wire   [63:0] zext_ln48_fu_367_p1;
reg   [63:0] zext_ln48_reg_1249;
wire   [9:0] zext_ln46_fu_371_p1;
reg   [9:0] zext_ln46_reg_1255;
wire   [8:0] zext_ln46_1_fu_375_p1;
reg   [8:0] zext_ln46_1_reg_1266;
wire   [0:0] icmp_ln46_fu_379_p2;
reg   [0:0] icmp_ln46_reg_1273;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state8_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [5:0] f_0_0_cast1_fu_481_p1;
reg   [5:0] f_0_0_cast1_reg_1297;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state4_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_11001;
reg   [13:0] tmp_8_reg_1317;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state5_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_11001;
reg   [13:0] tmp_14_reg_1342;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state6_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_11001;
reg   [13:0] tmp_20_reg_1367;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state7_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_11001;
reg   [13:0] tmp_26_reg_1392;
wire   [4:0] add_ln46_8_fu_1084_p2;
reg   [4:0] add_ln46_8_reg_1407;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_CS_fsm_state9;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
wire    ap_block_pp0_stage4_subdone;
reg   [3:0] dense_array_V_address0;
reg    dense_array_V_ce0;
reg    dense_array_V_we0;
wire   [13:0] dense_array_V_d0;
wire   [13:0] dense_array_V_q0;
reg    dense_array_V_ce1;
reg    dense_array_V_we1;
wire   [13:0] dense_array_V_q1;
wire    grp_soft_max_fu_342_ap_start;
wire    grp_soft_max_fu_342_ap_done;
wire    grp_soft_max_fu_342_ap_idle;
wire    grp_soft_max_fu_342_ap_ready;
wire   [3:0] grp_soft_max_fu_342_dense_array_V_address0;
wire    grp_soft_max_fu_342_dense_array_V_ce0;
wire   [3:0] grp_soft_max_fu_342_dense_array_V_address1;
wire    grp_soft_max_fu_342_dense_array_V_ce1;
wire    grp_soft_max_fu_342_dense_array_V_we1;
wire   [13:0] grp_soft_max_fu_342_dense_array_V_d1;
wire   [3:0] grp_soft_max_fu_342_prediction_V_address0;
wire    grp_soft_max_fu_342_prediction_V_ce0;
wire    grp_soft_max_fu_342_prediction_V_we0;
wire   [13:0] grp_soft_max_fu_342_prediction_V_d0;
reg   [3:0] d_0_reg_307;
wire    ap_CS_fsm_state10;
wire    ap_block_pp0_stage0;
reg   [4:0] ap_phi_mux_f_0_0_phi_fu_334_p4;
reg    grp_soft_max_fu_342_ap_start_reg;
wire    ap_CS_fsm_state11;
wire   [63:0] zext_ln1116_2_fu_425_p1;
wire   [63:0] zext_ln48_1_fu_385_p1;
wire   [63:0] zext_ln1116_5_fu_476_p1;
wire   [63:0] zext_ln48_2_fu_436_p1;
wire   [63:0] zext_ln1116_8_fu_572_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln48_3_fu_532_p1;
wire   [63:0] zext_ln1116_11_fu_632_p1;
wire   [63:0] zext_ln48_4_fu_592_p1;
wire   [63:0] zext_ln1116_14_fu_722_p1;
wire    ap_block_pp0_stage2;
wire   [63:0] zext_ln48_5_fu_682_p1;
wire   [63:0] zext_ln1116_17_fu_781_p1;
wire   [63:0] zext_ln48_6_fu_741_p1;
wire   [63:0] zext_ln1116_20_fu_871_p1;
wire    ap_block_pp0_stage3;
wire   [63:0] zext_ln48_7_fu_831_p1;
wire   [63:0] zext_ln1116_23_fu_930_p1;
wire   [63:0] zext_ln48_8_fu_890_p1;
wire   [63:0] zext_ln1116_26_fu_1020_p1;
wire    ap_block_pp0_stage4;
wire   [63:0] zext_ln48_9_fu_980_p1;
wire   [63:0] zext_ln1116_29_fu_1079_p1;
wire   [63:0] zext_ln48_10_fu_1039_p1;
wire   [7:0] tmp_1_fu_390_p3;
wire   [5:0] tmp_2_fu_402_p3;
wire   [8:0] zext_ln1116_1_fu_410_p1;
wire   [8:0] zext_ln1116_fu_398_p1;
wire   [8:0] add_ln1116_fu_414_p2;
wire   [8:0] add_ln1116_1_fu_420_p2;
wire   [4:0] or_ln46_fu_430_p2;
wire   [7:0] tmp_3_fu_441_p3;
wire   [5:0] tmp_4_fu_453_p3;
wire   [8:0] zext_ln1116_4_fu_461_p1;
wire   [8:0] zext_ln1116_3_fu_449_p1;
wire   [8:0] add_ln1116_2_fu_465_p2;
wire   [8:0] add_ln1116_3_fu_471_p2;
wire  signed [21:0] grp_fu_1150_p3;
wire   [13:0] tmp_5_fu_509_p4;
wire   [4:0] add_ln46_fu_526_p2;
wire   [7:0] tmp_6_fu_537_p3;
wire   [5:0] tmp_7_fu_549_p3;
wire   [8:0] zext_ln1116_7_fu_557_p1;
wire   [8:0] zext_ln1116_6_fu_545_p1;
wire   [8:0] add_ln1116_4_fu_561_p2;
wire   [8:0] add_ln1116_5_fu_567_p2;
wire  signed [21:0] grp_fu_1159_p3;
wire   [5:0] add_ln46_1_fu_586_p2;
wire   [8:0] tmp_9_fu_597_p3;
wire   [6:0] tmp_10_fu_609_p3;
wire   [9:0] zext_ln1116_10_fu_617_p1;
wire   [9:0] zext_ln1116_9_fu_605_p1;
wire   [9:0] add_ln1116_6_fu_621_p2;
wire   [9:0] add_ln1116_7_fu_627_p2;
wire  signed [21:0] grp_fu_1168_p3;
wire   [13:0] tmp_11_fu_660_p4;
wire   [5:0] add_ln46_2_fu_677_p2;
wire   [8:0] tmp_12_fu_687_p3;
wire   [6:0] tmp_13_fu_699_p3;
wire   [9:0] zext_ln1116_13_fu_707_p1;
wire   [9:0] zext_ln1116_12_fu_695_p1;
wire   [9:0] add_ln1116_8_fu_711_p2;
wire   [9:0] add_ln1116_9_fu_717_p2;
wire  signed [21:0] grp_fu_1177_p3;
wire   [5:0] add_ln46_3_fu_736_p2;
wire   [8:0] tmp_15_fu_746_p3;
wire   [6:0] tmp_16_fu_758_p3;
wire   [9:0] zext_ln1116_16_fu_766_p1;
wire   [9:0] zext_ln1116_15_fu_754_p1;
wire   [9:0] add_ln1116_10_fu_770_p2;
wire   [9:0] add_ln1116_11_fu_776_p2;
wire  signed [21:0] grp_fu_1186_p3;
wire   [13:0] tmp_17_fu_809_p4;
wire   [5:0] add_ln46_4_fu_826_p2;
wire   [8:0] tmp_18_fu_836_p3;
wire   [6:0] tmp_19_fu_848_p3;
wire   [9:0] zext_ln1116_19_fu_856_p1;
wire   [9:0] zext_ln1116_18_fu_844_p1;
wire   [9:0] add_ln1116_12_fu_860_p2;
wire   [9:0] add_ln1116_13_fu_866_p2;
wire  signed [21:0] grp_fu_1195_p3;
wire   [5:0] add_ln46_5_fu_885_p2;
wire   [8:0] tmp_21_fu_895_p3;
wire   [6:0] tmp_22_fu_907_p3;
wire   [9:0] zext_ln1116_22_fu_915_p1;
wire   [9:0] zext_ln1116_21_fu_903_p1;
wire   [9:0] add_ln1116_14_fu_919_p2;
wire   [9:0] add_ln1116_15_fu_925_p2;
wire  signed [21:0] grp_fu_1204_p3;
wire   [13:0] tmp_23_fu_958_p4;
wire   [5:0] add_ln46_6_fu_975_p2;
wire   [8:0] tmp_24_fu_985_p3;
wire   [6:0] tmp_25_fu_997_p3;
wire   [9:0] zext_ln1116_25_fu_1005_p1;
wire   [9:0] zext_ln1116_24_fu_993_p1;
wire   [9:0] add_ln1116_16_fu_1009_p2;
wire   [9:0] add_ln1116_17_fu_1015_p2;
wire  signed [21:0] grp_fu_1213_p3;
wire   [5:0] add_ln46_7_fu_1034_p2;
wire   [8:0] tmp_27_fu_1044_p3;
wire   [6:0] tmp_28_fu_1056_p3;
wire   [9:0] zext_ln1116_28_fu_1064_p1;
wire   [9:0] zext_ln1116_27_fu_1052_p1;
wire   [9:0] add_ln1116_18_fu_1068_p2;
wire   [9:0] add_ln1116_19_fu_1074_p2;
wire  signed [21:0] grp_fu_1222_p3;
wire   [13:0] tmp_29_fu_1113_p4;
wire  signed [21:0] grp_fu_1231_p3;
wire  signed [13:0] sext_ln1265_fu_1139_p1;
wire   [12:0] grp_fu_1150_p0;
wire   [21:0] grp_fu_1150_p2;
wire   [12:0] grp_fu_1159_p0;
wire   [21:0] grp_fu_1159_p2;
wire   [12:0] grp_fu_1168_p0;
wire   [21:0] grp_fu_1168_p2;
wire   [12:0] grp_fu_1177_p0;
wire   [21:0] grp_fu_1177_p2;
wire   [12:0] grp_fu_1186_p0;
wire   [21:0] grp_fu_1186_p2;
wire   [12:0] grp_fu_1195_p0;
wire   [21:0] grp_fu_1195_p2;
wire   [12:0] grp_fu_1204_p0;
wire   [21:0] grp_fu_1204_p2;
wire   [12:0] grp_fu_1213_p0;
wire   [21:0] grp_fu_1213_p2;
wire   [12:0] grp_fu_1222_p0;
wire   [21:0] grp_fu_1222_p2;
wire   [12:0] grp_fu_1231_p0;
wire   [21:0] grp_fu_1231_p2;
reg   [9:0] ap_NS_fsm;
wire    ap_block_pp0_stage1_subdone;
wire    ap_block_pp0_stage2_subdone;
wire    ap_block_pp0_stage3_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [21:0] grp_fu_1150_p00;
wire   [21:0] grp_fu_1159_p00;
wire   [21:0] grp_fu_1168_p00;
wire   [21:0] grp_fu_1177_p00;
wire   [21:0] grp_fu_1186_p00;
wire   [21:0] grp_fu_1195_p00;
wire   [21:0] grp_fu_1204_p00;
wire   [21:0] grp_fu_1213_p00;
wire   [21:0] grp_fu_1222_p00;
wire   [21:0] grp_fu_1231_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 grp_soft_max_fu_342_ap_start_reg = 1'b0;
end

dense_out_dense_osc4 #(
    .DataWidth( 9 ),
    .AddressRange( 300 ),
    .AddressWidth( 9 ))
dense_out_weights_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_weights_V_address0),
    .ce0(dense_out_weights_V_ce0),
    .q0(dense_out_weights_V_q0),
    .address1(dense_out_weights_V_address1),
    .ce1(dense_out_weights_V_ce1),
    .q1(dense_out_weights_V_q1)
);

dense_out_dense_otde #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_out_bias_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_out_bias_V_address0),
    .ce0(dense_out_bias_V_ce0),
    .q0(dense_out_bias_V_q0)
);

dense_out_dense_audo #(
    .DataWidth( 14 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
dense_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_array_V_address0),
    .ce0(dense_array_V_ce0),
    .we0(dense_array_V_we0),
    .d0(dense_array_V_d0),
    .q0(dense_array_V_q0),
    .address1(grp_soft_max_fu_342_dense_array_V_address1),
    .ce1(dense_array_V_ce1),
    .we1(dense_array_V_we1),
    .d1(grp_soft_max_fu_342_dense_array_V_d1),
    .q1(dense_array_V_q1)
);

soft_max grp_soft_max_fu_342(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_soft_max_fu_342_ap_start),
    .ap_done(grp_soft_max_fu_342_ap_done),
    .ap_idle(grp_soft_max_fu_342_ap_idle),
    .ap_ready(grp_soft_max_fu_342_ap_ready),
    .dense_array_V_address0(grp_soft_max_fu_342_dense_array_V_address0),
    .dense_array_V_ce0(grp_soft_max_fu_342_dense_array_V_ce0),
    .dense_array_V_q0(dense_array_V_q0),
    .dense_array_V_address1(grp_soft_max_fu_342_dense_array_V_address1),
    .dense_array_V_ce1(grp_soft_max_fu_342_dense_array_V_ce1),
    .dense_array_V_we1(grp_soft_max_fu_342_dense_array_V_we1),
    .dense_array_V_d1(grp_soft_max_fu_342_dense_array_V_d1),
    .dense_array_V_q1(dense_array_V_q1),
    .prediction_V_address0(grp_soft_max_fu_342_prediction_V_address0),
    .prediction_V_ce0(grp_soft_max_fu_342_prediction_V_ce0),
    .prediction_V_we0(grp_soft_max_fu_342_prediction_V_we0),
    .prediction_V_d0(grp_soft_max_fu_342_prediction_V_d0)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U42(
    .din0(grp_fu_1150_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_1150_p2),
    .dout(grp_fu_1150_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U43(
    .din0(grp_fu_1159_p0),
    .din1(dense_out_weights_V_q1),
    .din2(grp_fu_1159_p2),
    .dout(grp_fu_1159_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U44(
    .din0(grp_fu_1168_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_1168_p2),
    .dout(grp_fu_1168_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U45(
    .din0(grp_fu_1177_p0),
    .din1(dense_out_weights_V_q1),
    .din2(grp_fu_1177_p2),
    .dout(grp_fu_1177_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U46(
    .din0(grp_fu_1186_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_1186_p2),
    .dout(grp_fu_1186_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U47(
    .din0(grp_fu_1195_p0),
    .din1(dense_out_weights_V_q1),
    .din2(grp_fu_1195_p2),
    .dout(grp_fu_1195_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U48(
    .din0(grp_fu_1204_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_1204_p2),
    .dout(grp_fu_1204_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U49(
    .din0(grp_fu_1213_p0),
    .din1(dense_out_weights_V_q1),
    .din2(grp_fu_1213_p2),
    .dout(grp_fu_1213_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U50(
    .din0(grp_fu_1222_p0),
    .din1(dense_out_weights_V_q0),
    .din2(grp_fu_1222_p2),
    .dout(grp_fu_1222_p3)
);

cnn_mac_muladd_13vdy #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 13 ),
    .din1_WIDTH( 9 ),
    .din2_WIDTH( 22 ),
    .dout_WIDTH( 22 ))
cnn_mac_muladd_13vdy_U51(
    .din0(grp_fu_1231_p0),
    .din1(dense_out_weights_V_q1),
    .din2(grp_fu_1231_p2),
    .dout(grp_fu_1231_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln41_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage4_subdone) & (1'b1 == ap_CS_fsm_pp0_stage4)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((icmp_ln41_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_soft_max_fu_342_ap_start_reg <= 1'b0;
    end else begin
        if (((icmp_ln41_fu_355_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_soft_max_fu_342_ap_start_reg <= 1'b1;
        end else if ((grp_soft_max_fu_342_ap_ready == 1'b1)) begin
            grp_soft_max_fu_342_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        d_0_reg_307 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        d_0_reg_307 <= d_reg_1244;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_0_reg_330 <= add_ln46_8_reg_1407;
    end else if (((icmp_ln41_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        f_0_0_reg_330 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln46_reg_1273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        p_Val2_0_reg_318 <= {{grp_fu_1231_p3[21:8]}};
    end else if (((icmp_ln41_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        p_Val2_0_reg_318 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1273 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        add_ln46_8_reg_1407 <= add_ln46_8_fu_1084_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_reg_1244 <= d_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        f_0_0_cast1_reg_1297[4 : 0] <= f_0_0_cast1_fu_481_p1[4 : 0];
        tmp_8_reg_1317 <= {{grp_fu_1159_p3[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln46_reg_1273 <= icmp_ln46_fu_379_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        tmp_14_reg_1342 <= {{grp_fu_1177_p3[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001))) begin
        tmp_20_reg_1367 <= {{grp_fu_1195_p3[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln46_reg_1273 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001))) begin
        tmp_26_reg_1392 <= {{grp_fu_1213_p3[21:8]}};
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln41_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        zext_ln46_1_reg_1266[3 : 0] <= zext_ln46_1_fu_375_p1[3 : 0];
        zext_ln46_reg_1255[3 : 0] <= zext_ln46_fu_371_p1[3 : 0];
        zext_ln48_reg_1249[3 : 0] <= zext_ln48_fu_367_p1[3 : 0];
    end
end

always @ (*) begin
    if ((icmp_ln46_fu_379_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((grp_soft_max_fu_342_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln46_reg_1273 == 1'd0) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_phi_mux_f_0_0_phi_fu_334_p4 = add_ln46_8_reg_1407;
    end else begin
        ap_phi_mux_f_0_0_phi_fu_334_p4 = f_0_0_reg_330;
    end
end

always @ (*) begin
    if (((grp_soft_max_fu_342_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_2_out_V_address0 = zext_ln48_9_fu_980_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_2_out_V_address0 = zext_ln48_7_fu_831_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_2_out_V_address0 = zext_ln48_5_fu_682_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_2_out_V_address0 = zext_ln48_3_fu_532_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_2_out_V_address0 = zext_ln48_1_fu_385_p1;
        end else begin
            dense_2_out_V_address0 = 'bx;
        end
    end else begin
        dense_2_out_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_2_out_V_address1 = zext_ln48_10_fu_1039_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_2_out_V_address1 = zext_ln48_8_fu_890_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_2_out_V_address1 = zext_ln48_6_fu_741_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_2_out_V_address1 = zext_ln48_4_fu_592_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_2_out_V_address1 = zext_ln48_2_fu_436_p1;
        end else begin
            dense_2_out_V_address1 = 'bx;
        end
    end else begin
        dense_2_out_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_2_out_V_ce0 = 1'b1;
    end else begin
        dense_2_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_2_out_V_ce1 = 1'b1;
    end else begin
        dense_2_out_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_array_V_address0 = zext_ln48_reg_1249;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_array_V_address0 = grp_soft_max_fu_342_dense_array_V_address0;
    end else begin
        dense_array_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_array_V_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_array_V_ce0 = grp_soft_max_fu_342_dense_array_V_ce0;
    end else begin
        dense_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_array_V_ce1 = grp_soft_max_fu_342_dense_array_V_ce1;
    end else begin
        dense_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_array_V_we0 = 1'b1;
    end else begin
        dense_array_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_array_V_we1 = grp_soft_max_fu_342_dense_array_V_we1;
    end else begin
        dense_array_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        dense_out_bias_V_ce0 = 1'b1;
    end else begin
        dense_out_bias_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_out_weights_V_address0 = zext_ln1116_26_fu_1020_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_out_weights_V_address0 = zext_ln1116_20_fu_871_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_out_weights_V_address0 = zext_ln1116_14_fu_722_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_out_weights_V_address0 = zext_ln1116_8_fu_572_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_out_weights_V_address0 = zext_ln1116_2_fu_425_p1;
        end else begin
            dense_out_weights_V_address0 = 'bx;
        end
    end else begin
        dense_out_weights_V_address0 = 'bx;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
        if (((1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
            dense_out_weights_V_address1 = zext_ln1116_29_fu_1079_p1;
        end else if (((1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
            dense_out_weights_V_address1 = zext_ln1116_23_fu_930_p1;
        end else if (((1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            dense_out_weights_V_address1 = zext_ln1116_17_fu_781_p1;
        end else if (((1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
            dense_out_weights_V_address1 = zext_ln1116_11_fu_632_p1;
        end else if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            dense_out_weights_V_address1 = zext_ln1116_5_fu_476_p1;
        end else begin
            dense_out_weights_V_address1 = 'bx;
        end
    end else begin
        dense_out_weights_V_address1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_out_weights_V_ce0 = 1'b1;
    end else begin
        dense_out_weights_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)))) begin
        dense_out_weights_V_ce1 = 1'b1;
    end else begin
        dense_out_weights_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln41_fu_355_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln46_fu_379_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln46_fu_379_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state11 : begin
            if (((grp_soft_max_fu_342_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln1116_10_fu_770_p2 = (zext_ln1116_16_fu_766_p1 + zext_ln1116_15_fu_754_p1);

assign add_ln1116_11_fu_776_p2 = (add_ln1116_10_fu_770_p2 + zext_ln46_reg_1255);

assign add_ln1116_12_fu_860_p2 = (zext_ln1116_19_fu_856_p1 + zext_ln1116_18_fu_844_p1);

assign add_ln1116_13_fu_866_p2 = (add_ln1116_12_fu_860_p2 + zext_ln46_reg_1255);

assign add_ln1116_14_fu_919_p2 = (zext_ln1116_22_fu_915_p1 + zext_ln1116_21_fu_903_p1);

assign add_ln1116_15_fu_925_p2 = (add_ln1116_14_fu_919_p2 + zext_ln46_reg_1255);

assign add_ln1116_16_fu_1009_p2 = (zext_ln1116_25_fu_1005_p1 + zext_ln1116_24_fu_993_p1);

assign add_ln1116_17_fu_1015_p2 = (add_ln1116_16_fu_1009_p2 + zext_ln46_reg_1255);

assign add_ln1116_18_fu_1068_p2 = (zext_ln1116_28_fu_1064_p1 + zext_ln1116_27_fu_1052_p1);

assign add_ln1116_19_fu_1074_p2 = (add_ln1116_18_fu_1068_p2 + zext_ln46_reg_1255);

assign add_ln1116_1_fu_420_p2 = (add_ln1116_fu_414_p2 + zext_ln46_1_reg_1266);

assign add_ln1116_2_fu_465_p2 = (zext_ln1116_4_fu_461_p1 + zext_ln1116_3_fu_449_p1);

assign add_ln1116_3_fu_471_p2 = (add_ln1116_2_fu_465_p2 + zext_ln46_1_reg_1266);

assign add_ln1116_4_fu_561_p2 = (zext_ln1116_7_fu_557_p1 + zext_ln1116_6_fu_545_p1);

assign add_ln1116_5_fu_567_p2 = (add_ln1116_4_fu_561_p2 + zext_ln46_1_reg_1266);

assign add_ln1116_6_fu_621_p2 = (zext_ln1116_10_fu_617_p1 + zext_ln1116_9_fu_605_p1);

assign add_ln1116_7_fu_627_p2 = (add_ln1116_6_fu_621_p2 + zext_ln46_reg_1255);

assign add_ln1116_8_fu_711_p2 = (zext_ln1116_13_fu_707_p1 + zext_ln1116_12_fu_695_p1);

assign add_ln1116_9_fu_717_p2 = (add_ln1116_8_fu_711_p2 + zext_ln46_reg_1255);

assign add_ln1116_fu_414_p2 = (zext_ln1116_1_fu_410_p1 + zext_ln1116_fu_398_p1);

assign add_ln46_1_fu_586_p2 = (f_0_0_cast1_fu_481_p1 + 6'd3);

assign add_ln46_2_fu_677_p2 = (f_0_0_cast1_reg_1297 + 6'd4);

assign add_ln46_3_fu_736_p2 = (f_0_0_cast1_reg_1297 + 6'd5);

assign add_ln46_4_fu_826_p2 = (f_0_0_cast1_reg_1297 + 6'd6);

assign add_ln46_5_fu_885_p2 = (f_0_0_cast1_reg_1297 + 6'd7);

assign add_ln46_6_fu_975_p2 = (f_0_0_cast1_reg_1297 + 6'd8);

assign add_ln46_7_fu_1034_p2 = (f_0_0_cast1_reg_1297 + 6'd9);

assign add_ln46_8_fu_1084_p2 = (f_0_0_reg_330 + 5'd10);

assign add_ln46_fu_526_p2 = (f_0_0_reg_330 + 5'd2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign d_fu_361_p2 = (d_0_reg_307 + 4'd1);

assign dense_array_V_d0 = ($signed(sext_ln1265_fu_1139_p1) + $signed(p_Val2_0_reg_318));

assign dense_out_bias_V_address0 = zext_ln48_reg_1249;

assign f_0_0_cast1_fu_481_p1 = f_0_0_reg_330;

assign grp_fu_1150_p0 = grp_fu_1150_p00;

assign grp_fu_1150_p00 = dense_2_out_V_q0;

assign grp_fu_1150_p2 = {{p_Val2_0_reg_318}, {8'd0}};

assign grp_fu_1159_p0 = grp_fu_1159_p00;

assign grp_fu_1159_p00 = dense_2_out_V_q1;

assign grp_fu_1159_p2 = {{tmp_5_fu_509_p4}, {8'd0}};

assign grp_fu_1168_p0 = grp_fu_1168_p00;

assign grp_fu_1168_p00 = dense_2_out_V_q0;

assign grp_fu_1168_p2 = {{tmp_8_reg_1317}, {8'd0}};

assign grp_fu_1177_p0 = grp_fu_1177_p00;

assign grp_fu_1177_p00 = dense_2_out_V_q1;

assign grp_fu_1177_p2 = {{tmp_11_fu_660_p4}, {8'd0}};

assign grp_fu_1186_p0 = grp_fu_1186_p00;

assign grp_fu_1186_p00 = dense_2_out_V_q0;

assign grp_fu_1186_p2 = {{tmp_14_reg_1342}, {8'd0}};

assign grp_fu_1195_p0 = grp_fu_1195_p00;

assign grp_fu_1195_p00 = dense_2_out_V_q1;

assign grp_fu_1195_p2 = {{tmp_17_fu_809_p4}, {8'd0}};

assign grp_fu_1204_p0 = grp_fu_1204_p00;

assign grp_fu_1204_p00 = dense_2_out_V_q0;

assign grp_fu_1204_p2 = {{tmp_20_reg_1367}, {8'd0}};

assign grp_fu_1213_p0 = grp_fu_1213_p00;

assign grp_fu_1213_p00 = dense_2_out_V_q1;

assign grp_fu_1213_p2 = {{tmp_23_fu_958_p4}, {8'd0}};

assign grp_fu_1222_p0 = grp_fu_1222_p00;

assign grp_fu_1222_p00 = dense_2_out_V_q0;

assign grp_fu_1222_p2 = {{tmp_26_reg_1392}, {8'd0}};

assign grp_fu_1231_p0 = grp_fu_1231_p00;

assign grp_fu_1231_p00 = dense_2_out_V_q1;

assign grp_fu_1231_p2 = {{tmp_29_fu_1113_p4}, {8'd0}};

assign grp_soft_max_fu_342_ap_start = grp_soft_max_fu_342_ap_start_reg;

assign icmp_ln41_fu_355_p2 = ((d_0_reg_307 == 4'd10) ? 1'b1 : 1'b0);

assign icmp_ln46_fu_379_p2 = ((ap_phi_mux_f_0_0_phi_fu_334_p4 == 5'd30) ? 1'b1 : 1'b0);

assign or_ln46_fu_430_p2 = (ap_phi_mux_f_0_0_phi_fu_334_p4 | 5'd1);

assign prediction_V_address0 = grp_soft_max_fu_342_prediction_V_address0;

assign prediction_V_ce0 = grp_soft_max_fu_342_prediction_V_ce0;

assign prediction_V_d0 = grp_soft_max_fu_342_prediction_V_d0;

assign prediction_V_we0 = grp_soft_max_fu_342_prediction_V_we0;

assign sext_ln1265_fu_1139_p1 = $signed(dense_out_bias_V_q0);

assign tmp_10_fu_609_p3 = {{add_ln46_1_fu_586_p2}, {1'd0}};

assign tmp_11_fu_660_p4 = {{grp_fu_1168_p3[21:8]}};

assign tmp_12_fu_687_p3 = {{add_ln46_2_fu_677_p2}, {3'd0}};

assign tmp_13_fu_699_p3 = {{add_ln46_2_fu_677_p2}, {1'd0}};

assign tmp_15_fu_746_p3 = {{add_ln46_3_fu_736_p2}, {3'd0}};

assign tmp_16_fu_758_p3 = {{add_ln46_3_fu_736_p2}, {1'd0}};

assign tmp_17_fu_809_p4 = {{grp_fu_1186_p3[21:8]}};

assign tmp_18_fu_836_p3 = {{add_ln46_4_fu_826_p2}, {3'd0}};

assign tmp_19_fu_848_p3 = {{add_ln46_4_fu_826_p2}, {1'd0}};

assign tmp_1_fu_390_p3 = {{ap_phi_mux_f_0_0_phi_fu_334_p4}, {3'd0}};

assign tmp_21_fu_895_p3 = {{add_ln46_5_fu_885_p2}, {3'd0}};

assign tmp_22_fu_907_p3 = {{add_ln46_5_fu_885_p2}, {1'd0}};

assign tmp_23_fu_958_p4 = {{grp_fu_1204_p3[21:8]}};

assign tmp_24_fu_985_p3 = {{add_ln46_6_fu_975_p2}, {3'd0}};

assign tmp_25_fu_997_p3 = {{add_ln46_6_fu_975_p2}, {1'd0}};

assign tmp_27_fu_1044_p3 = {{add_ln46_7_fu_1034_p2}, {3'd0}};

assign tmp_28_fu_1056_p3 = {{add_ln46_7_fu_1034_p2}, {1'd0}};

assign tmp_29_fu_1113_p4 = {{grp_fu_1222_p3[21:8]}};

assign tmp_2_fu_402_p3 = {{ap_phi_mux_f_0_0_phi_fu_334_p4}, {1'd0}};

assign tmp_3_fu_441_p3 = {{or_ln46_fu_430_p2}, {3'd0}};

assign tmp_4_fu_453_p3 = {{or_ln46_fu_430_p2}, {1'd0}};

assign tmp_5_fu_509_p4 = {{grp_fu_1150_p3[21:8]}};

assign tmp_6_fu_537_p3 = {{add_ln46_fu_526_p2}, {3'd0}};

assign tmp_7_fu_549_p3 = {{add_ln46_fu_526_p2}, {1'd0}};

assign tmp_9_fu_597_p3 = {{add_ln46_1_fu_586_p2}, {3'd0}};

assign zext_ln1116_10_fu_617_p1 = tmp_10_fu_609_p3;

assign zext_ln1116_11_fu_632_p1 = add_ln1116_7_fu_627_p2;

assign zext_ln1116_12_fu_695_p1 = tmp_12_fu_687_p3;

assign zext_ln1116_13_fu_707_p1 = tmp_13_fu_699_p3;

assign zext_ln1116_14_fu_722_p1 = add_ln1116_9_fu_717_p2;

assign zext_ln1116_15_fu_754_p1 = tmp_15_fu_746_p3;

assign zext_ln1116_16_fu_766_p1 = tmp_16_fu_758_p3;

assign zext_ln1116_17_fu_781_p1 = add_ln1116_11_fu_776_p2;

assign zext_ln1116_18_fu_844_p1 = tmp_18_fu_836_p3;

assign zext_ln1116_19_fu_856_p1 = tmp_19_fu_848_p3;

assign zext_ln1116_1_fu_410_p1 = tmp_2_fu_402_p3;

assign zext_ln1116_20_fu_871_p1 = add_ln1116_13_fu_866_p2;

assign zext_ln1116_21_fu_903_p1 = tmp_21_fu_895_p3;

assign zext_ln1116_22_fu_915_p1 = tmp_22_fu_907_p3;

assign zext_ln1116_23_fu_930_p1 = add_ln1116_15_fu_925_p2;

assign zext_ln1116_24_fu_993_p1 = tmp_24_fu_985_p3;

assign zext_ln1116_25_fu_1005_p1 = tmp_25_fu_997_p3;

assign zext_ln1116_26_fu_1020_p1 = add_ln1116_17_fu_1015_p2;

assign zext_ln1116_27_fu_1052_p1 = tmp_27_fu_1044_p3;

assign zext_ln1116_28_fu_1064_p1 = tmp_28_fu_1056_p3;

assign zext_ln1116_29_fu_1079_p1 = add_ln1116_19_fu_1074_p2;

assign zext_ln1116_2_fu_425_p1 = add_ln1116_1_fu_420_p2;

assign zext_ln1116_3_fu_449_p1 = tmp_3_fu_441_p3;

assign zext_ln1116_4_fu_461_p1 = tmp_4_fu_453_p3;

assign zext_ln1116_5_fu_476_p1 = add_ln1116_3_fu_471_p2;

assign zext_ln1116_6_fu_545_p1 = tmp_6_fu_537_p3;

assign zext_ln1116_7_fu_557_p1 = tmp_7_fu_549_p3;

assign zext_ln1116_8_fu_572_p1 = add_ln1116_5_fu_567_p2;

assign zext_ln1116_9_fu_605_p1 = tmp_9_fu_597_p3;

assign zext_ln1116_fu_398_p1 = tmp_1_fu_390_p3;

assign zext_ln46_1_fu_375_p1 = d_0_reg_307;

assign zext_ln46_fu_371_p1 = d_0_reg_307;

assign zext_ln48_10_fu_1039_p1 = add_ln46_7_fu_1034_p2;

assign zext_ln48_1_fu_385_p1 = ap_phi_mux_f_0_0_phi_fu_334_p4;

assign zext_ln48_2_fu_436_p1 = or_ln46_fu_430_p2;

assign zext_ln48_3_fu_532_p1 = add_ln46_fu_526_p2;

assign zext_ln48_4_fu_592_p1 = add_ln46_1_fu_586_p2;

assign zext_ln48_5_fu_682_p1 = add_ln46_2_fu_677_p2;

assign zext_ln48_6_fu_741_p1 = add_ln46_3_fu_736_p2;

assign zext_ln48_7_fu_831_p1 = add_ln46_4_fu_826_p2;

assign zext_ln48_8_fu_890_p1 = add_ln46_5_fu_885_p2;

assign zext_ln48_9_fu_980_p1 = add_ln46_6_fu_975_p2;

assign zext_ln48_fu_367_p1 = d_0_reg_307;

always @ (posedge ap_clk) begin
    zext_ln48_reg_1249[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln46_reg_1255[9:4] <= 6'b000000;
    zext_ln46_1_reg_1266[8:4] <= 5'b00000;
    f_0_0_cast1_reg_1297[5] <= 1'b0;
end

endmodule //dense_out
