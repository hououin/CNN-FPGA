-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_2_out_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_V_ce0 : OUT STD_LOGIC;
    dense_2_out_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    dense_2_out_V_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_V_ce1 : OUT STD_LOGIC;
    dense_2_out_V_q1 : IN STD_LOGIC_VECTOR (12 downto 0);
    prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_V_ce0 : OUT STD_LOGIC;
    prediction_V_we0 : OUT STD_LOGIC;
    prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce1 : STD_LOGIC;
    signal dense_out_weights_V_q1 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Val2_0_reg_318 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_0_reg_330 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln41_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal d_fu_361_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal d_reg_1244 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_fu_367_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_1249 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln46_fu_371_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_reg_1255 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln46_1_fu_375_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln46_1_reg_1266 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln46_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_1273 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal f_0_0_cast1_fu_481_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal f_0_0_cast1_reg_1297 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_8_reg_1317 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_14_reg_1342 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal tmp_20_reg_1367 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_state7_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal tmp_26_reg_1392 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_8_fu_1084_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln46_8_reg_1407 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_ce1 : STD_LOGIC;
    signal dense_array_V_we1 : STD_LOGIC;
    signal dense_array_V_q1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_342_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_342_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_342_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_342_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_342_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_342_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_342_dense_array_V_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_342_dense_array_V_ce1 : STD_LOGIC;
    signal grp_soft_max_fu_342_dense_array_V_we1 : STD_LOGIC;
    signal grp_soft_max_fu_342_dense_array_V_d1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_342_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_342_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_342_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_342_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal d_0_reg_307 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_0_phi_fu_334_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_soft_max_fu_342_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal zext_ln1116_2_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_5_fu_476_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_2_fu_436_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_8_fu_572_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln48_3_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_11_fu_632_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_4_fu_592_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_14_fu_722_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal zext_ln48_5_fu_682_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_17_fu_781_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_6_fu_741_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_20_fu_871_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal zext_ln48_7_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_23_fu_930_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_8_fu_890_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_26_fu_1020_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal zext_ln48_9_fu_980_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_29_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_10_fu_1039_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_390_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_402_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_1_fu_410_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_398_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_414_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_1_fu_420_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal or_ln46_fu_430_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_441_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_fu_453_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_4_fu_461_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_3_fu_449_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_2_fu_465_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_3_fu_471_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1150_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_5_fu_509_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_fu_526_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_537_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_549_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_7_fu_557_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_6_fu_545_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_4_fu_561_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_5_fu_567_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1159_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln46_1_fu_586_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_9_fu_597_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_10_fu_609_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_10_fu_617_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_9_fu_605_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_6_fu_621_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_7_fu_627_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1168_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_11_fu_660_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_2_fu_677_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_fu_687_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_699_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_13_fu_707_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_12_fu_695_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_8_fu_711_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_9_fu_717_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1177_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln46_3_fu_736_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_fu_746_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_16_fu_758_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_16_fu_766_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_15_fu_754_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_10_fu_770_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_11_fu_776_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1186_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_17_fu_809_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_4_fu_826_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_fu_836_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_19_fu_848_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_19_fu_856_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_18_fu_844_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_12_fu_860_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_13_fu_866_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1195_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln46_5_fu_885_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_895_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_22_fu_907_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_22_fu_915_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_21_fu_903_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_14_fu_919_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_15_fu_925_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1204_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_23_fu_958_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln46_6_fu_975_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_985_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_25_fu_997_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_25_fu_1005_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_24_fu_993_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_16_fu_1009_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_17_fu_1015_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1213_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln46_7_fu_1034_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_fu_1044_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_28_fu_1056_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1116_28_fu_1064_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln1116_27_fu_1052_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_18_fu_1068_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1116_19_fu_1074_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1222_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_29_fu_1113_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1231_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_1139_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1150_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1150_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1159_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1159_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1168_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1168_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1177_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1177_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1186_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1186_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1195_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1195_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1204_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1204_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1213_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1213_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1222_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1222_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1231_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1231_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_1150_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1159_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1168_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1177_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1186_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1195_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1204_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1213_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1222_p00 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1231_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce1 : OUT STD_LOGIC;
        dense_array_V_we1 : OUT STD_LOGIC;
        dense_array_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_mac_muladd_13vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_out_dense_osc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_out_dense_otde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dense_out_dense_audo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (13 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    dense_out_weights_V_U : component dense_out_dense_osc4
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0,
        address1 => dense_out_weights_V_address1,
        ce1 => dense_out_weights_V_ce1,
        q1 => dense_out_weights_V_q1);

    dense_out_bias_V_U : component dense_out_dense_otde
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_array_V_U : component dense_out_dense_audo
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0,
        address1 => grp_soft_max_fu_342_dense_array_V_address1,
        ce1 => dense_array_V_ce1,
        we1 => dense_array_V_we1,
        d1 => grp_soft_max_fu_342_dense_array_V_d1,
        q1 => dense_array_V_q1);

    grp_soft_max_fu_342 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_342_ap_start,
        ap_done => grp_soft_max_fu_342_ap_done,
        ap_idle => grp_soft_max_fu_342_ap_idle,
        ap_ready => grp_soft_max_fu_342_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_342_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_342_dense_array_V_ce0,
        dense_array_V_q0 => dense_array_V_q0,
        dense_array_V_address1 => grp_soft_max_fu_342_dense_array_V_address1,
        dense_array_V_ce1 => grp_soft_max_fu_342_dense_array_V_ce1,
        dense_array_V_we1 => grp_soft_max_fu_342_dense_array_V_we1,
        dense_array_V_d1 => grp_soft_max_fu_342_dense_array_V_d1,
        dense_array_V_q1 => dense_array_V_q1,
        prediction_V_address0 => grp_soft_max_fu_342_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_342_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_342_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_342_prediction_V_d0);

    cnn_mac_muladd_13vdy_U42 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1150_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1150_p2,
        dout => grp_fu_1150_p3);

    cnn_mac_muladd_13vdy_U43 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1159_p0,
        din1 => dense_out_weights_V_q1,
        din2 => grp_fu_1159_p2,
        dout => grp_fu_1159_p3);

    cnn_mac_muladd_13vdy_U44 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1168_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1168_p2,
        dout => grp_fu_1168_p3);

    cnn_mac_muladd_13vdy_U45 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1177_p0,
        din1 => dense_out_weights_V_q1,
        din2 => grp_fu_1177_p2,
        dout => grp_fu_1177_p3);

    cnn_mac_muladd_13vdy_U46 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1186_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1186_p2,
        dout => grp_fu_1186_p3);

    cnn_mac_muladd_13vdy_U47 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1195_p0,
        din1 => dense_out_weights_V_q1,
        din2 => grp_fu_1195_p2,
        dout => grp_fu_1195_p3);

    cnn_mac_muladd_13vdy_U48 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1204_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1204_p2,
        dout => grp_fu_1204_p3);

    cnn_mac_muladd_13vdy_U49 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1213_p0,
        din1 => dense_out_weights_V_q1,
        din2 => grp_fu_1213_p2,
        dout => grp_fu_1213_p3);

    cnn_mac_muladd_13vdy_U50 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1222_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_1222_p2,
        dout => grp_fu_1222_p3);

    cnn_mac_muladd_13vdy_U51 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_1231_p0,
        din1 => dense_out_weights_V_q1,
        din2 => grp_fu_1231_p2,
        dout => grp_fu_1231_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((icmp_ln41_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((icmp_ln41_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_342_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_342_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln41_fu_355_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_soft_max_fu_342_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_342_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_342_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                d_0_reg_307 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                d_0_reg_307 <= d_reg_1244;
            end if; 
        end if;
    end process;

    f_0_0_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_0_reg_330 <= add_ln46_8_reg_1407;
            elsif (((icmp_ln41_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                f_0_0_reg_330 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_Val2_0_reg_318 <= grp_fu_1231_p3(21 downto 8);
            elsif (((icmp_ln41_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                p_Val2_0_reg_318 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                add_ln46_8_reg_1407 <= add_ln46_8_fu_1084_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                d_reg_1244 <= d_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                    f_0_0_cast1_reg_1297(4 downto 0) <= f_0_0_cast1_fu_481_p1(4 downto 0);
                tmp_8_reg_1317 <= grp_fu_1159_p3(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_reg_1273 <= icmp_ln46_fu_379_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                tmp_14_reg_1342 <= grp_fu_1177_p3(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001))) then
                tmp_20_reg_1367 <= grp_fu_1195_p3(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001))) then
                tmp_26_reg_1392 <= grp_fu_1213_p3(21 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln41_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    zext_ln46_1_reg_1266(3 downto 0) <= zext_ln46_1_fu_375_p1(3 downto 0);
                    zext_ln46_reg_1255(3 downto 0) <= zext_ln46_fu_371_p1(3 downto 0);
                    zext_ln48_reg_1249(3 downto 0) <= zext_ln48_fu_367_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln48_reg_1249(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln46_reg_1255(9 downto 4) <= "000000";
    zext_ln46_1_reg_1266(8 downto 4) <= "00000";
    f_0_0_cast1_reg_1297(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln41_fu_355_p2, ap_CS_fsm_state2, icmp_ln46_fu_379_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_block_pp0_stage4_subdone, grp_soft_max_fu_342_ap_done, ap_CS_fsm_state11, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln41_fu_355_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln46_fu_379_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((icmp_ln46_fu_379_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state11 => 
                if (((grp_soft_max_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1116_10_fu_770_p2 <= std_logic_vector(unsigned(zext_ln1116_16_fu_766_p1) + unsigned(zext_ln1116_15_fu_754_p1));
    add_ln1116_11_fu_776_p2 <= std_logic_vector(unsigned(add_ln1116_10_fu_770_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_12_fu_860_p2 <= std_logic_vector(unsigned(zext_ln1116_19_fu_856_p1) + unsigned(zext_ln1116_18_fu_844_p1));
    add_ln1116_13_fu_866_p2 <= std_logic_vector(unsigned(add_ln1116_12_fu_860_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_14_fu_919_p2 <= std_logic_vector(unsigned(zext_ln1116_22_fu_915_p1) + unsigned(zext_ln1116_21_fu_903_p1));
    add_ln1116_15_fu_925_p2 <= std_logic_vector(unsigned(add_ln1116_14_fu_919_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_16_fu_1009_p2 <= std_logic_vector(unsigned(zext_ln1116_25_fu_1005_p1) + unsigned(zext_ln1116_24_fu_993_p1));
    add_ln1116_17_fu_1015_p2 <= std_logic_vector(unsigned(add_ln1116_16_fu_1009_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_18_fu_1068_p2 <= std_logic_vector(unsigned(zext_ln1116_28_fu_1064_p1) + unsigned(zext_ln1116_27_fu_1052_p1));
    add_ln1116_19_fu_1074_p2 <= std_logic_vector(unsigned(add_ln1116_18_fu_1068_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_1_fu_420_p2 <= std_logic_vector(unsigned(add_ln1116_fu_414_p2) + unsigned(zext_ln46_1_reg_1266));
    add_ln1116_2_fu_465_p2 <= std_logic_vector(unsigned(zext_ln1116_4_fu_461_p1) + unsigned(zext_ln1116_3_fu_449_p1));
    add_ln1116_3_fu_471_p2 <= std_logic_vector(unsigned(add_ln1116_2_fu_465_p2) + unsigned(zext_ln46_1_reg_1266));
    add_ln1116_4_fu_561_p2 <= std_logic_vector(unsigned(zext_ln1116_7_fu_557_p1) + unsigned(zext_ln1116_6_fu_545_p1));
    add_ln1116_5_fu_567_p2 <= std_logic_vector(unsigned(add_ln1116_4_fu_561_p2) + unsigned(zext_ln46_1_reg_1266));
    add_ln1116_6_fu_621_p2 <= std_logic_vector(unsigned(zext_ln1116_10_fu_617_p1) + unsigned(zext_ln1116_9_fu_605_p1));
    add_ln1116_7_fu_627_p2 <= std_logic_vector(unsigned(add_ln1116_6_fu_621_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_8_fu_711_p2 <= std_logic_vector(unsigned(zext_ln1116_13_fu_707_p1) + unsigned(zext_ln1116_12_fu_695_p1));
    add_ln1116_9_fu_717_p2 <= std_logic_vector(unsigned(add_ln1116_8_fu_711_p2) + unsigned(zext_ln46_reg_1255));
    add_ln1116_fu_414_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_410_p1) + unsigned(zext_ln1116_fu_398_p1));
    add_ln46_1_fu_586_p2 <= std_logic_vector(unsigned(f_0_0_cast1_fu_481_p1) + unsigned(ap_const_lv6_3));
    add_ln46_2_fu_677_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_1297) + unsigned(ap_const_lv6_4));
    add_ln46_3_fu_736_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_1297) + unsigned(ap_const_lv6_5));
    add_ln46_4_fu_826_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_1297) + unsigned(ap_const_lv6_6));
    add_ln46_5_fu_885_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_1297) + unsigned(ap_const_lv6_7));
    add_ln46_6_fu_975_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_1297) + unsigned(ap_const_lv6_8));
    add_ln46_7_fu_1034_p2 <= std_logic_vector(unsigned(f_0_0_cast1_reg_1297) + unsigned(ap_const_lv6_9));
    add_ln46_8_fu_1084_p2 <= std_logic_vector(unsigned(f_0_0_reg_330) + unsigned(ap_const_lv5_A));
    add_ln46_fu_526_p2 <= std_logic_vector(unsigned(f_0_0_reg_330) + unsigned(ap_const_lv5_2));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(6);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage4_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln46_fu_379_p2)
    begin
        if ((icmp_ln46_fu_379_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_342_ap_done, ap_CS_fsm_state11)
    begin
        if ((((grp_soft_max_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_f_0_0_phi_fu_334_p4_assign_proc : process(f_0_0_reg_330, icmp_ln46_reg_1273, ap_CS_fsm_pp0_stage0, add_ln46_8_reg_1407, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln46_reg_1273 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            ap_phi_mux_f_0_0_phi_fu_334_p4 <= add_ln46_8_reg_1407;
        else 
            ap_phi_mux_f_0_0_phi_fu_334_p4 <= f_0_0_reg_330;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_soft_max_fu_342_ap_done, ap_CS_fsm_state11)
    begin
        if (((grp_soft_max_fu_342_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_361_p2 <= std_logic_vector(unsigned(d_0_reg_307) + unsigned(ap_const_lv4_1));

    dense_2_out_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln48_1_fu_385_p1, ap_block_pp0_stage1, zext_ln48_3_fu_532_p1, ap_block_pp0_stage2, zext_ln48_5_fu_682_p1, ap_block_pp0_stage3, zext_ln48_7_fu_831_p1, ap_block_pp0_stage4, zext_ln48_9_fu_980_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_2_out_V_address0 <= zext_ln48_9_fu_980_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_2_out_V_address0 <= zext_ln48_7_fu_831_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_2_out_V_address0 <= zext_ln48_5_fu_682_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_2_out_V_address0 <= zext_ln48_3_fu_532_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_2_out_V_address0 <= zext_ln48_1_fu_385_p1(5 - 1 downto 0);
            else 
                dense_2_out_V_address0 <= "XXXXX";
            end if;
        else 
            dense_2_out_V_address0 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln48_2_fu_436_p1, ap_block_pp0_stage1, zext_ln48_4_fu_592_p1, ap_block_pp0_stage2, zext_ln48_6_fu_741_p1, ap_block_pp0_stage3, zext_ln48_8_fu_890_p1, ap_block_pp0_stage4, zext_ln48_10_fu_1039_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_2_out_V_address1 <= zext_ln48_10_fu_1039_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_2_out_V_address1 <= zext_ln48_8_fu_890_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_2_out_V_address1 <= zext_ln48_6_fu_741_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_2_out_V_address1 <= zext_ln48_4_fu_592_p1(5 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_2_out_V_address1 <= zext_ln48_2_fu_436_p1(5 - 1 downto 0);
            else 
                dense_2_out_V_address1 <= "XXXXX";
            end if;
        else 
            dense_2_out_V_address1 <= "XXXXX";
        end if; 
    end process;


    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_out_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_2_out_V_ce1 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(zext_ln48_reg_1249, grp_soft_max_fu_342_dense_array_V_address0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dense_array_V_address0 <= zext_ln48_reg_1249(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dense_array_V_address0 <= grp_soft_max_fu_342_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(grp_soft_max_fu_342_dense_array_V_ce0, ap_CS_fsm_state10, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_342_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_ce1_assign_proc : process(grp_soft_max_fu_342_dense_array_V_ce1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dense_array_V_ce1 <= grp_soft_max_fu_342_dense_array_V_ce1;
        else 
            dense_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dense_array_V_d0 <= std_logic_vector(signed(sext_ln1265_fu_1139_p1) + signed(p_Val2_0_reg_318));

    dense_array_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dense_array_V_we0 <= ap_const_logic_1;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_we1_assign_proc : process(grp_soft_max_fu_342_dense_array_V_we1, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dense_array_V_we1 <= grp_soft_max_fu_342_dense_array_V_we1;
        else 
            dense_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_reg_1249(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_out_weights_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln1116_2_fu_425_p1, zext_ln1116_8_fu_572_p1, ap_block_pp0_stage1, zext_ln1116_14_fu_722_p1, ap_block_pp0_stage2, zext_ln1116_20_fu_871_p1, ap_block_pp0_stage3, zext_ln1116_26_fu_1020_p1, ap_block_pp0_stage4)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_out_weights_V_address0 <= zext_ln1116_26_fu_1020_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_out_weights_V_address0 <= zext_ln1116_20_fu_871_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_out_weights_V_address0 <= zext_ln1116_14_fu_722_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_out_weights_V_address0 <= zext_ln1116_8_fu_572_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_out_weights_V_address0 <= zext_ln1116_2_fu_425_p1(9 - 1 downto 0);
            else 
                dense_out_weights_V_address0 <= "XXXXXXXXX";
            end if;
        else 
            dense_out_weights_V_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    dense_out_weights_V_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, zext_ln1116_5_fu_476_p1, ap_block_pp0_stage1, zext_ln1116_11_fu_632_p1, ap_block_pp0_stage2, zext_ln1116_17_fu_781_p1, ap_block_pp0_stage3, zext_ln1116_23_fu_930_p1, ap_block_pp0_stage4, zext_ln1116_29_fu_1079_p1)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
                dense_out_weights_V_address1 <= zext_ln1116_29_fu_1079_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                dense_out_weights_V_address1 <= zext_ln1116_23_fu_930_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                dense_out_weights_V_address1 <= zext_ln1116_17_fu_781_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                dense_out_weights_V_address1 <= zext_ln1116_11_fu_632_p1(9 - 1 downto 0);
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                dense_out_weights_V_address1 <= zext_ln1116_5_fu_476_p1(9 - 1 downto 0);
            else 
                dense_out_weights_V_address1 <= "XXXXXXXXX";
            end if;
        else 
            dense_out_weights_V_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_out_weights_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_11001, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_11001, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)))) then 
            dense_out_weights_V_ce1 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_0_0_cast1_fu_481_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_0_reg_330),6));
    grp_fu_1150_p0 <= grp_fu_1150_p00(13 - 1 downto 0);
    grp_fu_1150_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1150_p2 <= (p_Val2_0_reg_318 & ap_const_lv8_0);
    grp_fu_1159_p0 <= grp_fu_1159_p00(13 - 1 downto 0);
    grp_fu_1159_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q1),22));
    grp_fu_1159_p2 <= (tmp_5_fu_509_p4 & ap_const_lv8_0);
    grp_fu_1168_p0 <= grp_fu_1168_p00(13 - 1 downto 0);
    grp_fu_1168_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1168_p2 <= (tmp_8_reg_1317 & ap_const_lv8_0);
    grp_fu_1177_p0 <= grp_fu_1177_p00(13 - 1 downto 0);
    grp_fu_1177_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q1),22));
    grp_fu_1177_p2 <= (tmp_11_fu_660_p4 & ap_const_lv8_0);
    grp_fu_1186_p0 <= grp_fu_1186_p00(13 - 1 downto 0);
    grp_fu_1186_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1186_p2 <= (tmp_14_reg_1342 & ap_const_lv8_0);
    grp_fu_1195_p0 <= grp_fu_1195_p00(13 - 1 downto 0);
    grp_fu_1195_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q1),22));
    grp_fu_1195_p2 <= (tmp_17_fu_809_p4 & ap_const_lv8_0);
    grp_fu_1204_p0 <= grp_fu_1204_p00(13 - 1 downto 0);
    grp_fu_1204_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1204_p2 <= (tmp_20_reg_1367 & ap_const_lv8_0);
    grp_fu_1213_p0 <= grp_fu_1213_p00(13 - 1 downto 0);
    grp_fu_1213_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q1),22));
    grp_fu_1213_p2 <= (tmp_23_fu_958_p4 & ap_const_lv8_0);
    grp_fu_1222_p0 <= grp_fu_1222_p00(13 - 1 downto 0);
    grp_fu_1222_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_1222_p2 <= (tmp_26_reg_1392 & ap_const_lv8_0);
    grp_fu_1231_p0 <= grp_fu_1231_p00(13 - 1 downto 0);
    grp_fu_1231_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q1),22));
    grp_fu_1231_p2 <= (tmp_29_fu_1113_p4 & ap_const_lv8_0);
    grp_soft_max_fu_342_ap_start <= grp_soft_max_fu_342_ap_start_reg;
    icmp_ln41_fu_355_p2 <= "1" when (d_0_reg_307 = ap_const_lv4_A) else "0";
    icmp_ln46_fu_379_p2 <= "1" when (ap_phi_mux_f_0_0_phi_fu_334_p4 = ap_const_lv5_1E) else "0";
    or_ln46_fu_430_p2 <= (ap_phi_mux_f_0_0_phi_fu_334_p4 or ap_const_lv5_1);
    prediction_V_address0 <= grp_soft_max_fu_342_prediction_V_address0;
    prediction_V_ce0 <= grp_soft_max_fu_342_prediction_V_ce0;
    prediction_V_d0 <= grp_soft_max_fu_342_prediction_V_d0;
    prediction_V_we0 <= grp_soft_max_fu_342_prediction_V_we0;
        sext_ln1265_fu_1139_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    tmp_10_fu_609_p3 <= (add_ln46_1_fu_586_p2 & ap_const_lv1_0);
    tmp_11_fu_660_p4 <= grp_fu_1168_p3(21 downto 8);
    tmp_12_fu_687_p3 <= (add_ln46_2_fu_677_p2 & ap_const_lv3_0);
    tmp_13_fu_699_p3 <= (add_ln46_2_fu_677_p2 & ap_const_lv1_0);
    tmp_15_fu_746_p3 <= (add_ln46_3_fu_736_p2 & ap_const_lv3_0);
    tmp_16_fu_758_p3 <= (add_ln46_3_fu_736_p2 & ap_const_lv1_0);
    tmp_17_fu_809_p4 <= grp_fu_1186_p3(21 downto 8);
    tmp_18_fu_836_p3 <= (add_ln46_4_fu_826_p2 & ap_const_lv3_0);
    tmp_19_fu_848_p3 <= (add_ln46_4_fu_826_p2 & ap_const_lv1_0);
    tmp_1_fu_390_p3 <= (ap_phi_mux_f_0_0_phi_fu_334_p4 & ap_const_lv3_0);
    tmp_21_fu_895_p3 <= (add_ln46_5_fu_885_p2 & ap_const_lv3_0);
    tmp_22_fu_907_p3 <= (add_ln46_5_fu_885_p2 & ap_const_lv1_0);
    tmp_23_fu_958_p4 <= grp_fu_1204_p3(21 downto 8);
    tmp_24_fu_985_p3 <= (add_ln46_6_fu_975_p2 & ap_const_lv3_0);
    tmp_25_fu_997_p3 <= (add_ln46_6_fu_975_p2 & ap_const_lv1_0);
    tmp_27_fu_1044_p3 <= (add_ln46_7_fu_1034_p2 & ap_const_lv3_0);
    tmp_28_fu_1056_p3 <= (add_ln46_7_fu_1034_p2 & ap_const_lv1_0);
    tmp_29_fu_1113_p4 <= grp_fu_1222_p3(21 downto 8);
    tmp_2_fu_402_p3 <= (ap_phi_mux_f_0_0_phi_fu_334_p4 & ap_const_lv1_0);
    tmp_3_fu_441_p3 <= (or_ln46_fu_430_p2 & ap_const_lv3_0);
    tmp_4_fu_453_p3 <= (or_ln46_fu_430_p2 & ap_const_lv1_0);
    tmp_5_fu_509_p4 <= grp_fu_1150_p3(21 downto 8);
    tmp_6_fu_537_p3 <= (add_ln46_fu_526_p2 & ap_const_lv3_0);
    tmp_7_fu_549_p3 <= (add_ln46_fu_526_p2 & ap_const_lv1_0);
    tmp_9_fu_597_p3 <= (add_ln46_1_fu_586_p2 & ap_const_lv3_0);
    zext_ln1116_10_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_609_p3),10));
    zext_ln1116_11_fu_632_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_7_fu_627_p2),64));
    zext_ln1116_12_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_687_p3),10));
    zext_ln1116_13_fu_707_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_699_p3),10));
    zext_ln1116_14_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_9_fu_717_p2),64));
    zext_ln1116_15_fu_754_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_15_fu_746_p3),10));
    zext_ln1116_16_fu_766_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_758_p3),10));
    zext_ln1116_17_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_11_fu_776_p2),64));
    zext_ln1116_18_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_836_p3),10));
    zext_ln1116_19_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_848_p3),10));
    zext_ln1116_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_402_p3),9));
    zext_ln1116_20_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_13_fu_866_p2),64));
    zext_ln1116_21_fu_903_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_895_p3),10));
    zext_ln1116_22_fu_915_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_907_p3),10));
    zext_ln1116_23_fu_930_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_15_fu_925_p2),64));
    zext_ln1116_24_fu_993_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_24_fu_985_p3),10));
    zext_ln1116_25_fu_1005_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_997_p3),10));
    zext_ln1116_26_fu_1020_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_17_fu_1015_p2),64));
    zext_ln1116_27_fu_1052_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_1044_p3),10));
    zext_ln1116_28_fu_1064_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_1056_p3),10));
    zext_ln1116_29_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_19_fu_1074_p2),64));
    zext_ln1116_2_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_1_fu_420_p2),64));
    zext_ln1116_3_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_441_p3),9));
    zext_ln1116_4_fu_461_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_453_p3),9));
    zext_ln1116_5_fu_476_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_3_fu_471_p2),64));
    zext_ln1116_6_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_537_p3),9));
    zext_ln1116_7_fu_557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_549_p3),9));
    zext_ln1116_8_fu_572_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_5_fu_567_p2),64));
    zext_ln1116_9_fu_605_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_597_p3),10));
    zext_ln1116_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_390_p3),9));
    zext_ln46_1_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_307),9));
    zext_ln46_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_307),10));
    zext_ln48_10_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_7_fu_1034_p2),64));
    zext_ln48_1_fu_385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_f_0_0_phi_fu_334_p4),64));
    zext_ln48_2_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln46_fu_430_p2),64));
    zext_ln48_3_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_fu_526_p2),64));
    zext_ln48_4_fu_592_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_1_fu_586_p2),64));
    zext_ln48_5_fu_682_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_2_fu_677_p2),64));
    zext_ln48_6_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_3_fu_736_p2),64));
    zext_ln48_7_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_4_fu_826_p2),64));
    zext_ln48_8_fu_890_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_5_fu_885_p2),64));
    zext_ln48_9_fu_980_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln46_6_fu_975_p2),64));
    zext_ln48_fu_367_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(d_0_reg_307),64));
end behav;
