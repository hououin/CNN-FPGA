// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_q0,
        max_pool_out_0_0_V_address0,
        max_pool_out_0_0_V_ce0,
        max_pool_out_0_0_V_we0,
        max_pool_out_0_0_V_d0,
        max_pool_out_0_1_V_address0,
        max_pool_out_0_1_V_ce0,
        max_pool_out_0_1_V_we0,
        max_pool_out_0_1_V_d0,
        max_pool_out_0_2_V_address0,
        max_pool_out_0_2_V_ce0,
        max_pool_out_0_2_V_we0,
        max_pool_out_0_2_V_d0,
        max_pool_out_1_0_V_address0,
        max_pool_out_1_0_V_ce0,
        max_pool_out_1_0_V_we0,
        max_pool_out_1_0_V_d0,
        max_pool_out_1_1_V_address0,
        max_pool_out_1_1_V_ce0,
        max_pool_out_1_1_V_we0,
        max_pool_out_1_1_V_d0,
        max_pool_out_1_2_V_address0,
        max_pool_out_1_2_V_ce0,
        max_pool_out_1_2_V_we0,
        max_pool_out_1_2_V_d0,
        max_pool_out_2_0_V_address0,
        max_pool_out_2_0_V_ce0,
        max_pool_out_2_0_V_we0,
        max_pool_out_2_0_V_d0,
        max_pool_out_2_1_V_address0,
        max_pool_out_2_1_V_ce0,
        max_pool_out_2_1_V_we0,
        max_pool_out_2_1_V_d0,
        max_pool_out_2_2_V_address0,
        max_pool_out_2_2_V_ce0,
        max_pool_out_2_2_V_we0,
        max_pool_out_2_2_V_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_V_address0;
output   conv_out_V_ce0;
input  [13:0] conv_out_V_q0;
output  [7:0] max_pool_out_0_0_V_address0;
output   max_pool_out_0_0_V_ce0;
output   max_pool_out_0_0_V_we0;
output  [13:0] max_pool_out_0_0_V_d0;
output  [6:0] max_pool_out_0_1_V_address0;
output   max_pool_out_0_1_V_ce0;
output   max_pool_out_0_1_V_we0;
output  [13:0] max_pool_out_0_1_V_d0;
output  [6:0] max_pool_out_0_2_V_address0;
output   max_pool_out_0_2_V_ce0;
output   max_pool_out_0_2_V_we0;
output  [13:0] max_pool_out_0_2_V_d0;
output  [6:0] max_pool_out_1_0_V_address0;
output   max_pool_out_1_0_V_ce0;
output   max_pool_out_1_0_V_we0;
output  [13:0] max_pool_out_1_0_V_d0;
output  [6:0] max_pool_out_1_1_V_address0;
output   max_pool_out_1_1_V_ce0;
output   max_pool_out_1_1_V_we0;
output  [13:0] max_pool_out_1_1_V_d0;
output  [6:0] max_pool_out_1_2_V_address0;
output   max_pool_out_1_2_V_ce0;
output   max_pool_out_1_2_V_we0;
output  [13:0] max_pool_out_1_2_V_d0;
output  [6:0] max_pool_out_2_0_V_address0;
output   max_pool_out_2_0_V_ce0;
output   max_pool_out_2_0_V_we0;
output  [13:0] max_pool_out_2_0_V_d0;
output  [6:0] max_pool_out_2_1_V_address0;
output   max_pool_out_2_1_V_ce0;
output   max_pool_out_2_1_V_we0;
output  [13:0] max_pool_out_2_1_V_d0;
output  [6:0] max_pool_out_2_2_V_address0;
output   max_pool_out_2_2_V_ce0;
output   max_pool_out_2_2_V_we0;
output  [13:0] max_pool_out_2_2_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_V_ce0;
reg max_pool_out_0_0_V_ce0;
reg max_pool_out_0_0_V_we0;
reg max_pool_out_0_1_V_ce0;
reg max_pool_out_0_1_V_we0;
reg max_pool_out_0_2_V_ce0;
reg max_pool_out_0_2_V_we0;
reg max_pool_out_1_0_V_ce0;
reg max_pool_out_1_0_V_we0;
reg max_pool_out_1_1_V_ce0;
reg max_pool_out_1_1_V_we0;
reg max_pool_out_1_2_V_ce0;
reg max_pool_out_1_2_V_we0;
reg max_pool_out_2_0_V_ce0;
reg max_pool_out_2_0_V_we0;
reg max_pool_out_2_1_V_ce0;
reg max_pool_out_2_1_V_we0;
reg max_pool_out_2_2_V_ce0;
reg max_pool_out_2_2_V_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] f_fu_367_p2;
reg   [2:0] f_reg_738;
wire    ap_CS_fsm_state2;
wire   [12:0] zext_ln13_fu_373_p1;
reg   [12:0] zext_ln13_reg_743;
wire   [0:0] icmp_ln10_fu_361_p2;
wire   [7:0] zext_ln13_2_fu_377_p1;
reg   [7:0] zext_ln13_2_reg_748;
wire   [8:0] zext_ln13_3_fu_381_p1;
reg   [8:0] zext_ln13_3_reg_753;
wire   [8:0] add_ln13_fu_385_p2;
reg   [8:0] add_ln13_reg_758;
wire    ap_CS_fsm_state3;
wire   [3:0] r_fu_397_p2;
reg   [3:0] r_reg_766;
wire   [4:0] shl_ln_fu_403_p3;
reg   [4:0] shl_ln_reg_771;
wire   [0:0] icmp_ln13_fu_391_p2;
wire   [2:0] trunc_ln203_fu_411_p1;
reg   [2:0] trunc_ln203_reg_776;
wire   [6:0] zext_ln203_4_fu_437_p1;
reg   [6:0] zext_ln203_4_reg_780;
wire   [6:0] add_ln203_fu_441_p2;
reg   [6:0] add_ln203_reg_785;
wire   [8:0] add_ln16_fu_447_p2;
reg   [8:0] add_ln16_reg_790;
wire    ap_CS_fsm_state4;
wire   [3:0] c_fu_459_p2;
reg   [3:0] c_reg_798;
wire   [4:0] shl_ln2_fu_465_p3;
reg   [4:0] shl_ln2_reg_803;
wire   [0:0] icmp_ln16_fu_453_p2;
wire   [3:0] select_ln38_fu_485_p3;
wire   [1:0] mpr_fu_503_p2;
reg   [1:0] mpr_reg_816;
wire    ap_CS_fsm_state5;
wire   [9:0] mul_ln1494_fu_518_p2;
reg   [9:0] mul_ln1494_reg_821;
wire   [0:0] icmp_ln20_fu_497_p2;
wire   [3:0] select_ln37_fu_647_p3;
wire   [1:0] mpc_fu_665_p2;
reg   [1:0] mpc_reg_837;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln23_fu_659_p2;
wire   [13:0] select_ln29_fu_727_p3;
wire    ap_CS_fsm_state7;
reg   [2:0] f_0_reg_226;
reg   [3:0] r_0_reg_237;
reg   [8:0] phi_mul9_reg_248;
reg   [3:0] phi_urem11_reg_259;
reg   [3:0] c_0_reg_271;
reg   [8:0] phi_mul_reg_282;
reg   [3:0] phi_urem_reg_294;
reg   [13:0] max_0_reg_306;
reg   [1:0] mpr_0_reg_327;
reg   [13:0] max_1_reg_338;
reg   [1:0] mpc_0_reg_350;
wire   [63:0] zext_ln203_7_fu_582_p1;
wire   [63:0] zext_ln203_8_fu_625_p1;
wire   [63:0] zext_ln1494_5_fu_716_p1;
wire   [2:0] trunc_ln203_1_fu_524_p1;
wire   [2:0] tmp_1_fu_415_p4;
wire   [4:0] tmp_2_fu_429_p3;
wire   [6:0] zext_ln203_fu_425_p1;
wire   [3:0] add_ln38_fu_473_p2;
wire   [0:0] icmp_ln38_fu_479_p2;
wire   [4:0] zext_ln20_fu_493_p1;
wire   [4:0] i_fu_509_p2;
wire   [4:0] mul_ln1494_fu_518_p0;
wire   [2:0] tmp_3_fu_528_p4;
wire   [6:0] zext_ln203_5_fu_538_p1;
wire   [6:0] add_ln203_3_fu_542_p2;
wire   [5:0] trunc_ln203_2_fu_547_p1;
wire   [7:0] tmp_7_fu_559_p3;
wire   [8:0] p_shl5_cast_fu_551_p3;
wire   [8:0] zext_ln203_6_fu_567_p1;
wire   [8:0] sub_ln203_fu_571_p2;
wire   [8:0] add_ln203_4_fu_577_p2;
wire   [6:0] add_ln203_5_fu_589_p2;
wire   [4:0] trunc_ln203_3_fu_594_p1;
wire   [7:0] p_shl3_cast_fu_598_p3;
wire   [7:0] p_shl4_cast_fu_606_p3;
wire   [7:0] sub_ln203_1_fu_614_p2;
wire   [7:0] add_ln203_6_fu_620_p2;
wire   [3:0] add_ln37_fu_635_p2;
wire   [0:0] icmp_ln37_fu_641_p2;
wire   [4:0] zext_ln23_fu_655_p1;
wire   [4:0] j_fu_671_p2;
wire   [9:0] zext_ln1494_3_fu_676_p1;
wire   [9:0] add_ln1494_fu_680_p2;
wire   [10:0] tmp_8_fu_693_p3;
wire   [12:0] p_shl1_cast_fu_685_p3;
wire   [12:0] zext_ln1494_4_fu_701_p1;
wire   [12:0] sub_ln1494_fu_705_p2;
wire   [12:0] add_ln1494_2_fu_711_p2;
wire   [0:0] icmp_ln1494_fu_721_p2;
reg   [6:0] ap_NS_fsm;
wire   [9:0] mul_ln1494_fu_518_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
        c_0_reg_271 <= c_reg_798;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_391_p2 == 1'd0))) begin
        c_0_reg_271 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_391_p2 == 1'd1))) begin
        f_0_reg_226 <= f_reg_738;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        f_0_reg_226 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_659_p2 == 1'd1))) begin
        max_0_reg_306 <= max_1_reg_338;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd0))) begin
        max_0_reg_306 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        max_1_reg_338 <= select_ln29_fu_727_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd0))) begin
        max_1_reg_338 <= max_0_reg_306;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        mpc_0_reg_350 <= mpc_reg_837;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd0))) begin
        mpc_0_reg_350 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_659_p2 == 1'd1))) begin
        mpr_0_reg_327 <= mpr_reg_816;
    end else if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd0))) begin
        mpr_0_reg_327 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd1))) begin
        phi_mul9_reg_248 <= add_ln13_reg_758;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd0))) begin
        phi_mul9_reg_248 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
        phi_mul_reg_282 <= add_ln16_reg_790;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_391_p2 == 1'd0))) begin
        phi_mul_reg_282 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd1))) begin
        phi_urem11_reg_259 <= select_ln38_fu_485_p3;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd0))) begin
        phi_urem11_reg_259 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
        phi_urem_reg_294 <= select_ln37_fu_647_p3;
    end else if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_391_p2 == 1'd0))) begin
        phi_urem_reg_294 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd1))) begin
        r_0_reg_237 <= r_reg_766;
    end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd0))) begin
        r_0_reg_237 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        add_ln13_reg_758 <= add_ln13_fu_385_p2;
        r_reg_766 <= r_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        add_ln16_reg_790 <= add_ln16_fu_447_p2;
        c_reg_798 <= c_fu_459_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_391_p2 == 1'd0))) begin
        add_ln203_reg_785 <= add_ln203_fu_441_p2;
        shl_ln_reg_771[4 : 1] <= shl_ln_fu_403_p3[4 : 1];
        trunc_ln203_reg_776 <= trunc_ln203_fu_411_p1;
        zext_ln203_4_reg_780[4 : 2] <= zext_ln203_4_fu_437_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        f_reg_738 <= f_fu_367_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        mpc_reg_837 <= mpc_fu_665_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mpr_reg_816 <= mpr_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd0))) begin
        mul_ln1494_reg_821[9 : 1] <= mul_ln1494_fu_518_p2[9 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd0))) begin
        shl_ln2_reg_803[4 : 1] <= shl_ln2_fu_465_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd0))) begin
        zext_ln13_2_reg_748[2 : 0] <= zext_ln13_2_fu_377_p1[2 : 0];
        zext_ln13_3_reg_753[2 : 0] <= zext_ln13_3_fu_381_p1[2 : 0];
        zext_ln13_reg_743[2 : 0] <= zext_ln13_fu_373_p1[2 : 0];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_1_fu_524_p1 == 3'd0) & (icmp_ln20_fu_497_p2 == 1'd1) & (trunc_ln203_reg_776 == 3'd0))) begin
        max_pool_out_0_0_V_we0 = 1'b1;
    end else begin
        max_pool_out_0_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_1_fu_524_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1) & (trunc_ln203_reg_776 == 3'd0))) begin
        max_pool_out_0_1_V_we0 = 1'b1;
    end else begin
        max_pool_out_0_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_0_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_1_fu_524_p1 == 3'd0) & ~(trunc_ln203_1_fu_524_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1) & (trunc_ln203_reg_776 == 3'd0))) begin
        max_pool_out_0_2_V_we0 = 1'b1;
    end else begin
        max_pool_out_0_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (trunc_ln203_1_fu_524_p1 == 3'd0) & (icmp_ln20_fu_497_p2 == 1'd1) & (trunc_ln203_reg_776 == 3'd1))) begin
        max_pool_out_1_0_V_we0 = 1'b1;
    end else begin
        max_pool_out_1_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_1_fu_524_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1) & (trunc_ln203_reg_776 == 3'd1))) begin
        max_pool_out_1_1_V_we0 = 1'b1;
    end else begin
        max_pool_out_1_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_1_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_1_fu_524_p1 == 3'd0) & ~(trunc_ln203_1_fu_524_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1) & (trunc_ln203_reg_776 == 3'd1))) begin
        max_pool_out_1_2_V_we0 = 1'b1;
    end else begin
        max_pool_out_1_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_2_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_reg_776 == 3'd0) & ~(trunc_ln203_reg_776 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (trunc_ln203_1_fu_524_p1 == 3'd0) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
        max_pool_out_2_0_V_we0 = 1'b1;
    end else begin
        max_pool_out_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_2_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_reg_776 == 3'd0) & ~(trunc_ln203_reg_776 == 3'd1) & (trunc_ln203_1_fu_524_p1 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
        max_pool_out_2_1_V_we0 = 1'b1;
    end else begin
        max_pool_out_2_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        max_pool_out_2_2_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_reg_776 == 3'd0) & ~(trunc_ln203_1_fu_524_p1 == 3'd0) & ~(trunc_ln203_1_fu_524_p1 == 3'd1) & ~(trunc_ln203_reg_776 == 3'd1) & (1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
        max_pool_out_2_2_V_we0 = 1'b1;
    end else begin
        max_pool_out_2_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln10_fu_361_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln13_fu_391_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln16_fu_453_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln20_fu_497_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln23_fu_659_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln13_fu_385_p2 = (phi_mul9_reg_248 + 9'd22);

assign add_ln1494_2_fu_711_p2 = (zext_ln13_reg_743 + sub_ln1494_fu_705_p2);

assign add_ln1494_fu_680_p2 = (zext_ln1494_3_fu_676_p1 + mul_ln1494_reg_821);

assign add_ln16_fu_447_p2 = (phi_mul_reg_282 + 9'd22);

assign add_ln203_3_fu_542_p2 = (zext_ln203_5_fu_538_p1 + add_ln203_reg_785);

assign add_ln203_4_fu_577_p2 = (zext_ln13_3_reg_753 + sub_ln203_fu_571_p2);

assign add_ln203_5_fu_589_p2 = (zext_ln203_5_fu_538_p1 + zext_ln203_4_reg_780);

assign add_ln203_6_fu_620_p2 = (zext_ln13_2_reg_748 + sub_ln203_1_fu_614_p2);

assign add_ln203_fu_441_p2 = (zext_ln203_4_fu_437_p1 + zext_ln203_fu_425_p1);

assign add_ln37_fu_635_p2 = (phi_urem_reg_294 + 4'd1);

assign add_ln38_fu_473_p2 = (phi_urem11_reg_259 + 4'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign c_fu_459_p2 = (c_0_reg_271 + 4'd1);

assign conv_out_V_address0 = zext_ln1494_5_fu_716_p1;

assign f_fu_367_p2 = (f_0_reg_226 + 3'd1);

assign i_fu_509_p2 = (zext_ln20_fu_493_p1 + shl_ln_reg_771);

assign icmp_ln10_fu_361_p2 = ((f_0_reg_226 == 3'd6) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_391_p2 = ((r_0_reg_237 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_721_p2 = (($signed(conv_out_V_q0) > $signed(max_1_reg_338)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_453_p2 = ((c_0_reg_271 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_497_p2 = ((mpr_0_reg_327 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_659_p2 = ((mpc_0_reg_350 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_641_p2 = ((add_ln37_fu_635_p2 < 4'd3) ? 1'b1 : 1'b0);

assign icmp_ln38_fu_479_p2 = ((add_ln38_fu_473_p2 < 4'd3) ? 1'b1 : 1'b0);

assign j_fu_671_p2 = (shl_ln2_reg_803 + zext_ln23_fu_655_p1);

assign max_pool_out_0_0_V_address0 = zext_ln203_7_fu_582_p1;

assign max_pool_out_0_0_V_d0 = max_0_reg_306;

assign max_pool_out_0_1_V_address0 = zext_ln203_8_fu_625_p1;

assign max_pool_out_0_1_V_d0 = max_0_reg_306;

assign max_pool_out_0_2_V_address0 = zext_ln203_8_fu_625_p1;

assign max_pool_out_0_2_V_d0 = max_0_reg_306;

assign max_pool_out_1_0_V_address0 = zext_ln203_7_fu_582_p1;

assign max_pool_out_1_0_V_d0 = max_0_reg_306;

assign max_pool_out_1_1_V_address0 = zext_ln203_8_fu_625_p1;

assign max_pool_out_1_1_V_d0 = max_0_reg_306;

assign max_pool_out_1_2_V_address0 = zext_ln203_8_fu_625_p1;

assign max_pool_out_1_2_V_d0 = max_0_reg_306;

assign max_pool_out_2_0_V_address0 = zext_ln203_7_fu_582_p1;

assign max_pool_out_2_0_V_d0 = max_0_reg_306;

assign max_pool_out_2_1_V_address0 = zext_ln203_8_fu_625_p1;

assign max_pool_out_2_1_V_d0 = max_0_reg_306;

assign max_pool_out_2_2_V_address0 = zext_ln203_8_fu_625_p1;

assign max_pool_out_2_2_V_d0 = max_0_reg_306;

assign mpc_fu_665_p2 = (mpc_0_reg_350 + 2'd1);

assign mpr_fu_503_p2 = (mpr_0_reg_327 + 2'd1);

assign mul_ln1494_fu_518_p0 = mul_ln1494_fu_518_p00;

assign mul_ln1494_fu_518_p00 = i_fu_509_p2;

assign mul_ln1494_fu_518_p2 = (mul_ln1494_fu_518_p0 * $signed('h1A));

assign p_shl1_cast_fu_685_p3 = {{add_ln1494_fu_680_p2}, {3'd0}};

assign p_shl3_cast_fu_598_p3 = {{trunc_ln203_3_fu_594_p1}, {3'd0}};

assign p_shl4_cast_fu_606_p3 = {{add_ln203_5_fu_589_p2}, {1'd0}};

assign p_shl5_cast_fu_551_p3 = {{trunc_ln203_2_fu_547_p1}, {3'd0}};

assign r_fu_397_p2 = (r_0_reg_237 + 4'd1);

assign select_ln29_fu_727_p3 = ((icmp_ln1494_fu_721_p2[0:0] === 1'b1) ? conv_out_V_q0 : max_1_reg_338);

assign select_ln37_fu_647_p3 = ((icmp_ln37_fu_641_p2[0:0] === 1'b1) ? add_ln37_fu_635_p2 : 4'd0);

assign select_ln38_fu_485_p3 = ((icmp_ln38_fu_479_p2[0:0] === 1'b1) ? add_ln38_fu_473_p2 : 4'd0);

assign shl_ln2_fu_465_p3 = {{c_0_reg_271}, {1'd0}};

assign shl_ln_fu_403_p3 = {{r_0_reg_237}, {1'd0}};

assign sub_ln1494_fu_705_p2 = (p_shl1_cast_fu_685_p3 - zext_ln1494_4_fu_701_p1);

assign sub_ln203_1_fu_614_p2 = (p_shl3_cast_fu_598_p3 - p_shl4_cast_fu_606_p3);

assign sub_ln203_fu_571_p2 = (p_shl5_cast_fu_551_p3 - zext_ln203_6_fu_567_p1);

assign tmp_1_fu_415_p4 = {{phi_mul9_reg_248[8:6]}};

assign tmp_2_fu_429_p3 = {{tmp_1_fu_415_p4}, {2'd0}};

assign tmp_3_fu_528_p4 = {{phi_mul_reg_282[8:6]}};

assign tmp_7_fu_559_p3 = {{add_ln203_3_fu_542_p2}, {1'd0}};

assign tmp_8_fu_693_p3 = {{add_ln1494_fu_680_p2}, {1'd0}};

assign trunc_ln203_1_fu_524_p1 = phi_urem_reg_294[2:0];

assign trunc_ln203_2_fu_547_p1 = add_ln203_3_fu_542_p2[5:0];

assign trunc_ln203_3_fu_594_p1 = add_ln203_5_fu_589_p2[4:0];

assign trunc_ln203_fu_411_p1 = phi_urem11_reg_259[2:0];

assign zext_ln13_2_fu_377_p1 = f_0_reg_226;

assign zext_ln13_3_fu_381_p1 = f_0_reg_226;

assign zext_ln13_fu_373_p1 = f_0_reg_226;

assign zext_ln1494_3_fu_676_p1 = j_fu_671_p2;

assign zext_ln1494_4_fu_701_p1 = tmp_8_fu_693_p3;

assign zext_ln1494_5_fu_716_p1 = add_ln1494_2_fu_711_p2;

assign zext_ln203_4_fu_437_p1 = tmp_2_fu_429_p3;

assign zext_ln203_5_fu_538_p1 = tmp_3_fu_528_p4;

assign zext_ln203_6_fu_567_p1 = tmp_7_fu_559_p3;

assign zext_ln203_7_fu_582_p1 = add_ln203_4_fu_577_p2;

assign zext_ln203_8_fu_625_p1 = add_ln203_6_fu_620_p2;

assign zext_ln203_fu_425_p1 = tmp_1_fu_415_p4;

assign zext_ln20_fu_493_p1 = mpr_0_reg_327;

assign zext_ln23_fu_655_p1 = mpc_0_reg_350;

always @ (posedge ap_clk) begin
    zext_ln13_reg_743[12:3] <= 10'b0000000000;
    zext_ln13_2_reg_748[7:3] <= 5'b00000;
    zext_ln13_3_reg_753[8:3] <= 6'b000000;
    shl_ln_reg_771[0] <= 1'b0;
    zext_ln203_4_reg_780[1:0] <= 2'b00;
    zext_ln203_4_reg_780[6:5] <= 2'b00;
    shl_ln2_reg_803[0] <= 1'b0;
    mul_ln1494_reg_821[0] <= 1'b0;
end

endmodule //max_pool_1
