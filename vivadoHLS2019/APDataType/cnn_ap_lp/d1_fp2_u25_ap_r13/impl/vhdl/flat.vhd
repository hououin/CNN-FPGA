-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    flat_array_0_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_0_V_ce0 : OUT STD_LOGIC;
    flat_array_0_V_we0 : OUT STD_LOGIC;
    flat_array_0_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_1_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_1_V_ce0 : OUT STD_LOGIC;
    flat_array_1_V_we0 : OUT STD_LOGIC;
    flat_array_1_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_2_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_2_V_ce0 : OUT STD_LOGIC;
    flat_array_2_V_we0 : OUT STD_LOGIC;
    flat_array_2_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_3_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_3_V_ce0 : OUT STD_LOGIC;
    flat_array_3_V_we0 : OUT STD_LOGIC;
    flat_array_3_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_4_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_4_V_ce0 : OUT STD_LOGIC;
    flat_array_4_V_we0 : OUT STD_LOGIC;
    flat_array_4_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_5_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_5_V_ce0 : OUT STD_LOGIC;
    flat_array_5_V_we0 : OUT STD_LOGIC;
    flat_array_5_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_6_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_6_V_ce0 : OUT STD_LOGIC;
    flat_array_6_V_we0 : OUT STD_LOGIC;
    flat_array_6_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_7_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_7_V_ce0 : OUT STD_LOGIC;
    flat_array_7_V_we0 : OUT STD_LOGIC;
    flat_array_7_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_8_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_8_V_ce0 : OUT STD_LOGIC;
    flat_array_8_V_we0 : OUT STD_LOGIC;
    flat_array_8_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_9_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_9_V_ce0 : OUT STD_LOGIC;
    flat_array_9_V_we0 : OUT STD_LOGIC;
    flat_array_9_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_10_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_10_V_ce0 : OUT STD_LOGIC;
    flat_array_10_V_we0 : OUT STD_LOGIC;
    flat_array_10_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_11_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_11_V_ce0 : OUT STD_LOGIC;
    flat_array_11_V_we0 : OUT STD_LOGIC;
    flat_array_11_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    flat_array_12_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    flat_array_12_V_ce0 : OUT STD_LOGIC;
    flat_array_12_V_we0 : OUT STD_LOGIC;
    flat_array_12_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv9_D : STD_LOGIC_VECTOR (8 downto 0) := "000001101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv20_277 : STD_LOGIC_VECTOR (19 downto 0) := "00000000001001110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_374_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_528 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_533 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_402_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_reg_538 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_fu_414_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_546 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln15_fu_420_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_reg_551 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln9_fu_408_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_cast_fu_435_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_cast_reg_556 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_fu_449_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_564 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal add_ln203_5_fu_459_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_5_reg_569 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln12_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal add_ln15_1_fu_512_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal i_0_reg_301 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_313 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_324 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_335 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_346 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_357 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_10_fu_470_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_495_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln203_fu_474_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_s_fu_390_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_6_fu_386_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_7_fu_398_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_8_fu_426_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_4_fu_430_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_9_fu_455_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_464_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_464_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln203_fu_518_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_3_fu_482_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal sext_ln203_fu_491_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal mul_ln203_fu_518_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln203_fu_518_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_464_ap_start : STD_LOGIC;
    signal grp_fu_464_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln203_fu_518_p10 : STD_LOGIC_VECTOR (19 downto 0);

    component cnn_urem_9ns_5ns_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component cnn_mul_mul_11ns_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;



begin
    cnn_urem_9ns_5ns_ibs_U20 : component cnn_urem_9ns_5ns_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 5,
        dout_WIDTH => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_464_ap_start,
        done => grp_fu_464_ap_done,
        din0 => i_2_reg_346,
        din1 => grp_fu_464_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_464_p2);

    cnn_mul_mul_11ns_jbC_U21 : component cnn_mul_mul_11ns_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 9,
        dout_WIDTH => 20)
    port map (
        din0 => mul_ln203_fu_518_p0,
        din1 => mul_ln203_fu_518_p1,
        dout => mul_ln203_fu_518_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_335_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln12_fu_443_p2 = ap_const_lv1_1))) then 
                c_0_reg_335 <= c_reg_546;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_368_p2 = ap_const_lv1_0))) then 
                c_0_reg_335 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_357_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                f_0_reg_357 <= f_reg_564;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_408_p2 = ap_const_lv1_0))) then 
                f_0_reg_357 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_301_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_408_p2 = ap_const_lv1_1))) then 
                i_0_reg_301 <= i_reg_533;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_301 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_324_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln12_fu_443_p2 = ap_const_lv1_1))) then 
                i_1_reg_324 <= add_ln15_reg_551;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_368_p2 = ap_const_lv1_0))) then 
                i_1_reg_324 <= i_0_reg_301;
            end if; 
        end if;
    end process;

    i_2_reg_346_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                i_2_reg_346 <= add_ln15_1_fu_512_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_408_p2 = ap_const_lv1_0))) then 
                i_2_reg_346 <= i_1_reg_324;
            end if; 
        end if;
    end process;

    r_0_reg_313_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_408_p2 = ap_const_lv1_1))) then 
                r_0_reg_313 <= r_reg_528;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_313 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_408_p2 = ap_const_lv1_0))) then
                add_ln15_reg_551 <= add_ln15_fu_420_p2;
                    tmp_15_cast_reg_556(9 downto 4) <= tmp_15_cast_fu_435_p3(9 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln12_fu_443_p2 = ap_const_lv1_0))) then
                add_ln203_5_reg_569 <= add_ln203_5_fu_459_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_368_p2 = ap_const_lv1_0))) then
                add_ln203_reg_538 <= add_ln203_fu_402_p2;
                i_reg_533 <= i_fu_380_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_546 <= c_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_564 <= f_fu_449_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_528 <= r_fu_374_p2;
            end if;
        end if;
    end process;
    tmp_15_cast_reg_556(3 downto 0) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_368_p2, ap_CS_fsm_state3, icmp_ln9_fu_408_p2, ap_CS_fsm_state4, icmp_ln12_fu_443_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_368_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln9_fu_408_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln12_fu_443_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_1_fu_512_p2 <= std_logic_vector(unsigned(i_2_reg_346) + unsigned(ap_const_lv9_1));
    add_ln15_fu_420_p2 <= std_logic_vector(unsigned(i_1_reg_324) + unsigned(ap_const_lv9_10));
    add_ln203_4_fu_430_p2 <= std_logic_vector(unsigned(zext_ln203_8_fu_426_p1) + unsigned(add_ln203_reg_538));
    add_ln203_5_fu_459_p2 <= std_logic_vector(unsigned(tmp_15_cast_reg_556) + unsigned(zext_ln203_9_fu_455_p1));
    add_ln203_fu_402_p2 <= std_logic_vector(unsigned(zext_ln203_6_fu_386_p1) + unsigned(zext_ln203_7_fu_398_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_368_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_368_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_368_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln6_fu_368_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_414_p2 <= std_logic_vector(unsigned(c_0_reg_335) + unsigned(ap_const_lv3_1));
    f_fu_449_p2 <= std_logic_vector(unsigned(f_0_reg_357) + unsigned(ap_const_lv5_1));
    flat_array_0_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_0_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_0_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_0_V_d0 <= max_pool_out_V_q0;

    flat_array_0_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_0_V_we0 <= ap_const_logic_1;
        else 
            flat_array_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_10_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_10_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_10_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_10_V_d0 <= max_pool_out_V_q0;

    flat_array_10_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_A) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_10_V_we0 <= ap_const_logic_1;
        else 
            flat_array_10_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_11_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_11_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_11_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_11_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_11_V_d0 <= max_pool_out_V_q0;

    flat_array_11_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_B) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_11_V_we0 <= ap_const_logic_1;
        else 
            flat_array_11_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_12_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_12_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_12_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_12_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_12_V_d0 <= max_pool_out_V_q0;

    flat_array_12_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if ((not((trunc_ln203_fu_474_p1 = ap_const_lv5_0)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_1)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_2)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_3)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_4)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_5)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_6)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_7)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_8)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_9)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_A)) and not((trunc_ln203_fu_474_p1 = ap_const_lv5_B)) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_12_V_we0 <= ap_const_logic_1;
        else 
            flat_array_12_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_1_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_1_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_1_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_1_V_d0 <= max_pool_out_V_q0;

    flat_array_1_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_1_V_we0 <= ap_const_logic_1;
        else 
            flat_array_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_2_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_2_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_2_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_2_V_d0 <= max_pool_out_V_q0;

    flat_array_2_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_2) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_2_V_we0 <= ap_const_logic_1;
        else 
            flat_array_2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_3_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_3_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_3_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_3_V_d0 <= max_pool_out_V_q0;

    flat_array_3_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_3) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_3_V_we0 <= ap_const_logic_1;
        else 
            flat_array_3_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_4_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_4_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_4_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_4_V_d0 <= max_pool_out_V_q0;

    flat_array_4_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_4) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_4_V_we0 <= ap_const_logic_1;
        else 
            flat_array_4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_5_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_5_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_5_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_5_V_d0 <= max_pool_out_V_q0;

    flat_array_5_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_5) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_5_V_we0 <= ap_const_logic_1;
        else 
            flat_array_5_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_6_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_6_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_6_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_6_V_d0 <= max_pool_out_V_q0;

    flat_array_6_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_6) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_6_V_we0 <= ap_const_logic_1;
        else 
            flat_array_6_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_7_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_7_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_7_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_7_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_7_V_d0 <= max_pool_out_V_q0;

    flat_array_7_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_7) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_7_V_we0 <= ap_const_logic_1;
        else 
            flat_array_7_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_8_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_8_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_8_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_8_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_8_V_d0 <= max_pool_out_V_q0;

    flat_array_8_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_8) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_8_V_we0 <= ap_const_logic_1;
        else 
            flat_array_8_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_9_V_address0 <= zext_ln203_fu_495_p1(5 - 1 downto 0);

    flat_array_9_V_ce0_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            flat_array_9_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_9_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_9_V_d0 <= max_pool_out_V_q0;

    flat_array_9_V_we0_assign_proc : process(ap_CS_fsm_state16, trunc_ln203_fu_474_p1)
    begin
        if (((trunc_ln203_fu_474_p1 = ap_const_lv5_9) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            flat_array_9_V_we0 <= ap_const_logic_1;
        else 
            flat_array_9_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_464_ap_start_assign_proc : process(ap_CS_fsm_state4, icmp_ln12_fu_443_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln12_fu_443_p2 = ap_const_lv1_0))) then 
            grp_fu_464_ap_start <= ap_const_logic_1;
        else 
            grp_fu_464_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_464_p1 <= ap_const_lv9_D(5 - 1 downto 0);
    i_fu_380_p2 <= std_logic_vector(unsigned(i_0_reg_301) + unsigned(ap_const_lv9_50));
    icmp_ln12_fu_443_p2 <= "1" when (f_0_reg_357 = ap_const_lv5_10) else "0";
    icmp_ln6_fu_368_p2 <= "1" when (r_0_reg_313 = ap_const_lv3_5) else "0";
    icmp_ln9_fu_408_p2 <= "1" when (c_0_reg_335 = ap_const_lv3_5) else "0";
    max_pool_out_V_address0 <= zext_ln203_10_fu_470_p1(9 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln203_fu_518_p0 <= ap_const_lv20_277(11 - 1 downto 0);
    mul_ln203_fu_518_p1 <= mul_ln203_fu_518_p10(9 - 1 downto 0);
    mul_ln203_fu_518_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_346),20));
    r_fu_374_p2 <= std_logic_vector(unsigned(r_0_reg_313) + unsigned(ap_const_lv3_1));
        sext_ln203_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_3_fu_482_p4),9));

    tmp_15_cast_fu_435_p3 <= (add_ln203_4_fu_430_p2 & ap_const_lv4_0);
    tmp_3_fu_482_p4 <= mul_ln203_fu_518_p2(19 downto 13);
    tmp_s_fu_390_p3 <= (r_0_reg_313 & ap_const_lv2_0);
    trunc_ln203_fu_474_p1 <= grp_fu_464_p2(5 - 1 downto 0);
    zext_ln203_10_fu_470_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_5_reg_569),64));
    zext_ln203_6_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_0_reg_313),6));
    zext_ln203_7_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_390_p3),6));
    zext_ln203_8_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_335),6));
    zext_ln203_9_fu_455_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_357),10));
    zext_ln203_fu_495_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln203_fu_491_p1),64));
end behav;
