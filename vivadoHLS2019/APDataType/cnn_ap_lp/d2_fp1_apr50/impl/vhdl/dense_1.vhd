-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_V_ce0 : OUT STD_LOGIC;
    flat_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_30 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_31 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_32 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_33 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_34 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_35 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_36 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_37 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_38 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_39 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_40 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_41 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_42 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_43 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_44 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_45 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_46 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_47 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_48 : OUT STD_LOGIC_VECTOR (13 downto 0);
    ap_return_49 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv6_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv6_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_const_lv6_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_const_lv6_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv6_C : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_const_lv6_D : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_const_lv6_E : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_const_lv6_F : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_11 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_const_lv6_12 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_const_lv6_13 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_const_lv6_14 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_const_lv6_15 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_const_lv6_16 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv13_52 : STD_LOGIC_VECTOR (12 downto 0) := "0000001010010";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv9_190 : STD_LOGIC_VECTOR (8 downto 0) := "110010000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv15_32 : STD_LOGIC_VECTOR (14 downto 0) := "000000000110010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv6_27 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_1_weights_V_address0 : STD_LOGIC_VECTOR (14 downto 0);
    signal dense_1_weights_V_ce0 : STD_LOGIC;
    signal dense_1_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_1_bias_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_bias_V_ce0 : STD_LOGIC;
    signal dense_1_bias_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln9_fu_579_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln9_reg_1975 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_591_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_1983 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln14_fu_597_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_1988 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln9_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln13_fu_601_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln13_reg_1993 : STD_LOGIC_VECTOR (14 downto 0);
    signal j_fu_919_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_reg_2001 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal add_ln1117_1_fu_930_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln1117_1_reg_2006 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln13_fu_913_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_51_reg_2026 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_0_reg_363 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal phi_mul1_reg_375 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_Val2_s_reg_387 : STD_LOGIC_VECTOR (13 downto 0);
    signal j_0_reg_399 : STD_LOGIC_VECTOR (8 downto 0);
    signal phi_mul_reg_410 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln1117_fu_941_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_1_fu_925_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_1_out_24_1_V_fu_120 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_1_fu_1642_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_50_fu_1015_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal dense_1_out_8_0_V_s_fu_124 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_19_fu_1410_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_24_0_V_fu_128 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_fu_1635_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_23_1_V_fu_132 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_49_fu_1050_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_8_1_V_s_fu_136 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_18_fu_1403_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_23_0_V_fu_140 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_48_fu_1043_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_22_1_V_fu_144 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_47_fu_1074_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_9_0_V_s_fu_148 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_21_fu_1386_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_22_0_V_fu_152 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_46_fu_1067_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_21_1_V_fu_156 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_45_fu_1098_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_9_1_V_s_fu_160 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_20_fu_1379_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_21_0_V_fu_164 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_44_fu_1091_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_20_1_V_fu_168 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_43_fu_1122_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_10_0_V_fu_172 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_23_fu_1362_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_20_0_V_fu_176 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_42_fu_1115_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_19_1_V_fu_180 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_41_fu_1146_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_10_1_V_fu_184 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_22_fu_1355_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_19_0_V_fu_188 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_40_fu_1139_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_18_1_V_fu_192 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_39_fu_1170_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_11_0_V_fu_196 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_25_fu_1338_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_18_0_V_fu_200 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_38_fu_1163_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_17_1_V_fu_204 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_37_fu_1194_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_11_1_V_fu_208 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_24_fu_1331_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_17_0_V_fu_212 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_36_fu_1187_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_16_1_V_fu_216 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_35_fu_1218_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_12_0_V_fu_220 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_27_fu_1314_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_16_0_V_fu_224 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_34_fu_1211_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_15_1_V_fu_228 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_33_fu_1242_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_12_1_V_fu_232 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_26_fu_1307_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_15_0_V_fu_236 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_32_fu_1235_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_14_1_V_fu_240 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_31_fu_1266_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_13_0_V_fu_244 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_29_fu_1290_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_14_0_V_fu_248 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_30_fu_1259_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_13_1_V_fu_252 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_28_fu_1283_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_7_1_V_s_fu_256 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_17_fu_1434_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal write_flag_0_fu_260 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln203_fu_1614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal dense_1_out_7_0_V_s_fu_264 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_16_fu_1427_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_V_086_fu_268 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_3_fu_1607_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_6_1_V_s_fu_272 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_15_fu_1458_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_6_0_V_s_fu_276 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_14_fu_1451_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_0_1_V_s_fu_280 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_2_fu_1600_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_5_1_V_s_fu_284 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_13_fu_1482_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_5_0_V_s_fu_288 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_12_fu_1475_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_1_0_V_s_fu_292 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_5_fu_1578_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_4_1_V_s_fu_296 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_11_fu_1506_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_4_0_V_s_fu_300 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_10_fu_1499_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_1_1_V_s_fu_304 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_4_fu_1571_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_3_1_V_s_fu_308 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_9_fu_1530_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_3_0_V_s_fu_312 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_8_fu_1523_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_2_0_V_s_fu_316 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_7_fu_1554_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_1_out_2_1_V_s_fu_320 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln203_6_fu_1547_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal select_ln23_fu_605_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1117_fu_936_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_1659_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_979_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln703_fu_987_p0 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1265_fu_979_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln703_fu_983_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln703_fu_987_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln203_fu_1003_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_6_fu_1009_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln703_fu_991_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_52_fu_1023_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_997_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln19_fu_1031_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln19_fu_1039_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal xor_ln203_fu_1595_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_1659_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component cnn_mac_muladd_9skbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_1_dense_1_wibs IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_1_dense_1_bjbC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    dense_1_weights_V_U : component dense_1_dense_1_wibs
    generic map (
        DataWidth => 9,
        AddressRange => 20000,
        AddressWidth => 15)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_weights_V_address0,
        ce0 => dense_1_weights_V_ce0,
        q0 => dense_1_weights_V_q0);

    dense_1_bias_V_U : component dense_1_dense_1_bjbC
    generic map (
        DataWidth => 6,
        AddressRange => 50,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_V_address0,
        ce0 => dense_1_bias_V_ce0,
        q0 => dense_1_bias_V_q0);

    cnn_mac_muladd_9skbM_U22 : component cnn_mac_muladd_9skbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => dense_1_weights_V_q0,
        din1 => flat_array_V_q0,
        din2 => grp_fu_1659_p2,
        dout => grp_fu_1659_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_363_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_0_reg_363 <= i_reg_1983;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_363 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    j_0_reg_399_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_0_reg_399 <= j_reg_2001;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_0))) then 
                j_0_reg_399 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_387_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_s_reg_387 <= grp_fu_1659_p3(21 downto 8);
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_387 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_375_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                phi_mul1_reg_375 <= add_ln9_reg_1975;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul1_reg_375 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_410_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                phi_mul_reg_410 <= add_ln1117_1_reg_2006;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_0))) then 
                phi_mul_reg_410 <= ap_const_lv15_0;
            end if; 
        end if;
    end process;

    write_flag_0_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_0))) then 
                write_flag_0_fu_260 <= or_ln203_fu_1614_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                write_flag_0_fu_260 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_913_p2 = ap_const_lv1_0))) then
                add_ln1117_1_reg_2006 <= add_ln1117_1_fu_930_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln9_reg_1975 <= add_ln9_fu_579_p2;
                i_reg_1983 <= i_fu_591_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_0))) then
                dense_1_out_0_1_V_s_fu_280 <= select_ln203_2_fu_1600_p3;
                dense_1_out_V_086_fu_268 <= select_ln203_3_fu_1607_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_A))) then
                dense_1_out_10_0_V_fu_172 <= select_ln203_23_fu_1362_p3;
                dense_1_out_10_1_V_fu_184 <= select_ln203_22_fu_1355_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_B))) then
                dense_1_out_11_0_V_fu_196 <= select_ln203_25_fu_1338_p3;
                dense_1_out_11_1_V_fu_208 <= select_ln203_24_fu_1331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_C))) then
                dense_1_out_12_0_V_fu_220 <= select_ln203_27_fu_1314_p3;
                dense_1_out_12_1_V_fu_232 <= select_ln203_26_fu_1307_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_D))) then
                dense_1_out_13_0_V_fu_244 <= select_ln203_29_fu_1290_p3;
                dense_1_out_13_1_V_fu_252 <= select_ln203_28_fu_1283_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_E))) then
                dense_1_out_14_0_V_fu_248 <= select_ln203_30_fu_1259_p3;
                dense_1_out_14_1_V_fu_240 <= select_ln203_31_fu_1266_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_F))) then
                dense_1_out_15_0_V_fu_236 <= select_ln203_32_fu_1235_p3;
                dense_1_out_15_1_V_fu_228 <= select_ln203_33_fu_1242_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_10))) then
                dense_1_out_16_0_V_fu_224 <= select_ln203_34_fu_1211_p3;
                dense_1_out_16_1_V_fu_216 <= select_ln203_35_fu_1218_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_11))) then
                dense_1_out_17_0_V_fu_212 <= select_ln203_36_fu_1187_p3;
                dense_1_out_17_1_V_fu_204 <= select_ln203_37_fu_1194_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_12))) then
                dense_1_out_18_0_V_fu_200 <= select_ln203_38_fu_1163_p3;
                dense_1_out_18_1_V_fu_192 <= select_ln203_39_fu_1170_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_13))) then
                dense_1_out_19_0_V_fu_188 <= select_ln203_40_fu_1139_p3;
                dense_1_out_19_1_V_fu_180 <= select_ln203_41_fu_1146_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_1))) then
                dense_1_out_1_0_V_s_fu_292 <= select_ln203_5_fu_1578_p3;
                dense_1_out_1_1_V_s_fu_304 <= select_ln203_4_fu_1571_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_14))) then
                dense_1_out_20_0_V_fu_176 <= select_ln203_42_fu_1115_p3;
                dense_1_out_20_1_V_fu_168 <= select_ln203_43_fu_1122_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_15))) then
                dense_1_out_21_0_V_fu_164 <= select_ln203_44_fu_1091_p3;
                dense_1_out_21_1_V_fu_156 <= select_ln203_45_fu_1098_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_16))) then
                dense_1_out_22_0_V_fu_152 <= select_ln203_46_fu_1067_p3;
                dense_1_out_22_1_V_fu_144 <= select_ln203_47_fu_1074_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_17))) then
                dense_1_out_23_0_V_fu_140 <= select_ln203_48_fu_1043_p3;
                dense_1_out_23_1_V_fu_132 <= select_ln203_49_fu_1050_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not((select_ln203_50_fu_1015_p3 = ap_const_lv6_17)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_16)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_15)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_14)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_13)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_12)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_11)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_10)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_F)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_E)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_D)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_C)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_B)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_A)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_9)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_8)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_7)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_6)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_5)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_4)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_3)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_2)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_1)) and not((select_ln203_50_fu_1015_p3 = ap_const_lv6_0)) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                dense_1_out_24_0_V_fu_128 <= select_ln203_fu_1635_p3;
                dense_1_out_24_1_V_fu_120 <= select_ln203_1_fu_1642_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_2))) then
                dense_1_out_2_0_V_s_fu_316 <= select_ln203_7_fu_1554_p3;
                dense_1_out_2_1_V_s_fu_320 <= select_ln203_6_fu_1547_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_3))) then
                dense_1_out_3_0_V_s_fu_312 <= select_ln203_8_fu_1523_p3;
                dense_1_out_3_1_V_s_fu_308 <= select_ln203_9_fu_1530_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_4))) then
                dense_1_out_4_0_V_s_fu_300 <= select_ln203_10_fu_1499_p3;
                dense_1_out_4_1_V_s_fu_296 <= select_ln203_11_fu_1506_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_5))) then
                dense_1_out_5_0_V_s_fu_288 <= select_ln203_12_fu_1475_p3;
                dense_1_out_5_1_V_s_fu_284 <= select_ln203_13_fu_1482_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_6))) then
                dense_1_out_6_0_V_s_fu_276 <= select_ln203_14_fu_1451_p3;
                dense_1_out_6_1_V_s_fu_272 <= select_ln203_15_fu_1458_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_7))) then
                dense_1_out_7_0_V_s_fu_264 <= select_ln203_16_fu_1427_p3;
                dense_1_out_7_1_V_s_fu_256 <= select_ln203_17_fu_1434_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_8))) then
                dense_1_out_8_0_V_s_fu_124 <= select_ln203_19_fu_1410_p3;
                dense_1_out_8_1_V_s_fu_136 <= select_ln203_18_fu_1403_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (select_ln203_50_fu_1015_p3 = ap_const_lv6_9))) then
                dense_1_out_9_0_V_s_fu_148 <= select_ln203_21_fu_1386_p3;
                dense_1_out_9_1_V_s_fu_160 <= select_ln203_20_fu_1379_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_2001 <= j_fu_919_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_913_p2 = ap_const_lv1_1))) then
                tmp_51_reg_2026 <= phi_mul1_reg_375(11 downto 11);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_0))) then
                    zext_ln13_reg_1993(5 downto 0) <= zext_ln13_fu_601_p1(5 downto 0);
                    zext_ln14_reg_1988(5 downto 0) <= zext_ln14_fu_597_p1(5 downto 0);
            end if;
        end if;
    end process;
    zext_ln14_reg_1988(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    zext_ln13_reg_1993(14 downto 6) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_585_p2, ap_CS_fsm_state3, icmp_ln13_fu_913_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln13_fu_913_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln1117_1_fu_930_p2 <= std_logic_vector(unsigned(phi_mul_reg_410) + unsigned(ap_const_lv15_32));
    add_ln1117_fu_936_p2 <= std_logic_vector(unsigned(phi_mul_reg_410) + unsigned(zext_ln13_reg_1993));
    add_ln203_6_fu_1009_p2 <= std_logic_vector(signed(ap_const_lv6_27) + signed(i_0_reg_363));
    add_ln203_fu_997_p2 <= std_logic_vector(unsigned(trunc_ln703_fu_983_p1) + unsigned(sext_ln703_fu_987_p1));
    add_ln703_fu_991_p2 <= std_logic_vector(signed(sext_ln1265_fu_979_p1) + signed(p_Val2_s_reg_387));
    add_ln9_fu_579_p2 <= std_logic_vector(unsigned(phi_mul1_reg_375) + unsigned(ap_const_lv13_52));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln9_fu_585_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln9_fu_585_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln9_fu_585_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= select_ln23_fu_605_p3;
    ap_return_1 <= dense_1_out_0_1_V_s_fu_280;
    ap_return_10 <= dense_1_out_5_0_V_s_fu_288;
    ap_return_11 <= dense_1_out_5_1_V_s_fu_284;
    ap_return_12 <= dense_1_out_6_0_V_s_fu_276;
    ap_return_13 <= dense_1_out_6_1_V_s_fu_272;
    ap_return_14 <= dense_1_out_7_0_V_s_fu_264;
    ap_return_15 <= dense_1_out_7_1_V_s_fu_256;
    ap_return_16 <= dense_1_out_8_0_V_s_fu_124;
    ap_return_17 <= dense_1_out_8_1_V_s_fu_136;
    ap_return_18 <= dense_1_out_9_0_V_s_fu_148;
    ap_return_19 <= dense_1_out_9_1_V_s_fu_160;
    ap_return_2 <= dense_1_out_1_0_V_s_fu_292;
    ap_return_20 <= dense_1_out_10_0_V_fu_172;
    ap_return_21 <= dense_1_out_10_1_V_fu_184;
    ap_return_22 <= dense_1_out_11_0_V_fu_196;
    ap_return_23 <= dense_1_out_11_1_V_fu_208;
    ap_return_24 <= dense_1_out_12_0_V_fu_220;
    ap_return_25 <= dense_1_out_12_1_V_fu_232;
    ap_return_26 <= dense_1_out_13_0_V_fu_244;
    ap_return_27 <= dense_1_out_13_1_V_fu_252;
    ap_return_28 <= dense_1_out_14_0_V_fu_248;
    ap_return_29 <= dense_1_out_14_1_V_fu_240;
    ap_return_3 <= dense_1_out_1_1_V_s_fu_304;
    ap_return_30 <= dense_1_out_15_0_V_fu_236;
    ap_return_31 <= dense_1_out_15_1_V_fu_228;
    ap_return_32 <= dense_1_out_16_0_V_fu_224;
    ap_return_33 <= dense_1_out_16_1_V_fu_216;
    ap_return_34 <= dense_1_out_17_0_V_fu_212;
    ap_return_35 <= dense_1_out_17_1_V_fu_204;
    ap_return_36 <= dense_1_out_18_0_V_fu_200;
    ap_return_37 <= dense_1_out_18_1_V_fu_192;
    ap_return_38 <= dense_1_out_19_0_V_fu_188;
    ap_return_39 <= dense_1_out_19_1_V_fu_180;
    ap_return_4 <= dense_1_out_2_0_V_s_fu_316;
    ap_return_40 <= dense_1_out_20_0_V_fu_176;
    ap_return_41 <= dense_1_out_20_1_V_fu_168;
    ap_return_42 <= dense_1_out_21_0_V_fu_164;
    ap_return_43 <= dense_1_out_21_1_V_fu_156;
    ap_return_44 <= dense_1_out_22_0_V_fu_152;
    ap_return_45 <= dense_1_out_22_1_V_fu_144;
    ap_return_46 <= dense_1_out_23_0_V_fu_140;
    ap_return_47 <= dense_1_out_23_1_V_fu_132;
    ap_return_48 <= dense_1_out_24_0_V_fu_128;
    ap_return_49 <= dense_1_out_24_1_V_fu_120;
    ap_return_5 <= dense_1_out_2_1_V_s_fu_320;
    ap_return_6 <= dense_1_out_3_0_V_s_fu_312;
    ap_return_7 <= dense_1_out_3_1_V_s_fu_308;
    ap_return_8 <= dense_1_out_4_0_V_s_fu_300;
    ap_return_9 <= dense_1_out_4_1_V_s_fu_296;
    dense_1_bias_V_address0 <= zext_ln14_reg_1988(6 - 1 downto 0);

    dense_1_bias_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_1_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_1_weights_V_address0 <= zext_ln1117_fu_941_p1(15 - 1 downto 0);

    dense_1_weights_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_1_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_1_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_V_address0 <= zext_ln14_1_fu_925_p1(9 - 1 downto 0);

    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1659_p2 <= (p_Val2_s_reg_387 & ap_const_lv8_0);
    i_fu_591_p2 <= std_logic_vector(unsigned(i_0_reg_363) + unsigned(ap_const_lv6_1));
    icmp_ln13_fu_913_p2 <= "1" when (j_0_reg_399 = ap_const_lv9_190) else "0";
    icmp_ln203_fu_1003_p2 <= "1" when (unsigned(i_0_reg_363) < unsigned(ap_const_lv6_19)) else "0";
    icmp_ln9_fu_585_p2 <= "1" when (i_0_reg_363 = ap_const_lv6_32) else "0";
    j_fu_919_p2 <= std_logic_vector(unsigned(j_0_reg_399) + unsigned(ap_const_lv9_1));
    or_ln203_fu_1614_p2 <= (xor_ln203_fu_1595_p2 or write_flag_0_fu_260);
    select_ln19_fu_1031_p3 <= 
        ap_const_lv13_0 when (tmp_52_fu_1023_p3(0) = '1') else 
        add_ln203_fu_997_p2;
    select_ln203_10_fu_1499_p3 <= 
        dense_1_out_4_0_V_s_fu_300 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_11_fu_1506_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_4_1_V_s_fu_296;
    select_ln203_12_fu_1475_p3 <= 
        dense_1_out_5_0_V_s_fu_288 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_13_fu_1482_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_5_1_V_s_fu_284;
    select_ln203_14_fu_1451_p3 <= 
        dense_1_out_6_0_V_s_fu_276 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_15_fu_1458_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_6_1_V_s_fu_272;
    select_ln203_16_fu_1427_p3 <= 
        dense_1_out_7_0_V_s_fu_264 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_17_fu_1434_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_7_1_V_s_fu_256;
    select_ln203_18_fu_1403_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_8_1_V_s_fu_136;
    select_ln203_19_fu_1410_p3 <= 
        dense_1_out_8_0_V_s_fu_124 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_1_fu_1642_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_24_1_V_fu_120;
    select_ln203_20_fu_1379_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_9_1_V_s_fu_160;
    select_ln203_21_fu_1386_p3 <= 
        dense_1_out_9_0_V_s_fu_148 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_22_fu_1355_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_10_1_V_fu_184;
    select_ln203_23_fu_1362_p3 <= 
        dense_1_out_10_0_V_fu_172 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_24_fu_1331_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_11_1_V_fu_208;
    select_ln203_25_fu_1338_p3 <= 
        dense_1_out_11_0_V_fu_196 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_26_fu_1307_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_12_1_V_fu_232;
    select_ln203_27_fu_1314_p3 <= 
        dense_1_out_12_0_V_fu_220 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_28_fu_1283_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_13_1_V_fu_252;
    select_ln203_29_fu_1290_p3 <= 
        dense_1_out_13_0_V_fu_244 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_2_fu_1600_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_0_1_V_s_fu_280;
    select_ln203_30_fu_1259_p3 <= 
        dense_1_out_14_0_V_fu_248 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_31_fu_1266_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_14_1_V_fu_240;
    select_ln203_32_fu_1235_p3 <= 
        dense_1_out_15_0_V_fu_236 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_33_fu_1242_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_15_1_V_fu_228;
    select_ln203_34_fu_1211_p3 <= 
        dense_1_out_16_0_V_fu_224 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_35_fu_1218_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_16_1_V_fu_216;
    select_ln203_36_fu_1187_p3 <= 
        dense_1_out_17_0_V_fu_212 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_37_fu_1194_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_17_1_V_fu_204;
    select_ln203_38_fu_1163_p3 <= 
        dense_1_out_18_0_V_fu_200 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_39_fu_1170_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_18_1_V_fu_192;
    select_ln203_3_fu_1607_p3 <= 
        dense_1_out_V_086_fu_268 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_40_fu_1139_p3 <= 
        dense_1_out_19_0_V_fu_188 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_41_fu_1146_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_19_1_V_fu_180;
    select_ln203_42_fu_1115_p3 <= 
        dense_1_out_20_0_V_fu_176 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_43_fu_1122_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_20_1_V_fu_168;
    select_ln203_44_fu_1091_p3 <= 
        dense_1_out_21_0_V_fu_164 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_45_fu_1098_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_21_1_V_fu_156;
    select_ln203_46_fu_1067_p3 <= 
        dense_1_out_22_0_V_fu_152 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_47_fu_1074_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_22_1_V_fu_144;
    select_ln203_48_fu_1043_p3 <= 
        dense_1_out_23_0_V_fu_140 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_49_fu_1050_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_23_1_V_fu_132;
    select_ln203_4_fu_1571_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_1_1_V_s_fu_304;
    select_ln203_50_fu_1015_p3 <= 
        i_0_reg_363 when (icmp_ln203_fu_1003_p2(0) = '1') else 
        add_ln203_6_fu_1009_p2;
    select_ln203_5_fu_1578_p3 <= 
        dense_1_out_1_0_V_s_fu_292 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_6_fu_1547_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_2_1_V_s_fu_320;
    select_ln203_7_fu_1554_p3 <= 
        dense_1_out_2_0_V_s_fu_316 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_8_fu_1523_p3 <= 
        dense_1_out_3_0_V_s_fu_312 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln203_9_fu_1530_p3 <= 
        zext_ln19_fu_1039_p1 when (tmp_51_reg_2026(0) = '1') else 
        dense_1_out_3_1_V_s_fu_308;
    select_ln203_fu_1635_p3 <= 
        dense_1_out_24_0_V_fu_128 when (tmp_51_reg_2026(0) = '1') else 
        zext_ln19_fu_1039_p1;
    select_ln23_fu_605_p3 <= 
        dense_1_out_V_086_fu_268 when (write_flag_0_fu_260(0) = '1') else 
        ap_const_lv14_0;
    sext_ln1265_fu_979_p0 <= dense_1_bias_V_q0;
        sext_ln1265_fu_979_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln1265_fu_979_p0),14));

    sext_ln703_fu_987_p0 <= dense_1_bias_V_q0;
        sext_ln703_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln703_fu_987_p0),13));

    tmp_52_fu_1023_p3 <= add_ln703_fu_991_p2(13 downto 13);
    trunc_ln703_fu_983_p1 <= p_Val2_s_reg_387(13 - 1 downto 0);
    xor_ln203_fu_1595_p2 <= (tmp_51_reg_2026 xor ap_const_lv1_1);
    zext_ln1117_fu_941_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_fu_936_p2),64));
    zext_ln13_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_363),15));
    zext_ln14_1_fu_925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_399),64));
    zext_ln14_fu_597_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_363),64));
    zext_ln19_fu_1039_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln19_fu_1031_p3),14));
end behav;
