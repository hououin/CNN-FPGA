-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity flat is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    max_pool_out_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    max_pool_out_1_V_ce0 : OUT STD_LOGIC;
    max_pool_out_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_2_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    max_pool_out_2_0_V_ce0 : OUT STD_LOGIC;
    max_pool_out_2_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    flat_array_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    flat_array_V_ce0 : OUT STD_LOGIC;
    flat_array_V_we0 : OUT STD_LOGIC;
    flat_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of flat is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv9_50 : STD_LOGIC_VECTOR (8 downto 0) := "001010000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_B : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_const_lv9_10 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal r_fu_219_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal r_reg_378 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_fu_225_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_reg_383 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln6_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_fu_239_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_reg_388 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln9_fu_251_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln9_reg_393 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln9_fu_255_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln9_reg_398 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal c_fu_267_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal c_reg_406 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln15_fu_273_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln15_reg_411 : STD_LOGIC_VECTOR (8 downto 0);
    signal icmp_ln9_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln203_fu_291_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln203_reg_416 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_14_cast_fu_316_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_14_cast_reg_420 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_fu_330_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_428 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln14_fu_336_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln14_reg_433 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln12_fu_324_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln15_1_fu_369_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_0_reg_120 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_132 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_143 : STD_LOGIC_VECTOR (8 downto 0);
    signal c_0_reg_154 : STD_LOGIC_VECTOR (2 downto 0);
    signal phi_mul_reg_165 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_176 : STD_LOGIC_VECTOR (8 downto 0);
    signal f_0_reg_187 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_phi_mux_phi_ln203_phi_fu_201_p6 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln203_9_fu_353_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_10_fu_364_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_231_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_243_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln203_fu_279_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_285_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_6_fu_299_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_6_fu_307_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln203_3_fu_311_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_8_fu_344_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln203_4_fu_348_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln203_7_fu_340_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_5_fu_359_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_154_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                c_0_reg_154 <= c_reg_406;
            elsif (((icmp_ln6_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_154 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                f_0_reg_187 <= f_reg_428;
            elsif (((icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_187 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_0_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_120 <= i_reg_383;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_120 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    i_1_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_143 <= add_ln15_reg_411;
            elsif (((icmp_ln6_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_1_reg_143 <= i_0_reg_120;
            end if; 
        end if;
    end process;

    i_2_reg_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                i_2_reg_176 <= add_ln15_1_fu_369_p2;
            elsif (((icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_2_reg_176 <= i_1_reg_143;
            end if; 
        end if;
    end process;

    phi_mul_reg_165_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_165 <= add_ln9_reg_398;
            elsif (((icmp_ln6_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                phi_mul_reg_165 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    r_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_132 <= r_reg_378;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_132 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln9_fu_261_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                add_ln15_reg_411 <= add_ln15_fu_273_p2;
                select_ln203_reg_416 <= select_ln203_fu_291_p3;
                    tmp_14_cast_reg_420(8 downto 4) <= tmp_14_cast_fu_316_p3(8 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln9_reg_398 <= add_ln9_fu_255_p2;
                c_reg_406 <= c_fu_267_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_428 <= f_fu_330_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln6_fu_213_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                i_reg_383 <= i_fu_225_p2;
                    zext_ln203_reg_388(3 downto 1) <= zext_ln203_fu_239_p1(3 downto 1);
                    zext_ln9_reg_393(6 downto 4) <= zext_ln9_fu_251_p1(6 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_378 <= r_fu_219_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln12_fu_324_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    zext_ln14_reg_433(8 downto 0) <= zext_ln14_fu_336_p1(8 downto 0);
            end if;
        end if;
    end process;
    zext_ln203_reg_388(0) <= '0';
    zext_ln203_reg_388(4) <= '0';
    zext_ln9_reg_393(3 downto 0) <= "0000";
    zext_ln9_reg_393(7) <= '0';
    tmp_14_cast_reg_420(3 downto 0) <= "0000";
    zext_ln14_reg_433(63 downto 9) <= "0000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_213_p2, ap_CS_fsm_state3, icmp_ln9_fu_261_p2, ap_CS_fsm_state4, icmp_ln12_fu_324_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln6_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln9_fu_261_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln12_fu_324_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    add_ln15_1_fu_369_p2 <= std_logic_vector(unsigned(i_2_reg_176) + unsigned(ap_const_lv9_1));
    add_ln15_fu_273_p2 <= std_logic_vector(unsigned(i_1_reg_143) + unsigned(ap_const_lv9_10));
    add_ln203_3_fu_311_p2 <= std_logic_vector(unsigned(zext_ln203_reg_388) + unsigned(zext_ln203_6_fu_307_p1));
    add_ln203_4_fu_348_p2 <= std_logic_vector(unsigned(tmp_14_cast_reg_420) + unsigned(zext_ln203_8_fu_344_p1));
    add_ln203_5_fu_359_p2 <= std_logic_vector(unsigned(zext_ln9_reg_393) + unsigned(zext_ln203_7_fu_340_p1));
    add_ln203_fu_285_p2 <= std_logic_vector(unsigned(c_0_reg_154) + unsigned(ap_const_lv3_5));
    add_ln9_fu_255_p2 <= std_logic_vector(unsigned(phi_mul_reg_165) + unsigned(ap_const_lv6_B));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln6_fu_213_p2)
    begin
        if ((((icmp_ln6_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln203_phi_fu_201_p6_assign_proc : process(max_pool_out_0_V_q0, max_pool_out_1_V_q0, max_pool_out_2_0_V_q0, select_ln203_reg_416, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
            if ((not((select_ln203_reg_416 = ap_const_lv3_1)) and not((select_ln203_reg_416 = ap_const_lv3_0)))) then 
                ap_phi_mux_phi_ln203_phi_fu_201_p6 <= max_pool_out_2_0_V_q0;
            elsif ((select_ln203_reg_416 = ap_const_lv3_1)) then 
                ap_phi_mux_phi_ln203_phi_fu_201_p6 <= max_pool_out_1_V_q0;
            elsif ((select_ln203_reg_416 = ap_const_lv3_0)) then 
                ap_phi_mux_phi_ln203_phi_fu_201_p6 <= max_pool_out_0_V_q0;
            else 
                ap_phi_mux_phi_ln203_phi_fu_201_p6 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln203_phi_fu_201_p6 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln6_fu_213_p2)
    begin
        if (((icmp_ln6_fu_213_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_267_p2 <= std_logic_vector(unsigned(c_0_reg_154) + unsigned(ap_const_lv3_1));
    f_fu_330_p2 <= std_logic_vector(unsigned(f_0_reg_187) + unsigned(ap_const_lv5_1));
    flat_array_V_address0 <= zext_ln14_reg_433(9 - 1 downto 0);

    flat_array_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_V_ce0 <= ap_const_logic_1;
        else 
            flat_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    flat_array_V_d0 <= ap_phi_mux_phi_ln203_phi_fu_201_p6;

    flat_array_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            flat_array_V_we0 <= ap_const_logic_1;
        else 
            flat_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_225_p2 <= std_logic_vector(unsigned(i_0_reg_120) + unsigned(ap_const_lv9_50));
    icmp_ln12_fu_324_p2 <= "1" when (f_0_reg_187 = ap_const_lv5_10) else "0";
    icmp_ln203_fu_279_p2 <= "1" when (unsigned(c_0_reg_154) < unsigned(ap_const_lv3_3)) else "0";
    icmp_ln6_fu_213_p2 <= "1" when (r_0_reg_132 = ap_const_lv3_5) else "0";
    icmp_ln9_fu_261_p2 <= "1" when (c_0_reg_154 = ap_const_lv3_5) else "0";
    max_pool_out_0_V_address0 <= zext_ln203_9_fu_353_p1(8 - 1 downto 0);

    max_pool_out_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_1_V_address0 <= zext_ln203_9_fu_353_p1(8 - 1 downto 0);

    max_pool_out_1_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_1_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_2_0_V_address0 <= zext_ln203_10_fu_364_p1(7 - 1 downto 0);

    max_pool_out_2_0_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            max_pool_out_2_0_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_2_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_219_p2 <= std_logic_vector(unsigned(r_0_reg_132) + unsigned(ap_const_lv3_1));
    select_ln203_fu_291_p3 <= 
        c_0_reg_154 when (icmp_ln203_fu_279_p2(0) = '1') else 
        add_ln203_fu_285_p2;
    tmp_14_cast_fu_316_p3 <= (add_ln203_3_fu_311_p2 & ap_const_lv4_0);
    tmp_1_fu_243_p3 <= (r_0_reg_132 & ap_const_lv4_0);
    tmp_6_fu_299_p3 <= phi_mul_reg_165(5 downto 5);
    tmp_s_fu_231_p3 <= (r_0_reg_132 & ap_const_lv1_0);
    zext_ln14_fu_336_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_176),64));
    zext_ln203_10_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_5_fu_359_p2),64));
    zext_ln203_6_fu_307_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_299_p3),5));
    zext_ln203_7_fu_340_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),8));
    zext_ln203_8_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_187),9));
    zext_ln203_9_fu_353_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_4_fu_348_p2),64));
    zext_ln203_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_231_p3),5));
    zext_ln9_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_243_p3),8));
end behav;
