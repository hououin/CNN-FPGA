// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_0_V_address0,
        conv_out_0_V_ce0,
        conv_out_0_V_q0,
        conv_out_0_V_address1,
        conv_out_0_V_ce1,
        conv_out_0_V_q1,
        conv_out_1_V_address0,
        conv_out_1_V_ce0,
        conv_out_1_V_q0,
        conv_out_1_V_address1,
        conv_out_1_V_ce1,
        conv_out_1_V_q1,
        conv_out_2_V_address0,
        conv_out_2_V_ce0,
        conv_out_2_V_q0,
        conv_out_2_V_address1,
        conv_out_2_V_ce1,
        conv_out_2_V_q1,
        conv_out_3_V_address0,
        conv_out_3_V_ce0,
        conv_out_3_V_q0,
        conv_out_3_V_address1,
        conv_out_3_V_ce1,
        conv_out_3_V_q1,
        conv_out_4_V_address0,
        conv_out_4_V_ce0,
        conv_out_4_V_q0,
        conv_out_4_V_address1,
        conv_out_4_V_ce1,
        conv_out_4_V_q1,
        conv_out_5_V_address0,
        conv_out_5_V_ce0,
        conv_out_5_V_q0,
        conv_out_5_V_address1,
        conv_out_5_V_ce1,
        conv_out_5_V_q1,
        conv_out_6_V_address0,
        conv_out_6_V_ce0,
        conv_out_6_V_q0,
        conv_out_6_V_address1,
        conv_out_6_V_ce1,
        conv_out_6_V_q1,
        conv_out_7_V_address0,
        conv_out_7_V_ce0,
        conv_out_7_V_q0,
        conv_out_7_V_address1,
        conv_out_7_V_ce1,
        conv_out_7_V_q1,
        conv_out_8_V_address0,
        conv_out_8_V_ce0,
        conv_out_8_V_q0,
        conv_out_8_V_address1,
        conv_out_8_V_ce1,
        conv_out_8_V_q1,
        conv_out_9_V_address0,
        conv_out_9_V_ce0,
        conv_out_9_V_q0,
        conv_out_9_V_address1,
        conv_out_9_V_ce1,
        conv_out_9_V_q1,
        max_pool_out_0_V_address0,
        max_pool_out_0_V_ce0,
        max_pool_out_0_V_we0,
        max_pool_out_0_V_d0,
        max_pool_out_0_V_address1,
        max_pool_out_0_V_ce1,
        max_pool_out_0_V_we1,
        max_pool_out_0_V_d1,
        max_pool_out_1_V_address0,
        max_pool_out_1_V_ce0,
        max_pool_out_1_V_we0,
        max_pool_out_1_V_d0,
        max_pool_out_1_V_address1,
        max_pool_out_1_V_ce1,
        max_pool_out_1_V_we1,
        max_pool_out_1_V_d1,
        max_pool_out_2_0_V_address0,
        max_pool_out_2_0_V_ce0,
        max_pool_out_2_0_V_we0,
        max_pool_out_2_0_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] conv_out_0_V_address0;
output   conv_out_0_V_ce0;
input  [13:0] conv_out_0_V_q0;
output  [7:0] conv_out_0_V_address1;
output   conv_out_0_V_ce1;
input  [13:0] conv_out_0_V_q1;
output  [7:0] conv_out_1_V_address0;
output   conv_out_1_V_ce0;
input  [13:0] conv_out_1_V_q0;
output  [7:0] conv_out_1_V_address1;
output   conv_out_1_V_ce1;
input  [13:0] conv_out_1_V_q1;
output  [7:0] conv_out_2_V_address0;
output   conv_out_2_V_ce0;
input  [13:0] conv_out_2_V_q0;
output  [7:0] conv_out_2_V_address1;
output   conv_out_2_V_ce1;
input  [13:0] conv_out_2_V_q1;
output  [7:0] conv_out_3_V_address0;
output   conv_out_3_V_ce0;
input  [13:0] conv_out_3_V_q0;
output  [7:0] conv_out_3_V_address1;
output   conv_out_3_V_ce1;
input  [13:0] conv_out_3_V_q1;
output  [7:0] conv_out_4_V_address0;
output   conv_out_4_V_ce0;
input  [13:0] conv_out_4_V_q0;
output  [7:0] conv_out_4_V_address1;
output   conv_out_4_V_ce1;
input  [13:0] conv_out_4_V_q1;
output  [7:0] conv_out_5_V_address0;
output   conv_out_5_V_ce0;
input  [13:0] conv_out_5_V_q0;
output  [7:0] conv_out_5_V_address1;
output   conv_out_5_V_ce1;
input  [13:0] conv_out_5_V_q1;
output  [7:0] conv_out_6_V_address0;
output   conv_out_6_V_ce0;
input  [13:0] conv_out_6_V_q0;
output  [7:0] conv_out_6_V_address1;
output   conv_out_6_V_ce1;
input  [13:0] conv_out_6_V_q1;
output  [7:0] conv_out_7_V_address0;
output   conv_out_7_V_ce0;
input  [13:0] conv_out_7_V_q0;
output  [7:0] conv_out_7_V_address1;
output   conv_out_7_V_ce1;
input  [13:0] conv_out_7_V_q1;
output  [7:0] conv_out_8_V_address0;
output   conv_out_8_V_ce0;
input  [13:0] conv_out_8_V_q0;
output  [7:0] conv_out_8_V_address1;
output   conv_out_8_V_ce1;
input  [13:0] conv_out_8_V_q1;
output  [7:0] conv_out_9_V_address0;
output   conv_out_9_V_ce0;
input  [13:0] conv_out_9_V_q0;
output  [7:0] conv_out_9_V_address1;
output   conv_out_9_V_ce1;
input  [13:0] conv_out_9_V_q1;
output  [7:0] max_pool_out_0_V_address0;
output   max_pool_out_0_V_ce0;
output   max_pool_out_0_V_we0;
output  [13:0] max_pool_out_0_V_d0;
output  [7:0] max_pool_out_0_V_address1;
output   max_pool_out_0_V_ce1;
output   max_pool_out_0_V_we1;
output  [13:0] max_pool_out_0_V_d1;
output  [7:0] max_pool_out_1_V_address0;
output   max_pool_out_1_V_ce0;
output   max_pool_out_1_V_we0;
output  [13:0] max_pool_out_1_V_d0;
output  [7:0] max_pool_out_1_V_address1;
output   max_pool_out_1_V_ce1;
output   max_pool_out_1_V_we1;
output  [13:0] max_pool_out_1_V_d1;
output  [6:0] max_pool_out_2_0_V_address0;
output   max_pool_out_2_0_V_ce0;
output   max_pool_out_2_0_V_we0;
output  [13:0] max_pool_out_2_0_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_0_V_ce0;
reg conv_out_0_V_ce1;
reg conv_out_1_V_ce0;
reg conv_out_1_V_ce1;
reg conv_out_2_V_ce0;
reg conv_out_2_V_ce1;
reg conv_out_3_V_ce0;
reg conv_out_3_V_ce1;
reg conv_out_4_V_ce0;
reg conv_out_4_V_ce1;
reg conv_out_5_V_ce0;
reg conv_out_5_V_ce1;
reg conv_out_6_V_ce0;
reg conv_out_6_V_ce1;
reg conv_out_7_V_ce0;
reg conv_out_7_V_ce1;
reg conv_out_8_V_ce0;
reg conv_out_8_V_ce1;
reg conv_out_9_V_ce0;
reg conv_out_9_V_ce1;
reg max_pool_out_0_V_ce0;
reg max_pool_out_0_V_we0;
reg max_pool_out_0_V_ce1;
reg max_pool_out_0_V_we1;
reg max_pool_out_1_V_ce0;
reg max_pool_out_1_V_we0;
reg max_pool_out_1_V_ce1;
reg max_pool_out_1_V_we1;
reg max_pool_out_2_0_V_ce0;
reg max_pool_out_2_0_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [6:0] indvar_flatten_reg_403;
reg   [4:0] f_0_reg_414;
reg   [2:0] r_0_reg_425;
wire   [0:0] icmp_ln10_fu_436_p2;
reg   [0:0] icmp_ln10_reg_924;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_924_pp0_iter1_reg;
wire   [6:0] add_ln10_fu_442_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] select_ln29_20_fu_460_p3;
reg   [2:0] select_ln29_20_reg_933;
reg   [2:0] select_ln29_20_reg_933_pp0_iter1_reg;
wire   [4:0] select_ln29_21_fu_468_p3;
reg   [4:0] select_ln29_21_reg_940;
reg   [4:0] select_ln29_21_reg_940_pp0_iter1_reg;
wire   [63:0] zext_ln203_fu_484_p1;
reg   [63:0] zext_ln203_reg_947;
reg   [63:0] zext_ln203_reg_947_pp0_iter1_reg;
wire   [2:0] r_fu_493_p2;
wire   [8:0] zext_ln14_1_fu_499_p1;
reg   [8:0] zext_ln14_1_reg_988;
wire   [12:0] select_ln29_fu_519_p3;
reg   [12:0] select_ln29_reg_1018;
wire   [12:0] select_ln29_4_fu_575_p3;
reg   [12:0] select_ln29_4_reg_1073;
wire   [12:0] select_ln29_8_fu_593_p3;
reg   [12:0] select_ln29_8_reg_1078;
wire   [12:0] select_ln29_12_fu_611_p3;
reg   [12:0] select_ln29_12_reg_1083;
wire   [12:0] select_ln29_16_fu_629_p3;
reg   [12:0] select_ln29_16_reg_1088;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] ap_phi_mux_f_0_phi_fu_418_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1494_1_fu_551_p1;
wire   [63:0] zext_ln203_1_fu_666_p1;
wire   [63:0] zext_ln203_3_fu_689_p1;
wire   [0:0] icmp_ln13_fu_454_p2;
wire   [4:0] f_fu_448_p2;
wire   [7:0] tmp_2_fu_476_p3;
wire   [0:0] icmp_ln1494_fu_513_p2;
wire   [12:0] trunc_ln1494_fu_509_p1;
wire   [3:0] shl_ln_fu_502_p3;
wire   [3:0] or_ln26_fu_527_p2;
wire   [7:0] tmp_6_fu_533_p3;
wire   [8:0] zext_ln1494_fu_541_p1;
wire   [8:0] add_ln1494_fu_545_p2;
wire   [0:0] icmp_ln1494_4_fu_569_p2;
wire   [12:0] trunc_ln1494_1_fu_565_p1;
wire   [0:0] icmp_ln1494_8_fu_587_p2;
wire   [12:0] trunc_ln1494_2_fu_583_p1;
wire   [0:0] icmp_ln1494_12_fu_605_p2;
wire   [12:0] trunc_ln1494_3_fu_601_p1;
wire   [0:0] icmp_ln1494_16_fu_623_p2;
wire   [12:0] trunc_ln1494_4_fu_619_p1;
wire   [7:0] tmp_fu_640_p3;
wire   [7:0] or_ln203_fu_647_p2;
wire   [8:0] tmp_3_cast_fu_653_p3;
wire   [8:0] add_ln203_fu_661_p2;
wire   [6:0] tmp_4_fu_672_p3;
wire   [7:0] zext_ln203_2_fu_679_p1;
wire   [7:0] zext_ln14_fu_637_p1;
wire   [7:0] add_ln203_1_fu_683_p2;
wire   [13:0] zext_ln29_fu_694_p1;
wire   [0:0] icmp_ln1494_1_fu_697_p2;
wire   [13:0] select_ln29_1_fu_703_p3;
wire   [0:0] icmp_ln1494_2_fu_711_p2;
wire   [13:0] select_ln29_2_fu_717_p3;
wire   [0:0] icmp_ln1494_3_fu_725_p2;
wire   [13:0] zext_ln29_1_fu_740_p1;
wire   [0:0] icmp_ln1494_5_fu_743_p2;
wire   [13:0] select_ln29_5_fu_749_p3;
wire   [0:0] icmp_ln1494_6_fu_757_p2;
wire   [13:0] select_ln29_6_fu_763_p3;
wire   [0:0] icmp_ln1494_7_fu_771_p2;
wire   [13:0] zext_ln29_2_fu_786_p1;
wire   [0:0] icmp_ln1494_9_fu_789_p2;
wire   [13:0] select_ln29_9_fu_795_p3;
wire   [0:0] icmp_ln1494_10_fu_803_p2;
wire   [13:0] select_ln29_10_fu_809_p3;
wire   [0:0] icmp_ln1494_11_fu_817_p2;
wire   [13:0] zext_ln29_3_fu_832_p1;
wire   [0:0] icmp_ln1494_13_fu_835_p2;
wire   [13:0] select_ln29_13_fu_841_p3;
wire   [0:0] icmp_ln1494_14_fu_849_p2;
wire   [13:0] select_ln29_14_fu_855_p3;
wire   [0:0] icmp_ln1494_15_fu_863_p2;
wire   [13:0] zext_ln29_4_fu_878_p1;
wire   [0:0] icmp_ln1494_17_fu_881_p2;
wire   [13:0] select_ln29_17_fu_887_p3;
wire   [0:0] icmp_ln1494_18_fu_895_p2;
wire   [13:0] select_ln29_18_fu_901_p3;
wire   [0:0] icmp_ln1494_19_fu_909_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_924 == 1'd0))) begin
        f_0_reg_414 <= select_ln29_21_reg_940;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_414 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_436_p2 == 1'd0))) begin
        indvar_flatten_reg_403 <= add_ln10_fu_442_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_403 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_436_p2 == 1'd0))) begin
        r_0_reg_425 <= r_fu_493_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_425 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln10_reg_924 <= icmp_ln10_fu_436_p2;
        icmp_ln10_reg_924_pp0_iter1_reg <= icmp_ln10_reg_924;
        select_ln29_20_reg_933_pp0_iter1_reg <= select_ln29_20_reg_933;
        select_ln29_21_reg_940_pp0_iter1_reg <= select_ln29_21_reg_940;
        zext_ln203_reg_947_pp0_iter1_reg[7 : 0] <= zext_ln203_reg_947[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_924 == 1'd0))) begin
        select_ln29_12_reg_1083 <= select_ln29_12_fu_611_p3;
        select_ln29_16_reg_1088 <= select_ln29_16_fu_629_p3;
        select_ln29_4_reg_1073 <= select_ln29_4_fu_575_p3;
        select_ln29_8_reg_1078 <= select_ln29_8_fu_593_p3;
        select_ln29_reg_1018 <= select_ln29_fu_519_p3;
        zext_ln14_1_reg_988[4 : 0] <= zext_ln14_1_fu_499_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_436_p2 == 1'd0))) begin
        select_ln29_20_reg_933 <= select_ln29_20_fu_460_p3;
        zext_ln203_reg_947[7 : 0] <= zext_ln203_fu_484_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_436_p2 == 1'd0))) begin
        select_ln29_21_reg_940 <= select_ln29_21_fu_468_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_436_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln10_reg_924 == 1'd0))) begin
        ap_phi_mux_f_0_phi_fu_418_p4 = select_ln29_21_reg_940;
    end else begin
        ap_phi_mux_f_0_phi_fu_418_p4 = f_0_reg_414;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_0_V_ce0 = 1'b1;
    end else begin
        conv_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_0_V_ce1 = 1'b1;
    end else begin
        conv_out_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_1_V_ce0 = 1'b1;
    end else begin
        conv_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_1_V_ce1 = 1'b1;
    end else begin
        conv_out_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_2_V_ce0 = 1'b1;
    end else begin
        conv_out_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_2_V_ce1 = 1'b1;
    end else begin
        conv_out_2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_3_V_ce0 = 1'b1;
    end else begin
        conv_out_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_3_V_ce1 = 1'b1;
    end else begin
        conv_out_3_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_4_V_ce0 = 1'b1;
    end else begin
        conv_out_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_4_V_ce1 = 1'b1;
    end else begin
        conv_out_4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_5_V_ce0 = 1'b1;
    end else begin
        conv_out_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_5_V_ce1 = 1'b1;
    end else begin
        conv_out_5_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_6_V_ce0 = 1'b1;
    end else begin
        conv_out_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_6_V_ce1 = 1'b1;
    end else begin
        conv_out_6_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_7_V_ce0 = 1'b1;
    end else begin
        conv_out_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_7_V_ce1 = 1'b1;
    end else begin
        conv_out_7_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_8_V_ce0 = 1'b1;
    end else begin
        conv_out_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_8_V_ce1 = 1'b1;
    end else begin
        conv_out_8_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_9_V_ce0 = 1'b1;
    end else begin
        conv_out_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        conv_out_9_V_ce1 = 1'b1;
    end else begin
        conv_out_9_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_V_ce1 = 1'b1;
    end else begin
        max_pool_out_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_924_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_V_we0 = 1'b1;
    end else begin
        max_pool_out_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_924_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_0_V_we1 = 1'b1;
    end else begin
        max_pool_out_0_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_V_ce0 = 1'b1;
    end else begin
        max_pool_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_V_ce1 = 1'b1;
    end else begin
        max_pool_out_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_924_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_V_we0 = 1'b1;
    end else begin
        max_pool_out_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_924_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_1_V_we1 = 1'b1;
    end else begin
        max_pool_out_1_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_2_0_V_ce0 = 1'b1;
    end else begin
        max_pool_out_2_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln10_reg_924_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        max_pool_out_2_0_V_we0 = 1'b1;
    end else begin
        max_pool_out_2_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_436_p2 == 1'd1)) & ~((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln10_fu_436_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_442_p2 = (indvar_flatten_reg_403 + 7'd1);

assign add_ln1494_fu_545_p2 = (zext_ln1494_fu_541_p1 + zext_ln14_1_fu_499_p1);

assign add_ln203_1_fu_683_p2 = (zext_ln203_2_fu_679_p1 + zext_ln14_fu_637_p1);

assign add_ln203_fu_661_p2 = (tmp_3_cast_fu_653_p3 + zext_ln14_1_reg_988);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign conv_out_0_V_address0 = zext_ln203_fu_484_p1;

assign conv_out_0_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_1_V_address0 = zext_ln203_reg_947;

assign conv_out_1_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_2_V_address0 = zext_ln203_fu_484_p1;

assign conv_out_2_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_3_V_address0 = zext_ln203_reg_947;

assign conv_out_3_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_4_V_address0 = zext_ln203_fu_484_p1;

assign conv_out_4_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_5_V_address0 = zext_ln203_reg_947;

assign conv_out_5_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_6_V_address0 = zext_ln203_fu_484_p1;

assign conv_out_6_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_7_V_address0 = zext_ln203_reg_947;

assign conv_out_7_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_8_V_address0 = zext_ln203_fu_484_p1;

assign conv_out_8_V_address1 = zext_ln1494_1_fu_551_p1;

assign conv_out_9_V_address0 = zext_ln203_reg_947;

assign conv_out_9_V_address1 = zext_ln1494_1_fu_551_p1;

assign f_fu_448_p2 = (5'd1 + ap_phi_mux_f_0_phi_fu_418_p4);

assign icmp_ln10_fu_436_p2 = ((indvar_flatten_reg_403 == 7'd80) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_454_p2 = ((r_0_reg_425 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln1494_10_fu_803_p2 = (($signed(conv_out_4_V_q1) > $signed(select_ln29_9_fu_795_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_11_fu_817_p2 = (($signed(conv_out_5_V_q1) > $signed(select_ln29_10_fu_809_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_12_fu_605_p2 = (($signed(conv_out_6_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_13_fu_835_p2 = (($signed(conv_out_7_V_q0) > $signed(zext_ln29_3_fu_832_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_14_fu_849_p2 = (($signed(conv_out_6_V_q1) > $signed(select_ln29_13_fu_841_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_15_fu_863_p2 = (($signed(conv_out_7_V_q1) > $signed(select_ln29_14_fu_855_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_16_fu_623_p2 = (($signed(conv_out_8_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_17_fu_881_p2 = (($signed(conv_out_9_V_q0) > $signed(zext_ln29_4_fu_878_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_18_fu_895_p2 = (($signed(conv_out_8_V_q1) > $signed(select_ln29_17_fu_887_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_19_fu_909_p2 = (($signed(conv_out_9_V_q1) > $signed(select_ln29_18_fu_901_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_697_p2 = (($signed(conv_out_1_V_q0) > $signed(zext_ln29_fu_694_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_711_p2 = (($signed(conv_out_0_V_q1) > $signed(select_ln29_1_fu_703_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_725_p2 = (($signed(conv_out_1_V_q1) > $signed(select_ln29_2_fu_717_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_4_fu_569_p2 = (($signed(conv_out_2_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_5_fu_743_p2 = (($signed(conv_out_3_V_q0) > $signed(zext_ln29_1_fu_740_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_6_fu_757_p2 = (($signed(conv_out_2_V_q1) > $signed(select_ln29_5_fu_749_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_7_fu_771_p2 = (($signed(conv_out_3_V_q1) > $signed(select_ln29_6_fu_763_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_8_fu_587_p2 = (($signed(conv_out_4_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1494_9_fu_789_p2 = (($signed(conv_out_5_V_q0) > $signed(zext_ln29_2_fu_786_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_513_p2 = (($signed(conv_out_0_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign max_pool_out_0_V_address0 = zext_ln203_reg_947_pp0_iter1_reg;

assign max_pool_out_0_V_address1 = zext_ln203_1_fu_666_p1;

assign max_pool_out_0_V_d0 = ((icmp_ln1494_3_fu_725_p2[0:0] === 1'b1) ? conv_out_1_V_q1 : select_ln29_2_fu_717_p3);

assign max_pool_out_0_V_d1 = ((icmp_ln1494_15_fu_863_p2[0:0] === 1'b1) ? conv_out_7_V_q1 : select_ln29_14_fu_855_p3);

assign max_pool_out_1_V_address0 = zext_ln203_reg_947_pp0_iter1_reg;

assign max_pool_out_1_V_address1 = zext_ln203_1_fu_666_p1;

assign max_pool_out_1_V_d0 = ((icmp_ln1494_7_fu_771_p2[0:0] === 1'b1) ? conv_out_3_V_q1 : select_ln29_6_fu_763_p3);

assign max_pool_out_1_V_d1 = ((icmp_ln1494_19_fu_909_p2[0:0] === 1'b1) ? conv_out_9_V_q1 : select_ln29_18_fu_901_p3);

assign max_pool_out_2_0_V_address0 = zext_ln203_3_fu_689_p1;

assign max_pool_out_2_0_V_d0 = ((icmp_ln1494_11_fu_817_p2[0:0] === 1'b1) ? conv_out_5_V_q1 : select_ln29_10_fu_809_p3);

assign or_ln203_fu_647_p2 = (tmp_fu_640_p3 | 8'd16);

assign or_ln26_fu_527_p2 = (shl_ln_fu_502_p3 | 4'd1);

assign r_fu_493_p2 = (3'd1 + select_ln29_20_fu_460_p3);

assign select_ln29_10_fu_809_p3 = ((icmp_ln1494_10_fu_803_p2[0:0] === 1'b1) ? conv_out_4_V_q1 : select_ln29_9_fu_795_p3);

assign select_ln29_12_fu_611_p3 = ((icmp_ln1494_12_fu_605_p2[0:0] === 1'b1) ? trunc_ln1494_3_fu_601_p1 : 13'd0);

assign select_ln29_13_fu_841_p3 = ((icmp_ln1494_13_fu_835_p2[0:0] === 1'b1) ? conv_out_7_V_q0 : zext_ln29_3_fu_832_p1);

assign select_ln29_14_fu_855_p3 = ((icmp_ln1494_14_fu_849_p2[0:0] === 1'b1) ? conv_out_6_V_q1 : select_ln29_13_fu_841_p3);

assign select_ln29_16_fu_629_p3 = ((icmp_ln1494_16_fu_623_p2[0:0] === 1'b1) ? trunc_ln1494_4_fu_619_p1 : 13'd0);

assign select_ln29_17_fu_887_p3 = ((icmp_ln1494_17_fu_881_p2[0:0] === 1'b1) ? conv_out_9_V_q0 : zext_ln29_4_fu_878_p1);

assign select_ln29_18_fu_901_p3 = ((icmp_ln1494_18_fu_895_p2[0:0] === 1'b1) ? conv_out_8_V_q1 : select_ln29_17_fu_887_p3);

assign select_ln29_1_fu_703_p3 = ((icmp_ln1494_1_fu_697_p2[0:0] === 1'b1) ? conv_out_1_V_q0 : zext_ln29_fu_694_p1);

assign select_ln29_20_fu_460_p3 = ((icmp_ln13_fu_454_p2[0:0] === 1'b1) ? 3'd0 : r_0_reg_425);

assign select_ln29_21_fu_468_p3 = ((icmp_ln13_fu_454_p2[0:0] === 1'b1) ? f_fu_448_p2 : ap_phi_mux_f_0_phi_fu_418_p4);

assign select_ln29_2_fu_717_p3 = ((icmp_ln1494_2_fu_711_p2[0:0] === 1'b1) ? conv_out_0_V_q1 : select_ln29_1_fu_703_p3);

assign select_ln29_4_fu_575_p3 = ((icmp_ln1494_4_fu_569_p2[0:0] === 1'b1) ? trunc_ln1494_1_fu_565_p1 : 13'd0);

assign select_ln29_5_fu_749_p3 = ((icmp_ln1494_5_fu_743_p2[0:0] === 1'b1) ? conv_out_3_V_q0 : zext_ln29_1_fu_740_p1);

assign select_ln29_6_fu_763_p3 = ((icmp_ln1494_6_fu_757_p2[0:0] === 1'b1) ? conv_out_2_V_q1 : select_ln29_5_fu_749_p3);

assign select_ln29_8_fu_593_p3 = ((icmp_ln1494_8_fu_587_p2[0:0] === 1'b1) ? trunc_ln1494_2_fu_583_p1 : 13'd0);

assign select_ln29_9_fu_795_p3 = ((icmp_ln1494_9_fu_789_p2[0:0] === 1'b1) ? conv_out_5_V_q0 : zext_ln29_2_fu_786_p1);

assign select_ln29_fu_519_p3 = ((icmp_ln1494_fu_513_p2[0:0] === 1'b1) ? trunc_ln1494_fu_509_p1 : 13'd0);

assign shl_ln_fu_502_p3 = {{select_ln29_20_reg_933}, {1'd0}};

assign tmp_2_fu_476_p3 = {{select_ln29_20_fu_460_p3}, {select_ln29_21_fu_468_p3}};

assign tmp_3_cast_fu_653_p3 = {{1'd0}, {or_ln203_fu_647_p2}};

assign tmp_4_fu_672_p3 = {{select_ln29_20_reg_933_pp0_iter1_reg}, {4'd0}};

assign tmp_6_fu_533_p3 = {{or_ln26_fu_527_p2}, {4'd0}};

assign tmp_fu_640_p3 = {{select_ln29_20_reg_933_pp0_iter1_reg}, {5'd0}};

assign trunc_ln1494_1_fu_565_p1 = conv_out_2_V_q0[12:0];

assign trunc_ln1494_2_fu_583_p1 = conv_out_4_V_q0[12:0];

assign trunc_ln1494_3_fu_601_p1 = conv_out_6_V_q0[12:0];

assign trunc_ln1494_4_fu_619_p1 = conv_out_8_V_q0[12:0];

assign trunc_ln1494_fu_509_p1 = conv_out_0_V_q0[12:0];

assign zext_ln1494_1_fu_551_p1 = add_ln1494_fu_545_p2;

assign zext_ln1494_fu_541_p1 = tmp_6_fu_533_p3;

assign zext_ln14_1_fu_499_p1 = select_ln29_21_reg_940;

assign zext_ln14_fu_637_p1 = select_ln29_21_reg_940_pp0_iter1_reg;

assign zext_ln203_1_fu_666_p1 = add_ln203_fu_661_p2;

assign zext_ln203_2_fu_679_p1 = tmp_4_fu_672_p3;

assign zext_ln203_3_fu_689_p1 = add_ln203_1_fu_683_p2;

assign zext_ln203_fu_484_p1 = tmp_2_fu_476_p3;

assign zext_ln29_1_fu_740_p1 = select_ln29_4_reg_1073;

assign zext_ln29_2_fu_786_p1 = select_ln29_8_reg_1078;

assign zext_ln29_3_fu_832_p1 = select_ln29_12_reg_1083;

assign zext_ln29_4_fu_878_p1 = select_ln29_16_reg_1088;

assign zext_ln29_fu_694_p1 = select_ln29_reg_1018;

always @ (posedge ap_clk) begin
    zext_ln203_reg_947[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln203_reg_947_pp0_iter1_reg[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    zext_ln14_1_reg_988[8:5] <= 4'b0000;
end

endmodule //max_pool_2
