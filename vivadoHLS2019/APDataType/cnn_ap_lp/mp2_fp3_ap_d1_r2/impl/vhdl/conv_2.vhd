-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_V_ce0 : OUT STD_LOGIC;
    input_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_0_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_0_V_ce0 : OUT STD_LOGIC;
    conv_out_0_V_we0 : OUT STD_LOGIC;
    conv_out_0_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    conv_out_1_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    conv_out_1_V_ce0 : OUT STD_LOGIC;
    conv_out_1_V_we0 : OUT STD_LOGIC;
    conv_out_1_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_3FCB : STD_LOGIC_VECTOR (13 downto 0) := "11111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_V_ce0 : STD_LOGIC;
    signal conv_2_weights_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_V_ce0 : STD_LOGIC;
    signal conv_2_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_fu_348_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_1040 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal trunc_ln203_fu_354_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln203_reg_1045 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln8_fu_342_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln203_fu_372_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal mul_ln203_reg_1049 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_fu_384_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_1057 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_407_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_1062 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_417_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1070 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1075 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_11_fu_427_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_11_reg_1080 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_0_V_addr_reg_1085 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_1_V_addr_reg_1090 : STD_LOGIC_VECTOR (9 downto 0);
    signal wr_fu_456_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1098 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1116_fu_484_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1116_reg_1103 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_450_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1117_fu_498_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1117_reg_1108 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_514_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1121 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1116_1_fu_549_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1116_1_reg_1126 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_508_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln1117_fu_590_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln1117_reg_1131 : STD_LOGIC_VECTOR (10 downto 0);
    signal ch_fu_602_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_1139 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln24_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_V_4_fu_696_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1159 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal icmp_ln885_fu_702_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1168 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_708_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1172 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_V_5_fu_720_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_5_reg_1177 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln894_fu_753_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1183 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_863_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1189 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1194 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_877_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1199 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln924_fu_1008_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1209 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_fu_1014_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_1214 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_233 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_0_reg_245 : STD_LOGIC_VECTOR (3 downto 0);
    signal f_0_reg_257 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal p_Val2_s_reg_268 : STD_LOGIC_VECTOR (13 downto 0);
    signal wr_0_reg_280 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_291 : STD_LOGIC_VECTOR (13 downto 0);
    signal wc_0_reg_303 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_19_reg_314 : STD_LOGIC_VECTOR (13 downto 0);
    signal ch_0_reg_326 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_13_fu_440_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_5_fu_634_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_3_fu_644_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal and_ln924_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_337_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_11_fu_358_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal mul_ln203_fu_372_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln203_10_fu_390_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln203_fu_394_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_12_fu_399_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_12_fu_431_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_6_fu_435_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_4_fu_466_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_1_fu_474_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_462_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1116_fu_478_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_446_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1117_fu_498_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_2_fu_520_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_524_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_fu_529_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_533_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_17_fu_541_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_504_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_1_fu_555_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1117_1_fu_561_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1117_fu_565_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_578_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl1_cast_fu_570_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1117_2_fu_586_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_3_fu_608_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1116_1_fu_616_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_24_cast_fu_621_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1116_2_fu_629_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_4_fu_612_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1117_1_fu_639_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal r_V_fu_1030_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal lhs_V_fu_660_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_657_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_fu_668_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_fu_672_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_fu_676_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1265_fu_692_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_715_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_727_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_25_fu_737_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_745_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_fu_769_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_785_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_789_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_795_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln897_fu_799_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_21_fu_805_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln897_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_759_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln899_fu_837_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_22_fu_843_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_851_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_857_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_884_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_887_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_892_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_902_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_881_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_907_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_898_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_911_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_924_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_917_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_927_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_933_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_16_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_963_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_955_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_968_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_943_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_3_fu_974_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_26_fu_981_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln5_fu_998_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1117_fu_498_p00 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln203_fu_372_p10 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_condition_248 : BOOLEAN;
    signal ap_condition_254 : BOOLEAN;
    signal ap_condition_258 : BOOLEAN;
    signal ap_condition_262 : BOOLEAN;

    component cnn_dcmp_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_mul_mul_10s_1hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_2_conv_2_biag8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    conv_2_weights_V_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 10,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_address0,
        ce0 => conv_2_weights_V_ce0,
        q0 => conv_2_weights_V_q0);

    conv_2_bias_V_U : component conv_2_conv_2_biag8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_V_address0,
        ce0 => conv_2_bias_V_ce0,
        q0 => conv_2_bias_V_q0);

    cnn_dcmp_64ns_64ndEe_U11 : component cnn_dcmp_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_337_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_337_p2);

    cnn_mul_mul_10s_1hbi_U12 : component cnn_mul_mul_10s_1hbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        dout_WIDTH => 25)
    port map (
        din0 => conv_2_weights_V_q0,
        din1 => input_V_q0,
        dout => r_V_fu_1030_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_411_p2 = ap_const_lv1_1))) then 
                c_0_reg_245 <= c_reg_1057;
            elsif (((icmp_ln8_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                c_0_reg_245 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                ch_0_reg_326 <= ch_reg_1139;
            elsif (((icmp_ln21_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                ch_0_reg_326 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_257_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                f_0_reg_257 <= f_reg_1070;
            elsif (((icmp_ln11_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                f_0_reg_257 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_19_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                p_Val2_19_reg_314 <= ret_V_fu_676_p2(21 downto 8);
            elsif (((icmp_ln21_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                p_Val2_19_reg_314 <= w_sum_1_reg_291;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_508_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_268 <= w_sum_1_reg_291;
            elsif (((icmp_ln14_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                p_Val2_s_reg_268 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    r_0_reg_233_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                r_0_reg_233 <= r_reg_1040;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                r_0_reg_233 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    w_sum_1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_596_p2 = ap_const_lv1_1))) then 
                w_sum_1_reg_291 <= p_Val2_19_reg_314;
            elsif (((icmp_ln18_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                w_sum_1_reg_291 <= p_Val2_s_reg_268;
            end if; 
        end if;
    end process;

    wc_0_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_596_p2 = ap_const_lv1_1))) then 
                wc_0_reg_303 <= wc_reg_1121;
            elsif (((icmp_ln18_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                wc_0_reg_303 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_508_p2 = ap_const_lv1_1))) then 
                wr_0_reg_280 <= wr_reg_1098;
            elsif (((icmp_ln14_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                wr_0_reg_280 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_1057 <= c_fu_384_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ch_reg_1139 <= ch_fu_602_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln14_fu_411_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                conv_out_0_V_addr_reg_1085 <= zext_ln203_13_fu_440_p1(11 - 1 downto 0);
                conv_out_1_V_addr_reg_1090 <= zext_ln203_13_fu_440_p1(10 - 1 downto 0);
                    zext_ln203_11_reg_1080(4 downto 0) <= zext_ln203_11_fu_427_p1(4 downto 0);
                    zext_ln26_reg_1075(4 downto 0) <= zext_ln26_fu_423_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_1070 <= f_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                icmp_ln885_reg_1168 <= icmp_ln885_fu_702_p2;
                tmp_V_4_reg_1159 <= tmp_V_4_fu_696_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                icmp_ln908_reg_1194 <= icmp_ln908_fu_871_p2;
                    or_ln_reg_1189(0) <= or_ln_fu_863_p3(0);
                p_Result_24_reg_1172 <= tmp_V_4_reg_1159(13 downto 13);
                sub_ln894_reg_1183 <= sub_ln894_fu_753_p2;
                tmp_V_5_reg_1177 <= tmp_V_5_fu_720_p3;
                trunc_ln893_reg_1199 <= trunc_ln893_fu_877_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                icmp_ln924_1_reg_1214 <= icmp_ln924_1_fu_1014_p2;
                icmp_ln924_reg_1209 <= icmp_ln924_fu_1008_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln18_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                mul_ln1117_reg_1108 <= mul_ln1117_fu_498_p2;
                sext_ln1116_reg_1103 <= sext_ln1116_fu_484_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln8_fu_342_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                mul_ln203_reg_1049 <= mul_ln203_fu_372_p2;
                trunc_ln203_reg_1045 <= trunc_ln203_fu_354_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                r_reg_1040 <= r_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln21_fu_508_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    sub_ln1116_1_reg_1126(6 downto 1) <= sub_ln1116_1_fu_549_p2(6 downto 1);
                    sub_ln1117_reg_1131(10 downto 1) <= sub_ln1117_fu_590_p2(10 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_1121 <= wc_fu_514_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_1098 <= wr_fu_456_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln11_fu_378_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln14_reg_1062(10 downto 4) <= zext_ln14_fu_407_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_1062(3 downto 0) <= "0000";
    zext_ln14_reg_1062(11) <= '0';
    zext_ln26_reg_1075(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln203_11_reg_1080(10 downto 5) <= "000000";
    sub_ln1116_1_reg_1126(0) <= '0';
    sub_ln1117_reg_1131(0) <= '0';
    or_ln_reg_1189(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_342_p2, ap_CS_fsm_state3, icmp_ln11_fu_378_p2, ap_CS_fsm_state4, icmp_ln14_fu_411_p2, ap_CS_fsm_state5, icmp_ln18_fu_450_p2, ap_CS_fsm_state6, icmp_ln21_fu_508_p2, ap_CS_fsm_state7, icmp_ln24_fu_596_p2, ap_CS_fsm_state9, icmp_ln885_fu_702_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln8_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln11_fu_378_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_411_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln18_fu_450_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_508_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln24_fu_596_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln885_fu_702_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    a_fu_817_p2 <= (icmp_ln897_fu_779_p2 and icmp_ln897_1_fu_811_p2);
    add_ln1116_1_fu_616_p2 <= std_logic_vector(unsigned(zext_ln1116_3_fu_608_p1) + unsigned(sub_ln1116_1_reg_1126));
    add_ln1116_2_fu_629_p2 <= std_logic_vector(unsigned(zext_ln203_11_reg_1080) + unsigned(tmp_24_cast_fu_621_p3));
    add_ln1116_fu_524_p2 <= std_logic_vector(unsigned(zext_ln1116_2_fu_520_p1) + unsigned(sext_ln1116_reg_1103));
    add_ln1117_1_fu_639_p2 <= std_logic_vector(unsigned(zext_ln1116_4_fu_612_p1) + unsigned(sub_ln1117_reg_1131));
    add_ln1117_fu_565_p2 <= std_logic_vector(unsigned(zext_ln1117_1_fu_561_p1) + unsigned(mul_ln1117_reg_1108));
    add_ln203_6_fu_435_p2 <= std_logic_vector(unsigned(zext_ln14_reg_1062) + unsigned(zext_ln203_12_fu_431_p1));
    add_ln203_fu_394_p2 <= std_logic_vector(unsigned(mul_ln203_reg_1049) + unsigned(zext_ln203_10_fu_390_p1));
    add_ln26_1_fu_555_p2 <= std_logic_vector(unsigned(c_0_reg_245) + unsigned(zext_ln21_fu_504_p1));
    add_ln26_fu_488_p2 <= std_logic_vector(unsigned(zext_ln18_fu_446_p1) + unsigned(r_0_reg_233));
    add_ln899_fu_837_p2 <= std_logic_vector(signed(ap_const_lv14_3FCB) + signed(trunc_ln894_fu_759_p1));
    add_ln908_fu_887_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1183));
    add_ln915_fu_968_p2 <= std_logic_vector(unsigned(sub_ln915_fu_963_p2) + unsigned(select_ln915_fu_955_p3));
    and_ln899_fu_851_p2 <= (xor_ln899_fu_831_p2 and p_Result_22_fu_843_p3);
    and_ln924_fu_1024_p2 <= (or_ln924_fu_1020_p2 and grp_fu_337_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_248_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, and_ln924_fu_1024_p2)
    begin
                ap_condition_248 <= ((icmp_ln885_reg_1168 = ap_const_lv1_0) and (trunc_ln203_reg_1045 = ap_const_lv1_0) and (ap_const_lv1_1 = and_ln924_fu_1024_p2));
    end process;


    ap_condition_254_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, and_ln924_fu_1024_p2)
    begin
                ap_condition_254 <= (((trunc_ln203_reg_1045 = ap_const_lv1_0) and (icmp_ln885_reg_1168 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln924_fu_1024_p2) and (trunc_ln203_reg_1045 = ap_const_lv1_0)));
    end process;


    ap_condition_258_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, and_ln924_fu_1024_p2)
    begin
                ap_condition_258 <= ((icmp_ln885_reg_1168 = ap_const_lv1_0) and (trunc_ln203_reg_1045 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln924_fu_1024_p2));
    end process;


    ap_condition_262_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, and_ln924_fu_1024_p2)
    begin
                ap_condition_262 <= (((trunc_ln203_reg_1045 = ap_const_lv1_1) and (icmp_ln885_reg_1168 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln924_fu_1024_p2) and (trunc_ln203_reg_1045 = ap_const_lv1_1)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_342_p2)
    begin
        if ((((icmp_ln8_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_342_p2)
    begin
        if (((icmp_ln8_fu_342_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_384_p2 <= std_logic_vector(unsigned(c_0_reg_245) + unsigned(ap_const_lv4_1));
    ch_fu_602_p2 <= std_logic_vector(unsigned(ch_0_reg_326) + unsigned(ap_const_lv3_1));
    conv_2_bias_V_address0 <= zext_ln26_reg_1075(4 - 1 downto 0);

    conv_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_address0 <= zext_ln1116_5_fu_634_p1(10 - 1 downto 0);

    conv_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            conv_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_0_V_address0 <= conv_out_0_V_addr_reg_1085;

    conv_out_0_V_ce0_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, ap_CS_fsm_state12, and_ln924_fu_1024_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (((trunc_ln203_reg_1045 = ap_const_lv1_0) and (icmp_ln885_reg_1168 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln924_fu_1024_p2) and (trunc_ln203_reg_1045 = ap_const_lv1_0)))) or ((icmp_ln885_reg_1168 = ap_const_lv1_0) and (trunc_ln203_reg_1045 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln924_fu_1024_p2)))) then 
            conv_out_0_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_0_V_d0_assign_proc : process(tmp_V_4_reg_1159, ap_CS_fsm_state12, ap_condition_248, ap_condition_254)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((ap_const_boolean_1 = ap_condition_254)) then 
                conv_out_0_V_d0 <= ap_const_lv14_0;
            elsif ((ap_const_boolean_1 = ap_condition_248)) then 
                conv_out_0_V_d0 <= tmp_V_4_reg_1159;
            else 
                conv_out_0_V_d0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            conv_out_0_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_0_V_we0_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, ap_CS_fsm_state12, and_ln924_fu_1024_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (((trunc_ln203_reg_1045 = ap_const_lv1_0) and (icmp_ln885_reg_1168 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln924_fu_1024_p2) and (trunc_ln203_reg_1045 = ap_const_lv1_0)))) or ((icmp_ln885_reg_1168 = ap_const_lv1_0) and (trunc_ln203_reg_1045 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln924_fu_1024_p2)))) then 
            conv_out_0_V_we0 <= ap_const_logic_1;
        else 
            conv_out_0_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_1_V_address0 <= conv_out_1_V_addr_reg_1090;

    conv_out_1_V_ce0_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, ap_CS_fsm_state12, and_ln924_fu_1024_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (((trunc_ln203_reg_1045 = ap_const_lv1_1) and (icmp_ln885_reg_1168 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln924_fu_1024_p2) and (trunc_ln203_reg_1045 = ap_const_lv1_1)))) or ((icmp_ln885_reg_1168 = ap_const_lv1_0) and (trunc_ln203_reg_1045 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln924_fu_1024_p2)))) then 
            conv_out_1_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_1_V_d0_assign_proc : process(tmp_V_4_reg_1159, ap_CS_fsm_state12, ap_condition_258, ap_condition_262)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
            if ((ap_const_boolean_1 = ap_condition_262)) then 
                conv_out_1_V_d0 <= ap_const_lv14_0;
            elsif ((ap_const_boolean_1 = ap_condition_258)) then 
                conv_out_1_V_d0 <= tmp_V_4_reg_1159;
            else 
                conv_out_1_V_d0 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            conv_out_1_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    conv_out_1_V_we0_assign_proc : process(trunc_ln203_reg_1045, icmp_ln885_reg_1168, ap_CS_fsm_state12, and_ln924_fu_1024_p2)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state12) and (((trunc_ln203_reg_1045 = ap_const_lv1_1) and (icmp_ln885_reg_1168 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln924_fu_1024_p2) and (trunc_ln203_reg_1045 = ap_const_lv1_1)))) or ((icmp_ln885_reg_1168 = ap_const_lv1_0) and (trunc_ln203_reg_1045 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_1 = and_ln924_fu_1024_p2)))) then 
            conv_out_1_V_we0 <= ap_const_logic_1;
        else 
            conv_out_1_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_417_p2 <= std_logic_vector(unsigned(f_0_reg_257) + unsigned(ap_const_lv5_1));
    grp_fu_337_p0 <= p_Result_26_fu_981_p5;
    icmp_ln11_fu_378_p2 <= "1" when (c_0_reg_245 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_411_p2 <= "1" when (f_0_reg_257 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_450_p2 <= "1" when (wr_0_reg_280 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_508_p2 <= "1" when (wc_0_reg_303 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_596_p2 <= "1" when (ch_0_reg_326 = ap_const_lv3_6) else "0";
    icmp_ln885_fu_702_p2 <= "1" when (tmp_V_4_fu_696_p2 = ap_const_lv14_0) else "0";
    icmp_ln897_1_fu_811_p2 <= "0" when (p_Result_21_fu_805_p2 = ap_const_lv14_0) else "1";
    icmp_ln897_fu_779_p2 <= "1" when (signed(tmp_14_fu_769_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_342_p2 <= "1" when (r_0_reg_233 = ap_const_lv4_B) else "0";
    icmp_ln908_fu_871_p2 <= "1" when (signed(lsb_index_fu_763_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_1014_p2 <= "1" when (trunc_ln5_fu_998_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_1008_p2 <= "0" when (add_ln915_fu_968_p2 = ap_const_lv11_7FF) else "1";
    input_V_address0 <= zext_ln1117_3_fu_644_p1(10 - 1 downto 0);

    input_V_ce0_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            input_V_ce0 <= ap_const_logic_1;
        else 
            input_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_745_p3_proc : process(p_Result_25_fu_737_p3)
    begin
        l_fu_745_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_737_p3(i) = '1' then
                l_fu_745_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_660_p3 <= (p_Val2_19_reg_314 & ap_const_lv8_0);
    lsb_index_fu_763_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_753_p2));
    lshr_ln897_fu_799_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln897_fu_795_p1(14-1 downto 0)))));
    lshr_ln908_fu_892_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_884_p1),to_integer(unsigned('0' & add_ln908_fu_887_p2(31-1 downto 0)))));
    m_1_fu_917_p3 <= 
        zext_ln908_fu_898_p1 when (icmp_ln908_reg_1194(0) = '1') else 
        shl_ln908_fu_911_p2;
    m_2_fu_927_p2 <= std_logic_vector(unsigned(zext_ln911_fu_924_p1) + unsigned(m_1_fu_917_p3));
    m_5_fu_933_p4 <= m_2_fu_927_p2(63 downto 1);
    m_6_fu_943_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_933_p4),64));
    m_fu_881_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1177),64));
    mul_ln1117_fu_498_p0 <= mul_ln1117_fu_498_p00(4 - 1 downto 0);
    mul_ln1117_fu_498_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_fu_488_p2),8));
    mul_ln1117_fu_498_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1117_fu_498_p0) * unsigned(ap_const_lv8_D), 8));
    mul_ln203_fu_372_p1 <= mul_ln203_fu_372_p10(3 - 1 downto 0);
    mul_ln203_fu_372_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_358_p4),7));
    mul_ln203_fu_372_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_const_lv7_B) * unsigned(mul_ln203_fu_372_p1), 7));
    or_ln899_fu_857_p2 <= (and_ln899_fu_851_p2 or a_fu_817_p2);
    or_ln924_fu_1020_p2 <= (icmp_ln924_reg_1209 or icmp_ln924_1_reg_1214);
    or_ln_fu_863_p3 <= (ap_const_lv31_0 & or_ln899_fu_857_p2);
    p_Result_21_fu_805_p2 <= (tmp_V_5_fu_720_p3 and lshr_ln897_fu_799_p2);
    p_Result_22_fu_843_p3 <= tmp_V_5_fu_720_p3(to_integer(unsigned(add_ln899_fu_837_p2)) downto to_integer(unsigned(add_ln899_fu_837_p2))) when (to_integer(unsigned(add_ln899_fu_837_p2))>= 0 and to_integer(unsigned(add_ln899_fu_837_p2))<=13) else "-";
    p_Result_24_fu_708_p3 <= tmp_V_4_reg_1159(13 downto 13);
    p_Result_25_fu_737_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_727_p4);
    p_Result_26_fu_981_p5 <= (tmp_3_fu_974_p3 & m_6_fu_943_p1(51 downto 0));
    
    p_Result_s_fu_727_p4_proc : process(tmp_V_5_fu_720_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_727_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_720_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_727_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_727_p4_i) := tmp_V_5_fu_720_p3(14-1-p_Result_s_fu_727_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_727_p4 <= resvalue(14-1 downto 0);
    end process;

    p_shl1_cast_fu_570_p3 <= (add_ln1117_fu_565_p2 & ap_const_lv3_0);
    p_shl_fu_533_p3 <= (trunc_ln1116_fu_529_p1 & ap_const_lv3_0);
    r_fu_348_p2 <= std_logic_vector(unsigned(r_0_reg_233) + unsigned(ap_const_lv4_1));
    ret_V_fu_676_p2 <= std_logic_vector(unsigned(zext_ln728_fu_668_p1) + unsigned(zext_ln703_fu_672_p1));
    select_ln915_fu_955_p3 <= 
        ap_const_lv11_3FF when (tmp_16_fu_947_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1116_fu_484_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_478_p2),6));

        sext_ln1118_1_fu_657_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_1030_p2),28));

        sext_ln1265_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_2_bias_V_q0),14));

    shl_ln908_fu_911_p2 <= std_logic_vector(shift_left(unsigned(m_fu_881_p1),to_integer(unsigned('0' & zext_ln908_1_fu_907_p1(31-1 downto 0)))));
    sub_ln1116_1_fu_549_p2 <= std_logic_vector(unsigned(p_shl_fu_533_p3) - unsigned(tmp_17_fu_541_p3));
    sub_ln1116_fu_478_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_474_p1) - unsigned(zext_ln1116_fu_462_p1));
    sub_ln1117_fu_590_p2 <= std_logic_vector(unsigned(p_shl1_cast_fu_570_p3) - unsigned(zext_ln1117_2_fu_586_p1));
    sub_ln894_fu_753_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_745_p3));
    sub_ln897_fu_789_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(trunc_ln897_fu_785_p1));
    sub_ln908_fu_902_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1183));
    sub_ln915_fu_963_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_1199));
    tmp_11_fu_358_p4 <= r_0_reg_233(3 downto 1);
    tmp_12_fu_399_p3 <= (add_ln203_fu_394_p2 & ap_const_lv4_0);
    tmp_14_fu_769_p4 <= lsb_index_fu_763_p2(31 downto 1);
    tmp_15_fu_823_p3 <= lsb_index_fu_763_p2(31 downto 31);
    tmp_16_fu_947_p3 <= m_2_fu_927_p2(54 downto 54);
    tmp_17_fu_541_p3 <= (add_ln1116_fu_524_p2 & ap_const_lv1_0);
    tmp_18_fu_578_p3 <= (add_ln1117_fu_565_p2 & ap_const_lv1_0);
    tmp_24_cast_fu_621_p3 <= (add_ln1116_1_fu_616_p2 & ap_const_lv4_0);
    tmp_3_fu_974_p3 <= (p_Result_24_reg_1172 & add_ln915_fu_968_p2);
    tmp_4_fu_466_p3 <= (wr_0_reg_280 & ap_const_lv2_0);
    tmp_V_4_fu_696_p2 <= std_logic_vector(signed(sext_ln1265_fu_692_p1) + signed(p_Val2_s_reg_268));
    tmp_V_5_fu_720_p3 <= 
        tmp_V_fu_715_p2 when (p_Result_24_fu_708_p3(0) = '1') else 
        tmp_V_4_reg_1159;
    tmp_V_fu_715_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_4_reg_1159));
    trunc_ln1116_fu_529_p1 <= add_ln1116_fu_524_p2(4 - 1 downto 0);
    trunc_ln203_fu_354_p1 <= r_0_reg_233(1 - 1 downto 0);
    trunc_ln5_fu_998_p4 <= m_2_fu_927_p2(52 downto 1);
    trunc_ln893_fu_877_p1 <= l_fu_745_p3(11 - 1 downto 0);
    trunc_ln894_fu_759_p1 <= sub_ln894_fu_753_p2(14 - 1 downto 0);
    trunc_ln897_fu_785_p1 <= sub_ln894_fu_753_p2(4 - 1 downto 0);
    wc_fu_514_p2 <= std_logic_vector(unsigned(wc_0_reg_303) + unsigned(ap_const_lv2_1));
    wr_fu_456_p2 <= std_logic_vector(unsigned(wr_0_reg_280) + unsigned(ap_const_lv2_1));
    xor_ln899_fu_831_p2 <= (tmp_15_fu_823_p3 xor ap_const_lv1_1);
    zext_ln1116_1_fu_474_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_466_p3),5));
    zext_ln1116_2_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_303),6));
    zext_ln1116_3_fu_608_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_326),7));
    zext_ln1116_4_fu_612_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_326),11));
    zext_ln1116_5_fu_634_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_2_fu_629_p2),64));
    zext_ln1116_fu_462_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_280),5));
    zext_ln1117_1_fu_561_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_555_p2),8));
    zext_ln1117_2_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_18_fu_578_p3),11));
    zext_ln1117_3_fu_644_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_fu_639_p2),64));
    zext_ln14_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_399_p3),12));
    zext_ln18_fu_446_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_280),4));
    zext_ln203_10_fu_390_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_245),7));
    zext_ln203_11_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_257),11));
    zext_ln203_12_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_257),12));
    zext_ln203_13_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_6_fu_435_p2),64));
    zext_ln21_fu_504_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_303),4));
    zext_ln26_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_257),64));
    zext_ln703_fu_672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_1_fu_657_p1),29));
    zext_ln728_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_660_p3),29));
    zext_ln897_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_789_p2),14));
    zext_ln907_1_fu_884_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1177),32));
    zext_ln908_1_fu_907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_902_p2),64));
    zext_ln908_fu_898_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_892_p2),64));
    zext_ln911_fu_924_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1189),64));
end behav;
