// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_0_V_address0,
        conv_out_0_V_ce0,
        conv_out_0_V_q0,
        conv_out_0_V_address1,
        conv_out_0_V_ce1,
        conv_out_0_V_q1,
        conv_out_1_V_address0,
        conv_out_1_V_ce0,
        conv_out_1_V_q0,
        conv_out_1_V_address1,
        conv_out_1_V_ce1,
        conv_out_1_V_q1,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_we0,
        max_pool_out_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] conv_out_0_V_address0;
output   conv_out_0_V_ce0;
input  [13:0] conv_out_0_V_q0;
output  [10:0] conv_out_0_V_address1;
output   conv_out_0_V_ce1;
input  [13:0] conv_out_0_V_q1;
output  [9:0] conv_out_1_V_address0;
output   conv_out_1_V_ce0;
input  [13:0] conv_out_1_V_q0;
output  [9:0] conv_out_1_V_address1;
output   conv_out_1_V_ce1;
input  [13:0] conv_out_1_V_q1;
output  [8:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
output   max_pool_out_V_we0;
output  [13:0] max_pool_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_0_V_ce0;
reg conv_out_0_V_ce1;
reg conv_out_1_V_ce0;
reg conv_out_1_V_ce1;
reg max_pool_out_V_ce0;
reg max_pool_out_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [8:0] indvar_flatten13_reg_143;
reg   [4:0] f_0_reg_154;
reg   [5:0] indvar_flatten_reg_165;
reg   [2:0] r_0_reg_176;
reg   [2:0] c_0_reg_187;
wire   [0:0] icmp_ln10_fu_198_p2;
reg   [0:0] icmp_ln10_reg_512;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln10_reg_512_pp0_iter1_reg;
wire   [8:0] add_ln10_fu_204_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [4:0] select_ln29_5_fu_230_p3;
reg   [4:0] select_ln29_5_reg_521;
wire   [2:0] select_ln36_fu_272_p3;
reg   [2:0] select_ln36_reg_527;
wire   [2:0] select_ln36_1_fu_280_p3;
reg   [2:0] select_ln36_1_reg_532;
wire   [63:0] zext_ln1494_3_fu_334_p1;
reg   [63:0] zext_ln1494_3_reg_539;
wire   [11:0] add_ln1494_3_fu_367_p2;
reg   [11:0] add_ln1494_3_reg_549;
wire   [2:0] c_fu_373_p2;
wire   [5:0] select_ln13_fu_385_p3;
wire   [12:0] select_ln29_fu_426_p3;
reg   [12:0] select_ln29_reg_569;
wire   [9:0] add_ln203_2_fu_456_p2;
reg   [9:0] add_ln203_2_reg_584;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg   [4:0] ap_phi_mux_f_0_phi_fu_158_p4;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_r_0_phi_fu_180_p4;
wire   [63:0] zext_ln1494_6_fu_434_p1;
wire   [63:0] zext_ln203_3_fu_508_p1;
wire   [0:0] icmp_ln13_fu_216_p2;
wire   [4:0] f_fu_210_p2;
wire   [0:0] icmp_ln16_fu_248_p2;
wire   [0:0] xor_ln29_fu_242_p2;
wire   [2:0] select_ln29_4_fu_222_p3;
wire   [0:0] and_ln29_fu_254_p2;
wire   [0:0] or_ln36_fu_266_p2;
wire   [2:0] r_fu_260_p2;
wire   [2:0] mul_ln1494_fu_292_p1;
wire   [3:0] shl_ln_fu_298_p3;
wire   [6:0] zext_ln1494_1_fu_306_p1;
wire   [6:0] mul_ln1494_fu_292_p2;
wire   [6:0] add_ln1494_fu_310_p2;
wire   [10:0] tmp_1_fu_316_p3;
wire   [11:0] zext_ln36_2_fu_238_p1;
wire   [11:0] zext_ln1494_2_fu_324_p1;
wire   [11:0] add_ln1494_1_fu_328_p2;
wire   [3:0] or_ln27_fu_339_p2;
wire   [6:0] zext_ln1494_4_fu_345_p1;
wire   [6:0] add_ln1494_2_fu_349_p2;
wire   [10:0] tmp_3_fu_355_p3;
wire   [11:0] zext_ln1494_5_fu_363_p1;
wire   [5:0] add_ln13_fu_379_p2;
wire   [4:0] tmp_fu_399_p3;
wire   [5:0] zext_ln203_1_fu_406_p1;
wire   [5:0] zext_ln203_fu_396_p1;
wire   [0:0] icmp_ln1494_fu_420_p2;
wire   [12:0] trunc_ln1494_fu_416_p1;
wire   [5:0] zext_ln203_2_fu_439_p1;
wire   [5:0] add_ln203_fu_410_p2;
wire   [5:0] add_ln203_1_fu_442_p2;
wire   [9:0] zext_ln36_fu_393_p1;
wire   [9:0] tmp_7_cast_fu_448_p3;
wire   [13:0] zext_ln29_fu_462_p1;
wire   [0:0] icmp_ln1494_1_fu_465_p2;
wire   [13:0] select_ln29_1_fu_471_p3;
wire   [0:0] icmp_ln1494_2_fu_479_p2;
wire   [13:0] select_ln29_2_fu_485_p3;
wire   [0:0] icmp_ln1494_3_fu_493_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [6:0] mul_ln1494_fu_292_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_198_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        c_0_reg_187 <= c_fu_373_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_187 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_154 <= select_ln29_5_reg_521;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_154 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_198_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten13_reg_143 <= add_ln10_fu_204_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten13_reg_143 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_198_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_165 <= select_ln13_fu_385_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_165 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        r_0_reg_176 <= select_ln36_1_reg_532;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_176 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_198_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln1494_3_reg_549 <= add_ln1494_3_fu_367_p2;
        select_ln36_reg_527 <= select_ln36_fu_272_p3;
        zext_ln1494_3_reg_539[11 : 0] <= zext_ln1494_3_fu_334_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln203_2_reg_584 <= add_ln203_2_fu_456_p2;
        select_ln29_reg_569 <= select_ln29_fu_426_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_512 <= icmp_ln10_fu_198_p2;
        icmp_ln10_reg_512_pp0_iter1_reg <= icmp_ln10_reg_512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln10_fu_198_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln29_5_reg_521 <= select_ln29_5_fu_230_p3;
        select_ln36_1_reg_532 <= select_ln36_1_fu_280_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_198_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_158_p4 = select_ln29_5_reg_521;
    end else begin
        ap_phi_mux_f_0_phi_fu_158_p4 = f_0_reg_154;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_512 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_180_p4 = select_ln36_1_reg_532;
    end else begin
        ap_phi_mux_r_0_phi_fu_180_p4 = r_0_reg_176;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        conv_out_0_V_ce0 = 1'b1;
    end else begin
        conv_out_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_0_V_ce1 = 1'b1;
    end else begin
        conv_out_0_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_1_V_ce0 = 1'b1;
    end else begin
        conv_out_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_1_V_ce1 = 1'b1;
    end else begin
        conv_out_1_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_512_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_out_V_we0 = 1'b1;
    end else begin
        max_pool_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_198_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_204_p2 = (indvar_flatten13_reg_143 + 9'd1);

assign add_ln13_fu_379_p2 = (6'd1 + indvar_flatten_reg_165);

assign add_ln1494_1_fu_328_p2 = (zext_ln36_2_fu_238_p1 + zext_ln1494_2_fu_324_p1);

assign add_ln1494_2_fu_349_p2 = (zext_ln1494_4_fu_345_p1 + mul_ln1494_fu_292_p2);

assign add_ln1494_3_fu_367_p2 = (zext_ln36_2_fu_238_p1 + zext_ln1494_5_fu_363_p1);

assign add_ln1494_fu_310_p2 = (zext_ln1494_1_fu_306_p1 + mul_ln1494_fu_292_p2);

assign add_ln203_1_fu_442_p2 = (zext_ln203_2_fu_439_p1 + add_ln203_fu_410_p2);

assign add_ln203_2_fu_456_p2 = (zext_ln36_fu_393_p1 + tmp_7_cast_fu_448_p3);

assign add_ln203_fu_410_p2 = (zext_ln203_1_fu_406_p1 + zext_ln203_fu_396_p1);

assign and_ln29_fu_254_p2 = (xor_ln29_fu_242_p2 & icmp_ln16_fu_248_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_373_p2 = (3'd1 + select_ln36_fu_272_p3);

assign conv_out_0_V_address0 = zext_ln1494_3_fu_334_p1;

assign conv_out_0_V_address1 = zext_ln1494_6_fu_434_p1;

assign conv_out_1_V_address0 = zext_ln1494_3_reg_539;

assign conv_out_1_V_address1 = zext_ln1494_6_fu_434_p1;

assign f_fu_210_p2 = (5'd1 + ap_phi_mux_f_0_phi_fu_158_p4);

assign icmp_ln10_fu_198_p2 = ((indvar_flatten13_reg_143 == 9'd400) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_216_p2 = ((indvar_flatten_reg_165 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_465_p2 = (($signed(conv_out_0_V_q1) > $signed(zext_ln29_fu_462_p1)) ? 1'b1 : 1'b0);

assign icmp_ln1494_2_fu_479_p2 = (($signed(conv_out_1_V_q0) > $signed(select_ln29_1_fu_471_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_3_fu_493_p2 = (($signed(conv_out_1_V_q1) > $signed(select_ln29_2_fu_485_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_420_p2 = (($signed(conv_out_0_V_q0) > $signed(14'd0)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_248_p2 = ((c_0_reg_187 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_V_address0 = zext_ln203_3_fu_508_p1;

assign max_pool_out_V_d0 = ((icmp_ln1494_3_fu_493_p2[0:0] === 1'b1) ? conv_out_1_V_q1 : select_ln29_2_fu_485_p3);

assign mul_ln1494_fu_292_p1 = mul_ln1494_fu_292_p10;

assign mul_ln1494_fu_292_p10 = select_ln36_1_fu_280_p3;

assign mul_ln1494_fu_292_p2 = (7'd11 * mul_ln1494_fu_292_p1);

assign or_ln27_fu_339_p2 = (shl_ln_fu_298_p3 | 4'd1);

assign or_ln36_fu_266_p2 = (icmp_ln13_fu_216_p2 | and_ln29_fu_254_p2);

assign r_fu_260_p2 = (3'd1 + select_ln29_4_fu_222_p3);

assign select_ln13_fu_385_p3 = ((icmp_ln13_fu_216_p2[0:0] === 1'b1) ? 6'd1 : add_ln13_fu_379_p2);

assign select_ln29_1_fu_471_p3 = ((icmp_ln1494_1_fu_465_p2[0:0] === 1'b1) ? conv_out_0_V_q1 : zext_ln29_fu_462_p1);

assign select_ln29_2_fu_485_p3 = ((icmp_ln1494_2_fu_479_p2[0:0] === 1'b1) ? conv_out_1_V_q0 : select_ln29_1_fu_471_p3);

assign select_ln29_4_fu_222_p3 = ((icmp_ln13_fu_216_p2[0:0] === 1'b1) ? 3'd0 : ap_phi_mux_r_0_phi_fu_180_p4);

assign select_ln29_5_fu_230_p3 = ((icmp_ln13_fu_216_p2[0:0] === 1'b1) ? f_fu_210_p2 : ap_phi_mux_f_0_phi_fu_158_p4);

assign select_ln29_fu_426_p3 = ((icmp_ln1494_fu_420_p2[0:0] === 1'b1) ? trunc_ln1494_fu_416_p1 : 13'd0);

assign select_ln36_1_fu_280_p3 = ((and_ln29_fu_254_p2[0:0] === 1'b1) ? r_fu_260_p2 : select_ln29_4_fu_222_p3);

assign select_ln36_fu_272_p3 = ((or_ln36_fu_266_p2[0:0] === 1'b1) ? 3'd0 : c_0_reg_187);

assign shl_ln_fu_298_p3 = {{select_ln36_fu_272_p3}, {1'd0}};

assign tmp_1_fu_316_p3 = {{add_ln1494_fu_310_p2}, {4'd0}};

assign tmp_3_fu_355_p3 = {{add_ln1494_2_fu_349_p2}, {4'd0}};

assign tmp_7_cast_fu_448_p3 = {{add_ln203_1_fu_442_p2}, {4'd0}};

assign tmp_fu_399_p3 = {{select_ln36_1_reg_532}, {2'd0}};

assign trunc_ln1494_fu_416_p1 = conv_out_0_V_q0[12:0];

assign xor_ln29_fu_242_p2 = (icmp_ln13_fu_216_p2 ^ 1'd1);

assign zext_ln1494_1_fu_306_p1 = shl_ln_fu_298_p3;

assign zext_ln1494_2_fu_324_p1 = tmp_1_fu_316_p3;

assign zext_ln1494_3_fu_334_p1 = add_ln1494_1_fu_328_p2;

assign zext_ln1494_4_fu_345_p1 = or_ln27_fu_339_p2;

assign zext_ln1494_5_fu_363_p1 = tmp_3_fu_355_p3;

assign zext_ln1494_6_fu_434_p1 = add_ln1494_3_reg_549;

assign zext_ln203_1_fu_406_p1 = tmp_fu_399_p3;

assign zext_ln203_2_fu_439_p1 = select_ln36_reg_527;

assign zext_ln203_3_fu_508_p1 = add_ln203_2_reg_584;

assign zext_ln203_fu_396_p1 = select_ln36_1_reg_532;

assign zext_ln29_fu_462_p1 = select_ln29_reg_569;

assign zext_ln36_2_fu_238_p1 = select_ln29_5_fu_230_p3;

assign zext_ln36_fu_393_p1 = select_ln29_5_reg_521;

always @ (posedge ap_clk) begin
    zext_ln1494_3_reg_539[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
end

endmodule //max_pool_2
