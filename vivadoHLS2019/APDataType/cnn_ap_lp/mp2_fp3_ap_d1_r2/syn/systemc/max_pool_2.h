// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _max_pool_2_HH_
#define _max_pool_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct max_pool_2 : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<11> > conv_out_0_V_address0;
    sc_out< sc_logic > conv_out_0_V_ce0;
    sc_in< sc_lv<14> > conv_out_0_V_q0;
    sc_out< sc_lv<11> > conv_out_0_V_address1;
    sc_out< sc_logic > conv_out_0_V_ce1;
    sc_in< sc_lv<14> > conv_out_0_V_q1;
    sc_out< sc_lv<10> > conv_out_1_V_address0;
    sc_out< sc_logic > conv_out_1_V_ce0;
    sc_in< sc_lv<14> > conv_out_1_V_q0;
    sc_out< sc_lv<10> > conv_out_1_V_address1;
    sc_out< sc_logic > conv_out_1_V_ce1;
    sc_in< sc_lv<14> > conv_out_1_V_q1;
    sc_out< sc_lv<9> > max_pool_out_V_address0;
    sc_out< sc_logic > max_pool_out_V_ce0;
    sc_out< sc_logic > max_pool_out_V_we0;
    sc_out< sc_lv<14> > max_pool_out_V_d0;


    // Module declarations
    max_pool_2(sc_module_name name);
    SC_HAS_PROCESS(max_pool_2);

    ~max_pool_2();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<9> > indvar_flatten13_reg_143;
    sc_signal< sc_lv<5> > f_0_reg_154;
    sc_signal< sc_lv<6> > indvar_flatten_reg_165;
    sc_signal< sc_lv<3> > r_0_reg_176;
    sc_signal< sc_lv<3> > c_0_reg_187;
    sc_signal< sc_lv<1> > icmp_ln10_fu_198_p2;
    sc_signal< sc_lv<1> > icmp_ln10_reg_512;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<1> > icmp_ln10_reg_512_pp0_iter1_reg;
    sc_signal< sc_lv<9> > add_ln10_fu_204_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<5> > select_ln29_5_fu_230_p3;
    sc_signal< sc_lv<5> > select_ln29_5_reg_521;
    sc_signal< sc_lv<3> > select_ln36_fu_272_p3;
    sc_signal< sc_lv<3> > select_ln36_reg_527;
    sc_signal< sc_lv<3> > select_ln36_1_fu_280_p3;
    sc_signal< sc_lv<3> > select_ln36_1_reg_532;
    sc_signal< sc_lv<64> > zext_ln1494_3_fu_334_p1;
    sc_signal< sc_lv<64> > zext_ln1494_3_reg_539;
    sc_signal< sc_lv<12> > add_ln1494_3_fu_367_p2;
    sc_signal< sc_lv<12> > add_ln1494_3_reg_549;
    sc_signal< sc_lv<3> > c_fu_373_p2;
    sc_signal< sc_lv<6> > select_ln13_fu_385_p3;
    sc_signal< sc_lv<13> > select_ln29_fu_426_p3;
    sc_signal< sc_lv<13> > select_ln29_reg_569;
    sc_signal< sc_lv<10> > add_ln203_2_fu_456_p2;
    sc_signal< sc_lv<10> > add_ln203_2_reg_584;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_lv<5> > ap_phi_mux_f_0_phi_fu_158_p4;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<3> > ap_phi_mux_r_0_phi_fu_180_p4;
    sc_signal< sc_lv<64> > zext_ln1494_6_fu_434_p1;
    sc_signal< sc_lv<64> > zext_ln203_3_fu_508_p1;
    sc_signal< sc_lv<1> > icmp_ln13_fu_216_p2;
    sc_signal< sc_lv<5> > f_fu_210_p2;
    sc_signal< sc_lv<1> > icmp_ln16_fu_248_p2;
    sc_signal< sc_lv<1> > xor_ln29_fu_242_p2;
    sc_signal< sc_lv<3> > select_ln29_4_fu_222_p3;
    sc_signal< sc_lv<1> > and_ln29_fu_254_p2;
    sc_signal< sc_lv<1> > or_ln36_fu_266_p2;
    sc_signal< sc_lv<3> > r_fu_260_p2;
    sc_signal< sc_lv<3> > mul_ln1494_fu_292_p1;
    sc_signal< sc_lv<4> > shl_ln_fu_298_p3;
    sc_signal< sc_lv<7> > zext_ln1494_1_fu_306_p1;
    sc_signal< sc_lv<7> > mul_ln1494_fu_292_p2;
    sc_signal< sc_lv<7> > add_ln1494_fu_310_p2;
    sc_signal< sc_lv<11> > tmp_1_fu_316_p3;
    sc_signal< sc_lv<12> > zext_ln36_2_fu_238_p1;
    sc_signal< sc_lv<12> > zext_ln1494_2_fu_324_p1;
    sc_signal< sc_lv<12> > add_ln1494_1_fu_328_p2;
    sc_signal< sc_lv<4> > or_ln27_fu_339_p2;
    sc_signal< sc_lv<7> > zext_ln1494_4_fu_345_p1;
    sc_signal< sc_lv<7> > add_ln1494_2_fu_349_p2;
    sc_signal< sc_lv<11> > tmp_3_fu_355_p3;
    sc_signal< sc_lv<12> > zext_ln1494_5_fu_363_p1;
    sc_signal< sc_lv<6> > add_ln13_fu_379_p2;
    sc_signal< sc_lv<5> > tmp_fu_399_p3;
    sc_signal< sc_lv<6> > zext_ln203_1_fu_406_p1;
    sc_signal< sc_lv<6> > zext_ln203_fu_396_p1;
    sc_signal< sc_lv<1> > icmp_ln1494_fu_420_p2;
    sc_signal< sc_lv<13> > trunc_ln1494_fu_416_p1;
    sc_signal< sc_lv<6> > zext_ln203_2_fu_439_p1;
    sc_signal< sc_lv<6> > add_ln203_fu_410_p2;
    sc_signal< sc_lv<6> > add_ln203_1_fu_442_p2;
    sc_signal< sc_lv<10> > zext_ln36_fu_393_p1;
    sc_signal< sc_lv<10> > tmp_7_cast_fu_448_p3;
    sc_signal< sc_lv<14> > zext_ln29_fu_462_p1;
    sc_signal< sc_lv<1> > icmp_ln1494_1_fu_465_p2;
    sc_signal< sc_lv<14> > select_ln29_1_fu_471_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_2_fu_479_p2;
    sc_signal< sc_lv<14> > select_ln29_2_fu_485_p3;
    sc_signal< sc_lv<1> > icmp_ln1494_3_fu_493_p2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< sc_lv<7> > mul_ln1494_fu_292_p10;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state5;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<9> ap_const_lv9_0;
    static const sc_lv<5> ap_const_lv5_0;
    static const sc_lv<6> ap_const_lv6_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<9> ap_const_lv9_190;
    static const sc_lv<9> ap_const_lv9_1;
    static const sc_lv<5> ap_const_lv5_1;
    static const sc_lv<6> ap_const_lv6_19;
    static const sc_lv<3> ap_const_lv3_5;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<7> ap_const_lv7_B;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<14> ap_const_lv14_0;
    static const sc_lv<13> ap_const_lv13_0;
    static const sc_lv<32> ap_const_lv32_2;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_add_ln10_fu_204_p2();
    void thread_add_ln13_fu_379_p2();
    void thread_add_ln1494_1_fu_328_p2();
    void thread_add_ln1494_2_fu_349_p2();
    void thread_add_ln1494_3_fu_367_p2();
    void thread_add_ln1494_fu_310_p2();
    void thread_add_ln203_1_fu_442_p2();
    void thread_add_ln203_2_fu_456_p2();
    void thread_add_ln203_fu_410_p2();
    void thread_and_ln29_fu_254_p2();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_block_state4_pp0_stage0_iter2();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_f_0_phi_fu_158_p4();
    void thread_ap_phi_mux_r_0_phi_fu_180_p4();
    void thread_ap_ready();
    void thread_c_fu_373_p2();
    void thread_conv_out_0_V_address0();
    void thread_conv_out_0_V_address1();
    void thread_conv_out_0_V_ce0();
    void thread_conv_out_0_V_ce1();
    void thread_conv_out_1_V_address0();
    void thread_conv_out_1_V_address1();
    void thread_conv_out_1_V_ce0();
    void thread_conv_out_1_V_ce1();
    void thread_f_fu_210_p2();
    void thread_icmp_ln10_fu_198_p2();
    void thread_icmp_ln13_fu_216_p2();
    void thread_icmp_ln1494_1_fu_465_p2();
    void thread_icmp_ln1494_2_fu_479_p2();
    void thread_icmp_ln1494_3_fu_493_p2();
    void thread_icmp_ln1494_fu_420_p2();
    void thread_icmp_ln16_fu_248_p2();
    void thread_max_pool_out_V_address0();
    void thread_max_pool_out_V_ce0();
    void thread_max_pool_out_V_d0();
    void thread_max_pool_out_V_we0();
    void thread_mul_ln1494_fu_292_p1();
    void thread_mul_ln1494_fu_292_p10();
    void thread_mul_ln1494_fu_292_p2();
    void thread_or_ln27_fu_339_p2();
    void thread_or_ln36_fu_266_p2();
    void thread_r_fu_260_p2();
    void thread_select_ln13_fu_385_p3();
    void thread_select_ln29_1_fu_471_p3();
    void thread_select_ln29_2_fu_485_p3();
    void thread_select_ln29_4_fu_222_p3();
    void thread_select_ln29_5_fu_230_p3();
    void thread_select_ln29_fu_426_p3();
    void thread_select_ln36_1_fu_280_p3();
    void thread_select_ln36_fu_272_p3();
    void thread_shl_ln_fu_298_p3();
    void thread_tmp_1_fu_316_p3();
    void thread_tmp_3_fu_355_p3();
    void thread_tmp_7_cast_fu_448_p3();
    void thread_tmp_fu_399_p3();
    void thread_trunc_ln1494_fu_416_p1();
    void thread_xor_ln29_fu_242_p2();
    void thread_zext_ln1494_1_fu_306_p1();
    void thread_zext_ln1494_2_fu_324_p1();
    void thread_zext_ln1494_3_fu_334_p1();
    void thread_zext_ln1494_4_fu_345_p1();
    void thread_zext_ln1494_5_fu_363_p1();
    void thread_zext_ln1494_6_fu_434_p1();
    void thread_zext_ln203_1_fu_406_p1();
    void thread_zext_ln203_2_fu_439_p1();
    void thread_zext_ln203_3_fu_508_p1();
    void thread_zext_ln203_fu_396_p1();
    void thread_zext_ln29_fu_462_p1();
    void thread_zext_ln36_2_fu_238_p1();
    void thread_zext_ln36_fu_393_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
