-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce1 : OUT STD_LOGIC;
    conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_we0 : OUT STD_LOGIC;
    max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv10_320 : STD_LOGIC_VECTOR (9 downto 0) := "1100100000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv7_32 : STD_LOGIC_VECTOR (6 downto 0) := "0110010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_B : STD_LOGIC_VECTOR (7 downto 0) := "00001011";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_120 : STD_LOGIC_VECTOR (9 downto 0);
    signal f_0_reg_131 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten22_reg_142 : STD_LOGIC_VECTOR (6 downto 0);
    signal r_0_reg_153 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_164 : STD_LOGIC_VECTOR (4 downto 0);
    signal c_0_reg_175 : STD_LOGIC_VECTOR (2 downto 0);
    signal max_0_reg_186 : STD_LOGIC_VECTOR (13 downto 0);
    signal mpr_0_reg_198 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln10_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_659 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln10_fu_229_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln29_3_fu_255_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_3_reg_668 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_2_fu_349_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln13_2_reg_674 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln16_1_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_reg_681 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_4_fu_455_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln16_4_reg_686 : STD_LOGIC_VECTOR (2 downto 0);
    signal mpr_fu_533_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_702 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_5_fu_545_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_5_fu_559_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln29_1_fu_617_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_f_0_phi_fu_135_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_157_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_c_0_phi_fu_179_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_202_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1494_1_fu_503_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_2_fu_528_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_3_fu_654_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln20_1_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln1_fu_209_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln13_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_235_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln_fu_267_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln20_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_2_fu_247_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_319_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_313_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln26_mid1_fu_333_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln29_4_fu_275_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln27_fu_217_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln13_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_325_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln13_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_391_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln27_mid1_fu_417_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_3_fu_357_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_2_fu_425_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln27_1_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_4_fu_365_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_3_fu_443_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_1_fu_409_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln13_1_fu_341_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln20_fu_463_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_467_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1494_fu_477_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln16_fu_433_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1494_fu_477_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_fu_483_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln26_1_fu_263_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_cast_fu_489_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_1_fu_497_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln16_1_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1494_2_fu_508_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_cast_fu_514_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln1494_3_fu_522_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln16_fu_539_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln13_1_fu_553_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_fu_573_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln203_1_fu_580_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_fu_570_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln16_fu_590_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_fu_597_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_603_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_1_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_584_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln203_2_fu_631_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln203_1_fu_634_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_cast_fu_640_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln26_fu_567_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln203_2_fu_648_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1494_fu_477_p00 : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                c_0_reg_175 <= select_ln16_4_reg_686;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_175 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_131_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                f_0_reg_131 <= select_ln29_3_reg_668;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_131 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten22_reg_142_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_223_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten22_reg_142 <= select_ln13_5_fu_559_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_reg_142 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_223_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten59_reg_120 <= add_ln10_fu_229_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_120 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_223_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_164 <= select_ln16_5_fu_545_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_164 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    max_0_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                max_0_reg_186 <= select_ln29_1_fu_617_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_186 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                mpr_0_reg_198 <= mpr_reg_702;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_198 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_153_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                r_0_reg_153 <= select_ln13_2_reg_674;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_153 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_659 <= icmp_ln10_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_223_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mpr_reg_702 <= mpr_fu_533_p2;
                select_ln13_2_reg_674 <= select_ln13_2_fu_349_p3;
                select_ln16_4_reg_686 <= select_ln16_4_fu_455_p3;
                select_ln29_3_reg_668 <= select_ln29_3_fu_255_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln10_fu_223_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                or_ln16_1_reg_681 <= or_ln16_1_fu_403_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_223_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln10_fu_223_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln10_fu_223_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_229_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_120) + unsigned(ap_const_lv10_1));
    add_ln13_1_fu_553_p2 <= std_logic_vector(unsigned(indvar_flatten22_reg_142) + unsigned(ap_const_lv7_1));
    add_ln1494_1_fu_497_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_263_p1) + unsigned(tmp_2_cast_fu_489_p3));
    add_ln1494_2_fu_508_p2 <= std_logic_vector(unsigned(zext_ln16_1_fu_451_p1) + unsigned(mul_ln1494_fu_477_p2));
    add_ln1494_3_fu_522_p2 <= std_logic_vector(unsigned(zext_ln26_1_fu_263_p1) + unsigned(tmp_5_cast_fu_514_p3));
    add_ln1494_fu_483_p2 <= std_logic_vector(unsigned(zext_ln16_fu_433_p1) + unsigned(mul_ln1494_fu_477_p2));
    add_ln16_fu_539_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_164) + unsigned(ap_const_lv5_1));
    add_ln203_1_fu_634_p2 <= std_logic_vector(unsigned(add_ln203_fu_584_p2) + unsigned(zext_ln203_2_fu_631_p1));
    add_ln203_2_fu_648_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_640_p3) + unsigned(zext_ln26_fu_567_p1));
    add_ln203_fu_584_p2 <= std_logic_vector(unsigned(zext_ln203_1_fu_580_p1) + unsigned(zext_ln203_fu_570_p1));
    and_ln13_fu_385_p2 <= (or_ln13_1_fu_379_p2 and and_ln29_fu_295_p2);
    and_ln29_1_fu_307_p2 <= (xor_ln29_fu_283_p2 and icmp_ln16_fu_301_p2);
    and_ln29_fu_295_p2 <= (xor_ln29_fu_283_p2 and icmp_ln20_fu_289_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_223_p2)
    begin
        if ((icmp_ln10_fu_223_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_179_p4_assign_proc : process(c_0_reg_175, icmp_ln10_reg_659, ap_CS_fsm_pp0_stage0, select_ln16_4_reg_686, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_179_p4 <= select_ln16_4_reg_686;
        else 
            ap_phi_mux_c_0_phi_fu_179_p4 <= c_0_reg_175;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_135_p4_assign_proc : process(f_0_reg_131, icmp_ln10_reg_659, ap_CS_fsm_pp0_stage0, select_ln29_3_reg_668, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_135_p4 <= select_ln29_3_reg_668;
        else 
            ap_phi_mux_f_0_phi_fu_135_p4 <= f_0_reg_131;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_202_p4_assign_proc : process(mpr_0_reg_198, icmp_ln10_reg_659, ap_CS_fsm_pp0_stage0, mpr_reg_702, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_202_p4 <= mpr_reg_702;
        else 
            ap_phi_mux_mpr_0_phi_fu_202_p4 <= mpr_0_reg_198;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_157_p4_assign_proc : process(r_0_reg_153, icmp_ln10_reg_659, ap_CS_fsm_pp0_stage0, select_ln13_2_reg_674, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_659 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_157_p4 <= select_ln13_2_reg_674;
        else 
            ap_phi_mux_r_0_phi_fu_157_p4 <= r_0_reg_153;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_391_p2 <= std_logic_vector(unsigned(select_ln13_fu_325_p3) + unsigned(ap_const_lv3_1));
    conv_out_V_address0 <= zext_ln1494_1_fu_503_p1(11 - 1 downto 0);
    conv_out_V_address1 <= zext_ln1494_2_fu_528_p1(11 - 1 downto 0);

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            conv_out_V_ce1 <= ap_const_logic_1;
        else 
            conv_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_235_p2 <= std_logic_vector(unsigned(ap_phi_mux_f_0_phi_fu_135_p4) + unsigned(ap_const_lv5_1));
    i_fu_467_p2 <= std_logic_vector(unsigned(select_ln13_1_fu_341_p3) + unsigned(zext_ln20_fu_463_p1));
    icmp_ln10_fu_223_p2 <= "1" when (indvar_flatten59_reg_120 = ap_const_lv10_320) else "0";
    icmp_ln13_fu_241_p2 <= "1" when (indvar_flatten22_reg_142 = ap_const_lv7_32) else "0";
    icmp_ln1494_1_fu_611_p2 <= "1" when (signed(conv_out_V_q1) > signed(select_ln29_fu_603_p3)) else "0";
    icmp_ln1494_fu_597_p2 <= "1" when (signed(conv_out_V_q0) > signed(select_ln16_fu_590_p3)) else "0";
    icmp_ln16_fu_301_p2 <= "1" when (indvar_flatten_reg_164 = ap_const_lv5_A) else "0";
    icmp_ln20_1_fu_626_p2 <= "1" when (mpr_reg_702 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_289_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_202_p4 = ap_const_lv2_2) else "0";
    max_pool_out_V_address0 <= zext_ln203_3_fu_654_p1(9 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_V_d0 <= 
        conv_out_V_q1 when (icmp_ln1494_1_fu_611_p2(0) = '1') else 
        select_ln29_fu_603_p3;

    max_pool_out_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, icmp_ln20_1_fu_626_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_1_fu_626_p2 = ap_const_lv1_1))) then 
            max_pool_out_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_533_p2 <= std_logic_vector(unsigned(select_ln16_1_fu_409_p3) + unsigned(ap_const_lv2_1));
    mul_ln1494_fu_477_p0 <= mul_ln1494_fu_477_p00(4 - 1 downto 0);
    mul_ln1494_fu_477_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_467_p2),8));
    mul_ln1494_fu_477_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1494_fu_477_p0) * unsigned(ap_const_lv8_B), 8));
    or_ln13_1_fu_379_p2 <= (xor_ln13_fu_373_p2 or icmp_ln13_fu_241_p2);
    or_ln13_fu_319_p2 <= (icmp_ln13_fu_241_p2 or and_ln29_1_fu_307_p2);
    or_ln16_1_fu_403_p2 <= (or_ln16_fu_397_p2 or icmp_ln13_fu_241_p2);
    or_ln16_fu_397_p2 <= (and_ln29_1_fu_307_p2 or and_ln13_fu_385_p2);
    or_ln27_1_fu_437_p2 <= (shl_ln27_mid1_fu_417_p3 or ap_const_lv4_1);
    or_ln27_fu_217_p2 <= (shl_ln1_fu_209_p3 or ap_const_lv4_1);
    r_fu_313_p2 <= std_logic_vector(unsigned(select_ln29_2_fu_247_p3) + unsigned(ap_const_lv3_1));
    select_ln13_1_fu_341_p3 <= 
        shl_ln26_mid1_fu_333_p3 when (and_ln29_1_fu_307_p2(0) = '1') else 
        select_ln29_4_fu_275_p3;
    select_ln13_2_fu_349_p3 <= 
        r_fu_313_p2 when (and_ln29_1_fu_307_p2(0) = '1') else 
        select_ln29_2_fu_247_p3;
    select_ln13_3_fu_357_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_319_p2(0) = '1') else 
        shl_ln1_fu_209_p3;
    select_ln13_4_fu_365_p3 <= 
        ap_const_lv4_1 when (or_ln13_fu_319_p2(0) = '1') else 
        or_ln27_fu_217_p2;
    select_ln13_5_fu_559_p3 <= 
        ap_const_lv7_1 when (icmp_ln13_fu_241_p2(0) = '1') else 
        add_ln13_1_fu_553_p2;
    select_ln13_fu_325_p3 <= 
        ap_const_lv3_0 when (or_ln13_fu_319_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_179_p4;
    select_ln16_1_fu_409_p3 <= 
        ap_const_lv2_0 when (or_ln16_1_fu_403_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_202_p4;
    select_ln16_2_fu_425_p3 <= 
        shl_ln27_mid1_fu_417_p3 when (and_ln13_fu_385_p2(0) = '1') else 
        select_ln13_3_fu_357_p3;
    select_ln16_3_fu_443_p3 <= 
        or_ln27_1_fu_437_p2 when (and_ln13_fu_385_p2(0) = '1') else 
        select_ln13_4_fu_365_p3;
    select_ln16_4_fu_455_p3 <= 
        c_fu_391_p2 when (and_ln13_fu_385_p2(0) = '1') else 
        select_ln13_fu_325_p3;
    select_ln16_5_fu_545_p3 <= 
        ap_const_lv5_1 when (or_ln13_fu_319_p2(0) = '1') else 
        add_ln16_fu_539_p2;
    select_ln16_fu_590_p3 <= 
        ap_const_lv14_0 when (or_ln16_1_reg_681(0) = '1') else 
        max_0_reg_186;
    select_ln29_1_fu_617_p3 <= 
        conv_out_V_q1 when (icmp_ln1494_1_fu_611_p2(0) = '1') else 
        select_ln29_fu_603_p3;
    select_ln29_2_fu_247_p3 <= 
        ap_const_lv3_0 when (icmp_ln13_fu_241_p2(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_157_p4;
    select_ln29_3_fu_255_p3 <= 
        f_fu_235_p2 when (icmp_ln13_fu_241_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_135_p4;
    select_ln29_4_fu_275_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_fu_241_p2(0) = '1') else 
        shl_ln_fu_267_p3;
    select_ln29_fu_603_p3 <= 
        conv_out_V_q0 when (icmp_ln1494_fu_597_p2(0) = '1') else 
        select_ln16_fu_590_p3;
    shl_ln1_fu_209_p3 <= (ap_phi_mux_c_0_phi_fu_179_p4 & ap_const_lv1_0);
    shl_ln26_mid1_fu_333_p3 <= (r_fu_313_p2 & ap_const_lv1_0);
    shl_ln27_mid1_fu_417_p3 <= (c_fu_391_p2 & ap_const_lv1_0);
    shl_ln_fu_267_p3 <= (ap_phi_mux_r_0_phi_fu_157_p4 & ap_const_lv1_0);
    tmp_2_cast_fu_489_p3 <= (add_ln1494_fu_483_p2 & ap_const_lv4_0);
    tmp_5_cast_fu_514_p3 <= (add_ln1494_2_fu_508_p2 & ap_const_lv4_0);
    tmp_7_cast_fu_640_p3 <= (add_ln203_1_fu_634_p2 & ap_const_lv4_0);
    tmp_fu_573_p3 <= (select_ln13_2_reg_674 & ap_const_lv2_0);
    xor_ln13_fu_373_p2 <= (icmp_ln16_fu_301_p2 xor ap_const_lv1_1);
    xor_ln29_fu_283_p2 <= (icmp_ln13_fu_241_p2 xor ap_const_lv1_1);
    zext_ln1494_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_1_fu_497_p2),64));
    zext_ln1494_2_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_3_fu_522_p2),64));
    zext_ln16_1_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_3_fu_443_p3),8));
    zext_ln16_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_425_p3),8));
    zext_ln203_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_573_p3),6));
    zext_ln203_2_fu_631_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_4_reg_686),6));
    zext_ln203_3_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_2_fu_648_p2),64));
    zext_ln203_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_reg_674),6));
    zext_ln20_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_fu_409_p3),4));
    zext_ln26_1_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_fu_255_p3),12));
    zext_ln26_fu_567_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_reg_668),10));
end behav;
