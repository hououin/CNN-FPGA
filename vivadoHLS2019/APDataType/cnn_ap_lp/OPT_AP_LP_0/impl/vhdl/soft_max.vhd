-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity soft_max is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_array_V_ce0 : OUT STD_LOGIC;
    dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    dense_array_V_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    dense_array_V_ce1 : OUT STD_LOGIC;
    dense_array_V_we1 : OUT STD_LOGIC;
    dense_array_V_d1 : OUT STD_LOGIC_VECTOR (13 downto 0);
    dense_array_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_V_ce0 : OUT STD_LOGIC;
    prediction_V_we0 : OUT STD_LOGIC;
    prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of soft_max is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal p_Val2_1_reg_98 : STD_LOGIC_VECTOR (13 downto 0);
    signal m_0_reg_110 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_3_reg_121 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_0_reg_133 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_144 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln12_fu_166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln12_reg_277 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal m_fu_172_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal select_ln13_fu_189_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal rhs_V_fu_197_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal rhs_V_reg_296 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln20_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state5_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state8_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state9_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln20_reg_301_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_301_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_reg_301_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_207_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal dense_array_V_addr_1_reg_310 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_addr_1_reg_310_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_addr_1_reg_310_pp1_iter2_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_addr_1_reg_310_pp1_iter3_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_4_fu_228_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Val2_4_reg_316 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_V_fu_232_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sum_V_reg_321 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal sext_ln27_fu_238_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln27_reg_326 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal icmp_ln27_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state11_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_state13_pp2_stage0_iter2 : BOOLEAN;
    signal ap_block_state14_pp2_stage0_iter3 : BOOLEAN;
    signal ap_block_state15_pp2_stage0_iter4 : BOOLEAN;
    signal ap_block_state16_pp2_stage0_iter5 : BOOLEAN;
    signal ap_block_state17_pp2_stage0_iter6 : BOOLEAN;
    signal ap_block_state18_pp2_stage0_iter7 : BOOLEAN;
    signal ap_block_state19_pp2_stage0_iter8 : BOOLEAN;
    signal ap_block_state20_pp2_stage0_iter9 : BOOLEAN;
    signal ap_block_state21_pp2_stage0_iter10 : BOOLEAN;
    signal ap_block_state22_pp2_stage0_iter11 : BOOLEAN;
    signal ap_block_state23_pp2_stage0_iter12 : BOOLEAN;
    signal ap_block_state24_pp2_stage0_iter13 : BOOLEAN;
    signal ap_block_state25_pp2_stage0_iter14 : BOOLEAN;
    signal ap_block_state26_pp2_stage0_iter15 : BOOLEAN;
    signal ap_block_state27_pp2_stage0_iter16 : BOOLEAN;
    signal ap_block_state28_pp2_stage0_iter17 : BOOLEAN;
    signal ap_block_state29_pp2_stage0_iter18 : BOOLEAN;
    signal ap_block_state30_pp2_stage0_iter19 : BOOLEAN;
    signal ap_block_state31_pp2_stage0_iter20 : BOOLEAN;
    signal ap_block_state32_pp2_stage0_iter21 : BOOLEAN;
    signal ap_block_state33_pp2_stage0_iter22 : BOOLEAN;
    signal ap_block_state34_pp2_stage0_iter23 : BOOLEAN;
    signal ap_block_state35_pp2_stage0_iter24 : BOOLEAN;
    signal ap_block_state36_pp2_stage0_iter25 : BOOLEAN;
    signal ap_block_state37_pp2_stage0_iter26 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal icmp_ln27_reg_331_pp2_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln27_reg_331_pp2_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_248_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln29_fu_254_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln29_reg_340_pp2_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state5 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp2_iter26 : STD_LOGIC := '0';
    signal grp_exp_15_7_s_fu_155_ap_start : STD_LOGIC;
    signal grp_exp_15_7_s_fu_155_ap_done : STD_LOGIC;
    signal grp_exp_15_7_s_fu_155_ap_idle : STD_LOGIC;
    signal grp_exp_15_7_s_fu_155_ap_ready : STD_LOGIC;
    signal grp_exp_15_7_s_fu_155_x_V : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_exp_15_7_s_fu_155_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_p_Val2_3_phi_fu_125_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal grp_exp_15_7_s_fu_155_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln13_fu_178_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln22_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal icmp_ln1495_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal lhs_V_fu_218_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal lhs_V_fu_218_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_267_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;

    component exp_15_7_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component cnn_sdiv_22ns_14scgu IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    grp_exp_15_7_s_fu_155 : component exp_15_7_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_exp_15_7_s_fu_155_ap_start,
        ap_done => grp_exp_15_7_s_fu_155_ap_done,
        ap_idle => grp_exp_15_7_s_fu_155_ap_idle,
        ap_ready => grp_exp_15_7_s_fu_155_ap_ready,
        x_V => grp_exp_15_7_s_fu_155_x_V,
        ap_return => grp_exp_15_7_s_fu_155_ap_return);

    cnn_sdiv_22ns_14scgu_U2342 : component cnn_sdiv_22ns_14scgu
    generic map (
        ID => 1,
        NUM_STAGE => 26,
        din0_WIDTH => 22,
        din1_WIDTH => 14,
        dout_WIDTH => 14)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_267_p0,
        din1 => grp_fu_267_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_267_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state5)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state5);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp2_exit_iter0_state11)) then 
                        ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state11);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter10 <= ap_enable_reg_pp2_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter11 <= ap_enable_reg_pp2_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter12 <= ap_enable_reg_pp2_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter13 <= ap_enable_reg_pp2_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter14 <= ap_enable_reg_pp2_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter15 <= ap_enable_reg_pp2_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter16 <= ap_enable_reg_pp2_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter17 <= ap_enable_reg_pp2_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter18 <= ap_enable_reg_pp2_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter19 <= ap_enable_reg_pp2_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter2 <= ap_enable_reg_pp2_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter20 <= ap_enable_reg_pp2_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter21 <= ap_enable_reg_pp2_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter22 <= ap_enable_reg_pp2_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter23 <= ap_enable_reg_pp2_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter24 <= ap_enable_reg_pp2_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter25 <= ap_enable_reg_pp2_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter26 <= ap_enable_reg_pp2_iter25;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    ap_enable_reg_pp2_iter26 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter3 <= ap_enable_reg_pp2_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter4 <= ap_enable_reg_pp2_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter5 <= ap_enable_reg_pp2_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter6 <= ap_enable_reg_pp2_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter7 <= ap_enable_reg_pp2_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter8 <= ap_enable_reg_pp2_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter9 <= ap_enable_reg_pp2_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_exp_15_7_s_fu_155_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_exp_15_7_s_fu_155_ap_start_reg <= ap_const_logic_0;
            else
                if (((icmp_ln20_fu_201_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                    grp_exp_15_7_s_fu_155_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_exp_15_7_s_fu_155_ap_ready = ap_const_logic_1)) then 
                    grp_exp_15_7_s_fu_155_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_133_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_201_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                i_0_reg_133 <= i_fu_207_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_0_reg_133 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_reg_144 <= ap_const_lv4_0;
            elsif (((icmp_ln27_fu_242_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
                j_0_reg_144 <= j_fu_248_p2;
            end if; 
        end if;
    end process;

    m_0_reg_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_fu_166_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                m_0_reg_110 <= m_fu_172_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                m_0_reg_110 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    p_Val2_1_reg_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln12_reg_277 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_Val2_1_reg_98 <= select_ln13_fu_189_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                p_Val2_1_reg_98 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    p_Val2_3_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_301_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                p_Val2_3_reg_121 <= sum_V_reg_321;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                p_Val2_3_reg_121 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_fu_201_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                dense_array_V_addr_1_reg_310 <= zext_ln22_fu_213_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                dense_array_V_addr_1_reg_310_pp1_iter1_reg <= dense_array_V_addr_1_reg_310;
                icmp_ln20_reg_301 <= icmp_ln20_fu_201_p2;
                icmp_ln20_reg_301_pp1_iter1_reg <= icmp_ln20_reg_301;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp1_stage0_11001)) then
                dense_array_V_addr_1_reg_310_pp1_iter2_reg <= dense_array_V_addr_1_reg_310_pp1_iter1_reg;
                dense_array_V_addr_1_reg_310_pp1_iter3_reg <= dense_array_V_addr_1_reg_310_pp1_iter2_reg;
                icmp_ln20_reg_301_pp1_iter2_reg <= icmp_ln20_reg_301_pp1_iter1_reg;
                icmp_ln20_reg_301_pp1_iter3_reg <= icmp_ln20_reg_301_pp1_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln12_reg_277 <= icmp_ln12_fu_166_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                icmp_ln27_reg_331 <= icmp_ln27_fu_242_p2;
                icmp_ln27_reg_331_pp2_iter1_reg <= icmp_ln27_reg_331;
                    zext_ln29_reg_340_pp2_iter1_reg(3 downto 0) <= zext_ln29_reg_340(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp2_stage0_11001)) then
                icmp_ln27_reg_331_pp2_iter10_reg <= icmp_ln27_reg_331_pp2_iter9_reg;
                icmp_ln27_reg_331_pp2_iter11_reg <= icmp_ln27_reg_331_pp2_iter10_reg;
                icmp_ln27_reg_331_pp2_iter12_reg <= icmp_ln27_reg_331_pp2_iter11_reg;
                icmp_ln27_reg_331_pp2_iter13_reg <= icmp_ln27_reg_331_pp2_iter12_reg;
                icmp_ln27_reg_331_pp2_iter14_reg <= icmp_ln27_reg_331_pp2_iter13_reg;
                icmp_ln27_reg_331_pp2_iter15_reg <= icmp_ln27_reg_331_pp2_iter14_reg;
                icmp_ln27_reg_331_pp2_iter16_reg <= icmp_ln27_reg_331_pp2_iter15_reg;
                icmp_ln27_reg_331_pp2_iter17_reg <= icmp_ln27_reg_331_pp2_iter16_reg;
                icmp_ln27_reg_331_pp2_iter18_reg <= icmp_ln27_reg_331_pp2_iter17_reg;
                icmp_ln27_reg_331_pp2_iter19_reg <= icmp_ln27_reg_331_pp2_iter18_reg;
                icmp_ln27_reg_331_pp2_iter20_reg <= icmp_ln27_reg_331_pp2_iter19_reg;
                icmp_ln27_reg_331_pp2_iter21_reg <= icmp_ln27_reg_331_pp2_iter20_reg;
                icmp_ln27_reg_331_pp2_iter22_reg <= icmp_ln27_reg_331_pp2_iter21_reg;
                icmp_ln27_reg_331_pp2_iter23_reg <= icmp_ln27_reg_331_pp2_iter22_reg;
                icmp_ln27_reg_331_pp2_iter24_reg <= icmp_ln27_reg_331_pp2_iter23_reg;
                icmp_ln27_reg_331_pp2_iter25_reg <= icmp_ln27_reg_331_pp2_iter24_reg;
                icmp_ln27_reg_331_pp2_iter2_reg <= icmp_ln27_reg_331_pp2_iter1_reg;
                icmp_ln27_reg_331_pp2_iter3_reg <= icmp_ln27_reg_331_pp2_iter2_reg;
                icmp_ln27_reg_331_pp2_iter4_reg <= icmp_ln27_reg_331_pp2_iter3_reg;
                icmp_ln27_reg_331_pp2_iter5_reg <= icmp_ln27_reg_331_pp2_iter4_reg;
                icmp_ln27_reg_331_pp2_iter6_reg <= icmp_ln27_reg_331_pp2_iter5_reg;
                icmp_ln27_reg_331_pp2_iter7_reg <= icmp_ln27_reg_331_pp2_iter6_reg;
                icmp_ln27_reg_331_pp2_iter8_reg <= icmp_ln27_reg_331_pp2_iter7_reg;
                icmp_ln27_reg_331_pp2_iter9_reg <= icmp_ln27_reg_331_pp2_iter8_reg;
                    zext_ln29_reg_340_pp2_iter10_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter9_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter11_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter10_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter12_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter11_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter13_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter12_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter14_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter13_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter15_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter14_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter16_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter15_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter17_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter16_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter18_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter17_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter19_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter18_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter20_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter19_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter21_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter20_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter22_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter21_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter23_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter22_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter24_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter23_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter25_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter24_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter2_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter1_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter3_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter2_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter4_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter3_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter5_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter4_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter6_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter5_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter7_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter6_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter8_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter7_reg(3 downto 0);
                    zext_ln29_reg_340_pp2_iter9_reg(3 downto 0) <= zext_ln29_reg_340_pp2_iter8_reg(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_301_pp1_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                p_Val2_4_reg_316 <= p_Val2_4_fu_228_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                rhs_V_reg_296 <= rhs_V_fu_197_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                sext_ln27_reg_326 <= sext_ln27_fu_238_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln20_reg_301_pp1_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                sum_V_reg_321 <= sum_V_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln27_fu_242_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then
                    zext_ln29_reg_340(3 downto 0) <= zext_ln29_fu_254_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln29_reg_340(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter1_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter2_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter3_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter4_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter5_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter6_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter7_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter8_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter9_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter10_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter11_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter12_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter13_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter14_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter15_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter16_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter17_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter18_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter19_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter20_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter21_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter22_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter23_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter24_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln29_reg_340_pp2_iter25_reg(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln12_fu_166_p2, ap_enable_reg_pp0_iter0, icmp_ln20_fu_201_p2, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, icmp_ln27_fu_242_p2, ap_enable_reg_pp2_iter0, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_block_pp2_stage0_subdone, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter25, ap_enable_reg_pp2_iter26)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln12_fu_166_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln12_fu_166_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((icmp_ln20_fu_201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0)) or ((icmp_ln20_fu_201_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if ((not(((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_fu_242_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter26 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif ((((ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter26 = ap_const_logic_1)) or ((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (icmp_ln27_fu_242_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state38;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(3);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state38 <= ap_CS_fsm(6);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp2_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp2_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp2_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp2_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp2_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp2_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp2_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp2_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp2_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp2_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp2_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp2_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp2_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp2_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp2_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp2_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp2_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp2_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp2_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp2_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp2_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp2_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp2_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp2_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp2_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln12_fu_166_p2)
    begin
        if ((icmp_ln12_fu_166_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state5_assign_proc : process(icmp_ln20_fu_201_p2)
    begin
        if ((icmp_ln20_fu_201_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state11_assign_proc : process(icmp_ln27_fu_242_p2)
    begin
        if ((icmp_ln27_fu_242_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter3, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter4)
    begin
        if (((ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1, ap_enable_reg_pp2_iter2, ap_enable_reg_pp2_iter3, ap_enable_reg_pp2_iter4, ap_enable_reg_pp2_iter5, ap_enable_reg_pp2_iter6, ap_enable_reg_pp2_iter7, ap_enable_reg_pp2_iter8, ap_enable_reg_pp2_iter9, ap_enable_reg_pp2_iter10, ap_enable_reg_pp2_iter11, ap_enable_reg_pp2_iter12, ap_enable_reg_pp2_iter13, ap_enable_reg_pp2_iter14, ap_enable_reg_pp2_iter15, ap_enable_reg_pp2_iter16, ap_enable_reg_pp2_iter17, ap_enable_reg_pp2_iter18, ap_enable_reg_pp2_iter19, ap_enable_reg_pp2_iter20, ap_enable_reg_pp2_iter21, ap_enable_reg_pp2_iter22, ap_enable_reg_pp2_iter23, ap_enable_reg_pp2_iter24, ap_enable_reg_pp2_iter25, ap_enable_reg_pp2_iter26)
    begin
        if (((ap_enable_reg_pp2_iter26 = ap_const_logic_0) and (ap_enable_reg_pp2_iter25 = ap_const_logic_0) and (ap_enable_reg_pp2_iter24 = ap_const_logic_0) and (ap_enable_reg_pp2_iter23 = ap_const_logic_0) and (ap_enable_reg_pp2_iter22 = ap_const_logic_0) and (ap_enable_reg_pp2_iter21 = ap_const_logic_0) and (ap_enable_reg_pp2_iter20 = ap_const_logic_0) and (ap_enable_reg_pp2_iter19 = ap_const_logic_0) and (ap_enable_reg_pp2_iter18 = ap_const_logic_0) and (ap_enable_reg_pp2_iter17 = ap_const_logic_0) and (ap_enable_reg_pp2_iter16 = ap_const_logic_0) and (ap_enable_reg_pp2_iter15 = ap_const_logic_0) and (ap_enable_reg_pp2_iter14 = ap_const_logic_0) and (ap_enable_reg_pp2_iter13 = ap_const_logic_0) and (ap_enable_reg_pp2_iter12 = ap_const_logic_0) and (ap_enable_reg_pp2_iter11 = ap_const_logic_0) and (ap_enable_reg_pp2_iter10 = ap_const_logic_0) and (ap_enable_reg_pp2_iter9 = ap_const_logic_0) and (ap_enable_reg_pp2_iter8 = ap_const_logic_0) and (ap_enable_reg_pp2_iter7 = ap_const_logic_0) and (ap_enable_reg_pp2_iter6 = ap_const_logic_0) and (ap_enable_reg_pp2_iter5 = ap_const_logic_0) and (ap_enable_reg_pp2_iter4 = ap_const_logic_0) and (ap_enable_reg_pp2_iter3 = ap_const_logic_0) and (ap_enable_reg_pp2_iter2 = ap_const_logic_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_p_Val2_3_phi_fu_125_p4_assign_proc : process(p_Val2_3_reg_121, icmp_ln20_reg_301_pp1_iter3_reg, sum_V_reg_321, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0)
    begin
        if (((icmp_ln20_reg_301_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            ap_phi_mux_p_Val2_3_phi_fu_125_p4 <= sum_V_reg_321;
        else 
            ap_phi_mux_p_Val2_3_phi_fu_125_p4 <= p_Val2_3_reg_121;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0, ap_block_pp1_stage0, zext_ln13_fu_178_p1, zext_ln22_fu_213_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            dense_array_V_address0 <= zext_ln22_fu_213_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_array_V_address0 <= zext_ln13_fu_178_p1(4 - 1 downto 0);
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_address1_assign_proc : process(dense_array_V_addr_1_reg_310_pp1_iter3_reg, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, zext_ln29_fu_254_p1, ap_enable_reg_pp1_iter4, ap_block_pp1_stage0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            dense_array_V_address1 <= zext_ln29_fu_254_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1))) then 
            dense_array_V_address1 <= dense_array_V_addr_1_reg_310_pp1_iter3_reg;
        else 
            dense_array_V_address1 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_ce1_assign_proc : process(ap_block_pp1_stage0_11001, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0, ap_enable_reg_pp1_iter4)
    begin
        if ((((ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001)) or ((ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            dense_array_V_ce1 <= ap_const_logic_1;
        else 
            dense_array_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    dense_array_V_d1 <= p_Val2_4_reg_316;

    dense_array_V_we1_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln20_reg_301_pp1_iter3_reg, ap_enable_reg_pp1_iter4)
    begin
        if (((icmp_ln20_reg_301_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            dense_array_V_we1 <= ap_const_logic_1;
        else 
            dense_array_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    grp_exp_15_7_s_fu_155_ap_start <= grp_exp_15_7_s_fu_155_ap_start_reg;
    grp_exp_15_7_s_fu_155_x_V <= std_logic_vector(signed(lhs_V_fu_218_p1) - signed(rhs_V_reg_296));
    grp_fu_267_p0 <= (dense_array_V_q1 & ap_const_lv8_0);
    grp_fu_267_p1 <= sext_ln27_reg_326(14 - 1 downto 0);
    i_fu_207_p2 <= std_logic_vector(unsigned(i_0_reg_133) + unsigned(ap_const_lv4_1));
    icmp_ln12_fu_166_p2 <= "1" when (m_0_reg_110 = ap_const_lv4_A) else "0";
    icmp_ln1495_fu_183_p2 <= "1" when (signed(p_Val2_1_reg_98) < signed(dense_array_V_q0)) else "0";
    icmp_ln20_fu_201_p2 <= "1" when (i_0_reg_133 = ap_const_lv4_A) else "0";
    icmp_ln27_fu_242_p2 <= "1" when (j_0_reg_144 = ap_const_lv4_A) else "0";
    j_fu_248_p2 <= std_logic_vector(unsigned(j_0_reg_144) + unsigned(ap_const_lv4_1));
    lhs_V_fu_218_p0 <= dense_array_V_q0;
        lhs_V_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(lhs_V_fu_218_p0),15));

    m_fu_172_p2 <= std_logic_vector(unsigned(m_0_reg_110) + unsigned(ap_const_lv4_1));
    p_Val2_4_fu_228_p1 <= grp_exp_15_7_s_fu_155_ap_return(14 - 1 downto 0);
    prediction_V_address0 <= zext_ln29_reg_340_pp2_iter25_reg(4 - 1 downto 0);

    prediction_V_ce0_assign_proc : process(ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter26)
    begin
        if (((ap_enable_reg_pp2_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            prediction_V_ce0 <= ap_const_logic_1;
        else 
            prediction_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    prediction_V_d0 <= grp_fu_267_p2(14 - 1 downto 0);

    prediction_V_we0_assign_proc : process(ap_block_pp2_stage0_11001, icmp_ln27_reg_331_pp2_iter25_reg, ap_enable_reg_pp2_iter26)
    begin
        if (((icmp_ln27_reg_331_pp2_iter25_reg = ap_const_lv1_0) and (ap_enable_reg_pp2_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp2_stage0_11001))) then 
            prediction_V_we0 <= ap_const_logic_1;
        else 
            prediction_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

        rhs_V_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_1_reg_98),15));

    select_ln13_fu_189_p3 <= 
        dense_array_V_q0 when (icmp_ln1495_fu_183_p2(0) = '1') else 
        p_Val2_1_reg_98;
        sext_ln27_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_3_reg_121),22));

    sum_V_fu_232_p2 <= std_logic_vector(unsigned(p_Val2_4_fu_228_p1) + unsigned(ap_phi_mux_p_Val2_3_phi_fu_125_p4));
    zext_ln13_fu_178_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_0_reg_110),64));
    zext_ln22_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_133),64));
    zext_ln29_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_144),64));
end behav;
