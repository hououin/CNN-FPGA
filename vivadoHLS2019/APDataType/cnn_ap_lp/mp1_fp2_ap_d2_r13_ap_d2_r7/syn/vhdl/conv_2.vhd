-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_0_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_0_V_ce0 : OUT STD_LOGIC;
    input_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_1_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_1_V_ce0 : OUT STD_LOGIC;
    input_1_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_2_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_2_V_ce0 : OUT STD_LOGIC;
    input_2_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_3_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_3_V_ce0 : OUT STD_LOGIC;
    input_3_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_4_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_4_V_ce0 : OUT STD_LOGIC;
    input_4_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_5_V_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    input_5_V_ce0 : OUT STD_LOGIC;
    input_5_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    input_6_0_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    input_6_0_V_ce0 : OUT STD_LOGIC;
    input_6_0_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_we0 : OUT STD_LOGIC;
    conv_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of conv_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (20 downto 0) := "000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (20 downto 0) := "000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (20 downto 0) := "000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (20 downto 0) := "000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (20 downto 0) := "000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (20 downto 0) := "000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (20 downto 0) := "000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (20 downto 0) := "000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (20 downto 0) := "000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (20 downto 0) := "000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (20 downto 0) := "001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (20 downto 0) := "010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (20 downto 0) := "100000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv7_B : STD_LOGIC_VECTOR (6 downto 0) := "0001011";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv10_13 : STD_LOGIC_VECTOR (9 downto 0) := "0000010011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv18_3FFFF : STD_LOGIC_VECTOR (17 downto 0) := "111111111111111111";
    constant ap_const_lv32_FFFFFFCB : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv14_3FFF : STD_LOGIC_VECTOR (13 downto 0) := "11111111111111";
    constant ap_const_lv14_3FCB : STD_LOGIC_VECTOR (13 downto 0) := "11111111001011";
    constant ap_const_lv32_FFFFFFCA : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111001010";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv11_3FF : STD_LOGIC_VECTOR (10 downto 0) := "01111111111";
    constant ap_const_lv11_3FE : STD_LOGIC_VECTOR (10 downto 0) := "01111111110";
    constant ap_const_lv11_6 : STD_LOGIC_VECTOR (10 downto 0) := "00000000110";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv52_0 : STD_LOGIC_VECTOR (51 downto 0) := "0000000000000000000000000000000000000000000000000000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (20 downto 0) := "000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal conv_2_weights_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_weights_V_ce0 : STD_LOGIC;
    signal conv_2_weights_V_q0 : STD_LOGIC_VECTOR (9 downto 0);
    signal conv_2_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal conv_2_bias_V_ce0 : STD_LOGIC;
    signal conv_2_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln8_fu_477_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln8_reg_1223 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal r_fu_489_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_reg_1231 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_501_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_1239 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln14_fu_525_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln14_reg_1244 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln11_fu_495_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_fu_535_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_1252 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln26_fu_541_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln26_reg_1257 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_529_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_13_fu_545_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_13_reg_1262 : STD_LOGIC_VECTOR (10 downto 0);
    signal conv_out_V_addr_reg_1267 : STD_LOGIC_VECTOR (10 downto 0);
    signal wr_fu_573_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wr_reg_1275 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal sext_ln1116_fu_601_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal sext_ln1116_reg_1280 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln18_fu_567_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1117_fu_619_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1117_reg_1285 : STD_LOGIC_VECTOR (5 downto 0);
    signal sub_ln1117_fu_639_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sub_ln1117_reg_1290 : STD_LOGIC_VECTOR (7 downto 0);
    signal wc_fu_655_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal wc_reg_1303 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal sub_ln1116_1_fu_690_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal sub_ln1116_1_reg_1308 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln21_fu_649_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_1_fu_696_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln1117_fu_736_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1117_reg_1318 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_702_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal urem_ln1117_reg_1324 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal sub_ln1117_1_fu_759_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1117_1_reg_1328 : STD_LOGIC_VECTOR (8 downto 0);
    signal ch_fu_771_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ch_reg_1336 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal icmp_ln24_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln1117_1_fu_812_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1117_1_reg_1346 : STD_LOGIC_VECTOR (8 downto 0);
    signal input_6_0_V_addr_reg_1351 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal sext_ln1116_1_fu_836_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln1116_1_reg_1386 : STD_LOGIC_VECTOR (24 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal tmp_V_4_fu_883_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_4_reg_1396 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln885_fu_889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln885_reg_1404 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_fu_895_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_24_reg_1408 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal tmp_V_5_fu_907_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_5_reg_1413 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln894_fu_940_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln894_reg_1419 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_fu_1050_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal or_ln_reg_1425 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln908_fu_1058_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln908_reg_1430 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln893_fu_1064_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal trunc_ln893_reg_1435 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln924_fu_1195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_reg_1445 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_fu_1201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln924_1_reg_1450 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_0_reg_318 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_330 : STD_LOGIC_VECTOR (6 downto 0);
    signal c_0_reg_342 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln8_fu_483_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal f_0_reg_354 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal p_Val2_s_reg_365 : STD_LOGIC_VECTOR (13 downto 0);
    signal wr_0_reg_377 : STD_LOGIC_VECTOR (1 downto 0);
    signal w_sum_1_reg_388 : STD_LOGIC_VECTOR (13 downto 0);
    signal wc_0_reg_400 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_Val2_19_reg_411 : STD_LOGIC_VECTOR (13 downto 0);
    signal ch_0_reg_423 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_phi_mux_phi_ln1117_phi_fu_437_p14 : STD_LOGIC_VECTOR (13 downto 0);
    signal storemerge_reg_460 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal and_ln924_fu_1211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln203_15_fu_558_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1116_6_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln1117_1_fu_822_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1117_6_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_472_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_fu_507_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln203_fu_511_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_10_fu_517_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_14_fu_549_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln203_7_fu_553_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_11_fu_583_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1116_1_fu_591_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln1116_fu_579_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sub_ln1116_fu_595_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln18_fu_563_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln26_fu_605_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_12_fu_611_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_13_fu_627_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1117_2_fu_635_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1117_1_fu_623_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1116_2_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln1116_fu_665_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln1116_fu_670_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_shl_fu_674_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_682_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln21_fu_645_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1117_fu_712_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mul_ln1117_fu_712_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_718_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal sext_ln1117_fu_728_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln1117_4_fu_732_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_fu_748_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl3_cast_fu_741_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1117_5_fu_755_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_3_fu_777_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln1116_1_fu_789_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_37_cast_fu_794_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln1116_2_fu_802_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln1116_5_fu_785_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_4_fu_781_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln1117_2_fu_817_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal r_V_fu_1217_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal lhs_V_fu_847_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1118_1_fu_844_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal zext_ln728_fu_855_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal zext_ln703_fu_859_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal ret_V_fu_863_p2 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln1265_fu_879_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_V_fu_902_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_s_fu_914_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_25_fu_924_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_fu_932_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal lsb_index_fu_950_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_956_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln897_fu_972_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln897_fu_976_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln897_fu_982_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal lshr_ln897_fu_986_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_21_fu_992_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln897_fu_966_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln897_1_fu_998_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_1010_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln894_fu_946_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln899_fu_1024_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal p_Result_22_fu_1030_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln899_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln899_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_fu_1004_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln899_fu_1044_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln907_1_fu_1071_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln908_fu_1074_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln908_fu_1079_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln908_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal m_fu_1068_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_1_fu_1094_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln908_fu_1085_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln908_fu_1098_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln911_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_1_fu_1104_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_2_fu_1114_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal m_5_fu_1120_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_17_fu_1134_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln915_fu_1150_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln915_fu_1142_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln915_fu_1155_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal m_6_fu_1130_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_1161_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_Result_26_fu_1168_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln4_fu_1185_p4 : STD_LOGIC_VECTOR (51 downto 0);
    signal or_ln924_fu_1207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_fu_1217_p0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_702_ap_start : STD_LOGIC;
    signal grp_fu_702_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1117_fu_712_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_condition_340 : BOOLEAN;

    component cnn_dcmp_64ns_64ndEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cnn_urem_4ns_4ns_hbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (3 downto 0);
        din1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component cnn_mul_mul_10s_1ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component conv_2_conv_2_weifYi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component conv_2_conv_2_biag8j IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    conv_2_weights_V_U : component conv_2_conv_2_weifYi
    generic map (
        DataWidth => 10,
        AddressRange => 864,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_weights_V_address0,
        ce0 => conv_2_weights_V_ce0,
        q0 => conv_2_weights_V_q0);

    conv_2_bias_V_U : component conv_2_conv_2_biag8j
    generic map (
        DataWidth => 8,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => conv_2_bias_V_address0,
        ce0 => conv_2_bias_V_ce0,
        q0 => conv_2_bias_V_q0);

    cnn_dcmp_64ns_64ndEe_U41 : component cnn_dcmp_64ns_64ndEe
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_472_p0,
        din1 => ap_const_lv64_0,
        ce => ap_const_logic_1,
        opcode => ap_const_lv5_2,
        dout => grp_fu_472_p2);

    cnn_urem_4ns_4ns_hbi_U42 : component cnn_urem_4ns_4ns_hbi
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 4,
        din1_WIDTH => 4,
        dout_WIDTH => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_702_ap_start,
        done => grp_fu_702_ap_done,
        din0 => add_ln26_1_fu_696_p2,
        din1 => ap_const_lv4_7,
        ce => ap_const_logic_1,
        dout => grp_fu_702_p2);

    cnn_mul_mul_10s_1ibs_U43 : component cnn_mul_mul_10s_1ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 10,
        din1_WIDTH => 14,
        dout_WIDTH => 25)
    port map (
        din0 => r_V_fu_1217_p0,
        din1 => ap_phi_mux_phi_ln1117_phi_fu_437_p14,
        dout => r_V_fu_1217_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    c_0_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_529_p2 = ap_const_lv1_1))) then 
                c_0_reg_342 <= c_reg_1239;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_483_p2 = ap_const_lv1_0))) then 
                c_0_reg_342 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    ch_0_reg_423_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                ch_0_reg_423 <= ch_reg_1336;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                ch_0_reg_423 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    f_0_reg_354_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                f_0_reg_354 <= f_reg_1252;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_495_p2 = ap_const_lv1_0))) then 
                f_0_reg_354 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_Val2_19_reg_411_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
                p_Val2_19_reg_411 <= ret_V_fu_863_p2(21 downto 8);
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                p_Val2_19_reg_411 <= w_sum_1_reg_388;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_365_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_649_p2 = ap_const_lv1_1))) then 
                p_Val2_s_reg_365 <= w_sum_1_reg_388;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_529_p2 = ap_const_lv1_0))) then 
                p_Val2_s_reg_365 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_330_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_495_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_330 <= add_ln8_reg_1223;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                phi_mul_reg_330 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    r_0_reg_318_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_495_p2 = ap_const_lv1_1))) then 
                r_0_reg_318 <= r_reg_1231;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_318 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    storemerge_reg_460_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                if (((ap_const_lv1_1 = and_ln924_fu_1211_p2) and (icmp_ln885_reg_1404 = ap_const_lv1_0))) then 
                    storemerge_reg_460 <= tmp_V_4_reg_1396;
                elsif (((icmp_ln885_reg_1404 = ap_const_lv1_1) or (ap_const_lv1_0 = and_ln924_fu_1211_p2))) then 
                    storemerge_reg_460 <= ap_const_lv14_0;
                end if;
            end if; 
        end if;
    end process;

    w_sum_1_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_fu_765_p2 = ap_const_lv1_1))) then 
                w_sum_1_reg_388 <= p_Val2_19_reg_411;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_567_p2 = ap_const_lv1_0))) then 
                w_sum_1_reg_388 <= p_Val2_s_reg_365;
            end if; 
        end if;
    end process;

    wc_0_reg_400_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_fu_765_p2 = ap_const_lv1_1))) then 
                wc_0_reg_400 <= wc_reg_1303;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_567_p2 = ap_const_lv1_0))) then 
                wc_0_reg_400 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    wr_0_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_649_p2 = ap_const_lv1_1))) then 
                wr_0_reg_377 <= wr_reg_1275;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_529_p2 = ap_const_lv1_0))) then 
                wr_0_reg_377 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_fu_765_p2 = ap_const_lv1_0))) then
                add_ln1117_1_reg_1346 <= add_ln1117_1_fu_812_p2;
                input_6_0_V_addr_reg_1351 <= sext_ln1117_1_fu_822_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_649_p2 = ap_const_lv1_0))) then
                add_ln1117_reg_1318 <= add_ln1117_fu_736_p2;
                    sub_ln1116_1_reg_1308(6 downto 1) <= sub_ln1116_1_fu_690_p2(6 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                add_ln8_reg_1223 <= add_ln8_fu_477_p2;
                r_reg_1231 <= r_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                c_reg_1239 <= c_fu_501_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                ch_reg_1336 <= ch_fu_771_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_529_p2 = ap_const_lv1_0))) then
                conv_out_V_addr_reg_1267 <= zext_ln203_15_fu_558_p1(11 - 1 downto 0);
                    zext_ln203_13_reg_1262(4 downto 0) <= zext_ln203_13_fu_545_p1(4 downto 0);
                    zext_ln26_reg_1257(4 downto 0) <= zext_ln26_fu_541_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                f_reg_1252 <= f_fu_535_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                icmp_ln885_reg_1404 <= icmp_ln885_fu_889_p2;
                tmp_V_4_reg_1396 <= tmp_V_4_fu_883_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                icmp_ln908_reg_1430 <= icmp_ln908_fu_1058_p2;
                    or_ln_reg_1425(0) <= or_ln_fu_1050_p3(0);
                p_Result_24_reg_1408 <= tmp_V_4_reg_1396(13 downto 13);
                sub_ln894_reg_1419 <= sub_ln894_fu_940_p2;
                tmp_V_5_reg_1413 <= tmp_V_5_fu_907_p3;
                trunc_ln893_reg_1435 <= trunc_ln893_fu_1064_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                icmp_ln924_1_reg_1450 <= icmp_ln924_1_fu_1201_p2;
                icmp_ln924_reg_1445 <= icmp_ln924_fu_1195_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                sext_ln1116_1_reg_1386 <= sext_ln1116_1_fu_836_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_567_p2 = ap_const_lv1_0))) then
                sext_ln1116_reg_1280 <= sext_ln1116_fu_601_p1;
                    sub_ln1117_reg_1290(7 downto 1) <= sub_ln1117_fu_639_p2(7 downto 1);
                    zext_ln1117_reg_1285(4 downto 1) <= zext_ln1117_fu_619_p1(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                    sub_ln1117_1_reg_1328(8 downto 1) <= sub_ln1117_1_fu_759_p2(8 downto 1);
                urem_ln1117_reg_1324 <= grp_fu_702_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                wc_reg_1303 <= wc_fu_655_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                wr_reg_1275 <= wr_fu_573_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_495_p2 = ap_const_lv1_0))) then
                    zext_ln14_reg_1244(10 downto 4) <= zext_ln14_fu_525_p1(10 downto 4);
            end if;
        end if;
    end process;
    zext_ln14_reg_1244(3 downto 0) <= "0000";
    zext_ln14_reg_1244(11) <= '0';
    zext_ln26_reg_1257(63 downto 5) <= "00000000000000000000000000000000000000000000000000000000000";
    zext_ln203_13_reg_1262(10 downto 5) <= "000000";
    zext_ln1117_reg_1285(0) <= '0';
    zext_ln1117_reg_1285(5) <= '0';
    sub_ln1117_reg_1290(0) <= '0';
    sub_ln1116_1_reg_1308(0) <= '0';
    sub_ln1117_1_reg_1328(0) <= '0';
    or_ln_reg_1425(31 downto 1) <= "0000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, icmp_ln11_fu_495_p2, ap_CS_fsm_state4, icmp_ln14_fu_529_p2, ap_CS_fsm_state5, icmp_ln18_fu_567_p2, ap_CS_fsm_state6, icmp_ln21_fu_649_p2, ap_CS_fsm_state14, icmp_ln24_fu_765_p2, ap_CS_fsm_state17, icmp_ln885_fu_889_p2, icmp_ln8_fu_483_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_483_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln11_fu_495_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln14_fu_529_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln18_fu_567_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_649_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (icmp_ln24_fu_765_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (icmp_ln885_fu_889_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_fu_1004_p2 <= (icmp_ln897_fu_966_p2 and icmp_ln897_1_fu_998_p2);
    add_ln1116_1_fu_789_p2 <= std_logic_vector(unsigned(zext_ln1116_3_fu_777_p1) + unsigned(sub_ln1116_1_reg_1308));
    add_ln1116_2_fu_802_p2 <= std_logic_vector(unsigned(zext_ln203_13_reg_1262) + unsigned(tmp_37_cast_fu_794_p3));
    add_ln1116_fu_665_p2 <= std_logic_vector(signed(sext_ln1116_reg_1280) + signed(zext_ln1116_2_fu_661_p1));
    add_ln1117_1_fu_812_p2 <= std_logic_vector(unsigned(zext_ln1116_5_fu_785_p1) + unsigned(sub_ln1117_1_reg_1328));
    add_ln1117_2_fu_817_p2 <= std_logic_vector(unsigned(zext_ln1116_4_fu_781_p1) + unsigned(sub_ln1117_reg_1290));
    add_ln1117_fu_736_p2 <= std_logic_vector(unsigned(zext_ln1117_reg_1285) + unsigned(zext_ln1117_4_fu_732_p1));
    add_ln203_7_fu_553_p2 <= std_logic_vector(unsigned(zext_ln14_reg_1244) + unsigned(zext_ln203_14_fu_549_p1));
    add_ln203_fu_511_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(zext_ln203_fu_507_p1));
    add_ln26_1_fu_696_p2 <= std_logic_vector(unsigned(zext_ln21_fu_645_p1) + unsigned(c_0_reg_342));
    add_ln26_fu_605_p2 <= std_logic_vector(unsigned(zext_ln18_fu_563_p1) + unsigned(r_0_reg_318));
    add_ln899_fu_1024_p2 <= std_logic_vector(signed(ap_const_lv14_3FCB) + signed(trunc_ln894_fu_946_p1));
    add_ln8_fu_477_p2 <= std_logic_vector(unsigned(phi_mul_reg_330) + unsigned(ap_const_lv7_B));
    add_ln908_fu_1074_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCA) + signed(sub_ln894_reg_1419));
    add_ln915_fu_1155_p2 <= std_logic_vector(unsigned(sub_ln915_fu_1150_p2) + unsigned(select_ln915_fu_1142_p3));
    and_ln899_fu_1038_p2 <= (xor_ln899_fu_1018_p2 and p_Result_22_fu_1030_p3);
    and_ln924_fu_1211_p2 <= (or_ln924_fu_1207_p2 and grp_fu_472_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);

    ap_condition_340_assign_proc : process(urem_ln1117_reg_1324)
    begin
                ap_condition_340 <= (not((urem_ln1117_reg_1324 = ap_const_lv4_5)) and not((urem_ln1117_reg_1324 = ap_const_lv4_4)) and not((urem_ln1117_reg_1324 = ap_const_lv4_3)) and not((urem_ln1117_reg_1324 = ap_const_lv4_2)) and not((urem_ln1117_reg_1324 = ap_const_lv4_1)) and not((urem_ln1117_reg_1324 = ap_const_lv4_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln8_fu_483_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_483_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_phi_ln1117_phi_fu_437_p14_assign_proc : process(input_0_V_q0, input_1_V_q0, input_2_V_q0, input_3_V_q0, input_4_V_q0, input_5_V_q0, input_6_0_V_q0, urem_ln1117_reg_1324, ap_CS_fsm_state16, ap_condition_340)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
            if ((ap_const_boolean_1 = ap_condition_340)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_6_0_V_q0;
            elsif ((urem_ln1117_reg_1324 = ap_const_lv4_5)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_5_V_q0;
            elsif ((urem_ln1117_reg_1324 = ap_const_lv4_4)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_4_V_q0;
            elsif ((urem_ln1117_reg_1324 = ap_const_lv4_3)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_3_V_q0;
            elsif ((urem_ln1117_reg_1324 = ap_const_lv4_2)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_2_V_q0;
            elsif ((urem_ln1117_reg_1324 = ap_const_lv4_1)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_1_V_q0;
            elsif ((urem_ln1117_reg_1324 = ap_const_lv4_0)) then 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= input_0_V_q0;
            else 
                ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= "XXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_phi_ln1117_phi_fu_437_p14 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln8_fu_483_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln8_fu_483_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_501_p2 <= std_logic_vector(unsigned(c_0_reg_342) + unsigned(ap_const_lv4_1));
    ch_fu_771_p2 <= std_logic_vector(unsigned(ch_0_reg_423) + unsigned(ap_const_lv3_1));
    conv_2_bias_V_address0 <= zext_ln26_reg_1257(4 - 1 downto 0);

    conv_2_bias_V_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            conv_2_bias_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_2_weights_V_address0 <= zext_ln1116_6_fu_807_p1(10 - 1 downto 0);

    conv_2_weights_V_ce0_assign_proc : process(ap_CS_fsm_state14)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            conv_2_weights_V_ce0 <= ap_const_logic_1;
        else 
            conv_2_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_address0 <= conv_out_V_addr_reg_1267;

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    conv_out_V_d0 <= storemerge_reg_460;

    conv_out_V_we0_assign_proc : process(ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            conv_out_V_we0 <= ap_const_logic_1;
        else 
            conv_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_535_p2 <= std_logic_vector(unsigned(f_0_reg_354) + unsigned(ap_const_lv5_1));
    grp_fu_472_p0 <= p_Result_26_fu_1168_p5;

    grp_fu_702_ap_start_assign_proc : process(ap_CS_fsm_state6, icmp_ln21_fu_649_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln21_fu_649_p2 = ap_const_lv1_0))) then 
            grp_fu_702_ap_start <= ap_const_logic_1;
        else 
            grp_fu_702_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln11_fu_495_p2 <= "1" when (c_0_reg_342 = ap_const_lv4_B) else "0";
    icmp_ln14_fu_529_p2 <= "1" when (f_0_reg_354 = ap_const_lv5_10) else "0";
    icmp_ln18_fu_567_p2 <= "1" when (wr_0_reg_377 = ap_const_lv2_3) else "0";
    icmp_ln21_fu_649_p2 <= "1" when (wc_0_reg_400 = ap_const_lv2_3) else "0";
    icmp_ln24_fu_765_p2 <= "1" when (ch_0_reg_423 = ap_const_lv3_6) else "0";
    icmp_ln885_fu_889_p2 <= "1" when (tmp_V_4_fu_883_p2 = ap_const_lv14_0) else "0";
    icmp_ln897_1_fu_998_p2 <= "0" when (p_Result_21_fu_992_p2 = ap_const_lv14_0) else "1";
    icmp_ln897_fu_966_p2 <= "1" when (signed(tmp_15_fu_956_p4) > signed(ap_const_lv31_0)) else "0";
    icmp_ln8_fu_483_p2 <= "1" when (r_0_reg_318 = ap_const_lv4_B) else "0";
    icmp_ln908_fu_1058_p2 <= "1" when (signed(lsb_index_fu_950_p2) > signed(ap_const_lv32_0)) else "0";
    icmp_ln924_1_fu_1201_p2 <= "1" when (trunc_ln4_fu_1185_p4 = ap_const_lv52_0) else "0";
    icmp_ln924_fu_1195_p2 <= "0" when (add_ln915_fu_1155_p2 = ap_const_lv11_7FF) else "1";
    input_0_V_address0 <= zext_ln1117_6_fu_827_p1(8 - 1 downto 0);

    input_0_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_0_V_ce0 <= ap_const_logic_1;
        else 
            input_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_1_V_address0 <= zext_ln1117_6_fu_827_p1(8 - 1 downto 0);

    input_1_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_1_V_ce0 <= ap_const_logic_1;
        else 
            input_1_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_2_V_address0 <= zext_ln1117_6_fu_827_p1(8 - 1 downto 0);

    input_2_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_2_V_ce0 <= ap_const_logic_1;
        else 
            input_2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_3_V_address0 <= zext_ln1117_6_fu_827_p1(8 - 1 downto 0);

    input_3_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_3_V_ce0 <= ap_const_logic_1;
        else 
            input_3_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_4_V_address0 <= zext_ln1117_6_fu_827_p1(8 - 1 downto 0);

    input_4_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_4_V_ce0 <= ap_const_logic_1;
        else 
            input_4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_5_V_address0 <= zext_ln1117_6_fu_827_p1(8 - 1 downto 0);

    input_5_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_5_V_ce0 <= ap_const_logic_1;
        else 
            input_5_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    input_6_0_V_address0 <= input_6_0_V_addr_reg_1351;

    input_6_0_V_ce0_assign_proc : process(ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            input_6_0_V_ce0 <= ap_const_logic_1;
        else 
            input_6_0_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    
    l_fu_932_p3_proc : process(p_Result_25_fu_924_p3)
    begin
        l_fu_932_p3 <= std_logic_vector(to_unsigned(32, 32));
        for i in 0 to 32 - 1 loop
            if p_Result_25_fu_924_p3(i) = '1' then
                l_fu_932_p3 <= std_logic_vector(to_unsigned(i,32));
                exit;
            end if;
        end loop;
    end process;

    lhs_V_fu_847_p3 <= (p_Val2_19_reg_411 & ap_const_lv8_0);
    lsb_index_fu_950_p2 <= std_logic_vector(signed(ap_const_lv32_FFFFFFCB) + signed(sub_ln894_fu_940_p2));
    lshr_ln897_fu_986_p2 <= std_logic_vector(shift_right(unsigned(ap_const_lv14_3FFF),to_integer(unsigned('0' & zext_ln897_fu_982_p1(14-1 downto 0)))));
    lshr_ln908_fu_1079_p2 <= std_logic_vector(shift_right(unsigned(zext_ln907_1_fu_1071_p1),to_integer(unsigned('0' & add_ln908_fu_1074_p2(31-1 downto 0)))));
    m_1_fu_1104_p3 <= 
        zext_ln908_fu_1085_p1 when (icmp_ln908_reg_1430(0) = '1') else 
        shl_ln908_fu_1098_p2;
    m_2_fu_1114_p2 <= std_logic_vector(unsigned(zext_ln911_fu_1111_p1) + unsigned(m_1_fu_1104_p3));
    m_5_fu_1120_p4 <= m_2_fu_1114_p2(63 downto 1);
    m_6_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(m_5_fu_1120_p4),64));
    m_fu_1068_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1413),64));
    mul_ln1117_fu_712_p0 <= mul_ln1117_fu_712_p00(4 - 1 downto 0);
    mul_ln1117_fu_712_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln26_1_fu_696_p2),10));
    mul_ln1117_fu_712_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1117_fu_712_p0) * unsigned(ap_const_lv10_13), 10));
    or_ln899_fu_1044_p2 <= (and_ln899_fu_1038_p2 or a_fu_1004_p2);
    or_ln924_fu_1207_p2 <= (icmp_ln924_reg_1445 or icmp_ln924_1_reg_1450);
    or_ln_fu_1050_p3 <= (ap_const_lv31_0 & or_ln899_fu_1044_p2);
    p_Result_21_fu_992_p2 <= (tmp_V_5_fu_907_p3 and lshr_ln897_fu_986_p2);
    p_Result_22_fu_1030_p3 <= tmp_V_5_fu_907_p3(to_integer(unsigned(add_ln899_fu_1024_p2)) downto to_integer(unsigned(add_ln899_fu_1024_p2))) when (to_integer(unsigned(add_ln899_fu_1024_p2))>= 0 and to_integer(unsigned(add_ln899_fu_1024_p2))<=13) else "-";
    p_Result_24_fu_895_p3 <= tmp_V_4_reg_1396(13 downto 13);
    p_Result_25_fu_924_p3 <= (ap_const_lv18_3FFFF & p_Result_s_fu_914_p4);
    p_Result_26_fu_1168_p5 <= (tmp_2_fu_1161_p3 & m_6_fu_1130_p1(51 downto 0));
    
    p_Result_s_fu_914_p4_proc : process(tmp_V_5_fu_907_p3)
    variable vlo_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable vhi_cpy : STD_LOGIC_VECTOR(14+32 - 1 downto 0);
    variable v0_cpy : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable p_Result_s_fu_914_p4_i : integer;
    variable section : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable tmp_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    variable resvalue, res_value, res_mask : STD_LOGIC_VECTOR(14 - 1 downto 0);
    begin
        vlo_cpy := (others => '0');
        vlo_cpy(4 - 1 downto 0) := ap_const_lv32_D(4 - 1 downto 0);
        vhi_cpy := (others => '0');
        vhi_cpy(4 - 1 downto 0) := ap_const_lv32_0(4 - 1 downto 0);
        v0_cpy := tmp_V_5_fu_907_p3;
        if (vlo_cpy(4 - 1 downto 0) > vhi_cpy(4 - 1 downto 0)) then
            vhi_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_0(4-1 downto 0)));
            vlo_cpy(4-1 downto 0) := std_logic_vector(14-1-unsigned(ap_const_lv32_D(4-1 downto 0)));
            for p_Result_s_fu_914_p4_i in 0 to 14-1 loop
                v0_cpy(p_Result_s_fu_914_p4_i) := tmp_V_5_fu_907_p3(14-1-p_Result_s_fu_914_p4_i);
            end loop;
        end if;
        res_value := std_logic_vector(shift_right(unsigned(v0_cpy), to_integer(unsigned('0' & vlo_cpy(4-1 downto 0)))));

        section := (others=>'0');
        section(4-1 downto 0) := std_logic_vector(unsigned(vhi_cpy(4-1 downto 0)) - unsigned(vlo_cpy(4-1 downto 0)));
        tmp_mask := (others => '1');
        res_mask := std_logic_vector(shift_left(unsigned(tmp_mask),to_integer(unsigned('0' & section(14-1 downto 0)))));
        res_mask := res_mask(14-2 downto 0) & '0';
        resvalue := res_value and not res_mask;
        p_Result_s_fu_914_p4 <= resvalue(14-1 downto 0);
    end process;

    p_shl3_cast_fu_741_p3 <= (add_ln1117_reg_1318 & ap_const_lv3_0);
    p_shl_fu_674_p3 <= (trunc_ln1116_fu_670_p1 & ap_const_lv3_0);
    r_V_fu_1217_p0 <= sext_ln1116_1_reg_1386(10 - 1 downto 0);
    r_fu_489_p2 <= std_logic_vector(unsigned(r_0_reg_318) + unsigned(ap_const_lv4_1));
    ret_V_fu_863_p2 <= std_logic_vector(unsigned(zext_ln728_fu_855_p1) + unsigned(zext_ln703_fu_859_p1));
    select_ln915_fu_1142_p3 <= 
        ap_const_lv11_3FF when (tmp_17_fu_1134_p3(0) = '1') else 
        ap_const_lv11_3FE;
        sext_ln1116_1_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_2_weights_V_q0),25));

        sext_ln1116_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1116_fu_595_p2),6));

        sext_ln1117_1_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1117_2_fu_817_p2),64));

        sext_ln1117_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_718_p4),4));

        sext_ln1118_1_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(r_V_fu_1217_p2),28));

        sext_ln1265_fu_879_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(conv_2_bias_V_q0),14));

    shl_ln908_fu_1098_p2 <= std_logic_vector(shift_left(unsigned(m_fu_1068_p1),to_integer(unsigned('0' & zext_ln908_1_fu_1094_p1(31-1 downto 0)))));
    sub_ln1116_1_fu_690_p2 <= std_logic_vector(unsigned(p_shl_fu_674_p3) - unsigned(tmp_18_fu_682_p3));
    sub_ln1116_fu_595_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_591_p1) - unsigned(zext_ln1116_fu_579_p1));
    sub_ln1117_1_fu_759_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_741_p3) - unsigned(zext_ln1117_5_fu_755_p1));
    sub_ln1117_fu_639_p2 <= std_logic_vector(unsigned(zext_ln1117_2_fu_635_p1) - unsigned(zext_ln1117_1_fu_623_p1));
    sub_ln894_fu_940_p2 <= std_logic_vector(unsigned(ap_const_lv32_E) - unsigned(l_fu_932_p3));
    sub_ln897_fu_976_p2 <= std_logic_vector(unsigned(ap_const_lv4_4) - unsigned(trunc_ln897_fu_972_p1));
    sub_ln908_fu_1089_p2 <= std_logic_vector(unsigned(ap_const_lv32_36) - unsigned(sub_ln894_reg_1419));
    sub_ln915_fu_1150_p2 <= std_logic_vector(unsigned(ap_const_lv11_6) - unsigned(trunc_ln893_reg_1435));
    tmp_10_fu_517_p3 <= (add_ln203_fu_511_p2 & ap_const_lv4_0);
    tmp_11_fu_583_p3 <= (wr_0_reg_377 & ap_const_lv2_0);
    tmp_12_fu_611_p3 <= (add_ln26_fu_605_p2 & ap_const_lv1_0);
    tmp_13_fu_627_p3 <= (add_ln26_fu_605_p2 & ap_const_lv3_0);
    tmp_15_fu_956_p4 <= lsb_index_fu_950_p2(31 downto 1);
    tmp_16_fu_1010_p3 <= lsb_index_fu_950_p2(31 downto 31);
    tmp_17_fu_1134_p3 <= m_2_fu_1114_p2(54 downto 54);
    tmp_18_fu_682_p3 <= (add_ln1116_fu_665_p2 & ap_const_lv1_0);
    tmp_19_fu_718_p4 <= mul_ln1117_fu_712_p2(9 downto 7);
    tmp_20_fu_748_p3 <= (add_ln1117_reg_1318 & ap_const_lv1_0);
    tmp_2_fu_1161_p3 <= (p_Result_24_reg_1408 & add_ln915_fu_1155_p2);
    tmp_37_cast_fu_794_p3 <= (add_ln1116_1_fu_789_p2 & ap_const_lv4_0);
    tmp_V_4_fu_883_p2 <= std_logic_vector(signed(sext_ln1265_fu_879_p1) + signed(p_Val2_s_reg_365));
    tmp_V_5_fu_907_p3 <= 
        tmp_V_fu_902_p2 when (p_Result_24_fu_895_p3(0) = '1') else 
        tmp_V_4_reg_1396;
    tmp_V_fu_902_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(tmp_V_4_reg_1396));
    trunc_ln1116_fu_670_p1 <= add_ln1116_fu_665_p2(4 - 1 downto 0);
    trunc_ln4_fu_1185_p4 <= m_2_fu_1114_p2(52 downto 1);
    trunc_ln893_fu_1064_p1 <= l_fu_932_p3(11 - 1 downto 0);
    trunc_ln894_fu_946_p1 <= sub_ln894_fu_940_p2(14 - 1 downto 0);
    trunc_ln897_fu_972_p1 <= sub_ln894_fu_940_p2(4 - 1 downto 0);
    wc_fu_655_p2 <= std_logic_vector(unsigned(wc_0_reg_400) + unsigned(ap_const_lv2_1));
    wr_fu_573_p2 <= std_logic_vector(unsigned(wr_0_reg_377) + unsigned(ap_const_lv2_1));
    xor_ln899_fu_1018_p2 <= (tmp_16_fu_1010_p3 xor ap_const_lv1_1);
    zext_ln1116_1_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_11_fu_583_p3),5));
    zext_ln1116_2_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_400),6));
    zext_ln1116_3_fu_777_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_423),7));
    zext_ln1116_4_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_423),8));
    zext_ln1116_5_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ch_0_reg_423),9));
    zext_ln1116_6_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_2_fu_802_p2),64));
    zext_ln1116_fu_579_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_377),5));
    zext_ln1117_1_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_611_p3),8));
    zext_ln1117_2_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_13_fu_627_p3),8));
    zext_ln1117_4_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1117_fu_728_p1),6));
    zext_ln1117_5_fu_755_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_748_p3),9));
    zext_ln1117_6_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1117_1_reg_1346),64));
    zext_ln1117_fu_619_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_611_p3),6));
    zext_ln14_fu_525_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_517_p3),12));
    zext_ln18_fu_563_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wr_0_reg_377),4));
    zext_ln203_13_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_354),11));
    zext_ln203_14_fu_549_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_354),12));
    zext_ln203_15_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_7_fu_553_p2),64));
    zext_ln203_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_0_reg_342),7));
    zext_ln21_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(wc_0_reg_400),4));
    zext_ln26_fu_541_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(f_0_reg_354),64));
    zext_ln703_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1118_1_fu_844_p1),29));
    zext_ln728_fu_855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lhs_V_fu_847_p3),29));
    zext_ln897_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln897_fu_976_p2),14));
    zext_ln907_1_fu_1071_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_V_5_reg_1413),32));
    zext_ln908_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln908_fu_1089_p2),64));
    zext_ln908_fu_1085_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln908_fu_1079_p2),64));
    zext_ln911_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_reg_1425),64));
end behav;
