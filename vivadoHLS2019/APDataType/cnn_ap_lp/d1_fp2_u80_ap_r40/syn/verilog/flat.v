// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module flat (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_q0,
        flat_array_0_V_address0,
        flat_array_0_V_ce0,
        flat_array_0_V_we0,
        flat_array_0_V_d0,
        flat_array_1_V_address0,
        flat_array_1_V_ce0,
        flat_array_1_V_we0,
        flat_array_1_V_d0,
        flat_array_2_V_address0,
        flat_array_2_V_ce0,
        flat_array_2_V_we0,
        flat_array_2_V_d0,
        flat_array_3_V_address0,
        flat_array_3_V_ce0,
        flat_array_3_V_we0,
        flat_array_3_V_d0,
        flat_array_4_V_address0,
        flat_array_4_V_ce0,
        flat_array_4_V_we0,
        flat_array_4_V_d0,
        flat_array_5_V_address0,
        flat_array_5_V_ce0,
        flat_array_5_V_we0,
        flat_array_5_V_d0,
        flat_array_6_V_address0,
        flat_array_6_V_ce0,
        flat_array_6_V_we0,
        flat_array_6_V_d0,
        flat_array_7_V_address0,
        flat_array_7_V_ce0,
        flat_array_7_V_we0,
        flat_array_7_V_d0,
        flat_array_8_V_address0,
        flat_array_8_V_ce0,
        flat_array_8_V_we0,
        flat_array_8_V_d0,
        flat_array_9_V_address0,
        flat_array_9_V_ce0,
        flat_array_9_V_we0,
        flat_array_9_V_d0,
        flat_array_10_V_address0,
        flat_array_10_V_ce0,
        flat_array_10_V_we0,
        flat_array_10_V_d0,
        flat_array_11_V_address0,
        flat_array_11_V_ce0,
        flat_array_11_V_we0,
        flat_array_11_V_d0,
        flat_array_12_V_address0,
        flat_array_12_V_ce0,
        flat_array_12_V_we0,
        flat_array_12_V_d0,
        flat_array_13_V_address0,
        flat_array_13_V_ce0,
        flat_array_13_V_we0,
        flat_array_13_V_d0,
        flat_array_14_V_address0,
        flat_array_14_V_ce0,
        flat_array_14_V_we0,
        flat_array_14_V_d0,
        flat_array_15_V_address0,
        flat_array_15_V_ce0,
        flat_array_15_V_we0,
        flat_array_15_V_d0,
        flat_array_16_V_address0,
        flat_array_16_V_ce0,
        flat_array_16_V_we0,
        flat_array_16_V_d0,
        flat_array_17_V_address0,
        flat_array_17_V_ce0,
        flat_array_17_V_we0,
        flat_array_17_V_d0,
        flat_array_18_V_address0,
        flat_array_18_V_ce0,
        flat_array_18_V_we0,
        flat_array_18_V_d0,
        flat_array_19_V_address0,
        flat_array_19_V_ce0,
        flat_array_19_V_we0,
        flat_array_19_V_d0,
        flat_array_20_V_address0,
        flat_array_20_V_ce0,
        flat_array_20_V_we0,
        flat_array_20_V_d0,
        flat_array_21_V_address0,
        flat_array_21_V_ce0,
        flat_array_21_V_we0,
        flat_array_21_V_d0,
        flat_array_22_V_address0,
        flat_array_22_V_ce0,
        flat_array_22_V_we0,
        flat_array_22_V_d0,
        flat_array_23_V_address0,
        flat_array_23_V_ce0,
        flat_array_23_V_we0,
        flat_array_23_V_d0,
        flat_array_24_V_address0,
        flat_array_24_V_ce0,
        flat_array_24_V_we0,
        flat_array_24_V_d0,
        flat_array_25_V_address0,
        flat_array_25_V_ce0,
        flat_array_25_V_we0,
        flat_array_25_V_d0,
        flat_array_26_V_address0,
        flat_array_26_V_ce0,
        flat_array_26_V_we0,
        flat_array_26_V_d0,
        flat_array_27_V_address0,
        flat_array_27_V_ce0,
        flat_array_27_V_we0,
        flat_array_27_V_d0,
        flat_array_28_V_address0,
        flat_array_28_V_ce0,
        flat_array_28_V_we0,
        flat_array_28_V_d0,
        flat_array_29_V_address0,
        flat_array_29_V_ce0,
        flat_array_29_V_we0,
        flat_array_29_V_d0,
        flat_array_30_V_address0,
        flat_array_30_V_ce0,
        flat_array_30_V_we0,
        flat_array_30_V_d0,
        flat_array_31_V_address0,
        flat_array_31_V_ce0,
        flat_array_31_V_we0,
        flat_array_31_V_d0,
        flat_array_32_V_address0,
        flat_array_32_V_ce0,
        flat_array_32_V_we0,
        flat_array_32_V_d0,
        flat_array_33_V_address0,
        flat_array_33_V_ce0,
        flat_array_33_V_we0,
        flat_array_33_V_d0,
        flat_array_34_V_address0,
        flat_array_34_V_ce0,
        flat_array_34_V_we0,
        flat_array_34_V_d0,
        flat_array_35_V_address0,
        flat_array_35_V_ce0,
        flat_array_35_V_we0,
        flat_array_35_V_d0,
        flat_array_36_V_address0,
        flat_array_36_V_ce0,
        flat_array_36_V_we0,
        flat_array_36_V_d0,
        flat_array_37_V_address0,
        flat_array_37_V_ce0,
        flat_array_37_V_we0,
        flat_array_37_V_d0,
        flat_array_38_V_address0,
        flat_array_38_V_ce0,
        flat_array_38_V_we0,
        flat_array_38_V_d0,
        flat_array_39_V_address0,
        flat_array_39_V_ce0,
        flat_array_39_V_we0,
        flat_array_39_V_d0
);

parameter    ap_ST_fsm_state1 = 16'd1;
parameter    ap_ST_fsm_state2 = 16'd2;
parameter    ap_ST_fsm_state3 = 16'd4;
parameter    ap_ST_fsm_state4 = 16'd8;
parameter    ap_ST_fsm_state5 = 16'd16;
parameter    ap_ST_fsm_state6 = 16'd32;
parameter    ap_ST_fsm_state7 = 16'd64;
parameter    ap_ST_fsm_state8 = 16'd128;
parameter    ap_ST_fsm_state9 = 16'd256;
parameter    ap_ST_fsm_state10 = 16'd512;
parameter    ap_ST_fsm_state11 = 16'd1024;
parameter    ap_ST_fsm_state12 = 16'd2048;
parameter    ap_ST_fsm_state13 = 16'd4096;
parameter    ap_ST_fsm_state14 = 16'd8192;
parameter    ap_ST_fsm_state15 = 16'd16384;
parameter    ap_ST_fsm_state16 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [8:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
input  [13:0] max_pool_out_V_q0;
output  [3:0] flat_array_0_V_address0;
output   flat_array_0_V_ce0;
output   flat_array_0_V_we0;
output  [13:0] flat_array_0_V_d0;
output  [3:0] flat_array_1_V_address0;
output   flat_array_1_V_ce0;
output   flat_array_1_V_we0;
output  [13:0] flat_array_1_V_d0;
output  [3:0] flat_array_2_V_address0;
output   flat_array_2_V_ce0;
output   flat_array_2_V_we0;
output  [13:0] flat_array_2_V_d0;
output  [3:0] flat_array_3_V_address0;
output   flat_array_3_V_ce0;
output   flat_array_3_V_we0;
output  [13:0] flat_array_3_V_d0;
output  [3:0] flat_array_4_V_address0;
output   flat_array_4_V_ce0;
output   flat_array_4_V_we0;
output  [13:0] flat_array_4_V_d0;
output  [3:0] flat_array_5_V_address0;
output   flat_array_5_V_ce0;
output   flat_array_5_V_we0;
output  [13:0] flat_array_5_V_d0;
output  [3:0] flat_array_6_V_address0;
output   flat_array_6_V_ce0;
output   flat_array_6_V_we0;
output  [13:0] flat_array_6_V_d0;
output  [3:0] flat_array_7_V_address0;
output   flat_array_7_V_ce0;
output   flat_array_7_V_we0;
output  [13:0] flat_array_7_V_d0;
output  [3:0] flat_array_8_V_address0;
output   flat_array_8_V_ce0;
output   flat_array_8_V_we0;
output  [13:0] flat_array_8_V_d0;
output  [3:0] flat_array_9_V_address0;
output   flat_array_9_V_ce0;
output   flat_array_9_V_we0;
output  [13:0] flat_array_9_V_d0;
output  [3:0] flat_array_10_V_address0;
output   flat_array_10_V_ce0;
output   flat_array_10_V_we0;
output  [13:0] flat_array_10_V_d0;
output  [3:0] flat_array_11_V_address0;
output   flat_array_11_V_ce0;
output   flat_array_11_V_we0;
output  [13:0] flat_array_11_V_d0;
output  [3:0] flat_array_12_V_address0;
output   flat_array_12_V_ce0;
output   flat_array_12_V_we0;
output  [13:0] flat_array_12_V_d0;
output  [3:0] flat_array_13_V_address0;
output   flat_array_13_V_ce0;
output   flat_array_13_V_we0;
output  [13:0] flat_array_13_V_d0;
output  [3:0] flat_array_14_V_address0;
output   flat_array_14_V_ce0;
output   flat_array_14_V_we0;
output  [13:0] flat_array_14_V_d0;
output  [3:0] flat_array_15_V_address0;
output   flat_array_15_V_ce0;
output   flat_array_15_V_we0;
output  [13:0] flat_array_15_V_d0;
output  [3:0] flat_array_16_V_address0;
output   flat_array_16_V_ce0;
output   flat_array_16_V_we0;
output  [13:0] flat_array_16_V_d0;
output  [3:0] flat_array_17_V_address0;
output   flat_array_17_V_ce0;
output   flat_array_17_V_we0;
output  [13:0] flat_array_17_V_d0;
output  [3:0] flat_array_18_V_address0;
output   flat_array_18_V_ce0;
output   flat_array_18_V_we0;
output  [13:0] flat_array_18_V_d0;
output  [3:0] flat_array_19_V_address0;
output   flat_array_19_V_ce0;
output   flat_array_19_V_we0;
output  [13:0] flat_array_19_V_d0;
output  [3:0] flat_array_20_V_address0;
output   flat_array_20_V_ce0;
output   flat_array_20_V_we0;
output  [13:0] flat_array_20_V_d0;
output  [3:0] flat_array_21_V_address0;
output   flat_array_21_V_ce0;
output   flat_array_21_V_we0;
output  [13:0] flat_array_21_V_d0;
output  [3:0] flat_array_22_V_address0;
output   flat_array_22_V_ce0;
output   flat_array_22_V_we0;
output  [13:0] flat_array_22_V_d0;
output  [3:0] flat_array_23_V_address0;
output   flat_array_23_V_ce0;
output   flat_array_23_V_we0;
output  [13:0] flat_array_23_V_d0;
output  [3:0] flat_array_24_V_address0;
output   flat_array_24_V_ce0;
output   flat_array_24_V_we0;
output  [13:0] flat_array_24_V_d0;
output  [3:0] flat_array_25_V_address0;
output   flat_array_25_V_ce0;
output   flat_array_25_V_we0;
output  [13:0] flat_array_25_V_d0;
output  [3:0] flat_array_26_V_address0;
output   flat_array_26_V_ce0;
output   flat_array_26_V_we0;
output  [13:0] flat_array_26_V_d0;
output  [3:0] flat_array_27_V_address0;
output   flat_array_27_V_ce0;
output   flat_array_27_V_we0;
output  [13:0] flat_array_27_V_d0;
output  [3:0] flat_array_28_V_address0;
output   flat_array_28_V_ce0;
output   flat_array_28_V_we0;
output  [13:0] flat_array_28_V_d0;
output  [3:0] flat_array_29_V_address0;
output   flat_array_29_V_ce0;
output   flat_array_29_V_we0;
output  [13:0] flat_array_29_V_d0;
output  [3:0] flat_array_30_V_address0;
output   flat_array_30_V_ce0;
output   flat_array_30_V_we0;
output  [13:0] flat_array_30_V_d0;
output  [3:0] flat_array_31_V_address0;
output   flat_array_31_V_ce0;
output   flat_array_31_V_we0;
output  [13:0] flat_array_31_V_d0;
output  [3:0] flat_array_32_V_address0;
output   flat_array_32_V_ce0;
output   flat_array_32_V_we0;
output  [13:0] flat_array_32_V_d0;
output  [3:0] flat_array_33_V_address0;
output   flat_array_33_V_ce0;
output   flat_array_33_V_we0;
output  [13:0] flat_array_33_V_d0;
output  [3:0] flat_array_34_V_address0;
output   flat_array_34_V_ce0;
output   flat_array_34_V_we0;
output  [13:0] flat_array_34_V_d0;
output  [3:0] flat_array_35_V_address0;
output   flat_array_35_V_ce0;
output   flat_array_35_V_we0;
output  [13:0] flat_array_35_V_d0;
output  [3:0] flat_array_36_V_address0;
output   flat_array_36_V_ce0;
output   flat_array_36_V_we0;
output  [13:0] flat_array_36_V_d0;
output  [3:0] flat_array_37_V_address0;
output   flat_array_37_V_ce0;
output   flat_array_37_V_we0;
output  [13:0] flat_array_37_V_d0;
output  [3:0] flat_array_38_V_address0;
output   flat_array_38_V_ce0;
output   flat_array_38_V_we0;
output  [13:0] flat_array_38_V_d0;
output  [3:0] flat_array_39_V_address0;
output   flat_array_39_V_ce0;
output   flat_array_39_V_we0;
output  [13:0] flat_array_39_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg max_pool_out_V_ce0;
reg flat_array_0_V_ce0;
reg flat_array_0_V_we0;
reg flat_array_1_V_ce0;
reg flat_array_1_V_we0;
reg flat_array_2_V_ce0;
reg flat_array_2_V_we0;
reg flat_array_3_V_ce0;
reg flat_array_3_V_we0;
reg flat_array_4_V_ce0;
reg flat_array_4_V_we0;
reg flat_array_5_V_ce0;
reg flat_array_5_V_we0;
reg flat_array_6_V_ce0;
reg flat_array_6_V_we0;
reg flat_array_7_V_ce0;
reg flat_array_7_V_we0;
reg flat_array_8_V_ce0;
reg flat_array_8_V_we0;
reg flat_array_9_V_ce0;
reg flat_array_9_V_we0;
reg flat_array_10_V_ce0;
reg flat_array_10_V_we0;
reg flat_array_11_V_ce0;
reg flat_array_11_V_we0;
reg flat_array_12_V_ce0;
reg flat_array_12_V_we0;
reg flat_array_13_V_ce0;
reg flat_array_13_V_we0;
reg flat_array_14_V_ce0;
reg flat_array_14_V_we0;
reg flat_array_15_V_ce0;
reg flat_array_15_V_we0;
reg flat_array_16_V_ce0;
reg flat_array_16_V_we0;
reg flat_array_17_V_ce0;
reg flat_array_17_V_we0;
reg flat_array_18_V_ce0;
reg flat_array_18_V_we0;
reg flat_array_19_V_ce0;
reg flat_array_19_V_we0;
reg flat_array_20_V_ce0;
reg flat_array_20_V_we0;
reg flat_array_21_V_ce0;
reg flat_array_21_V_we0;
reg flat_array_22_V_ce0;
reg flat_array_22_V_we0;
reg flat_array_23_V_ce0;
reg flat_array_23_V_we0;
reg flat_array_24_V_ce0;
reg flat_array_24_V_we0;
reg flat_array_25_V_ce0;
reg flat_array_25_V_we0;
reg flat_array_26_V_ce0;
reg flat_array_26_V_we0;
reg flat_array_27_V_ce0;
reg flat_array_27_V_we0;
reg flat_array_28_V_ce0;
reg flat_array_28_V_we0;
reg flat_array_29_V_ce0;
reg flat_array_29_V_we0;
reg flat_array_30_V_ce0;
reg flat_array_30_V_we0;
reg flat_array_31_V_ce0;
reg flat_array_31_V_we0;
reg flat_array_32_V_ce0;
reg flat_array_32_V_we0;
reg flat_array_33_V_ce0;
reg flat_array_33_V_we0;
reg flat_array_34_V_ce0;
reg flat_array_34_V_we0;
reg flat_array_35_V_ce0;
reg flat_array_35_V_we0;
reg flat_array_36_V_ce0;
reg flat_array_36_V_we0;
reg flat_array_37_V_ce0;
reg flat_array_37_V_we0;
reg flat_array_38_V_ce0;
reg flat_array_38_V_we0;
reg flat_array_39_V_ce0;
reg flat_array_39_V_we0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] r_fu_864_p2;
reg   [2:0] r_reg_1045;
wire    ap_CS_fsm_state2;
wire   [8:0] i_fu_870_p2;
reg   [8:0] i_reg_1050;
wire   [0:0] icmp_ln6_fu_858_p2;
wire   [5:0] add_ln203_fu_892_p2;
reg   [5:0] add_ln203_reg_1055;
wire   [2:0] c_fu_904_p2;
reg   [2:0] c_reg_1063;
wire    ap_CS_fsm_state3;
wire   [8:0] add_ln15_fu_910_p2;
reg   [8:0] add_ln15_reg_1068;
wire   [0:0] icmp_ln9_fu_898_p2;
wire   [9:0] tmp_15_cast_fu_925_p3;
reg   [9:0] tmp_15_cast_reg_1073;
wire   [4:0] f_fu_939_p2;
reg   [4:0] f_reg_1081;
wire    ap_CS_fsm_state4;
wire   [9:0] add_ln203_5_fu_949_p2;
reg   [9:0] add_ln203_5_reg_1086;
wire   [0:0] icmp_ln12_fu_933_p2;
wire    ap_CS_fsm_state15;
wire   [8:0] add_ln15_1_fu_1029_p2;
wire    ap_CS_fsm_state16;
reg   [8:0] i_0_reg_791;
reg   [2:0] r_0_reg_803;
reg   [8:0] i_1_reg_814;
reg   [2:0] c_0_reg_825;
reg   [8:0] i_2_reg_836;
reg   [4:0] f_0_reg_847;
wire   [63:0] zext_ln203_10_fu_960_p1;
wire   [63:0] zext_ln203_fu_985_p1;
wire   [6:0] trunc_ln203_fu_964_p1;
wire   [4:0] tmp_s_fu_880_p3;
wire   [5:0] zext_ln203_6_fu_876_p1;
wire   [5:0] zext_ln203_7_fu_888_p1;
wire   [5:0] zext_ln203_8_fu_916_p1;
wire   [5:0] add_ln203_4_fu_920_p2;
wire   [9:0] zext_ln203_9_fu_945_p1;
wire   [6:0] grp_fu_954_p1;
wire   [6:0] grp_fu_954_p2;
wire   [19:0] mul_ln203_fu_1035_p2;
wire   [4:0] tmp_3_fu_972_p4;
wire  signed [8:0] sext_ln203_fu_981_p1;
wire   [10:0] mul_ln203_fu_1035_p0;
wire   [8:0] mul_ln203_fu_1035_p1;
reg    grp_fu_954_ap_start;
wire    grp_fu_954_ap_done;
reg   [15:0] ap_NS_fsm;
wire   [19:0] mul_ln203_fu_1035_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
end

cnn_urem_9ns_7ns_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 7 ))
cnn_urem_9ns_7ns_ibs_U20(
    .clk(ap_clk),
    .reset(ap_rst),
    .start(grp_fu_954_ap_start),
    .done(grp_fu_954_ap_done),
    .din0(i_2_reg_836),
    .din1(grp_fu_954_p1),
    .ce(1'b1),
    .dout(grp_fu_954_p2)
);

cnn_mul_mul_11ns_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 9 ),
    .dout_WIDTH( 20 ))
cnn_mul_mul_11ns_jbC_U21(
    .din0(mul_ln203_fu_1035_p0),
    .din1(mul_ln203_fu_1035_p1),
    .dout(mul_ln203_fu_1035_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_933_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        c_0_reg_825 <= c_reg_1063;
    end else if (((icmp_ln6_fu_858_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_0_reg_825 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        f_0_reg_847 <= f_reg_1081;
    end else if (((icmp_ln9_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        f_0_reg_847 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_791 <= i_reg_1050;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_0_reg_791 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_933_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_814 <= add_ln15_reg_1068;
    end else if (((icmp_ln6_fu_858_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_1_reg_814 <= i_0_reg_791;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        i_2_reg_836 <= add_ln15_1_fu_1029_p2;
    end else if (((icmp_ln9_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_2_reg_836 <= i_1_reg_814;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        r_0_reg_803 <= r_reg_1045;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_803 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln9_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        add_ln15_reg_1068 <= add_ln15_fu_910_p2;
        tmp_15_cast_reg_1073[9 : 4] <= tmp_15_cast_fu_925_p3[9 : 4];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln12_fu_933_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln203_5_reg_1086 <= add_ln203_5_fu_949_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln6_fu_858_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln203_reg_1055 <= add_ln203_fu_892_p2;
        i_reg_1050 <= i_fu_870_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_reg_1063 <= c_fu_904_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        f_reg_1081 <= f_fu_939_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_reg_1045 <= r_fu_864_p2;
    end
end

always @ (*) begin
    if ((((icmp_ln6_fu_858_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln6_fu_858_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_0_V_ce0 = 1'b1;
    end else begin
        flat_array_0_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd0) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_0_V_we0 = 1'b1;
    end else begin
        flat_array_0_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_10_V_ce0 = 1'b1;
    end else begin
        flat_array_10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd10) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_10_V_we0 = 1'b1;
    end else begin
        flat_array_10_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_11_V_ce0 = 1'b1;
    end else begin
        flat_array_11_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd11) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_11_V_we0 = 1'b1;
    end else begin
        flat_array_11_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_12_V_ce0 = 1'b1;
    end else begin
        flat_array_12_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd12) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_12_V_we0 = 1'b1;
    end else begin
        flat_array_12_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_13_V_ce0 = 1'b1;
    end else begin
        flat_array_13_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd13) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_13_V_we0 = 1'b1;
    end else begin
        flat_array_13_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_14_V_ce0 = 1'b1;
    end else begin
        flat_array_14_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd14) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_14_V_we0 = 1'b1;
    end else begin
        flat_array_14_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_15_V_ce0 = 1'b1;
    end else begin
        flat_array_15_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd15) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_15_V_we0 = 1'b1;
    end else begin
        flat_array_15_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_16_V_ce0 = 1'b1;
    end else begin
        flat_array_16_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd16) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_16_V_we0 = 1'b1;
    end else begin
        flat_array_16_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_17_V_ce0 = 1'b1;
    end else begin
        flat_array_17_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd17) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_17_V_we0 = 1'b1;
    end else begin
        flat_array_17_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_18_V_ce0 = 1'b1;
    end else begin
        flat_array_18_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd18) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_18_V_we0 = 1'b1;
    end else begin
        flat_array_18_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_19_V_ce0 = 1'b1;
    end else begin
        flat_array_19_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd19) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_19_V_we0 = 1'b1;
    end else begin
        flat_array_19_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_1_V_ce0 = 1'b1;
    end else begin
        flat_array_1_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd1) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_1_V_we0 = 1'b1;
    end else begin
        flat_array_1_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_20_V_ce0 = 1'b1;
    end else begin
        flat_array_20_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd20) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_20_V_we0 = 1'b1;
    end else begin
        flat_array_20_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_21_V_ce0 = 1'b1;
    end else begin
        flat_array_21_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd21) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_21_V_we0 = 1'b1;
    end else begin
        flat_array_21_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_22_V_ce0 = 1'b1;
    end else begin
        flat_array_22_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd22) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_22_V_we0 = 1'b1;
    end else begin
        flat_array_22_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_23_V_ce0 = 1'b1;
    end else begin
        flat_array_23_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd23) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_23_V_we0 = 1'b1;
    end else begin
        flat_array_23_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_24_V_ce0 = 1'b1;
    end else begin
        flat_array_24_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd24) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_24_V_we0 = 1'b1;
    end else begin
        flat_array_24_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_25_V_ce0 = 1'b1;
    end else begin
        flat_array_25_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd25) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_25_V_we0 = 1'b1;
    end else begin
        flat_array_25_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_26_V_ce0 = 1'b1;
    end else begin
        flat_array_26_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd26) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_26_V_we0 = 1'b1;
    end else begin
        flat_array_26_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_27_V_ce0 = 1'b1;
    end else begin
        flat_array_27_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd27) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_27_V_we0 = 1'b1;
    end else begin
        flat_array_27_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_28_V_ce0 = 1'b1;
    end else begin
        flat_array_28_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd28) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_28_V_we0 = 1'b1;
    end else begin
        flat_array_28_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_29_V_ce0 = 1'b1;
    end else begin
        flat_array_29_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd29) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_29_V_we0 = 1'b1;
    end else begin
        flat_array_29_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_2_V_ce0 = 1'b1;
    end else begin
        flat_array_2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd2) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_2_V_we0 = 1'b1;
    end else begin
        flat_array_2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_30_V_ce0 = 1'b1;
    end else begin
        flat_array_30_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd30) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_30_V_we0 = 1'b1;
    end else begin
        flat_array_30_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_31_V_ce0 = 1'b1;
    end else begin
        flat_array_31_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd31) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_31_V_we0 = 1'b1;
    end else begin
        flat_array_31_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_32_V_ce0 = 1'b1;
    end else begin
        flat_array_32_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd32) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_32_V_we0 = 1'b1;
    end else begin
        flat_array_32_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_33_V_ce0 = 1'b1;
    end else begin
        flat_array_33_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd33) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_33_V_we0 = 1'b1;
    end else begin
        flat_array_33_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_34_V_ce0 = 1'b1;
    end else begin
        flat_array_34_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd34) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_34_V_we0 = 1'b1;
    end else begin
        flat_array_34_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_35_V_ce0 = 1'b1;
    end else begin
        flat_array_35_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd35) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_35_V_we0 = 1'b1;
    end else begin
        flat_array_35_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_36_V_ce0 = 1'b1;
    end else begin
        flat_array_36_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd36) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_36_V_we0 = 1'b1;
    end else begin
        flat_array_36_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_37_V_ce0 = 1'b1;
    end else begin
        flat_array_37_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd37) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_37_V_we0 = 1'b1;
    end else begin
        flat_array_37_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_38_V_ce0 = 1'b1;
    end else begin
        flat_array_38_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd38) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_38_V_we0 = 1'b1;
    end else begin
        flat_array_38_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_39_V_ce0 = 1'b1;
    end else begin
        flat_array_39_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((~(trunc_ln203_fu_964_p1 == 7'd0) & ~(trunc_ln203_fu_964_p1 == 7'd1) & ~(trunc_ln203_fu_964_p1 == 7'd2) & ~(trunc_ln203_fu_964_p1 == 7'd3) & ~(trunc_ln203_fu_964_p1 == 7'd4) & ~(trunc_ln203_fu_964_p1 == 7'd5) & ~(trunc_ln203_fu_964_p1 == 7'd6) & ~(trunc_ln203_fu_964_p1 == 7'd7) & ~(trunc_ln203_fu_964_p1 == 7'd8) & ~(trunc_ln203_fu_964_p1 == 7'd9) & ~(trunc_ln203_fu_964_p1 == 7'd10) & ~(trunc_ln203_fu_964_p1 == 7'd11) & ~(trunc_ln203_fu_964_p1 == 7'd12) & ~(trunc_ln203_fu_964_p1 == 7'd13) & ~(trunc_ln203_fu_964_p1 == 7'd14) & ~(trunc_ln203_fu_964_p1 == 7'd15) & ~(trunc_ln203_fu_964_p1 == 7'd16) & ~(trunc_ln203_fu_964_p1 == 7'd17) & ~(trunc_ln203_fu_964_p1 == 7'd18) & ~(trunc_ln203_fu_964_p1 == 7'd19) & ~(trunc_ln203_fu_964_p1 == 7'd20) & ~(trunc_ln203_fu_964_p1 == 7'd21) & ~(trunc_ln203_fu_964_p1 == 7'd22) & ~(trunc_ln203_fu_964_p1 == 7'd23) & ~(trunc_ln203_fu_964_p1 == 7'd24) & ~(trunc_ln203_fu_964_p1 == 7'd25) & ~(trunc_ln203_fu_964_p1 == 7'd26) & ~(trunc_ln203_fu_964_p1 == 7'd27) & ~(trunc_ln203_fu_964_p1 == 7'd28) & ~(trunc_ln203_fu_964_p1 == 7'd29) & ~(trunc_ln203_fu_964_p1 == 7'd30) & ~(trunc_ln203_fu_964_p1 == 7'd31) & ~(trunc_ln203_fu_964_p1 == 7'd32) & ~(trunc_ln203_fu_964_p1 == 7'd33) & ~(trunc_ln203_fu_964_p1 == 7'd34) & ~(trunc_ln203_fu_964_p1 == 7'd35) & ~(trunc_ln203_fu_964_p1 == 7'd36) & ~(trunc_ln203_fu_964_p1 == 7'd37) & ~(trunc_ln203_fu_964_p1 == 7'd38) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_39_V_we0 = 1'b1;
    end else begin
        flat_array_39_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_3_V_ce0 = 1'b1;
    end else begin
        flat_array_3_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd3) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_3_V_we0 = 1'b1;
    end else begin
        flat_array_3_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_4_V_ce0 = 1'b1;
    end else begin
        flat_array_4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd4) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_4_V_we0 = 1'b1;
    end else begin
        flat_array_4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_5_V_ce0 = 1'b1;
    end else begin
        flat_array_5_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd5) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_5_V_we0 = 1'b1;
    end else begin
        flat_array_5_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_6_V_ce0 = 1'b1;
    end else begin
        flat_array_6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd6) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_6_V_we0 = 1'b1;
    end else begin
        flat_array_6_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_7_V_ce0 = 1'b1;
    end else begin
        flat_array_7_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd7) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_7_V_we0 = 1'b1;
    end else begin
        flat_array_7_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_8_V_ce0 = 1'b1;
    end else begin
        flat_array_8_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd8) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_8_V_we0 = 1'b1;
    end else begin
        flat_array_8_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        flat_array_9_V_ce0 = 1'b1;
    end else begin
        flat_array_9_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((trunc_ln203_fu_964_p1 == 7'd9) & (1'b1 == ap_CS_fsm_state16))) begin
        flat_array_9_V_we0 = 1'b1;
    end else begin
        flat_array_9_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln12_fu_933_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_fu_954_ap_start = 1'b1;
    end else begin
        grp_fu_954_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln6_fu_858_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln9_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln12_fu_933_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_1029_p2 = (i_2_reg_836 + 9'd1);

assign add_ln15_fu_910_p2 = (i_1_reg_814 + 9'd16);

assign add_ln203_4_fu_920_p2 = (zext_ln203_8_fu_916_p1 + add_ln203_reg_1055);

assign add_ln203_5_fu_949_p2 = (tmp_15_cast_reg_1073 + zext_ln203_9_fu_945_p1);

assign add_ln203_fu_892_p2 = (zext_ln203_6_fu_876_p1 + zext_ln203_7_fu_888_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign c_fu_904_p2 = (c_0_reg_825 + 3'd1);

assign f_fu_939_p2 = (f_0_reg_847 + 5'd1);

assign flat_array_0_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_0_V_d0 = max_pool_out_V_q0;

assign flat_array_10_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_10_V_d0 = max_pool_out_V_q0;

assign flat_array_11_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_11_V_d0 = max_pool_out_V_q0;

assign flat_array_12_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_12_V_d0 = max_pool_out_V_q0;

assign flat_array_13_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_13_V_d0 = max_pool_out_V_q0;

assign flat_array_14_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_14_V_d0 = max_pool_out_V_q0;

assign flat_array_15_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_15_V_d0 = max_pool_out_V_q0;

assign flat_array_16_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_16_V_d0 = max_pool_out_V_q0;

assign flat_array_17_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_17_V_d0 = max_pool_out_V_q0;

assign flat_array_18_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_18_V_d0 = max_pool_out_V_q0;

assign flat_array_19_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_19_V_d0 = max_pool_out_V_q0;

assign flat_array_1_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_1_V_d0 = max_pool_out_V_q0;

assign flat_array_20_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_20_V_d0 = max_pool_out_V_q0;

assign flat_array_21_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_21_V_d0 = max_pool_out_V_q0;

assign flat_array_22_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_22_V_d0 = max_pool_out_V_q0;

assign flat_array_23_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_23_V_d0 = max_pool_out_V_q0;

assign flat_array_24_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_24_V_d0 = max_pool_out_V_q0;

assign flat_array_25_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_25_V_d0 = max_pool_out_V_q0;

assign flat_array_26_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_26_V_d0 = max_pool_out_V_q0;

assign flat_array_27_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_27_V_d0 = max_pool_out_V_q0;

assign flat_array_28_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_28_V_d0 = max_pool_out_V_q0;

assign flat_array_29_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_29_V_d0 = max_pool_out_V_q0;

assign flat_array_2_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_2_V_d0 = max_pool_out_V_q0;

assign flat_array_30_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_30_V_d0 = max_pool_out_V_q0;

assign flat_array_31_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_31_V_d0 = max_pool_out_V_q0;

assign flat_array_32_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_32_V_d0 = max_pool_out_V_q0;

assign flat_array_33_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_33_V_d0 = max_pool_out_V_q0;

assign flat_array_34_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_34_V_d0 = max_pool_out_V_q0;

assign flat_array_35_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_35_V_d0 = max_pool_out_V_q0;

assign flat_array_36_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_36_V_d0 = max_pool_out_V_q0;

assign flat_array_37_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_37_V_d0 = max_pool_out_V_q0;

assign flat_array_38_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_38_V_d0 = max_pool_out_V_q0;

assign flat_array_39_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_39_V_d0 = max_pool_out_V_q0;

assign flat_array_3_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_3_V_d0 = max_pool_out_V_q0;

assign flat_array_4_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_4_V_d0 = max_pool_out_V_q0;

assign flat_array_5_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_5_V_d0 = max_pool_out_V_q0;

assign flat_array_6_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_6_V_d0 = max_pool_out_V_q0;

assign flat_array_7_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_7_V_d0 = max_pool_out_V_q0;

assign flat_array_8_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_8_V_d0 = max_pool_out_V_q0;

assign flat_array_9_V_address0 = zext_ln203_fu_985_p1;

assign flat_array_9_V_d0 = max_pool_out_V_q0;

assign grp_fu_954_p1 = 9'd40;

assign i_fu_870_p2 = (i_0_reg_791 + 9'd80);

assign icmp_ln12_fu_933_p2 = ((f_0_reg_847 == 5'd16) ? 1'b1 : 1'b0);

assign icmp_ln6_fu_858_p2 = ((r_0_reg_803 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln9_fu_898_p2 = ((c_0_reg_825 == 3'd5) ? 1'b1 : 1'b0);

assign max_pool_out_V_address0 = zext_ln203_10_fu_960_p1;

assign mul_ln203_fu_1035_p0 = 20'd820;

assign mul_ln203_fu_1035_p1 = mul_ln203_fu_1035_p10;

assign mul_ln203_fu_1035_p10 = i_2_reg_836;

assign r_fu_864_p2 = (r_0_reg_803 + 3'd1);

assign sext_ln203_fu_981_p1 = $signed(tmp_3_fu_972_p4);

assign tmp_15_cast_fu_925_p3 = {{add_ln203_4_fu_920_p2}, {4'd0}};

assign tmp_3_fu_972_p4 = {{mul_ln203_fu_1035_p2[19:15]}};

assign tmp_s_fu_880_p3 = {{r_0_reg_803}, {2'd0}};

assign trunc_ln203_fu_964_p1 = grp_fu_954_p2[6:0];

assign zext_ln203_10_fu_960_p1 = add_ln203_5_reg_1086;

assign zext_ln203_6_fu_876_p1 = r_0_reg_803;

assign zext_ln203_7_fu_888_p1 = tmp_s_fu_880_p3;

assign zext_ln203_8_fu_916_p1 = c_0_reg_825;

assign zext_ln203_9_fu_945_p1 = f_0_reg_847;

assign zext_ln203_fu_985_p1 = $unsigned(sext_ln203_fu_981_p1);

always @ (posedge ap_clk) begin
    tmp_15_cast_reg_1073[3:0] <= 4'b0000;
end

endmodule //flat
