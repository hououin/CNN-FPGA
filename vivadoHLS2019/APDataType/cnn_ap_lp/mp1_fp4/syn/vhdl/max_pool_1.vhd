-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity max_pool_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    conv_out_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce0 : OUT STD_LOGIC;
    conv_out_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
    conv_out_V_address1 : OUT STD_LOGIC_VECTOR (11 downto 0);
    conv_out_V_ce1 : OUT STD_LOGIC;
    conv_out_V_q1 : IN STD_LOGIC_VECTOR (13 downto 0);
    max_pool_out_V_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    max_pool_out_V_ce0 : OUT STD_LOGIC;
    max_pool_out_V_we0 : OUT STD_LOGIC;
    max_pool_out_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of max_pool_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv11_7EC : STD_LOGIC_VECTOR (10 downto 0) := "11111101100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv9_152 : STD_LOGIC_VECTOR (8 downto 0) := "101010010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv6_1A : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv8_D : STD_LOGIC_VECTOR (7 downto 0) := "00001101";
    constant ap_const_lv10_1A : STD_LOGIC_VECTOR (9 downto 0) := "0000011010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten59_reg_128 : STD_LOGIC_VECTOR (10 downto 0);
    signal f_0_reg_139 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten22_reg_150 : STD_LOGIC_VECTOR (8 downto 0);
    signal r_0_reg_161 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_reg_173 : STD_LOGIC_VECTOR (5 downto 0);
    signal c_0_reg_184 : STD_LOGIC_VECTOR (3 downto 0);
    signal max_0_reg_195 : STD_LOGIC_VECTOR (13 downto 0);
    signal mpr_0_reg_207 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln2_fu_218_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal shl_ln2_reg_698 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln27_fu_226_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_reg_703 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln10_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_708 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln10_reg_708_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln10_fu_238_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln13_fu_250_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln13_reg_717 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_3_fu_256_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln29_3_reg_723 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln29_1_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_1_reg_730 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_reg_736 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln13_reg_742 : STD_LOGIC_VECTOR (0 downto 0);
    signal c_fu_326_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_reg_748 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln16_1_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_reg_753 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln16_1_reg_753_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln16_1_fu_344_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_1_reg_758 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_4_fu_352_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln16_4_reg_763 : STD_LOGIC_VECTOR (3 downto 0);
    signal mpr_fu_360_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal mpr_reg_769 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln16_5_fu_372_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_ln13_5_fu_386_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln13_2_fu_443_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln13_2_reg_785 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal icmp_ln20_1_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln20_1_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_3_fu_652_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln203_3_reg_804 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln29_1_fu_685_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_phi_mux_f_0_phi_fu_143_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_r_0_phi_fu_165_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_c_0_phi_fu_188_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_mpr_0_phi_fu_211_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal zext_ln1494_4_fu_564_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1494_6_fu_607_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln203_6_fu_694_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_244_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln20_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln29_fu_264_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln13_fu_308_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln29_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln13_1_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln13_fu_300_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln16_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln16_fu_366_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln13_1_fu_380_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_407_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_2_fu_394_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_fu_422_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln26_mid1_fu_428_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln29_4_fu_415_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln203_fu_454_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln27_mid1_fu_472_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_3_fu_460_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_2_fu_479_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal or_ln27_1_fu_490_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_4_fu_466_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln16_3_fu_496_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln20_fu_507_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln13_1_fu_436_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_fu_510_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_fu_520_p0 : STD_LOGIC_VECTOR (4 downto 0);
    signal mul_ln1494_fu_520_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln16_fu_486_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1494_fu_526_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_fu_540_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl3_cast_fu_532_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_3_fu_548_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_fu_552_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln26_1_fu_404_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_2_fu_558_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln16_1_fu_503_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1494_3_fu_569_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_583_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl_cast_fu_575_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln1494_5_fu_591_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln1494_1_fu_595_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln1494_4_fu_601_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln203_4_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln203_fu_454_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln203_fu_620_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_634_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl5_cast_fu_626_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln203_5_fu_642_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln26_fu_401_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal sub_ln203_fu_646_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln16_fu_658_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_fu_665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln29_fu_671_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln1494_1_fu_679_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal mul_ln1494_fu_520_p00 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln203_fu_454_p00 : STD_LOGIC_VECTOR (7 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    c_0_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                c_0_reg_184 <= select_ln16_4_reg_763;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                c_0_reg_184 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_139 <= select_ln29_3_reg_723;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_139 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten22_reg_150_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten22_reg_150 <= select_ln13_5_fu_386_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten22_reg_150 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    indvar_flatten59_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten59_reg_128 <= add_ln10_fu_238_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten59_reg_128 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_173 <= select_ln16_5_fu_372_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_173 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    max_0_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                max_0_reg_195 <= select_ln29_1_fu_685_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                max_0_reg_195 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    mpr_0_reg_207_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                mpr_0_reg_207 <= mpr_reg_769;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                mpr_0_reg_207 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    r_0_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                r_0_reg_161 <= select_ln13_2_reg_785;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                r_0_reg_161 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln20_1_fu_612_p2 = ap_const_lv1_1))) then
                add_ln203_3_reg_804 <= add_ln203_3_fu_652_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                and_ln13_reg_742 <= and_ln13_fu_320_p2;
                and_ln29_1_reg_730 <= and_ln29_1_fu_288_p2;
                c_reg_748 <= c_fu_326_p2;
                icmp_ln13_reg_717 <= icmp_ln13_fu_250_p2;
                or_ln13_reg_736 <= or_ln13_fu_294_p2;
                or_ln16_1_reg_753 <= or_ln16_1_fu_338_p2;
                select_ln16_1_reg_758 <= select_ln16_1_fu_344_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln10_reg_708 <= icmp_ln10_fu_232_p2;
                icmp_ln10_reg_708_pp0_iter1_reg <= icmp_ln10_reg_708;
                or_ln16_1_reg_753_pp0_iter1_reg <= or_ln16_1_reg_753;
                    or_ln27_reg_703(4 downto 1) <= or_ln27_fu_226_p2(4 downto 1);
                    shl_ln2_reg_698(4 downto 1) <= shl_ln2_fu_218_p3(4 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln20_1_reg_800 <= icmp_ln20_1_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_fu_232_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mpr_reg_769 <= mpr_fu_360_p2;
                select_ln16_4_reg_763 <= select_ln16_4_fu_352_p3;
                select_ln29_3_reg_723 <= select_ln29_3_fu_256_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                select_ln13_2_reg_785 <= select_ln13_2_fu_443_p3;
            end if;
        end if;
    end process;
    shl_ln2_reg_698(0) <= '0';
    or_ln27_reg_703(0) <= '1';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln10_fu_232_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln10_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln10_fu_232_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln10_fu_238_p2 <= std_logic_vector(unsigned(indvar_flatten59_reg_128) + unsigned(ap_const_lv11_1));
    add_ln13_1_fu_380_p2 <= std_logic_vector(unsigned(indvar_flatten22_reg_150) + unsigned(ap_const_lv9_1));
    add_ln1494_2_fu_558_p2 <= std_logic_vector(unsigned(sub_ln1494_fu_552_p2) + unsigned(zext_ln26_1_fu_404_p1));
    add_ln1494_3_fu_569_p2 <= std_logic_vector(unsigned(mul_ln1494_fu_520_p2) + unsigned(zext_ln16_1_fu_503_p1));
    add_ln1494_4_fu_601_p2 <= std_logic_vector(unsigned(sub_ln1494_1_fu_595_p2) + unsigned(zext_ln26_1_fu_404_p1));
    add_ln1494_fu_526_p2 <= std_logic_vector(unsigned(mul_ln1494_fu_520_p2) + unsigned(zext_ln16_fu_486_p1));
    add_ln16_fu_366_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_173) + unsigned(ap_const_lv6_1));
    add_ln203_3_fu_652_p2 <= std_logic_vector(unsigned(zext_ln26_fu_401_p1) + unsigned(sub_ln203_fu_646_p2));
    add_ln203_fu_620_p2 <= std_logic_vector(unsigned(zext_ln203_4_fu_617_p1) + unsigned(mul_ln203_fu_454_p2));
    and_ln13_fu_320_p2 <= (or_ln13_1_fu_314_p2 and and_ln29_fu_276_p2);
    and_ln29_1_fu_288_p2 <= (xor_ln29_fu_264_p2 and icmp_ln16_fu_282_p2);
    and_ln29_fu_276_p2 <= (xor_ln29_fu_264_p2 and icmp_ln20_fu_270_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln10_fu_232_p2)
    begin
        if ((icmp_ln10_fu_232_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_c_0_phi_fu_188_p4_assign_proc : process(c_0_reg_184, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_708, select_ln16_4_reg_763, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_c_0_phi_fu_188_p4 <= select_ln16_4_reg_763;
        else 
            ap_phi_mux_c_0_phi_fu_188_p4 <= c_0_reg_184;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_143_p4_assign_proc : process(f_0_reg_139, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_708, select_ln29_3_reg_723, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_143_p4 <= select_ln29_3_reg_723;
        else 
            ap_phi_mux_f_0_phi_fu_143_p4 <= f_0_reg_139;
        end if; 
    end process;


    ap_phi_mux_mpr_0_phi_fu_211_p4_assign_proc : process(mpr_0_reg_207, ap_CS_fsm_pp0_stage0, icmp_ln10_reg_708, mpr_reg_769, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_708 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_mpr_0_phi_fu_211_p4 <= mpr_reg_769;
        else 
            ap_phi_mux_mpr_0_phi_fu_211_p4 <= mpr_0_reg_207;
        end if; 
    end process;


    ap_phi_mux_r_0_phi_fu_165_p4_assign_proc : process(r_0_reg_161, icmp_ln10_reg_708_pp0_iter1_reg, select_ln13_2_reg_785, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln10_reg_708_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_r_0_phi_fu_165_p4 <= select_ln13_2_reg_785;
        else 
            ap_phi_mux_r_0_phi_fu_165_p4 <= r_0_reg_161;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_326_p2 <= std_logic_vector(unsigned(select_ln13_fu_300_p3) + unsigned(ap_const_lv4_1));
    conv_out_V_address0 <= zext_ln1494_4_fu_564_p1(12 - 1 downto 0);
    conv_out_V_address1 <= zext_ln1494_6_fu_607_p1(12 - 1 downto 0);

    conv_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_V_ce0 <= ap_const_logic_1;
        else 
            conv_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    conv_out_V_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            conv_out_V_ce1 <= ap_const_logic_1;
        else 
            conv_out_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_244_p2 <= std_logic_vector(unsigned(ap_phi_mux_f_0_phi_fu_143_p4) + unsigned(ap_const_lv3_1));
    i_fu_510_p2 <= std_logic_vector(unsigned(zext_ln20_fu_507_p1) + unsigned(select_ln13_1_fu_436_p3));
    icmp_ln10_fu_232_p2 <= "1" when (indvar_flatten59_reg_128 = ap_const_lv11_7EC) else "0";
    icmp_ln13_fu_250_p2 <= "1" when (indvar_flatten22_reg_150 = ap_const_lv9_152) else "0";
    icmp_ln1494_1_fu_679_p2 <= "1" when (signed(conv_out_V_q1) > signed(select_ln29_fu_671_p3)) else "0";
    icmp_ln1494_fu_665_p2 <= "1" when (signed(conv_out_V_q0) > signed(select_ln16_fu_658_p3)) else "0";
    icmp_ln16_fu_282_p2 <= "1" when (indvar_flatten_reg_173 = ap_const_lv6_1A) else "0";
    icmp_ln20_1_fu_612_p2 <= "1" when (mpr_reg_769 = ap_const_lv2_2) else "0";
    icmp_ln20_fu_270_p2 <= "1" when (ap_phi_mux_mpr_0_phi_fu_211_p4 = ap_const_lv2_2) else "0";
    max_pool_out_V_address0 <= zext_ln203_6_fu_694_p1(10 - 1 downto 0);

    max_pool_out_V_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            max_pool_out_V_ce0 <= ap_const_logic_1;
        else 
            max_pool_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    max_pool_out_V_d0 <= 
        conv_out_V_q1 when (icmp_ln1494_1_fu_679_p2(0) = '1') else 
        select_ln29_fu_671_p3;

    max_pool_out_V_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln20_1_reg_800, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln20_1_reg_800 = ap_const_lv1_1))) then 
            max_pool_out_V_we0 <= ap_const_logic_1;
        else 
            max_pool_out_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    mpr_fu_360_p2 <= std_logic_vector(unsigned(select_ln16_1_fu_344_p3) + unsigned(ap_const_lv2_1));
    mul_ln1494_fu_520_p0 <= mul_ln1494_fu_520_p00(5 - 1 downto 0);
    mul_ln1494_fu_520_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_510_p2),10));
    mul_ln1494_fu_520_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln1494_fu_520_p0) * unsigned(ap_const_lv10_1A), 10));
    mul_ln203_fu_454_p0 <= mul_ln203_fu_454_p00(4 - 1 downto 0);
    mul_ln203_fu_454_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln13_2_fu_443_p3),8));
    mul_ln203_fu_454_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln203_fu_454_p0) * unsigned(ap_const_lv8_D), 8));
    or_ln13_1_fu_314_p2 <= (xor_ln13_fu_308_p2 or icmp_ln13_fu_250_p2);
    or_ln13_fu_294_p2 <= (icmp_ln13_fu_250_p2 or and_ln29_1_fu_288_p2);
    or_ln16_1_fu_338_p2 <= (or_ln16_fu_332_p2 or icmp_ln13_fu_250_p2);
    or_ln16_fu_332_p2 <= (and_ln29_1_fu_288_p2 or and_ln13_fu_320_p2);
    or_ln27_1_fu_490_p2 <= (shl_ln27_mid1_fu_472_p3 or ap_const_lv5_1);
    or_ln27_fu_226_p2 <= (shl_ln2_fu_218_p3 or ap_const_lv5_1);
    p_shl3_cast_fu_532_p3 <= (add_ln1494_fu_526_p2 & ap_const_lv3_0);
    p_shl5_cast_fu_626_p3 <= (add_ln203_fu_620_p2 & ap_const_lv3_0);
    p_shl_cast_fu_575_p3 <= (add_ln1494_3_fu_569_p2 & ap_const_lv3_0);
    r_fu_422_p2 <= std_logic_vector(unsigned(select_ln29_2_fu_394_p3) + unsigned(ap_const_lv4_1));
    select_ln13_1_fu_436_p3 <= 
        shl_ln26_mid1_fu_428_p3 when (and_ln29_1_reg_730(0) = '1') else 
        select_ln29_4_fu_415_p3;
    select_ln13_2_fu_443_p3 <= 
        r_fu_422_p2 when (and_ln29_1_reg_730(0) = '1') else 
        select_ln29_2_fu_394_p3;
    select_ln13_3_fu_460_p3 <= 
        ap_const_lv5_0 when (or_ln13_reg_736(0) = '1') else 
        shl_ln2_reg_698;
    select_ln13_4_fu_466_p3 <= 
        ap_const_lv5_1 when (or_ln13_reg_736(0) = '1') else 
        or_ln27_reg_703;
    select_ln13_5_fu_386_p3 <= 
        ap_const_lv9_1 when (icmp_ln13_fu_250_p2(0) = '1') else 
        add_ln13_1_fu_380_p2;
    select_ln13_fu_300_p3 <= 
        ap_const_lv4_0 when (or_ln13_fu_294_p2(0) = '1') else 
        ap_phi_mux_c_0_phi_fu_188_p4;
    select_ln16_1_fu_344_p3 <= 
        ap_const_lv2_0 when (or_ln16_1_fu_338_p2(0) = '1') else 
        ap_phi_mux_mpr_0_phi_fu_211_p4;
    select_ln16_2_fu_479_p3 <= 
        shl_ln27_mid1_fu_472_p3 when (and_ln13_reg_742(0) = '1') else 
        select_ln13_3_fu_460_p3;
    select_ln16_3_fu_496_p3 <= 
        or_ln27_1_fu_490_p2 when (and_ln13_reg_742(0) = '1') else 
        select_ln13_4_fu_466_p3;
    select_ln16_4_fu_352_p3 <= 
        c_fu_326_p2 when (and_ln13_fu_320_p2(0) = '1') else 
        select_ln13_fu_300_p3;
    select_ln16_5_fu_372_p3 <= 
        ap_const_lv6_1 when (or_ln13_fu_294_p2(0) = '1') else 
        add_ln16_fu_366_p2;
    select_ln16_fu_658_p3 <= 
        ap_const_lv14_0 when (or_ln16_1_reg_753_pp0_iter1_reg(0) = '1') else 
        max_0_reg_195;
    select_ln29_1_fu_685_p3 <= 
        conv_out_V_q1 when (icmp_ln1494_1_fu_679_p2(0) = '1') else 
        select_ln29_fu_671_p3;
    select_ln29_2_fu_394_p3 <= 
        ap_const_lv4_0 when (icmp_ln13_reg_717(0) = '1') else 
        ap_phi_mux_r_0_phi_fu_165_p4;
    select_ln29_3_fu_256_p3 <= 
        f_fu_244_p2 when (icmp_ln13_fu_250_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_143_p4;
    select_ln29_4_fu_415_p3 <= 
        ap_const_lv5_0 when (icmp_ln13_reg_717(0) = '1') else 
        shl_ln_fu_407_p3;
    select_ln29_fu_671_p3 <= 
        conv_out_V_q0 when (icmp_ln1494_fu_665_p2(0) = '1') else 
        select_ln16_fu_658_p3;
    shl_ln26_mid1_fu_428_p3 <= (r_fu_422_p2 & ap_const_lv1_0);
    shl_ln27_mid1_fu_472_p3 <= (c_reg_748 & ap_const_lv1_0);
    shl_ln2_fu_218_p3 <= (ap_phi_mux_c_0_phi_fu_188_p4 & ap_const_lv1_0);
    shl_ln_fu_407_p3 <= (ap_phi_mux_r_0_phi_fu_165_p4 & ap_const_lv1_0);
    sub_ln1494_1_fu_595_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_575_p3) - unsigned(zext_ln1494_5_fu_591_p1));
    sub_ln1494_fu_552_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_532_p3) - unsigned(zext_ln1494_3_fu_548_p1));
    sub_ln203_fu_646_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_626_p3) - unsigned(zext_ln203_5_fu_642_p1));
    tmp_1_fu_583_p3 <= (add_ln1494_3_fu_569_p2 & ap_const_lv1_0);
    tmp_2_fu_634_p3 <= (add_ln203_fu_620_p2 & ap_const_lv1_0);
    tmp_fu_540_p3 <= (add_ln1494_fu_526_p2 & ap_const_lv1_0);
    xor_ln13_fu_308_p2 <= (icmp_ln16_fu_282_p2 xor ap_const_lv1_1);
    xor_ln29_fu_264_p2 <= (icmp_ln13_fu_250_p2 xor ap_const_lv1_1);
    zext_ln1494_3_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_540_p3),13));
    zext_ln1494_4_fu_564_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_2_fu_558_p2),64));
    zext_ln1494_5_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_583_p3),13));
    zext_ln1494_6_fu_607_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1494_4_fu_601_p2),64));
    zext_ln16_1_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_3_fu_496_p3),10));
    zext_ln16_fu_486_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_2_fu_479_p3),10));
    zext_ln203_4_fu_617_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_4_reg_763),8));
    zext_ln203_5_fu_642_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_634_p3),11));
    zext_ln203_6_fu_694_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln203_3_reg_804),64));
    zext_ln20_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln16_1_reg_758),5));
    zext_ln26_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_reg_723),13));
    zext_ln26_fu_401_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln29_3_reg_723),11));
end behav;
