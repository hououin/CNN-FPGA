// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_q0,
        conv_out_V_address1,
        conv_out_V_ce1,
        conv_out_V_q1,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_we0,
        max_pool_out_V_d0
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_pp0_stage0 = 3'd2;
parameter    ap_ST_fsm_state5 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_V_address0;
output   conv_out_V_ce0;
input  [13:0] conv_out_V_q0;
output  [11:0] conv_out_V_address1;
output   conv_out_V_ce1;
input  [13:0] conv_out_V_q1;
output  [9:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
output   max_pool_out_V_we0;
output  [13:0] max_pool_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_V_ce0;
reg conv_out_V_ce1;
reg max_pool_out_V_ce0;
reg max_pool_out_V_we0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [10:0] indvar_flatten59_reg_128;
reg   [2:0] f_0_reg_139;
reg   [8:0] indvar_flatten22_reg_150;
reg   [3:0] r_0_reg_161;
reg   [5:0] indvar_flatten_reg_173;
reg   [3:0] c_0_reg_184;
reg   [13:0] max_0_reg_195;
reg   [1:0] mpr_0_reg_207;
wire   [4:0] shl_ln2_fu_218_p3;
reg   [4:0] shl_ln2_reg_698;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
wire   [4:0] or_ln27_fu_226_p2;
reg   [4:0] or_ln27_reg_703;
wire   [0:0] icmp_ln10_fu_232_p2;
reg   [0:0] icmp_ln10_reg_708;
reg   [0:0] icmp_ln10_reg_708_pp0_iter1_reg;
wire   [10:0] add_ln10_fu_238_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] icmp_ln13_fu_250_p2;
reg   [0:0] icmp_ln13_reg_717;
wire   [2:0] select_ln29_3_fu_256_p3;
reg   [2:0] select_ln29_3_reg_723;
wire   [0:0] and_ln29_1_fu_288_p2;
reg   [0:0] and_ln29_1_reg_730;
wire   [0:0] or_ln13_fu_294_p2;
reg   [0:0] or_ln13_reg_736;
wire   [0:0] and_ln13_fu_320_p2;
reg   [0:0] and_ln13_reg_742;
wire   [3:0] c_fu_326_p2;
reg   [3:0] c_reg_748;
wire   [0:0] or_ln16_1_fu_338_p2;
reg   [0:0] or_ln16_1_reg_753;
reg   [0:0] or_ln16_1_reg_753_pp0_iter1_reg;
wire   [1:0] select_ln16_1_fu_344_p3;
reg   [1:0] select_ln16_1_reg_758;
wire   [3:0] select_ln16_4_fu_352_p3;
reg   [3:0] select_ln16_4_reg_763;
wire   [1:0] mpr_fu_360_p2;
reg   [1:0] mpr_reg_769;
wire   [5:0] select_ln16_5_fu_372_p3;
wire   [8:0] select_ln13_5_fu_386_p3;
wire   [3:0] select_ln13_2_fu_443_p3;
reg   [3:0] select_ln13_2_reg_785;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] icmp_ln20_1_fu_612_p2;
reg   [0:0] icmp_ln20_1_reg_800;
wire   [10:0] add_ln203_3_fu_652_p2;
reg   [10:0] add_ln203_3_reg_804;
wire   [13:0] select_ln29_1_fu_685_p3;
reg    ap_enable_reg_pp0_iter2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg   [2:0] ap_phi_mux_f_0_phi_fu_143_p4;
wire    ap_block_pp0_stage0;
reg   [3:0] ap_phi_mux_r_0_phi_fu_165_p4;
reg   [3:0] ap_phi_mux_c_0_phi_fu_188_p4;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_211_p4;
wire   [63:0] zext_ln1494_4_fu_564_p1;
wire   [63:0] zext_ln1494_6_fu_607_p1;
wire   [63:0] zext_ln203_6_fu_694_p1;
wire   [2:0] f_fu_244_p2;
wire   [0:0] icmp_ln20_fu_270_p2;
wire   [0:0] xor_ln29_fu_264_p2;
wire   [0:0] icmp_ln16_fu_282_p2;
wire   [0:0] xor_ln13_fu_308_p2;
wire   [0:0] and_ln29_fu_276_p2;
wire   [0:0] or_ln13_1_fu_314_p2;
wire   [3:0] select_ln13_fu_300_p3;
wire   [0:0] or_ln16_fu_332_p2;
wire   [5:0] add_ln16_fu_366_p2;
wire   [8:0] add_ln13_1_fu_380_p2;
wire   [4:0] shl_ln_fu_407_p3;
wire   [3:0] select_ln29_2_fu_394_p3;
wire   [3:0] r_fu_422_p2;
wire   [4:0] shl_ln26_mid1_fu_428_p3;
wire   [4:0] select_ln29_4_fu_415_p3;
wire   [3:0] mul_ln203_fu_454_p0;
wire   [4:0] shl_ln27_mid1_fu_472_p3;
wire   [4:0] select_ln13_3_fu_460_p3;
wire   [4:0] select_ln16_2_fu_479_p3;
wire   [4:0] or_ln27_1_fu_490_p2;
wire   [4:0] select_ln13_4_fu_466_p3;
wire   [4:0] select_ln16_3_fu_496_p3;
wire   [4:0] zext_ln20_fu_507_p1;
wire   [4:0] select_ln13_1_fu_436_p3;
wire   [4:0] i_fu_510_p2;
wire   [4:0] mul_ln1494_fu_520_p0;
wire   [9:0] mul_ln1494_fu_520_p2;
wire   [9:0] zext_ln16_fu_486_p1;
wire   [9:0] add_ln1494_fu_526_p2;
wire   [10:0] tmp_fu_540_p3;
wire   [12:0] p_shl3_cast_fu_532_p3;
wire   [12:0] zext_ln1494_3_fu_548_p1;
wire   [12:0] sub_ln1494_fu_552_p2;
wire   [12:0] zext_ln26_1_fu_404_p1;
wire   [12:0] add_ln1494_2_fu_558_p2;
wire   [9:0] zext_ln16_1_fu_503_p1;
wire   [9:0] add_ln1494_3_fu_569_p2;
wire   [10:0] tmp_1_fu_583_p3;
wire   [12:0] p_shl_cast_fu_575_p3;
wire   [12:0] zext_ln1494_5_fu_591_p1;
wire   [12:0] sub_ln1494_1_fu_595_p2;
wire   [12:0] add_ln1494_4_fu_601_p2;
wire   [7:0] zext_ln203_4_fu_617_p1;
wire   [7:0] mul_ln203_fu_454_p2;
wire   [7:0] add_ln203_fu_620_p2;
wire   [8:0] tmp_2_fu_634_p3;
wire   [10:0] p_shl5_cast_fu_626_p3;
wire   [10:0] zext_ln203_5_fu_642_p1;
wire   [10:0] zext_ln26_fu_401_p1;
wire   [10:0] sub_ln203_fu_646_p2;
wire   [13:0] select_ln16_fu_658_p3;
wire   [0:0] icmp_ln1494_fu_665_p2;
wire   [13:0] select_ln29_fu_671_p3;
wire   [0:0] icmp_ln1494_1_fu_679_p2;
wire    ap_CS_fsm_state5;
reg   [2:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] mul_ln1494_fu_520_p00;
wire   [7:0] mul_ln203_fu_454_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        c_0_reg_184 <= select_ln16_4_reg_763;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_184 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        f_0_reg_139 <= select_ln29_3_reg_723;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_139 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten22_reg_150 <= select_ln13_5_fu_386_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten22_reg_150 <= 9'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten59_reg_128 <= add_ln10_fu_238_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten59_reg_128 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_173 <= select_ln16_5_fu_372_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_reg_173 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_0_reg_195 <= select_ln29_1_fu_685_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        max_0_reg_195 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_207 <= mpr_reg_769;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        mpr_0_reg_207 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708_pp0_iter1_reg == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        r_0_reg_161 <= select_ln13_2_reg_785;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_161 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln20_1_fu_612_p2 == 1'd1))) begin
        add_ln203_3_reg_804 <= add_ln203_3_fu_652_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        and_ln13_reg_742 <= and_ln13_fu_320_p2;
        and_ln29_1_reg_730 <= and_ln29_1_fu_288_p2;
        c_reg_748 <= c_fu_326_p2;
        icmp_ln13_reg_717 <= icmp_ln13_fu_250_p2;
        or_ln13_reg_736 <= or_ln13_fu_294_p2;
        or_ln16_1_reg_753 <= or_ln16_1_fu_338_p2;
        select_ln16_1_reg_758 <= select_ln16_1_fu_344_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln10_reg_708 <= icmp_ln10_fu_232_p2;
        icmp_ln10_reg_708_pp0_iter1_reg <= icmp_ln10_reg_708;
        or_ln16_1_reg_753_pp0_iter1_reg <= or_ln16_1_reg_753;
        or_ln27_reg_703[4 : 1] <= or_ln27_fu_226_p2[4 : 1];
        shl_ln2_reg_698[4 : 1] <= shl_ln2_fu_218_p3[4 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_1_reg_800 <= icmp_ln20_1_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_232_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpr_reg_769 <= mpr_fu_360_p2;
        select_ln16_4_reg_763 <= select_ln16_4_fu_352_p3;
        select_ln29_3_reg_723 <= select_ln29_3_fu_256_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        select_ln13_2_reg_785 <= select_ln13_2_fu_443_p3;
    end
end

always @ (*) begin
    if ((icmp_ln10_fu_232_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_c_0_phi_fu_188_p4 = select_ln16_4_reg_763;
    end else begin
        ap_phi_mux_c_0_phi_fu_188_p4 = c_0_reg_184;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_f_0_phi_fu_143_p4 = select_ln29_3_reg_723;
    end else begin
        ap_phi_mux_f_0_phi_fu_143_p4 = f_0_reg_139;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_708 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_211_p4 = mpr_reg_769;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_211_p4 = mpr_0_reg_207;
    end
end

always @ (*) begin
    if (((icmp_ln10_reg_708_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_r_0_phi_fu_165_p4 = select_ln13_2_reg_785;
    end else begin
        ap_phi_mux_r_0_phi_fu_165_p4 = r_0_reg_161;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_V_ce1 = 1'b1;
    end else begin
        conv_out_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (icmp_ln20_1_reg_800 == 1'd1))) begin
        max_pool_out_V_we0 = 1'b1;
    end else begin
        max_pool_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln10_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln10_fu_232_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_238_p2 = (indvar_flatten59_reg_128 + 11'd1);

assign add_ln13_1_fu_380_p2 = (indvar_flatten22_reg_150 + 9'd1);

assign add_ln1494_2_fu_558_p2 = (sub_ln1494_fu_552_p2 + zext_ln26_1_fu_404_p1);

assign add_ln1494_3_fu_569_p2 = (mul_ln1494_fu_520_p2 + zext_ln16_1_fu_503_p1);

assign add_ln1494_4_fu_601_p2 = (sub_ln1494_1_fu_595_p2 + zext_ln26_1_fu_404_p1);

assign add_ln1494_fu_526_p2 = (mul_ln1494_fu_520_p2 + zext_ln16_fu_486_p1);

assign add_ln16_fu_366_p2 = (indvar_flatten_reg_173 + 6'd1);

assign add_ln203_3_fu_652_p2 = (zext_ln26_fu_401_p1 + sub_ln203_fu_646_p2);

assign add_ln203_fu_620_p2 = (zext_ln203_4_fu_617_p1 + mul_ln203_fu_454_p2);

assign and_ln13_fu_320_p2 = (or_ln13_1_fu_314_p2 & and_ln29_fu_276_p2);

assign and_ln29_1_fu_288_p2 = (xor_ln29_fu_264_p2 & icmp_ln16_fu_282_p2);

assign and_ln29_fu_276_p2 = (xor_ln29_fu_264_p2 & icmp_ln20_fu_270_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_326_p2 = (select_ln13_fu_300_p3 + 4'd1);

assign conv_out_V_address0 = zext_ln1494_4_fu_564_p1;

assign conv_out_V_address1 = zext_ln1494_6_fu_607_p1;

assign f_fu_244_p2 = (ap_phi_mux_f_0_phi_fu_143_p4 + 3'd1);

assign i_fu_510_p2 = (zext_ln20_fu_507_p1 + select_ln13_1_fu_436_p3);

assign icmp_ln10_fu_232_p2 = ((indvar_flatten59_reg_128 == 11'd2028) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_250_p2 = ((indvar_flatten22_reg_150 == 9'd338) ? 1'b1 : 1'b0);

assign icmp_ln1494_1_fu_679_p2 = (($signed(conv_out_V_q1) > $signed(select_ln29_fu_671_p3)) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_665_p2 = (($signed(conv_out_V_q0) > $signed(select_ln16_fu_658_p3)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_282_p2 = ((indvar_flatten_reg_173 == 6'd26) ? 1'b1 : 1'b0);

assign icmp_ln20_1_fu_612_p2 = ((mpr_reg_769 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_270_p2 = ((ap_phi_mux_mpr_0_phi_fu_211_p4 == 2'd2) ? 1'b1 : 1'b0);

assign max_pool_out_V_address0 = zext_ln203_6_fu_694_p1;

assign max_pool_out_V_d0 = ((icmp_ln1494_1_fu_679_p2[0:0] === 1'b1) ? conv_out_V_q1 : select_ln29_fu_671_p3);

assign mpr_fu_360_p2 = (select_ln16_1_fu_344_p3 + 2'd1);

assign mul_ln1494_fu_520_p0 = mul_ln1494_fu_520_p00;

assign mul_ln1494_fu_520_p00 = i_fu_510_p2;

assign mul_ln1494_fu_520_p2 = (mul_ln1494_fu_520_p0 * $signed('h1A));

assign mul_ln203_fu_454_p0 = mul_ln203_fu_454_p00;

assign mul_ln203_fu_454_p00 = select_ln13_2_fu_443_p3;

assign mul_ln203_fu_454_p2 = (mul_ln203_fu_454_p0 * $signed('hD));

assign or_ln13_1_fu_314_p2 = (xor_ln13_fu_308_p2 | icmp_ln13_fu_250_p2);

assign or_ln13_fu_294_p2 = (icmp_ln13_fu_250_p2 | and_ln29_1_fu_288_p2);

assign or_ln16_1_fu_338_p2 = (or_ln16_fu_332_p2 | icmp_ln13_fu_250_p2);

assign or_ln16_fu_332_p2 = (and_ln29_1_fu_288_p2 | and_ln13_fu_320_p2);

assign or_ln27_1_fu_490_p2 = (shl_ln27_mid1_fu_472_p3 | 5'd1);

assign or_ln27_fu_226_p2 = (shl_ln2_fu_218_p3 | 5'd1);

assign p_shl3_cast_fu_532_p3 = {{add_ln1494_fu_526_p2}, {3'd0}};

assign p_shl5_cast_fu_626_p3 = {{add_ln203_fu_620_p2}, {3'd0}};

assign p_shl_cast_fu_575_p3 = {{add_ln1494_3_fu_569_p2}, {3'd0}};

assign r_fu_422_p2 = (select_ln29_2_fu_394_p3 + 4'd1);

assign select_ln13_1_fu_436_p3 = ((and_ln29_1_reg_730[0:0] === 1'b1) ? shl_ln26_mid1_fu_428_p3 : select_ln29_4_fu_415_p3);

assign select_ln13_2_fu_443_p3 = ((and_ln29_1_reg_730[0:0] === 1'b1) ? r_fu_422_p2 : select_ln29_2_fu_394_p3);

assign select_ln13_3_fu_460_p3 = ((or_ln13_reg_736[0:0] === 1'b1) ? 5'd0 : shl_ln2_reg_698);

assign select_ln13_4_fu_466_p3 = ((or_ln13_reg_736[0:0] === 1'b1) ? 5'd1 : or_ln27_reg_703);

assign select_ln13_5_fu_386_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? 9'd1 : add_ln13_1_fu_380_p2);

assign select_ln13_fu_300_p3 = ((or_ln13_fu_294_p2[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_c_0_phi_fu_188_p4);

assign select_ln16_1_fu_344_p3 = ((or_ln16_1_fu_338_p2[0:0] === 1'b1) ? 2'd0 : ap_phi_mux_mpr_0_phi_fu_211_p4);

assign select_ln16_2_fu_479_p3 = ((and_ln13_reg_742[0:0] === 1'b1) ? shl_ln27_mid1_fu_472_p3 : select_ln13_3_fu_460_p3);

assign select_ln16_3_fu_496_p3 = ((and_ln13_reg_742[0:0] === 1'b1) ? or_ln27_1_fu_490_p2 : select_ln13_4_fu_466_p3);

assign select_ln16_4_fu_352_p3 = ((and_ln13_fu_320_p2[0:0] === 1'b1) ? c_fu_326_p2 : select_ln13_fu_300_p3);

assign select_ln16_5_fu_372_p3 = ((or_ln13_fu_294_p2[0:0] === 1'b1) ? 6'd1 : add_ln16_fu_366_p2);

assign select_ln16_fu_658_p3 = ((or_ln16_1_reg_753_pp0_iter1_reg[0:0] === 1'b1) ? 14'd0 : max_0_reg_195);

assign select_ln29_1_fu_685_p3 = ((icmp_ln1494_1_fu_679_p2[0:0] === 1'b1) ? conv_out_V_q1 : select_ln29_fu_671_p3);

assign select_ln29_2_fu_394_p3 = ((icmp_ln13_reg_717[0:0] === 1'b1) ? 4'd0 : ap_phi_mux_r_0_phi_fu_165_p4);

assign select_ln29_3_fu_256_p3 = ((icmp_ln13_fu_250_p2[0:0] === 1'b1) ? f_fu_244_p2 : ap_phi_mux_f_0_phi_fu_143_p4);

assign select_ln29_4_fu_415_p3 = ((icmp_ln13_reg_717[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_407_p3);

assign select_ln29_fu_671_p3 = ((icmp_ln1494_fu_665_p2[0:0] === 1'b1) ? conv_out_V_q0 : select_ln16_fu_658_p3);

assign shl_ln26_mid1_fu_428_p3 = {{r_fu_422_p2}, {1'd0}};

assign shl_ln27_mid1_fu_472_p3 = {{c_reg_748}, {1'd0}};

assign shl_ln2_fu_218_p3 = {{ap_phi_mux_c_0_phi_fu_188_p4}, {1'd0}};

assign shl_ln_fu_407_p3 = {{ap_phi_mux_r_0_phi_fu_165_p4}, {1'd0}};

assign sub_ln1494_1_fu_595_p2 = (p_shl_cast_fu_575_p3 - zext_ln1494_5_fu_591_p1);

assign sub_ln1494_fu_552_p2 = (p_shl3_cast_fu_532_p3 - zext_ln1494_3_fu_548_p1);

assign sub_ln203_fu_646_p2 = (p_shl5_cast_fu_626_p3 - zext_ln203_5_fu_642_p1);

assign tmp_1_fu_583_p3 = {{add_ln1494_3_fu_569_p2}, {1'd0}};

assign tmp_2_fu_634_p3 = {{add_ln203_fu_620_p2}, {1'd0}};

assign tmp_fu_540_p3 = {{add_ln1494_fu_526_p2}, {1'd0}};

assign xor_ln13_fu_308_p2 = (icmp_ln16_fu_282_p2 ^ 1'd1);

assign xor_ln29_fu_264_p2 = (icmp_ln13_fu_250_p2 ^ 1'd1);

assign zext_ln1494_3_fu_548_p1 = tmp_fu_540_p3;

assign zext_ln1494_4_fu_564_p1 = add_ln1494_2_fu_558_p2;

assign zext_ln1494_5_fu_591_p1 = tmp_1_fu_583_p3;

assign zext_ln1494_6_fu_607_p1 = add_ln1494_4_fu_601_p2;

assign zext_ln16_1_fu_503_p1 = select_ln16_3_fu_496_p3;

assign zext_ln16_fu_486_p1 = select_ln16_2_fu_479_p3;

assign zext_ln203_4_fu_617_p1 = select_ln16_4_reg_763;

assign zext_ln203_5_fu_642_p1 = tmp_2_fu_634_p3;

assign zext_ln203_6_fu_694_p1 = add_ln203_3_reg_804;

assign zext_ln20_fu_507_p1 = select_ln16_1_reg_758;

assign zext_ln26_1_fu_404_p1 = select_ln29_3_reg_723;

assign zext_ln26_fu_401_p1 = select_ln29_3_reg_723;

always @ (posedge ap_clk) begin
    shl_ln2_reg_698[0] <= 1'b0;
    or_ln27_reg_703[0] <= 1'b1;
end

endmodule //max_pool_1
