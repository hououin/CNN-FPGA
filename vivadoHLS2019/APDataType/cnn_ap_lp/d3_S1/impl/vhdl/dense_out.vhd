-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_out is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_2_out_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    dense_2_out_V_ce0 : OUT STD_LOGIC;
    dense_2_out_V_q0 : IN STD_LOGIC_VECTOR (12 downto 0);
    prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    prediction_V_ce0 : OUT STD_LOGIC;
    prediction_V_we0 : OUT STD_LOGIC;
    prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
end;


architecture behav of dense_out is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv9_12C : STD_LOGIC_VECTOR (8 downto 0) := "100101100";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_1E : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_out_bias_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_out_bias_V_ce0 : STD_LOGIC;
    signal dense_out_bias_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dense_out_weights_V_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal dense_out_weights_V_ce0 : STD_LOGIC;
    signal dense_out_weights_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal indvar_flatten_reg_135 : STD_LOGIC_VECTOR (8 downto 0);
    signal d_0_reg_146 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_Val2_s_reg_157 : STD_LOGIC_VECTOR (13 downto 0);
    signal f_0_reg_169 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln41_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln41_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal add_ln41_fu_199_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln46_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_reg_361 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln48_1_fu_225_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln48_1_reg_366 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln48_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_reg_371 : STD_LOGIC_VECTOR (63 downto 0);
    signal f_fu_288_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal f_reg_386 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln46_1_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_1_reg_391 : STD_LOGIC_VECTOR (0 downto 0);
    signal w_sum_V_fu_323_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal dense_array_V_ce0 : STD_LOGIC;
    signal dense_array_V_we0 : STD_LOGIC;
    signal dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal dense_array_V_q0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_180_ap_start : STD_LOGIC;
    signal grp_soft_max_fu_180_ap_done : STD_LOGIC;
    signal grp_soft_max_fu_180_ap_idle : STD_LOGIC;
    signal grp_soft_max_fu_180_ap_ready : STD_LOGIC;
    signal grp_soft_max_fu_180_dense_array_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_180_dense_array_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_180_dense_array_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_180_dense_array_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_soft_max_fu_180_prediction_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_soft_max_fu_180_prediction_V_ce0 : STD_LOGIC;
    signal grp_soft_max_fu_180_prediction_V_we0 : STD_LOGIC;
    signal grp_soft_max_fu_180_prediction_V_d0 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_phi_mux_d_0_phi_fu_150_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_f_0_phi_fu_173_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_soft_max_fu_180_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal zext_ln1116_2_fu_283_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln48_1_fu_242_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln703_fu_336_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal d_fu_205_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln48_fu_217_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_247_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_259_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln1116_1_fu_267_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln1116_fu_255_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_fu_271_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln47_fu_238_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln1116_1_fu_277_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln48_2_fu_308_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_343_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln1265_fu_332_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_343_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_343_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal grp_fu_343_p00 : STD_LOGIC_VECTOR (21 downto 0);

    component soft_max IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        dense_array_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        dense_array_V_ce0 : OUT STD_LOGIC;
        dense_array_V_we0 : OUT STD_LOGIC;
        dense_array_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        dense_array_V_q0 : IN STD_LOGIC_VECTOR (13 downto 0);
        prediction_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        prediction_V_ce0 : OUT STD_LOGIC;
        prediction_V_we0 : OUT STD_LOGIC;
        prediction_V_d0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;


    component cnn_mac_muladd_13vdy IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_out_dense_osc4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dense_out_dense_otde IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_out_dense_audo IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (13 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (13 downto 0) );
    end component;



begin
    dense_out_bias_V_U : component dense_out_dense_osc4
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_bias_V_address0,
        ce0 => dense_out_bias_V_ce0,
        q0 => dense_out_bias_V_q0);

    dense_out_weights_V_U : component dense_out_dense_otde
    generic map (
        DataWidth => 9,
        AddressRange => 300,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_out_weights_V_address0,
        ce0 => dense_out_weights_V_ce0,
        q0 => dense_out_weights_V_q0);

    dense_array_V_U : component dense_out_dense_audo
    generic map (
        DataWidth => 14,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_array_V_address0,
        ce0 => dense_array_V_ce0,
        we0 => dense_array_V_we0,
        d0 => dense_array_V_d0,
        q0 => dense_array_V_q0);

    grp_soft_max_fu_180 : component soft_max
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_soft_max_fu_180_ap_start,
        ap_done => grp_soft_max_fu_180_ap_done,
        ap_idle => grp_soft_max_fu_180_ap_idle,
        ap_ready => grp_soft_max_fu_180_ap_ready,
        dense_array_V_address0 => grp_soft_max_fu_180_dense_array_V_address0,
        dense_array_V_ce0 => grp_soft_max_fu_180_dense_array_V_ce0,
        dense_array_V_we0 => grp_soft_max_fu_180_dense_array_V_we0,
        dense_array_V_d0 => grp_soft_max_fu_180_dense_array_V_d0,
        dense_array_V_q0 => dense_array_V_q0,
        prediction_V_address0 => grp_soft_max_fu_180_prediction_V_address0,
        prediction_V_ce0 => grp_soft_max_fu_180_prediction_V_ce0,
        prediction_V_we0 => grp_soft_max_fu_180_prediction_V_we0,
        prediction_V_d0 => grp_soft_max_fu_180_prediction_V_d0);

    cnn_mac_muladd_13vdy_U42 : component cnn_mac_muladd_13vdy
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 9,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => grp_fu_343_p0,
        din1 => dense_out_weights_V_q0,
        din2 => grp_fu_343_p2,
        dout => grp_fu_343_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_soft_max_fu_180_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_soft_max_fu_180_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    grp_soft_max_fu_180_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_soft_max_fu_180_ap_ready = ap_const_logic_1)) then 
                    grp_soft_max_fu_180_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    d_0_reg_146_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_352 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                d_0_reg_146 <= select_ln48_1_reg_366;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                d_0_reg_146 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    f_0_reg_169_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_352 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                f_0_reg_169 <= f_reg_386;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                f_0_reg_169 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_135_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_135 <= add_ln41_fu_199_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_135 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    p_Val2_s_reg_157_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_reg_352 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                p_Val2_s_reg_157 <= grp_fu_343_p3(21 downto 8);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                p_Val2_s_reg_157 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_fu_193_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                f_reg_386 <= f_fu_288_p2;
                select_ln48_1_reg_366 <= select_ln48_1_fu_225_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln41_reg_352 <= icmp_ln41_fu_193_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln41_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln46_1_reg_391 <= icmp_ln46_1_fu_294_p2;
                icmp_ln46_reg_361 <= icmp_ln46_fu_211_p2;
                    zext_ln48_reg_371(3 downto 0) <= zext_ln48_fu_233_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln48_reg_371(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln41_fu_193_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, grp_soft_max_fu_180_ap_done, ap_CS_fsm_state5)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((icmp_ln41_fu_193_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((icmp_ln41_fu_193_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_soft_max_fu_180_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    add_ln1116_1_fu_277_p2 <= std_logic_vector(unsigned(add_ln1116_fu_271_p2) + unsigned(zext_ln47_fu_238_p1));
    add_ln1116_fu_271_p2 <= std_logic_vector(unsigned(zext_ln1116_1_fu_267_p1) + unsigned(zext_ln1116_fu_255_p1));
    add_ln41_fu_199_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_135) + unsigned(ap_const_lv9_1));
    add_ln703_fu_336_p2 <= std_logic_vector(signed(sext_ln1265_fu_332_p1) + signed(w_sum_V_fu_323_p4));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln41_fu_193_p2)
    begin
        if ((icmp_ln41_fu_193_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_soft_max_fu_180_ap_done, ap_CS_fsm_state5)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_soft_max_fu_180_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_d_0_phi_fu_150_p4_assign_proc : process(d_0_reg_146, icmp_ln41_reg_352, ap_CS_fsm_pp0_stage0, select_ln48_1_reg_366, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln41_reg_352 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_d_0_phi_fu_150_p4 <= select_ln48_1_reg_366;
        else 
            ap_phi_mux_d_0_phi_fu_150_p4 <= d_0_reg_146;
        end if; 
    end process;


    ap_phi_mux_f_0_phi_fu_173_p4_assign_proc : process(f_0_reg_169, icmp_ln41_reg_352, ap_CS_fsm_pp0_stage0, f_reg_386, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln41_reg_352 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_f_0_phi_fu_173_p4 <= f_reg_386;
        else 
            ap_phi_mux_f_0_phi_fu_173_p4 <= f_0_reg_169;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_soft_max_fu_180_ap_done, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (grp_soft_max_fu_180_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    d_fu_205_p2 <= std_logic_vector(unsigned(ap_phi_mux_d_0_phi_fu_150_p4) + unsigned(ap_const_lv4_1));
    dense_2_out_V_address0 <= zext_ln48_1_fu_242_p1(5 - 1 downto 0);

    dense_2_out_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_2_out_V_ce0 <= ap_const_logic_1;
        else 
            dense_2_out_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln48_reg_371, ap_enable_reg_pp0_iter1, grp_soft_max_fu_180_dense_array_V_address0, ap_block_pp0_stage0, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_array_V_address0 <= zext_ln48_reg_371(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_array_V_address0 <= grp_soft_max_fu_180_dense_array_V_address0;
        else 
            dense_array_V_address0 <= "XXXX";
        end if; 
    end process;


    dense_array_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_soft_max_fu_180_dense_array_V_ce0, ap_CS_fsm_state5)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dense_array_V_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_array_V_ce0 <= grp_soft_max_fu_180_dense_array_V_ce0;
        else 
            dense_array_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_array_V_d0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_soft_max_fu_180_dense_array_V_d0, ap_block_pp0_stage0, ap_CS_fsm_state5, add_ln703_fu_336_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_array_V_d0 <= add_ln703_fu_336_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_array_V_d0 <= grp_soft_max_fu_180_dense_array_V_d0;
        else 
            dense_array_V_d0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_array_V_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln46_1_reg_391, ap_enable_reg_pp0_iter1, grp_soft_max_fu_180_dense_array_V_we0, ap_CS_fsm_state5)
    begin
        if (((icmp_ln46_1_reg_391 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            dense_array_V_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_array_V_we0 <= grp_soft_max_fu_180_dense_array_V_we0;
        else 
            dense_array_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_bias_V_address0 <= zext_ln48_fu_233_p1(4 - 1 downto 0);

    dense_out_bias_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_out_bias_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_bias_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_out_weights_V_address0 <= zext_ln1116_2_fu_283_p1(9 - 1 downto 0);

    dense_out_weights_V_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dense_out_weights_V_ce0 <= ap_const_logic_1;
        else 
            dense_out_weights_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    f_fu_288_p2 <= std_logic_vector(unsigned(select_ln48_fu_217_p3) + unsigned(ap_const_lv5_1));
    grp_fu_343_p0 <= grp_fu_343_p00(13 - 1 downto 0);
    grp_fu_343_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_out_V_q0),22));
    grp_fu_343_p2 <= (select_ln48_2_fu_308_p3 & ap_const_lv8_0);
    grp_soft_max_fu_180_ap_start <= grp_soft_max_fu_180_ap_start_reg;
    icmp_ln41_fu_193_p2 <= "1" when (indvar_flatten_reg_135 = ap_const_lv9_12C) else "0";
    icmp_ln46_1_fu_294_p2 <= "1" when (f_fu_288_p2 = ap_const_lv5_1E) else "0";
    icmp_ln46_fu_211_p2 <= "1" when (ap_phi_mux_f_0_phi_fu_173_p4 = ap_const_lv5_1E) else "0";
    prediction_V_address0 <= grp_soft_max_fu_180_prediction_V_address0;
    prediction_V_ce0 <= grp_soft_max_fu_180_prediction_V_ce0;
    prediction_V_d0 <= grp_soft_max_fu_180_prediction_V_d0;
    prediction_V_we0 <= grp_soft_max_fu_180_prediction_V_we0;
    select_ln48_1_fu_225_p3 <= 
        d_fu_205_p2 when (icmp_ln46_fu_211_p2(0) = '1') else 
        ap_phi_mux_d_0_phi_fu_150_p4;
    select_ln48_2_fu_308_p3 <= 
        ap_const_lv14_0 when (icmp_ln46_reg_361(0) = '1') else 
        p_Val2_s_reg_157;
    select_ln48_fu_217_p3 <= 
        ap_const_lv5_0 when (icmp_ln46_fu_211_p2(0) = '1') else 
        ap_phi_mux_f_0_phi_fu_173_p4;
        sext_ln1265_fu_332_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(dense_out_bias_V_q0),14));

    tmp_fu_247_p3 <= (select_ln48_fu_217_p3 & ap_const_lv3_0);
    tmp_s_fu_259_p3 <= (select_ln48_fu_217_p3 & ap_const_lv1_0);
    w_sum_V_fu_323_p4 <= grp_fu_343_p3(21 downto 8);
    zext_ln1116_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_259_p3),9));
    zext_ln1116_2_fu_283_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1116_1_fu_277_p2),64));
    zext_ln1116_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_247_p3),9));
    zext_ln47_fu_238_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_1_fu_225_p3),9));
    zext_ln48_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_217_p3),64));
    zext_ln48_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_1_fu_225_p3),64));
end behav;
