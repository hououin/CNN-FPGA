// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module max_pool_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        conv_out_V_address0,
        conv_out_V_ce0,
        conv_out_V_q0,
        max_pool_out_V_address0,
        max_pool_out_V_ce0,
        max_pool_out_V_we0,
        max_pool_out_V_d0
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] conv_out_V_address0;
output   conv_out_V_ce0;
input  [13:0] conv_out_V_q0;
output  [9:0] max_pool_out_V_address0;
output   max_pool_out_V_ce0;
output   max_pool_out_V_we0;
output  [13:0] max_pool_out_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg conv_out_V_ce0;
reg max_pool_out_V_ce0;
reg max_pool_out_V_we0;

(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] indvar_flatten_reg_172;
reg   [1:0] mpr_0_reg_183;
reg   [13:0] max_1_reg_194;
reg   [1:0] mpc_0_reg_207;
wire   [0:0] icmp_ln10_fu_218_p2;
wire    ap_CS_fsm_state2;
wire   [9:0] add_ln10_fu_224_p2;
reg   [9:0] add_ln10_reg_556;
wire   [0:0] icmp_ln13_fu_236_p2;
reg   [0:0] icmp_ln13_reg_561;
wire   [2:0] select_ln29_2_fu_250_p3;
reg   [2:0] select_ln29_2_reg_566;
wire   [12:0] zext_ln26_fu_258_p1;
reg   [12:0] zext_ln26_reg_571;
wire   [10:0] zext_ln26_1_fu_262_p1;
reg   [10:0] zext_ln26_1_reg_576;
wire   [3:0] select_ln13_fu_312_p3;
reg   [3:0] select_ln13_reg_581;
wire   [4:0] select_ln13_1_fu_328_p3;
reg   [4:0] select_ln13_1_reg_587;
wire   [3:0] select_ln13_2_fu_336_p3;
reg   [3:0] select_ln13_2_reg_592;
wire   [7:0] mul_ln203_fu_348_p2;
reg   [7:0] mul_ln203_reg_597;
wire   [4:0] shl_ln2_fu_354_p3;
reg   [4:0] shl_ln2_reg_602;
wire   [0:0] icmp_ln20_fu_362_p2;
reg   [0:0] icmp_ln20_reg_607;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state3_pp0_stage0_iter0;
wire    ap_block_state4_pp0_stage0_iter1;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln20_reg_607_pp0_iter1_reg;
wire   [2:0] add_ln20_1_fu_368_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] select_ln20_fu_386_p3;
reg   [1:0] select_ln20_reg_616;
wire   [1:0] select_ln20_1_fu_394_p3;
reg   [1:0] select_ln20_1_reg_621;
wire   [1:0] mpc_fu_402_p2;
wire   [13:0] select_ln29_fu_472_p3;
reg    ap_enable_reg_pp0_iter2;
wire   [3:0] c_fu_524_p2;
wire    ap_CS_fsm_state6;
wire   [7:0] select_ln13_3_fu_535_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter1;
reg   [9:0] indvar_flatten25_reg_116;
reg   [2:0] f_0_reg_127;
reg   [7:0] indvar_flatten7_reg_138;
reg   [3:0] r_0_reg_150;
reg   [3:0] c_0_reg_161;
reg   [1:0] ap_phi_mux_mpr_0_phi_fu_187_p4;
wire    ap_block_pp0_stage0;
wire   [63:0] zext_ln1494_5_fu_461_p1;
wire   [63:0] zext_ln203_6_fu_519_p1;
wire   [2:0] f_fu_230_p2;
wire   [4:0] shl_ln_fu_266_p3;
wire   [0:0] icmp_ln16_fu_288_p2;
wire   [0:0] xor_ln29_fu_282_p2;
wire   [3:0] select_ln29_1_fu_242_p3;
wire   [0:0] and_ln29_fu_294_p2;
wire   [0:0] or_ln13_fu_306_p2;
wire   [3:0] r_fu_300_p2;
wire   [4:0] shl_ln26_mid1_fu_320_p3;
wire   [4:0] select_ln29_3_fu_274_p3;
wire   [3:0] mul_ln203_fu_348_p0;
wire   [0:0] icmp_ln23_fu_380_p2;
wire   [1:0] mpr_fu_374_p2;
wire   [4:0] zext_ln20_fu_408_p1;
wire   [4:0] add_ln20_fu_411_p2;
wire   [4:0] zext_ln23_fu_420_p1;
wire   [4:0] j_fu_423_p2;
wire   [9:0] grp_fu_542_p3;
wire   [10:0] tmp_1_fu_439_p3;
wire   [12:0] p_shl_cast_fu_432_p3;
wire   [12:0] zext_ln1494_4_fu_446_p1;
wire   [12:0] sub_ln1494_fu_450_p2;
wire   [12:0] add_ln1494_2_fu_456_p2;
wire   [0:0] icmp_ln1494_fu_466_p2;
wire   [7:0] zext_ln203_4_fu_480_p1;
wire   [7:0] add_ln203_fu_483_p2;
wire   [8:0] tmp_fu_496_p3;
wire   [10:0] p_shl2_cast_fu_488_p3;
wire   [10:0] zext_ln203_5_fu_504_p1;
wire   [10:0] sub_ln203_fu_508_p2;
wire   [10:0] add_ln203_3_fu_514_p2;
wire   [7:0] add_ln13_1_fu_529_p2;
wire   [4:0] grp_fu_542_p0;
wire   [5:0] grp_fu_542_p1;
wire   [4:0] grp_fu_542_p2;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [9:0] grp_fu_542_p00;
wire   [9:0] grp_fu_542_p20;
wire   [7:0] mul_ln203_fu_348_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

cnn_mac_muladd_5nfYi #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 5 ),
    .din1_WIDTH( 6 ),
    .din2_WIDTH( 5 ),
    .dout_WIDTH( 10 ))
cnn_mac_muladd_5nfYi_U9(
    .din0(grp_fu_542_p0),
    .din1(grp_fu_542_p1),
    .din2(grp_fu_542_p2),
    .dout(grp_fu_542_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        c_0_reg_161 <= c_fu_524_p2;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        c_0_reg_161 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        f_0_reg_127 <= select_ln29_2_reg_566;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        f_0_reg_127 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten25_reg_116 <= add_ln10_reg_556;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten25_reg_116 <= 10'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        indvar_flatten7_reg_138 <= select_ln13_3_fu_535_p3;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten7_reg_138 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        indvar_flatten_reg_172 <= add_ln20_1_fu_368_p2;
    end else if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvar_flatten_reg_172 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_607_pp0_iter1_reg == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        max_1_reg_194 <= select_ln29_fu_472_p3;
    end else if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        max_1_reg_194 <= 14'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mpc_0_reg_207 <= mpc_fu_402_p2;
    end else if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpc_0_reg_207 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_reg_607 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        mpr_0_reg_183 <= select_ln20_1_reg_621;
    end else if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        mpr_0_reg_183 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_0_reg_150 <= select_ln13_2_reg_592;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        r_0_reg_150 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln10_reg_556 <= add_ln10_fu_224_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln10_fu_218_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        icmp_ln13_reg_561 <= icmp_ln13_fu_236_p2;
        mul_ln203_reg_597 <= mul_ln203_fu_348_p2;
        select_ln13_1_reg_587[4 : 1] <= select_ln13_1_fu_328_p3[4 : 1];
        select_ln13_2_reg_592 <= select_ln13_2_fu_336_p3;
        select_ln13_reg_581 <= select_ln13_fu_312_p3;
        select_ln29_2_reg_566 <= select_ln29_2_fu_250_p3;
        shl_ln2_reg_602[4 : 1] <= shl_ln2_fu_354_p3[4 : 1];
        zext_ln26_1_reg_576[2 : 0] <= zext_ln26_1_fu_262_p1[2 : 0];
        zext_ln26_reg_571[2 : 0] <= zext_ln26_fu_258_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln20_reg_607 <= icmp_ln20_fu_362_p2;
        icmp_ln20_reg_607_pp0_iter1_reg <= icmp_ln20_reg_607;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_362_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln20_1_reg_621 <= select_ln20_1_fu_394_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln20_fu_362_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln20_reg_616 <= select_ln20_fu_386_p3;
    end
end

always @ (*) begin
    if ((icmp_ln20_fu_362_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((((icmp_ln10_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln20_reg_607 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_mpr_0_phi_fu_187_p4 = select_ln20_1_reg_621;
    end else begin
        ap_phi_mux_mpr_0_phi_fu_187_p4 = mpr_0_reg_183;
    end
end

always @ (*) begin
    if (((icmp_ln10_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        conv_out_V_ce0 = 1'b1;
    end else begin
        conv_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_out_V_ce0 = 1'b1;
    end else begin
        max_pool_out_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        max_pool_out_V_we0 = 1'b1;
    end else begin
        max_pool_out_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln10_fu_218_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln20_fu_362_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((icmp_ln20_fu_362_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln10_fu_224_p2 = (indvar_flatten25_reg_116 + 10'd1);

assign add_ln13_1_fu_529_p2 = (indvar_flatten7_reg_138 + 8'd1);

assign add_ln1494_2_fu_456_p2 = (zext_ln26_reg_571 + sub_ln1494_fu_450_p2);

assign add_ln203_3_fu_514_p2 = (zext_ln26_1_reg_576 + sub_ln203_fu_508_p2);

assign add_ln203_fu_483_p2 = (zext_ln203_4_fu_480_p1 + mul_ln203_reg_597);

assign add_ln20_1_fu_368_p2 = (indvar_flatten_reg_172 + 3'd1);

assign add_ln20_fu_411_p2 = (select_ln13_1_reg_587 + zext_ln20_fu_408_p1);

assign and_ln29_fu_294_p2 = (xor_ln29_fu_282_p2 & icmp_ln16_fu_288_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign c_fu_524_p2 = (select_ln13_reg_581 + 4'd1);

assign conv_out_V_address0 = zext_ln1494_5_fu_461_p1;

assign f_fu_230_p2 = (f_0_reg_127 + 3'd1);

assign grp_fu_542_p0 = grp_fu_542_p00;

assign grp_fu_542_p00 = add_ln20_fu_411_p2;

assign grp_fu_542_p1 = 10'd26;

assign grp_fu_542_p2 = grp_fu_542_p20;

assign grp_fu_542_p20 = j_fu_423_p2;

assign icmp_ln10_fu_218_p2 = ((indvar_flatten25_reg_116 == 10'd1014) ? 1'b1 : 1'b0);

assign icmp_ln13_fu_236_p2 = ((indvar_flatten7_reg_138 == 8'd169) ? 1'b1 : 1'b0);

assign icmp_ln1494_fu_466_p2 = (($signed(conv_out_V_q0) > $signed(max_1_reg_194)) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_288_p2 = ((c_0_reg_161 == 4'd13) ? 1'b1 : 1'b0);

assign icmp_ln20_fu_362_p2 = ((indvar_flatten_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_380_p2 = ((mpc_0_reg_207 == 2'd2) ? 1'b1 : 1'b0);

assign j_fu_423_p2 = (shl_ln2_reg_602 + zext_ln23_fu_420_p1);

assign max_pool_out_V_address0 = zext_ln203_6_fu_519_p1;

assign max_pool_out_V_d0 = max_1_reg_194;

assign mpc_fu_402_p2 = (select_ln20_fu_386_p3 + 2'd1);

assign mpr_fu_374_p2 = (ap_phi_mux_mpr_0_phi_fu_187_p4 + 2'd1);

assign mul_ln203_fu_348_p0 = mul_ln203_fu_348_p00;

assign mul_ln203_fu_348_p00 = select_ln13_2_fu_336_p3;

assign mul_ln203_fu_348_p2 = (mul_ln203_fu_348_p0 * $signed('hD));

assign or_ln13_fu_306_p2 = (icmp_ln13_fu_236_p2 | and_ln29_fu_294_p2);

assign p_shl2_cast_fu_488_p3 = {{add_ln203_fu_483_p2}, {3'd0}};

assign p_shl_cast_fu_432_p3 = {{grp_fu_542_p3}, {3'd0}};

assign r_fu_300_p2 = (select_ln29_1_fu_242_p3 + 4'd1);

assign select_ln13_1_fu_328_p3 = ((and_ln29_fu_294_p2[0:0] === 1'b1) ? shl_ln26_mid1_fu_320_p3 : select_ln29_3_fu_274_p3);

assign select_ln13_2_fu_336_p3 = ((and_ln29_fu_294_p2[0:0] === 1'b1) ? r_fu_300_p2 : select_ln29_1_fu_242_p3);

assign select_ln13_3_fu_535_p3 = ((icmp_ln13_reg_561[0:0] === 1'b1) ? 8'd1 : add_ln13_1_fu_529_p2);

assign select_ln13_fu_312_p3 = ((or_ln13_fu_306_p2[0:0] === 1'b1) ? 4'd0 : c_0_reg_161);

assign select_ln20_1_fu_394_p3 = ((icmp_ln23_fu_380_p2[0:0] === 1'b1) ? mpr_fu_374_p2 : ap_phi_mux_mpr_0_phi_fu_187_p4);

assign select_ln20_fu_386_p3 = ((icmp_ln23_fu_380_p2[0:0] === 1'b1) ? 2'd0 : mpc_0_reg_207);

assign select_ln29_1_fu_242_p3 = ((icmp_ln13_fu_236_p2[0:0] === 1'b1) ? 4'd0 : r_0_reg_150);

assign select_ln29_2_fu_250_p3 = ((icmp_ln13_fu_236_p2[0:0] === 1'b1) ? f_fu_230_p2 : f_0_reg_127);

assign select_ln29_3_fu_274_p3 = ((icmp_ln13_fu_236_p2[0:0] === 1'b1) ? 5'd0 : shl_ln_fu_266_p3);

assign select_ln29_fu_472_p3 = ((icmp_ln1494_fu_466_p2[0:0] === 1'b1) ? conv_out_V_q0 : max_1_reg_194);

assign shl_ln26_mid1_fu_320_p3 = {{r_fu_300_p2}, {1'd0}};

assign shl_ln2_fu_354_p3 = {{select_ln13_fu_312_p3}, {1'd0}};

assign shl_ln_fu_266_p3 = {{r_0_reg_150}, {1'd0}};

assign sub_ln1494_fu_450_p2 = (p_shl_cast_fu_432_p3 - zext_ln1494_4_fu_446_p1);

assign sub_ln203_fu_508_p2 = (p_shl2_cast_fu_488_p3 - zext_ln203_5_fu_504_p1);

assign tmp_1_fu_439_p3 = {{grp_fu_542_p3}, {1'd0}};

assign tmp_fu_496_p3 = {{add_ln203_fu_483_p2}, {1'd0}};

assign xor_ln29_fu_282_p2 = (icmp_ln13_fu_236_p2 ^ 1'd1);

assign zext_ln1494_4_fu_446_p1 = tmp_1_fu_439_p3;

assign zext_ln1494_5_fu_461_p1 = add_ln1494_2_fu_456_p2;

assign zext_ln203_4_fu_480_p1 = select_ln13_reg_581;

assign zext_ln203_5_fu_504_p1 = tmp_fu_496_p3;

assign zext_ln203_6_fu_519_p1 = add_ln203_3_fu_514_p2;

assign zext_ln20_fu_408_p1 = select_ln20_1_reg_621;

assign zext_ln23_fu_420_p1 = select_ln20_reg_616;

assign zext_ln26_1_fu_262_p1 = select_ln29_2_fu_250_p3;

assign zext_ln26_fu_258_p1 = select_ln29_2_fu_250_p3;

always @ (posedge ap_clk) begin
    zext_ln26_reg_571[12:3] <= 10'b0000000000;
    zext_ln26_1_reg_576[10:3] <= 8'b00000000;
    select_ln13_1_reg_587[0] <= 1'b0;
    shl_ln2_reg_602[0] <= 1'b0;
end

endmodule //max_pool_1
